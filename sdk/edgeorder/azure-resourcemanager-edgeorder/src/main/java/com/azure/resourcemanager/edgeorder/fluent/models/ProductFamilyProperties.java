// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.edgeorder.models.AvailabilityInformation;
import com.azure.resourcemanager.edgeorder.models.CommonProperties;
import com.azure.resourcemanager.edgeorder.models.CostInformation;
import com.azure.resourcemanager.edgeorder.models.Description;
import com.azure.resourcemanager.edgeorder.models.FilterableProperty;
import com.azure.resourcemanager.edgeorder.models.HierarchyInformation;
import com.azure.resourcemanager.edgeorder.models.ImageInformation;
import com.azure.resourcemanager.edgeorder.models.ProductLine;
import com.azure.resourcemanager.edgeorder.models.ResourceProviderDetails;
import java.io.IOException;
import java.util.List;

/**
 * Properties of product family.
 */
@Fluent
public final class ProductFamilyProperties extends CommonProperties {
    /*
     * List of product lines supported in the product family
     */
    private List<ProductLine> productLines;

    /*
     * Contains details related to resource provider
     */
    private List<ResourceProviderDetails> resourceProviderDetails;

    /*
     * list of filters supported for a product
     */
    private List<FilterableProperty> filterableProperties;

    /*
     * Hierarchy information of a product.
     */
    private HierarchyInformation hierarchyInformation;

    /*
     * Availability information of the product system.
     */
    private AvailabilityInformation availabilityInformation;

    /*
     * Cost information for the product system.
     */
    private CostInformation costInformation;

    /*
     * Image information for the product system.
     */
    private List<ImageInformation> imageInformation;

    /*
     * Description related to the product system.
     */
    private Description description;

    /*
     * Display Name for the product system.
     */
    private String displayName;

    /**
     * Creates an instance of ProductFamilyProperties class.
     */
    public ProductFamilyProperties() {
    }

    /**
     * Get the productLines property: List of product lines supported in the product family.
     * 
     * @return the productLines value.
     */
    public List<ProductLine> productLines() {
        return this.productLines;
    }

    /**
     * Get the resourceProviderDetails property: Contains details related to resource provider.
     * 
     * @return the resourceProviderDetails value.
     */
    public List<ResourceProviderDetails> resourceProviderDetails() {
        return this.resourceProviderDetails;
    }

    /**
     * Set the resourceProviderDetails property: Contains details related to resource provider.
     * 
     * @param resourceProviderDetails the resourceProviderDetails value to set.
     * @return the ProductFamilyProperties object itself.
     */
    public ProductFamilyProperties withResourceProviderDetails(List<ResourceProviderDetails> resourceProviderDetails) {
        this.resourceProviderDetails = resourceProviderDetails;
        return this;
    }

    /**
     * Get the filterableProperties property: list of filters supported for a product.
     * 
     * @return the filterableProperties value.
     */
    @Override
    public List<FilterableProperty> filterableProperties() {
        return this.filterableProperties;
    }

    /**
     * Get the hierarchyInformation property: Hierarchy information of a product.
     * 
     * @return the hierarchyInformation value.
     */
    @Override
    public HierarchyInformation hierarchyInformation() {
        return this.hierarchyInformation;
    }

    /**
     * Get the availabilityInformation property: Availability information of the product system.
     * 
     * @return the availabilityInformation value.
     */
    @Override
    public AvailabilityInformation availabilityInformation() {
        return this.availabilityInformation;
    }

    /**
     * Get the costInformation property: Cost information for the product system.
     * 
     * @return the costInformation value.
     */
    @Override
    public CostInformation costInformation() {
        return this.costInformation;
    }

    /**
     * Get the imageInformation property: Image information for the product system.
     * 
     * @return the imageInformation value.
     */
    @Override
    public List<ImageInformation> imageInformation() {
        return this.imageInformation;
    }

    /**
     * Get the description property: Description related to the product system.
     * 
     * @return the description value.
     */
    @Override
    public Description description() {
        return this.description;
    }

    /**
     * Get the displayName property: Display Name for the product system.
     * 
     * @return the displayName value.
     */
    @Override
    public String displayName() {
        return this.displayName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (productLines() != null) {
            productLines().forEach(e -> e.validate());
        }
        if (resourceProviderDetails() != null) {
            resourceProviderDetails().forEach(e -> e.validate());
        }
        if (description() != null) {
            description().validate();
        }
        if (imageInformation() != null) {
            imageInformation().forEach(e -> e.validate());
        }
        if (costInformation() != null) {
            costInformation().validate();
        }
        if (availabilityInformation() != null) {
            availabilityInformation().validate();
        }
        if (hierarchyInformation() != null) {
            hierarchyInformation().validate();
        }
        if (filterableProperties() != null) {
            filterableProperties().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourceProviderDetails", this.resourceProviderDetails,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProductFamilyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProductFamilyProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProductFamilyProperties.
     */
    public static ProductFamilyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProductFamilyProperties deserializedProductFamilyProperties = new ProductFamilyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedProductFamilyProperties.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedProductFamilyProperties.description = Description.fromJson(reader);
                } else if ("imageInformation".equals(fieldName)) {
                    List<ImageInformation> imageInformation
                        = reader.readArray(reader1 -> ImageInformation.fromJson(reader1));
                    deserializedProductFamilyProperties.imageInformation = imageInformation;
                } else if ("costInformation".equals(fieldName)) {
                    deserializedProductFamilyProperties.costInformation = CostInformation.fromJson(reader);
                } else if ("availabilityInformation".equals(fieldName)) {
                    deserializedProductFamilyProperties.availabilityInformation
                        = AvailabilityInformation.fromJson(reader);
                } else if ("hierarchyInformation".equals(fieldName)) {
                    deserializedProductFamilyProperties.hierarchyInformation = HierarchyInformation.fromJson(reader);
                } else if ("filterableProperties".equals(fieldName)) {
                    List<FilterableProperty> filterableProperties
                        = reader.readArray(reader1 -> FilterableProperty.fromJson(reader1));
                    deserializedProductFamilyProperties.filterableProperties = filterableProperties;
                } else if ("productLines".equals(fieldName)) {
                    List<ProductLine> productLines = reader.readArray(reader1 -> ProductLine.fromJson(reader1));
                    deserializedProductFamilyProperties.productLines = productLines;
                } else if ("resourceProviderDetails".equals(fieldName)) {
                    List<ResourceProviderDetails> resourceProviderDetails
                        = reader.readArray(reader1 -> ResourceProviderDetails.fromJson(reader1));
                    deserializedProductFamilyProperties.resourceProviderDetails = resourceProviderDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProductFamilyProperties;
        });
    }
}
