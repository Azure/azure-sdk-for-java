// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.edgeorder.models.Preferences;
import java.io.IOException;
import java.util.List;

/**
 * Order item update properties.
 */
@Fluent
public final class OrderItemUpdateProperties implements JsonSerializable<OrderItemUpdateProperties> {
    /*
     * Updates forward shipping address and contact details.
     */
    private AddressProperties forwardAddress;

    /*
     * Customer preference.
     */
    private Preferences preferences;

    /*
     * Additional notification email list.
     */
    private List<String> notificationEmailList;

    /**
     * Creates an instance of OrderItemUpdateProperties class.
     */
    public OrderItemUpdateProperties() {
    }

    /**
     * Get the forwardAddress property: Updates forward shipping address and contact details.
     * 
     * @return the forwardAddress value.
     */
    public AddressProperties forwardAddress() {
        return this.forwardAddress;
    }

    /**
     * Set the forwardAddress property: Updates forward shipping address and contact details.
     * 
     * @param forwardAddress the forwardAddress value to set.
     * @return the OrderItemUpdateProperties object itself.
     */
    public OrderItemUpdateProperties withForwardAddress(AddressProperties forwardAddress) {
        this.forwardAddress = forwardAddress;
        return this;
    }

    /**
     * Get the preferences property: Customer preference.
     * 
     * @return the preferences value.
     */
    public Preferences preferences() {
        return this.preferences;
    }

    /**
     * Set the preferences property: Customer preference.
     * 
     * @param preferences the preferences value to set.
     * @return the OrderItemUpdateProperties object itself.
     */
    public OrderItemUpdateProperties withPreferences(Preferences preferences) {
        this.preferences = preferences;
        return this;
    }

    /**
     * Get the notificationEmailList property: Additional notification email list.
     * 
     * @return the notificationEmailList value.
     */
    public List<String> notificationEmailList() {
        return this.notificationEmailList;
    }

    /**
     * Set the notificationEmailList property: Additional notification email list.
     * 
     * @param notificationEmailList the notificationEmailList value to set.
     * @return the OrderItemUpdateProperties object itself.
     */
    public OrderItemUpdateProperties withNotificationEmailList(List<String> notificationEmailList) {
        this.notificationEmailList = notificationEmailList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (forwardAddress() != null) {
            forwardAddress().validate();
        }
        if (preferences() != null) {
            preferences().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("forwardAddress", this.forwardAddress);
        jsonWriter.writeJsonField("preferences", this.preferences);
        jsonWriter.writeArrayField("notificationEmailList", this.notificationEmailList,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrderItemUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrderItemUpdateProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OrderItemUpdateProperties.
     */
    public static OrderItemUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrderItemUpdateProperties deserializedOrderItemUpdateProperties = new OrderItemUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("forwardAddress".equals(fieldName)) {
                    deserializedOrderItemUpdateProperties.forwardAddress = AddressProperties.fromJson(reader);
                } else if ("preferences".equals(fieldName)) {
                    deserializedOrderItemUpdateProperties.preferences = Preferences.fromJson(reader);
                } else if ("notificationEmailList".equals(fieldName)) {
                    List<String> notificationEmailList = reader.readArray(reader1 -> reader1.getString());
                    deserializedOrderItemUpdateProperties.notificationEmailList = notificationEmailList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOrderItemUpdateProperties;
        });
    }
}
