// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.edgeorder.models.AddressDetails;
import com.azure.resourcemanager.edgeorder.models.OrderItemDetails;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Represents order item details.
 */
@Fluent
public final class OrderItemProperties implements JsonSerializable<OrderItemProperties> {
    /*
     * Represents order item details.
     */
    private OrderItemDetails orderItemDetails;

    /*
     * Represents shipping and return address for order item
     */
    private AddressDetails addressDetails;

    /*
     * Start time of order item
     */
    private OffsetDateTime startTime;

    /*
     * Id of the order to which order item belongs to
     */
    private String orderId;

    /**
     * Creates an instance of OrderItemProperties class.
     */
    public OrderItemProperties() {
    }

    /**
     * Get the orderItemDetails property: Represents order item details.
     * 
     * @return the orderItemDetails value.
     */
    public OrderItemDetails orderItemDetails() {
        return this.orderItemDetails;
    }

    /**
     * Set the orderItemDetails property: Represents order item details.
     * 
     * @param orderItemDetails the orderItemDetails value to set.
     * @return the OrderItemProperties object itself.
     */
    public OrderItemProperties withOrderItemDetails(OrderItemDetails orderItemDetails) {
        this.orderItemDetails = orderItemDetails;
        return this;
    }

    /**
     * Get the addressDetails property: Represents shipping and return address for order item.
     * 
     * @return the addressDetails value.
     */
    public AddressDetails addressDetails() {
        return this.addressDetails;
    }

    /**
     * Set the addressDetails property: Represents shipping and return address for order item.
     * 
     * @param addressDetails the addressDetails value to set.
     * @return the OrderItemProperties object itself.
     */
    public OrderItemProperties withAddressDetails(AddressDetails addressDetails) {
        this.addressDetails = addressDetails;
        return this;
    }

    /**
     * Get the startTime property: Start time of order item.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the orderId property: Id of the order to which order item belongs to.
     * 
     * @return the orderId value.
     */
    public String orderId() {
        return this.orderId;
    }

    /**
     * Set the orderId property: Id of the order to which order item belongs to.
     * 
     * @param orderId the orderId value to set.
     * @return the OrderItemProperties object itself.
     */
    public OrderItemProperties withOrderId(String orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (orderItemDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property orderItemDetails in model OrderItemProperties"));
        } else {
            orderItemDetails().validate();
        }
        if (addressDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property addressDetails in model OrderItemProperties"));
        } else {
            addressDetails().validate();
        }
        if (orderId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property orderId in model OrderItemProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OrderItemProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("orderItemDetails", this.orderItemDetails);
        jsonWriter.writeJsonField("addressDetails", this.addressDetails);
        jsonWriter.writeStringField("orderId", this.orderId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrderItemProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrderItemProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OrderItemProperties.
     */
    public static OrderItemProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrderItemProperties deserializedOrderItemProperties = new OrderItemProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("orderItemDetails".equals(fieldName)) {
                    deserializedOrderItemProperties.orderItemDetails = OrderItemDetails.fromJson(reader);
                } else if ("addressDetails".equals(fieldName)) {
                    deserializedOrderItemProperties.addressDetails = AddressDetails.fromJson(reader);
                } else if ("orderId".equals(fieldName)) {
                    deserializedOrderItemProperties.orderId = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedOrderItemProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOrderItemProperties;
        });
    }
}
