// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Billing type Purchase meter details.
 */
@Immutable
public final class PurchaseMeterDetails extends MeterDetails {
    /*
     * Represents billing type.
     */
    private BillingType billingType = BillingType.PURCHASE;

    /*
     * Product Id
     */
    private String productId;

    /*
     * Sku Id
     */
    private String skuId;

    /*
     * Term Id
     */
    private String termId;

    /*
     * Charging type.
     */
    private ChargingType chargingType;

    /*
     * Billing unit applicable for Pav2 billing
     */
    private Double multiplier;

    /**
     * Creates an instance of PurchaseMeterDetails class.
     */
    public PurchaseMeterDetails() {
    }

    /**
     * Get the billingType property: Represents billing type.
     * 
     * @return the billingType value.
     */
    @Override
    public BillingType billingType() {
        return this.billingType;
    }

    /**
     * Get the productId property: Product Id.
     * 
     * @return the productId value.
     */
    public String productId() {
        return this.productId;
    }

    /**
     * Get the skuId property: Sku Id.
     * 
     * @return the skuId value.
     */
    public String skuId() {
        return this.skuId;
    }

    /**
     * Get the termId property: Term Id.
     * 
     * @return the termId value.
     */
    public String termId() {
        return this.termId;
    }

    /**
     * Get the chargingType property: Charging type.
     * 
     * @return the chargingType value.
     */
    @Override
    public ChargingType chargingType() {
        return this.chargingType;
    }

    /**
     * Get the multiplier property: Billing unit applicable for Pav2 billing.
     * 
     * @return the multiplier value.
     */
    @Override
    public Double multiplier() {
        return this.multiplier;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("billingType", this.billingType == null ? null : this.billingType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PurchaseMeterDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PurchaseMeterDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PurchaseMeterDetails.
     */
    public static PurchaseMeterDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PurchaseMeterDetails deserializedPurchaseMeterDetails = new PurchaseMeterDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("multiplier".equals(fieldName)) {
                    deserializedPurchaseMeterDetails.multiplier = reader.getNullable(JsonReader::getDouble);
                } else if ("chargingType".equals(fieldName)) {
                    deserializedPurchaseMeterDetails.chargingType = ChargingType.fromString(reader.getString());
                } else if ("billingType".equals(fieldName)) {
                    deserializedPurchaseMeterDetails.billingType = BillingType.fromString(reader.getString());
                } else if ("productId".equals(fieldName)) {
                    deserializedPurchaseMeterDetails.productId = reader.getString();
                } else if ("skuId".equals(fieldName)) {
                    deserializedPurchaseMeterDetails.skuId = reader.getString();
                } else if ("termId".equals(fieldName)) {
                    deserializedPurchaseMeterDetails.termId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPurchaseMeterDetails;
        });
    }
}
