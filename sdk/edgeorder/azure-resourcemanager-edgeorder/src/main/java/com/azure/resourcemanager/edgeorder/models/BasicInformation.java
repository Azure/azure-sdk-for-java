// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Basic information for any product system.
 */
@Immutable
public class BasicInformation implements JsonSerializable<BasicInformation> {
    /*
     * Display Name for the product system.
     */
    private String displayName;

    /*
     * Description related to the product system.
     */
    private Description description;

    /*
     * Image information for the product system.
     */
    private List<ImageInformation> imageInformation;

    /*
     * Cost information for the product system.
     */
    private CostInformation costInformation;

    /*
     * Availability information of the product system.
     */
    private AvailabilityInformation availabilityInformation;

    /*
     * Hierarchy information of a product.
     */
    private HierarchyInformation hierarchyInformation;

    /**
     * Creates an instance of BasicInformation class.
     */
    public BasicInformation() {
    }

    /**
     * Get the displayName property: Display Name for the product system.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display Name for the product system.
     * 
     * @param displayName the displayName value to set.
     * @return the BasicInformation object itself.
     */
    BasicInformation withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: Description related to the product system.
     * 
     * @return the description value.
     */
    public Description description() {
        return this.description;
    }

    /**
     * Set the description property: Description related to the product system.
     * 
     * @param description the description value to set.
     * @return the BasicInformation object itself.
     */
    BasicInformation withDescription(Description description) {
        this.description = description;
        return this;
    }

    /**
     * Get the imageInformation property: Image information for the product system.
     * 
     * @return the imageInformation value.
     */
    public List<ImageInformation> imageInformation() {
        return this.imageInformation;
    }

    /**
     * Set the imageInformation property: Image information for the product system.
     * 
     * @param imageInformation the imageInformation value to set.
     * @return the BasicInformation object itself.
     */
    BasicInformation withImageInformation(List<ImageInformation> imageInformation) {
        this.imageInformation = imageInformation;
        return this;
    }

    /**
     * Get the costInformation property: Cost information for the product system.
     * 
     * @return the costInformation value.
     */
    public CostInformation costInformation() {
        return this.costInformation;
    }

    /**
     * Set the costInformation property: Cost information for the product system.
     * 
     * @param costInformation the costInformation value to set.
     * @return the BasicInformation object itself.
     */
    BasicInformation withCostInformation(CostInformation costInformation) {
        this.costInformation = costInformation;
        return this;
    }

    /**
     * Get the availabilityInformation property: Availability information of the product system.
     * 
     * @return the availabilityInformation value.
     */
    public AvailabilityInformation availabilityInformation() {
        return this.availabilityInformation;
    }

    /**
     * Set the availabilityInformation property: Availability information of the product system.
     * 
     * @param availabilityInformation the availabilityInformation value to set.
     * @return the BasicInformation object itself.
     */
    BasicInformation withAvailabilityInformation(AvailabilityInformation availabilityInformation) {
        this.availabilityInformation = availabilityInformation;
        return this;
    }

    /**
     * Get the hierarchyInformation property: Hierarchy information of a product.
     * 
     * @return the hierarchyInformation value.
     */
    public HierarchyInformation hierarchyInformation() {
        return this.hierarchyInformation;
    }

    /**
     * Set the hierarchyInformation property: Hierarchy information of a product.
     * 
     * @param hierarchyInformation the hierarchyInformation value to set.
     * @return the BasicInformation object itself.
     */
    BasicInformation withHierarchyInformation(HierarchyInformation hierarchyInformation) {
        this.hierarchyInformation = hierarchyInformation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (description() != null) {
            description().validate();
        }
        if (imageInformation() != null) {
            imageInformation().forEach(e -> e.validate());
        }
        if (costInformation() != null) {
            costInformation().validate();
        }
        if (availabilityInformation() != null) {
            availabilityInformation().validate();
        }
        if (hierarchyInformation() != null) {
            hierarchyInformation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BasicInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BasicInformation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BasicInformation.
     */
    public static BasicInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BasicInformation deserializedBasicInformation = new BasicInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedBasicInformation.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedBasicInformation.description = Description.fromJson(reader);
                } else if ("imageInformation".equals(fieldName)) {
                    List<ImageInformation> imageInformation
                        = reader.readArray(reader1 -> ImageInformation.fromJson(reader1));
                    deserializedBasicInformation.imageInformation = imageInformation;
                } else if ("costInformation".equals(fieldName)) {
                    deserializedBasicInformation.costInformation = CostInformation.fromJson(reader);
                } else if ("availabilityInformation".equals(fieldName)) {
                    deserializedBasicInformation.availabilityInformation = AvailabilityInformation.fromJson(reader);
                } else if ("hierarchyInformation".equals(fieldName)) {
                    deserializedBasicInformation.hierarchyInformation = HierarchyInformation.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBasicInformation;
        });
    }
}
