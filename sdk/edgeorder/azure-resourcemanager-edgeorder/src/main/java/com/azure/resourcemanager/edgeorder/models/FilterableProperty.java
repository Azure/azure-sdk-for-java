// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Different types of filters supported and its values.
 */
@Fluent
public final class FilterableProperty implements JsonSerializable<FilterableProperty> {
    /*
     * Type of product filter.
     */
    private SupportedFilterTypes type;

    /*
     * Values to be filtered.
     */
    private List<String> supportedValues;

    /**
     * Creates an instance of FilterableProperty class.
     */
    public FilterableProperty() {
    }

    /**
     * Get the type property: Type of product filter.
     * 
     * @return the type value.
     */
    public SupportedFilterTypes type() {
        return this.type;
    }

    /**
     * Set the type property: Type of product filter.
     * 
     * @param type the type value to set.
     * @return the FilterableProperty object itself.
     */
    public FilterableProperty withType(SupportedFilterTypes type) {
        this.type = type;
        return this;
    }

    /**
     * Get the supportedValues property: Values to be filtered.
     * 
     * @return the supportedValues value.
     */
    public List<String> supportedValues() {
        return this.supportedValues;
    }

    /**
     * Set the supportedValues property: Values to be filtered.
     * 
     * @param supportedValues the supportedValues value to set.
     * @return the FilterableProperty object itself.
     */
    public FilterableProperty withSupportedValues(List<String> supportedValues) {
        this.supportedValues = supportedValues;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model FilterableProperty"));
        }
        if (supportedValues() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property supportedValues in model FilterableProperty"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FilterableProperty.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeArrayField("supportedValues", this.supportedValues,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FilterableProperty from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FilterableProperty if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FilterableProperty.
     */
    public static FilterableProperty fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FilterableProperty deserializedFilterableProperty = new FilterableProperty();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedFilterableProperty.type = SupportedFilterTypes.fromString(reader.getString());
                } else if ("supportedValues".equals(fieldName)) {
                    List<String> supportedValues = reader.readArray(reader1 -> reader1.getString());
                    deserializedFilterableProperty.supportedValues = supportedValues;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFilterableProperty;
        });
    }
}
