// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.edgeorder.models.StageDetails;
import java.io.IOException;
import java.util.List;

/**
 * Represents order details.
 */
@Immutable
public final class OrderProperties implements JsonSerializable<OrderProperties> {
    /*
     * List of order item ARM Ids which are part of an order.
     */
    private List<String> orderItemIds;

    /*
     * Order current status.
     */
    private StageDetails currentStage;

    /*
     * Order status history.
     */
    private List<StageDetails> orderStageHistory;

    /**
     * Creates an instance of OrderProperties class.
     */
    public OrderProperties() {
    }

    /**
     * Get the orderItemIds property: List of order item ARM Ids which are part of an order.
     * 
     * @return the orderItemIds value.
     */
    public List<String> orderItemIds() {
        return this.orderItemIds;
    }

    /**
     * Get the currentStage property: Order current status.
     * 
     * @return the currentStage value.
     */
    public StageDetails currentStage() {
        return this.currentStage;
    }

    /**
     * Get the orderStageHistory property: Order status history.
     * 
     * @return the orderStageHistory value.
     */
    public List<StageDetails> orderStageHistory() {
        return this.orderStageHistory;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (currentStage() != null) {
            currentStage().validate();
        }
        if (orderStageHistory() != null) {
            orderStageHistory().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrderProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrderProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OrderProperties.
     */
    public static OrderProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrderProperties deserializedOrderProperties = new OrderProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("orderItemIds".equals(fieldName)) {
                    List<String> orderItemIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedOrderProperties.orderItemIds = orderItemIds;
                } else if ("currentStage".equals(fieldName)) {
                    deserializedOrderProperties.currentStage = StageDetails.fromJson(reader);
                } else if ("orderStageHistory".equals(fieldName)) {
                    List<StageDetails> orderStageHistory = reader.readArray(reader1 -> StageDetails.fromJson(reader1));
                    deserializedOrderProperties.orderStageHistory = orderStageHistory;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOrderProperties;
        });
    }
}
