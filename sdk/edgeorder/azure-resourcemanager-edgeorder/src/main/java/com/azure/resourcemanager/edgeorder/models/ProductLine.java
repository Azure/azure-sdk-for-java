// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.edgeorder.fluent.models.ProductLineProperties;
import java.io.IOException;
import java.util.List;

/**
 * Product line.
 */
@Immutable
public final class ProductLine implements JsonSerializable<ProductLine> {
    /*
     * Properties of product line
     */
    private ProductLineProperties innerProperties;

    /**
     * Creates an instance of ProductLine class.
     */
    public ProductLine() {
    }

    /**
     * Get the innerProperties property: Properties of product line.
     * 
     * @return the innerProperties value.
     */
    private ProductLineProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the products property: List of products in the product line.
     * 
     * @return the products value.
     */
    public List<Product> products() {
        return this.innerProperties() == null ? null : this.innerProperties().products();
    }

    /**
     * Get the filterableProperties property: list of filters supported for a product.
     * 
     * @return the filterableProperties value.
     */
    public List<FilterableProperty> filterableProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().filterableProperties();
    }

    /**
     * Get the displayName property: Display Name for the product system.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Get the description property: Description related to the product system.
     * 
     * @return the description value.
     */
    public Description description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Get the imageInformation property: Image information for the product system.
     * 
     * @return the imageInformation value.
     */
    public List<ImageInformation> imageInformation() {
        return this.innerProperties() == null ? null : this.innerProperties().imageInformation();
    }

    /**
     * Get the costInformation property: Cost information for the product system.
     * 
     * @return the costInformation value.
     */
    public CostInformation costInformation() {
        return this.innerProperties() == null ? null : this.innerProperties().costInformation();
    }

    /**
     * Get the availabilityInformation property: Availability information of the product system.
     * 
     * @return the availabilityInformation value.
     */
    public AvailabilityInformation availabilityInformation() {
        return this.innerProperties() == null ? null : this.innerProperties().availabilityInformation();
    }

    /**
     * Get the hierarchyInformation property: Hierarchy information of a product.
     * 
     * @return the hierarchyInformation value.
     */
    public HierarchyInformation hierarchyInformation() {
        return this.innerProperties() == null ? null : this.innerProperties().hierarchyInformation();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProductLine from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProductLine if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProductLine.
     */
    public static ProductLine fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProductLine deserializedProductLine = new ProductLine();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedProductLine.innerProperties = ProductLineProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProductLine;
        });
    }
}
