// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Order item details.
 */
@Fluent
public final class OrderItemDetails implements JsonSerializable<OrderItemDetails> {
    /*
     * Unique identifier for configuration.
     */
    private ProductDetails productDetails;

    /*
     * Order item type.
     */
    private OrderItemType orderItemType;

    /*
     * Current Order item Status
     */
    private StageDetails currentStage;

    /*
     * Order item status history
     */
    private List<StageDetails> orderItemStageHistory;

    /*
     * Customer notification Preferences
     */
    private Preferences preferences;

    /*
     * Forward Package Shipping details
     */
    private ForwardShippingDetails forwardShippingDetails;

    /*
     * Reverse Package Shipping details
     */
    private ReverseShippingDetails reverseShippingDetails;

    /*
     * Additional notification email list
     */
    private List<String> notificationEmailList;

    /*
     * Cancellation reason.
     */
    private String cancellationReason;

    /*
     * Describes whether the order item is cancellable or not.
     */
    private OrderItemCancellationEnum cancellationStatus;

    /*
     * Describes whether the order item is deletable or not.
     */
    private ActionStatusEnum deletionStatus;

    /*
     * Return reason.
     */
    private String returnReason;

    /*
     * Describes whether the order item is returnable or not.
     */
    private OrderItemReturnEnum returnStatus;

    /*
     * Parent RP details - this returns only the first or default parent RP from the entire list
     */
    private ResourceProviderDetails managementRpDetails;

    /*
     * List of parent RP details supported for configuration.
     */
    private List<ResourceProviderDetails> managementRpDetailsList;

    /*
     * Top level error for the job.
     */
    private ManagementError error;

    /**
     * Creates an instance of OrderItemDetails class.
     */
    public OrderItemDetails() {
    }

    /**
     * Get the productDetails property: Unique identifier for configuration.
     * 
     * @return the productDetails value.
     */
    public ProductDetails productDetails() {
        return this.productDetails;
    }

    /**
     * Set the productDetails property: Unique identifier for configuration.
     * 
     * @param productDetails the productDetails value to set.
     * @return the OrderItemDetails object itself.
     */
    public OrderItemDetails withProductDetails(ProductDetails productDetails) {
        this.productDetails = productDetails;
        return this;
    }

    /**
     * Get the orderItemType property: Order item type.
     * 
     * @return the orderItemType value.
     */
    public OrderItemType orderItemType() {
        return this.orderItemType;
    }

    /**
     * Set the orderItemType property: Order item type.
     * 
     * @param orderItemType the orderItemType value to set.
     * @return the OrderItemDetails object itself.
     */
    public OrderItemDetails withOrderItemType(OrderItemType orderItemType) {
        this.orderItemType = orderItemType;
        return this;
    }

    /**
     * Get the currentStage property: Current Order item Status.
     * 
     * @return the currentStage value.
     */
    public StageDetails currentStage() {
        return this.currentStage;
    }

    /**
     * Get the orderItemStageHistory property: Order item status history.
     * 
     * @return the orderItemStageHistory value.
     */
    public List<StageDetails> orderItemStageHistory() {
        return this.orderItemStageHistory;
    }

    /**
     * Get the preferences property: Customer notification Preferences.
     * 
     * @return the preferences value.
     */
    public Preferences preferences() {
        return this.preferences;
    }

    /**
     * Set the preferences property: Customer notification Preferences.
     * 
     * @param preferences the preferences value to set.
     * @return the OrderItemDetails object itself.
     */
    public OrderItemDetails withPreferences(Preferences preferences) {
        this.preferences = preferences;
        return this;
    }

    /**
     * Get the forwardShippingDetails property: Forward Package Shipping details.
     * 
     * @return the forwardShippingDetails value.
     */
    public ForwardShippingDetails forwardShippingDetails() {
        return this.forwardShippingDetails;
    }

    /**
     * Get the reverseShippingDetails property: Reverse Package Shipping details.
     * 
     * @return the reverseShippingDetails value.
     */
    public ReverseShippingDetails reverseShippingDetails() {
        return this.reverseShippingDetails;
    }

    /**
     * Get the notificationEmailList property: Additional notification email list.
     * 
     * @return the notificationEmailList value.
     */
    public List<String> notificationEmailList() {
        return this.notificationEmailList;
    }

    /**
     * Set the notificationEmailList property: Additional notification email list.
     * 
     * @param notificationEmailList the notificationEmailList value to set.
     * @return the OrderItemDetails object itself.
     */
    public OrderItemDetails withNotificationEmailList(List<String> notificationEmailList) {
        this.notificationEmailList = notificationEmailList;
        return this;
    }

    /**
     * Get the cancellationReason property: Cancellation reason.
     * 
     * @return the cancellationReason value.
     */
    public String cancellationReason() {
        return this.cancellationReason;
    }

    /**
     * Get the cancellationStatus property: Describes whether the order item is cancellable or not.
     * 
     * @return the cancellationStatus value.
     */
    public OrderItemCancellationEnum cancellationStatus() {
        return this.cancellationStatus;
    }

    /**
     * Get the deletionStatus property: Describes whether the order item is deletable or not.
     * 
     * @return the deletionStatus value.
     */
    public ActionStatusEnum deletionStatus() {
        return this.deletionStatus;
    }

    /**
     * Get the returnReason property: Return reason.
     * 
     * @return the returnReason value.
     */
    public String returnReason() {
        return this.returnReason;
    }

    /**
     * Get the returnStatus property: Describes whether the order item is returnable or not.
     * 
     * @return the returnStatus value.
     */
    public OrderItemReturnEnum returnStatus() {
        return this.returnStatus;
    }

    /**
     * Get the managementRpDetails property: Parent RP details - this returns only the first or default parent RP from
     * the entire list.
     * 
     * @return the managementRpDetails value.
     */
    public ResourceProviderDetails managementRpDetails() {
        return this.managementRpDetails;
    }

    /**
     * Get the managementRpDetailsList property: List of parent RP details supported for configuration.
     * 
     * @return the managementRpDetailsList value.
     */
    public List<ResourceProviderDetails> managementRpDetailsList() {
        return this.managementRpDetailsList;
    }

    /**
     * Get the error property: Top level error for the job.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (productDetails() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property productDetails in model OrderItemDetails"));
        } else {
            productDetails().validate();
        }
        if (orderItemType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property orderItemType in model OrderItemDetails"));
        }
        if (currentStage() != null) {
            currentStage().validate();
        }
        if (orderItemStageHistory() != null) {
            orderItemStageHistory().forEach(e -> e.validate());
        }
        if (preferences() != null) {
            preferences().validate();
        }
        if (forwardShippingDetails() != null) {
            forwardShippingDetails().validate();
        }
        if (reverseShippingDetails() != null) {
            reverseShippingDetails().validate();
        }
        if (managementRpDetails() != null) {
            managementRpDetails().validate();
        }
        if (managementRpDetailsList() != null) {
            managementRpDetailsList().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OrderItemDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("productDetails", this.productDetails);
        jsonWriter.writeStringField("orderItemType", this.orderItemType == null ? null : this.orderItemType.toString());
        jsonWriter.writeJsonField("preferences", this.preferences);
        jsonWriter.writeArrayField("notificationEmailList", this.notificationEmailList,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrderItemDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrderItemDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OrderItemDetails.
     */
    public static OrderItemDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrderItemDetails deserializedOrderItemDetails = new OrderItemDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("productDetails".equals(fieldName)) {
                    deserializedOrderItemDetails.productDetails = ProductDetails.fromJson(reader);
                } else if ("orderItemType".equals(fieldName)) {
                    deserializedOrderItemDetails.orderItemType = OrderItemType.fromString(reader.getString());
                } else if ("currentStage".equals(fieldName)) {
                    deserializedOrderItemDetails.currentStage = StageDetails.fromJson(reader);
                } else if ("orderItemStageHistory".equals(fieldName)) {
                    List<StageDetails> orderItemStageHistory
                        = reader.readArray(reader1 -> StageDetails.fromJson(reader1));
                    deserializedOrderItemDetails.orderItemStageHistory = orderItemStageHistory;
                } else if ("preferences".equals(fieldName)) {
                    deserializedOrderItemDetails.preferences = Preferences.fromJson(reader);
                } else if ("forwardShippingDetails".equals(fieldName)) {
                    deserializedOrderItemDetails.forwardShippingDetails = ForwardShippingDetails.fromJson(reader);
                } else if ("reverseShippingDetails".equals(fieldName)) {
                    deserializedOrderItemDetails.reverseShippingDetails = ReverseShippingDetails.fromJson(reader);
                } else if ("notificationEmailList".equals(fieldName)) {
                    List<String> notificationEmailList = reader.readArray(reader1 -> reader1.getString());
                    deserializedOrderItemDetails.notificationEmailList = notificationEmailList;
                } else if ("cancellationReason".equals(fieldName)) {
                    deserializedOrderItemDetails.cancellationReason = reader.getString();
                } else if ("cancellationStatus".equals(fieldName)) {
                    deserializedOrderItemDetails.cancellationStatus
                        = OrderItemCancellationEnum.fromString(reader.getString());
                } else if ("deletionStatus".equals(fieldName)) {
                    deserializedOrderItemDetails.deletionStatus = ActionStatusEnum.fromString(reader.getString());
                } else if ("returnReason".equals(fieldName)) {
                    deserializedOrderItemDetails.returnReason = reader.getString();
                } else if ("returnStatus".equals(fieldName)) {
                    deserializedOrderItemDetails.returnStatus = OrderItemReturnEnum.fromString(reader.getString());
                } else if ("managementRpDetails".equals(fieldName)) {
                    deserializedOrderItemDetails.managementRpDetails = ResourceProviderDetails.fromJson(reader);
                } else if ("managementRpDetailsList".equals(fieldName)) {
                    List<ResourceProviderDetails> managementRpDetailsList
                        = reader.readArray(reader1 -> ResourceProviderDetails.fromJson(reader1));
                    deserializedOrderItemDetails.managementRpDetailsList = managementRpDetailsList;
                } else if ("error".equals(fieldName)) {
                    deserializedOrderItemDetails.error = ManagementError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOrderItemDetails;
        });
    }
}
