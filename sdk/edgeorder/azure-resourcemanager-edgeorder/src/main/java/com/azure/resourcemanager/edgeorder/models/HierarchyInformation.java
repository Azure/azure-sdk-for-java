// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Holds details about product hierarchy information.
 */
@Fluent
public final class HierarchyInformation implements JsonSerializable<HierarchyInformation> {
    /*
     * Represents product family name that uniquely identifies product family
     */
    private String productFamilyName;

    /*
     * Represents product line name that uniquely identifies product line
     */
    private String productLineName;

    /*
     * Represents product name that uniquely identifies product
     */
    private String productName;

    /*
     * Represents configuration name that uniquely identifies configuration
     */
    private String configurationName;

    /**
     * Creates an instance of HierarchyInformation class.
     */
    public HierarchyInformation() {
    }

    /**
     * Get the productFamilyName property: Represents product family name that uniquely identifies product family.
     * 
     * @return the productFamilyName value.
     */
    public String productFamilyName() {
        return this.productFamilyName;
    }

    /**
     * Set the productFamilyName property: Represents product family name that uniquely identifies product family.
     * 
     * @param productFamilyName the productFamilyName value to set.
     * @return the HierarchyInformation object itself.
     */
    public HierarchyInformation withProductFamilyName(String productFamilyName) {
        this.productFamilyName = productFamilyName;
        return this;
    }

    /**
     * Get the productLineName property: Represents product line name that uniquely identifies product line.
     * 
     * @return the productLineName value.
     */
    public String productLineName() {
        return this.productLineName;
    }

    /**
     * Set the productLineName property: Represents product line name that uniquely identifies product line.
     * 
     * @param productLineName the productLineName value to set.
     * @return the HierarchyInformation object itself.
     */
    public HierarchyInformation withProductLineName(String productLineName) {
        this.productLineName = productLineName;
        return this;
    }

    /**
     * Get the productName property: Represents product name that uniquely identifies product.
     * 
     * @return the productName value.
     */
    public String productName() {
        return this.productName;
    }

    /**
     * Set the productName property: Represents product name that uniquely identifies product.
     * 
     * @param productName the productName value to set.
     * @return the HierarchyInformation object itself.
     */
    public HierarchyInformation withProductName(String productName) {
        this.productName = productName;
        return this;
    }

    /**
     * Get the configurationName property: Represents configuration name that uniquely identifies configuration.
     * 
     * @return the configurationName value.
     */
    public String configurationName() {
        return this.configurationName;
    }

    /**
     * Set the configurationName property: Represents configuration name that uniquely identifies configuration.
     * 
     * @param configurationName the configurationName value to set.
     * @return the HierarchyInformation object itself.
     */
    public HierarchyInformation withConfigurationName(String configurationName) {
        this.configurationName = configurationName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("productFamilyName", this.productFamilyName);
        jsonWriter.writeStringField("productLineName", this.productLineName);
        jsonWriter.writeStringField("productName", this.productName);
        jsonWriter.writeStringField("configurationName", this.configurationName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HierarchyInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HierarchyInformation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HierarchyInformation.
     */
    public static HierarchyInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HierarchyInformation deserializedHierarchyInformation = new HierarchyInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("productFamilyName".equals(fieldName)) {
                    deserializedHierarchyInformation.productFamilyName = reader.getString();
                } else if ("productLineName".equals(fieldName)) {
                    deserializedHierarchyInformation.productLineName = reader.getString();
                } else if ("productName".equals(fieldName)) {
                    deserializedHierarchyInformation.productName = reader.getString();
                } else if ("configurationName".equals(fieldName)) {
                    deserializedHierarchyInformation.configurationName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHierarchyInformation;
        });
    }
}
