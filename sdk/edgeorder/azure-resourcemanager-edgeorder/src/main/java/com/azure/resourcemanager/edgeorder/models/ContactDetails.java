// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Contact Details.
 */
@Fluent
public final class ContactDetails implements JsonSerializable<ContactDetails> {
    /*
     * Contact name of the person.
     */
    private String contactName;

    /*
     * Phone number of the contact person.
     */
    private String phone;

    /*
     * Phone extension number of the contact person.
     */
    private String phoneExtension;

    /*
     * Mobile number of the contact person.
     */
    private String mobile;

    /*
     * List of Email-ids to be notified about job progress.
     */
    private List<String> emailList;

    /**
     * Creates an instance of ContactDetails class.
     */
    public ContactDetails() {
    }

    /**
     * Get the contactName property: Contact name of the person.
     * 
     * @return the contactName value.
     */
    public String contactName() {
        return this.contactName;
    }

    /**
     * Set the contactName property: Contact name of the person.
     * 
     * @param contactName the contactName value to set.
     * @return the ContactDetails object itself.
     */
    public ContactDetails withContactName(String contactName) {
        this.contactName = contactName;
        return this;
    }

    /**
     * Get the phone property: Phone number of the contact person.
     * 
     * @return the phone value.
     */
    public String phone() {
        return this.phone;
    }

    /**
     * Set the phone property: Phone number of the contact person.
     * 
     * @param phone the phone value to set.
     * @return the ContactDetails object itself.
     */
    public ContactDetails withPhone(String phone) {
        this.phone = phone;
        return this;
    }

    /**
     * Get the phoneExtension property: Phone extension number of the contact person.
     * 
     * @return the phoneExtension value.
     */
    public String phoneExtension() {
        return this.phoneExtension;
    }

    /**
     * Set the phoneExtension property: Phone extension number of the contact person.
     * 
     * @param phoneExtension the phoneExtension value to set.
     * @return the ContactDetails object itself.
     */
    public ContactDetails withPhoneExtension(String phoneExtension) {
        this.phoneExtension = phoneExtension;
        return this;
    }

    /**
     * Get the mobile property: Mobile number of the contact person.
     * 
     * @return the mobile value.
     */
    public String mobile() {
        return this.mobile;
    }

    /**
     * Set the mobile property: Mobile number of the contact person.
     * 
     * @param mobile the mobile value to set.
     * @return the ContactDetails object itself.
     */
    public ContactDetails withMobile(String mobile) {
        this.mobile = mobile;
        return this;
    }

    /**
     * Get the emailList property: List of Email-ids to be notified about job progress.
     * 
     * @return the emailList value.
     */
    public List<String> emailList() {
        return this.emailList;
    }

    /**
     * Set the emailList property: List of Email-ids to be notified about job progress.
     * 
     * @param emailList the emailList value to set.
     * @return the ContactDetails object itself.
     */
    public ContactDetails withEmailList(List<String> emailList) {
        this.emailList = emailList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (contactName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property contactName in model ContactDetails"));
        }
        if (phone() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property phone in model ContactDetails"));
        }
        if (emailList() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property emailList in model ContactDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ContactDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("contactName", this.contactName);
        jsonWriter.writeStringField("phone", this.phone);
        jsonWriter.writeArrayField("emailList", this.emailList, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("phoneExtension", this.phoneExtension);
        jsonWriter.writeStringField("mobile", this.mobile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContactDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContactDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContactDetails.
     */
    public static ContactDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContactDetails deserializedContactDetails = new ContactDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("contactName".equals(fieldName)) {
                    deserializedContactDetails.contactName = reader.getString();
                } else if ("phone".equals(fieldName)) {
                    deserializedContactDetails.phone = reader.getString();
                } else if ("emailList".equals(fieldName)) {
                    List<String> emailList = reader.readArray(reader1 -> reader1.getString());
                    deserializedContactDetails.emailList = emailList;
                } else if ("phoneExtension".equals(fieldName)) {
                    deserializedContactDetails.phoneExtension = reader.getString();
                } else if ("mobile".equals(fieldName)) {
                    deserializedContactDetails.mobile = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContactDetails;
        });
    }
}
