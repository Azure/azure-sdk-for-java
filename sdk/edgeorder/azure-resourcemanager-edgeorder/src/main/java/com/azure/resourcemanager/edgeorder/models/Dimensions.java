// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Dimensions of a configuration.
 */
@Immutable
public final class Dimensions implements JsonSerializable<Dimensions> {
    /*
     * Length of the device.
     */
    private Double length;

    /*
     * Height of the device.
     */
    private Double height;

    /*
     * Width of the device.
     */
    private Double width;

    /*
     * Unit for the dimensions of length, height and width.
     */
    private LengthHeightUnit lengthHeightUnit;

    /*
     * Weight of the device.
     */
    private Double weight;

    /*
     * Depth of the device.
     */
    private Double depth;

    /*
     * Unit for the dimensions of weight.
     */
    private WeightMeasurementUnit weightUnit;

    /**
     * Creates an instance of Dimensions class.
     */
    public Dimensions() {
    }

    /**
     * Get the length property: Length of the device.
     * 
     * @return the length value.
     */
    public Double length() {
        return this.length;
    }

    /**
     * Get the height property: Height of the device.
     * 
     * @return the height value.
     */
    public Double height() {
        return this.height;
    }

    /**
     * Get the width property: Width of the device.
     * 
     * @return the width value.
     */
    public Double width() {
        return this.width;
    }

    /**
     * Get the lengthHeightUnit property: Unit for the dimensions of length, height and width.
     * 
     * @return the lengthHeightUnit value.
     */
    public LengthHeightUnit lengthHeightUnit() {
        return this.lengthHeightUnit;
    }

    /**
     * Get the weight property: Weight of the device.
     * 
     * @return the weight value.
     */
    public Double weight() {
        return this.weight;
    }

    /**
     * Get the depth property: Depth of the device.
     * 
     * @return the depth value.
     */
    public Double depth() {
        return this.depth;
    }

    /**
     * Get the weightUnit property: Unit for the dimensions of weight.
     * 
     * @return the weightUnit value.
     */
    public WeightMeasurementUnit weightUnit() {
        return this.weightUnit;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Dimensions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Dimensions if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Dimensions.
     */
    public static Dimensions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Dimensions deserializedDimensions = new Dimensions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("length".equals(fieldName)) {
                    deserializedDimensions.length = reader.getNullable(JsonReader::getDouble);
                } else if ("height".equals(fieldName)) {
                    deserializedDimensions.height = reader.getNullable(JsonReader::getDouble);
                } else if ("width".equals(fieldName)) {
                    deserializedDimensions.width = reader.getNullable(JsonReader::getDouble);
                } else if ("lengthHeightUnit".equals(fieldName)) {
                    deserializedDimensions.lengthHeightUnit = LengthHeightUnit.fromString(reader.getString());
                } else if ("weight".equals(fieldName)) {
                    deserializedDimensions.weight = reader.getNullable(JsonReader::getDouble);
                } else if ("depth".equals(fieldName)) {
                    deserializedDimensions.depth = reader.getNullable(JsonReader::getDouble);
                } else if ("weightUnit".equals(fieldName)) {
                    deserializedDimensions.weightUnit = WeightMeasurementUnit.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDimensions;
        });
    }
}
