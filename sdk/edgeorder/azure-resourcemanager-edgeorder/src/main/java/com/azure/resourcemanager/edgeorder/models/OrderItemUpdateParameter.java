// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.edgeorder.fluent.models.AddressProperties;
import com.azure.resourcemanager.edgeorder.fluent.models.OrderItemUpdateProperties;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Updates order item parameters.
 */
@Fluent
public final class OrderItemUpdateParameter implements JsonSerializable<OrderItemUpdateParameter> {
    /*
     * Order item update properties
     */
    private OrderItemUpdateProperties innerProperties;

    /*
     * The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this
     * resource (across resource groups).
     */
    private Map<String, String> tags;

    /**
     * Creates an instance of OrderItemUpdateParameter class.
     */
    public OrderItemUpdateParameter() {
    }

    /**
     * Get the innerProperties property: Order item update properties.
     * 
     * @return the innerProperties value.
     */
    private OrderItemUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the tags property: The list of key value pairs that describe the resource. These tags can be used in viewing
     * and grouping this resource (across resource groups).
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The list of key value pairs that describe the resource. These tags can be used in viewing
     * and grouping this resource (across resource groups).
     * 
     * @param tags the tags value to set.
     * @return the OrderItemUpdateParameter object itself.
     */
    public OrderItemUpdateParameter withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the forwardAddress property: Updates forward shipping address and contact details.
     * 
     * @return the forwardAddress value.
     */
    public AddressProperties forwardAddress() {
        return this.innerProperties() == null ? null : this.innerProperties().forwardAddress();
    }

    /**
     * Set the forwardAddress property: Updates forward shipping address and contact details.
     * 
     * @param forwardAddress the forwardAddress value to set.
     * @return the OrderItemUpdateParameter object itself.
     */
    public OrderItemUpdateParameter withForwardAddress(AddressProperties forwardAddress) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OrderItemUpdateProperties();
        }
        this.innerProperties().withForwardAddress(forwardAddress);
        return this;
    }

    /**
     * Get the preferences property: Customer preference.
     * 
     * @return the preferences value.
     */
    public Preferences preferences() {
        return this.innerProperties() == null ? null : this.innerProperties().preferences();
    }

    /**
     * Set the preferences property: Customer preference.
     * 
     * @param preferences the preferences value to set.
     * @return the OrderItemUpdateParameter object itself.
     */
    public OrderItemUpdateParameter withPreferences(Preferences preferences) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OrderItemUpdateProperties();
        }
        this.innerProperties().withPreferences(preferences);
        return this;
    }

    /**
     * Get the notificationEmailList property: Additional notification email list.
     * 
     * @return the notificationEmailList value.
     */
    public List<String> notificationEmailList() {
        return this.innerProperties() == null ? null : this.innerProperties().notificationEmailList();
    }

    /**
     * Set the notificationEmailList property: Additional notification email list.
     * 
     * @param notificationEmailList the notificationEmailList value to set.
     * @return the OrderItemUpdateParameter object itself.
     */
    public OrderItemUpdateParameter withNotificationEmailList(List<String> notificationEmailList) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OrderItemUpdateProperties();
        }
        this.innerProperties().withNotificationEmailList(notificationEmailList);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrderItemUpdateParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrderItemUpdateParameter if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OrderItemUpdateParameter.
     */
    public static OrderItemUpdateParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrderItemUpdateParameter deserializedOrderItemUpdateParameter = new OrderItemUpdateParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedOrderItemUpdateParameter.innerProperties = OrderItemUpdateProperties.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedOrderItemUpdateParameter.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOrderItemUpdateParameter;
        });
    }
}
