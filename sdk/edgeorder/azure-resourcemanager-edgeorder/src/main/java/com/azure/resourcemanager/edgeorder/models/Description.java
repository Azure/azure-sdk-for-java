// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Description related properties of a product system.
 */
@Immutable
public final class Description implements JsonSerializable<Description> {
    /*
     * Type of description.
     */
    private DescriptionType descriptionType;

    /*
     * Short description of the product system.
     */
    private String shortDescription;

    /*
     * Long description of the product system.
     */
    private String longDescription;

    /*
     * Keywords for the product system.
     */
    private List<String> keywords;

    /*
     * Attributes for the product system.
     */
    private List<String> attributes;

    /*
     * Links for the product system.
     */
    private List<Link> links;

    /**
     * Creates an instance of Description class.
     */
    public Description() {
    }

    /**
     * Get the descriptionType property: Type of description.
     * 
     * @return the descriptionType value.
     */
    public DescriptionType descriptionType() {
        return this.descriptionType;
    }

    /**
     * Get the shortDescription property: Short description of the product system.
     * 
     * @return the shortDescription value.
     */
    public String shortDescription() {
        return this.shortDescription;
    }

    /**
     * Get the longDescription property: Long description of the product system.
     * 
     * @return the longDescription value.
     */
    public String longDescription() {
        return this.longDescription;
    }

    /**
     * Get the keywords property: Keywords for the product system.
     * 
     * @return the keywords value.
     */
    public List<String> keywords() {
        return this.keywords;
    }

    /**
     * Get the attributes property: Attributes for the product system.
     * 
     * @return the attributes value.
     */
    public List<String> attributes() {
        return this.attributes;
    }

    /**
     * Get the links property: Links for the product system.
     * 
     * @return the links value.
     */
    public List<Link> links() {
        return this.links;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (links() != null) {
            links().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Description from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Description if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Description.
     */
    public static Description fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Description deserializedDescription = new Description();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("descriptionType".equals(fieldName)) {
                    deserializedDescription.descriptionType = DescriptionType.fromString(reader.getString());
                } else if ("shortDescription".equals(fieldName)) {
                    deserializedDescription.shortDescription = reader.getString();
                } else if ("longDescription".equals(fieldName)) {
                    deserializedDescription.longDescription = reader.getString();
                } else if ("keywords".equals(fieldName)) {
                    List<String> keywords = reader.readArray(reader1 -> reader1.getString());
                    deserializedDescription.keywords = keywords;
                } else if ("attributes".equals(fieldName)) {
                    List<String> attributes = reader.readArray(reader1 -> reader1.getString());
                    deserializedDescription.attributes = attributes;
                } else if ("links".equals(fieldName)) {
                    List<Link> links = reader.readArray(reader1 -> Link.fromJson(reader1));
                    deserializedDescription.links = links;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDescription;
        });
    }
}
