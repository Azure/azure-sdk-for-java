// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Device details.
 */
@Immutable
public final class DeviceDetails implements JsonSerializable<DeviceDetails> {
    /*
     * device serial number
     */
    private String serialNumber;

    /*
     * Management Resource Id
     */
    private String managementResourceId;

    /*
     * Management Resource Tenant ID
     */
    private String managementResourceTenantId;

    /**
     * Creates an instance of DeviceDetails class.
     */
    public DeviceDetails() {
    }

    /**
     * Get the serialNumber property: device serial number.
     * 
     * @return the serialNumber value.
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Get the managementResourceId property: Management Resource Id.
     * 
     * @return the managementResourceId value.
     */
    public String managementResourceId() {
        return this.managementResourceId;
    }

    /**
     * Get the managementResourceTenantId property: Management Resource Tenant ID.
     * 
     * @return the managementResourceTenantId value.
     */
    public String managementResourceTenantId() {
        return this.managementResourceTenantId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeviceDetails.
     */
    public static DeviceDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceDetails deserializedDeviceDetails = new DeviceDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serialNumber".equals(fieldName)) {
                    deserializedDeviceDetails.serialNumber = reader.getString();
                } else if ("managementResourceId".equals(fieldName)) {
                    deserializedDeviceDetails.managementResourceId = reader.getString();
                } else if ("managementResourceTenantId".equals(fieldName)) {
                    deserializedDeviceDetails.managementResourceTenantId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceDetails;
        });
    }
}
