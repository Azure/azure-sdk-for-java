// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents product details.
 */
@Fluent
public final class ProductDetails implements JsonSerializable<ProductDetails> {
    /*
     * Display details of the product
     */
    private DisplayInfo displayInfo;

    /*
     * Hierarchy of the product which uniquely identifies the product
     */
    private HierarchyInformation hierarchyInformation;

    /*
     * Quantity of the product
     */
    private Integer count;

    /*
     * Double encryption status of the configuration. Read-only field.
     */
    private DoubleEncryptionStatus productDoubleEncryptionStatus;

    /*
     * list of device details
     */
    private List<DeviceDetails> deviceDetails;

    /**
     * Creates an instance of ProductDetails class.
     */
    public ProductDetails() {
    }

    /**
     * Get the displayInfo property: Display details of the product.
     * 
     * @return the displayInfo value.
     */
    public DisplayInfo displayInfo() {
        return this.displayInfo;
    }

    /**
     * Set the displayInfo property: Display details of the product.
     * 
     * @param displayInfo the displayInfo value to set.
     * @return the ProductDetails object itself.
     */
    public ProductDetails withDisplayInfo(DisplayInfo displayInfo) {
        this.displayInfo = displayInfo;
        return this;
    }

    /**
     * Get the hierarchyInformation property: Hierarchy of the product which uniquely identifies the product.
     * 
     * @return the hierarchyInformation value.
     */
    public HierarchyInformation hierarchyInformation() {
        return this.hierarchyInformation;
    }

    /**
     * Set the hierarchyInformation property: Hierarchy of the product which uniquely identifies the product.
     * 
     * @param hierarchyInformation the hierarchyInformation value to set.
     * @return the ProductDetails object itself.
     */
    public ProductDetails withHierarchyInformation(HierarchyInformation hierarchyInformation) {
        this.hierarchyInformation = hierarchyInformation;
        return this;
    }

    /**
     * Get the count property: Quantity of the product.
     * 
     * @return the count value.
     */
    public Integer count() {
        return this.count;
    }

    /**
     * Get the productDoubleEncryptionStatus property: Double encryption status of the configuration. Read-only field.
     * 
     * @return the productDoubleEncryptionStatus value.
     */
    public DoubleEncryptionStatus productDoubleEncryptionStatus() {
        return this.productDoubleEncryptionStatus;
    }

    /**
     * Get the deviceDetails property: list of device details.
     * 
     * @return the deviceDetails value.
     */
    public List<DeviceDetails> deviceDetails() {
        return this.deviceDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayInfo() != null) {
            displayInfo().validate();
        }
        if (hierarchyInformation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property hierarchyInformation in model ProductDetails"));
        } else {
            hierarchyInformation().validate();
        }
        if (deviceDetails() != null) {
            deviceDetails().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ProductDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("hierarchyInformation", this.hierarchyInformation);
        jsonWriter.writeJsonField("displayInfo", this.displayInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProductDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProductDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ProductDetails.
     */
    public static ProductDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProductDetails deserializedProductDetails = new ProductDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hierarchyInformation".equals(fieldName)) {
                    deserializedProductDetails.hierarchyInformation = HierarchyInformation.fromJson(reader);
                } else if ("displayInfo".equals(fieldName)) {
                    deserializedProductDetails.displayInfo = DisplayInfo.fromJson(reader);
                } else if ("count".equals(fieldName)) {
                    deserializedProductDetails.count = reader.getNullable(JsonReader::getInt);
                } else if ("productDoubleEncryptionStatus".equals(fieldName)) {
                    deserializedProductDetails.productDoubleEncryptionStatus
                        = DoubleEncryptionStatus.fromString(reader.getString());
                } else if ("deviceDetails".equals(fieldName)) {
                    List<DeviceDetails> deviceDetails = reader.readArray(reader1 -> DeviceDetails.fromJson(reader1));
                    deserializedProductDetails.deviceDetails = deviceDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProductDetails;
        });
    }
}
