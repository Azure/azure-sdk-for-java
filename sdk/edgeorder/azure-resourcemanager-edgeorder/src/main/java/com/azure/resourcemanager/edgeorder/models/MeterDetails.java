// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Holds details about billing type and its meter guids.
 */
@Immutable
public class MeterDetails implements JsonSerializable<MeterDetails> {
    /*
     * Represents billing type.
     */
    private BillingType billingType = BillingType.fromString("MeterDetails");

    /*
     * Billing unit applicable for Pav2 billing
     */
    private Double multiplier;

    /*
     * Charging type.
     */
    private ChargingType chargingType;

    /**
     * Creates an instance of MeterDetails class.
     */
    public MeterDetails() {
    }

    /**
     * Get the billingType property: Represents billing type.
     * 
     * @return the billingType value.
     */
    public BillingType billingType() {
        return this.billingType;
    }

    /**
     * Get the multiplier property: Billing unit applicable for Pav2 billing.
     * 
     * @return the multiplier value.
     */
    public Double multiplier() {
        return this.multiplier;
    }

    /**
     * Set the multiplier property: Billing unit applicable for Pav2 billing.
     * 
     * @param multiplier the multiplier value to set.
     * @return the MeterDetails object itself.
     */
    MeterDetails withMultiplier(Double multiplier) {
        this.multiplier = multiplier;
        return this;
    }

    /**
     * Get the chargingType property: Charging type.
     * 
     * @return the chargingType value.
     */
    public ChargingType chargingType() {
        return this.chargingType;
    }

    /**
     * Set the chargingType property: Charging type.
     * 
     * @param chargingType the chargingType value to set.
     * @return the MeterDetails object itself.
     */
    MeterDetails withChargingType(ChargingType chargingType) {
        this.chargingType = chargingType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("billingType", this.billingType == null ? null : this.billingType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MeterDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MeterDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MeterDetails.
     */
    public static MeterDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("billingType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Pav2".equals(discriminatorValue)) {
                    return Pav2MeterDetails.fromJson(readerToUse.reset());
                } else if ("Purchase".equals(discriminatorValue)) {
                    return PurchaseMeterDetails.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static MeterDetails fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MeterDetails deserializedMeterDetails = new MeterDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("billingType".equals(fieldName)) {
                    deserializedMeterDetails.billingType = BillingType.fromString(reader.getString());
                } else if ("multiplier".equals(fieldName)) {
                    deserializedMeterDetails.multiplier = reader.getNullable(JsonReader::getDouble);
                } else if ("chargingType".equals(fieldName)) {
                    deserializedMeterDetails.chargingType = ChargingType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMeterDetails;
        });
    }
}
