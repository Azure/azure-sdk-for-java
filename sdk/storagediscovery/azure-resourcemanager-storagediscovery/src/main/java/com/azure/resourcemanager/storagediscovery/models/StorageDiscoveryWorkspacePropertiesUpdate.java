// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storagediscovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The template for adding updateable properties.
 */
@Fluent
public final class StorageDiscoveryWorkspacePropertiesUpdate
    implements JsonSerializable<StorageDiscoveryWorkspacePropertiesUpdate> {
    /*
     * The storage discovery sku
     */
    private StorageDiscoverySku sku;

    /*
     * The description of the storage discovery workspace
     */
    private String description;

    /*
     * The view level storage discovery data estate
     */
    private List<String> workspaceRoots;

    /*
     * The scopes of the storage discovery workspace.
     */
    private List<StorageDiscoveryScope> scopes;

    /**
     * Creates an instance of StorageDiscoveryWorkspacePropertiesUpdate class.
     */
    public StorageDiscoveryWorkspacePropertiesUpdate() {
    }

    /**
     * Get the sku property: The storage discovery sku.
     * 
     * @return the sku value.
     */
    public StorageDiscoverySku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The storage discovery sku.
     * 
     * @param sku the sku value to set.
     * @return the StorageDiscoveryWorkspacePropertiesUpdate object itself.
     */
    public StorageDiscoveryWorkspacePropertiesUpdate withSku(StorageDiscoverySku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the description property: The description of the storage discovery workspace.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the storage discovery workspace.
     * 
     * @param description the description value to set.
     * @return the StorageDiscoveryWorkspacePropertiesUpdate object itself.
     */
    public StorageDiscoveryWorkspacePropertiesUpdate withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the workspaceRoots property: The view level storage discovery data estate.
     * 
     * @return the workspaceRoots value.
     */
    public List<String> workspaceRoots() {
        return this.workspaceRoots;
    }

    /**
     * Set the workspaceRoots property: The view level storage discovery data estate.
     * 
     * @param workspaceRoots the workspaceRoots value to set.
     * @return the StorageDiscoveryWorkspacePropertiesUpdate object itself.
     */
    public StorageDiscoveryWorkspacePropertiesUpdate withWorkspaceRoots(List<String> workspaceRoots) {
        this.workspaceRoots = workspaceRoots;
        return this;
    }

    /**
     * Get the scopes property: The scopes of the storage discovery workspace.
     * 
     * @return the scopes value.
     */
    public List<StorageDiscoveryScope> scopes() {
        return this.scopes;
    }

    /**
     * Set the scopes property: The scopes of the storage discovery workspace.
     * 
     * @param scopes the scopes value to set.
     * @return the StorageDiscoveryWorkspacePropertiesUpdate object itself.
     */
    public StorageDiscoveryWorkspacePropertiesUpdate withScopes(List<StorageDiscoveryScope> scopes) {
        this.scopes = scopes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scopes() != null) {
            scopes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sku", this.sku == null ? null : this.sku.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("workspaceRoots", this.workspaceRoots,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("scopes", this.scopes, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageDiscoveryWorkspacePropertiesUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageDiscoveryWorkspacePropertiesUpdate if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageDiscoveryWorkspacePropertiesUpdate.
     */
    public static StorageDiscoveryWorkspacePropertiesUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageDiscoveryWorkspacePropertiesUpdate deserializedStorageDiscoveryWorkspacePropertiesUpdate
                = new StorageDiscoveryWorkspacePropertiesUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sku".equals(fieldName)) {
                    deserializedStorageDiscoveryWorkspacePropertiesUpdate.sku
                        = StorageDiscoverySku.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedStorageDiscoveryWorkspacePropertiesUpdate.description = reader.getString();
                } else if ("workspaceRoots".equals(fieldName)) {
                    List<String> workspaceRoots = reader.readArray(reader1 -> reader1.getString());
                    deserializedStorageDiscoveryWorkspacePropertiesUpdate.workspaceRoots = workspaceRoots;
                } else if ("scopes".equals(fieldName)) {
                    List<StorageDiscoveryScope> scopes
                        = reader.readArray(reader1 -> StorageDiscoveryScope.fromJson(reader1));
                    deserializedStorageDiscoveryWorkspacePropertiesUpdate.scopes = scopes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageDiscoveryWorkspacePropertiesUpdate;
        });
    }
}
