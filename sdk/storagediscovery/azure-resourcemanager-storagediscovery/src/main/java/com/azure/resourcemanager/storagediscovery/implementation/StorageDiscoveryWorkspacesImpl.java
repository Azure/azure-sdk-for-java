// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storagediscovery.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storagediscovery.fluent.StorageDiscoveryWorkspacesClient;
import com.azure.resourcemanager.storagediscovery.fluent.models.StorageDiscoveryWorkspaceInner;
import com.azure.resourcemanager.storagediscovery.models.StorageDiscoveryWorkspace;
import com.azure.resourcemanager.storagediscovery.models.StorageDiscoveryWorkspaces;

public final class StorageDiscoveryWorkspacesImpl implements StorageDiscoveryWorkspaces {
    private static final ClientLogger LOGGER = new ClientLogger(StorageDiscoveryWorkspacesImpl.class);

    private final StorageDiscoveryWorkspacesClient innerClient;

    private final com.azure.resourcemanager.storagediscovery.StorageDiscoveryManager serviceManager;

    public StorageDiscoveryWorkspacesImpl(StorageDiscoveryWorkspacesClient innerClient,
        com.azure.resourcemanager.storagediscovery.StorageDiscoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<StorageDiscoveryWorkspace> getByResourceGroupWithResponse(String resourceGroupName,
        String storageDiscoveryWorkspaceName, Context context) {
        Response<StorageDiscoveryWorkspaceInner> inner = this.serviceClient()
            .getByResourceGroupWithResponse(resourceGroupName, storageDiscoveryWorkspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StorageDiscoveryWorkspaceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StorageDiscoveryWorkspace getByResourceGroup(String resourceGroupName,
        String storageDiscoveryWorkspaceName) {
        StorageDiscoveryWorkspaceInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, storageDiscoveryWorkspaceName);
        if (inner != null) {
            return new StorageDiscoveryWorkspaceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName,
        String storageDiscoveryWorkspaceName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, storageDiscoveryWorkspaceName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String storageDiscoveryWorkspaceName) {
        this.serviceClient().delete(resourceGroupName, storageDiscoveryWorkspaceName);
    }

    public PagedIterable<StorageDiscoveryWorkspace> listByResourceGroup(String resourceGroupName) {
        PagedIterable<StorageDiscoveryWorkspaceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StorageDiscoveryWorkspaceImpl(inner1, this.manager()));
    }

    public PagedIterable<StorageDiscoveryWorkspace> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<StorageDiscoveryWorkspaceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StorageDiscoveryWorkspaceImpl(inner1, this.manager()));
    }

    public PagedIterable<StorageDiscoveryWorkspace> list() {
        PagedIterable<StorageDiscoveryWorkspaceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StorageDiscoveryWorkspaceImpl(inner1, this.manager()));
    }

    public PagedIterable<StorageDiscoveryWorkspace> list(Context context) {
        PagedIterable<StorageDiscoveryWorkspaceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StorageDiscoveryWorkspaceImpl(inner1, this.manager()));
    }

    public StorageDiscoveryWorkspace getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageDiscoveryWorkspaceName
            = ResourceManagerUtils.getValueFromIdByName(id, "storageDiscoveryWorkspaces");
        if (storageDiscoveryWorkspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'storageDiscoveryWorkspaces'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, storageDiscoveryWorkspaceName, Context.NONE)
            .getValue();
    }

    public Response<StorageDiscoveryWorkspace> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageDiscoveryWorkspaceName
            = ResourceManagerUtils.getValueFromIdByName(id, "storageDiscoveryWorkspaces");
        if (storageDiscoveryWorkspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'storageDiscoveryWorkspaces'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, storageDiscoveryWorkspaceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageDiscoveryWorkspaceName
            = ResourceManagerUtils.getValueFromIdByName(id, "storageDiscoveryWorkspaces");
        if (storageDiscoveryWorkspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'storageDiscoveryWorkspaces'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, storageDiscoveryWorkspaceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageDiscoveryWorkspaceName
            = ResourceManagerUtils.getValueFromIdByName(id, "storageDiscoveryWorkspaces");
        if (storageDiscoveryWorkspaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'storageDiscoveryWorkspaces'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, storageDiscoveryWorkspaceName, context);
    }

    private StorageDiscoveryWorkspacesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.storagediscovery.StorageDiscoveryManager manager() {
        return this.serviceManager;
    }

    public StorageDiscoveryWorkspaceImpl define(String name) {
        return new StorageDiscoveryWorkspaceImpl(name, this.manager());
    }
}
