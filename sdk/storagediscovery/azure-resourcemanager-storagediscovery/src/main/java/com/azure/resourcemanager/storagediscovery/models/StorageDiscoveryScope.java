// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storagediscovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Storage Discovery Scope. This had added validations.
 */
@Fluent
public final class StorageDiscoveryScope implements JsonSerializable<StorageDiscoveryScope> {
    /*
     * Display name of the collection
     */
    private String displayName;

    /*
     * Resource types for the collection
     */
    private List<StorageDiscoveryResourceType> resourceTypes;

    /*
     * The storage account tags keys to filter
     */
    private List<String> tagKeysOnly;

    /*
     * Resource tags.
     */
    private Map<String, String> tags;

    /**
     * Creates an instance of StorageDiscoveryScope class.
     */
    public StorageDiscoveryScope() {
    }

    /**
     * Get the displayName property: Display name of the collection.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of the collection.
     * 
     * @param displayName the displayName value to set.
     * @return the StorageDiscoveryScope object itself.
     */
    public StorageDiscoveryScope withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the resourceTypes property: Resource types for the collection.
     * 
     * @return the resourceTypes value.
     */
    public List<StorageDiscoveryResourceType> resourceTypes() {
        return this.resourceTypes;
    }

    /**
     * Set the resourceTypes property: Resource types for the collection.
     * 
     * @param resourceTypes the resourceTypes value to set.
     * @return the StorageDiscoveryScope object itself.
     */
    public StorageDiscoveryScope withResourceTypes(List<StorageDiscoveryResourceType> resourceTypes) {
        this.resourceTypes = resourceTypes;
        return this;
    }

    /**
     * Get the tagKeysOnly property: The storage account tags keys to filter.
     * 
     * @return the tagKeysOnly value.
     */
    public List<String> tagKeysOnly() {
        return this.tagKeysOnly;
    }

    /**
     * Set the tagKeysOnly property: The storage account tags keys to filter.
     * 
     * @param tagKeysOnly the tagKeysOnly value to set.
     * @return the StorageDiscoveryScope object itself.
     */
    public StorageDiscoveryScope withTagKeysOnly(List<String> tagKeysOnly) {
        this.tagKeysOnly = tagKeysOnly;
        return this;
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the StorageDiscoveryScope object itself.
     */
    public StorageDiscoveryScope withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property displayName in model StorageDiscoveryScope"));
        }
        if (resourceTypes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceTypes in model StorageDiscoveryScope"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageDiscoveryScope.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeArrayField("resourceTypes", this.resourceTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("tagKeysOnly", this.tagKeysOnly, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageDiscoveryScope from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageDiscoveryScope if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageDiscoveryScope.
     */
    public static StorageDiscoveryScope fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageDiscoveryScope deserializedStorageDiscoveryScope = new StorageDiscoveryScope();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedStorageDiscoveryScope.displayName = reader.getString();
                } else if ("resourceTypes".equals(fieldName)) {
                    List<StorageDiscoveryResourceType> resourceTypes
                        = reader.readArray(reader1 -> StorageDiscoveryResourceType.fromString(reader1.getString()));
                    deserializedStorageDiscoveryScope.resourceTypes = resourceTypes;
                } else if ("tagKeysOnly".equals(fieldName)) {
                    List<String> tagKeysOnly = reader.readArray(reader1 -> reader1.getString());
                    deserializedStorageDiscoveryScope.tagKeysOnly = tagKeysOnly;
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedStorageDiscoveryScope.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageDiscoveryScope;
        });
    }
}
