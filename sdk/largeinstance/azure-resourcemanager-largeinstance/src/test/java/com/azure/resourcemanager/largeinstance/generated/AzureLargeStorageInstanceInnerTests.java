// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.largeinstance.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.largeinstance.fluent.models.AzureLargeStorageInstanceInner;
import com.azure.resourcemanager.largeinstance.models.AzureLargeInstanceHardwareTypeNamesEnum;
import com.azure.resourcemanager.largeinstance.models.AzureLargeStorageInstanceProperties;
import com.azure.resourcemanager.largeinstance.models.StorageBillingProperties;
import com.azure.resourcemanager.largeinstance.models.StorageProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureLargeStorageInstanceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureLargeStorageInstanceInner model = BinaryData.fromString(
            "{\"properties\":{\"azureLargeStorageInstanceUniqueIdentifier\":\"norcjxvsnbyxqab\",\"storageProperties\":{\"provisioningState\":\"Creating\",\"offeringType\":\"cyshurzafbljjgp\",\"storageType\":\"oq\",\"generation\":\"mkljavb\",\"hardwareType\":\"Cisco_UCS\",\"workloadType\":\"qajzyulpkudjkr\",\"storageBillingProperties\":{\"billingMode\":\"bzhfepgzgqexz\",\"sku\":\"c\"}}},\"location\":\"c\",\"tags\":{\"jtjaodxobnbdxkq\":\"erhhbcsglumm\",\"ajionpimexgstxg\":\"xo\",\"gmaajrm\":\"po\",\"clwhijcoejctbz\":\"djwzrlov\"},\"id\":\"qsqsy\",\"name\":\"bkbfkgukdkex\",\"type\":\"ppofmxaxcfjpgdd\"}")
            .toObject(AzureLargeStorageInstanceInner.class);
        Assertions.assertEquals("c", model.location());
        Assertions.assertEquals("erhhbcsglumm", model.tags().get("jtjaodxobnbdxkq"));
        Assertions.assertEquals("norcjxvsnbyxqab", model.properties().azureLargeStorageInstanceUniqueIdentifier());
        Assertions.assertEquals("cyshurzafbljjgp", model.properties().storageProperties().offeringType());
        Assertions.assertEquals("oq", model.properties().storageProperties().storageType());
        Assertions.assertEquals("mkljavb", model.properties().storageProperties().generation());
        Assertions.assertEquals(AzureLargeInstanceHardwareTypeNamesEnum.CISCO_UCS,
            model.properties().storageProperties().hardwareType());
        Assertions.assertEquals("qajzyulpkudjkr", model.properties().storageProperties().workloadType());
        Assertions.assertEquals("bzhfepgzgqexz",
            model.properties().storageProperties().storageBillingProperties().billingMode());
        Assertions.assertEquals("c", model.properties().storageProperties().storageBillingProperties().sku());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureLargeStorageInstanceInner model = new AzureLargeStorageInstanceInner().withLocation("c")
            .withTags(mapOf("jtjaodxobnbdxkq", "erhhbcsglumm", "ajionpimexgstxg", "xo", "gmaajrm", "po",
                "clwhijcoejctbz", "djwzrlov"))
            .withProperties(new AzureLargeStorageInstanceProperties()
                .withAzureLargeStorageInstanceUniqueIdentifier("norcjxvsnbyxqab")
                .withStorageProperties(new StorageProperties().withOfferingType("cyshurzafbljjgp").withStorageType("oq")
                    .withGeneration("mkljavb").withHardwareType(AzureLargeInstanceHardwareTypeNamesEnum.CISCO_UCS)
                    .withWorkloadType("qajzyulpkudjkr").withStorageBillingProperties(
                        new StorageBillingProperties().withBillingMode("bzhfepgzgqexz").withSku("c"))));
        model = BinaryData.fromObject(model).toObject(AzureLargeStorageInstanceInner.class);
        Assertions.assertEquals("c", model.location());
        Assertions.assertEquals("erhhbcsglumm", model.tags().get("jtjaodxobnbdxkq"));
        Assertions.assertEquals("norcjxvsnbyxqab", model.properties().azureLargeStorageInstanceUniqueIdentifier());
        Assertions.assertEquals("cyshurzafbljjgp", model.properties().storageProperties().offeringType());
        Assertions.assertEquals("oq", model.properties().storageProperties().storageType());
        Assertions.assertEquals("mkljavb", model.properties().storageProperties().generation());
        Assertions.assertEquals(AzureLargeInstanceHardwareTypeNamesEnum.CISCO_UCS,
            model.properties().storageProperties().hardwareType());
        Assertions.assertEquals("qajzyulpkudjkr", model.properties().storageProperties().workloadType());
        Assertions.assertEquals("bzhfepgzgqexz",
            model.properties().storageProperties().storageBillingProperties().billingMode());
        Assertions.assertEquals("c", model.properties().storageProperties().storageBillingProperties().sku());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
