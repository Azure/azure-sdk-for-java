// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.largeinstance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.largeinstance.LargeInstanceManager;
import com.azure.resourcemanager.largeinstance.models.AzureLargeInstanceHardwareTypeNamesEnum;
import com.azure.resourcemanager.largeinstance.models.AzureLargeStorageInstance;
import com.azure.resourcemanager.largeinstance.models.AzureLargeStorageInstanceTagsUpdate;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AzureLargeStorageInstancesUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"azureLargeStorageInstanceUniqueIdentifier\":\"cjrvxdjzlmwlxkv\",\"storageProperties\":{\"provisioningState\":\"Canceled\",\"offeringType\":\"ovawjvzunlu\",\"storageType\":\"nnprn\",\"generation\":\"peilpjzuaejxdu\",\"hardwareType\":\"HPE\",\"workloadType\":\"zbbtdzumveek\",\"storageBillingProperties\":{\"billingMode\":\"ozuhkfp\",\"sku\":\"jyofdxluusdtto\"}}},\"location\":\"aboekqv\",\"tags\":{\"flhhcaal\":\"nsmvbxwyj\"},\"id\":\"jixisxyawjoyaqcs\",\"name\":\"yjpkiidzyexz\",\"type\":\"eli\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LargeInstanceManager manager = LargeInstanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AzureLargeStorageInstance response = manager.azureLargeStorageInstances()
            .updateWithResponse("loayqcgw", "tzjuzgwyzmhtxo",
                new AzureLargeStorageInstanceTagsUpdate().withTags(mapOf("vjcbpwxqpsrknf", "ts", "vxqtayriwwroyqbe",
                    "guvriuhprwmd", "nojvknmefqsg", "rmcqiby", "pjyzhpv", "vah")),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("aboekqv", response.location());
        Assertions.assertEquals("nsmvbxwyj", response.tags().get("flhhcaal"));
        Assertions.assertEquals("cjrvxdjzlmwlxkv", response.properties().azureLargeStorageInstanceUniqueIdentifier());
        Assertions.assertEquals("ovawjvzunlu", response.properties().storageProperties().offeringType());
        Assertions.assertEquals("nnprn", response.properties().storageProperties().storageType());
        Assertions.assertEquals("peilpjzuaejxdu", response.properties().storageProperties().generation());
        Assertions.assertEquals(AzureLargeInstanceHardwareTypeNamesEnum.HPE,
            response.properties().storageProperties().hardwareType());
        Assertions.assertEquals("zbbtdzumveek", response.properties().storageProperties().workloadType());
        Assertions.assertEquals("ozuhkfp",
            response.properties().storageProperties().storageBillingProperties().billingMode());
        Assertions.assertEquals("jyofdxluusdtto",
            response.properties().storageProperties().storageBillingProperties().sku());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
