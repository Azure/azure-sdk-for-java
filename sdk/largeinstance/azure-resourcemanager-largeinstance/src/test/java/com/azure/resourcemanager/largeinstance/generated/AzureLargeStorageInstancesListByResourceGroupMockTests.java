// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.largeinstance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.largeinstance.LargeInstanceManager;
import com.azure.resourcemanager.largeinstance.models.AzureLargeInstanceHardwareTypeNamesEnum;
import com.azure.resourcemanager.largeinstance.models.AzureLargeStorageInstance;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AzureLargeStorageInstancesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"azureLargeStorageInstanceUniqueIdentifier\":\"bh\",\"storageProperties\":{\"provisioningState\":\"Updating\",\"offeringType\":\"hrxsbk\",\"storageType\":\"pycanuzbpz\",\"generation\":\"fkuwbcrnwbmehhse\",\"hardwareType\":\"Cisco_UCS\",\"workloadType\":\"srtslhspkdeem\",\"storageBillingProperties\":{\"billingMode\":\"mx\",\"sku\":\"kv\"}}},\"location\":\"elmqk\",\"tags\":{\"dhmdua\":\"hvljuahaquh\",\"pvfadmwsrcr\":\"aex\",\"fmisg\":\"vxpvgomz\"},\"id\":\"bnbbeldawkz\",\"name\":\"ali\",\"type\":\"urqhaka\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LargeInstanceManager manager = LargeInstanceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AzureLargeStorageInstance> response = manager.azureLargeStorageInstances()
            .listByResourceGroup("wfudwpzntxhdzhl", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("elmqk", response.iterator().next().location());
        Assertions.assertEquals("hvljuahaquh", response.iterator().next().tags().get("dhmdua"));
        Assertions.assertEquals("bh",
            response.iterator().next().properties().azureLargeStorageInstanceUniqueIdentifier());
        Assertions.assertEquals("hrxsbk", response.iterator().next().properties().storageProperties().offeringType());
        Assertions.assertEquals("pycanuzbpz",
            response.iterator().next().properties().storageProperties().storageType());
        Assertions.assertEquals("fkuwbcrnwbmehhse",
            response.iterator().next().properties().storageProperties().generation());
        Assertions.assertEquals(AzureLargeInstanceHardwareTypeNamesEnum.CISCO_UCS,
            response.iterator().next().properties().storageProperties().hardwareType());
        Assertions.assertEquals("srtslhspkdeem",
            response.iterator().next().properties().storageProperties().workloadType());
        Assertions.assertEquals("mx",
            response.iterator().next().properties().storageProperties().storageBillingProperties().billingMode());
        Assertions.assertEquals("kv",
            response.iterator().next().properties().storageProperties().storageBillingProperties().sku());
    }
}
