// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.largeinstance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.largeinstance.LargeInstanceManager;
import com.azure.resourcemanager.largeinstance.models.AzureLargeInstanceHardwareTypeNamesEnum;
import com.azure.resourcemanager.largeinstance.models.AzureLargeStorageInstance;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AzureLargeStorageInstancesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"azureLargeStorageInstanceUniqueIdentifier\":\"nayrhyrnxxmueedn\",\"storageProperties\":{\"provisioningState\":\"Accepted\",\"offeringType\":\"tkwqqtchealm\",\"storageType\":\"tdaaygdvwvg\",\"generation\":\"ohgwxrtfudxepxg\",\"hardwareType\":\"SDFLEX\",\"workloadType\":\"vrvmnpkukghim\",\"storageBillingProperties\":{\"billingMode\":\"xgwim\",\"sku\":\"jhfjxwm\"}}},\"location\":\"kkfoqr\",\"tags\":{\"elpcirelsfeaenwa\":\"kzikfjawneaivxwc\",\"xbjhwuaanozjosph\":\"fatkld\"},\"id\":\"oulpjrv\",\"name\":\"ag\",\"type\":\"rvimjwosytxitcsk\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        LargeInstanceManager manager = LargeInstanceManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AzureLargeStorageInstance> response
            = manager.azureLargeStorageInstances().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("kkfoqr", response.iterator().next().location());
        Assertions.assertEquals("kzikfjawneaivxwc", response.iterator().next().tags().get("elpcirelsfeaenwa"));
        Assertions.assertEquals("nayrhyrnxxmueedn",
            response.iterator().next().properties().azureLargeStorageInstanceUniqueIdentifier());
        Assertions.assertEquals("tkwqqtchealm",
            response.iterator().next().properties().storageProperties().offeringType());
        Assertions.assertEquals("tdaaygdvwvg",
            response.iterator().next().properties().storageProperties().storageType());
        Assertions.assertEquals("ohgwxrtfudxepxg",
            response.iterator().next().properties().storageProperties().generation());
        Assertions.assertEquals(AzureLargeInstanceHardwareTypeNamesEnum.SDFLEX,
            response.iterator().next().properties().storageProperties().hardwareType());
        Assertions.assertEquals("vrvmnpkukghim",
            response.iterator().next().properties().storageProperties().workloadType());
        Assertions.assertEquals("xgwim",
            response.iterator().next().properties().storageProperties().storageBillingProperties().billingMode());
        Assertions.assertEquals("jhfjxwm",
            response.iterator().next().properties().storageProperties().storageBillingProperties().sku());
    }
}
