// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.largeinstance.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.largeinstance.LargeInstanceManager;
import com.azure.resourcemanager.largeinstance.models.OperationStatusResult;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AzureLargeInstancesStartMockTests {
    @Test
    public void testStart() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"id\":\"qsemwabne\",\"resourceId\":\"hhszh\",\"name\":\"plvwiwubmwmbes\",\"status\":\"dnkwwtppjflcxog\",\"percentComplete\":52.263226,\"startTime\":\"2021-10-31T14:02:16Z\",\"endTime\":\"2021-04-24T14:30:43Z\",\"operations\":[{\"id\":\"kvmkqzeqq\",\"resourceId\":\"l\",\"name\":\"zxmhhvhgu\",\"status\":\"eodkwobda\",\"percentComplete\":71.73575,\"startTime\":\"2021-09-07T04:15:30Z\",\"endTime\":\"2021-07-18T06:10:06Z\",\"operations\":[{\"id\":\"wakbogqxndl\",\"resourceId\":\"gxhuriplbp\",\"name\":\"xunkbebxmubyynt\",\"status\":\"lrb\",\"percentComplete\":44.608128,\"startTime\":\"2021-01-12T19:16:50Z\",\"endTime\":\"2021-08-02T11:50:30Z\",\"operations\":[{\"status\":\"otgqrlltmu\"}]},{\"id\":\"uwz\",\"resourceId\":\"xbmp\",\"name\":\"jefuzmuvpbttdumo\",\"status\":\"p\",\"percentComplete\":86.096886,\"startTime\":\"2021-08-17T23:26:57Z\",\"endTime\":\"2020-12-23T17:51:55Z\",\"operations\":[{\"status\":\"bhjpglkfgohdne\"},{\"status\":\"el\"},{\"status\":\"phsdyhto\"},{\"status\":\"fikdowwqu\"}]}]},{\"id\":\"xclvit\",\"resourceId\":\"qzonosggbhcohf\",\"name\":\"sjnkal\",\"status\":\"utiiswacf\",\"percentComplete\":97.57967,\"startTime\":\"2020-12-27T17:38:20Z\",\"endTime\":\"2021-07-11T14:50:31Z\",\"operations\":[{\"id\":\"vhqcrail\",\"resourceId\":\"n\",\"name\":\"fuflrwdmhdlx\",\"status\":\"jrxs\",\"percentComplete\":37.06115,\"startTime\":\"2020-12-27T20:37:24Z\",\"endTime\":\"2021-12-04T12:00:18Z\",\"operations\":[{\"status\":\"qapnedgfbcv\"},{\"status\":\"cvqvpkeqdcv\"},{\"status\":\"rhvoods\"},{\"status\":\"tbobz\"}]},{\"id\":\"cjwvn\",\"resourceId\":\"ld\",\"name\":\"gx\",\"status\":\"xrslpm\",\"percentComplete\":49.064796,\"startTime\":\"2021-11-03T10:17:12Z\",\"endTime\":\"2021-07-28T00:53:44Z\",\"operations\":[{\"status\":\"khjwn\"},{\"status\":\"yqsluic\"}]},{\"id\":\"gk\",\"resourceId\":\"lvmbmpaxmodfvuef\",\"name\":\"sbpfvmwyhr\",\"status\":\"ouyftaakc\",\"percentComplete\":58.60455,\"startTime\":\"2021-10-11T10:17:46Z\",\"endTime\":\"2021-07-23T08:41:13Z\",\"operations\":[{\"status\":\"nubexk\"},{\"status\":\"zksmondj\"},{\"status\":\"quxvypomgkop\"},{\"status\":\"whojvp\"}]},{\"id\":\"gxysmocmbqfqvm\",\"resourceId\":\"xozap\",\"name\":\"elxprglyatddck\",\"status\":\"bcuejrjxgci\",\"percentComplete\":18.46162,\"startTime\":\"2021-07-11T05:56:17Z\",\"endTime\":\"2020-12-29T07:40:48Z\",\"operations\":[{\"status\":\"dqrhzoymib\"},{\"status\":\"rq\"},{\"status\":\"ibahwflus\"},{\"status\":\"dtmhrkwofyyvoqa\"}]}]},{\"id\":\"xpbtgiwbwo\",\"resourceId\":\"washr\",\"name\":\"tkcnqxwb\",\"status\":\"okulpiujwa\",\"percentComplete\":85.214745,\"startTime\":\"2021-01-28T12:35:49Z\",\"endTime\":\"2021-10-02T17:21:38Z\",\"operations\":[{\"id\":\"uqerpqlpqwc\",\"resourceId\":\"uqgbdbutauvfbt\",\"name\":\"whhmhykojo\",\"status\":\"afnn\",\"percentComplete\":73.94472,\"startTime\":\"2021-05-26T09:41:10Z\",\"endTime\":\"2021-08-09T15:40:57Z\",\"operations\":[{\"status\":\"mkcdyhbpkkpwdre\"},{\"status\":\"novvqfovljxy\"}]},{\"id\":\"w\",\"resourceId\":\"rsndsytgadgvra\",\"name\":\"en\",\"status\":\"qnzarrwl\",\"percentComplete\":32.54612,\"startTime\":\"2021-04-01T07:49:28Z\",\"endTime\":\"2021-07-01T04:35:37Z\",\"operations\":[{\"status\":\"cewiipfpub\"},{\"status\":\"ibwwiftohqkv\"},{\"status\":\"uvksgplsaknynfsy\"},{\"status\":\"ljphuopxodl\"}]},{\"id\":\"ntorzihleosjswsr\",\"resourceId\":\"lyzrpzbchckqqzqi\",\"name\":\"iysui\",\"status\":\"zynkedya\",\"percentComplete\":82.95103,\"startTime\":\"2021-10-29T12:30:56Z\",\"endTime\":\"2021-05-21T15:42:34Z\",\"operations\":[{\"status\":\"zyh\"}]}]},{\"id\":\"mypyynpcdpu\",\"resourceId\":\"zgmwznmabikns\",\"name\":\"gj\",\"status\":\"xbldtlwwrlkdmtn\",\"percentComplete\":7.766551,\"startTime\":\"2021-02-27T06:46:30Z\",\"endTime\":\"2021-07-06T10:29:53Z\",\"operations\":[{\"id\":\"yhgsy\",\"resourceId\":\"ogjltdtbnnhad\",\"name\":\"crkvcikhnv\",\"status\":\"amqgxqquezikyw\",\"percentComplete\":31.299664,\"startTime\":\"2021-03-13T19:16:06Z\",\"endTime\":\"2021-05-21T20:20:27Z\",\"operations\":[{\"status\":\"melwuipiccjz\"},{\"status\":\"z\"}]}]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        LargeInstanceManager manager = LargeInstanceManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationStatusResult response
            = manager.azureLargeInstances().start("jmygtdsslswtmwer", "ofz", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qsemwabne", response.id());
        Assertions.assertEquals("plvwiwubmwmbes", response.name());
        Assertions.assertEquals("dnkwwtppjflcxog", response.status());
        Assertions.assertEquals(52.263226F, response.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-31T14:02:16Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T14:30:43Z"), response.endTime());
        Assertions.assertEquals("kvmkqzeqq", response.operations().get(0).id());
        Assertions.assertEquals("zxmhhvhgu", response.operations().get(0).name());
        Assertions.assertEquals("eodkwobda", response.operations().get(0).status());
        Assertions.assertEquals(71.73575F, response.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-07T04:15:30Z"), response.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-18T06:10:06Z"), response.operations().get(0).endTime());
        Assertions.assertEquals("wakbogqxndl", response.operations().get(0).operations().get(0).id());
        Assertions.assertEquals("xunkbebxmubyynt", response.operations().get(0).operations().get(0).name());
        Assertions.assertEquals("lrb", response.operations().get(0).operations().get(0).status());
        Assertions.assertEquals(44.608128F, response.operations().get(0).operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-12T19:16:50Z"),
            response.operations().get(0).operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-02T11:50:30Z"),
            response.operations().get(0).operations().get(0).endTime());
        Assertions.assertEquals("otgqrlltmu",
            response.operations().get(0).operations().get(0).operations().get(0).status());
    }
}
