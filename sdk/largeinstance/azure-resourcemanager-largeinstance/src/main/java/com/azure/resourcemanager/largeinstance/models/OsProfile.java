// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.largeinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies the operating system settings for the Azure Large Instance.
 */
@Fluent
public final class OsProfile implements JsonSerializable<OsProfile> {
    /*
     * Specifies the host OS name of the Azure Large Instance.
     */
    private String computerName;

    /*
     * This property allows you to specify the type of the OS.
     */
    private String osType;

    /*
     * Specifies version of operating system.
     */
    private String version;

    /*
     * Specifies the SSH public key used to access the operating system.
     */
    private String sshPublicKey;

    /**
     * Creates an instance of OsProfile class.
     */
    public OsProfile() {
    }

    /**
     * Get the computerName property: Specifies the host OS name of the Azure Large Instance.
     * 
     * @return the computerName value.
     */
    public String computerName() {
        return this.computerName;
    }

    /**
     * Set the computerName property: Specifies the host OS name of the Azure Large Instance.
     * 
     * @param computerName the computerName value to set.
     * @return the OsProfile object itself.
     */
    public OsProfile withComputerName(String computerName) {
        this.computerName = computerName;
        return this;
    }

    /**
     * Get the osType property: This property allows you to specify the type of the OS.
     * 
     * @return the osType value.
     */
    public String osType() {
        return this.osType;
    }

    /**
     * Get the version property: Specifies version of operating system.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the sshPublicKey property: Specifies the SSH public key used to access the operating system.
     * 
     * @return the sshPublicKey value.
     */
    public String sshPublicKey() {
        return this.sshPublicKey;
    }

    /**
     * Set the sshPublicKey property: Specifies the SSH public key used to access the operating system.
     * 
     * @param sshPublicKey the sshPublicKey value to set.
     * @return the OsProfile object itself.
     */
    public OsProfile withSshPublicKey(String sshPublicKey) {
        this.sshPublicKey = sshPublicKey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("computerName", this.computerName);
        jsonWriter.writeStringField("sshPublicKey", this.sshPublicKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OsProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OsProfile if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the OsProfile.
     */
    public static OsProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OsProfile deserializedOsProfile = new OsProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("computerName".equals(fieldName)) {
                    deserializedOsProfile.computerName = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    deserializedOsProfile.osType = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedOsProfile.version = reader.getString();
                } else if ("sshPublicKey".equals(fieldName)) {
                    deserializedOsProfile.sshPublicKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOsProfile;
        });
    }
}
