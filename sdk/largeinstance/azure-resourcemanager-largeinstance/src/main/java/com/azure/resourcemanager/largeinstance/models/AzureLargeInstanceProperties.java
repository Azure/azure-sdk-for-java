// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.largeinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the properties of an Azure Large Instance.
 */
@Fluent
public final class AzureLargeInstanceProperties implements JsonSerializable<AzureLargeInstanceProperties> {
    /*
     * Specifies the hardware settings for the Azure Large Instance.
     */
    private HardwareProfile hardwareProfile;

    /*
     * Specifies the storage settings for the Azure Large Instance disks.
     */
    private StorageProfile storageProfile;

    /*
     * Specifies the operating system settings for the Azure Large Instance.
     */
    private OsProfile osProfile;

    /*
     * Specifies the network settings for the Azure Large Instance.
     */
    private NetworkProfile networkProfile;

    /*
     * Specifies the Azure Large Instance unique ID.
     */
    private String azureLargeInstanceId;

    /*
     * Resource power state
     */
    private AzureLargeInstancePowerStateEnum powerState;

    /*
     * Resource proximity placement group
     */
    private String proximityPlacementGroup;

    /*
     * Hardware revision of an Azure Large Instance
     */
    private String hwRevision;

    /*
     * ARM ID of another AzureLargeInstance that will share a network with this
     * AzureLargeInstance
     */
    private String partnerNodeId;

    /*
     * State of provisioning of the AzureLargeInstance
     */
    private AzureLargeInstanceProvisioningStatesEnum provisioningState;

    /**
     * Creates an instance of AzureLargeInstanceProperties class.
     */
    public AzureLargeInstanceProperties() {
    }

    /**
     * Get the hardwareProfile property: Specifies the hardware settings for the Azure Large Instance.
     * 
     * @return the hardwareProfile value.
     */
    public HardwareProfile hardwareProfile() {
        return this.hardwareProfile;
    }

    /**
     * Set the hardwareProfile property: Specifies the hardware settings for the Azure Large Instance.
     * 
     * @param hardwareProfile the hardwareProfile value to set.
     * @return the AzureLargeInstanceProperties object itself.
     */
    public AzureLargeInstanceProperties withHardwareProfile(HardwareProfile hardwareProfile) {
        this.hardwareProfile = hardwareProfile;
        return this;
    }

    /**
     * Get the storageProfile property: Specifies the storage settings for the Azure Large Instance disks.
     * 
     * @return the storageProfile value.
     */
    public StorageProfile storageProfile() {
        return this.storageProfile;
    }

    /**
     * Set the storageProfile property: Specifies the storage settings for the Azure Large Instance disks.
     * 
     * @param storageProfile the storageProfile value to set.
     * @return the AzureLargeInstanceProperties object itself.
     */
    public AzureLargeInstanceProperties withStorageProfile(StorageProfile storageProfile) {
        this.storageProfile = storageProfile;
        return this;
    }

    /**
     * Get the osProfile property: Specifies the operating system settings for the Azure Large Instance.
     * 
     * @return the osProfile value.
     */
    public OsProfile osProfile() {
        return this.osProfile;
    }

    /**
     * Set the osProfile property: Specifies the operating system settings for the Azure Large Instance.
     * 
     * @param osProfile the osProfile value to set.
     * @return the AzureLargeInstanceProperties object itself.
     */
    public AzureLargeInstanceProperties withOsProfile(OsProfile osProfile) {
        this.osProfile = osProfile;
        return this;
    }

    /**
     * Get the networkProfile property: Specifies the network settings for the Azure Large Instance.
     * 
     * @return the networkProfile value.
     */
    public NetworkProfile networkProfile() {
        return this.networkProfile;
    }

    /**
     * Set the networkProfile property: Specifies the network settings for the Azure Large Instance.
     * 
     * @param networkProfile the networkProfile value to set.
     * @return the AzureLargeInstanceProperties object itself.
     */
    public AzureLargeInstanceProperties withNetworkProfile(NetworkProfile networkProfile) {
        this.networkProfile = networkProfile;
        return this;
    }

    /**
     * Get the azureLargeInstanceId property: Specifies the Azure Large Instance unique ID.
     * 
     * @return the azureLargeInstanceId value.
     */
    public String azureLargeInstanceId() {
        return this.azureLargeInstanceId;
    }

    /**
     * Get the powerState property: Resource power state.
     * 
     * @return the powerState value.
     */
    public AzureLargeInstancePowerStateEnum powerState() {
        return this.powerState;
    }

    /**
     * Get the proximityPlacementGroup property: Resource proximity placement group.
     * 
     * @return the proximityPlacementGroup value.
     */
    public String proximityPlacementGroup() {
        return this.proximityPlacementGroup;
    }

    /**
     * Get the hwRevision property: Hardware revision of an Azure Large Instance.
     * 
     * @return the hwRevision value.
     */
    public String hwRevision() {
        return this.hwRevision;
    }

    /**
     * Get the partnerNodeId property: ARM ID of another AzureLargeInstance that will share a network with this
     * AzureLargeInstance.
     * 
     * @return the partnerNodeId value.
     */
    public String partnerNodeId() {
        return this.partnerNodeId;
    }

    /**
     * Set the partnerNodeId property: ARM ID of another AzureLargeInstance that will share a network with this
     * AzureLargeInstance.
     * 
     * @param partnerNodeId the partnerNodeId value to set.
     * @return the AzureLargeInstanceProperties object itself.
     */
    public AzureLargeInstanceProperties withPartnerNodeId(String partnerNodeId) {
        this.partnerNodeId = partnerNodeId;
        return this;
    }

    /**
     * Get the provisioningState property: State of provisioning of the AzureLargeInstance.
     * 
     * @return the provisioningState value.
     */
    public AzureLargeInstanceProvisioningStatesEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hardwareProfile() != null) {
            hardwareProfile().validate();
        }
        if (storageProfile() != null) {
            storageProfile().validate();
        }
        if (osProfile() != null) {
            osProfile().validate();
        }
        if (networkProfile() != null) {
            networkProfile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("hardwareProfile", this.hardwareProfile);
        jsonWriter.writeJsonField("storageProfile", this.storageProfile);
        jsonWriter.writeJsonField("osProfile", this.osProfile);
        jsonWriter.writeJsonField("networkProfile", this.networkProfile);
        jsonWriter.writeStringField("partnerNodeId", this.partnerNodeId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureLargeInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureLargeInstanceProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureLargeInstanceProperties.
     */
    public static AzureLargeInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureLargeInstanceProperties deserializedAzureLargeInstanceProperties = new AzureLargeInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hardwareProfile".equals(fieldName)) {
                    deserializedAzureLargeInstanceProperties.hardwareProfile = HardwareProfile.fromJson(reader);
                } else if ("storageProfile".equals(fieldName)) {
                    deserializedAzureLargeInstanceProperties.storageProfile = StorageProfile.fromJson(reader);
                } else if ("osProfile".equals(fieldName)) {
                    deserializedAzureLargeInstanceProperties.osProfile = OsProfile.fromJson(reader);
                } else if ("networkProfile".equals(fieldName)) {
                    deserializedAzureLargeInstanceProperties.networkProfile = NetworkProfile.fromJson(reader);
                } else if ("azureLargeInstanceId".equals(fieldName)) {
                    deserializedAzureLargeInstanceProperties.azureLargeInstanceId = reader.getString();
                } else if ("powerState".equals(fieldName)) {
                    deserializedAzureLargeInstanceProperties.powerState
                        = AzureLargeInstancePowerStateEnum.fromString(reader.getString());
                } else if ("proximityPlacementGroup".equals(fieldName)) {
                    deserializedAzureLargeInstanceProperties.proximityPlacementGroup = reader.getString();
                } else if ("hwRevision".equals(fieldName)) {
                    deserializedAzureLargeInstanceProperties.hwRevision = reader.getString();
                } else if ("partnerNodeId".equals(fieldName)) {
                    deserializedAzureLargeInstanceProperties.partnerNodeId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAzureLargeInstanceProperties.provisioningState
                        = AzureLargeInstanceProvisioningStatesEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureLargeInstanceProperties;
        });
    }
}
