// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.largeinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the billing related details of the AzureLargeStorageInstance.
 */
@Fluent
public final class StorageBillingProperties implements JsonSerializable<StorageBillingProperties> {
    /*
     * the billing mode for the storage instance
     */
    private String billingMode;

    /*
     * the SKU type that is provisioned
     */
    private String sku;

    /**
     * Creates an instance of StorageBillingProperties class.
     */
    public StorageBillingProperties() {
    }

    /**
     * Get the billingMode property: the billing mode for the storage instance.
     * 
     * @return the billingMode value.
     */
    public String billingMode() {
        return this.billingMode;
    }

    /**
     * Set the billingMode property: the billing mode for the storage instance.
     * 
     * @param billingMode the billingMode value to set.
     * @return the StorageBillingProperties object itself.
     */
    public StorageBillingProperties withBillingMode(String billingMode) {
        this.billingMode = billingMode;
        return this;
    }

    /**
     * Get the sku property: the SKU type that is provisioned.
     * 
     * @return the sku value.
     */
    public String sku() {
        return this.sku;
    }

    /**
     * Set the sku property: the SKU type that is provisioned.
     * 
     * @param sku the sku value to set.
     * @return the StorageBillingProperties object itself.
     */
    public StorageBillingProperties withSku(String sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("billingMode", this.billingMode);
        jsonWriter.writeStringField("sku", this.sku);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageBillingProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageBillingProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageBillingProperties.
     */
    public static StorageBillingProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageBillingProperties deserializedStorageBillingProperties = new StorageBillingProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("billingMode".equals(fieldName)) {
                    deserializedStorageBillingProperties.billingMode = reader.getString();
                } else if ("sku".equals(fieldName)) {
                    deserializedStorageBillingProperties.sku = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageBillingProperties;
        });
    }
}
