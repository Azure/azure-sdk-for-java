// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurelargeinstance.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurelargeinstance.fluent.AzureLargeInstancesClient;
import com.azure.resourcemanager.azurelargeinstance.fluent.models.AzureLargeInstanceInner;
import com.azure.resourcemanager.azurelargeinstance.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.azurelargeinstance.models.AzureLargeInstance;
import com.azure.resourcemanager.azurelargeinstance.models.AzureLargeInstances;
import com.azure.resourcemanager.azurelargeinstance.models.ForceState;
import com.azure.resourcemanager.azurelargeinstance.models.OperationStatusResult;
import com.azure.resourcemanager.azurelargeinstance.models.Tags;

public final class AzureLargeInstancesImpl implements AzureLargeInstances {
    private static final ClientLogger LOGGER = new ClientLogger(AzureLargeInstancesImpl.class);

    private final AzureLargeInstancesClient innerClient;

    private final com.azure.resourcemanager.azurelargeinstance.AzureLargeInstanceManager serviceManager;

    public AzureLargeInstancesImpl(
        AzureLargeInstancesClient innerClient,
        com.azure.resourcemanager.azurelargeinstance.AzureLargeInstanceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AzureLargeInstance> list() {
        PagedIterable<AzureLargeInstanceInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new AzureLargeInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<AzureLargeInstance> list(Context context) {
        PagedIterable<AzureLargeInstanceInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new AzureLargeInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<AzureLargeInstance> listByResourceGroup(String resourceGroupName) {
        PagedIterable<AzureLargeInstanceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new AzureLargeInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<AzureLargeInstance> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<AzureLargeInstanceInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new AzureLargeInstanceImpl(inner1, this.manager()));
    }

    public OperationStatusResult start(String resourceGroupName, String azureLargeInstanceName) {
        OperationStatusResultInner inner = this.serviceClient().start(resourceGroupName, azureLargeInstanceName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult start(String resourceGroupName, String azureLargeInstanceName, Context context) {
        OperationStatusResultInner inner =
            this.serviceClient().start(resourceGroupName, azureLargeInstanceName, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult restart(String resourceGroupName, String azureLargeInstanceName) {
        OperationStatusResultInner inner = this.serviceClient().restart(resourceGroupName, azureLargeInstanceName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult restart(
        String resourceGroupName, String azureLargeInstanceName, ForceState forceParameter, Context context) {
        OperationStatusResultInner inner =
            this.serviceClient().restart(resourceGroupName, azureLargeInstanceName, forceParameter, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult shutdown(String resourceGroupName, String azureLargeInstanceName) {
        OperationStatusResultInner inner = this.serviceClient().shutdown(resourceGroupName, azureLargeInstanceName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult shutdown(String resourceGroupName, String azureLargeInstanceName, Context context) {
        OperationStatusResultInner inner =
            this.serviceClient().shutdown(resourceGroupName, azureLargeInstanceName, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AzureLargeInstance> getByResourceGroupWithResponse(
        String resourceGroupName, String azureLargeInstanceName, Context context) {
        Response<AzureLargeInstanceInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, azureLargeInstanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AzureLargeInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AzureLargeInstance getByResourceGroup(String resourceGroupName, String azureLargeInstanceName) {
        AzureLargeInstanceInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, azureLargeInstanceName);
        if (inner != null) {
            return new AzureLargeInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AzureLargeInstance> updateWithResponse(
        String resourceGroupName, String azureLargeInstanceName, Tags tagsParameter, Context context) {
        Response<AzureLargeInstanceInner> inner =
            this.serviceClient().updateWithResponse(resourceGroupName, azureLargeInstanceName, tagsParameter, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AzureLargeInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AzureLargeInstance update(String resourceGroupName, String azureLargeInstanceName, Tags tagsParameter) {
        AzureLargeInstanceInner inner =
            this.serviceClient().update(resourceGroupName, azureLargeInstanceName, tagsParameter);
        if (inner != null) {
            return new AzureLargeInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private AzureLargeInstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurelargeinstance.AzureLargeInstanceManager manager() {
        return this.serviceManager;
    }
}
