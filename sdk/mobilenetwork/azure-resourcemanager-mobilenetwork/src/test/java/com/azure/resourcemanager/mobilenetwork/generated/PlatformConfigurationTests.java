// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.AzureStackEdgeDeviceResourceId;
import com.azure.resourcemanager.mobilenetwork.models.AzureStackHciClusterResourceId;
import com.azure.resourcemanager.mobilenetwork.models.ConnectedClusterResourceId;
import com.azure.resourcemanager.mobilenetwork.models.CustomLocationResourceId;
import com.azure.resourcemanager.mobilenetwork.models.PlatformConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PlatformType;
import org.junit.jupiter.api.Assertions;

public final class PlatformConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PlatformConfiguration model =
            BinaryData
                .fromString(
                    "{\"type\":\"3P-AZURE-STACK-HCI\",\"azureStackEdgeDevice\":{\"id\":\"hsmtxpsiebtfhvp\"},\"azureStackEdgeDevices\":[{\"id\":\"pskrdqmh\"},{\"id\":\"jdhtldwkyzxu\"}],\"azureStackHciCluster\":{\"id\":\"kn\"},\"connectedCluster\":{\"id\":\"scwsv\"},\"customLocation\":{\"id\":\"otogtwrupqs\"}}")
                .toObject(PlatformConfiguration.class);
        Assertions.assertEquals(PlatformType.THREE_P_AZURE_STACK_HCI, model.type());
        Assertions.assertEquals("hsmtxpsiebtfhvp", model.azureStackEdgeDevice().id());
        Assertions.assertEquals("kn", model.azureStackHciCluster().id());
        Assertions.assertEquals("scwsv", model.connectedCluster().id());
        Assertions.assertEquals("otogtwrupqs", model.customLocation().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PlatformConfiguration model =
            new PlatformConfiguration()
                .withType(PlatformType.THREE_P_AZURE_STACK_HCI)
                .withAzureStackEdgeDevice(new AzureStackEdgeDeviceResourceId().withId("hsmtxpsiebtfhvp"))
                .withAzureStackHciCluster(new AzureStackHciClusterResourceId().withId("kn"))
                .withConnectedCluster(new ConnectedClusterResourceId().withId("scwsv"))
                .withCustomLocation(new CustomLocationResourceId().withId("otogtwrupqs"));
        model = BinaryData.fromObject(model).toObject(PlatformConfiguration.class);
        Assertions.assertEquals(PlatformType.THREE_P_AZURE_STACK_HCI, model.type());
        Assertions.assertEquals("hsmtxpsiebtfhvp", model.azureStackEdgeDevice().id());
        Assertions.assertEquals("kn", model.azureStackHciCluster().id());
        Assertions.assertEquals("scwsv", model.connectedCluster().id());
        Assertions.assertEquals("otogtwrupqs", model.customLocation().id());
    }
}
