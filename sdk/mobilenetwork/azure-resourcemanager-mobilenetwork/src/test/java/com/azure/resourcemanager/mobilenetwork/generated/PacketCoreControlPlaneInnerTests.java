// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.PacketCoreControlPlaneInner;
import com.azure.resourcemanager.mobilenetwork.models.AuthenticationType;
import com.azure.resourcemanager.mobilenetwork.models.AzureStackEdgeDeviceResourceId;
import com.azure.resourcemanager.mobilenetwork.models.AzureStackHciClusterResourceId;
import com.azure.resourcemanager.mobilenetwork.models.BillingSku;
import com.azure.resourcemanager.mobilenetwork.models.ConnectedClusterResourceId;
import com.azure.resourcemanager.mobilenetwork.models.CoreNetworkType;
import com.azure.resourcemanager.mobilenetwork.models.CustomLocationResourceId;
import com.azure.resourcemanager.mobilenetwork.models.DesiredInstallationState;
import com.azure.resourcemanager.mobilenetwork.models.DiagnosticsUploadConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.EventHubConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.HttpsServerCertificate;
import com.azure.resourcemanager.mobilenetwork.models.Installation;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import com.azure.resourcemanager.mobilenetwork.models.LocalDiagnosticsAccessConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.ManagedServiceIdentity;
import com.azure.resourcemanager.mobilenetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mobilenetwork.models.NasRerouteConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PlatformConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PlatformType;
import com.azure.resourcemanager.mobilenetwork.models.SignalingConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.SiteResourceId;
import com.azure.resourcemanager.mobilenetwork.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PacketCoreControlPlaneInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PacketCoreControlPlaneInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Deleting\",\"installation\":{\"desiredState\":\"Uninstalled\",\"state\":\"RollingBack\",\"reinstallRequired\":\"NotRequired\",\"reasons\":[\"NoPacketCoreDataPlane\"],\"operation\":{\"id\":\"bbzoggig\"}},\"sites\":[{\"id\":\"wburvjxxjnspydpt\"},{\"id\":\"oenkouknvudwti\"},{\"id\":\"kbldngkpocipa\"}],\"platform\":{\"type\":\"3P-AZURE-STACK-HCI\",\"azureStackEdgeDevice\":{\"id\":\"o\"},\"azureStackEdgeDevices\":[{\"id\":\"kgjn\"},{\"id\":\"iucgygevqzn\"},{\"id\":\"yp\"},{\"id\":\"rbpizc\"}],\"azureStackHciCluster\":{\"id\":\"qjsdpydnfyhxdeo\"},\"connectedCluster\":{\"id\":\"zi\"},\"customLocation\":{\"id\":\"ifsjttgzfbishcb\"}},\"coreNetworkTechnology\":\"EPC\",\"version\":\"deyeamdphagalpbu\",\"installedVersion\":\"gipwhonowkg\",\"rollbackVersion\":\"wankixzbi\",\"controlPlaneAccessInterface\":{\"name\":\"eputtmrywnuzoqf\",\"ipv4Address\":\"yqzrnkcqvyxlw\",\"ipv4Subnet\":\"lsicohoqqnwv\",\"ipv4Gateway\":\"yav\"},\"controlPlaneAccessVirtualIpv4Addresses\":[\"eun\"],\"sku\":\"G0\",\"ueMtu\":375848936,\"localDiagnosticsAccess\":{\"authenticationType\":\"AAD\",\"httpsServerCertificate\":{\"certificateUrl\":\"xzko\",\"provisioning\":{\"state\":\"NotProvisioned\",\"reason\":\"oklyaxuconuq\"}}},\"diagnosticsUpload\":{\"storageAccountContainerUrl\":\"fkbey\"},\"eventHub\":{\"id\":\"wrmjmwvvjektc\",\"reportingInterval\":1803945661},\"signaling\":{\"nasReroute\":{\"macroMmeGroupId\":621929714}},\"interopSettings\":\"datarsffrzpwvlqdqgbi\"},\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"etcktvfcivfsnk\":{\"principalId\":\"1a6a960c-6430-4ee4-876b-d65e7e574635\",\"clientId\":\"89d561cc-4761-425e-8e03-a45bca5d550e\"},\"ctq\":{\"principalId\":\"910a99b8-84ee-436d-b1e8-28a8e8dd9c04\",\"clientId\":\"17b1a85e-8bc1-4025-a802-13c7a50121e3\"},\"bebrjcxerfuwuttt\":{\"principalId\":\"635cac69-5999-41ca-a3b3-aad100487103\",\"clientId\":\"b7a93a18-aa98-4868-a3b7-ebf0822c7c60\"}}},\"location\":\"vjrbirphxepcyvah\",\"tags\":{\"xjvuujqgidokg\":\"jky\",\"sncghkjeszz\":\"ljyoxgvcltb\",\"mxnehmp\":\"bijhtxfvgxbf\"},\"id\":\"ec\",\"name\":\"godebfqkkrbmpu\",\"type\":\"gr\"}")
                .toObject(PacketCoreControlPlaneInner.class);
        Assertions.assertEquals("vjrbirphxepcyvah", model.location());
        Assertions.assertEquals("jky", model.tags().get("xjvuujqgidokg"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals(DesiredInstallationState.UNINSTALLED, model.installation().desiredState());
        Assertions.assertEquals("wburvjxxjnspydpt", model.sites().get(0).id());
        Assertions.assertEquals(PlatformType.THREE_P_AZURE_STACK_HCI, model.platform().type());
        Assertions.assertEquals("o", model.platform().azureStackEdgeDevice().id());
        Assertions.assertEquals("qjsdpydnfyhxdeo", model.platform().azureStackHciCluster().id());
        Assertions.assertEquals("zi", model.platform().connectedCluster().id());
        Assertions.assertEquals("ifsjttgzfbishcb", model.platform().customLocation().id());
        Assertions.assertEquals(CoreNetworkType.EPC, model.coreNetworkTechnology());
        Assertions.assertEquals("deyeamdphagalpbu", model.version());
        Assertions.assertEquals("eputtmrywnuzoqf", model.controlPlaneAccessInterface().name());
        Assertions.assertEquals("yqzrnkcqvyxlw", model.controlPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("lsicohoqqnwv", model.controlPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("yav", model.controlPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals("eun", model.controlPlaneAccessVirtualIpv4Addresses().get(0));
        Assertions.assertEquals(BillingSku.G0, model.sku());
        Assertions.assertEquals(375848936, model.ueMtu());
        Assertions.assertEquals(AuthenticationType.AAD, model.localDiagnosticsAccess().authenticationType());
        Assertions.assertEquals("xzko", model.localDiagnosticsAccess().httpsServerCertificate().certificateUrl());
        Assertions.assertEquals("fkbey", model.diagnosticsUpload().storageAccountContainerUrl());
        Assertions.assertEquals("wrmjmwvvjektc", model.eventHub().id());
        Assertions.assertEquals(1803945661, model.eventHub().reportingInterval());
        Assertions.assertEquals(621929714, model.signaling().nasReroute().macroMmeGroupId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PacketCoreControlPlaneInner model =
            new PacketCoreControlPlaneInner()
                .withLocation("vjrbirphxepcyvah")
                .withTags(mapOf("xjvuujqgidokg", "jky", "sncghkjeszz", "ljyoxgvcltb", "mxnehmp", "bijhtxfvgxbf"))
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentities(
                            mapOf(
                                "etcktvfcivfsnk",
                                new UserAssignedIdentity(),
                                "ctq",
                                new UserAssignedIdentity(),
                                "bebrjcxerfuwuttt",
                                new UserAssignedIdentity())))
                .withInstallation(new Installation().withDesiredState(DesiredInstallationState.UNINSTALLED))
                .withSites(
                    Arrays
                        .asList(
                            new SiteResourceId().withId("wburvjxxjnspydpt"),
                            new SiteResourceId().withId("oenkouknvudwti"),
                            new SiteResourceId().withId("kbldngkpocipa")))
                .withPlatform(
                    new PlatformConfiguration()
                        .withType(PlatformType.THREE_P_AZURE_STACK_HCI)
                        .withAzureStackEdgeDevice(new AzureStackEdgeDeviceResourceId().withId("o"))
                        .withAzureStackHciCluster(new AzureStackHciClusterResourceId().withId("qjsdpydnfyhxdeo"))
                        .withConnectedCluster(new ConnectedClusterResourceId().withId("zi"))
                        .withCustomLocation(new CustomLocationResourceId().withId("ifsjttgzfbishcb")))
                .withCoreNetworkTechnology(CoreNetworkType.EPC)
                .withVersion("deyeamdphagalpbu")
                .withControlPlaneAccessInterface(
                    new InterfaceProperties()
                        .withName("eputtmrywnuzoqf")
                        .withIpv4Address("yqzrnkcqvyxlw")
                        .withIpv4Subnet("lsicohoqqnwv")
                        .withIpv4Gateway("yav"))
                .withControlPlaneAccessVirtualIpv4Addresses(Arrays.asList("eun"))
                .withSku(BillingSku.G0)
                .withUeMtu(375848936)
                .withLocalDiagnosticsAccess(
                    new LocalDiagnosticsAccessConfiguration()
                        .withAuthenticationType(AuthenticationType.AAD)
                        .withHttpsServerCertificate(new HttpsServerCertificate().withCertificateUrl("xzko")))
                .withDiagnosticsUpload(new DiagnosticsUploadConfiguration().withStorageAccountContainerUrl("fkbey"))
                .withEventHub(new EventHubConfiguration().withId("wrmjmwvvjektc").withReportingInterval(1803945661))
                .withSignaling(
                    new SignalingConfiguration()
                        .withNasReroute(new NasRerouteConfiguration().withMacroMmeGroupId(621929714)))
                .withInteropSettings("datarsffrzpwvlqdqgbi");
        model = BinaryData.fromObject(model).toObject(PacketCoreControlPlaneInner.class);
        Assertions.assertEquals("vjrbirphxepcyvah", model.location());
        Assertions.assertEquals("jky", model.tags().get("xjvuujqgidokg"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals(DesiredInstallationState.UNINSTALLED, model.installation().desiredState());
        Assertions.assertEquals("wburvjxxjnspydpt", model.sites().get(0).id());
        Assertions.assertEquals(PlatformType.THREE_P_AZURE_STACK_HCI, model.platform().type());
        Assertions.assertEquals("o", model.platform().azureStackEdgeDevice().id());
        Assertions.assertEquals("qjsdpydnfyhxdeo", model.platform().azureStackHciCluster().id());
        Assertions.assertEquals("zi", model.platform().connectedCluster().id());
        Assertions.assertEquals("ifsjttgzfbishcb", model.platform().customLocation().id());
        Assertions.assertEquals(CoreNetworkType.EPC, model.coreNetworkTechnology());
        Assertions.assertEquals("deyeamdphagalpbu", model.version());
        Assertions.assertEquals("eputtmrywnuzoqf", model.controlPlaneAccessInterface().name());
        Assertions.assertEquals("yqzrnkcqvyxlw", model.controlPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("lsicohoqqnwv", model.controlPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("yav", model.controlPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals("eun", model.controlPlaneAccessVirtualIpv4Addresses().get(0));
        Assertions.assertEquals(BillingSku.G0, model.sku());
        Assertions.assertEquals(375848936, model.ueMtu());
        Assertions.assertEquals(AuthenticationType.AAD, model.localDiagnosticsAccess().authenticationType());
        Assertions.assertEquals("xzko", model.localDiagnosticsAccess().httpsServerCertificate().certificateUrl());
        Assertions.assertEquals("fkbey", model.diagnosticsUpload().storageAccountContainerUrl());
        Assertions.assertEquals("wrmjmwvvjektc", model.eventHub().id());
        Assertions.assertEquals(1803945661, model.eventHub().reportingInterval());
        Assertions.assertEquals(621929714, model.signaling().nasReroute().macroMmeGroupId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
