// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.PacketCoreControlPlaneVersionInner;
import com.azure.resourcemanager.mobilenetwork.models.ObsoleteVersion;
import com.azure.resourcemanager.mobilenetwork.models.PacketCoreControlPlaneVersionListResult;
import com.azure.resourcemanager.mobilenetwork.models.Platform;
import com.azure.resourcemanager.mobilenetwork.models.PlatformType;
import com.azure.resourcemanager.mobilenetwork.models.RecommendedVersion;
import com.azure.resourcemanager.mobilenetwork.models.VersionState;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PacketCoreControlPlaneVersionListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PacketCoreControlPlaneVersionListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleted\",\"platforms\":[{\"platformType\":\"AKS-HCI\",\"versionState\":\"Deprecated\",\"minimumPlatformSoftwareVersion\":\"wmszkk\",\"maximumPlatformSoftwareVersion\":\"qreyfkzi\",\"recommendedVersion\":\"Recommended\",\"obsoleteVersion\":\"Obsolete\",\"haUpgradesAvailable\":[\"a\",\"vxwc\",\"elpcirelsfeaenwa\"]}]},\"id\":\"atklddxbjhwuaa\",\"name\":\"oz\",\"type\":\"osphyoul\"}],\"nextLink\":\"rvxaglrvimjwosy\"}")
            .toObject(PacketCoreControlPlaneVersionListResult.class);
        Assertions.assertEquals(PlatformType.AKS_HCI, model.value().get(0).platforms().get(0).platformType());
        Assertions.assertEquals(VersionState.DEPRECATED, model.value().get(0).platforms().get(0).versionState());
        Assertions.assertEquals("wmszkk", model.value().get(0).platforms().get(0).minimumPlatformSoftwareVersion());
        Assertions.assertEquals("qreyfkzi", model.value().get(0).platforms().get(0).maximumPlatformSoftwareVersion());
        Assertions.assertEquals(RecommendedVersion.RECOMMENDED,
            model.value().get(0).platforms().get(0).recommendedVersion());
        Assertions.assertEquals(ObsoleteVersion.OBSOLETE, model.value().get(0).platforms().get(0).obsoleteVersion());
        Assertions.assertEquals("a", model.value().get(0).platforms().get(0).haUpgradesAvailable().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PacketCoreControlPlaneVersionListResult model = new PacketCoreControlPlaneVersionListResult()
            .withValue(Arrays.asList(new PacketCoreControlPlaneVersionInner()
                .withPlatforms(Arrays.asList(new Platform().withPlatformType(PlatformType.AKS_HCI)
                    .withVersionState(VersionState.DEPRECATED)
                    .withMinimumPlatformSoftwareVersion("wmszkk")
                    .withMaximumPlatformSoftwareVersion("qreyfkzi")
                    .withRecommendedVersion(RecommendedVersion.RECOMMENDED)
                    .withObsoleteVersion(ObsoleteVersion.OBSOLETE)
                    .withHaUpgradesAvailable(Arrays.asList("a", "vxwc", "elpcirelsfeaenwa"))))));
        model = BinaryData.fromObject(model).toObject(PacketCoreControlPlaneVersionListResult.class);
        Assertions.assertEquals(PlatformType.AKS_HCI, model.value().get(0).platforms().get(0).platformType());
        Assertions.assertEquals(VersionState.DEPRECATED, model.value().get(0).platforms().get(0).versionState());
        Assertions.assertEquals("wmszkk", model.value().get(0).platforms().get(0).minimumPlatformSoftwareVersion());
        Assertions.assertEquals("qreyfkzi", model.value().get(0).platforms().get(0).maximumPlatformSoftwareVersion());
        Assertions.assertEquals(RecommendedVersion.RECOMMENDED,
            model.value().get(0).platforms().get(0).recommendedVersion());
        Assertions.assertEquals(ObsoleteVersion.OBSOLETE, model.value().get(0).platforms().get(0).obsoleteVersion());
        Assertions.assertEquals("a", model.value().get(0).platforms().get(0).haUpgradesAvailable().get(0));
    }
}
