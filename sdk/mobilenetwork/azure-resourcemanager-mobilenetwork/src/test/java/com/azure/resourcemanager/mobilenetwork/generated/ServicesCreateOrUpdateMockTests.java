// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.QosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.Service;
import com.azure.resourcemanager.mobilenetwork.models.ServiceDataFlowTemplate;
import com.azure.resourcemanager.mobilenetwork.models.TrafficControlPermission;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"servicePrecedence\":1265234156,\"serviceQosPolicy\":{\"5qi\":1540955255,\"allocationAndRetentionPriorityLevel\":1114161467,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"cpwzv\",\"downlink\":\"doksqdtiwlwxlbon\"}},\"pccRules\":[{\"ruleName\":\"bazqicqchygtvxby\",\"rulePrecedence\":1673817670,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"pubdpkx\",\"downlink\":\"qvgx\"},\"5qi\":400759737,\"allocationAndRetentionPriorityLevel\":1942989758,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"kxdxuwsaifmcwn\",\"downlink\":\"s\"}},\"trafficControl\":\"Blocked\",\"serviceDataFlowTemplates\":[{\"templateName\":\"hg\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"kb\",\"direction\":\"Uplink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"njolgjyyxpv\",\"direction\":\"Uplink\",\"protocol\":[],\"remoteIpList\":[]}]}]},\"location\":\"zerqzevxoqei\",\"tags\":{\"qulhmzy\":\"waljglzoblqwaaf\",\"qjcrgaxwmzwdf\":\"bhdvafjrqpjiy\"},\"id\":\"bnrzorpdltbqctq\",\"name\":\"fg\",\"type\":\"xsaetg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Service response = manager.services()
            .define("vxhmtfhocnxzcmj")
            .withRegion("ycnlbvgjcodk")
            .withExistingMobileNetwork("lbnwtpcpahp", "z")
            .withServicePrecedence(667323008)
            .withPccRules(Arrays.asList(new PccRuleConfiguration().withRuleName("doesxxhmwcdb")
                .withRulePrecedence(526210468)
                .withRuleQosPolicy(new PccRuleQosPolicy().withFiveQi(954240404)
                    .withAllocationAndRetentionPriorityLevel(962345519)
                    .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                    .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                    .withMaximumBitRate(new Ambr().withUplink("snbagnchjhg").withDownlink("muowakywalhjy"))
                    .withGuaranteedBitRate(new Ambr().withUplink("ikxkxhneg").withDownlink("njzrbhtmeplvu")))
                .withTrafficControl(TrafficControlPermission.ENABLED)
                .withServiceDataFlowTemplates(Arrays.asList(
                    new ServiceDataFlowTemplate().withTemplateName("qt")
                        .withDirection(SdfDirection.BIDIRECTIONAL)
                        .withProtocol(Arrays.asList())
                        .withRemoteIpList(Arrays.asList()),
                    new ServiceDataFlowTemplate().withTemplateName("drclssoljome")
                        .withDirection(SdfDirection.DOWNLINK)
                        .withProtocol(Arrays.asList())
                        .withRemoteIpList(Arrays.asList())))))
            .withTags(mapOf("s", "iiy"))
            .withServiceQosPolicy(new QosPolicy().withFiveQi(792794865)
                .withAllocationAndRetentionPriorityLevel(553468094)
                .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                .withMaximumBitRate(new Ambr().withUplink("njevhdlmydidw").withDownlink("epfwwt")))
            .create();

        Assertions.assertEquals("zerqzevxoqei", response.location());
        Assertions.assertEquals("waljglzoblqwaaf", response.tags().get("qulhmzy"));
        Assertions.assertEquals(1265234156, response.servicePrecedence());
        Assertions.assertEquals(1540955255, response.serviceQosPolicy().fiveQi());
        Assertions.assertEquals(1114161467, response.serviceQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, response.serviceQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            response.serviceQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("cpwzv", response.serviceQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("doksqdtiwlwxlbon", response.serviceQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("bazqicqchygtvxby", response.pccRules().get(0).ruleName());
        Assertions.assertEquals(1673817670, response.pccRules().get(0).rulePrecedence());
        Assertions.assertEquals(400759737, response.pccRules().get(0).ruleQosPolicy().fiveQi());
        Assertions.assertEquals(1942989758,
            response.pccRules().get(0).ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT,
            response.pccRules().get(0).ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            response.pccRules().get(0).ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("kxdxuwsaifmcwn", response.pccRules().get(0).ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("s", response.pccRules().get(0).ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("pubdpkx", response.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("qvgx", response.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.BLOCKED, response.pccRules().get(0).trafficControl());
        Assertions.assertEquals("hg", response.pccRules().get(0).serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.DOWNLINK,
            response.pccRules().get(0).serviceDataFlowTemplates().get(0).direction());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
