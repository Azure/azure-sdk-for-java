// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.QosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.Service;
import com.azure.resourcemanager.mobilenetwork.models.ServiceDataFlowTemplate;
import com.azure.resourcemanager.mobilenetwork.models.TrafficControlPermission;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"servicePrecedence\":585155395,\"serviceQosPolicy\":{\"5qi\":1538790173,\"allocationAndRetentionPriorityLevel\":2090687916,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"tfvpndpmiljpn\",\"downlink\":\"ynudqllzsa\"}},\"pccRules\":[{\"ruleName\":\"pjlxeehuxiqhzl\",\"rulePrecedence\":1584331771,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"ezxlskihm\",\"downlink\":\"rfdsajrednwy\"},\"5qi\":1900564261,\"allocationAndRetentionPriorityLevel\":705392467,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"vuafpwzyifr\",\"downlink\":\"gwltxeqip\"}},\"trafficControl\":\"Enabled\",\"serviceDataFlowTemplates\":[{\"templateName\":\"yimsfayorpr\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"kj\",\"direction\":\"Bidirectional\",\"protocol\":[],\"remoteIpList\":[]}]}]},\"location\":\"sl\",\"tags\":{\"vwjtqpkevmyltjc\":\"smjkwynqxaekqsy\",\"cclfgxannn\":\"spxklu\",\"ewxigpxvk\":\"ytzpo\",\"dfaifyzyzeyuube\":\"maupxvpi\"},\"id\":\"ds\",\"name\":\"l\",\"type\":\"ytoithgygvfl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Service response = manager.services()
            .define("kyeclcdigpta")
            .withRegion("wixvcpwnkwywzw")
            .withExistingMobileNetwork("fzhompheq", "urelyujlfyoump")
            .withServicePrecedence(241474802)
            .withPccRules(Arrays.asList(new PccRuleConfiguration().withRuleName("yzjdnrqjbt")
                .withRulePrecedence(200724130)
                .withRuleQosPolicy(new PccRuleQosPolicy().withFiveQi(1159575724)
                    .withAllocationAndRetentionPriorityLevel(1341516669)
                    .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                    .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                    .withMaximumBitRate(new Ambr().withUplink("yslpkcvmw").withDownlink("auxxepmyw"))
                    .withGuaranteedBitRate(new Ambr().withUplink("oqa").withDownlink("bzgyhfwwvuatbw")))
                .withTrafficControl(TrafficControlPermission.BLOCKED)
                .withServiceDataFlowTemplates(Arrays.asList(
                    new ServiceDataFlowTemplate().withTemplateName("c")
                        .withDirection(SdfDirection.UPLINK)
                        .withProtocol(Arrays.asList())
                        .withRemoteIpList(Arrays.asList()),
                    new ServiceDataFlowTemplate().withTemplateName("iciijqpkzfbojx")
                        .withDirection(SdfDirection.UPLINK)
                        .withProtocol(Arrays.asList())
                        .withRemoteIpList(Arrays.asList()),
                    new ServiceDataFlowTemplate().withTemplateName("cs")
                        .withDirection(SdfDirection.UPLINK)
                        .withProtocol(Arrays.asList())
                        .withRemoteIpList(Arrays.asList())))))
            .withTags(mapOf("tamtyv", "lickduoi", "rwzawnvs", "kn", "imwrzregzgyufu", "cfhzagxnvhycv"))
            .withServiceQosPolicy(new QosPolicy().withFiveQi(954093565)
                .withAllocationAndRetentionPriorityLevel(1018096837)
                .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                .withMaximumBitRate(new Ambr().withUplink("oclxiut").withDownlink("jc")))
            .create();

        Assertions.assertEquals("sl", response.location());
        Assertions.assertEquals("smjkwynqxaekqsy", response.tags().get("vwjtqpkevmyltjc"));
        Assertions.assertEquals(585155395, response.servicePrecedence());
        Assertions.assertEquals(1538790173, response.serviceQosPolicy().fiveQi());
        Assertions.assertEquals(2090687916, response.serviceQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, response.serviceQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            response.serviceQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("tfvpndpmiljpn", response.serviceQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("ynudqllzsa", response.serviceQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("pjlxeehuxiqhzl", response.pccRules().get(0).ruleName());
        Assertions.assertEquals(1584331771, response.pccRules().get(0).rulePrecedence());
        Assertions.assertEquals(1900564261, response.pccRules().get(0).ruleQosPolicy().fiveQi());
        Assertions.assertEquals(705392467,
            response.pccRules().get(0).ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT,
            response.pccRules().get(0).ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            response.pccRules().get(0).ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("vuafpwzyifr", response.pccRules().get(0).ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("gwltxeqip", response.pccRules().get(0).ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("ezxlskihm", response.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("rfdsajrednwy",
            response.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.ENABLED, response.pccRules().get(0).trafficControl());
        Assertions.assertEquals("yimsfayorpr",
            response.pccRules().get(0).serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.DOWNLINK,
            response.pccRules().get(0).serviceDataFlowTemplates().get(0).direction());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
