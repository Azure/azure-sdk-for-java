// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.ObsoleteVersion;
import com.azure.resourcemanager.mobilenetwork.models.Platform;
import com.azure.resourcemanager.mobilenetwork.models.PlatformType;
import com.azure.resourcemanager.mobilenetwork.models.RecommendedVersion;
import com.azure.resourcemanager.mobilenetwork.models.VersionState;
import org.junit.jupiter.api.Assertions;

public final class PlatformTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Platform model =
            BinaryData
                .fromString(
                    "{\"platformType\":\"3P-AZURE-STACK-HCI\",\"versionState\":\"Unknown\",\"minimumPlatformSoftwareVersion\":\"fpbsjyofdxl\",\"maximumPlatformSoftwareVersion\":\"sd\",\"recommendedVersion\":\"NotRecommended\",\"obsoleteVersion\":\"Obsolete\"}")
                .toObject(Platform.class);
        Assertions.assertEquals(PlatformType.THREE_P_AZURE_STACK_HCI, model.platformType());
        Assertions.assertEquals(VersionState.UNKNOWN, model.versionState());
        Assertions.assertEquals("fpbsjyofdxl", model.minimumPlatformSoftwareVersion());
        Assertions.assertEquals("sd", model.maximumPlatformSoftwareVersion());
        Assertions.assertEquals(RecommendedVersion.NOT_RECOMMENDED, model.recommendedVersion());
        Assertions.assertEquals(ObsoleteVersion.OBSOLETE, model.obsoleteVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Platform model =
            new Platform()
                .withPlatformType(PlatformType.THREE_P_AZURE_STACK_HCI)
                .withVersionState(VersionState.UNKNOWN)
                .withMinimumPlatformSoftwareVersion("fpbsjyofdxl")
                .withMaximumPlatformSoftwareVersion("sd")
                .withRecommendedVersion(RecommendedVersion.NOT_RECOMMENDED)
                .withObsoleteVersion(ObsoleteVersion.OBSOLETE);
        model = BinaryData.fromObject(model).toObject(Platform.class);
        Assertions.assertEquals(PlatformType.THREE_P_AZURE_STACK_HCI, model.platformType());
        Assertions.assertEquals(VersionState.UNKNOWN, model.versionState());
        Assertions.assertEquals("fpbsjyofdxl", model.minimumPlatformSoftwareVersion());
        Assertions.assertEquals("sd", model.maximumPlatformSoftwareVersion());
        Assertions.assertEquals(RecommendedVersion.NOT_RECOMMENDED, model.recommendedVersion());
        Assertions.assertEquals(ObsoleteVersion.OBSOLETE, model.obsoleteVersion());
    }
}
