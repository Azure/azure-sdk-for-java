// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.ObsoleteVersion;
import com.azure.resourcemanager.mobilenetwork.models.Platform;
import com.azure.resourcemanager.mobilenetwork.models.PlatformType;
import com.azure.resourcemanager.mobilenetwork.models.RecommendedVersion;
import com.azure.resourcemanager.mobilenetwork.models.VersionState;
import org.junit.jupiter.api.Assertions;

public final class PlatformTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Platform model = BinaryData.fromString(
            "{\"platformType\":\"AKS-HCI\",\"versionState\":\"Active\",\"minimumPlatformSoftwareVersion\":\"pzfqrhhuaoppp\",\"maximumPlatformSoftwareVersion\":\"eqx\",\"recommendedVersion\":\"Recommended\",\"obsoleteVersion\":\"NotObsolete\"}")
            .toObject(Platform.class);
        Assertions.assertEquals(PlatformType.AKS_HCI, model.platformType());
        Assertions.assertEquals(VersionState.ACTIVE, model.versionState());
        Assertions.assertEquals("pzfqrhhuaoppp", model.minimumPlatformSoftwareVersion());
        Assertions.assertEquals("eqx", model.maximumPlatformSoftwareVersion());
        Assertions.assertEquals(RecommendedVersion.RECOMMENDED, model.recommendedVersion());
        Assertions.assertEquals(ObsoleteVersion.NOT_OBSOLETE, model.obsoleteVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Platform model = new Platform().withPlatformType(PlatformType.AKS_HCI).withVersionState(VersionState.ACTIVE)
            .withMinimumPlatformSoftwareVersion("pzfqrhhuaoppp").withMaximumPlatformSoftwareVersion("eqx")
            .withRecommendedVersion(RecommendedVersion.RECOMMENDED).withObsoleteVersion(ObsoleteVersion.NOT_OBSOLETE);
        model = BinaryData.fromObject(model).toObject(Platform.class);
        Assertions.assertEquals(PlatformType.AKS_HCI, model.platformType());
        Assertions.assertEquals(VersionState.ACTIVE, model.versionState());
        Assertions.assertEquals("pzfqrhhuaoppp", model.minimumPlatformSoftwareVersion());
        Assertions.assertEquals("eqx", model.maximumPlatformSoftwareVersion());
        Assertions.assertEquals(RecommendedVersion.RECOMMENDED, model.recommendedVersion());
        Assertions.assertEquals(ObsoleteVersion.NOT_OBSOLETE, model.obsoleteVersion());
    }
}
