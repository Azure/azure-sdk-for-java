// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.Service;
import com.azure.resourcemanager.mobilenetwork.models.TrafficControlPermission;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesListByMobileNetworkMockTests {
    @Test
    public void testListByMobileNetwork() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Unknown\",\"servicePrecedence\":1650500158,\"serviceQosPolicy\":{\"5qi\":879639926,\"allocationAndRetentionPriorityLevel\":795826837,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"maximumBitRate\":{\"uplink\":\"uasigr\",\"downlink\":\"wsocnequygdjbo\"}},\"pccRules\":[{\"ruleName\":\"rmtqjkqevadr\",\"rulePrecedence\":166558756,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"uawvcmjzk\",\"downlink\":\"iidisczskoswoqiq\"},\"5qi\":1049623274,\"allocationAndRetentionPriorityLevel\":362948209,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"rrcoi\",\"downlink\":\"sbamnppcc\"}},\"trafficControl\":\"Enabled\",\"serviceDataFlowTemplates\":[{\"templateName\":\"tdsbezax\",\"direction\":\"Bidirectional\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"ukzxuizh\",\"direction\":\"Bidirectional\",\"protocol\":[],\"remoteIpList\":[]}]},{\"ruleName\":\"nepk\",\"rulePrecedence\":1942019203,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"arxqiubx\",\"downlink\":\"ukecpx\"},\"5qi\":962219625,\"allocationAndRetentionPriorityLevel\":2135814710,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"mkoszudbl\",\"downlink\":\"s\"}},\"trafficControl\":\"Blocked\",\"serviceDataFlowTemplates\":[{\"templateName\":\"caqkiofk\",\"direction\":\"Uplink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"fmhklbnld\",\"direction\":\"Uplink\",\"protocol\":[],\"remoteIpList\":[]}]}]},\"location\":\"bh\",\"tags\":{\"wusqx\":\"yq\"},\"id\":\"trpb\",\"name\":\"r\",\"type\":\"yuuatvlmbjwcolbm\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Service> response = manager.services()
            .listByMobileNetwork("valqjrhuzgfxo", "jtpusllywpvtiotz", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bh", response.iterator().next().location());
        Assertions.assertEquals("yq", response.iterator().next().tags().get("wusqx"));
        Assertions.assertEquals(1650500158, response.iterator().next().servicePrecedence());
        Assertions.assertEquals(879639926, response.iterator().next().serviceQosPolicy().fiveQi());
        Assertions.assertEquals(795826837,
            response.iterator().next().serviceQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT,
            response.iterator().next().serviceQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            response.iterator().next().serviceQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("uasigr", response.iterator().next().serviceQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("wsocnequygdjbo",
            response.iterator().next().serviceQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("rmtqjkqevadr", response.iterator().next().pccRules().get(0).ruleName());
        Assertions.assertEquals(166558756, response.iterator().next().pccRules().get(0).rulePrecedence());
        Assertions.assertEquals(1049623274, response.iterator().next().pccRules().get(0).ruleQosPolicy().fiveQi());
        Assertions.assertEquals(362948209,
            response.iterator().next().pccRules().get(0).ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT,
            response.iterator().next().pccRules().get(0).ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            response.iterator().next().pccRules().get(0).ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("rrcoi",
            response.iterator().next().pccRules().get(0).ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("sbamnppcc",
            response.iterator().next().pccRules().get(0).ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("uawvcmjzk",
            response.iterator().next().pccRules().get(0).ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("iidisczskoswoqiq",
            response.iterator().next().pccRules().get(0).ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.ENABLED,
            response.iterator().next().pccRules().get(0).trafficControl());
        Assertions.assertEquals("tdsbezax",
            response.iterator().next().pccRules().get(0).serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.BIDIRECTIONAL,
            response.iterator().next().pccRules().get(0).serviceDataFlowTemplates().get(0).direction());
    }
}
