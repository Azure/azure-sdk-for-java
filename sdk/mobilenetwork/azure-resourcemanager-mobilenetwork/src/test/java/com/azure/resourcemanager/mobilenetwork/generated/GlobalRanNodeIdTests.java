// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.GNbId;
import com.azure.resourcemanager.mobilenetwork.models.GlobalRanNodeId;
import com.azure.resourcemanager.mobilenetwork.models.PlmnId;
import org.junit.jupiter.api.Assertions;

public final class GlobalRanNodeIdTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GlobalRanNodeId model = BinaryData.fromString(
            "{\"plmnId\":{\"mcc\":\"zob\",\"mnc\":\"opxlhslnelxieixy\"},\"gNbId\":{\"bitLength\":1686752311,\"gNBValue\":\"cwcrojphs\"},\"ngeNbId\":\"cawjutifdwfmvi\",\"eNbId\":\"rqjb\",\"n3IwfId\":\"zhraglkafh\",\"wagfId\":\"qjujeickpzvcp\",\"tngfId\":\"mxelnwcltyjed\",\"nid\":\"xm\"}")
            .toObject(GlobalRanNodeId.class);
        Assertions.assertEquals("zob", model.plmnId().mcc());
        Assertions.assertEquals("opxlhslnelxieixy", model.plmnId().mnc());
        Assertions.assertEquals(1686752311, model.gNbId().bitLength());
        Assertions.assertEquals("cwcrojphs", model.gNbId().gNBValue());
        Assertions.assertEquals("cawjutifdwfmvi", model.ngeNbId());
        Assertions.assertEquals("rqjb", model.eNbId());
        Assertions.assertEquals("zhraglkafh", model.n3IwfId());
        Assertions.assertEquals("qjujeickpzvcp", model.wagfId());
        Assertions.assertEquals("mxelnwcltyjed", model.tngfId());
        Assertions.assertEquals("xm", model.nid());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GlobalRanNodeId model
            = new GlobalRanNodeId().withPlmnId(new PlmnId().withMcc("zob").withMnc("opxlhslnelxieixy"))
                .withGNbId(new GNbId().withBitLength(1686752311).withGNBValue("cwcrojphs"))
                .withNgeNbId("cawjutifdwfmvi")
                .withENbId("rqjb")
                .withN3IwfId("zhraglkafh")
                .withWagfId("qjujeickpzvcp")
                .withTngfId("mxelnwcltyjed")
                .withNid("xm");
        model = BinaryData.fromObject(model).toObject(GlobalRanNodeId.class);
        Assertions.assertEquals("zob", model.plmnId().mcc());
        Assertions.assertEquals("opxlhslnelxieixy", model.plmnId().mnc());
        Assertions.assertEquals(1686752311, model.gNbId().bitLength());
        Assertions.assertEquals("cwcrojphs", model.gNbId().gNBValue());
        Assertions.assertEquals("cawjutifdwfmvi", model.ngeNbId());
        Assertions.assertEquals("rqjb", model.eNbId());
        Assertions.assertEquals("zhraglkafh", model.n3IwfId());
        Assertions.assertEquals("qjujeickpzvcp", model.wagfId());
        Assertions.assertEquals("mxelnwcltyjed", model.tngfId());
        Assertions.assertEquals("xm", model.nid());
    }
}
