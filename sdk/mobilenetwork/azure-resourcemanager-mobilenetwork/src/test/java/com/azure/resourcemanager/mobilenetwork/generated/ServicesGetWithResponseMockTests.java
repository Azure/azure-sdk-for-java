// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.Service;
import com.azure.resourcemanager.mobilenetwork.models.TrafficControlPermission;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"servicePrecedence\":928683368,\"serviceQosPolicy\":{\"5qi\":417832295,\"allocationAndRetentionPriorityLevel\":1902714251,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"rhvhfnracwnpqigt\",\"downlink\":\"ujwouhdawsi\"}},\"pccRules\":[{\"ruleName\":\"bjb\",\"rulePrecedence\":1963431074,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"bvitvqkjya\",\"downlink\":\"nu\"},\"5qi\":104083214,\"allocationAndRetentionPriorityLevel\":79719601,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"maximumBitRate\":{\"uplink\":\"hozfn\",\"downlink\":\"fexl\"}},\"trafficControl\":\"Enabled\",\"serviceDataFlowTemplates\":[{\"templateName\":\"akizvoaikna\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"nuwiguyxlykwph\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"zc\",\"direction\":\"Bidirectional\",\"protocol\":[],\"remoteIpList\":[]}]}]},\"location\":\"mpe\",\"tags\":{\"aonwivkcqhrxh\":\"ke\",\"jubyqjfkakfq\":\"knlccrmmkyup\",\"yildudxjascow\":\"rke\",\"jkpdxphlkksnm\":\"f\"},\"id\":\"zvyfijdkzuqnwsi\",\"name\":\"huqol\",\"type\":\"ah\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Service response = manager.services()
            .getWithResponse("selpkpbaf", "afhlbyl", "cbevxrhyzdfw", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("mpe", response.location());
        Assertions.assertEquals("ke", response.tags().get("aonwivkcqhrxh"));
        Assertions.assertEquals(928683368, response.servicePrecedence());
        Assertions.assertEquals(417832295, response.serviceQosPolicy().fiveQi());
        Assertions.assertEquals(1902714251, response.serviceQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, response.serviceQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            response.serviceQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("rhvhfnracwnpqigt", response.serviceQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("ujwouhdawsi", response.serviceQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("bjb", response.pccRules().get(0).ruleName());
        Assertions.assertEquals(1963431074, response.pccRules().get(0).rulePrecedence());
        Assertions.assertEquals(104083214, response.pccRules().get(0).ruleQosPolicy().fiveQi());
        Assertions.assertEquals(79719601,
            response.pccRules().get(0).ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT,
            response.pccRules().get(0).ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            response.pccRules().get(0).ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("hozfn", response.pccRules().get(0).ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("fexl", response.pccRules().get(0).ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("bvitvqkjya", response.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("nu", response.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.ENABLED, response.pccRules().get(0).trafficControl());
        Assertions.assertEquals("akizvoaikna",
            response.pccRules().get(0).serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.DOWNLINK,
            response.pccRules().get(0).serviceDataFlowTemplates().get(0).direction());
    }
}
