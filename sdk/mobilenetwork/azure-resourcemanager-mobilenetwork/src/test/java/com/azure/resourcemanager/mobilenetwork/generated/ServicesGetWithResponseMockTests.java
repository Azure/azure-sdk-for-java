// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.Service;
import com.azure.resourcemanager.mobilenetwork.models.TrafficControlPermission;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Deleting\",\"servicePrecedence\":106775575,\"serviceQosPolicy\":{\"5qi\":246606233,\"allocationAndRetentionPriorityLevel\":1738057369,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"wugiqjti\",\"downlink\":\"gqgdminictteajoh\"}},\"pccRules\":[{\"ruleName\":\"gspnbonhpczykm\",\"rulePrecedence\":462403312,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"wxqcsehchkhufmpq\",\"downlink\":\"mqyjgy\"},\"5qi\":1970671951,\"allocationAndRetentionPriorityLevel\":239242327,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"maximumBitRate\":{\"uplink\":\"uzanhsfnhsenwphp\",\"downlink\":\"fngq\"}},\"trafficControl\":\"Blocked\",\"serviceDataFlowTemplates\":[{\"templateName\":\"dftujwjjufwbeqr\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"orhtss\",\"direction\":\"Uplink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"qnmdvhazcvjy\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"qswbqerzwx\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]}]},{\"ruleName\":\"txtd\",\"rulePrecedence\":1174167761,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"lbpktg\",\"downlink\":\"styoua\"},\"5qi\":1232621783,\"allocationAndRetentionPriorityLevel\":1165809393,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"maximumBitRate\":{\"uplink\":\"owegmmutey\",\"downlink\":\"eyguq\"}},\"trafficControl\":\"Enabled\",\"serviceDataFlowTemplates\":[{\"templateName\":\"ii\",\"direction\":\"Uplink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"spxlzde\",\"direction\":\"Uplink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"grijwaiufanrayb\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"eqfrojs\",\"direction\":\"Bidirectional\",\"protocol\":[],\"remoteIpList\":[]}]},{\"ruleName\":\"grhydk\",\"rulePrecedence\":502257313,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"ezskiecafygzmx\",\"downlink\":\"eqvdsm\"},\"5qi\":1744360457,\"allocationAndRetentionPriorityLevel\":416842468,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"maximumBitRate\":{\"uplink\":\"y\",\"downlink\":\"xalybxawoijpo\"}},\"trafficControl\":\"Blocked\",\"serviceDataFlowTemplates\":[{\"templateName\":\"xpkk\",\"direction\":\"Bidirectional\",\"protocol\":[],\"remoteIpList\":[]}]},{\"ruleName\":\"djodqhy\",\"rulePrecedence\":1327259513,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"n\",\"downlink\":\"emehllizh\"},\"5qi\":199350721,\"allocationAndRetentionPriorityLevel\":160089592,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"adppyibn\",\"downlink\":\"qladywrxwhydtlu\"}},\"trafficControl\":\"Enabled\",\"serviceDataFlowTemplates\":[{\"templateName\":\"swzsnuyemlowuo\",\"direction\":\"Bidirectional\",\"protocol\":[],\"remoteIpList\":[]}]}]},\"location\":\"xlnwyrmouvblgmo\",\"tags\":{\"vlihcvjd\":\"ltrfowtdvrf\",\"dhftukvhdxlwy\":\"qcrj\"},\"id\":\"jbfqzdk\",\"name\":\"njyixh\",\"type\":\"fratqxmbjroumzz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Service response = manager.services()
            .getWithResponse("y", "mvqdbpbhfckdvez", "rcssbzhddubbnq", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("xlnwyrmouvblgmo", response.location());
        Assertions.assertEquals("ltrfowtdvrf", response.tags().get("vlihcvjd"));
        Assertions.assertEquals(106775575, response.servicePrecedence());
        Assertions.assertEquals(246606233, response.serviceQosPolicy().fiveQi());
        Assertions.assertEquals(1738057369, response.serviceQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, response.serviceQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            response.serviceQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("wugiqjti", response.serviceQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("gqgdminictteajoh", response.serviceQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("gspnbonhpczykm", response.pccRules().get(0).ruleName());
        Assertions.assertEquals(462403312, response.pccRules().get(0).rulePrecedence());
        Assertions.assertEquals(1970671951, response.pccRules().get(0).ruleQosPolicy().fiveQi());
        Assertions.assertEquals(239242327,
            response.pccRules().get(0).ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT,
            response.pccRules().get(0).ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            response.pccRules().get(0).ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("uzanhsfnhsenwphp",
            response.pccRules().get(0).ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("fngq", response.pccRules().get(0).ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("wxqcsehchkhufmpq",
            response.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("mqyjgy", response.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.BLOCKED, response.pccRules().get(0).trafficControl());
        Assertions.assertEquals("dftujwjjufwbeqr",
            response.pccRules().get(0).serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.DOWNLINK,
            response.pccRules().get(0).serviceDataFlowTemplates().get(0).direction());
    }
}
