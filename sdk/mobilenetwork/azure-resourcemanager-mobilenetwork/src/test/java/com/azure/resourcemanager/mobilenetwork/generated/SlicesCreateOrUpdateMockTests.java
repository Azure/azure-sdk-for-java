// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.Slice;
import com.azure.resourcemanager.mobilenetwork.models.Snssai;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SlicesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"snssai\":{\"sst\":870372457,\"sd\":\"dbzsx\"},\"description\":\"qqrsmpcbbprtugav\"},\"location\":\"bcyksivmfogd\",\"tags\":{\"tsjcwjjxs\":\"fcmkr\",\"wvif\":\"mb\",\"wkloozr\":\"xkecifhocj\"},\"id\":\"txvcm\",\"name\":\"funlcpxxvi\",\"type\":\"yeyng\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Slice response = manager.slices()
            .define("xegqphr")
            .withRegion("pefcpcz")
            .withExistingMobileNetwork("aewse", "vesk")
            .withSnssai(new Snssai().withSst(1143125594).withSd("ctmjtsghpbcbc"))
            .withTags(mapOf("uszxh", "uqndaizupfkhuy", "gw", "tvtv", "haokgkskjiv", "iukvzwydwt"))
            .withDescription("arpzeqacdldtzm")
            .create();

        Assertions.assertEquals("bcyksivmfogd", response.location());
        Assertions.assertEquals("fcmkr", response.tags().get("tsjcwjjxs"));
        Assertions.assertEquals(870372457, response.snssai().sst());
        Assertions.assertEquals("dbzsx", response.snssai().sd());
        Assertions.assertEquals("qqrsmpcbbprtugav", response.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
