// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AttachedDataNetwork;
import com.azure.resourcemanager.mobilenetwork.models.NaptEnabled;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AttachedDataNetworksGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"userPlaneDataInterface\":{\"name\":\"ppipifhpfeoa\",\"ipv4Address\":\"gcxtxj\",\"ipv4Subnet\":\"heafidlt\",\"ipv4Gateway\":\"sr\"},\"dnsAddresses\":[\"mks\",\"jhoiftxfkfweg\"],\"naptConfiguration\":{\"enabled\":\"Enabled\",\"portRange\":{\"minPort\":756597053,\"maxPort\":721482602},\"portReuseHoldTime\":{\"tcp\":2086555538,\"udp\":1656639409},\"pinholeLimits\":1467633348,\"pinholeTimeouts\":{\"tcp\":343258165,\"udp\":1742754649,\"icmp\":1560006884}},\"userEquipmentAddressPoolPrefix\":[\"riz\",\"tpwb\",\"a\"],\"userEquipmentStaticAddressPoolPrefix\":[\"ibph\",\"qzmiza\"]},\"location\":\"kan\",\"tags\":{\"joylh\":\"dnjzh\"},\"id\":\"lmuoyxprimrsopte\",\"name\":\"cjmeislstvasy\",\"type\":\"wxdzaumweoohgu\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        MobileNetworkManager manager = MobileNetworkManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        AttachedDataNetwork response = manager.attachedDataNetworks().getWithResponse("crjdqnsdfzpbgtg", "ylkdghrje",
            "utlwxezwzhok", "bwnhhtql", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("kan", response.location());
        Assertions.assertEquals("dnjzh", response.tags().get("joylh"));
        Assertions.assertEquals("ppipifhpfeoa", response.userPlaneDataInterface().name());
        Assertions.assertEquals("gcxtxj", response.userPlaneDataInterface().ipv4Address());
        Assertions.assertEquals("heafidlt", response.userPlaneDataInterface().ipv4Subnet());
        Assertions.assertEquals("sr", response.userPlaneDataInterface().ipv4Gateway());
        Assertions.assertEquals("mks", response.dnsAddresses().get(0));
        Assertions.assertEquals(NaptEnabled.ENABLED, response.naptConfiguration().enabled());
        Assertions.assertEquals(756597053, response.naptConfiguration().portRange().minPort());
        Assertions.assertEquals(721482602, response.naptConfiguration().portRange().maxPort());
        Assertions.assertEquals(2086555538, response.naptConfiguration().portReuseHoldTime().tcp());
        Assertions.assertEquals(1656639409, response.naptConfiguration().portReuseHoldTime().udp());
        Assertions.assertEquals(1467633348, response.naptConfiguration().pinholeLimits());
        Assertions.assertEquals(343258165, response.naptConfiguration().pinholeTimeouts().tcp());
        Assertions.assertEquals(1742754649, response.naptConfiguration().pinholeTimeouts().udp());
        Assertions.assertEquals(1560006884, response.naptConfiguration().pinholeTimeouts().icmp());
        Assertions.assertEquals("riz", response.userEquipmentAddressPoolPrefix().get(0));
        Assertions.assertEquals("ibph", response.userEquipmentStaticAddressPoolPrefix().get(0));
    }
}
