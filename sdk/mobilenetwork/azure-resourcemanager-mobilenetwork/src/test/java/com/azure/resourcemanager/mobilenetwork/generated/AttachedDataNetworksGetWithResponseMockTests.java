// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AttachedDataNetwork;
import com.azure.resourcemanager.mobilenetwork.models.NaptEnabled;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AttachedDataNetworksGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Accepted\",\"userPlaneDataInterface\":{\"name\":\"tuwkffdj\",\"ipv4Address\":\"sysidfvclglxnf\",\"ipv4Subnet\":\"jtkbusqogsfika\",\"ipv4Gateway\":\"ansharujtjiqxfz\",\"vlanId\":846546082,\"ipv4AddressList\":[\"vwkpqh\",\"penuy\",\"bqeqqekewvnqvcd\"],\"bfdIpv4Endpoints\":[\"a\",\"cmfdjwnlax\"]},\"dnsAddresses\":[\"njqikcz\"],\"naptConfiguration\":{\"enabled\":\"Enabled\",\"portRange\":{\"minPort\":422155037,\"maxPort\":1938868822},\"portReuseHoldTime\":{\"tcp\":1614916869,\"udp\":394245524},\"pinholeLimits\":196661330,\"pinholeTimeouts\":{\"tcp\":283921806,\"udp\":1164479404,\"icmp\":47746370}},\"userEquipmentAddressPoolPrefix\":[\"ntsj\",\"qrsxyp\",\"uuuybnchrsziz\"],\"userEquipmentStaticAddressPoolPrefix\":[\"elyetndnbf\",\"yggagflnlgmt\",\"wahzjmucftbyr\"]},\"location\":\"rohkpigqfusu\",\"tags\":{\"noxaxmqeqal\":\"mkwkl\"},\"id\":\"hjnhgwydyynfsvk\",\"name\":\"gbv\",\"type\":\"ta\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AttachedDataNetwork response = manager.attachedDataNetworks()
            .getWithResponse("razftxejwabmdujt", "vcopex", "m", "urbuhhlkyqltq", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("rohkpigqfusu", response.location());
        Assertions.assertEquals("mkwkl", response.tags().get("noxaxmqeqal"));
        Assertions.assertEquals("tuwkffdj", response.userPlaneDataInterface().name());
        Assertions.assertEquals("sysidfvclglxnf", response.userPlaneDataInterface().ipv4Address());
        Assertions.assertEquals("jtkbusqogsfika", response.userPlaneDataInterface().ipv4Subnet());
        Assertions.assertEquals("ansharujtjiqxfz", response.userPlaneDataInterface().ipv4Gateway());
        Assertions.assertEquals(846546082, response.userPlaneDataInterface().vlanId());
        Assertions.assertEquals("vwkpqh", response.userPlaneDataInterface().ipv4AddressList().get(0));
        Assertions.assertEquals("a", response.userPlaneDataInterface().bfdIpv4Endpoints().get(0));
        Assertions.assertEquals("njqikcz", response.dnsAddresses().get(0));
        Assertions.assertEquals(NaptEnabled.ENABLED, response.naptConfiguration().enabled());
        Assertions.assertEquals(422155037, response.naptConfiguration().portRange().minPort());
        Assertions.assertEquals(1938868822, response.naptConfiguration().portRange().maxPort());
        Assertions.assertEquals(1614916869, response.naptConfiguration().portReuseHoldTime().tcp());
        Assertions.assertEquals(394245524, response.naptConfiguration().portReuseHoldTime().udp());
        Assertions.assertEquals(196661330, response.naptConfiguration().pinholeLimits());
        Assertions.assertEquals(283921806, response.naptConfiguration().pinholeTimeouts().tcp());
        Assertions.assertEquals(1164479404, response.naptConfiguration().pinholeTimeouts().udp());
        Assertions.assertEquals(47746370, response.naptConfiguration().pinholeTimeouts().icmp());
        Assertions.assertEquals("ntsj", response.userEquipmentAddressPoolPrefix().get(0));
        Assertions.assertEquals("elyetndnbf", response.userEquipmentStaticAddressPoolPrefix().get(0));
    }
}
