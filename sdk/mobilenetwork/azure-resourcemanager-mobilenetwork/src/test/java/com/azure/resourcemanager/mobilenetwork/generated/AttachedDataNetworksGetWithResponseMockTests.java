// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AttachedDataNetwork;
import com.azure.resourcemanager.mobilenetwork.models.NaptEnabled;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AttachedDataNetworksGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Canceled\",\"userPlaneDataInterface\":{\"name\":\"sii\",\"ipv4Address\":\"mkzjvkviir\",\"ipv4Subnet\":\"fgrwsdpgratzvz\",\"ipv4Gateway\":\"lbyvictctbrxkjzw\",\"vlanId\":802199540,\"ipv4AddressList\":[\"mshkwfbkgo\"],\"bfdIpv4Endpoints\":[\"opdbydpizqac\",\"napxbiygnug\",\"knfsmfcttuxuuyil\"]},\"dnsAddresses\":[\"qoiquvrehmrnjhv\"],\"naptConfiguration\":{\"enabled\":\"Enabled\",\"portRange\":{\"minPort\":1736273064,\"maxPort\":11608921},\"portReuseHoldTime\":{\"tcp\":178479099,\"udp\":190807596},\"pinholeLimits\":1863941224,\"pinholeTimeouts\":{\"tcp\":1346405243,\"udp\":1524568479,\"icmp\":1207021610}},\"userEquipmentAddressPoolPrefix\":[\"tlxs\",\"rpddouifamo\"],\"userEquipmentStaticAddressPoolPrefix\":[\"iynknlq\"]},\"location\":\"dvpiwh\",\"tags\":{\"m\":\"zdtmaajquhuxylrj\",\"kfkyjp\":\"ygjbmzyospspsh\",\"pssdfppyogtie\":\"sp\"},\"id\":\"ujtv\",\"name\":\"zkc\",\"type\":\"yxrxmunj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AttachedDataNetwork response = manager.attachedDataNetworks()
            .getWithResponse("xuckpggqoweyir", "hlisngw", "lqqmpiz", "uwnpqxpxiwfcng", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("dvpiwh", response.location());
        Assertions.assertEquals("zdtmaajquhuxylrj", response.tags().get("m"));
        Assertions.assertEquals("sii", response.userPlaneDataInterface().name());
        Assertions.assertEquals("mkzjvkviir", response.userPlaneDataInterface().ipv4Address());
        Assertions.assertEquals("fgrwsdpgratzvz", response.userPlaneDataInterface().ipv4Subnet());
        Assertions.assertEquals("lbyvictctbrxkjzw", response.userPlaneDataInterface().ipv4Gateway());
        Assertions.assertEquals(802199540, response.userPlaneDataInterface().vlanId());
        Assertions.assertEquals("mshkwfbkgo", response.userPlaneDataInterface().ipv4AddressList().get(0));
        Assertions.assertEquals("opdbydpizqac", response.userPlaneDataInterface().bfdIpv4Endpoints().get(0));
        Assertions.assertEquals("qoiquvrehmrnjhv", response.dnsAddresses().get(0));
        Assertions.assertEquals(NaptEnabled.ENABLED, response.naptConfiguration().enabled());
        Assertions.assertEquals(1736273064, response.naptConfiguration().portRange().minPort());
        Assertions.assertEquals(11608921, response.naptConfiguration().portRange().maxPort());
        Assertions.assertEquals(178479099, response.naptConfiguration().portReuseHoldTime().tcp());
        Assertions.assertEquals(190807596, response.naptConfiguration().portReuseHoldTime().udp());
        Assertions.assertEquals(1863941224, response.naptConfiguration().pinholeLimits());
        Assertions.assertEquals(1346405243, response.naptConfiguration().pinholeTimeouts().tcp());
        Assertions.assertEquals(1524568479, response.naptConfiguration().pinholeTimeouts().udp());
        Assertions.assertEquals(1207021610, response.naptConfiguration().pinholeTimeouts().icmp());
        Assertions.assertEquals("tlxs", response.userEquipmentAddressPoolPrefix().get(0));
        Assertions.assertEquals("iynknlq", response.userEquipmentStaticAddressPoolPrefix().get(0));
    }
}
