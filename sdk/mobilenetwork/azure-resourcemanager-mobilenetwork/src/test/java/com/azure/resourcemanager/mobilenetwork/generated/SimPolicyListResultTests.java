// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.SimPolicyInner;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.SimPolicyListResult;
import com.azure.resourcemanager.mobilenetwork.models.SliceConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.SliceResourceId;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SimPolicyListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SimPolicyListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Unknown\",\"siteProvisioningState\":{\"sjjxundxgketw\":\"NotApplicable\",\"hzjhf\":\"Deleting\"},\"ueAmbr\":{\"uplink\":\"mhv\",\"downlink\":\"muvgp\"},\"defaultSlice\":{\"id\":\"uneqsxvmhf\"},\"rfspIndex\":837522232,\"registrationTimer\":1911590455,\"sliceConfigurations\":[{\"slice\":{\"id\":\"hsasbhu\"},\"defaultDataNetwork\":{\"id\":\"ypoh\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"emslynsqyrp\"},\"sessionAmbr\":{\"uplink\":\"oobrlttyms\",\"downlink\":\"nygq\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"nfwqzdzgtilaxhn\"},\"sessionAmbr\":{\"uplink\":\"hqlyvijo\",\"downlink\":\"wivkxo\"},\"allowedServices\":[]}]},{\"slice\":{\"id\":\"zunbixx\"},\"defaultDataNetwork\":{\"id\":\"ti\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"cpwpg\"},\"sessionAmbr\":{\"uplink\":\"lrcivtsoxfrke\",\"downlink\":\"xpmyyefrpmpdnq\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"skawaoqvmmb\"},\"sessionAmbr\":{\"uplink\":\"pqfrtqlkz\",\"downlink\":\"egnitg\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"kxlzyqdrfeg\"},\"sessionAmbr\":{\"uplink\":\"ealzxwhcansymoyq\",\"downlink\":\"lwigdivbkbx\"},\"allowedServices\":[]}]}]},\"location\":\"mf\",\"tags\":{\"xakjsqzhzb\":\"wasqvdaeyyg\",\"asi\":\"zkgimsid\"},\"id\":\"ddyvvjskgfmo\",\"name\":\"wa\",\"type\":\"pqg\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"siteProvisioningState\":{\"hhvjhh\":\"Updating\"},\"ueAmbr\":{\"uplink\":\"akz\",\"downlink\":\"bbjjidjksyxk\"},\"defaultSlice\":{\"id\":\"xvxevblbjednljla\"},\"rfspIndex\":183271176,\"registrationTimer\":1122513421,\"sliceConfigurations\":[{\"slice\":{\"id\":\"xuns\"},\"defaultDataNetwork\":{\"id\":\"jbnkpp\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"nenlsvxeizzg\"},\"sessionAmbr\":{\"uplink\":\"klnsrmffey\",\"downlink\":\"xcktpiymerteeamm\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"qiekkkzddrt\"},\"sessionAmbr\":{\"uplink\":\"g\",\"downlink\":\"ojbmxv\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"vrefdeesv\"},\"sessionAmbr\":{\"uplink\":\"cuijpxt\",\"downlink\":\"s\"},\"allowedServices\":[]}]},{\"slice\":{\"id\":\"wprtu\"},\"defaultDataNetwork\":{\"id\":\"wsawddjibabxvi\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"tvtzeexavoxtfg\"},\"sessionAmbr\":{\"uplink\":\"ecdmdqbwpy\",\"downlink\":\"q\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"gsfjac\"},\"sessionAmbr\":{\"uplink\":\"slhhxudbxv\",\"downlink\":\"d\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"tnsi\"},\"sessionAmbr\":{\"uplink\":\"ud\",\"downlink\":\"z\"},\"allowedServices\":[]}]},{\"slice\":{\"id\":\"mes\"},\"defaultDataNetwork\":{\"id\":\"kdlpa\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"rcxfailcfxwmdb\"},\"sessionAmbr\":{\"uplink\":\"xdfgsftufqobr\",\"downlink\":\"lnacgcc\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"knh\"},\"sessionAmbr\":{\"uplink\":\"kizvytn\",\"downlink\":\"zvulj\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"aaeranokqgukk\"},\"sessionAmbr\":{\"uplink\":\"qnvb\",\"downlink\":\"oylaxxul\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"disdosfjbjsvgj\"},\"sessionAmbr\":{\"uplink\":\"whryvycytdcl\",\"downlink\":\"gc\"},\"allowedServices\":[]}]},{\"slice\":{\"id\":\"knfnwmbtmvpdv\"},\"defaultDataNetwork\":{\"id\":\"dhttzaefedxihchr\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"k\"},\"sessionAmbr\":{\"uplink\":\"crjdqnsdfzpbgtg\",\"downlink\":\"ylkdghrje\"},\"allowedServices\":[]}]}]},\"location\":\"tl\",\"tags\":{\"zhokvbwnhh\":\"z\"},\"id\":\"qlgehg\",\"name\":\"pipifh\",\"type\":\"f\"}],\"nextLink\":\"ajvgcxtxjcsheafi\"}")
            .toObject(SimPolicyListResult.class);
        Assertions.assertEquals("mf", model.value().get(0).location());
        Assertions.assertEquals("wasqvdaeyyg", model.value().get(0).tags().get("xakjsqzhzb"));
        Assertions.assertEquals("mhv", model.value().get(0).ueAmbr().uplink());
        Assertions.assertEquals("muvgp", model.value().get(0).ueAmbr().downlink());
        Assertions.assertEquals("uneqsxvmhf", model.value().get(0).defaultSlice().id());
        Assertions.assertEquals(837522232, model.value().get(0).rfspIndex());
        Assertions.assertEquals(1911590455, model.value().get(0).registrationTimer());
        Assertions.assertEquals("hsasbhu", model.value().get(0).sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("ypoh", model.value().get(0).sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("emslynsqyrp",
            model.value().get(0).sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("oobrlttyms",
            model.value()
                .get(0)
                .sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .sessionAmbr()
                .uplink());
        Assertions.assertEquals("nygq",
            model.value()
                .get(0)
                .sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .sessionAmbr()
                .downlink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SimPolicyListResult model
            = new SimPolicyListResult()
                .withValue(
                    Arrays
                        .asList(
                            new SimPolicyInner().withLocation("mf")
                                .withTags(mapOf("xakjsqzhzb", "wasqvdaeyyg", "asi", "zkgimsid"))
                                .withUeAmbr(new Ambr().withUplink("mhv").withDownlink("muvgp"))
                                .withDefaultSlice(new SliceResourceId().withId("uneqsxvmhf"))
                                .withRfspIndex(837522232)
                                .withRegistrationTimer(1911590455)
                                .withSliceConfigurations(Arrays
                                    .asList(
                                        new SliceConfiguration().withSlice(new SliceResourceId().withId("hsasbhu"))
                                            .withDefaultDataNetwork(new DataNetworkResourceId().withId("ypoh"))
                                            .withDataNetworkConfigurations(Arrays.asList(new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("emslynsqyrp"))
                                                .withSessionAmbr(
                                                    new Ambr().withUplink("oobrlttyms").withDownlink("nygq"))
                                                .withAllowedServices(Arrays.asList()),
                                                new DataNetworkConfiguration()
                                                    .withDataNetwork(
                                                        new DataNetworkResourceId().withId("nfwqzdzgtilaxhn"))
                                                    .withSessionAmbr(
                                                        new Ambr().withUplink("hqlyvijo").withDownlink("wivkxo"))
                                                    .withAllowedServices(Arrays.asList()))),
                                        new SliceConfiguration().withSlice(new SliceResourceId().withId("zunbixx"))
                                            .withDefaultDataNetwork(new DataNetworkResourceId().withId("ti"))
                                            .withDataNetworkConfigurations(Arrays.asList(
                                                new DataNetworkConfiguration()
                                                    .withDataNetwork(new DataNetworkResourceId().withId("cpwpg"))
                                                    .withSessionAmbr(new Ambr().withUplink("lrcivtsoxfrke")
                                                        .withDownlink("xpmyyefrpmpdnq"))
                                                    .withAllowedServices(Arrays.asList()),
                                                new DataNetworkConfiguration()
                                                    .withDataNetwork(new DataNetworkResourceId().withId("skawaoqvmmb"))
                                                    .withSessionAmbr(
                                                        new Ambr().withUplink("pqfrtqlkz").withDownlink("egnitg"))
                                                    .withAllowedServices(Arrays.asList()),
                                                new DataNetworkConfiguration()
                                                    .withDataNetwork(new DataNetworkResourceId().withId("kxlzyqdrfeg"))
                                                    .withSessionAmbr(new Ambr().withUplink("ealzxwhcansymoyq")
                                                        .withDownlink("lwigdivbkbx"))
                                                    .withAllowedServices(Arrays.asList()))))),
                            new SimPolicyInner().withLocation("tl")
                                .withTags(mapOf("zhokvbwnhh", "z"))
                                .withUeAmbr(new Ambr().withUplink("akz").withDownlink("bbjjidjksyxk"))
                                .withDefaultSlice(new SliceResourceId().withId("xvxevblbjednljla"))
                                .withRfspIndex(183271176)
                                .withRegistrationTimer(1122513421)
                                .withSliceConfigurations(Arrays.asList(
                                    new SliceConfiguration()
                                        .withSlice(new SliceResourceId().withId("xuns"))
                                        .withDefaultDataNetwork(new DataNetworkResourceId().withId("jbnkpp"))
                                        .withDataNetworkConfigurations(Arrays.asList(new DataNetworkConfiguration()
                                            .withDataNetwork(new DataNetworkResourceId().withId("nenlsvxeizzg"))
                                            .withSessionAmbr(
                                                new Ambr().withUplink("klnsrmffey").withDownlink("xcktpiymerteeamm"))
                                            .withAllowedServices(Arrays.asList()),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("qiekkkzddrt"))
                                                .withSessionAmbr(new Ambr().withUplink("g").withDownlink("ojbmxv"))
                                                .withAllowedServices(Arrays.asList()),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("vrefdeesv"))
                                                .withSessionAmbr(new Ambr().withUplink("cuijpxt").withDownlink("s"))
                                                .withAllowedServices(Arrays.asList()))),
                                    new SliceConfiguration().withSlice(new SliceResourceId().withId("wprtu"))
                                        .withDefaultDataNetwork(new DataNetworkResourceId().withId("wsawddjibabxvi"))
                                        .withDataNetworkConfigurations(
                                            Arrays.asList(
                                                new DataNetworkConfiguration()
                                                    .withDataNetwork(
                                                        new DataNetworkResourceId().withId("tvtzeexavoxtfg"))
                                                    .withSessionAmbr(
                                                        new Ambr().withUplink("ecdmdqbwpy").withDownlink("q"))
                                                    .withAllowedServices(Arrays.asList()),
                                                new DataNetworkConfiguration()
                                                    .withDataNetwork(new DataNetworkResourceId().withId("gsfjac"))
                                                    .withSessionAmbr(
                                                        new Ambr().withUplink("slhhxudbxv").withDownlink("d"))
                                                    .withAllowedServices(Arrays.asList()),
                                                new DataNetworkConfiguration()
                                                    .withDataNetwork(new DataNetworkResourceId().withId("tnsi"))
                                                    .withSessionAmbr(new Ambr().withUplink("ud").withDownlink("z"))
                                                    .withAllowedServices(Arrays.asList()))),
                                    new SliceConfiguration()
                                        .withSlice(new SliceResourceId().withId("mes"))
                                        .withDefaultDataNetwork(new DataNetworkResourceId().withId("kdlpa"))
                                        .withDataNetworkConfigurations(Arrays.asList(new DataNetworkConfiguration()
                                            .withDataNetwork(new DataNetworkResourceId().withId("rcxfailcfxwmdb"))
                                            .withSessionAmbr(
                                                new Ambr().withUplink("xdfgsftufqobr").withDownlink("lnacgcc"))
                                            .withAllowedServices(Arrays.asList()),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("knh"))
                                                .withSessionAmbr(new Ambr().withUplink("kizvytn").withDownlink("zvulj"))
                                                .withAllowedServices(Arrays.asList()),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("aaeranokqgukk"))
                                                .withSessionAmbr(new Ambr().withUplink("qnvb").withDownlink("oylaxxul"))
                                                .withAllowedServices(Arrays.asList()),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("disdosfjbjsvgj"))
                                                .withSessionAmbr(
                                                    new Ambr().withUplink("whryvycytdcl").withDownlink("gc"))
                                                .withAllowedServices(Arrays.asList()))),
                                    new SliceConfiguration().withSlice(new SliceResourceId().withId("knfnwmbtmvpdv"))
                                        .withDefaultDataNetwork(new DataNetworkResourceId().withId("dhttzaefedxihchr"))
                                        .withDataNetworkConfigurations(Arrays.asList(new DataNetworkConfiguration()
                                            .withDataNetwork(new DataNetworkResourceId().withId("k"))
                                            .withSessionAmbr(
                                                new Ambr().withUplink("crjdqnsdfzpbgtg").withDownlink("ylkdghrje"))
                                            .withAllowedServices(Arrays.asList())))))));
        model = BinaryData.fromObject(model).toObject(SimPolicyListResult.class);
        Assertions.assertEquals("mf", model.value().get(0).location());
        Assertions.assertEquals("wasqvdaeyyg", model.value().get(0).tags().get("xakjsqzhzb"));
        Assertions.assertEquals("mhv", model.value().get(0).ueAmbr().uplink());
        Assertions.assertEquals("muvgp", model.value().get(0).ueAmbr().downlink());
        Assertions.assertEquals("uneqsxvmhf", model.value().get(0).defaultSlice().id());
        Assertions.assertEquals(837522232, model.value().get(0).rfspIndex());
        Assertions.assertEquals(1911590455, model.value().get(0).registrationTimer());
        Assertions.assertEquals("hsasbhu", model.value().get(0).sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("ypoh", model.value().get(0).sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("emslynsqyrp",
            model.value().get(0).sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("oobrlttyms",
            model.value()
                .get(0)
                .sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .sessionAmbr()
                .uplink());
        Assertions.assertEquals("nygq",
            model.value()
                .get(0)
                .sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .sessionAmbr()
                .downlink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
