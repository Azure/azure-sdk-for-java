// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AuthenticationType;
import com.azure.resourcemanager.mobilenetwork.models.AzureStackEdgeDeviceResourceId;
import com.azure.resourcemanager.mobilenetwork.models.AzureStackHciClusterResourceId;
import com.azure.resourcemanager.mobilenetwork.models.BillingSku;
import com.azure.resourcemanager.mobilenetwork.models.ConnectedClusterResourceId;
import com.azure.resourcemanager.mobilenetwork.models.CoreNetworkType;
import com.azure.resourcemanager.mobilenetwork.models.CustomLocationResourceId;
import com.azure.resourcemanager.mobilenetwork.models.DesiredInstallationState;
import com.azure.resourcemanager.mobilenetwork.models.DiagnosticsUploadConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.HttpsServerCertificate;
import com.azure.resourcemanager.mobilenetwork.models.Installation;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import com.azure.resourcemanager.mobilenetwork.models.LocalDiagnosticsAccessConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.ManagedServiceIdentity;
import com.azure.resourcemanager.mobilenetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mobilenetwork.models.PacketCoreControlPlane;
import com.azure.resourcemanager.mobilenetwork.models.PlatformConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PlatformType;
import com.azure.resourcemanager.mobilenetwork.models.SiteResourceId;
import com.azure.resourcemanager.mobilenetwork.models.UserAssignedIdentity;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PacketCoreControlPlanesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"installation\":{\"desiredState\":\"Installed\",\"state\":\"Installed\",\"reinstallRequired\":\"NotRequired\",\"reasons\":[\"NoPacketCoreDataPlane\",\"NoAttachedDataNetworks\",\"NoPacketCoreDataPlane\"],\"operation\":{\"id\":\"ejikzoeovvtzejet\"}},\"sites\":[{\"id\":\"ln\"}],\"platform\":{\"type\":\"AKS-HCI\",\"azureStackEdgeDevice\":{\"id\":\"yjuzkdb\"},\"azureStackEdgeDevices\":[{\"id\":\"lxrzvhqjwtr\"}],\"azureStackHciCluster\":{\"id\":\"gv\"},\"connectedCluster\":{\"id\":\"pcrrk\"},\"customLocation\":{\"id\":\"awjmjsmw\"}},\"coreNetworkTechnology\":\"EPC"
                + " + 5GC\",\"version\":\"dxfzzzwyjaf\",\"installedVersion\":\"lhguyn\",\"rollbackVersion\":\"hlgmltxdwhmoz\",\"controlPlaneAccessInterface\":{\"name\":\"gzvlnsnn\",\"ipv4Address\":\"fpafolpymwamxq\",\"ipv4Subnet\":\"agpgdph\",\"ipv4Gateway\":\"dulajvlejchcs\"},\"sku\":\"G1\",\"ueMtu\":1625370422,\"localDiagnosticsAccess\":{\"authenticationType\":\"AAD\",\"httpsServerCertificate\":{\"certificateUrl\":\"zlanrupdwvnph\",\"provisioning\":{\"state\":\"Failed\",\"reason\":\"pjhmqrhvthl\"}}},\"diagnosticsUpload\":{\"storageAccountContainerUrl\":\"wdcxsmlzzhz\"},\"interopSettings\":\"dataxetlgydlhqv\"},\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"afiqgeaarbgjekg\":{\"principalId\":\"7def5a54-8429-4ec2-b3aa-f08ef5f5e2df\",\"clientId\":\"336a46ee-865e-4882-8093-9428867686b7\"},\"byu\":{\"principalId\":\"cb3da54b-1327-4cb2-b244-d95f50a752b7\",\"clientId\":\"0c501c4f-b9d2-4355-b2d6-f0f524c3862d\"},\"wcwvmzeg\":{\"principalId\":\"71267096-fe0d-4f74-94c9-ba0b8a7a17e3\",\"clientId\":\"30ad5056-200a-4725-854d-03eed0131e6b\"}}},\"location\":\"nfhjirwgdnqzbr\",\"tags\":{\"tk\":\"pzhz\",\"lkeuac\":\"jcitdigsxcdglj\",\"dgycxnmskwhqjjy\":\"tomflrytswfpf\"},\"id\":\"lurlpshhkvp\",\"name\":\"dwqslsrhmpqvw\",\"type\":\"skondcbrwimu\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MobileNetworkManager manager =
            MobileNetworkManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PacketCoreControlPlane response =
            manager
                .packetCoreControlPlanes()
                .define("rtws")
                .withRegion("sfxsf")
                .withExistingResourceGroup("cyychunsjlp")
                .withSites(Arrays.asList(new SiteResourceId().withId("ocu")))
                .withPlatform(
                    new PlatformConfiguration()
                        .withType(PlatformType.THREE_P_AZURE_STACK_HCI)
                        .withAzureStackEdgeDevice(new AzureStackEdgeDeviceResourceId().withId("whhmemhooc"))
                        .withAzureStackHciCluster(new AzureStackHciClusterResourceId().withId("ykyujxsg"))
                        .withConnectedCluster(new ConnectedClusterResourceId().withId("srrryejylmbkzu"))
                        .withCustomLocation(new CustomLocationResourceId().withId("igrfihotjewl")))
                .withControlPlaneAccessInterface(
                    new InterfaceProperties()
                        .withName("diw")
                        .withIpv4Address("rkwpzdqtvhcspod")
                        .withIpv4Subnet("axsipietgb")
                        .withIpv4Gateway("jfulbmoic"))
                .withSku(BillingSku.G2)
                .withLocalDiagnosticsAccess(
                    new LocalDiagnosticsAccessConfiguration()
                        .withAuthenticationType(AuthenticationType.PASSWORD)
                        .withHttpsServerCertificate(new HttpsServerCertificate().withCertificateUrl("pubntnbatz")))
                .withTags(mapOf("vagbwidqlvhukove", "lvt"))
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentities(
                            mapOf("ggcvk", new UserAssignedIdentity(), "izrzb", new UserAssignedIdentity())))
                .withInstallation(new Installation().withDesiredState(DesiredInstallationState.INSTALLED))
                .withCoreNetworkTechnology(CoreNetworkType.EPC_5GC)
                .withVersion("zj")
                .withUeMtu(1057950970)
                .withDiagnosticsUpload(new DiagnosticsUploadConfiguration().withStorageAccountContainerUrl("attcju"))
                .withInteropSettings("datalrvkmjc")
                .create();

        Assertions.assertEquals("nfhjirwgdnqzbr", response.location());
        Assertions.assertEquals("pzhz", response.tags().get("tk"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals(DesiredInstallationState.INSTALLED, response.installation().desiredState());
        Assertions.assertEquals("ln", response.sites().get(0).id());
        Assertions.assertEquals(PlatformType.AKS_HCI, response.platform().type());
        Assertions.assertEquals("yjuzkdb", response.platform().azureStackEdgeDevice().id());
        Assertions.assertEquals("gv", response.platform().azureStackHciCluster().id());
        Assertions.assertEquals("pcrrk", response.platform().connectedCluster().id());
        Assertions.assertEquals("awjmjsmw", response.platform().customLocation().id());
        Assertions.assertEquals(CoreNetworkType.EPC_5GC, response.coreNetworkTechnology());
        Assertions.assertEquals("dxfzzzwyjaf", response.version());
        Assertions.assertEquals("gzvlnsnn", response.controlPlaneAccessInterface().name());
        Assertions.assertEquals("fpafolpymwamxq", response.controlPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("agpgdph", response.controlPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("dulajvlejchcs", response.controlPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals(BillingSku.G1, response.sku());
        Assertions.assertEquals(1625370422, response.ueMtu());
        Assertions.assertEquals(AuthenticationType.AAD, response.localDiagnosticsAccess().authenticationType());
        Assertions
            .assertEquals("zlanrupdwvnph", response.localDiagnosticsAccess().httpsServerCertificate().certificateUrl());
        Assertions.assertEquals("wdcxsmlzzhz", response.diagnosticsUpload().storageAccountContainerUrl());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
