// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AuthenticationType;
import com.azure.resourcemanager.mobilenetwork.models.AzureStackEdgeDeviceResourceId;
import com.azure.resourcemanager.mobilenetwork.models.AzureStackHciClusterResourceId;
import com.azure.resourcemanager.mobilenetwork.models.BillingSku;
import com.azure.resourcemanager.mobilenetwork.models.ConnectedClusterResourceId;
import com.azure.resourcemanager.mobilenetwork.models.CoreNetworkType;
import com.azure.resourcemanager.mobilenetwork.models.CustomLocationResourceId;
import com.azure.resourcemanager.mobilenetwork.models.DesiredInstallationState;
import com.azure.resourcemanager.mobilenetwork.models.DiagnosticsUploadConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.EventHubConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.HttpsServerCertificate;
import com.azure.resourcemanager.mobilenetwork.models.Installation;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import com.azure.resourcemanager.mobilenetwork.models.LocalDiagnosticsAccessConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.ManagedServiceIdentity;
import com.azure.resourcemanager.mobilenetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mobilenetwork.models.NasRerouteConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PacketCoreControlPlane;
import com.azure.resourcemanager.mobilenetwork.models.PlatformConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PlatformType;
import com.azure.resourcemanager.mobilenetwork.models.SignalingConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.SiteResourceId;
import com.azure.resourcemanager.mobilenetwork.models.UserAssignedIdentity;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PacketCoreControlPlanesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"installation\":{\"desiredState\":\"Uninstalled\",\"state\":\"RollingBack\",\"reinstallRequired\":\"Required\",\"reasons\":[\"UserPlaneDataInterfaceHasChanged\",\"NoAttachedDataNetworks\"],\"operation\":{\"id\":\"im\"}},\"sites\":[{\"id\":\"zovgkkumuikj\"},{\"id\":\"jcazt\"}],\"platform\":{\"type\":\"AKS-HCI\",\"azureStackEdgeDevice\":{\"id\":\"nsq\"},\"azureStackEdgeDevices\":[{\"id\":\"wcoml\"}],\"azureStackHciCluster\":{\"id\":\"ytwvczcswkacve\"},\"connectedCluster\":{\"id\":\"fdv\"},\"customLocation\":{\"id\":\"hbwrnfxtgddpqth\"}},\"coreNetworkTechnology\":\"5GC\",\"version\":\"naoyank\",\"installedVersion\":\"eqswanklty\",\"rollbackVersion\":\"hdroznnh\",\"controlPlaneAccessInterface\":{\"name\":\"lktgjc\",\"ipv4Address\":\"guxhem\",\"ipv4Subnet\":\"ywaeeczgf\",\"ipv4Gateway\":\"kklelssxblycs\"},\"controlPlaneAccessVirtualIpv4Addresses\":[\"jks\",\"lsmdesqplpvmjc\",\"oewbid\",\"vteo\"],\"sku\":\"G1\",\"ueMtu\":2010112978,\"localDiagnosticsAccess\":{\"authenticationType\":\"Password\",\"httpsServerCertificate\":{\"certificateUrl\":\"udeugfsxz\",\"provisioning\":{\"state\":\"NotProvisioned\",\"reason\":\"wkufykhvuhxepm\"}}},\"diagnosticsUpload\":{\"storageAccountContainerUrl\":\"tznabao\"},\"eventHub\":{\"id\":\"slujdjltym\",\"reportingInterval\":101256689},\"signaling\":{\"nasReroute\":{\"macroMmeGroupId\":778668452}},\"interopSettings\":\"dataywart\"},\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ky\":{\"principalId\":\"42df32a6-1a25-4857-bcde-898855f270c3\",\"clientId\":\"eaf83d74-0265-4997-9b6e-0ac3b96edceb\"},\"ssjpemmucf\":{\"principalId\":\"5e56cb7f-d07b-457b-af59-1ec9cf685728\",\"clientId\":\"9fec39e1-2aa2-4e98-ab4b-cf92a32090df\"},\"kkflrmymyincqlhr\":{\"principalId\":\"139b3838-81c9-4388-9318-291f2d1799bb\",\"clientId\":\"7cb851c4-3d24-4b4d-8b65-4fdeb1e13153\"},\"sl\":{\"principalId\":\"eae513a5-9c69-4b1d-996d-59f0d91dfa35\",\"clientId\":\"a4a69244-1cb3-41ae-b21f-e056ab9726ea\"}}},\"location\":\"iiovgqcgxu\",\"tags\":{\"ptjgwdt\":\"kctotiowlxteq\",\"hqlkccuzgygqwaho\":\"ukranblw\",\"d\":\"ulwgniiprglvawuw\",\"sbbjpmcu\":\"fypiv\"},\"id\":\"kmifoxxkub\",\"name\":\"phavpmhbrb\",\"type\":\"gvgovpbbttefjo\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MobileNetworkManager manager =
            MobileNetworkManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PacketCoreControlPlane response =
            manager
                .packetCoreControlPlanes()
                .define("zpcrrkolawj")
                .withRegion("ljqobbpihehcecyb")
                .withExistingResourceGroup("htgv")
                .withSites(
                    Arrays
                        .asList(
                            new SiteResourceId().withId("hguynuchlgmltxdw"),
                            new SiteResourceId().withId("mozusgzvlnsnnjz")))
                .withPlatform(
                    new PlatformConfiguration()
                        .withType(PlatformType.AKS_HCI)
                        .withAzureStackEdgeDevice(new AzureStackEdgeDeviceResourceId().withId("folpymwamxqzra"))
                        .withAzureStackHciCluster(new AzureStackHciClusterResourceId().withId("zlanrupdwvnph"))
                        .withConnectedCluster(new ConnectedClusterResourceId().withId("zqtpjhmq"))
                        .withCustomLocation(new CustomLocationResourceId().withId("v")))
                .withControlPlaneAccessInterface(
                    new InterfaceProperties()
                        .withName("lbyulidwcwvmze")
                        .withIpv4Address("o")
                        .withIpv4Subnet("hj")
                        .withIpv4Gateway("wgdnqzbr"))
                .withSku(BillingSku.G0)
                .withLocalDiagnosticsAccess(
                    new LocalDiagnosticsAccessConfiguration()
                        .withAuthenticationType(AuthenticationType.AAD)
                        .withHttpsServerCertificate(new HttpsServerCertificate().withCertificateUrl("chtomflrytsw")))
                .withTags(mapOf("frexcrseqw", "brjbbmpxdlvy"))
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.NONE)
                        .withUserAssignedIdentities(mapOf("nu", new UserAssignedIdentity())))
                .withInstallation(new Installation().withDesiredState(DesiredInstallationState.INSTALLED))
                .withCoreNetworkTechnology(CoreNetworkType.EPC_5GC)
                .withVersion("iwdcxsmlzzhzd")
                .withControlPlaneAccessVirtualIpv4Addresses(Arrays.asList("pzhz", "tk", "jcitdigsxcdglj"))
                .withUeMtu(409338172)
                .withDiagnosticsUpload(new DiagnosticsUploadConfiguration().withStorageAccountContainerUrl("rlpshhkv"))
                .withEventHub(new EventHubConfiguration().withId("dwqslsrhmpqvw").withReportingInterval(1592039992))
                .withSignaling(
                    new SignalingConfiguration()
                        .withNasReroute(new NasRerouteConfiguration().withMacroMmeGroupId(375889283)))
                .withInteropSettings("databrwimuvqejosovyr")
                .create();

        Assertions.assertEquals("iiovgqcgxu", response.location());
        Assertions.assertEquals("kctotiowlxteq", response.tags().get("ptjgwdt"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals(DesiredInstallationState.UNINSTALLED, response.installation().desiredState());
        Assertions.assertEquals("zovgkkumuikj", response.sites().get(0).id());
        Assertions.assertEquals(PlatformType.AKS_HCI, response.platform().type());
        Assertions.assertEquals("nsq", response.platform().azureStackEdgeDevice().id());
        Assertions.assertEquals("ytwvczcswkacve", response.platform().azureStackHciCluster().id());
        Assertions.assertEquals("fdv", response.platform().connectedCluster().id());
        Assertions.assertEquals("hbwrnfxtgddpqth", response.platform().customLocation().id());
        Assertions.assertEquals(CoreNetworkType.FIVE_GC, response.coreNetworkTechnology());
        Assertions.assertEquals("naoyank", response.version());
        Assertions.assertEquals("lktgjc", response.controlPlaneAccessInterface().name());
        Assertions.assertEquals("guxhem", response.controlPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("ywaeeczgf", response.controlPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("kklelssxblycs", response.controlPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals("jks", response.controlPlaneAccessVirtualIpv4Addresses().get(0));
        Assertions.assertEquals(BillingSku.G1, response.sku());
        Assertions.assertEquals(2010112978, response.ueMtu());
        Assertions.assertEquals(AuthenticationType.PASSWORD, response.localDiagnosticsAccess().authenticationType());
        Assertions
            .assertEquals("udeugfsxz", response.localDiagnosticsAccess().httpsServerCertificate().certificateUrl());
        Assertions.assertEquals("tznabao", response.diagnosticsUpload().storageAccountContainerUrl());
        Assertions.assertEquals("slujdjltym", response.eventHub().id());
        Assertions.assertEquals(101256689, response.eventHub().reportingInterval());
        Assertions.assertEquals(778668452, response.signaling().nasReroute().macroMmeGroupId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
