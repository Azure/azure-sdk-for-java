// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.SimPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SimPoliciesListByMobileNetworkMockTests {
    @Test
    public void testListByMobileNetwork() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"siteProvisioningState\":{\"ntrpcaqkiof\":\"Adding\",\"tfmhklbnldpvcb\":\"NotApplicable\",\"ezyquw\":\"Failed\"},\"ueAmbr\":{\"uplink\":\"sqxutr\",\"downlink\":\"brruyuuatv\"},\"defaultSlice\":{\"id\":\"mbjwcolbmxlb\"},\"rfspIndex\":757455184,\"registrationTimer\":894228771,\"sliceConfigurations\":[{\"slice\":{\"id\":\"ahprzrvxhmtfhocn\"},\"defaultDataNetwork\":{\"id\":\"zcmjhngxnoqrxt\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"sn\"},\"sessionAmbr\":{\"uplink\":\"evhdlmydid\",\"downlink\":\"hepfwwtjfdoes\"},\"allowedServices\":[]}]}]},\"location\":\"hmwcdbck\",\"tags\":{\"jzrbhtmeplv\":\"kxkxhnegk\",\"pgsn\":\"kaobrl\",\"a\":\"agnchjhgemuowaky\"},\"id\":\"hjym\",\"name\":\"cgqtag\",\"type\":\"rclsso\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SimPolicy> response
            = manager.simPolicies().listByMobileNetwork("xdazv", "hctmmkosz", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hmwcdbck", response.iterator().next().location());
        Assertions.assertEquals("kxkxhnegk", response.iterator().next().tags().get("jzrbhtmeplv"));
        Assertions.assertEquals("sqxutr", response.iterator().next().ueAmbr().uplink());
        Assertions.assertEquals("brruyuuatv", response.iterator().next().ueAmbr().downlink());
        Assertions.assertEquals("mbjwcolbmxlb", response.iterator().next().defaultSlice().id());
        Assertions.assertEquals(757455184, response.iterator().next().rfspIndex());
        Assertions.assertEquals(894228771, response.iterator().next().registrationTimer());
        Assertions.assertEquals("ahprzrvxhmtfhocn",
            response.iterator().next().sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("zcmjhngxnoqrxt",
            response.iterator().next().sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("sn",
            response.iterator()
                .next()
                .sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .dataNetwork()
                .id());
        Assertions.assertEquals("evhdlmydid",
            response.iterator()
                .next()
                .sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .sessionAmbr()
                .uplink());
        Assertions.assertEquals("hepfwwtjfdoes",
            response.iterator()
                .next()
                .sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .sessionAmbr()
                .downlink());
    }
}
