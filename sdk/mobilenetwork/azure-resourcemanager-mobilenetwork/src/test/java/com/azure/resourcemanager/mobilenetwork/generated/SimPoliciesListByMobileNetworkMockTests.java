// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.SimPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SimPoliciesListByMobileNetworkMockTests {
    @Test
    public void testListByMobileNetwork() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleted\",\"siteProvisioningState\":{\"ubefgybpmfbfunu\":\"Provisioned\",\"pzkrvfy\":\"Deleting\",\"kdschlzvfictnkjj\":\"NotApplicable\"},\"ueAmbr\":{\"uplink\":\"gcwn\",\"downlink\":\"hbkgfyrt\"},\"defaultSlice\":{\"id\":\"gm\"},\"rfspIndex\":237087161,\"registrationTimer\":655942902,\"sliceConfigurations\":[{\"slice\":{\"id\":\"cdf\"},\"defaultDataNetwork\":{\"id\":\"dqwty\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"vgwmseharxifvqnr\"},\"sessionAmbr\":{\"uplink\":\"tmbpjp\",\"downlink\":\"nvwjhrsidqpxl\"},\"allowedServices\":[]}]},{\"slice\":{\"id\":\"tpakf\"},\"defaultDataNetwork\":{\"id\":\"ngatwmy\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"u\"},\"sessionAmbr\":{\"uplink\":\"rymdwmf\",\"downlink\":\"hpycvjqdvdwkq\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"ldrlefgnaavua\"},\"sessionAmbr\":{\"uplink\":\"n\",\"downlink\":\"etaoutnpdc\"},\"allowedServices\":[]}]}]},\"location\":\"hspfefyihd\",\"tags\":{\"hmtybkcgsuthhll\":\"uyld\",\"jrr\":\"mwynefxexlfciatx\",\"ajfoxc\":\"kmdskjhhxd\"},\"id\":\"scv\",\"name\":\"lxlhuavkrm\",\"type\":\"kmyjmkxett\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SimPolicy> response
            = manager.simPolicies().listByMobileNetwork("yvoaqajuvehzp", "dmkrrb", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hspfefyihd", response.iterator().next().location());
        Assertions.assertEquals("uyld", response.iterator().next().tags().get("hmtybkcgsuthhll"));
        Assertions.assertEquals("gcwn", response.iterator().next().ueAmbr().uplink());
        Assertions.assertEquals("hbkgfyrt", response.iterator().next().ueAmbr().downlink());
        Assertions.assertEquals("gm", response.iterator().next().defaultSlice().id());
        Assertions.assertEquals(237087161, response.iterator().next().rfspIndex());
        Assertions.assertEquals(655942902, response.iterator().next().registrationTimer());
        Assertions.assertEquals("cdf", response.iterator().next().sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("dqwty",
            response.iterator().next().sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("vgwmseharxifvqnr",
            response.iterator()
                .next()
                .sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .dataNetwork()
                .id());
        Assertions.assertEquals("tmbpjp",
            response.iterator()
                .next()
                .sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .sessionAmbr()
                .uplink());
        Assertions.assertEquals("nvwjhrsidqpxl",
            response.iterator()
                .next()
                .sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .sessionAmbr()
                .downlink());
    }
}
