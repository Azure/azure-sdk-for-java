// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AttachedDataNetwork;
import com.azure.resourcemanager.mobilenetwork.models.NaptEnabled;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AttachedDataNetworksListByPacketCoreDataPlaneMockTests {
    @Test
    public void testListByPacketCoreDataPlane() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"userPlaneDataInterface\":{\"name\":\"bhfhpfpazjzoy\",\"ipv4Address\":\"xhpdulontacnpqwt\",\"ipv4Subnet\":\"tuevrh\",\"ipv4Gateway\":\"jyoogwxh\",\"vlanId\":32518056,\"ipv4AddressList\":[\"gwbsreurf\",\"kfuarenlv\",\"htkln\",\"nafvvkyfedev\"],\"bfdIpv4Endpoints\":[\"slcqxypokkh\"]},\"dnsAddresses\":[\"nqcymczngnbdxxew\",\"ninvudbchaqdt\",\"qecrqctmxx\",\"tddmf\"],\"naptConfiguration\":{\"enabled\":\"Disabled\",\"portRange\":{\"minPort\":297911426,\"maxPort\":1148214254},\"portReuseHoldTime\":{\"tcp\":1703929659,\"udp\":633120546},\"pinholeLimits\":1479756022,\"pinholeTimeouts\":{\"tcp\":117712322,\"udp\":166496686,\"icmp\":469198005}},\"userEquipmentAddressPoolPrefix\":[\"ytprwnwvroev\",\"tlyo\",\"rrrouuxvnsa\",\"bcrymodizrx\"],\"userEquipmentStaticAddressPoolPrefix\":[\"bdxnaz\",\"mkmlmvevfx\",\"op\",\"hbzxli\"]},\"location\":\"rdddtfgxqbawpcb\",\"tags\":{\"napqo\":\"qcy\",\"wwgbdv\":\"yuicdhzbdy\"},\"id\":\"bid\",\"name\":\"hmwffplfmuv\",\"type\":\"pckc\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AttachedDataNetwork> response = manager.attachedDataNetworks()
            .listByPacketCoreDataPlane("arfdlpukhpyrnei", "jcpeogkhnmg", "ro", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rdddtfgxqbawpcb", response.iterator().next().location());
        Assertions.assertEquals("qcy", response.iterator().next().tags().get("napqo"));
        Assertions.assertEquals("bhfhpfpazjzoy", response.iterator().next().userPlaneDataInterface().name());
        Assertions.assertEquals("xhpdulontacnpqwt", response.iterator().next().userPlaneDataInterface().ipv4Address());
        Assertions.assertEquals("tuevrh", response.iterator().next().userPlaneDataInterface().ipv4Subnet());
        Assertions.assertEquals("jyoogwxh", response.iterator().next().userPlaneDataInterface().ipv4Gateway());
        Assertions.assertEquals(32518056, response.iterator().next().userPlaneDataInterface().vlanId());
        Assertions.assertEquals("gwbsreurf",
            response.iterator().next().userPlaneDataInterface().ipv4AddressList().get(0));
        Assertions.assertEquals("slcqxypokkh",
            response.iterator().next().userPlaneDataInterface().bfdIpv4Endpoints().get(0));
        Assertions.assertEquals("nqcymczngnbdxxew", response.iterator().next().dnsAddresses().get(0));
        Assertions.assertEquals(NaptEnabled.DISABLED, response.iterator().next().naptConfiguration().enabled());
        Assertions.assertEquals(297911426, response.iterator().next().naptConfiguration().portRange().minPort());
        Assertions.assertEquals(1148214254, response.iterator().next().naptConfiguration().portRange().maxPort());
        Assertions.assertEquals(1703929659, response.iterator().next().naptConfiguration().portReuseHoldTime().tcp());
        Assertions.assertEquals(633120546, response.iterator().next().naptConfiguration().portReuseHoldTime().udp());
        Assertions.assertEquals(1479756022, response.iterator().next().naptConfiguration().pinholeLimits());
        Assertions.assertEquals(117712322, response.iterator().next().naptConfiguration().pinholeTimeouts().tcp());
        Assertions.assertEquals(166496686, response.iterator().next().naptConfiguration().pinholeTimeouts().udp());
        Assertions.assertEquals(469198005, response.iterator().next().naptConfiguration().pinholeTimeouts().icmp());
        Assertions.assertEquals("ytprwnwvroev", response.iterator().next().userEquipmentAddressPoolPrefix().get(0));
        Assertions.assertEquals("bdxnaz", response.iterator().next().userEquipmentStaticAddressPoolPrefix().get(0));
    }
}
