// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AttachedDataNetwork;
import com.azure.resourcemanager.mobilenetwork.models.NaptEnabled;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AttachedDataNetworksListByPacketCoreDataPlaneMockTests {
    @Test
    public void testListByPacketCoreDataPlane() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleted\",\"userPlaneDataInterface\":{\"name\":\"nmwmqtibx\",\"ipv4Address\":\"jddtvqct\",\"ipv4Subnet\":\"dija\",\"ipv4Gateway\":\"kmr\"},\"dnsAddresses\":[\"eekpndz\",\"apm\",\"dqmeqwigpibudq\"],\"naptConfiguration\":{\"enabled\":\"Enabled\",\"portRange\":{\"minPort\":1568036168,\"maxPort\":650775767},\"portReuseHoldTime\":{\"tcp\":606462246,\"udp\":619135714},\"pinholeLimits\":310350754,\"pinholeTimeouts\":{\"tcp\":639795933,\"udp\":1808729813,\"icmp\":547449174}},\"userEquipmentAddressPoolPrefix\":[\"eioqaqhvse\",\"fuqyrxpdlcgqlsi\"],\"userEquipmentStaticAddressPoolPrefix\":[\"qfrddgam\",\"uhiosrsju\",\"vfcdisyirn\"]},\"location\":\"hcz\",\"tags\":{\"vk\":\"xzbujrtrhqvwr\",\"zonzlrpiqywnc\":\"gnl\"},\"id\":\"jtszcof\",\"name\":\"zehtdhgb\",\"type\":\"k\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        MobileNetworkManager manager = MobileNetworkManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AttachedDataNetwork> response = manager.attachedDataNetworks().listByPacketCoreDataPlane(
            "fuzboyjathwtzolb", "emwmdxmebwjs", "jpahlxvea", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hcz", response.iterator().next().location());
        Assertions.assertEquals("xzbujrtrhqvwr", response.iterator().next().tags().get("vk"));
        Assertions.assertEquals("nmwmqtibx", response.iterator().next().userPlaneDataInterface().name());
        Assertions.assertEquals("jddtvqct", response.iterator().next().userPlaneDataInterface().ipv4Address());
        Assertions.assertEquals("dija", response.iterator().next().userPlaneDataInterface().ipv4Subnet());
        Assertions.assertEquals("kmr", response.iterator().next().userPlaneDataInterface().ipv4Gateway());
        Assertions.assertEquals("eekpndz", response.iterator().next().dnsAddresses().get(0));
        Assertions.assertEquals(NaptEnabled.ENABLED, response.iterator().next().naptConfiguration().enabled());
        Assertions.assertEquals(1568036168, response.iterator().next().naptConfiguration().portRange().minPort());
        Assertions.assertEquals(650775767, response.iterator().next().naptConfiguration().portRange().maxPort());
        Assertions.assertEquals(606462246, response.iterator().next().naptConfiguration().portReuseHoldTime().tcp());
        Assertions.assertEquals(619135714, response.iterator().next().naptConfiguration().portReuseHoldTime().udp());
        Assertions.assertEquals(310350754, response.iterator().next().naptConfiguration().pinholeLimits());
        Assertions.assertEquals(639795933, response.iterator().next().naptConfiguration().pinholeTimeouts().tcp());
        Assertions.assertEquals(1808729813, response.iterator().next().naptConfiguration().pinholeTimeouts().udp());
        Assertions.assertEquals(547449174, response.iterator().next().naptConfiguration().pinholeTimeouts().icmp());
        Assertions.assertEquals("eioqaqhvse", response.iterator().next().userEquipmentAddressPoolPrefix().get(0));
        Assertions.assertEquals("qfrddgam", response.iterator().next().userEquipmentStaticAddressPoolPrefix().get(0));
    }
}
