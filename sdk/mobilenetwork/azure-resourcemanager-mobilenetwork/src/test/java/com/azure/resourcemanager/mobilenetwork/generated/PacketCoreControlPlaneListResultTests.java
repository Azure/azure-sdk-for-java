// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.PacketCoreControlPlaneInner;
import com.azure.resourcemanager.mobilenetwork.models.AuthenticationType;
import com.azure.resourcemanager.mobilenetwork.models.AzureStackEdgeDeviceResourceId;
import com.azure.resourcemanager.mobilenetwork.models.AzureStackHciClusterResourceId;
import com.azure.resourcemanager.mobilenetwork.models.BillingSku;
import com.azure.resourcemanager.mobilenetwork.models.ConnectedClusterResourceId;
import com.azure.resourcemanager.mobilenetwork.models.CoreNetworkType;
import com.azure.resourcemanager.mobilenetwork.models.CustomLocationResourceId;
import com.azure.resourcemanager.mobilenetwork.models.DesiredInstallationState;
import com.azure.resourcemanager.mobilenetwork.models.DiagnosticsUploadConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.EventHubConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.HttpsServerCertificate;
import com.azure.resourcemanager.mobilenetwork.models.Installation;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import com.azure.resourcemanager.mobilenetwork.models.LocalDiagnosticsAccessConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.ManagedServiceIdentity;
import com.azure.resourcemanager.mobilenetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mobilenetwork.models.NasRerouteConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PacketCoreControlPlaneListResult;
import com.azure.resourcemanager.mobilenetwork.models.PlatformConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PlatformType;
import com.azure.resourcemanager.mobilenetwork.models.SignalingConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.SiteResourceId;
import com.azure.resourcemanager.mobilenetwork.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PacketCoreControlPlaneListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PacketCoreControlPlaneListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleted\",\"installation\":{\"desiredState\":\"Uninstalled\",\"state\":\"Installed\",\"reinstallRequired\":\"NotRequired\",\"reasons\":[\"NoPacketCoreDataPlane\",\"UserPlaneAccessInterfaceHasChanged\"],\"operation\":{\"id\":\"bmehh\"}},\"sites\":[{\"id\":\"yvjusrtslhsp\"},{\"id\":\"deemao\"},{\"id\":\"mx\"},{\"id\":\"gkvtmelmqkrhah\"}],\"platform\":{\"type\":\"3P-AZURE-STACK-HCI\",\"azureStackEdgeDevice\":{\"id\":\"uahaquhcdhmd\"},\"azureStackEdgeDevices\":[{\"id\":\"aex\"},{\"id\":\"pvfadmwsrcr\"}],\"azureStackHciCluster\":{\"id\":\"xpvgo\"},\"connectedCluster\":{\"id\":\"lf\"},\"customLocation\":{\"id\":\"sgwbnbbeld\"}},\"coreNetworkTechnology\":\"5GC\",\"version\":\"baliourqhakauha\",\"installedVersion\":\"sfwxosowzxc\",\"rollbackVersion\":\"i\",\"controlPlaneAccessInterface\":{\"name\":\"ooxdjebwpuc\",\"ipv4Address\":\"fvovbvmeuecivy\",\"ipv4Subnet\":\"ce\",\"ipv4Gateway\":\"jgjrwjueiotwm\"},\"controlPlaneAccessVirtualIpv4Addresses\":[\"tdx\",\"it\"],\"sku\":\"G5\",\"ueMtu\":1725876914,\"localDiagnosticsAccess\":{\"authenticationType\":\"Password\",\"httpsServerCertificate\":{\"certificateUrl\":\"gqwgxhniskxfbkp\",\"provisioning\":{}}},\"diagnosticsUpload\":{\"storageAccountContainerUrl\":\"klwndnhjdauwhv\"},\"eventHub\":{\"id\":\"wzbtdhxu\",\"reportingInterval\":872540735},\"signaling\":{\"nasReroute\":{\"macroMmeGroupId\":751877073}},\"interopSettings\":\"datawuwprzqlv\"},\"identity\":{\"type\":\"None\",\"userAssignedIdentities\":{\"mkh\":{\"principalId\":\"b6f169da-75c7-4ffa-a715-e0ff1dfe86f3\",\"clientId\":\"65b3f096-3213-4257-a5da-fd6f7bb2237e\"}}},\"location\":\"obbc\",\"tags\":{\"ghfg\":\"rtjriplrbpbew\"},\"id\":\"lcgwxzvlvqh\",\"name\":\"kbegibt\",\"type\":\"mxiebw\"}],\"nextLink\":\"loayqcgw\"}")
                .toObject(PacketCoreControlPlaneListResult.class);
        Assertions.assertEquals("obbc", model.value().get(0).location());
        Assertions.assertEquals("rtjriplrbpbew", model.value().get(0).tags().get("ghfg"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions
            .assertEquals(DesiredInstallationState.UNINSTALLED, model.value().get(0).installation().desiredState());
        Assertions.assertEquals("yvjusrtslhsp", model.value().get(0).sites().get(0).id());
        Assertions.assertEquals(PlatformType.THREE_P_AZURE_STACK_HCI, model.value().get(0).platform().type());
        Assertions.assertEquals("uahaquhcdhmd", model.value().get(0).platform().azureStackEdgeDevice().id());
        Assertions.assertEquals("xpvgo", model.value().get(0).platform().azureStackHciCluster().id());
        Assertions.assertEquals("lf", model.value().get(0).platform().connectedCluster().id());
        Assertions.assertEquals("sgwbnbbeld", model.value().get(0).platform().customLocation().id());
        Assertions.assertEquals(CoreNetworkType.FIVE_GC, model.value().get(0).coreNetworkTechnology());
        Assertions.assertEquals("baliourqhakauha", model.value().get(0).version());
        Assertions.assertEquals("ooxdjebwpuc", model.value().get(0).controlPlaneAccessInterface().name());
        Assertions.assertEquals("fvovbvmeuecivy", model.value().get(0).controlPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("ce", model.value().get(0).controlPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("jgjrwjueiotwm", model.value().get(0).controlPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals("tdx", model.value().get(0).controlPlaneAccessVirtualIpv4Addresses().get(0));
        Assertions.assertEquals(BillingSku.G5, model.value().get(0).sku());
        Assertions.assertEquals(1725876914, model.value().get(0).ueMtu());
        Assertions
            .assertEquals(
                AuthenticationType.PASSWORD, model.value().get(0).localDiagnosticsAccess().authenticationType());
        Assertions
            .assertEquals(
                "gqwgxhniskxfbkp",
                model.value().get(0).localDiagnosticsAccess().httpsServerCertificate().certificateUrl());
        Assertions
            .assertEquals("klwndnhjdauwhv", model.value().get(0).diagnosticsUpload().storageAccountContainerUrl());
        Assertions.assertEquals("wzbtdhxu", model.value().get(0).eventHub().id());
        Assertions.assertEquals(872540735, model.value().get(0).eventHub().reportingInterval());
        Assertions.assertEquals(751877073, model.value().get(0).signaling().nasReroute().macroMmeGroupId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PacketCoreControlPlaneListResult model =
            new PacketCoreControlPlaneListResult()
                .withValue(
                    Arrays
                        .asList(
                            new PacketCoreControlPlaneInner()
                                .withLocation("obbc")
                                .withTags(mapOf("ghfg", "rtjriplrbpbew"))
                                .withIdentity(
                                    new ManagedServiceIdentity()
                                        .withType(ManagedServiceIdentityType.NONE)
                                        .withUserAssignedIdentities(mapOf("mkh", new UserAssignedIdentity())))
                                .withInstallation(
                                    new Installation().withDesiredState(DesiredInstallationState.UNINSTALLED))
                                .withSites(
                                    Arrays
                                        .asList(
                                            new SiteResourceId().withId("yvjusrtslhsp"),
                                            new SiteResourceId().withId("deemao"),
                                            new SiteResourceId().withId("mx"),
                                            new SiteResourceId().withId("gkvtmelmqkrhah")))
                                .withPlatform(
                                    new PlatformConfiguration()
                                        .withType(PlatformType.THREE_P_AZURE_STACK_HCI)
                                        .withAzureStackEdgeDevice(
                                            new AzureStackEdgeDeviceResourceId().withId("uahaquhcdhmd"))
                                        .withAzureStackHciCluster(new AzureStackHciClusterResourceId().withId("xpvgo"))
                                        .withConnectedCluster(new ConnectedClusterResourceId().withId("lf"))
                                        .withCustomLocation(new CustomLocationResourceId().withId("sgwbnbbeld")))
                                .withCoreNetworkTechnology(CoreNetworkType.FIVE_GC)
                                .withVersion("baliourqhakauha")
                                .withControlPlaneAccessInterface(
                                    new InterfaceProperties()
                                        .withName("ooxdjebwpuc")
                                        .withIpv4Address("fvovbvmeuecivy")
                                        .withIpv4Subnet("ce")
                                        .withIpv4Gateway("jgjrwjueiotwm"))
                                .withControlPlaneAccessVirtualIpv4Addresses(Arrays.asList("tdx", "it"))
                                .withSku(BillingSku.G5)
                                .withUeMtu(1725876914)
                                .withLocalDiagnosticsAccess(
                                    new LocalDiagnosticsAccessConfiguration()
                                        .withAuthenticationType(AuthenticationType.PASSWORD)
                                        .withHttpsServerCertificate(
                                            new HttpsServerCertificate().withCertificateUrl("gqwgxhniskxfbkp")))
                                .withDiagnosticsUpload(
                                    new DiagnosticsUploadConfiguration()
                                        .withStorageAccountContainerUrl("klwndnhjdauwhv"))
                                .withEventHub(
                                    new EventHubConfiguration().withId("wzbtdhxu").withReportingInterval(872540735))
                                .withSignaling(
                                    new SignalingConfiguration()
                                        .withNasReroute(new NasRerouteConfiguration().withMacroMmeGroupId(751877073)))
                                .withInteropSettings("datawuwprzqlv")));
        model = BinaryData.fromObject(model).toObject(PacketCoreControlPlaneListResult.class);
        Assertions.assertEquals("obbc", model.value().get(0).location());
        Assertions.assertEquals("rtjriplrbpbew", model.value().get(0).tags().get("ghfg"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions
            .assertEquals(DesiredInstallationState.UNINSTALLED, model.value().get(0).installation().desiredState());
        Assertions.assertEquals("yvjusrtslhsp", model.value().get(0).sites().get(0).id());
        Assertions.assertEquals(PlatformType.THREE_P_AZURE_STACK_HCI, model.value().get(0).platform().type());
        Assertions.assertEquals("uahaquhcdhmd", model.value().get(0).platform().azureStackEdgeDevice().id());
        Assertions.assertEquals("xpvgo", model.value().get(0).platform().azureStackHciCluster().id());
        Assertions.assertEquals("lf", model.value().get(0).platform().connectedCluster().id());
        Assertions.assertEquals("sgwbnbbeld", model.value().get(0).platform().customLocation().id());
        Assertions.assertEquals(CoreNetworkType.FIVE_GC, model.value().get(0).coreNetworkTechnology());
        Assertions.assertEquals("baliourqhakauha", model.value().get(0).version());
        Assertions.assertEquals("ooxdjebwpuc", model.value().get(0).controlPlaneAccessInterface().name());
        Assertions.assertEquals("fvovbvmeuecivy", model.value().get(0).controlPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("ce", model.value().get(0).controlPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("jgjrwjueiotwm", model.value().get(0).controlPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals("tdx", model.value().get(0).controlPlaneAccessVirtualIpv4Addresses().get(0));
        Assertions.assertEquals(BillingSku.G5, model.value().get(0).sku());
        Assertions.assertEquals(1725876914, model.value().get(0).ueMtu());
        Assertions
            .assertEquals(
                AuthenticationType.PASSWORD, model.value().get(0).localDiagnosticsAccess().authenticationType());
        Assertions
            .assertEquals(
                "gqwgxhniskxfbkp",
                model.value().get(0).localDiagnosticsAccess().httpsServerCertificate().certificateUrl());
        Assertions
            .assertEquals("klwndnhjdauwhv", model.value().get(0).diagnosticsUpload().storageAccountContainerUrl());
        Assertions.assertEquals("wzbtdhxu", model.value().get(0).eventHub().id());
        Assertions.assertEquals(872540735, model.value().get(0).eventHub().reportingInterval());
        Assertions.assertEquals(751877073, model.value().get(0).signaling().nasReroute().macroMmeGroupId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
