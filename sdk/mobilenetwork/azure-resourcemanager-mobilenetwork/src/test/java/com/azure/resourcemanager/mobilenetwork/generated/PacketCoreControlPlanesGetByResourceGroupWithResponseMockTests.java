// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AuthenticationType;
import com.azure.resourcemanager.mobilenetwork.models.BillingSku;
import com.azure.resourcemanager.mobilenetwork.models.CoreNetworkType;
import com.azure.resourcemanager.mobilenetwork.models.DesiredInstallationState;
import com.azure.resourcemanager.mobilenetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mobilenetwork.models.PacketCoreControlPlane;
import com.azure.resourcemanager.mobilenetwork.models.PlatformType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PacketCoreControlPlanesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Deleting\",\"installation\":{\"desiredState\":\"Uninstalled\",\"state\":\"Failed\",\"reinstallRequired\":\"NotRequired\",\"reasons\":[\"PublicLandMobileNetworkIdentifierHasChanged\",\"UserPlaneDataInterfaceHasChanged\",\"PublicLandMobileNetworkIdentifierHasChanged\",\"UserPlaneAccessInterfaceHasChanged\"],\"operation\":{\"id\":\"o\"}},\"sites\":[{\"id\":\"e\"}],\"platform\":{\"type\":\"AKS-HCI\",\"azureStackEdgeDevice\":{\"id\":\"cnwfepbnwgfmxjg\"},\"azureStackEdgeDevices\":[{\"id\":\"jbgdlfgtdysnaquf\"}],\"azureStackHciCluster\":{\"id\":\"bctqhamzjrwd\"},\"connectedCluster\":{\"id\":\"zeqyjleziun\"},\"customLocation\":{\"id\":\"dfzantkwcegy\"}},\"coreNetworkTechnology\":\"EPC"
                + " + 5GC\",\"version\":\"nseqacjjvp\",\"installedVersion\":\"guooqjagmdit\",\"rollbackVersion\":\"eiookjbsah\",\"controlPlaneAccessInterface\":{\"name\":\"dt\",\"ipv4Address\":\"elqacslmot\",\"ipv4Subnet\":\"bnfxofvc\",\"ipv4Gateway\":\"gdirazf\"},\"controlPlaneAccessVirtualIpv4Addresses\":[\"jwabmd\",\"jtmvc\",\"pexcmjurbuhh\",\"kyqltqsrogt\"],\"sku\":\"G5\",\"ueMtu\":2102252305,\"localDiagnosticsAccess\":{\"authenticationType\":\"Password\",\"httpsServerCertificate\":{\"certificateUrl\":\"jk\",\"provisioning\":{\"state\":\"Provisioned\",\"reason\":\"dfvclglxnfu\"}}},\"diagnosticsUpload\":{\"storageAccountContainerUrl\":\"tkbu\"},\"eventHub\":{\"id\":\"ogsf\",\"reportingInterval\":1510144840},\"signaling\":{\"nasReroute\":{\"macroMmeGroupId\":1717573357}},\"interopSettings\":\"datasharujtj\"},\"identity\":{\"type\":\"None\",\"userAssignedIdentities\":{\"qttv\":{\"principalId\":\"6ec2415b-3db2-4eea-a430-87e774f21137\",\"clientId\":\"50f50c1a-4d12-4e78-ae85-0665d3c64fa1\"}}},\"location\":\"pqhjpenuygbqeqq\",\"tags\":{\"qvcdlguaucmfdjw\":\"wv\",\"ikczvvitacgxmf\":\"laxpunj\",\"sjgqrsxyp\":\"sserxhtvsoxhlwn\"},\"id\":\"uuuybnchrsziz\",\"name\":\"yuel\",\"type\":\"etndnbfqyggagf\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MobileNetworkManager manager =
            MobileNetworkManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PacketCoreControlPlane response =
            manager
                .packetCoreControlPlanes()
                .getByResourceGroupWithResponse("cbuewmrswnjlxuz", "hwpusxj", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("pqhjpenuygbqeqq", response.location());
        Assertions.assertEquals("wv", response.tags().get("qvcdlguaucmfdjw"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
        Assertions.assertEquals(DesiredInstallationState.UNINSTALLED, response.installation().desiredState());
        Assertions.assertEquals("e", response.sites().get(0).id());
        Assertions.assertEquals(PlatformType.AKS_HCI, response.platform().type());
        Assertions.assertEquals("cnwfepbnwgfmxjg", response.platform().azureStackEdgeDevice().id());
        Assertions.assertEquals("bctqhamzjrwd", response.platform().azureStackHciCluster().id());
        Assertions.assertEquals("zeqyjleziun", response.platform().connectedCluster().id());
        Assertions.assertEquals("dfzantkwcegy", response.platform().customLocation().id());
        Assertions.assertEquals(CoreNetworkType.EPC_5GC, response.coreNetworkTechnology());
        Assertions.assertEquals("nseqacjjvp", response.version());
        Assertions.assertEquals("dt", response.controlPlaneAccessInterface().name());
        Assertions.assertEquals("elqacslmot", response.controlPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("bnfxofvc", response.controlPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("gdirazf", response.controlPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals("jwabmd", response.controlPlaneAccessVirtualIpv4Addresses().get(0));
        Assertions.assertEquals(BillingSku.G5, response.sku());
        Assertions.assertEquals(2102252305, response.ueMtu());
        Assertions.assertEquals(AuthenticationType.PASSWORD, response.localDiagnosticsAccess().authenticationType());
        Assertions.assertEquals("jk", response.localDiagnosticsAccess().httpsServerCertificate().certificateUrl());
        Assertions.assertEquals("tkbu", response.diagnosticsUpload().storageAccountContainerUrl());
        Assertions.assertEquals("ogsf", response.eventHub().id());
        Assertions.assertEquals(1510144840, response.eventHub().reportingInterval());
        Assertions.assertEquals(1717573357, response.signaling().nasReroute().macroMmeGroupId());
    }
}
