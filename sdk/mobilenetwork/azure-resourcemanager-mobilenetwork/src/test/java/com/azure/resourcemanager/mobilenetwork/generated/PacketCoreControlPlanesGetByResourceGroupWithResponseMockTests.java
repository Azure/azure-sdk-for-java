// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AuthenticationType;
import com.azure.resourcemanager.mobilenetwork.models.BillingSku;
import com.azure.resourcemanager.mobilenetwork.models.CoreNetworkType;
import com.azure.resourcemanager.mobilenetwork.models.DesiredInstallationState;
import com.azure.resourcemanager.mobilenetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mobilenetwork.models.PacketCoreControlPlane;
import com.azure.resourcemanager.mobilenetwork.models.PlatformType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PacketCoreControlPlanesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Accepted\",\"installation\":{\"desiredState\":\"Installed\",\"state\":\"Failed\",\"reinstallRequired\":\"Required\",\"reasons\":[\"NoAttachedDataNetworks\",\"NoPacketCoreDataPlane\"],\"operation\":{\"id\":\"uyturml\"}},\"sites\":[{\"id\":\"owolbaui\"},{\"id\":\"opionszon\"},{\"id\":\"pngajin\"},{\"id\":\"ixjawrtm\"}],\"platform\":{\"type\":\"3P-AZURE-STACK-HCI\",\"azureStackEdgeDevice\":{\"id\":\"myccx\"},\"azureStackEdgeDevices\":[{\"id\":\"coxovn\"},{\"id\":\"khenlus\"}],\"azureStackHciCluster\":{\"id\":\"rd\"},\"connectedCluster\":{\"id\":\"xtxrdcqtjvidt\"},\"customLocation\":{\"id\":\"epu\"}},\"coreNetworkTechnology\":\"EPC"
                + " + 5GC\",\"version\":\"jtcvuwkasizies\",\"installedVersion\":\"ughtuqfecjxeygtu\",\"rollbackVersion\":\"uicbuewmrsw\",\"controlPlaneAccessInterface\":{\"name\":\"lx\",\"ipv4Address\":\"rhwpus\",\"ipv4Subnet\":\"baqehgpdoh\",\"ipv4Gateway\":\"qatucoigebxnc\"},\"sku\":\"G0\",\"ueMtu\":2085427407,\"localDiagnosticsAccess\":{\"authenticationType\":\"Password\",\"httpsServerCertificate\":{\"certificateUrl\":\"nwgfmxjgcgbjbgd\",\"provisioning\":{\"state\":\"NotProvisioned\",\"reason\":\"y\"}}},\"diagnosticsUpload\":{\"storageAccountContainerUrl\":\"aquflqbctqha\"},\"interopSettings\":\"datajrwdkqz\"},\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"iunjxdf\":{\"principalId\":\"24a67c67-bbcf-4ede-838b-b72d25c27820\",\"clientId\":\"8de5edc7-861a-4518-8490-7c04dd52b0b8\"},\"tkw\":{\"principalId\":\"be96138f-c134-4c5e-90fe-63b29dee5f75\",\"clientId\":\"dafc2419-3ac3-4a72-a4ba-89c36f1f0146\"},\"yamlbnse\":{\"principalId\":\"d61399b6-2903-417c-aaa3-1a0b06e4de6b\",\"clientId\":\"26cc3188-425c-4ba8-8f5c-661a9b381f1e\"},\"jjvpilguooqja\":{\"principalId\":\"b948bdf0-43fa-47a2-8133-b98e72b82b20\",\"clientId\":\"8b92a50d-181f-4f07-a511-a93b5e8c57af\"}}},\"location\":\"d\",\"tags\":{\"kjbsah\":\"ueio\",\"oebn\":\"tdtpdelqacslmo\",\"dirazf\":\"xofvcjk\",\"bmdujtmvcopexc\":\"xejw\"},\"id\":\"jurbuhhlkyqltqsr\",\"name\":\"gtuwkff\",\"type\":\"jk\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MobileNetworkManager manager =
            MobileNetworkManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PacketCoreControlPlane response =
            manager
                .packetCoreControlPlanes()
                .getByResourceGroupWithResponse("wrpqafgfugsnnf", "yetefyp", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("d", response.location());
        Assertions.assertEquals("ueio", response.tags().get("kjbsah"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals(DesiredInstallationState.INSTALLED, response.installation().desiredState());
        Assertions.assertEquals("owolbaui", response.sites().get(0).id());
        Assertions.assertEquals(PlatformType.THREE_P_AZURE_STACK_HCI, response.platform().type());
        Assertions.assertEquals("myccx", response.platform().azureStackEdgeDevice().id());
        Assertions.assertEquals("rd", response.platform().azureStackHciCluster().id());
        Assertions.assertEquals("xtxrdcqtjvidt", response.platform().connectedCluster().id());
        Assertions.assertEquals("epu", response.platform().customLocation().id());
        Assertions.assertEquals(CoreNetworkType.EPC_5GC, response.coreNetworkTechnology());
        Assertions.assertEquals("jtcvuwkasizies", response.version());
        Assertions.assertEquals("lx", response.controlPlaneAccessInterface().name());
        Assertions.assertEquals("rhwpus", response.controlPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("baqehgpdoh", response.controlPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("qatucoigebxnc", response.controlPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals(BillingSku.G0, response.sku());
        Assertions.assertEquals(2085427407, response.ueMtu());
        Assertions.assertEquals(AuthenticationType.PASSWORD, response.localDiagnosticsAccess().authenticationType());
        Assertions
            .assertEquals(
                "nwgfmxjgcgbjbgd", response.localDiagnosticsAccess().httpsServerCertificate().certificateUrl());
        Assertions.assertEquals("aquflqbctqha", response.diagnosticsUpload().storageAccountContainerUrl());
    }
}
