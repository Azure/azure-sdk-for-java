// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.ServiceInner;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.QosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.ServiceDataFlowTemplate;
import com.azure.resourcemanager.mobilenetwork.models.ServiceListResult;
import com.azure.resourcemanager.mobilenetwork.models.TrafficControlPermission;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServiceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleting\",\"servicePrecedence\":917318399,\"serviceQosPolicy\":{\"5qi\":2123873865,\"allocationAndRetentionPriorityLevel\":2076050898,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"maximumBitRate\":{\"uplink\":\"txhwgfws\",\"downlink\":\"tawc\"}},\"pccRules\":[{\"ruleName\":\"zbrhubskhudyg\",\"rulePrecedence\":859061140,\"ruleQosPolicy\":{\"maximumBitRate\":{\"uplink\":\"kkqfqjbvle\",\"downlink\":\"rfmluiqtq\"}},\"trafficControl\":\"Blocked\",\"serviceDataFlowTemplates\":[{\"templateName\":\"yvnqqybaryeuay\",\"direction\":\"Bidirectional\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"qabqgzslesjcb\",\"direction\":\"Bidirectional\",\"protocol\":[],\"remoteIpList\":[]}]},{\"ruleName\":\"rnntiewdjcv\",\"rulePrecedence\":284273475,\"ruleQosPolicy\":{\"maximumBitRate\":{\"uplink\":\"wr\",\"downlink\":\"ehwagoh\"}},\"trafficControl\":\"Enabled\",\"serviceDataFlowTemplates\":[{\"templateName\":\"kmr\",\"direction\":\"Bidirectional\",\"protocol\":[],\"remoteIpList\":[]}]},{\"ruleName\":\"mvvhmxtdrjfuta\",\"rulePrecedence\":344867697,\"ruleQosPolicy\":{\"maximumBitRate\":{\"uplink\":\"bj\",\"downlink\":\"ewzcjznmwcp\"}},\"trafficControl\":\"Blocked\",\"serviceDataFlowTemplates\":[{\"templateName\":\"adraufactkahzo\",\"direction\":\"Uplink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"jjziuxxpsh\",\"direction\":\"Uplink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"e\",\"direction\":\"Uplink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"lfg\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]}]}]},\"location\":\"ubkwdle\",\"tags\":{\"pjuohminyfl\":\"sutujba\"},\"id\":\"orwmduvwpklv\",\"name\":\"w\",\"type\":\"ygdxpgpqchis\"}],\"nextLink\":\"pnnbjc\"}")
            .toObject(ServiceListResult.class);
        Assertions.assertEquals("ubkwdle", model.value().get(0).location());
        Assertions.assertEquals("sutujba", model.value().get(0).tags().get("pjuohminyfl"));
        Assertions.assertEquals(917318399, model.value().get(0).servicePrecedence());
        Assertions.assertEquals(2123873865, model.value().get(0).serviceQosPolicy().fiveQi());
        Assertions.assertEquals(2076050898,
            model.value().get(0).serviceQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT,
            model.value().get(0).serviceQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            model.value().get(0).serviceQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("txhwgfws", model.value().get(0).serviceQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("tawc", model.value().get(0).serviceQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("zbrhubskhudyg", model.value().get(0).pccRules().get(0).ruleName());
        Assertions.assertEquals(859061140, model.value().get(0).pccRules().get(0).rulePrecedence());
        Assertions.assertEquals("kkqfqjbvle",
            model.value().get(0).pccRules().get(0).ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("rfmluiqtq",
            model.value().get(0).pccRules().get(0).ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.BLOCKED,
            model.value().get(0).pccRules().get(0).trafficControl());
        Assertions.assertEquals("yvnqqybaryeuay",
            model.value().get(0).pccRules().get(0).serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.BIDIRECTIONAL,
            model.value().get(0).pccRules().get(0).serviceDataFlowTemplates().get(0).direction());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceListResult model = new ServiceListResult().withValue(Arrays.asList(new ServiceInner()
            .withLocation("ubkwdle")
            .withTags(mapOf("pjuohminyfl", "sutujba"))
            .withServicePrecedence(917318399)
            .withServiceQosPolicy(new QosPolicy().withFiveQi(2123873865)
                .withAllocationAndRetentionPriorityLevel(2076050898)
                .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                .withMaximumBitRate(new Ambr().withUplink("txhwgfws").withDownlink("tawc")))
            .withPccRules(Arrays.asList(
                new PccRuleConfiguration()
                    .withRuleName("zbrhubskhudyg")
                    .withRulePrecedence(859061140)
                    .withRuleQosPolicy(new PccRuleQosPolicy()
                        .withMaximumBitRate(new Ambr().withUplink("kkqfqjbvle").withDownlink("rfmluiqtq")))
                    .withTrafficControl(TrafficControlPermission.BLOCKED)
                    .withServiceDataFlowTemplates(Arrays.asList(
                        new ServiceDataFlowTemplate().withTemplateName("yvnqqybaryeuay")
                            .withDirection(SdfDirection.BIDIRECTIONAL)
                            .withProtocol(Arrays.asList())
                            .withRemoteIpList(Arrays.asList()),
                        new ServiceDataFlowTemplate().withTemplateName("qabqgzslesjcb")
                            .withDirection(SdfDirection.BIDIRECTIONAL)
                            .withProtocol(Arrays.asList())
                            .withRemoteIpList(Arrays.asList()))),
                new PccRuleConfiguration().withRuleName("rnntiewdjcv")
                    .withRulePrecedence(284273475)
                    .withRuleQosPolicy(
                        new PccRuleQosPolicy().withMaximumBitRate(new Ambr().withUplink("wr").withDownlink("ehwagoh")))
                    .withTrafficControl(TrafficControlPermission.ENABLED)
                    .withServiceDataFlowTemplates(Arrays.asList(new ServiceDataFlowTemplate().withTemplateName("kmr")
                        .withDirection(SdfDirection.BIDIRECTIONAL)
                        .withProtocol(Arrays.asList())
                        .withRemoteIpList(Arrays.asList()))),
                new PccRuleConfiguration().withRuleName("mvvhmxtdrjfuta")
                    .withRulePrecedence(344867697)
                    .withRuleQosPolicy(new PccRuleQosPolicy()
                        .withMaximumBitRate(new Ambr().withUplink("bj").withDownlink("ewzcjznmwcp")))
                    .withTrafficControl(TrafficControlPermission.BLOCKED)
                    .withServiceDataFlowTemplates(Arrays.asList(
                        new ServiceDataFlowTemplate().withTemplateName("adraufactkahzo")
                            .withDirection(SdfDirection.UPLINK)
                            .withProtocol(Arrays.asList())
                            .withRemoteIpList(Arrays.asList()),
                        new ServiceDataFlowTemplate().withTemplateName("jjziuxxpsh")
                            .withDirection(SdfDirection.UPLINK)
                            .withProtocol(Arrays.asList())
                            .withRemoteIpList(Arrays.asList()),
                        new ServiceDataFlowTemplate().withTemplateName("e")
                            .withDirection(SdfDirection.UPLINK)
                            .withProtocol(Arrays.asList())
                            .withRemoteIpList(Arrays.asList()),
                        new ServiceDataFlowTemplate().withTemplateName("lfg")
                            .withDirection(SdfDirection.DOWNLINK)
                            .withProtocol(Arrays.asList())
                            .withRemoteIpList(Arrays.asList())))))));
        model = BinaryData.fromObject(model).toObject(ServiceListResult.class);
        Assertions.assertEquals("ubkwdle", model.value().get(0).location());
        Assertions.assertEquals("sutujba", model.value().get(0).tags().get("pjuohminyfl"));
        Assertions.assertEquals(917318399, model.value().get(0).servicePrecedence());
        Assertions.assertEquals(2123873865, model.value().get(0).serviceQosPolicy().fiveQi());
        Assertions.assertEquals(2076050898,
            model.value().get(0).serviceQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT,
            model.value().get(0).serviceQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            model.value().get(0).serviceQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("txhwgfws", model.value().get(0).serviceQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("tawc", model.value().get(0).serviceQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("zbrhubskhudyg", model.value().get(0).pccRules().get(0).ruleName());
        Assertions.assertEquals(859061140, model.value().get(0).pccRules().get(0).rulePrecedence());
        Assertions.assertEquals("kkqfqjbvle",
            model.value().get(0).pccRules().get(0).ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("rfmluiqtq",
            model.value().get(0).pccRules().get(0).ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.BLOCKED,
            model.value().get(0).pccRules().get(0).trafficControl());
        Assertions.assertEquals("yvnqqybaryeuay",
            model.value().get(0).pccRules().get(0).serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.BIDIRECTIONAL,
            model.value().get(0).pccRules().get(0).serviceDataFlowTemplates().get(0).direction());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
