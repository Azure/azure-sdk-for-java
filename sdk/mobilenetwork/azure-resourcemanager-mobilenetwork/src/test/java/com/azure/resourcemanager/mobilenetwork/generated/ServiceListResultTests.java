// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.ServiceInner;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.QosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.ServiceDataFlowTemplate;
import com.azure.resourcemanager.mobilenetwork.models.ServiceListResult;
import com.azure.resourcemanager.mobilenetwork.models.TrafficControlPermission;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServiceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"servicePrecedence\":508950619,\"serviceQosPolicy\":{\"5qi\":1482322760,\"allocationAndRetentionPriorityLevel\":968506113,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"maximumBitRate\":{\"uplink\":\"auyqncygupkv\",\"downlink\":\"p\"}},\"pccRules\":[{\"ruleName\":\"scw\",\"rulePrecedence\":1651652179,\"ruleQosPolicy\":{\"maximumBitRate\":{\"uplink\":\"pevzhfst\",\"downlink\":\"txhojujb\"}},\"trafficControl\":\"Blocked\",\"serviceDataFlowTemplates\":[{\"templateName\":\"mc\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"hixbjxyfwnyl\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"ool\",\"direction\":\"Uplink\",\"protocol\":[],\"remoteIpList\":[]}]},{\"ruleName\":\"tpkiwkkbnujry\",\"rulePrecedence\":429689436,\"ruleQosPolicy\":{\"maximumBitRate\":{\"uplink\":\"y\",\"downlink\":\"bfpncurdo\"}},\"trafficControl\":\"Enabled\",\"serviceDataFlowTemplates\":[{\"templateName\":\"thtywub\",\"direction\":\"Bidirectional\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"bihwqknfdnt\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]}]},{\"ruleName\":\"chrdgoihxumwcto\",\"rulePrecedence\":1097443126,\"ruleQosPolicy\":{\"maximumBitRate\":{\"uplink\":\"jl\",\"downlink\":\"udfdlwgg\"}},\"trafficControl\":\"Enabled\",\"serviceDataFlowTemplates\":[{\"templateName\":\"wtovvtgsein\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"iufxqknpir\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"epttwqmsniff\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"mqnrojlpijnkr\",\"direction\":\"Bidirectional\",\"protocol\":[],\"remoteIpList\":[]}]},{\"ruleName\":\"rddh\",\"rulePrecedence\":1110792389,\"ruleQosPolicy\":{\"maximumBitRate\":{\"uplink\":\"tizzronasxif\",\"downlink\":\"ozqyzh\"}},\"trafficControl\":\"Blocked\",\"serviceDataFlowTemplates\":[{\"templateName\":\"sgogczhonnxk\",\"direction\":\"Downlink\",\"protocol\":[],\"remoteIpList\":[]},{\"templateName\":\"gnyhmossxkkg\",\"direction\":\"Uplink\",\"protocol\":[],\"remoteIpList\":[]}]}]},\"location\":\"rghxjb\",\"tags\":{\"svbuswdvzyy\":\"xvcxgfrpdsofbshr\",\"awnopqgikyzirtxd\":\"ycnunvjsrtk\",\"ioilqukrydxtq\":\"uxzejntpsew\",\"ghhavgrvkffo\":\"ieoxorggufhyaomt\"},\"id\":\"jzhpjbibgjmfx\",\"name\":\"mv\",\"type\":\"cluyovwxnbkf\"}],\"nextLink\":\"zxscyhwzdgirujb\"}")
                .toObject(ServiceListResult.class);
        Assertions.assertEquals("rghxjb", model.value().get(0).location());
        Assertions.assertEquals("xvcxgfrpdsofbshr", model.value().get(0).tags().get("svbuswdvzyy"));
        Assertions.assertEquals(508950619, model.value().get(0).servicePrecedence());
        Assertions.assertEquals(1482322760, model.value().get(0).serviceQosPolicy().fiveQi());
        Assertions
            .assertEquals(968506113, model.value().get(0).serviceQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions
            .assertEquals(
                PreemptionCapability.MAY_PREEMPT, model.value().get(0).serviceQosPolicy().preemptionCapability());
        Assertions
            .assertEquals(
                PreemptionVulnerability.NOT_PREEMPTABLE,
                model.value().get(0).serviceQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("auyqncygupkv", model.value().get(0).serviceQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("p", model.value().get(0).serviceQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("scw", model.value().get(0).pccRules().get(0).ruleName());
        Assertions.assertEquals(1651652179, model.value().get(0).pccRules().get(0).rulePrecedence());
        Assertions
            .assertEquals("pevzhfst", model.value().get(0).pccRules().get(0).ruleQosPolicy().maximumBitRate().uplink());
        Assertions
            .assertEquals(
                "txhojujb", model.value().get(0).pccRules().get(0).ruleQosPolicy().maximumBitRate().downlink());
        Assertions
            .assertEquals(TrafficControlPermission.BLOCKED, model.value().get(0).pccRules().get(0).trafficControl());
        Assertions
            .assertEquals(
                "mc", model.value().get(0).pccRules().get(0).serviceDataFlowTemplates().get(0).templateName());
        Assertions
            .assertEquals(
                SdfDirection.DOWNLINK,
                model.value().get(0).pccRules().get(0).serviceDataFlowTemplates().get(0).direction());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceListResult model =
            new ServiceListResult()
                .withValue(
                    Arrays
                        .asList(
                            new ServiceInner()
                                .withLocation("rghxjb")
                                .withTags(
                                    mapOf(
                                        "svbuswdvzyy",
                                        "xvcxgfrpdsofbshr",
                                        "awnopqgikyzirtxd",
                                        "ycnunvjsrtk",
                                        "ioilqukrydxtq",
                                        "uxzejntpsew",
                                        "ghhavgrvkffo",
                                        "ieoxorggufhyaomt"))
                                .withServicePrecedence(508950619)
                                .withServiceQosPolicy(
                                    new QosPolicy()
                                        .withFiveQi(1482322760)
                                        .withAllocationAndRetentionPriorityLevel(968506113)
                                        .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                                        .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                                        .withMaximumBitRate(new Ambr().withUplink("auyqncygupkv").withDownlink("p")))
                                .withPccRules(
                                    Arrays
                                        .asList(
                                            new PccRuleConfiguration()
                                                .withRuleName("scw")
                                                .withRulePrecedence(1651652179)
                                                .withRuleQosPolicy(
                                                    new PccRuleQosPolicy()
                                                        .withMaximumBitRate(
                                                            new Ambr().withUplink("pevzhfst").withDownlink("txhojujb")))
                                                .withTrafficControl(TrafficControlPermission.BLOCKED)
                                                .withServiceDataFlowTemplates(
                                                    Arrays
                                                        .asList(
                                                            new ServiceDataFlowTemplate()
                                                                .withTemplateName("mc")
                                                                .withDirection(SdfDirection.DOWNLINK)
                                                                .withProtocol(Arrays.asList())
                                                                .withRemoteIpList(Arrays.asList()),
                                                            new ServiceDataFlowTemplate()
                                                                .withTemplateName("hixbjxyfwnyl")
                                                                .withDirection(SdfDirection.DOWNLINK)
                                                                .withProtocol(Arrays.asList())
                                                                .withRemoteIpList(Arrays.asList()),
                                                            new ServiceDataFlowTemplate()
                                                                .withTemplateName("ool")
                                                                .withDirection(SdfDirection.UPLINK)
                                                                .withProtocol(Arrays.asList())
                                                                .withRemoteIpList(Arrays.asList()))),
                                            new PccRuleConfiguration()
                                                .withRuleName("tpkiwkkbnujry")
                                                .withRulePrecedence(429689436)
                                                .withRuleQosPolicy(
                                                    new PccRuleQosPolicy()
                                                        .withMaximumBitRate(
                                                            new Ambr().withUplink("y").withDownlink("bfpncurdo")))
                                                .withTrafficControl(TrafficControlPermission.ENABLED)
                                                .withServiceDataFlowTemplates(
                                                    Arrays
                                                        .asList(
                                                            new ServiceDataFlowTemplate()
                                                                .withTemplateName("thtywub")
                                                                .withDirection(SdfDirection.BIDIRECTIONAL)
                                                                .withProtocol(Arrays.asList())
                                                                .withRemoteIpList(Arrays.asList()),
                                                            new ServiceDataFlowTemplate()
                                                                .withTemplateName("bihwqknfdnt")
                                                                .withDirection(SdfDirection.DOWNLINK)
                                                                .withProtocol(Arrays.asList())
                                                                .withRemoteIpList(Arrays.asList()))),
                                            new PccRuleConfiguration()
                                                .withRuleName("chrdgoihxumwcto")
                                                .withRulePrecedence(1097443126)
                                                .withRuleQosPolicy(
                                                    new PccRuleQosPolicy()
                                                        .withMaximumBitRate(
                                                            new Ambr().withUplink("jl").withDownlink("udfdlwgg")))
                                                .withTrafficControl(TrafficControlPermission.ENABLED)
                                                .withServiceDataFlowTemplates(
                                                    Arrays
                                                        .asList(
                                                            new ServiceDataFlowTemplate()
                                                                .withTemplateName("wtovvtgsein")
                                                                .withDirection(SdfDirection.DOWNLINK)
                                                                .withProtocol(Arrays.asList())
                                                                .withRemoteIpList(Arrays.asList()),
                                                            new ServiceDataFlowTemplate()
                                                                .withTemplateName("iufxqknpir")
                                                                .withDirection(SdfDirection.DOWNLINK)
                                                                .withProtocol(Arrays.asList())
                                                                .withRemoteIpList(Arrays.asList()),
                                                            new ServiceDataFlowTemplate()
                                                                .withTemplateName("epttwqmsniff")
                                                                .withDirection(SdfDirection.DOWNLINK)
                                                                .withProtocol(Arrays.asList())
                                                                .withRemoteIpList(Arrays.asList()),
                                                            new ServiceDataFlowTemplate()
                                                                .withTemplateName("mqnrojlpijnkr")
                                                                .withDirection(SdfDirection.BIDIRECTIONAL)
                                                                .withProtocol(Arrays.asList())
                                                                .withRemoteIpList(Arrays.asList()))),
                                            new PccRuleConfiguration()
                                                .withRuleName("rddh")
                                                .withRulePrecedence(1110792389)
                                                .withRuleQosPolicy(
                                                    new PccRuleQosPolicy()
                                                        .withMaximumBitRate(
                                                            new Ambr()
                                                                .withUplink("tizzronasxif")
                                                                .withDownlink("ozqyzh")))
                                                .withTrafficControl(TrafficControlPermission.BLOCKED)
                                                .withServiceDataFlowTemplates(
                                                    Arrays
                                                        .asList(
                                                            new ServiceDataFlowTemplate()
                                                                .withTemplateName("sgogczhonnxk")
                                                                .withDirection(SdfDirection.DOWNLINK)
                                                                .withProtocol(Arrays.asList())
                                                                .withRemoteIpList(Arrays.asList()),
                                                            new ServiceDataFlowTemplate()
                                                                .withTemplateName("gnyhmossxkkg")
                                                                .withDirection(SdfDirection.UPLINK)
                                                                .withProtocol(Arrays.asList())
                                                                .withRemoteIpList(Arrays.asList())))))));
        model = BinaryData.fromObject(model).toObject(ServiceListResult.class);
        Assertions.assertEquals("rghxjb", model.value().get(0).location());
        Assertions.assertEquals("xvcxgfrpdsofbshr", model.value().get(0).tags().get("svbuswdvzyy"));
        Assertions.assertEquals(508950619, model.value().get(0).servicePrecedence());
        Assertions.assertEquals(1482322760, model.value().get(0).serviceQosPolicy().fiveQi());
        Assertions
            .assertEquals(968506113, model.value().get(0).serviceQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions
            .assertEquals(
                PreemptionCapability.MAY_PREEMPT, model.value().get(0).serviceQosPolicy().preemptionCapability());
        Assertions
            .assertEquals(
                PreemptionVulnerability.NOT_PREEMPTABLE,
                model.value().get(0).serviceQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("auyqncygupkv", model.value().get(0).serviceQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("p", model.value().get(0).serviceQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("scw", model.value().get(0).pccRules().get(0).ruleName());
        Assertions.assertEquals(1651652179, model.value().get(0).pccRules().get(0).rulePrecedence());
        Assertions
            .assertEquals("pevzhfst", model.value().get(0).pccRules().get(0).ruleQosPolicy().maximumBitRate().uplink());
        Assertions
            .assertEquals(
                "txhojujb", model.value().get(0).pccRules().get(0).ruleQosPolicy().maximumBitRate().downlink());
        Assertions
            .assertEquals(TrafficControlPermission.BLOCKED, model.value().get(0).pccRules().get(0).trafficControl());
        Assertions
            .assertEquals(
                "mc", model.value().get(0).pccRules().get(0).serviceDataFlowTemplates().get(0).templateName());
        Assertions
            .assertEquals(
                SdfDirection.DOWNLINK,
                model.value().get(0).pccRules().get(0).serviceDataFlowTemplates().get(0).direction());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
