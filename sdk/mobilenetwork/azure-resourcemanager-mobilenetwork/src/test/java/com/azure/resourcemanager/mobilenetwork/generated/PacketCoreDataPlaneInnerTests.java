// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.PacketCoreDataPlaneInner;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PacketCoreDataPlaneInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PacketCoreDataPlaneInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Accepted\",\"userPlaneAccessInterface\":{\"name\":\"qqnvwpmq\",\"ipv4Address\":\"ruoujmk\",\"ipv4Subnet\":\"hwqytj\",\"ipv4Gateway\":\"bnw\"},\"userPlaneAccessVirtualIpv4Addresses\":[\"gdrjervnaenqpe\",\"indoygmifthnzd\",\"dslgnayqigynduh\",\"vhqlkthumaqo\"]},\"location\":\"gycdu\",\"tags\":{\"qlfmmdnbb\":\"tgccymvaolpss\"},\"id\":\"lzpswiydm\",\"name\":\"wyhzdx\",\"type\":\"sadbz\"}")
                .toObject(PacketCoreDataPlaneInner.class);
        Assertions.assertEquals("gycdu", model.location());
        Assertions.assertEquals("tgccymvaolpss", model.tags().get("qlfmmdnbb"));
        Assertions.assertEquals("qqnvwpmq", model.userPlaneAccessInterface().name());
        Assertions.assertEquals("ruoujmk", model.userPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("hwqytj", model.userPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("bnw", model.userPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals("gdrjervnaenqpe", model.userPlaneAccessVirtualIpv4Addresses().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PacketCoreDataPlaneInner model =
            new PacketCoreDataPlaneInner()
                .withLocation("gycdu")
                .withTags(mapOf("qlfmmdnbb", "tgccymvaolpss"))
                .withUserPlaneAccessInterface(
                    new InterfaceProperties()
                        .withName("qqnvwpmq")
                        .withIpv4Address("ruoujmk")
                        .withIpv4Subnet("hwqytj")
                        .withIpv4Gateway("bnw"))
                .withUserPlaneAccessVirtualIpv4Addresses(
                    Arrays.asList("gdrjervnaenqpe", "indoygmifthnzd", "dslgnayqigynduh", "vhqlkthumaqo"));
        model = BinaryData.fromObject(model).toObject(PacketCoreDataPlaneInner.class);
        Assertions.assertEquals("gycdu", model.location());
        Assertions.assertEquals("tgccymvaolpss", model.tags().get("qlfmmdnbb"));
        Assertions.assertEquals("qqnvwpmq", model.userPlaneAccessInterface().name());
        Assertions.assertEquals("ruoujmk", model.userPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("hwqytj", model.userPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("bnw", model.userPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals("gdrjervnaenqpe", model.userPlaneAccessVirtualIpv4Addresses().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
