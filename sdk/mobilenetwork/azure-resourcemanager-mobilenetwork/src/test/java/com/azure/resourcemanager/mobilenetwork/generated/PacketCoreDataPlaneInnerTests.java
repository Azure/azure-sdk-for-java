// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.PacketCoreDataPlaneInner;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PacketCoreDataPlaneInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PacketCoreDataPlaneInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Unknown\",\"userPlaneAccessInterface\":{\"name\":\"dsjnka\",\"ipv4Address\":\"utiiswacf\",\"ipv4Subnet\":\"dkzzewkfvhqcrail\",\"ipv4Gateway\":\"n\"}},\"location\":\"fuflrwdmhdlx\",\"tags\":{\"cnihgwqapnedgfbc\":\"xsaga\",\"dcvd\":\"kcvqvpke\",\"pcjwv\":\"hvoodsotbobzd\",\"mutwuoe\":\"hdldwmgxcxrsl\"},\"id\":\"rpkhjwn\",\"name\":\"yqsluic\",\"type\":\"dggkzzlvmbmpa\"}")
                .toObject(PacketCoreDataPlaneInner.class);
        Assertions.assertEquals("fuflrwdmhdlx", model.location());
        Assertions.assertEquals("xsaga", model.tags().get("cnihgwqapnedgfbc"));
        Assertions.assertEquals("dsjnka", model.userPlaneAccessInterface().name());
        Assertions.assertEquals("utiiswacf", model.userPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("dkzzewkfvhqcrail", model.userPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("n", model.userPlaneAccessInterface().ipv4Gateway());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PacketCoreDataPlaneInner model =
            new PacketCoreDataPlaneInner()
                .withLocation("fuflrwdmhdlx")
                .withTags(
                    mapOf(
                        "cnihgwqapnedgfbc",
                        "xsaga",
                        "dcvd",
                        "kcvqvpke",
                        "pcjwv",
                        "hvoodsotbobzd",
                        "mutwuoe",
                        "hdldwmgxcxrsl"))
                .withUserPlaneAccessInterface(
                    new InterfaceProperties()
                        .withName("dsjnka")
                        .withIpv4Address("utiiswacf")
                        .withIpv4Subnet("dkzzewkfvhqcrail")
                        .withIpv4Gateway("n"));
        model = BinaryData.fromObject(model).toObject(PacketCoreDataPlaneInner.class);
        Assertions.assertEquals("fuflrwdmhdlx", model.location());
        Assertions.assertEquals("xsaga", model.tags().get("cnihgwqapnedgfbc"));
        Assertions.assertEquals("dsjnka", model.userPlaneAccessInterface().name());
        Assertions.assertEquals("utiiswacf", model.userPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("dkzzewkfvhqcrail", model.userPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("n", model.userPlaneAccessInterface().ipv4Gateway());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
