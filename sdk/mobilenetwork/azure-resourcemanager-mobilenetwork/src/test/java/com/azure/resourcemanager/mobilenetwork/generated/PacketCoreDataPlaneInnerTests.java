// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.PacketCoreDataPlaneInner;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PacketCoreDataPlaneInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PacketCoreDataPlaneInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Deleted\",\"userPlaneAccessInterface\":{\"name\":\"nqpeh\",\"ipv4Address\":\"doy\",\"ipv4Subnet\":\"ifthnz\",\"ipv4Gateway\":\"dslgnayqigynduh\"},\"userPlaneAccessVirtualIpv4Addresses\":[\"qlkth\",\"maqolbgycduie\",\"tgccymvaolpss\"]},\"location\":\"lfmmdnbbglzpswi\",\"tags\":{\"bzmnvdfznud\":\"cwyhzdxssa\",\"xzb\":\"od\",\"dzu\":\"cblylpstdbhhxsr\",\"fiwjmygtdssls\":\"erscdntne\"},\"id\":\"tmweriofzpyq\",\"name\":\"emwabnet\",\"type\":\"hhszh\"}")
            .toObject(PacketCoreDataPlaneInner.class);
        Assertions.assertEquals("lfmmdnbbglzpswi", model.location());
        Assertions.assertEquals("cwyhzdxssa", model.tags().get("bzmnvdfznud"));
        Assertions.assertEquals("nqpeh", model.userPlaneAccessInterface().name());
        Assertions.assertEquals("doy", model.userPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("ifthnz", model.userPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("dslgnayqigynduh", model.userPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals("qlkth", model.userPlaneAccessVirtualIpv4Addresses().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PacketCoreDataPlaneInner model = new PacketCoreDataPlaneInner().withLocation("lfmmdnbbglzpswi")
            .withTags(
                mapOf("bzmnvdfznud", "cwyhzdxssa", "xzb", "od", "dzu", "cblylpstdbhhxsr", "fiwjmygtdssls", "erscdntne"))
            .withUserPlaneAccessInterface(new InterfaceProperties().withName("nqpeh").withIpv4Address("doy")
                .withIpv4Subnet("ifthnz").withIpv4Gateway("dslgnayqigynduh"))
            .withUserPlaneAccessVirtualIpv4Addresses(Arrays.asList("qlkth", "maqolbgycduie", "tgccymvaolpss"));
        model = BinaryData.fromObject(model).toObject(PacketCoreDataPlaneInner.class);
        Assertions.assertEquals("lfmmdnbbglzpswi", model.location());
        Assertions.assertEquals("cwyhzdxssa", model.tags().get("bzmnvdfznud"));
        Assertions.assertEquals("nqpeh", model.userPlaneAccessInterface().name());
        Assertions.assertEquals("doy", model.userPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("ifthnz", model.userPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("dslgnayqigynduh", model.userPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals("qlkth", model.userPlaneAccessVirtualIpv4Addresses().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
