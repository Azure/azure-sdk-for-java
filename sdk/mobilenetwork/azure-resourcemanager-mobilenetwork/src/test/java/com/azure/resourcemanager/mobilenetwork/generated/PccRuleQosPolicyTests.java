// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import org.junit.jupiter.api.Assertions;

public final class PccRuleQosPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PccRuleQosPolicy model = BinaryData.fromString(
            "{\"guaranteedBitRate\":{\"uplink\":\"zxscyhwzdgirujb\",\"downlink\":\"bomvzzbtdcqv\"},\"5qi\":1569127875,\"allocationAndRetentionPriorityLevel\":850066644,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"l\",\"downlink\":\"dshf\"}}")
            .toObject(PccRuleQosPolicy.class);
        Assertions.assertEquals(1569127875, model.fiveQi());
        Assertions.assertEquals(850066644, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals("l", model.maximumBitRate().uplink());
        Assertions.assertEquals("dshf", model.maximumBitRate().downlink());
        Assertions.assertEquals("zxscyhwzdgirujb", model.guaranteedBitRate().uplink());
        Assertions.assertEquals("bomvzzbtdcqv", model.guaranteedBitRate().downlink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PccRuleQosPolicy model = new PccRuleQosPolicy().withFiveQi(1569127875)
            .withAllocationAndRetentionPriorityLevel(850066644)
            .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
            .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
            .withMaximumBitRate(new Ambr().withUplink("l").withDownlink("dshf"))
            .withGuaranteedBitRate(new Ambr().withUplink("zxscyhwzdgirujb").withDownlink("bomvzzbtdcqv"));
        model = BinaryData.fromObject(model).toObject(PccRuleQosPolicy.class);
        Assertions.assertEquals(1569127875, model.fiveQi());
        Assertions.assertEquals(850066644, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals("l", model.maximumBitRate().uplink());
        Assertions.assertEquals("dshf", model.maximumBitRate().downlink());
        Assertions.assertEquals("zxscyhwzdgirujb", model.guaranteedBitRate().uplink());
        Assertions.assertEquals("bomvzzbtdcqv", model.guaranteedBitRate().downlink());
    }
}
