// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import org.junit.jupiter.api.Assertions;

public final class PccRuleQosPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PccRuleQosPolicy model =
            BinaryData
                .fromString(
                    "{\"guaranteedBitRate\":{\"uplink\":\"hhahhxvrhmzkwpjg\",\"downlink\":\"wspughftqsxhqx\"},\"5qi\":318834407,\"allocationAndRetentionPriorityLevel\":649615996,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"igrjguufzdm\",\"downlink\":\"yqtfihwh\"}}")
                .toObject(PccRuleQosPolicy.class);
        Assertions.assertEquals(318834407, model.fiveQi());
        Assertions.assertEquals(649615996, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals("igrjguufzdm", model.maximumBitRate().uplink());
        Assertions.assertEquals("yqtfihwh", model.maximumBitRate().downlink());
        Assertions.assertEquals("hhahhxvrhmzkwpjg", model.guaranteedBitRate().uplink());
        Assertions.assertEquals("wspughftqsxhqx", model.guaranteedBitRate().downlink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PccRuleQosPolicy model =
            new PccRuleQosPolicy()
                .withFiveQi(318834407)
                .withAllocationAndRetentionPriorityLevel(649615996)
                .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                .withMaximumBitRate(new Ambr().withUplink("igrjguufzdm").withDownlink("yqtfihwh"))
                .withGuaranteedBitRate(new Ambr().withUplink("hhahhxvrhmzkwpjg").withDownlink("wspughftqsxhqx"));
        model = BinaryData.fromObject(model).toObject(PccRuleQosPolicy.class);
        Assertions.assertEquals(318834407, model.fiveQi());
        Assertions.assertEquals(649615996, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals("igrjguufzdm", model.maximumBitRate().uplink());
        Assertions.assertEquals("yqtfihwh", model.maximumBitRate().downlink());
        Assertions.assertEquals("hhahhxvrhmzkwpjg", model.guaranteedBitRate().uplink());
        Assertions.assertEquals("wspughftqsxhqx", model.guaranteedBitRate().downlink());
    }
}
