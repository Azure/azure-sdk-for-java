// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import org.junit.jupiter.api.Assertions;

public final class PccRuleQosPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PccRuleQosPolicy model = BinaryData.fromString(
            "{\"guaranteedBitRate\":{\"uplink\":\"k\",\"downlink\":\"qumiek\"},\"5qi\":1035067368,\"allocationAndRetentionPriorityLevel\":697538658,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"maximumBitRate\":{\"uplink\":\"fjhdg\",\"downlink\":\"gge\"}}")
            .toObject(PccRuleQosPolicy.class);
        Assertions.assertEquals(1035067368, model.fiveQi());
        Assertions.assertEquals(697538658, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals("fjhdg", model.maximumBitRate().uplink());
        Assertions.assertEquals("gge", model.maximumBitRate().downlink());
        Assertions.assertEquals("k", model.guaranteedBitRate().uplink());
        Assertions.assertEquals("qumiek", model.guaranteedBitRate().downlink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PccRuleQosPolicy model
            = new PccRuleQosPolicy().withFiveQi(1035067368).withAllocationAndRetentionPriorityLevel(697538658)
                .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                .withMaximumBitRate(new Ambr().withUplink("fjhdg").withDownlink("gge"))
                .withGuaranteedBitRate(new Ambr().withUplink("k").withDownlink("qumiek"));
        model = BinaryData.fromObject(model).toObject(PccRuleQosPolicy.class);
        Assertions.assertEquals(1035067368, model.fiveQi());
        Assertions.assertEquals(697538658, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals("fjhdg", model.maximumBitRate().uplink());
        Assertions.assertEquals("gge", model.maximumBitRate().downlink());
        Assertions.assertEquals("k", model.guaranteedBitRate().uplink());
        Assertions.assertEquals("qumiek", model.guaranteedBitRate().downlink());
    }
}
