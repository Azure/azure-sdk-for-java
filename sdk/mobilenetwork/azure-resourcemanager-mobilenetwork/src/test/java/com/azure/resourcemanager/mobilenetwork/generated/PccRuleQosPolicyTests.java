// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import org.junit.jupiter.api.Assertions;

public final class PccRuleQosPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PccRuleQosPolicy model = BinaryData.fromString(
            "{\"guaranteedBitRate\":{\"uplink\":\"jw\",\"downlink\":\"w\"},\"5qi\":303130680,\"allocationAndRetentionPriorityLevel\":173191465,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"mojmsvpkjprvkw\",\"downlink\":\"fz\"}}")
            .toObject(PccRuleQosPolicy.class);
        Assertions.assertEquals(303130680, model.fiveQi());
        Assertions.assertEquals(173191465, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals("mojmsvpkjprvkw", model.maximumBitRate().uplink());
        Assertions.assertEquals("fz", model.maximumBitRate().downlink());
        Assertions.assertEquals("jw", model.guaranteedBitRate().uplink());
        Assertions.assertEquals("w", model.guaranteedBitRate().downlink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PccRuleQosPolicy model = new PccRuleQosPolicy().withFiveQi(303130680)
            .withAllocationAndRetentionPriorityLevel(173191465)
            .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
            .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
            .withMaximumBitRate(new Ambr().withUplink("mojmsvpkjprvkw").withDownlink("fz"))
            .withGuaranteedBitRate(new Ambr().withUplink("jw").withDownlink("w"));
        model = BinaryData.fromObject(model).toObject(PccRuleQosPolicy.class);
        Assertions.assertEquals(303130680, model.fiveQi());
        Assertions.assertEquals(173191465, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals("mojmsvpkjprvkw", model.maximumBitRate().uplink());
        Assertions.assertEquals("fz", model.maximumBitRate().downlink());
        Assertions.assertEquals("jw", model.guaranteedBitRate().uplink());
        Assertions.assertEquals("w", model.guaranteedBitRate().downlink());
    }
}
