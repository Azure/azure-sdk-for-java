// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.PacketCoreControlPlanePropertiesFormat;
import com.azure.resourcemanager.mobilenetwork.models.AuthenticationType;
import com.azure.resourcemanager.mobilenetwork.models.AzureStackEdgeDeviceResourceId;
import com.azure.resourcemanager.mobilenetwork.models.AzureStackHciClusterResourceId;
import com.azure.resourcemanager.mobilenetwork.models.BillingSku;
import com.azure.resourcemanager.mobilenetwork.models.ConnectedClusterResourceId;
import com.azure.resourcemanager.mobilenetwork.models.CoreNetworkType;
import com.azure.resourcemanager.mobilenetwork.models.CustomLocationResourceId;
import com.azure.resourcemanager.mobilenetwork.models.DesiredInstallationState;
import com.azure.resourcemanager.mobilenetwork.models.DiagnosticsUploadConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.HttpsServerCertificate;
import com.azure.resourcemanager.mobilenetwork.models.Installation;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import com.azure.resourcemanager.mobilenetwork.models.LocalDiagnosticsAccessConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PlatformConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PlatformType;
import com.azure.resourcemanager.mobilenetwork.models.SiteResourceId;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PacketCoreControlPlanePropertiesFormatTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PacketCoreControlPlanePropertiesFormat model =
            BinaryData
                .fromString(
                    "{\"provisioningState\":\"Accepted\",\"installation\":{\"desiredState\":\"Installed\",\"state\":\"Updating\",\"reinstallRequired\":\"Required\",\"reasons\":[\"NoAttachedDataNetworks\",\"NoSlices\",\"NoSlices\",\"NoAttachedDataNetworks\"],\"operation\":{\"id\":\"k\"}},\"sites\":[{\"id\":\"henbtkcxywnytn\"},{\"id\":\"synlqidybyxczfc\"},{\"id\":\"haaxdbabphl\"},{\"id\":\"rqlfktsthsucocmn\"}],\"platform\":{\"type\":\"3P-AZURE-STACK-HCI\",\"azureStackEdgeDevice\":{\"id\":\"zt\"},\"azureStackEdgeDevices\":[{\"id\":\"wwrq\"},{\"id\":\"uedck\"}],\"azureStackHciCluster\":{\"id\":\"wbiexzfey\"},\"connectedCluster\":{\"id\":\"axibxujw\"},\"customLocation\":{\"id\":\"qwalmuzyoxaepd\"}},\"coreNetworkTechnology\":\"EPC"
                        + " + 5GC\",\"version\":\"ncuxrhdwb\",\"installedVersion\":\"xbniwdjs\",\"rollbackVersion\":\"tsdbpgn\",\"controlPlaneAccessInterface\":{\"name\":\"txhp\",\"ipv4Address\":\"bzpfzab\",\"ipv4Subnet\":\"cuh\",\"ipv4Gateway\":\"tcty\"},\"sku\":\"G2\",\"ueMtu\":2142473497,\"localDiagnosticsAccess\":{\"authenticationType\":\"Password\",\"httpsServerCertificate\":{\"certificateUrl\":\"ovplw\",\"provisioning\":{\"state\":\"Failed\",\"reason\":\"yuguosvmkfssx\"}}},\"diagnosticsUpload\":{\"storageAccountContainerUrl\":\"kkfpl\"},\"interopSettings\":\"datagsxnkjzkdeslpv\"}")
                .toObject(PacketCoreControlPlanePropertiesFormat.class);
        Assertions.assertEquals(DesiredInstallationState.INSTALLED, model.installation().desiredState());
        Assertions.assertEquals("henbtkcxywnytn", model.sites().get(0).id());
        Assertions.assertEquals(PlatformType.THREE_P_AZURE_STACK_HCI, model.platform().type());
        Assertions.assertEquals("zt", model.platform().azureStackEdgeDevice().id());
        Assertions.assertEquals("wbiexzfey", model.platform().azureStackHciCluster().id());
        Assertions.assertEquals("axibxujw", model.platform().connectedCluster().id());
        Assertions.assertEquals("qwalmuzyoxaepd", model.platform().customLocation().id());
        Assertions.assertEquals(CoreNetworkType.EPC_5GC, model.coreNetworkTechnology());
        Assertions.assertEquals("ncuxrhdwb", model.version());
        Assertions.assertEquals("txhp", model.controlPlaneAccessInterface().name());
        Assertions.assertEquals("bzpfzab", model.controlPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("cuh", model.controlPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("tcty", model.controlPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals(BillingSku.G2, model.sku());
        Assertions.assertEquals(2142473497, model.ueMtu());
        Assertions.assertEquals(AuthenticationType.PASSWORD, model.localDiagnosticsAccess().authenticationType());
        Assertions.assertEquals("ovplw", model.localDiagnosticsAccess().httpsServerCertificate().certificateUrl());
        Assertions.assertEquals("kkfpl", model.diagnosticsUpload().storageAccountContainerUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PacketCoreControlPlanePropertiesFormat model =
            new PacketCoreControlPlanePropertiesFormat()
                .withInstallation(new Installation().withDesiredState(DesiredInstallationState.INSTALLED))
                .withSites(
                    Arrays
                        .asList(
                            new SiteResourceId().withId("henbtkcxywnytn"),
                            new SiteResourceId().withId("synlqidybyxczfc"),
                            new SiteResourceId().withId("haaxdbabphl"),
                            new SiteResourceId().withId("rqlfktsthsucocmn")))
                .withPlatform(
                    new PlatformConfiguration()
                        .withType(PlatformType.THREE_P_AZURE_STACK_HCI)
                        .withAzureStackEdgeDevice(new AzureStackEdgeDeviceResourceId().withId("zt"))
                        .withAzureStackHciCluster(new AzureStackHciClusterResourceId().withId("wbiexzfey"))
                        .withConnectedCluster(new ConnectedClusterResourceId().withId("axibxujw"))
                        .withCustomLocation(new CustomLocationResourceId().withId("qwalmuzyoxaepd")))
                .withCoreNetworkTechnology(CoreNetworkType.EPC_5GC)
                .withVersion("ncuxrhdwb")
                .withControlPlaneAccessInterface(
                    new InterfaceProperties()
                        .withName("txhp")
                        .withIpv4Address("bzpfzab")
                        .withIpv4Subnet("cuh")
                        .withIpv4Gateway("tcty"))
                .withSku(BillingSku.G2)
                .withUeMtu(2142473497)
                .withLocalDiagnosticsAccess(
                    new LocalDiagnosticsAccessConfiguration()
                        .withAuthenticationType(AuthenticationType.PASSWORD)
                        .withHttpsServerCertificate(new HttpsServerCertificate().withCertificateUrl("ovplw")))
                .withDiagnosticsUpload(new DiagnosticsUploadConfiguration().withStorageAccountContainerUrl("kkfpl"))
                .withInteropSettings("datagsxnkjzkdeslpv");
        model = BinaryData.fromObject(model).toObject(PacketCoreControlPlanePropertiesFormat.class);
        Assertions.assertEquals(DesiredInstallationState.INSTALLED, model.installation().desiredState());
        Assertions.assertEquals("henbtkcxywnytn", model.sites().get(0).id());
        Assertions.assertEquals(PlatformType.THREE_P_AZURE_STACK_HCI, model.platform().type());
        Assertions.assertEquals("zt", model.platform().azureStackEdgeDevice().id());
        Assertions.assertEquals("wbiexzfey", model.platform().azureStackHciCluster().id());
        Assertions.assertEquals("axibxujw", model.platform().connectedCluster().id());
        Assertions.assertEquals("qwalmuzyoxaepd", model.platform().customLocation().id());
        Assertions.assertEquals(CoreNetworkType.EPC_5GC, model.coreNetworkTechnology());
        Assertions.assertEquals("ncuxrhdwb", model.version());
        Assertions.assertEquals("txhp", model.controlPlaneAccessInterface().name());
        Assertions.assertEquals("bzpfzab", model.controlPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("cuh", model.controlPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("tcty", model.controlPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals(BillingSku.G2, model.sku());
        Assertions.assertEquals(2142473497, model.ueMtu());
        Assertions.assertEquals(AuthenticationType.PASSWORD, model.localDiagnosticsAccess().authenticationType());
        Assertions.assertEquals("ovplw", model.localDiagnosticsAccess().httpsServerCertificate().certificateUrl());
        Assertions.assertEquals("kkfpl", model.diagnosticsUpload().storageAccountContainerUrl());
    }
}
