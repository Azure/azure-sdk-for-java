// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.ServiceDataFlowTemplate;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ServiceDataFlowTemplateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceDataFlowTemplate model =
            BinaryData
                .fromString(
                    "{\"templateName\":\"otzi\",\"direction\":\"Uplink\",\"protocol\":[\"mvpp\",\"o\",\"zqzudph\",\"amvdkfwynwcvtbv\"],\"remoteIpList\":[\"yhmtnvyqiat\",\"zwpcnpwzcjaesg\",\"v\",\"ccyajg\"],\"ports\":[\"hwyg\",\"lvdnkfx\",\"semdwzrmu\",\"apfcqdpsq\"]}")
                .toObject(ServiceDataFlowTemplate.class);
        Assertions.assertEquals("otzi", model.templateName());
        Assertions.assertEquals(SdfDirection.UPLINK, model.direction());
        Assertions.assertEquals("mvpp", model.protocol().get(0));
        Assertions.assertEquals("yhmtnvyqiat", model.remoteIpList().get(0));
        Assertions.assertEquals("hwyg", model.ports().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceDataFlowTemplate model =
            new ServiceDataFlowTemplate()
                .withTemplateName("otzi")
                .withDirection(SdfDirection.UPLINK)
                .withProtocol(Arrays.asList("mvpp", "o", "zqzudph", "amvdkfwynwcvtbv"))
                .withRemoteIpList(Arrays.asList("yhmtnvyqiat", "zwpcnpwzcjaesg", "v", "ccyajg"))
                .withPorts(Arrays.asList("hwyg", "lvdnkfx", "semdwzrmu", "apfcqdpsq"));
        model = BinaryData.fromObject(model).toObject(ServiceDataFlowTemplate.class);
        Assertions.assertEquals("otzi", model.templateName());
        Assertions.assertEquals(SdfDirection.UPLINK, model.direction());
        Assertions.assertEquals("mvpp", model.protocol().get(0));
        Assertions.assertEquals("yhmtnvyqiat", model.remoteIpList().get(0));
        Assertions.assertEquals("hwyg", model.ports().get(0));
    }
}
