// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.ServiceDataFlowTemplate;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ServiceDataFlowTemplateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceDataFlowTemplate model =
            BinaryData
                .fromString(
                    "{\"templateName\":\"wkpnbsaz\",\"direction\":\"Downlink\",\"protocol\":[\"oqkag\",\"hsxttaugzxnf\",\"azpxdtnkdmkqjjl\"],\"remoteIpList\":[\"envrkpyouaibrebq\",\"aysjkixqtnqttez\"],\"ports\":[\"ffiakp\",\"pqqmted\"]}")
                .toObject(ServiceDataFlowTemplate.class);
        Assertions.assertEquals("wkpnbsaz", model.templateName());
        Assertions.assertEquals(SdfDirection.DOWNLINK, model.direction());
        Assertions.assertEquals("oqkag", model.protocol().get(0));
        Assertions.assertEquals("envrkpyouaibrebq", model.remoteIpList().get(0));
        Assertions.assertEquals("ffiakp", model.ports().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceDataFlowTemplate model =
            new ServiceDataFlowTemplate()
                .withTemplateName("wkpnbsaz")
                .withDirection(SdfDirection.DOWNLINK)
                .withProtocol(Arrays.asList("oqkag", "hsxttaugzxnf", "azpxdtnkdmkqjjl"))
                .withRemoteIpList(Arrays.asList("envrkpyouaibrebq", "aysjkixqtnqttez"))
                .withPorts(Arrays.asList("ffiakp", "pqqmted"));
        model = BinaryData.fromObject(model).toObject(ServiceDataFlowTemplate.class);
        Assertions.assertEquals("wkpnbsaz", model.templateName());
        Assertions.assertEquals(SdfDirection.DOWNLINK, model.direction());
        Assertions.assertEquals("oqkag", model.protocol().get(0));
        Assertions.assertEquals("envrkpyouaibrebq", model.remoteIpList().get(0));
        Assertions.assertEquals("ffiakp", model.ports().get(0));
    }
}
