// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AsyncOperationStatus;
import com.azure.resourcemanager.mobilenetwork.models.SimDeleteList;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SimsBulkDeleteMockTests {
    @Test
    public void testBulkDelete() throws Exception {
        String responseStr
            = "{\"id\":\"anc\",\"name\":\"xxqcwgaxf\",\"status\":\"vaknokzwjj\",\"resourceId\":\"ltixldzyyfytpq\",\"startTime\":\"2021-04-28T14:44Z\",\"endTime\":\"2021-11-09T20:29:56Z\",\"percentComplete\":14.258834353690963,\"properties\":\"dataivyqlkjuvsmbmsl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AsyncOperationStatus response = manager.sims()
            .bulkDelete("bqbnaomhjrmkuh", "axljal", new SimDeleteList().withSims(Arrays.asList("hcjmo")),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("anc", response.id());
        Assertions.assertEquals("xxqcwgaxf", response.name());
        Assertions.assertEquals("vaknokzwjj", response.status());
        Assertions.assertEquals("ltixldzyyfytpq", response.resourceId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-28T14:44Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-09T20:29:56Z"), response.endTime());
        Assertions.assertEquals(14.258834353690963D, response.percentComplete());
    }
}
