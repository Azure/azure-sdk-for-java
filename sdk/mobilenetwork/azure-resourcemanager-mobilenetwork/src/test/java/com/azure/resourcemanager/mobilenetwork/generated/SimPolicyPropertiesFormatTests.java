// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.SimPolicyPropertiesFormat;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.PduSessionType;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.ServiceResourceId;
import com.azure.resourcemanager.mobilenetwork.models.SliceConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.SliceResourceId;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SimPolicyPropertiesFormatTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SimPolicyPropertiesFormat model = BinaryData.fromString(
            "{\"provisioningState\":\"Succeeded\",\"siteProvisioningState\":{\"spave\":\"Deleting\",\"r\":\"Adding\",\"bunzozudh\":\"Failed\"},\"ueAmbr\":{\"uplink\":\"xg\",\"downlink\":\"moy\"},\"defaultSlice\":{\"id\":\"cdyuibhmfdnbzyd\"},\"rfspIndex\":1872796730,\"registrationTimer\":1709322147,\"sliceConfigurations\":[{\"slice\":{\"id\":\"naeo\"},\"defaultDataNetwork\":{\"id\":\"srvhmgorffuki\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"vwmzhwplefaxvxil\"},\"sessionAmbr\":{\"uplink\":\"btgn\",\"downlink\":\"nzeyqxtjj\"},\"5qi\":715633855,\"allocationAndRetentionPriorityLevel\":2051044475,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv6\",\"IPv6\"],\"allowedServices\":[{\"id\":\"beesmieknlra\"},{\"id\":\"iaa\"}],\"maximumNumberOfBufferedPackets\":1541326221},{\"dataNetwork\":{\"id\":\"agy\"},\"sessionAmbr\":{\"uplink\":\"wqfbylyrfgiagt\",\"downlink\":\"ojocqwogf\"},\"5qi\":1301116778,\"allocationAndRetentionPriorityLevel\":2065861659,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"defaultSessionType\":\"IPv6\",\"additionalAllowedSessionTypes\":[\"IPv6\",\"IPv4\",\"IPv4\",\"IPv6\"],\"allowedServices\":[{\"id\":\"sbtkadpysownbtgk\"},{\"id\":\"u\"}],\"maximumNumberOfBufferedPackets\":1343904651},{\"dataNetwork\":{\"id\":\"qctojcmisof\"},\"sessionAmbr\":{\"uplink\":\"eypefojyqd\",\"downlink\":\"cuplcplcwkhih\"},\"5qi\":184216647,\"allocationAndRetentionPriorityLevel\":1075361134,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv6\",\"IPv4\",\"IPv4\"],\"allowedServices\":[{\"id\":\"cjhfgmvecactxmw\"},{\"id\":\"teyowclu\"}],\"maximumNumberOfBufferedPackets\":1896348924}]},{\"slice\":{\"id\":\"ekqvgqouwif\"},\"defaultDataNetwork\":{\"id\":\"mpjw\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"vqikfxcvhrfsphu\"},\"sessionAmbr\":{\"uplink\":\"grttikteusqczk\",\"downlink\":\"yklxubyjaffmmfbl\"},\"5qi\":1534498660,\"allocationAndRetentionPriorityLevel\":982758961,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv6\"],\"allowedServices\":[{\"id\":\"etttwgdslqxihhr\"},{\"id\":\"ooizqseyp\"}],\"maximumNumberOfBufferedPackets\":145023209},{\"dataNetwork\":{\"id\":\"tcxapzhyrpetogeb\"},\"sessionAmbr\":{\"uplink\":\"oxslh\",\"downlink\":\"nhl\"},\"5qi\":1064191938,\"allocationAndRetentionPriorityLevel\":413797833,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv6\",\"IPv6\"],\"allowedServices\":[{\"id\":\"ehvvib\"},{\"id\":\"xjjs\"},{\"id\":\"oqbeitpkxzt\"},{\"id\":\"oobklftidgfcwq\"}],\"maximumNumberOfBufferedPackets\":817120127},{\"dataNetwork\":{\"id\":\"maqxzhemjyh\"},\"sessionAmbr\":{\"uplink\":\"hujswtwkozzwcul\",\"downlink\":\"bawpfajnjwltlwt\"},\"5qi\":795579219,\"allocationAndRetentionPriorityLevel\":1385863144,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"defaultSessionType\":\"IPv6\",\"additionalAllowedSessionTypes\":[\"IPv6\",\"IPv4\",\"IPv4\",\"IPv4\"],\"allowedServices\":[{\"id\":\"rpoaimlnwi\"}],\"maximumNumberOfBufferedPackets\":1776733764}]}]}")
            .toObject(SimPolicyPropertiesFormat.class);
        Assertions.assertEquals("xg", model.ueAmbr().uplink());
        Assertions.assertEquals("moy", model.ueAmbr().downlink());
        Assertions.assertEquals("cdyuibhmfdnbzyd", model.defaultSlice().id());
        Assertions.assertEquals(1872796730, model.rfspIndex());
        Assertions.assertEquals(1709322147, model.registrationTimer());
        Assertions.assertEquals("naeo", model.sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("srvhmgorffuki", model.sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("vwmzhwplefaxvxil",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("btgn",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("nzeyqxtjj",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().downlink());
        Assertions.assertEquals(715633855,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).fiveQi());
        Assertions.assertEquals(2051044475,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV4,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV6,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .additionalAllowedSessionTypes()
                .get(0));
        Assertions.assertEquals("beesmieknlra",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).allowedServices().get(0).id());
        Assertions.assertEquals(1541326221,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).maximumNumberOfBufferedPackets());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SimPolicyPropertiesFormat model
            = new SimPolicyPropertiesFormat().withUeAmbr(new Ambr().withUplink("xg").withDownlink("moy"))
                .withDefaultSlice(new SliceResourceId().withId("cdyuibhmfdnbzyd"))
                .withRfspIndex(1872796730)
                .withRegistrationTimer(1709322147)
                .withSliceConfigurations(
                    Arrays
                        .asList(
                            new SliceConfiguration().withSlice(new SliceResourceId().withId("naeo"))
                                .withDefaultDataNetwork(new DataNetworkResourceId().withId("srvhmgorffuki"))
                                .withDataNetworkConfigurations(
                                    Arrays
                                        .asList(
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("vwmzhwplefaxvxil"))
                                                .withSessionAmbr(
                                                    new Ambr().withUplink("btgn").withDownlink("nzeyqxtjj"))
                                                .withFiveQi(715633855)
                                                .withAllocationAndRetentionPriorityLevel(2051044475)
                                                .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                                                .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                                                .withDefaultSessionType(PduSessionType.IPV4)
                                                .withAdditionalAllowedSessionTypes(
                                                    Arrays.asList(PduSessionType.IPV6, PduSessionType.IPV6))
                                                .withAllowedServices(
                                                    Arrays.asList(
                                                        new ServiceResourceId().withId("beesmieknlra"),
                                                        new ServiceResourceId().withId("iaa")))
                                                .withMaximumNumberOfBufferedPackets(1541326221),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("agy"))
                                                .withSessionAmbr(
                                                    new Ambr().withUplink("wqfbylyrfgiagt").withDownlink("ojocqwogf"))
                                                .withFiveQi(1301116778)
                                                .withAllocationAndRetentionPriorityLevel(2065861659)
                                                .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                                                .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                                                .withDefaultSessionType(PduSessionType.IPV6)
                                                .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV6,
                                                    PduSessionType.IPV4, PduSessionType.IPV4, PduSessionType.IPV6))
                                                .withAllowedServices(
                                                    Arrays.asList(new ServiceResourceId().withId("sbtkadpysownbtgk"),
                                                        new ServiceResourceId().withId("u")))
                                                .withMaximumNumberOfBufferedPackets(1343904651),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("qctojcmisof"))
                                                .withSessionAmbr(
                                                    new Ambr().withUplink("eypefojyqd").withDownlink("cuplcplcwkhih"))
                                                .withFiveQi(184216647)
                                                .withAllocationAndRetentionPriorityLevel(1075361134)
                                                .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                                                .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                                                .withDefaultSessionType(PduSessionType.IPV4)
                                                .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV6,
                                                    PduSessionType.IPV4, PduSessionType.IPV4))
                                                .withAllowedServices(
                                                    Arrays.asList(new ServiceResourceId().withId("cjhfgmvecactxmw"),
                                                        new ServiceResourceId().withId("teyowclu")))
                                                .withMaximumNumberOfBufferedPackets(1896348924))),
                            new SliceConfiguration().withSlice(new SliceResourceId().withId("ekqvgqouwif"))
                                .withDefaultDataNetwork(new DataNetworkResourceId().withId("mpjw"))
                                .withDataNetworkConfigurations(
                                    Arrays
                                        .asList(
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("vqikfxcvhrfsphu"))
                                                .withSessionAmbr(new Ambr().withUplink("grttikteusqczk")
                                                    .withDownlink("yklxubyjaffmmfbl"))
                                                .withFiveQi(1534498660)
                                                .withAllocationAndRetentionPriorityLevel(982758961)
                                                .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                                                .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                                                .withDefaultSessionType(PduSessionType.IPV4)
                                                .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV6))
                                                .withAllowedServices(Arrays.asList(
                                                    new ServiceResourceId().withId("etttwgdslqxihhr"),
                                                    new ServiceResourceId().withId("ooizqseyp")))
                                                .withMaximumNumberOfBufferedPackets(145023209),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("tcxapzhyrpetogeb"))
                                                .withSessionAmbr(new Ambr().withUplink("oxslh").withDownlink("nhl"))
                                                .withFiveQi(1064191938)
                                                .withAllocationAndRetentionPriorityLevel(413797833)
                                                .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                                                .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                                                .withDefaultSessionType(PduSessionType.IPV4)
                                                .withAdditionalAllowedSessionTypes(
                                                    Arrays.asList(PduSessionType.IPV6, PduSessionType.IPV6))
                                                .withAllowedServices(Arrays.asList(
                                                    new ServiceResourceId().withId("ehvvib"),
                                                    new ServiceResourceId().withId("xjjs"),
                                                    new ServiceResourceId().withId(
                                                        "oqbeitpkxzt"),
                                                    new ServiceResourceId().withId("oobklftidgfcwq")))
                                                .withMaximumNumberOfBufferedPackets(817120127),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("maqxzhemjyh"))
                                                .withSessionAmbr(new Ambr().withUplink("hujswtwkozzwcul")
                                                    .withDownlink("bawpfajnjwltlwt"))
                                                .withFiveQi(795579219)
                                                .withAllocationAndRetentionPriorityLevel(1385863144)
                                                .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                                                .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                                                .withDefaultSessionType(PduSessionType.IPV6)
                                                .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV6,
                                                    PduSessionType.IPV4, PduSessionType.IPV4, PduSessionType.IPV4))
                                                .withAllowedServices(
                                                    Arrays.asList(new ServiceResourceId().withId("rpoaimlnwi")))
                                                .withMaximumNumberOfBufferedPackets(1776733764)))));
        model = BinaryData.fromObject(model).toObject(SimPolicyPropertiesFormat.class);
        Assertions.assertEquals("xg", model.ueAmbr().uplink());
        Assertions.assertEquals("moy", model.ueAmbr().downlink());
        Assertions.assertEquals("cdyuibhmfdnbzyd", model.defaultSlice().id());
        Assertions.assertEquals(1872796730, model.rfspIndex());
        Assertions.assertEquals(1709322147, model.registrationTimer());
        Assertions.assertEquals("naeo", model.sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("srvhmgorffuki", model.sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("vwmzhwplefaxvxil",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("btgn",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("nzeyqxtjj",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().downlink());
        Assertions.assertEquals(715633855,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).fiveQi());
        Assertions.assertEquals(2051044475,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV4,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV6,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .additionalAllowedSessionTypes()
                .get(0));
        Assertions.assertEquals("beesmieknlra",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).allowedServices().get(0).id());
        Assertions.assertEquals(1541326221,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).maximumNumberOfBufferedPackets());
    }
}
