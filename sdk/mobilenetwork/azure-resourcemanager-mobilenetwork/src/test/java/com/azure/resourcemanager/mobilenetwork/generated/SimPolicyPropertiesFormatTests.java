// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.SimPolicyPropertiesFormat;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.PduSessionType;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.ServiceResourceId;
import com.azure.resourcemanager.mobilenetwork.models.SliceConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.SliceResourceId;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SimPolicyPropertiesFormatTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SimPolicyPropertiesFormat model = BinaryData.fromString(
            "{\"provisioningState\":\"Unknown\",\"siteProvisioningState\":{\"dzgkr\":\"Failed\",\"eevt\":\"Adding\"},\"ueAmbr\":{\"uplink\":\"epr\",\"downlink\":\"utnwytpzdmovzvf\"},\"defaultSlice\":{\"id\":\"aawzqadfl\"},\"rfspIndex\":318308535,\"registrationTimer\":1869010035,\"sliceConfigurations\":[{\"slice\":{\"id\":\"laecxndticok\"},\"defaultDataNetwork\":{\"id\":\"vzm\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"t\"},\"sessionAmbr\":{\"uplink\":\"ld\",\"downlink\":\"x\"},\"5qi\":1135591058,\"allocationAndRetentionPriorityLevel\":1646739085,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"defaultSessionType\":\"IPv6\",\"additionalAllowedSessionTypes\":[\"IPv4\",\"IPv4\"],\"allowedServices\":[{\"id\":\"iykhy\"},{\"id\":\"wf\"},{\"id\":\"jlb\"},{\"id\":\"xqvkjlmxhomdyn\"}],\"maximumNumberOfBufferedPackets\":1302375239},{\"dataNetwork\":{\"id\":\"digumbnr\"},\"sessionAmbr\":{\"uplink\":\"auzzptjazysd\",\"downlink\":\"hezwwvaiq\"},\"5qi\":409179252,\"allocationAndRetentionPriorityLevel\":1770480211,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv6\"],\"allowedServices\":[{\"id\":\"vyl\"},{\"id\":\"uyav\"},{\"id\":\"uwmncs\"}],\"maximumNumberOfBufferedPackets\":736005906}]}]}")
            .toObject(SimPolicyPropertiesFormat.class);
        Assertions.assertEquals("epr", model.ueAmbr().uplink());
        Assertions.assertEquals("utnwytpzdmovzvf", model.ueAmbr().downlink());
        Assertions.assertEquals("aawzqadfl", model.defaultSlice().id());
        Assertions.assertEquals(318308535, model.rfspIndex());
        Assertions.assertEquals(1869010035, model.registrationTimer());
        Assertions.assertEquals("laecxndticok", model.sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("vzm", model.sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("t",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("ld",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("x",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().downlink());
        Assertions.assertEquals(1135591058,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).fiveQi());
        Assertions.assertEquals(1646739085,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV6,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV4,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .additionalAllowedSessionTypes()
                .get(0));
        Assertions.assertEquals("iykhy",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).allowedServices().get(0).id());
        Assertions.assertEquals(1302375239,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).maximumNumberOfBufferedPackets());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SimPolicyPropertiesFormat model
            = new SimPolicyPropertiesFormat().withUeAmbr(new Ambr().withUplink("epr").withDownlink("utnwytpzdmovzvf"))
                .withDefaultSlice(new SliceResourceId().withId("aawzqadfl"))
                .withRfspIndex(318308535)
                .withRegistrationTimer(1869010035)
                .withSliceConfigurations(
                    Arrays
                        .asList(new SliceConfiguration().withSlice(new SliceResourceId().withId("laecxndticok"))
                            .withDefaultDataNetwork(new DataNetworkResourceId().withId("vzm"))
                            .withDataNetworkConfigurations(Arrays.asList(
                                new DataNetworkConfiguration().withDataNetwork(new DataNetworkResourceId().withId("t"))
                                    .withSessionAmbr(new Ambr().withUplink("ld").withDownlink("x"))
                                    .withFiveQi(1135591058)
                                    .withAllocationAndRetentionPriorityLevel(1646739085)
                                    .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                                    .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                                    .withDefaultSessionType(PduSessionType.IPV6)
                                    .withAdditionalAllowedSessionTypes(
                                        Arrays.asList(PduSessionType.IPV4, PduSessionType.IPV4))
                                    .withAllowedServices(
                                        Arrays.asList(new ServiceResourceId().withId("iykhy"),
                                            new ServiceResourceId().withId(
                                                "wf"),
                                            new ServiceResourceId().withId("jlb"),
                                            new ServiceResourceId().withId("xqvkjlmxhomdyn")))
                                    .withMaximumNumberOfBufferedPackets(1302375239),
                                new DataNetworkConfiguration()
                                    .withDataNetwork(new DataNetworkResourceId().withId("digumbnr"))
                                    .withSessionAmbr(new Ambr().withUplink("auzzptjazysd").withDownlink("hezwwvaiq"))
                                    .withFiveQi(409179252)
                                    .withAllocationAndRetentionPriorityLevel(1770480211)
                                    .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                                    .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                                    .withDefaultSessionType(PduSessionType.IPV4)
                                    .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV6))
                                    .withAllowedServices(Arrays.asList(new ServiceResourceId().withId("vyl"),
                                        new ServiceResourceId().withId("uyav"),
                                        new ServiceResourceId().withId("uwmncs")))
                                    .withMaximumNumberOfBufferedPackets(736005906)))));
        model = BinaryData.fromObject(model).toObject(SimPolicyPropertiesFormat.class);
        Assertions.assertEquals("epr", model.ueAmbr().uplink());
        Assertions.assertEquals("utnwytpzdmovzvf", model.ueAmbr().downlink());
        Assertions.assertEquals("aawzqadfl", model.defaultSlice().id());
        Assertions.assertEquals(318308535, model.rfspIndex());
        Assertions.assertEquals(1869010035, model.registrationTimer());
        Assertions.assertEquals("laecxndticok", model.sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("vzm", model.sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("t",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("ld",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("x",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().downlink());
        Assertions.assertEquals(1135591058,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).fiveQi());
        Assertions.assertEquals(1646739085,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV6,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV4,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .additionalAllowedSessionTypes()
                .get(0));
        Assertions.assertEquals("iykhy",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).allowedServices().get(0).id());
        Assertions.assertEquals(1302375239,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).maximumNumberOfBufferedPackets());
    }
}
