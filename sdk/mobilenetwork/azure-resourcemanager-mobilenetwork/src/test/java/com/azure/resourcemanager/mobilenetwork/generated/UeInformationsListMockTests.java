// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.RatType;
import com.azure.resourcemanager.mobilenetwork.models.UeInfo;
import com.azure.resourcemanager.mobilenetwork.models.UeState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class UeInformationsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"ratType\":\"4G\",\"ueState\":\"Deregistered\",\"ueIpAddresses\":[{\"dnn\":\"ofalickduoiqtam\",\"ueIpAddress\":{\"ipV4Addr\":\"sknxrwzawnvsbcf\"}},{\"dnn\":\"agxnvhycvdimw\",\"ueIpAddress\":{\"ipV4Addr\":\"e\"}},{\"dnn\":\"gy\",\"ueIpAddress\":{\"ipV4Addr\":\"trwpw\"}}],\"lastReadAt\":\"2021-07-22T04:45:11Z\"},\"id\":\"kzkdhmeott\",\"name\":\"w\",\"type\":\"yos\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        MobileNetworkManager manager = MobileNetworkManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<UeInfo> response
            = manager.ueInformations().list("zfboj", "jmcsmyqwixvcpwn", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(RatType.FOURG, response.iterator().next().properties().ratType());
        Assertions.assertEquals(UeState.DEREGISTERED, response.iterator().next().properties().ueState());
        Assertions.assertEquals("ofalickduoiqtam",
            response.iterator().next().properties().ueIpAddresses().get(0).dnn());
        Assertions.assertEquals("sknxrwzawnvsbcf",
            response.iterator().next().properties().ueIpAddresses().get(0).ueIpAddress().ipV4Addr());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-22T04:45:11Z"),
            response.iterator().next().properties().lastReadAt());
    }
}
