// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import com.azure.resourcemanager.mobilenetwork.models.PacketCoreDataPlane;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PacketCoreDataPlanesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"userPlaneAccessInterface\":{\"name\":\"bctvivuzqym\",\"ipv4Address\":\"owog\",\"ipv4Subnet\":\"it\",\"ipv4Gateway\":\"hzvb\",\"vlanId\":591890570,\"ipv4AddressList\":[\"anfzndscxmxeatk\"],\"bfdIpv4Endpoints\":[\"wnrdjyibqbnaom\",\"jrmkuhmaxljalf\"]},\"userPlaneAccessVirtualIpv4Addresses\":[\"jmobca\",\"cd\",\"xxqcwgaxf\"]},\"location\":\"aknokzwjjzrl\",\"tags\":{\"zyyfy\":\"l\",\"jivyqlkjuv\":\"pqsixymmp\",\"zdbpqv\":\"mbmslzoyov\",\"kcvtl\":\"befgvmxn\"},\"id\":\"bse\",\"name\":\"kvcuartrhunl\",\"type\":\"iryky\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PacketCoreDataPlane response = manager.packetCoreDataPlanes()
            .define("lxeehuxiq")
            .withRegion("fytoi")
            .withExistingPacketCoreControlPlane("jpnwynudql", "zsauzp")
            .withUserPlaneAccessInterface(new InterfaceProperties().withName("aymezx")
                .withIpv4Address("kihmxrfdsajredn")
                .withIpv4Subnet("yshtuwgmev")
                .withIpv4Gateway("fpwzyifrkgwltx")
                .withVlanId(1848088560)
                .withIpv4AddressList(Arrays.asList("gzdyimsfayorp", "avkjog", "sl", "bnsmjkwynqxaek"))
                .withBfdIpv4Endpoints(
                    Arrays.asList("kvwjtqpkevmy", "tjcrspxklurccl", "gxannnoytzposewx", "gpxvkqmaupxvpi")))
            .withTags(mapOf("rxwe", "ygvfltgvdihoyn", "cy", "wkd", "dnaienhqhskndnel", "ucpcunnuzdqumoen",
                "lknwfoanniyop", "kaa"))
            .withUserPlaneAccessVirtualIpv4Addresses(Arrays.asList("aifyzyzeyuubeids"))
            .create();

        Assertions.assertEquals("aknokzwjjzrl", response.location());
        Assertions.assertEquals("l", response.tags().get("zyyfy"));
        Assertions.assertEquals("bctvivuzqym", response.userPlaneAccessInterface().name());
        Assertions.assertEquals("owog", response.userPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("it", response.userPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("hzvb", response.userPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals(591890570, response.userPlaneAccessInterface().vlanId());
        Assertions.assertEquals("anfzndscxmxeatk", response.userPlaneAccessInterface().ipv4AddressList().get(0));
        Assertions.assertEquals("wnrdjyibqbnaom", response.userPlaneAccessInterface().bfdIpv4Endpoints().get(0));
        Assertions.assertEquals("jmobca", response.userPlaneAccessVirtualIpv4Addresses().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
