// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import com.azure.resourcemanager.mobilenetwork.models.PacketCoreDataPlane;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PacketCoreDataPlanesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"userPlaneAccessInterface\":{\"name\":\"azlp\",\"ipv4Address\":\"wex\",\"ipv4Subnet\":\"zvlazipbhpwvqsgn\",\"ipv4Gateway\":\"uuzivensrpmeyyvp\"},\"userPlaneAccessVirtualIpv4Addresses\":[\"tlbijpzg\"]},\"location\":\"srfhf\",\"tags\":{\"qa\":\"mknbnxwcdommpv\",\"hajlfn\":\"zfgbrttuiaclkie\",\"b\":\"hiqfyuttdiy\"},\"id\":\"vnwsw\",\"name\":\"txkyctwwgzwxjlm\",\"type\":\"cvogygzyvne\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MobileNetworkManager manager =
            MobileNetworkManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PacketCoreDataPlane response =
            manager
                .packetCoreDataPlanes()
                .define("v")
                .withRegion("whc")
                .withExistingPacketCoreControlPlane("yvk", "kmrocxne")
                .withUserPlaneAccessInterface(
                    new InterfaceProperties()
                        .withName("dlfp")
                        .withIpv4Address("pucygvoavyunss")
                        .withIpv4Subnet("ghiee")
                        .withIpv4Gateway("lgvvpaseksgbu"))
                .withTags(mapOf("uuerctatoyi", "ibkeph", "duczkgof", "tqpbrlcy", "srucvcrrpcjtt", "y"))
                .withUserPlaneAccessVirtualIpv4Addresses(Arrays.asList("tu", "gdhg", "qipir", "iwrqofulopmjnl"))
                .create();

        Assertions.assertEquals("srfhf", response.location());
        Assertions.assertEquals("mknbnxwcdommpv", response.tags().get("qa"));
        Assertions.assertEquals("azlp", response.userPlaneAccessInterface().name());
        Assertions.assertEquals("wex", response.userPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("zvlazipbhpwvqsgn", response.userPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("uuzivensrpmeyyvp", response.userPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals("tlbijpzg", response.userPlaneAccessVirtualIpv4Addresses().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
