// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.RoutingInfoModelInner;
import com.azure.resourcemanager.mobilenetwork.models.AttachedDataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.Ipv4Route;
import com.azure.resourcemanager.mobilenetwork.models.Ipv4RouteNextHop;
import com.azure.resourcemanager.mobilenetwork.models.RoutingInfoListResult;
import com.azure.resourcemanager.mobilenetwork.models.UserPlaneDataRoutesItem;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RoutingInfoListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RoutingInfoListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"controlPlaneAccessRoutes\":[{\"destination\":\"kiidzyex\",\"nextHops\":[{}]},{\"destination\":\"ixhnrztf\",\"nextHops\":[{}]},{\"destination\":\"nxknalaulp\",\"nextHops\":[{},{},{}]},{\"destination\":\"tpnapnyiropuhpig\",\"nextHops\":[{},{},{},{}]}],\"userPlaneAccessRoutes\":[{\"destination\":\"qgitxmed\",\"nextHops\":[{}]}],\"userPlaneDataRoutes\":[{\"attachedDataNetwork\":{\"id\":\"n\"},\"routes\":[{},{},{},{}]},{\"attachedDataNetwork\":{\"id\":\"cwzzhxgktr\"},\"routes\":[{},{},{},{}]},{\"attachedDataNetwork\":{\"id\":\"napkteoellw\"},\"routes\":[{},{},{},{}]}]},\"id\":\"ygpfqb\",\"name\":\"ac\",\"type\":\"op\"},{\"properties\":{\"controlPlaneAccessRoutes\":[{\"destination\":\"hhuao\",\"nextHops\":[{},{}]},{\"destination\":\"qeqxo\",\"nextHops\":[{},{},{}]}],\"userPlaneAccessRoutes\":[{\"destination\":\"xcto\",\"nextHops\":[{},{}]},{\"destination\":\"dmoizpostmg\",\"nextHops\":[{},{},{}]}],\"userPlaneDataRoutes\":[{\"attachedDataNetwork\":{\"id\":\"rmfqjhhkxbpvj\"},\"routes\":[{},{}]},{\"attachedDataNetwork\":{\"id\":\"xxjyngudivkrtsw\"},\"routes\":[{},{}]},{\"attachedDataNetwork\":{\"id\":\"vszjfauvjfdxxi\"},\"routes\":[{}]}]},\"id\":\"t\",\"name\":\"qaqtdoqmcbxvwvxy\",\"type\":\"lqbhsf\"}],\"nextLink\":\"blytk\"}")
            .toObject(RoutingInfoListResult.class);
        Assertions.assertEquals("kiidzyex", model.value().get(0).controlPlaneAccessRoutes().get(0).destination());
        Assertions.assertEquals("qgitxmed", model.value().get(0).userPlaneAccessRoutes().get(0).destination());
        Assertions.assertEquals("n", model.value().get(0).userPlaneDataRoutes().get(0).attachedDataNetwork().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RoutingInfoListResult model = new RoutingInfoListResult().withValue(Arrays.asList(
            new RoutingInfoModelInner()
                .withControlPlaneAccessRoutes(Arrays.asList(
                    new Ipv4Route().withDestination("kiidzyex").withNextHops(Arrays.asList(new Ipv4RouteNextHop())),
                    new Ipv4Route().withDestination("ixhnrztf").withNextHops(Arrays.asList(new Ipv4RouteNextHop())),
                    new Ipv4Route().withDestination("nxknalaulp")
                        .withNextHops(
                            Arrays.asList(new Ipv4RouteNextHop(), new Ipv4RouteNextHop(), new Ipv4RouteNextHop())),
                    new Ipv4Route().withDestination("tpnapnyiropuhpig")
                        .withNextHops(Arrays.asList(new Ipv4RouteNextHop(), new Ipv4RouteNextHop(),
                            new Ipv4RouteNextHop(), new Ipv4RouteNextHop()))))
                .withUserPlaneAccessRoutes(Arrays.asList(
                    new Ipv4Route().withDestination("qgitxmed").withNextHops(Arrays.asList(new Ipv4RouteNextHop()))))
                .withUserPlaneDataRoutes(Arrays.asList(new UserPlaneDataRoutesItem()
                    .withAttachedDataNetwork(new AttachedDataNetworkResourceId().withId("n"))
                    .withRoutes(Arrays.asList(new Ipv4Route(), new Ipv4Route(), new Ipv4Route(), new Ipv4Route())),
                    new UserPlaneDataRoutesItem()
                        .withAttachedDataNetwork(new AttachedDataNetworkResourceId().withId("cwzzhxgktr"))
                        .withRoutes(Arrays.asList(new Ipv4Route(), new Ipv4Route(), new Ipv4Route(), new Ipv4Route())),
                    new UserPlaneDataRoutesItem()
                        .withAttachedDataNetwork(new AttachedDataNetworkResourceId().withId("napkteoellw"))
                        .withRoutes(
                            Arrays.asList(new Ipv4Route(), new Ipv4Route(), new Ipv4Route(), new Ipv4Route())))),
            new RoutingInfoModelInner()
                .withControlPlaneAccessRoutes(
                    Arrays
                        .asList(
                            new Ipv4Route().withDestination("hhuao")
                                .withNextHops(Arrays.asList(new Ipv4RouteNextHop(), new Ipv4RouteNextHop())),
                            new Ipv4Route().withDestination("qeqxo")
                                .withNextHops(Arrays.asList(new Ipv4RouteNextHop(), new Ipv4RouteNextHop(),
                                    new Ipv4RouteNextHop()))))
                .withUserPlaneAccessRoutes(
                    Arrays
                        .asList(
                            new Ipv4Route().withDestination("xcto")
                                .withNextHops(Arrays.asList(new Ipv4RouteNextHop(), new Ipv4RouteNextHop())),
                            new Ipv4Route().withDestination("dmoizpostmg")
                                .withNextHops(Arrays.asList(new Ipv4RouteNextHop(), new Ipv4RouteNextHop(),
                                    new Ipv4RouteNextHop()))))
                .withUserPlaneDataRoutes(Arrays.asList(
                    new UserPlaneDataRoutesItem()
                        .withAttachedDataNetwork(new AttachedDataNetworkResourceId().withId("rmfqjhhkxbpvj"))
                        .withRoutes(Arrays.asList(new Ipv4Route(), new Ipv4Route())),
                    new UserPlaneDataRoutesItem()
                        .withAttachedDataNetwork(new AttachedDataNetworkResourceId().withId("xxjyngudivkrtsw"))
                        .withRoutes(Arrays.asList(new Ipv4Route(), new Ipv4Route())),
                    new UserPlaneDataRoutesItem()
                        .withAttachedDataNetwork(new AttachedDataNetworkResourceId().withId("vszjfauvjfdxxi"))
                        .withRoutes(Arrays.asList(new Ipv4Route()))))));
        model = BinaryData.fromObject(model).toObject(RoutingInfoListResult.class);
        Assertions.assertEquals("kiidzyex", model.value().get(0).controlPlaneAccessRoutes().get(0).destination());
        Assertions.assertEquals("qgitxmed", model.value().get(0).userPlaneAccessRoutes().get(0).destination());
        Assertions.assertEquals("n", model.value().get(0).userPlaneDataRoutes().get(0).attachedDataNetwork().id());
    }
}
