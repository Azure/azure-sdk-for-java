// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AuthenticationType;
import com.azure.resourcemanager.mobilenetwork.models.BillingSku;
import com.azure.resourcemanager.mobilenetwork.models.CoreNetworkType;
import com.azure.resourcemanager.mobilenetwork.models.DesiredInstallationState;
import com.azure.resourcemanager.mobilenetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mobilenetwork.models.PacketCoreControlPlane;
import com.azure.resourcemanager.mobilenetwork.models.PlatformType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PacketCoreControlPlanesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"installation\":{\"desiredState\":\"Installed\",\"state\":\"Reinstalling\",\"reinstallRequired\":\"Required\",\"reasons\":[\"NoSlices\",\"NoPacketCoreDataPlane\",\"NoPacketCoreDataPlane\",\"NoAttachedDataNetworks\"],\"operation\":{\"id\":\"jtkbusqogsfika\"}},\"sites\":[{\"id\":\"ansharujtjiqxfz\"}],\"platform\":{\"type\":\"AKS-HCI\",\"azureStackEdgeDevice\":{\"id\":\"ttvwkpqh\"},\"azureStackEdgeDevices\":[{\"id\":\"nuygbqeqqekewvnq\"},{\"id\":\"cdlguauc\"}],\"azureStackHciCluster\":{\"id\":\"djwnlaxpunjqi\"},\"connectedCluster\":{\"id\":\"zvvitacgxmfcs\"},\"customLocation\":{\"id\":\"rxhtvso\"}},\"coreNetworkTechnology\":\"5GC\",\"version\":\"ntsj\",\"installedVersion\":\"rsxypruuu\",\"rollbackVersion\":\"nchrszizoyu\",\"controlPlaneAccessInterface\":{\"name\":\"yetnd\",\"ipv4Address\":\"fqyggagflnlgmtr\",\"ipv4Subnet\":\"hzjmucftbyrp\",\"ipv4Gateway\":\"ohkpigqfu\"},\"sku\":\"G0\",\"ueMtu\":1931491413,\"localDiagnosticsAccess\":{\"authenticationType\":\"AAD\",\"httpsServerCertificate\":{\"certificateUrl\":\"kwklsnoxaxmq\",\"provisioning\":{\"state\":\"NotProvisioned\",\"reason\":\"hjnhgwydyynfsvk\"}}},\"diagnosticsUpload\":{\"storageAccountContainerUrl\":\"bvqt\"},\"interopSettings\":\"dataarfdlpukhpyrnei\"},\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"khnmgbrou\":{\"principalId\":\"86ce3af5-1108-4980-bcc6-96888e4e62c0\",\"clientId\":\"42b8a20b-203f-463e-9bf6-bc0617261a75\"},\"bhfhpfpazjzoy\":{\"principalId\":\"008c79cf-fa53-4a1d-a01e-887a59156594\",\"clientId\":\"c72190d2-6107-4e7a-9160-8096ee2d9525\"},\"hpdulon\":{\"principalId\":\"61effec2-2432-4161-aca7-fbdf214ed29e\",\"clientId\":\"43fb8f75-27f0-43ad-816b-4e26d58b5223\"}}},\"location\":\"cnpqwteht\",\"tags\":{\"duugwbsre\":\"rhrljyoogwxhn\"},\"id\":\"rfqkfuar\",\"name\":\"nlvhhtklnvnafvv\",\"type\":\"yfedevjbo\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MobileNetworkManager manager =
            MobileNetworkManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PacketCoreControlPlane> response =
            manager.packetCoreControlPlanes().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("cnpqwteht", response.iterator().next().location());
        Assertions.assertEquals("rhrljyoogwxhn", response.iterator().next().tags().get("duugwbsre"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions
            .assertEquals(DesiredInstallationState.INSTALLED, response.iterator().next().installation().desiredState());
        Assertions.assertEquals("ansharujtjiqxfz", response.iterator().next().sites().get(0).id());
        Assertions.assertEquals(PlatformType.AKS_HCI, response.iterator().next().platform().type());
        Assertions.assertEquals("ttvwkpqh", response.iterator().next().platform().azureStackEdgeDevice().id());
        Assertions.assertEquals("djwnlaxpunjqi", response.iterator().next().platform().azureStackHciCluster().id());
        Assertions.assertEquals("zvvitacgxmfcs", response.iterator().next().platform().connectedCluster().id());
        Assertions.assertEquals("rxhtvso", response.iterator().next().platform().customLocation().id());
        Assertions.assertEquals(CoreNetworkType.FIVE_GC, response.iterator().next().coreNetworkTechnology());
        Assertions.assertEquals("ntsj", response.iterator().next().version());
        Assertions.assertEquals("yetnd", response.iterator().next().controlPlaneAccessInterface().name());
        Assertions
            .assertEquals("fqyggagflnlgmtr", response.iterator().next().controlPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("hzjmucftbyrp", response.iterator().next().controlPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("ohkpigqfu", response.iterator().next().controlPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals(BillingSku.G0, response.iterator().next().sku());
        Assertions.assertEquals(1931491413, response.iterator().next().ueMtu());
        Assertions
            .assertEquals(
                AuthenticationType.AAD, response.iterator().next().localDiagnosticsAccess().authenticationType());
        Assertions
            .assertEquals(
                "kwklsnoxaxmq",
                response.iterator().next().localDiagnosticsAccess().httpsServerCertificate().certificateUrl());
        Assertions.assertEquals("bvqt", response.iterator().next().diagnosticsUpload().storageAccountContainerUrl());
    }
}
