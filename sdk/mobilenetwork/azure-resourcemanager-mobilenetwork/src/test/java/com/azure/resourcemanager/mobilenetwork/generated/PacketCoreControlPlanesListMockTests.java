// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AuthenticationType;
import com.azure.resourcemanager.mobilenetwork.models.BillingSku;
import com.azure.resourcemanager.mobilenetwork.models.CoreNetworkType;
import com.azure.resourcemanager.mobilenetwork.models.DesiredInstallationState;
import com.azure.resourcemanager.mobilenetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mobilenetwork.models.PacketCoreControlPlane;
import com.azure.resourcemanager.mobilenetwork.models.PlatformType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PacketCoreControlPlanesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleted\",\"installation\":{\"desiredState\":\"Uninstalled\",\"state\":\"Uninstalling\",\"reinstallRequired\":\"NotRequired\",\"reasons\":[\"ControlPlaneAccessInterfaceHasChanged\",\"PublicLandMobileNetworkIdentifierHasChanged\"],\"operation\":{\"id\":\"ftbyrplro\"}},\"sites\":[{\"id\":\"pigqfusuckzmkw\"},{\"id\":\"lsnoxaxmqeqalh\"},{\"id\":\"jnhgwydyyn\"}],\"platform\":{\"type\":\"AKS-HCI\",\"azureStackEdgeDevice\":{\"id\":\"khgb\"},\"azureStackEdgeDevices\":[{\"id\":\"anarfdlpukhpyrne\"}],\"azureStackHciCluster\":{\"id\":\"jcpeogkhnmg\"},\"connectedCluster\":{\"id\":\"ouxddbhfhpfpazj\"},\"customLocation\":{\"id\":\"ywjxh\"}},\"coreNetworkTechnology\":\"EPC\",\"version\":\"ontacnpq\",\"installedVersion\":\"ehtuevrhr\",\"rollbackVersion\":\"yoogw\",\"controlPlaneAccessInterface\":{\"name\":\"nsduugwbsre\",\"ipv4Address\":\"fqkfuarenl\",\"ipv4Subnet\":\"htkln\",\"ipv4Gateway\":\"afvvk\"},\"controlPlaneAccessVirtualIpv4Addresses\":[\"devjb\"],\"sku\":\"G5\",\"ueMtu\":1265182150,\"localDiagnosticsAccess\":{\"authenticationType\":\"Password\",\"httpsServerCertificate\":{\"certificateUrl\":\"y\",\"provisioning\":{\"state\":\"Failed\",\"reason\":\"minqcym\"}}},\"diagnosticsUpload\":{\"storageAccountContainerUrl\":\"ngnbdxxew\"},\"eventHub\":{\"id\":\"invudbch\",\"reportingInterval\":1149033945},\"signaling\":{\"nasReroute\":{\"macroMmeGroupId\":529081403}},\"interopSettings\":\"datacrqctmxxdtddmflh\"},\"identity\":{\"type\":\"None\",\"userAssignedIdentities\":{\"zna\":{\"principalId\":\"7c4bab26-15ba-4f97-9865-71054339e390\",\"clientId\":\"53e38b90-0915-4c3e-bf75-45c7231ff445\"}}},\"location\":\"bannovvoxczytp\",\"tags\":{\"uuxvnsasbcry\":\"wvroevytlyokrrr\",\"izrxklob\":\"o\",\"vevfxz\":\"xnazpmkml\",\"bzxliohrdddtfgxq\":\"pj\"},\"id\":\"awpcbbnzqcykn\",\"name\":\"p\",\"type\":\"ofyuicd\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MobileNetworkManager manager =
            MobileNetworkManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PacketCoreControlPlane> response =
            manager.packetCoreControlPlanes().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bannovvoxczytp", response.iterator().next().location());
        Assertions.assertEquals("wvroevytlyokrrr", response.iterator().next().tags().get("uuxvnsasbcry"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.iterator().next().identity().type());
        Assertions
            .assertEquals(
                DesiredInstallationState.UNINSTALLED, response.iterator().next().installation().desiredState());
        Assertions.assertEquals("pigqfusuckzmkw", response.iterator().next().sites().get(0).id());
        Assertions.assertEquals(PlatformType.AKS_HCI, response.iterator().next().platform().type());
        Assertions.assertEquals("khgb", response.iterator().next().platform().azureStackEdgeDevice().id());
        Assertions.assertEquals("jcpeogkhnmg", response.iterator().next().platform().azureStackHciCluster().id());
        Assertions.assertEquals("ouxddbhfhpfpazj", response.iterator().next().platform().connectedCluster().id());
        Assertions.assertEquals("ywjxh", response.iterator().next().platform().customLocation().id());
        Assertions.assertEquals(CoreNetworkType.EPC, response.iterator().next().coreNetworkTechnology());
        Assertions.assertEquals("ontacnpq", response.iterator().next().version());
        Assertions.assertEquals("nsduugwbsre", response.iterator().next().controlPlaneAccessInterface().name());
        Assertions.assertEquals("fqkfuarenl", response.iterator().next().controlPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("htkln", response.iterator().next().controlPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("afvvk", response.iterator().next().controlPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals("devjb", response.iterator().next().controlPlaneAccessVirtualIpv4Addresses().get(0));
        Assertions.assertEquals(BillingSku.G5, response.iterator().next().sku());
        Assertions.assertEquals(1265182150, response.iterator().next().ueMtu());
        Assertions
            .assertEquals(
                AuthenticationType.PASSWORD, response.iterator().next().localDiagnosticsAccess().authenticationType());
        Assertions
            .assertEquals(
                "y", response.iterator().next().localDiagnosticsAccess().httpsServerCertificate().certificateUrl());
        Assertions
            .assertEquals("ngnbdxxew", response.iterator().next().diagnosticsUpload().storageAccountContainerUrl());
        Assertions.assertEquals("invudbch", response.iterator().next().eventHub().id());
        Assertions.assertEquals(1149033945, response.iterator().next().eventHub().reportingInterval());
        Assertions.assertEquals(529081403, response.iterator().next().signaling().nasReroute().macroMmeGroupId());
    }
}
