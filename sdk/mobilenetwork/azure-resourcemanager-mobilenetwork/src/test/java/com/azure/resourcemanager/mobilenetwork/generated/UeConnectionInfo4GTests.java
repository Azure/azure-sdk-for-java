// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.GlobalRanNodeId;
import com.azure.resourcemanager.mobilenetwork.models.GNbId;
import com.azure.resourcemanager.mobilenetwork.models.PlmnId;
import com.azure.resourcemanager.mobilenetwork.models.RrcEstablishmentCause;
import com.azure.resourcemanager.mobilenetwork.models.UeConnectionInfo4G;
import com.azure.resourcemanager.mobilenetwork.models.UeLocationInfo;
import com.azure.resourcemanager.mobilenetwork.models.UeState;
import com.azure.resourcemanager.mobilenetwork.models.UeUsageSetting;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class UeConnectionInfo4GTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UeConnectionInfo4G model = BinaryData.fromString(
            "{\"locationInfo\":{\"locationType\":\"xu\",\"tac\":\"t\",\"plmn\":{\"mcc\":\"ksxwpnd\",\"mnc\":\"cpfnznthjtwkja\"}},\"globalRanNodeId\":{\"plmnId\":{\"mcc\":\"srxuzvoam\",\"mnc\":\"tcqiosmg\"},\"gNbId\":{\"bitLength\":10270964,\"gNBValue\":\"xqdlyrtltlapr\"},\"ngeNbId\":\"zkatb\",\"eNbId\":\"mznnbsoqeqalarvl\",\"n3IwfId\":\"un\",\"wagfId\":\"gfebwlnb\",\"tngfId\":\"yreeudz\",\"nid\":\"vbpdqmjxlyyzglgo\"},\"perUeTnla\":\"tlmj\",\"mmeS1apId\":669604202,\"enbS1apId\":1206140205,\"lastVisitedTai\":\"j\",\"ueState\":\"Idle\",\"rrcEstablishmentCause\":\"SMS\",\"ueUsageSetting\":\"DataCentric\",\"lastActivityTime\":\"2021-02-11T18:21:35Z\"}")
            .toObject(UeConnectionInfo4G.class);
        Assertions.assertEquals("xu", model.locationInfo().locationType());
        Assertions.assertEquals("t", model.locationInfo().tac());
        Assertions.assertEquals("ksxwpnd", model.locationInfo().plmn().mcc());
        Assertions.assertEquals("cpfnznthjtwkja", model.locationInfo().plmn().mnc());
        Assertions.assertEquals("srxuzvoam", model.globalRanNodeId().plmnId().mcc());
        Assertions.assertEquals("tcqiosmg", model.globalRanNodeId().plmnId().mnc());
        Assertions.assertEquals(10270964, model.globalRanNodeId().gNbId().bitLength());
        Assertions.assertEquals("xqdlyrtltlapr", model.globalRanNodeId().gNbId().gNBValue());
        Assertions.assertEquals("zkatb", model.globalRanNodeId().ngeNbId());
        Assertions.assertEquals("mznnbsoqeqalarvl", model.globalRanNodeId().eNbId());
        Assertions.assertEquals("un", model.globalRanNodeId().n3IwfId());
        Assertions.assertEquals("gfebwlnb", model.globalRanNodeId().wagfId());
        Assertions.assertEquals("yreeudz", model.globalRanNodeId().tngfId());
        Assertions.assertEquals("vbpdqmjxlyyzglgo", model.globalRanNodeId().nid());
        Assertions.assertEquals("tlmj", model.perUeTnla());
        Assertions.assertEquals(669604202, model.mmeS1ApId());
        Assertions.assertEquals(1206140205, model.enbS1ApId());
        Assertions.assertEquals("j", model.lastVisitedTai());
        Assertions.assertEquals(UeState.IDLE, model.ueState());
        Assertions.assertEquals(RrcEstablishmentCause.SMS, model.rrcEstablishmentCause());
        Assertions.assertEquals(UeUsageSetting.DATA_CENTRIC, model.ueUsageSetting());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-11T18:21:35Z"), model.lastActivityTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UeConnectionInfo4G model = new UeConnectionInfo4G()
            .withLocationInfo(new UeLocationInfo().withLocationType("xu")
                .withTac("t")
                .withPlmn(new PlmnId().withMcc("ksxwpnd").withMnc("cpfnznthjtwkja")))
            .withGlobalRanNodeId(new GlobalRanNodeId().withPlmnId(new PlmnId().withMcc("srxuzvoam").withMnc("tcqiosmg"))
                .withGNbId(new GNbId().withBitLength(10270964).withGNBValue("xqdlyrtltlapr"))
                .withNgeNbId("zkatb")
                .withENbId("mznnbsoqeqalarvl")
                .withN3IwfId("un")
                .withWagfId("gfebwlnb")
                .withTngfId("yreeudz")
                .withNid("vbpdqmjxlyyzglgo"))
            .withPerUeTnla("tlmj")
            .withMmeS1ApId(669604202)
            .withEnbS1ApId(1206140205)
            .withLastVisitedTai("j")
            .withUeState(UeState.IDLE)
            .withRrcEstablishmentCause(RrcEstablishmentCause.SMS)
            .withUeUsageSetting(UeUsageSetting.DATA_CENTRIC)
            .withLastActivityTime(OffsetDateTime.parse("2021-02-11T18:21:35Z"));
        model = BinaryData.fromObject(model).toObject(UeConnectionInfo4G.class);
        Assertions.assertEquals("xu", model.locationInfo().locationType());
        Assertions.assertEquals("t", model.locationInfo().tac());
        Assertions.assertEquals("ksxwpnd", model.locationInfo().plmn().mcc());
        Assertions.assertEquals("cpfnznthjtwkja", model.locationInfo().plmn().mnc());
        Assertions.assertEquals("srxuzvoam", model.globalRanNodeId().plmnId().mcc());
        Assertions.assertEquals("tcqiosmg", model.globalRanNodeId().plmnId().mnc());
        Assertions.assertEquals(10270964, model.globalRanNodeId().gNbId().bitLength());
        Assertions.assertEquals("xqdlyrtltlapr", model.globalRanNodeId().gNbId().gNBValue());
        Assertions.assertEquals("zkatb", model.globalRanNodeId().ngeNbId());
        Assertions.assertEquals("mznnbsoqeqalarvl", model.globalRanNodeId().eNbId());
        Assertions.assertEquals("un", model.globalRanNodeId().n3IwfId());
        Assertions.assertEquals("gfebwlnb", model.globalRanNodeId().wagfId());
        Assertions.assertEquals("yreeudz", model.globalRanNodeId().tngfId());
        Assertions.assertEquals("vbpdqmjxlyyzglgo", model.globalRanNodeId().nid());
        Assertions.assertEquals("tlmj", model.perUeTnla());
        Assertions.assertEquals(669604202, model.mmeS1ApId());
        Assertions.assertEquals(1206140205, model.enbS1ApId());
        Assertions.assertEquals("j", model.lastVisitedTai());
        Assertions.assertEquals(UeState.IDLE, model.ueState());
        Assertions.assertEquals(RrcEstablishmentCause.SMS, model.rrcEstablishmentCause());
        Assertions.assertEquals(UeUsageSetting.DATA_CENTRIC, model.ueUsageSetting());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-11T18:21:35Z"), model.lastActivityTime());
    }
}
