// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.GNbId;
import com.azure.resourcemanager.mobilenetwork.models.GlobalRanNodeId;
import com.azure.resourcemanager.mobilenetwork.models.PlmnId;
import com.azure.resourcemanager.mobilenetwork.models.RrcEstablishmentCause;
import com.azure.resourcemanager.mobilenetwork.models.UeConnectionInfo4G;
import com.azure.resourcemanager.mobilenetwork.models.UeLocationInfo;
import com.azure.resourcemanager.mobilenetwork.models.UeState;
import com.azure.resourcemanager.mobilenetwork.models.UeUsageSetting;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class UeConnectionInfo4GTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UeConnectionInfo4G model = BinaryData.fromString(
            "{\"locationInfo\":{\"locationType\":\"wpypqtgsfj\",\"tac\":\"cbslhhx\",\"plmn\":{\"mcc\":\"db\",\"mnc\":\"vodhtn\"}},\"globalRanNodeId\":{\"plmnId\":{\"mcc\":\"irudh\",\"mnc\":\"m\"},\"gNbId\":{\"bitLength\":1714425112,\"gNBValue\":\"dlpagzrcxfail\"},\"ngeNbId\":\"xwmdboxd\",\"eNbId\":\"sftufqobrjlna\",\"n3IwfId\":\"cc\",\"wagfId\":\"nhxk\",\"tngfId\":\"v\",\"nid\":\"nrzvuljraaer\"},\"perUeTnla\":\"okqgukkjq\",\"mmeS1apId\":380919763,\"enbS1apId\":1534220522,\"lastVisitedTai\":\"oylaxxul\",\"ueState\":\"Detached\",\"rrcEstablishmentCause\":\"SMS\",\"ueUsageSetting\":\"DataCentric\",\"lastActivityTime\":\"2021-04-25T17:14:26Z\"}")
            .toObject(UeConnectionInfo4G.class);
        Assertions.assertEquals("wpypqtgsfj", model.locationInfo().locationType());
        Assertions.assertEquals("cbslhhx", model.locationInfo().tac());
        Assertions.assertEquals("db", model.locationInfo().plmn().mcc());
        Assertions.assertEquals("vodhtn", model.locationInfo().plmn().mnc());
        Assertions.assertEquals("irudh", model.globalRanNodeId().plmnId().mcc());
        Assertions.assertEquals("m", model.globalRanNodeId().plmnId().mnc());
        Assertions.assertEquals(1714425112, model.globalRanNodeId().gNbId().bitLength());
        Assertions.assertEquals("dlpagzrcxfail", model.globalRanNodeId().gNbId().gNBValue());
        Assertions.assertEquals("xwmdboxd", model.globalRanNodeId().ngeNbId());
        Assertions.assertEquals("sftufqobrjlna", model.globalRanNodeId().eNbId());
        Assertions.assertEquals("cc", model.globalRanNodeId().n3IwfId());
        Assertions.assertEquals("nhxk", model.globalRanNodeId().wagfId());
        Assertions.assertEquals("v", model.globalRanNodeId().tngfId());
        Assertions.assertEquals("nrzvuljraaer", model.globalRanNodeId().nid());
        Assertions.assertEquals("okqgukkjq", model.perUeTnla());
        Assertions.assertEquals(380919763, model.mmeS1ApId());
        Assertions.assertEquals(1534220522, model.enbS1ApId());
        Assertions.assertEquals("oylaxxul", model.lastVisitedTai());
        Assertions.assertEquals(UeState.DETACHED, model.ueState());
        Assertions.assertEquals(RrcEstablishmentCause.SMS, model.rrcEstablishmentCause());
        Assertions.assertEquals(UeUsageSetting.DATA_CENTRIC, model.ueUsageSetting());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-25T17:14:26Z"), model.lastActivityTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UeConnectionInfo4G model = new UeConnectionInfo4G()
            .withLocationInfo(new UeLocationInfo().withLocationType("wpypqtgsfj").withTac("cbslhhx")
                .withPlmn(new PlmnId().withMcc("db").withMnc("vodhtn")))
            .withGlobalRanNodeId(new GlobalRanNodeId().withPlmnId(new PlmnId().withMcc("irudh").withMnc("m"))
                .withGNbId(new GNbId().withBitLength(1714425112).withGNBValue("dlpagzrcxfail")).withNgeNbId("xwmdboxd")
                .withENbId("sftufqobrjlna").withN3IwfId("cc").withWagfId("nhxk").withTngfId("v")
                .withNid("nrzvuljraaer"))
            .withPerUeTnla("okqgukkjq").withMmeS1ApId(380919763).withEnbS1ApId(1534220522)
            .withLastVisitedTai("oylaxxul").withUeState(UeState.DETACHED)
            .withRrcEstablishmentCause(RrcEstablishmentCause.SMS).withUeUsageSetting(UeUsageSetting.DATA_CENTRIC)
            .withLastActivityTime(OffsetDateTime.parse("2021-04-25T17:14:26Z"));
        model = BinaryData.fromObject(model).toObject(UeConnectionInfo4G.class);
        Assertions.assertEquals("wpypqtgsfj", model.locationInfo().locationType());
        Assertions.assertEquals("cbslhhx", model.locationInfo().tac());
        Assertions.assertEquals("db", model.locationInfo().plmn().mcc());
        Assertions.assertEquals("vodhtn", model.locationInfo().plmn().mnc());
        Assertions.assertEquals("irudh", model.globalRanNodeId().plmnId().mcc());
        Assertions.assertEquals("m", model.globalRanNodeId().plmnId().mnc());
        Assertions.assertEquals(1714425112, model.globalRanNodeId().gNbId().bitLength());
        Assertions.assertEquals("dlpagzrcxfail", model.globalRanNodeId().gNbId().gNBValue());
        Assertions.assertEquals("xwmdboxd", model.globalRanNodeId().ngeNbId());
        Assertions.assertEquals("sftufqobrjlna", model.globalRanNodeId().eNbId());
        Assertions.assertEquals("cc", model.globalRanNodeId().n3IwfId());
        Assertions.assertEquals("nhxk", model.globalRanNodeId().wagfId());
        Assertions.assertEquals("v", model.globalRanNodeId().tngfId());
        Assertions.assertEquals("nrzvuljraaer", model.globalRanNodeId().nid());
        Assertions.assertEquals("okqgukkjq", model.perUeTnla());
        Assertions.assertEquals(380919763, model.mmeS1ApId());
        Assertions.assertEquals(1534220522, model.enbS1ApId());
        Assertions.assertEquals("oylaxxul", model.lastVisitedTai());
        Assertions.assertEquals(UeState.DETACHED, model.ueState());
        Assertions.assertEquals(RrcEstablishmentCause.SMS, model.rrcEstablishmentCause());
        Assertions.assertEquals(UeUsageSetting.DATA_CENTRIC, model.ueUsageSetting());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-25T17:14:26Z"), model.lastActivityTime());
    }
}
