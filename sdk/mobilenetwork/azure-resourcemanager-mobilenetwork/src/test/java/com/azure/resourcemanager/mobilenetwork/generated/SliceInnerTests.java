// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.SliceInner;
import com.azure.resourcemanager.mobilenetwork.models.Snssai;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SliceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SliceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Canceled\",\"snssai\":{\"sst\":2043816183,\"sd\":\"rddga\"},\"description\":\"uhiosrsju\"},\"location\":\"fcdis\",\"tags\":{\"rxzbujr\":\"nxzhcze\",\"nlnzonzlrpi\":\"rhqvwrevkh\"},\"id\":\"yw\",\"name\":\"cvjtszcofiz\",\"type\":\"htd\"}")
                .toObject(SliceInner.class);
        Assertions.assertEquals("fcdis", model.location());
        Assertions.assertEquals("nxzhcze", model.tags().get("rxzbujr"));
        Assertions.assertEquals(2043816183, model.snssai().sst());
        Assertions.assertEquals("rddga", model.snssai().sd());
        Assertions.assertEquals("uhiosrsju", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SliceInner model =
            new SliceInner()
                .withLocation("fcdis")
                .withTags(mapOf("rxzbujr", "nxzhcze", "nlnzonzlrpi", "rhqvwrevkh"))
                .withSnssai(new Snssai().withSst(2043816183).withSd("rddga"))
                .withDescription("uhiosrsju");
        model = BinaryData.fromObject(model).toObject(SliceInner.class);
        Assertions.assertEquals("fcdis", model.location());
        Assertions.assertEquals("nxzhcze", model.tags().get("rxzbujr"));
        Assertions.assertEquals(2043816183, model.snssai().sst());
        Assertions.assertEquals("rddga", model.snssai().sd());
        Assertions.assertEquals("uhiosrsju", model.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
