// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.SliceInner;
import com.azure.resourcemanager.mobilenetwork.models.Snssai;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SliceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SliceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Accepted\",\"snssai\":{\"sst\":593896600,\"sd\":\"sckdlp\"},\"description\":\"zrcxfailcfxwmdbo\"},\"location\":\"fgsftufqob\",\"tags\":{\"cc\":\"nac\",\"kizvytn\":\"knh\"},\"id\":\"zvulj\",\"name\":\"aaeranokqgukk\",\"type\":\"qnvb\"}")
            .toObject(SliceInner.class);
        Assertions.assertEquals("fgsftufqob", model.location());
        Assertions.assertEquals("nac", model.tags().get("cc"));
        Assertions.assertEquals(593896600, model.snssai().sst());
        Assertions.assertEquals("sckdlp", model.snssai().sd());
        Assertions.assertEquals("zrcxfailcfxwmdbo", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SliceInner model = new SliceInner().withLocation("fgsftufqob")
            .withTags(mapOf("cc", "nac", "kizvytn", "knh"))
            .withSnssai(new Snssai().withSst(593896600).withSd("sckdlp"))
            .withDescription("zrcxfailcfxwmdbo");
        model = BinaryData.fromObject(model).toObject(SliceInner.class);
        Assertions.assertEquals("fgsftufqob", model.location());
        Assertions.assertEquals("nac", model.tags().get("cc"));
        Assertions.assertEquals(593896600, model.snssai().sst());
        Assertions.assertEquals("sckdlp", model.snssai().sd());
        Assertions.assertEquals("zrcxfailcfxwmdbo", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
