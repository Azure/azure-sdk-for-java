// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.NaptConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.NaptEnabled;
import com.azure.resourcemanager.mobilenetwork.models.PinholeTimeouts;
import com.azure.resourcemanager.mobilenetwork.models.PortRange;
import com.azure.resourcemanager.mobilenetwork.models.PortReuseHoldTimes;
import org.junit.jupiter.api.Assertions;

public final class NaptConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NaptConfiguration model = BinaryData.fromString(
            "{\"enabled\":\"Enabled\",\"portRange\":{\"minPort\":1719373799,\"maxPort\":1302147866},\"portReuseHoldTime\":{\"tcp\":2025512378,\"udp\":230645799},\"pinholeLimits\":127605943,\"pinholeTimeouts\":{\"tcp\":1912467695,\"udp\":220700122,\"icmp\":672653689}}")
            .toObject(NaptConfiguration.class);
        Assertions.assertEquals(NaptEnabled.ENABLED, model.enabled());
        Assertions.assertEquals(1719373799, model.portRange().minPort());
        Assertions.assertEquals(1302147866, model.portRange().maxPort());
        Assertions.assertEquals(2025512378, model.portReuseHoldTime().tcp());
        Assertions.assertEquals(230645799, model.portReuseHoldTime().udp());
        Assertions.assertEquals(127605943, model.pinholeLimits());
        Assertions.assertEquals(1912467695, model.pinholeTimeouts().tcp());
        Assertions.assertEquals(220700122, model.pinholeTimeouts().udp());
        Assertions.assertEquals(672653689, model.pinholeTimeouts().icmp());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NaptConfiguration model = new NaptConfiguration().withEnabled(NaptEnabled.ENABLED)
            .withPortRange(new PortRange().withMinPort(1719373799).withMaxPort(1302147866))
            .withPortReuseHoldTime(new PortReuseHoldTimes().withTcp(2025512378).withUdp(230645799))
            .withPinholeLimits(127605943)
            .withPinholeTimeouts(new PinholeTimeouts().withTcp(1912467695).withUdp(220700122).withIcmp(672653689));
        model = BinaryData.fromObject(model).toObject(NaptConfiguration.class);
        Assertions.assertEquals(NaptEnabled.ENABLED, model.enabled());
        Assertions.assertEquals(1719373799, model.portRange().minPort());
        Assertions.assertEquals(1302147866, model.portRange().maxPort());
        Assertions.assertEquals(2025512378, model.portReuseHoldTime().tcp());
        Assertions.assertEquals(230645799, model.portReuseHoldTime().udp());
        Assertions.assertEquals(127605943, model.pinholeLimits());
        Assertions.assertEquals(1912467695, model.pinholeTimeouts().tcp());
        Assertions.assertEquals(220700122, model.pinholeTimeouts().udp());
        Assertions.assertEquals(672653689, model.pinholeTimeouts().icmp());
    }
}
