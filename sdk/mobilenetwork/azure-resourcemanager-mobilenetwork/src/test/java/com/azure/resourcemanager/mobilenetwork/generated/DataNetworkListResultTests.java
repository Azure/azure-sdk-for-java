// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.DataNetworkInner;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataNetworkListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataNetworkListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"description\":\"a\"},\"location\":\"uhrzayvvt\",\"tags\":{\"ftutqxlngxlefgu\":\"dfgiot\",\"qmi\":\"nxkrx\"},\"id\":\"tthzrvqd\",\"name\":\"abhjybi\",\"type\":\"ehoqfbowskan\"}],\"nextLink\":\"tzlcuiywgqywgn\"}")
            .toObject(DataNetworkListResult.class);
        Assertions.assertEquals("uhrzayvvt", model.value().get(0).location());
        Assertions.assertEquals("dfgiot", model.value().get(0).tags().get("ftutqxlngxlefgu"));
        Assertions.assertEquals("a", model.value().get(0).description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataNetworkListResult model
            = new DataNetworkListResult().withValue(Arrays.asList(new DataNetworkInner().withLocation("uhrzayvvt")
                .withTags(mapOf("ftutqxlngxlefgu", "dfgiot", "qmi", "nxkrx"))
                .withDescription("a")));
        model = BinaryData.fromObject(model).toObject(DataNetworkListResult.class);
        Assertions.assertEquals("uhrzayvvt", model.value().get(0).location());
        Assertions.assertEquals("dfgiot", model.value().get(0).tags().get("ftutqxlngxlefgu"));
        Assertions.assertEquals("a", model.value().get(0).description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
