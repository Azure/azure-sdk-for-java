// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AttachedDataNetwork;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import com.azure.resourcemanager.mobilenetwork.models.NaptConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.NaptEnabled;
import com.azure.resourcemanager.mobilenetwork.models.PinholeTimeouts;
import com.azure.resourcemanager.mobilenetwork.models.PortRange;
import com.azure.resourcemanager.mobilenetwork.models.PortReuseHoldTimes;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AttachedDataNetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"userPlaneDataInterface\":{\"name\":\"rrmhwrbfdp\",\"ipv4Address\":\"lubhvjg\",\"ipv4Subnet\":\"ocu\",\"ipv4Gateway\":\"lw\",\"vlanId\":1284227714,\"ipv4AddressList\":[\"hoocl\",\"tnpqmemczjk\"],\"bfdIpv4Endpoints\":[\"kyujxsglhsrrr\",\"ejylmbkzu\"]},\"dnsAddresses\":[\"igrfihotjewl\",\"xuzzjgnrefq\",\"hqo\",\"oihiqak\"],\"naptConfiguration\":{\"enabled\":\"Enabled\",\"portRange\":{\"minPort\":1733569114,\"maxPort\":995984285},\"portReuseHoldTime\":{\"tcp\":1946832159,\"udp\":1162444848},\"pinholeLimits\":1216566407,\"pinholeTimeouts\":{\"tcp\":1331180848,\"udp\":1755725688,\"icmp\":1827970432}},\"userEquipmentAddressPoolPrefix\":[\"sipi\"],\"userEquipmentStaticAddressPoolPrefix\":[\"bebjfu\",\"bmoichd\"]},\"location\":\"nfpubntnbatz\",\"tags\":{\"attcju\":\"sowsaael\"},\"id\":\"plrvkmjcwmjvlg\",\"name\":\"ggcvk\",\"type\":\"y\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AttachedDataNetwork response = manager.attachedDataNetworks()
            .define("oshbragapyy")
            .withRegion("wefohecbvo")
            .withExistingPacketCoreDataPlane("rrvwey", "xoy", "ukphaimmoiroq")
            .withUserPlaneDataInterface(new InterfaceProperties().withName("vbpavbopfppdbw")
                .withIpv4Address("pgahxkumas")
                .withIpv4Subnet("aacfdmmc")
                .withIpv4Gateway("g")
                .withVlanId(1836074224)
                .withIpv4AddressList(Arrays.asList("pvufhbze", "ewhoqh", "lbqnbldxeacl"))
                .withBfdIpv4Endpoints(Arrays.asList("horimkr", "r", "moucsofldpuviyfc")))
            .withDnsAddresses(Arrays.asList("beolh", "hlvbmxu", "ibsxtkcud"))
            .withTags(mapOf("leallklm", "dy", "rdfjmzsyzfhotl", "khlowkxxpv"))
            .withNaptConfiguration(new NaptConfiguration().withEnabled(NaptEnabled.ENABLED)
                .withPortRange(new PortRange().withMinPort(312817267).withMaxPort(1013426268))
                .withPortReuseHoldTime(new PortReuseHoldTimes().withTcp(698476500).withUdp(1137080537))
                .withPinholeLimits(1889972002)
                .withPinholeTimeouts(new PinholeTimeouts().withTcp(979302562).withUdp(477093284).withIcmp(782226782)))
            .withUserEquipmentAddressPoolPrefix(Arrays.asList("hqykizmdk", "aoaf", "luqvoxmycjimryv"))
            .withUserEquipmentStaticAddressPoolPrefix(Arrays.asList("wwpbmzgwesyd"))
            .create();

        Assertions.assertEquals("nfpubntnbatz", response.location());
        Assertions.assertEquals("sowsaael", response.tags().get("attcju"));
        Assertions.assertEquals("rrmhwrbfdp", response.userPlaneDataInterface().name());
        Assertions.assertEquals("lubhvjg", response.userPlaneDataInterface().ipv4Address());
        Assertions.assertEquals("ocu", response.userPlaneDataInterface().ipv4Subnet());
        Assertions.assertEquals("lw", response.userPlaneDataInterface().ipv4Gateway());
        Assertions.assertEquals(1284227714, response.userPlaneDataInterface().vlanId());
        Assertions.assertEquals("hoocl", response.userPlaneDataInterface().ipv4AddressList().get(0));
        Assertions.assertEquals("kyujxsglhsrrr", response.userPlaneDataInterface().bfdIpv4Endpoints().get(0));
        Assertions.assertEquals("igrfihotjewl", response.dnsAddresses().get(0));
        Assertions.assertEquals(NaptEnabled.ENABLED, response.naptConfiguration().enabled());
        Assertions.assertEquals(1733569114, response.naptConfiguration().portRange().minPort());
        Assertions.assertEquals(995984285, response.naptConfiguration().portRange().maxPort());
        Assertions.assertEquals(1946832159, response.naptConfiguration().portReuseHoldTime().tcp());
        Assertions.assertEquals(1162444848, response.naptConfiguration().portReuseHoldTime().udp());
        Assertions.assertEquals(1216566407, response.naptConfiguration().pinholeLimits());
        Assertions.assertEquals(1331180848, response.naptConfiguration().pinholeTimeouts().tcp());
        Assertions.assertEquals(1755725688, response.naptConfiguration().pinholeTimeouts().udp());
        Assertions.assertEquals(1827970432, response.naptConfiguration().pinholeTimeouts().icmp());
        Assertions.assertEquals("sipi", response.userEquipmentAddressPoolPrefix().get(0));
        Assertions.assertEquals("bebjfu", response.userEquipmentStaticAddressPoolPrefix().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
