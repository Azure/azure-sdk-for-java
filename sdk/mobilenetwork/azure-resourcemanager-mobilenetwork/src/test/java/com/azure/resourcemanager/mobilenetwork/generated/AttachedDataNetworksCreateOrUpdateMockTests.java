// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AttachedDataNetwork;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import com.azure.resourcemanager.mobilenetwork.models.NaptConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.NaptEnabled;
import com.azure.resourcemanager.mobilenetwork.models.PinholeTimeouts;
import com.azure.resourcemanager.mobilenetwork.models.PortRange;
import com.azure.resourcemanager.mobilenetwork.models.PortReuseHoldTimes;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AttachedDataNetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"userPlaneDataInterface\":{\"name\":\"uwm\",\"ipv4Address\":\"pkcdqzhlct\",\"ipv4Subnet\":\"unqndyfpchrqb\",\"ipv4Gateway\":\"jrcg\"},\"dnsAddresses\":[\"ydcwboxjumv\",\"qoli\"],\"naptConfiguration\":{\"enabled\":\"Disabled\",\"portRange\":{\"minPort\":1564106365,\"maxPort\":1508462488},\"portReuseHoldTime\":{\"tcp\":1002121154,\"udp\":1218728383},\"pinholeLimits\":617532608,\"pinholeTimeouts\":{\"tcp\":465765494,\"udp\":1541278105,\"icmp\":1492295803}},\"userEquipmentAddressPoolPrefix\":[\"flrzpas\",\"cb\",\"uimzdlyjd\",\"qwmkyoquf\"],\"userEquipmentStaticAddressPoolPrefix\":[\"uzslzojhpctfnmdx\",\"tngfdgugeyzihgr\"]},\"location\":\"ui\",\"tags\":{\"yhsgz\":\"snmfpphojeevy\",\"qgleohibetnluank\":\"czbgomfgbeg\"},\"id\":\"rfxeeebtij\",\"name\":\"acvbmqz\",\"type\":\"qqxlajr\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        MobileNetworkManager manager = MobileNetworkManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        AttachedDataNetwork response = manager.attachedDataNetworks().define("erbdk").withRegion("zsrzpgepq")
            .withExistingPacketCoreDataPlane("reljeamur", "zmlovuanash", "xlpm")
            .withUserPlaneDataInterface(new InterfaceProperties().withName("di").withIpv4Address("zsdbccxjmon")
                .withIpv4Subnet("gnwncypuuwwlt").withIpv4Gateway("qjctzenkeif"))
            .withDnsAddresses(Arrays.asList("hmkdasvfl", "hbxcu", "chxgs"))
            .withTags(mapOf("lixqnrkcxkjibn", "bwwpgdakchzy"))
            .withNaptConfiguration(new NaptConfiguration().withEnabled(NaptEnabled.DISABLED)
                .withPortRange(new PortRange().withMinPort(477372699).withMaxPort(82251270))
                .withPortReuseHoldTime(new PortReuseHoldTimes().withTcp(1131661980).withUdp(2116230034))
                .withPinholeLimits(447073477)
                .withPinholeTimeouts(new PinholeTimeouts().withTcp(842423855).withUdp(65114282).withIcmp(1417596146)))
            .withUserEquipmentAddressPoolPrefix(Arrays.asList("qpbtuodxes", "abbelawumuaslzk"))
            .withUserEquipmentStaticAddressPoolPrefix(Arrays.asList("woycqucwyha", "nomdrkywuhpsv", "uurutlwexxwlalni"))
            .create();

        Assertions.assertEquals("ui", response.location());
        Assertions.assertEquals("snmfpphojeevy", response.tags().get("yhsgz"));
        Assertions.assertEquals("uwm", response.userPlaneDataInterface().name());
        Assertions.assertEquals("pkcdqzhlct", response.userPlaneDataInterface().ipv4Address());
        Assertions.assertEquals("unqndyfpchrqb", response.userPlaneDataInterface().ipv4Subnet());
        Assertions.assertEquals("jrcg", response.userPlaneDataInterface().ipv4Gateway());
        Assertions.assertEquals("ydcwboxjumv", response.dnsAddresses().get(0));
        Assertions.assertEquals(NaptEnabled.DISABLED, response.naptConfiguration().enabled());
        Assertions.assertEquals(1564106365, response.naptConfiguration().portRange().minPort());
        Assertions.assertEquals(1508462488, response.naptConfiguration().portRange().maxPort());
        Assertions.assertEquals(1002121154, response.naptConfiguration().portReuseHoldTime().tcp());
        Assertions.assertEquals(1218728383, response.naptConfiguration().portReuseHoldTime().udp());
        Assertions.assertEquals(617532608, response.naptConfiguration().pinholeLimits());
        Assertions.assertEquals(465765494, response.naptConfiguration().pinholeTimeouts().tcp());
        Assertions.assertEquals(1541278105, response.naptConfiguration().pinholeTimeouts().udp());
        Assertions.assertEquals(1492295803, response.naptConfiguration().pinholeTimeouts().icmp());
        Assertions.assertEquals("flrzpas", response.userEquipmentAddressPoolPrefix().get(0));
        Assertions.assertEquals("uzslzojhpctfnmdx", response.userEquipmentStaticAddressPoolPrefix().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
