// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AttachedDataNetwork;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import com.azure.resourcemanager.mobilenetwork.models.NaptConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.NaptEnabled;
import com.azure.resourcemanager.mobilenetwork.models.PinholeTimeouts;
import com.azure.resourcemanager.mobilenetwork.models.PortRange;
import com.azure.resourcemanager.mobilenetwork.models.PortReuseHoldTimes;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AttachedDataNetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"userPlaneDataInterface\":{\"name\":\"ywakoihk\",\"ipv4Address\":\"mjblmljhlny\",\"ipv4Subnet\":\"otqyry\",\"ipv4Gateway\":\"cbm\"},\"dnsAddresses\":[\"vxmvw\"],\"naptConfiguration\":{\"enabled\":\"Disabled\",\"portRange\":{\"minPort\":414360047,\"maxPort\":1016884622},\"portReuseHoldTime\":{\"tcp\":98251742,\"udp\":1744580177},\"pinholeLimits\":593939862,\"pinholeTimeouts\":{\"tcp\":559578866,\"udp\":1503247909,\"icmp\":489682268}},\"userEquipmentAddressPoolPrefix\":[\"nzoibgsxgnx\",\"yqo\",\"mpqoxw\",\"o\"],\"userEquipmentStaticAddressPoolPrefix\":[\"xiqxeiiqbimh\",\"mwwinhehfqpofv\",\"bcblemb\",\"kbwvqvxkdiv\"]},\"location\":\"heb\",\"tags\":{\"izvcjfe\":\"wbzuwfmdurage\",\"ggbqi\":\"isdju\",\"m\":\"kxkbsazgakgacyr\",\"pv\":\"dmspof\"},\"id\":\"hryl\",\"name\":\"iofrzgbzjedmstk\",\"type\":\"nlvxbcuii\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MobileNetworkManager manager =
            MobileNetworkManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        AttachedDataNetwork response =
            manager
                .attachedDataNetworks()
                .define("zsvtuikzhajqgl")
                .withRegion("glka")
                .withExistingPacketCoreDataPlane("jng", "qdqx", "bjwgnyfus")
                .withUserPlaneDataInterface(
                    new InterfaceProperties()
                        .withName("l")
                        .withIpv4Address("ryxynqnzrd")
                        .withIpv4Subnet("ovw")
                        .withIpv4Gateway("nptgoeiybba"))
                .withDnsAddresses(Arrays.asList("fhvfsl", "vntjlrigjk"))
                .withTags(mapOf("juj", "n", "cpopmxel", "ickpz", "xm", "wcltyjede", "kqscazuawxtzx", "f"))
                .withNaptConfiguration(
                    new NaptConfiguration()
                        .withEnabled(NaptEnabled.ENABLED)
                        .withPortRange(new PortRange().withMinPort(1610623953).withMaxPort(714440003))
                        .withPortReuseHoldTime(new PortReuseHoldTimes().withTcp(2075190734).withUdp(1304895406))
                        .withPinholeLimits(2100581785)
                        .withPinholeTimeouts(
                            new PinholeTimeouts().withTcp(664139919).withUdp(300950097).withIcmp(969722323)))
                .withUserEquipmentAddressPoolPrefix(
                    Arrays.asList("nmmaxrizkzob", "opxlhslnelxieixy", "llxecwc", "ojphslhc"))
                .withUserEquipmentStaticAddressPoolPrefix(Arrays.asList("u", "i", "dwfmvigorqjb", "tzh"))
                .create();

        Assertions.assertEquals("heb", response.location());
        Assertions.assertEquals("wbzuwfmdurage", response.tags().get("izvcjfe"));
        Assertions.assertEquals("ywakoihk", response.userPlaneDataInterface().name());
        Assertions.assertEquals("mjblmljhlny", response.userPlaneDataInterface().ipv4Address());
        Assertions.assertEquals("otqyry", response.userPlaneDataInterface().ipv4Subnet());
        Assertions.assertEquals("cbm", response.userPlaneDataInterface().ipv4Gateway());
        Assertions.assertEquals("vxmvw", response.dnsAddresses().get(0));
        Assertions.assertEquals(NaptEnabled.DISABLED, response.naptConfiguration().enabled());
        Assertions.assertEquals(414360047, response.naptConfiguration().portRange().minPort());
        Assertions.assertEquals(1016884622, response.naptConfiguration().portRange().maxPort());
        Assertions.assertEquals(98251742, response.naptConfiguration().portReuseHoldTime().tcp());
        Assertions.assertEquals(1744580177, response.naptConfiguration().portReuseHoldTime().udp());
        Assertions.assertEquals(593939862, response.naptConfiguration().pinholeLimits());
        Assertions.assertEquals(559578866, response.naptConfiguration().pinholeTimeouts().tcp());
        Assertions.assertEquals(1503247909, response.naptConfiguration().pinholeTimeouts().udp());
        Assertions.assertEquals(489682268, response.naptConfiguration().pinholeTimeouts().icmp());
        Assertions.assertEquals("nzoibgsxgnx", response.userEquipmentAddressPoolPrefix().get(0));
        Assertions.assertEquals("xiqxeiiqbimh", response.userEquipmentStaticAddressPoolPrefix().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
