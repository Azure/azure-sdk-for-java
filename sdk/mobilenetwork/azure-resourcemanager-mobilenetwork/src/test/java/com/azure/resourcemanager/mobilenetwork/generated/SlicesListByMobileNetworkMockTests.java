// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.Slice;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SlicesListByMobileNetworkMockTests {
    @Test
    public void testListByMobileNetwork() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"snssai\":{\"sst\":1754727527,\"sd\":\"jiye\"},\"description\":\"fj\"},\"location\":\"wqrxetfgcwv\",\"tags\":{\"ax\":\"dqntycnawthv\",\"jecehokwc\":\"nuyeamcmhud\",\"rg\":\"qtwloes\"},\"id\":\"vrbnyrukoil\",\"name\":\"ciduwjle\",\"type\":\"pjlh\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Slice> response
            = manager.slices().listByMobileNetwork("mpwctoflds", "acdhztxkbr", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wqrxetfgcwv", response.iterator().next().location());
        Assertions.assertEquals("dqntycnawthv", response.iterator().next().tags().get("ax"));
        Assertions.assertEquals(1754727527, response.iterator().next().snssai().sst());
        Assertions.assertEquals("jiye", response.iterator().next().snssai().sd());
        Assertions.assertEquals("fj", response.iterator().next().description());
    }
}
