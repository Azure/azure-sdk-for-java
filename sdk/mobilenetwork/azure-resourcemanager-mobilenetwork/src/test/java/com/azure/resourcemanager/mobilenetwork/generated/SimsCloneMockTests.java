// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.AsyncOperationStatus;
import com.azure.resourcemanager.mobilenetwork.models.SimClone;
import com.azure.resourcemanager.mobilenetwork.models.SimGroupResourceId;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SimsCloneMockTests {
    @Test
    public void testClone() throws Exception {
        String responseStr
            = "{\"id\":\"umqy\",\"name\":\"ydzulodsaeuzan\",\"status\":\"sfnhsenwphp\",\"resourceId\":\"ngqjclidf\",\"startTime\":\"2021-10-18T07:20:26Z\",\"endTime\":\"2021-09-22T01:59:34Z\",\"percentComplete\":56.212429167759424,\"properties\":\"databeqrkuorh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AsyncOperationStatus response = manager.sims()
            .clone("n", "onhpcz", new SimClone().withTargetSimGroupId(new SimGroupResourceId().withId("mktp"))
                .withSims(Arrays.asList("qcs", "hchkhufm")), com.azure.core.util.Context.NONE);

        Assertions.assertEquals("umqy", response.id());
        Assertions.assertEquals("ydzulodsaeuzan", response.name());
        Assertions.assertEquals("sfnhsenwphp", response.status());
        Assertions.assertEquals("ngqjclidf", response.resourceId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-18T07:20:26Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-22T01:59:34Z"), response.endTime());
        Assertions.assertEquals(56.212429167759424D, response.percentComplete());
    }
}
