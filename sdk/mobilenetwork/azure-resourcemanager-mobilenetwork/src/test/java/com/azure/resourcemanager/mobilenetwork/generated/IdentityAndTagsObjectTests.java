// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.IdentityAndTagsObject;
import com.azure.resourcemanager.mobilenetwork.models.ManagedServiceIdentity;
import com.azure.resourcemanager.mobilenetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mobilenetwork.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IdentityAndTagsObjectTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IdentityAndTagsObject model =
            BinaryData
                .fromString(
                    "{\"identity\":{\"type\":\"None\",\"userAssignedIdentities\":{\"ugxywpmueef\":{\"principalId\":\"b1260cd5-87fb-42f2-b9f6-bfa8ab797d58\",\"clientId\":\"ae2505be-8bea-4895-bc4b-52c38218d619\"},\"fqkquj\":{\"principalId\":\"2a25de92-2645-4b66-850d-48fad614ff17\",\"clientId\":\"47972fa3-d4eb-4fc1-81be-9a4304e74047\"},\"uyonobglaoc\":{\"principalId\":\"3d36b6ae-e21f-453a-b98d-ad192ec61d00\",\"clientId\":\"dce9dd71-af02-4d21-8860-c521fc20d720\"},\"ccm\":{\"principalId\":\"98b4ae50-2f66-4b3b-84d1-9ff359f53a45\",\"clientId\":\"78a0b25e-2161-41cd-aa63-c3501741eca8\"}}},\"tags\":{\"moyrxvwfudwpz\":\"dxyt\",\"rqjbhckfrl\":\"txhdzh\",\"ca\":\"rxsbkyvp\"}}")
                .toObject(IdentityAndTagsObject.class);
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("dxyt", model.tags().get("moyrxvwfudwpz"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IdentityAndTagsObject model =
            new IdentityAndTagsObject()
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.NONE)
                        .withUserAssignedIdentities(
                            mapOf(
                                "ugxywpmueef",
                                new UserAssignedIdentity(),
                                "fqkquj",
                                new UserAssignedIdentity(),
                                "uyonobglaoc",
                                new UserAssignedIdentity(),
                                "ccm",
                                new UserAssignedIdentity())))
                .withTags(mapOf("moyrxvwfudwpz", "dxyt", "rqjbhckfrl", "txhdzh", "ca", "rxsbkyvp"));
        model = BinaryData.fromObject(model).toObject(IdentityAndTagsObject.class);
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("dxyt", model.tags().get("moyrxvwfudwpz"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
