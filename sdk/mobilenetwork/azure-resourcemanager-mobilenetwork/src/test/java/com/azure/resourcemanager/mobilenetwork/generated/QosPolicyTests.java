// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.QosPolicy;
import org.junit.jupiter.api.Assertions;

public final class QosPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        QosPolicy model = BinaryData.fromString(
            "{\"5qi\":393594783,\"allocationAndRetentionPriorityLevel\":912797424,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"bjx\",\"downlink\":\"fw\"}}")
            .toObject(QosPolicy.class);
        Assertions.assertEquals(393594783, model.fiveQi());
        Assertions.assertEquals(912797424, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals("bjx", model.maximumBitRate().uplink());
        Assertions.assertEquals("fw", model.maximumBitRate().downlink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        QosPolicy model = new QosPolicy().withFiveQi(393594783)
            .withAllocationAndRetentionPriorityLevel(912797424)
            .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
            .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
            .withMaximumBitRate(new Ambr().withUplink("bjx").withDownlink("fw"));
        model = BinaryData.fromObject(model).toObject(QosPolicy.class);
        Assertions.assertEquals(393594783, model.fiveQi());
        Assertions.assertEquals(912797424, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals("bjx", model.maximumBitRate().uplink());
        Assertions.assertEquals("fw", model.maximumBitRate().downlink());
    }
}
