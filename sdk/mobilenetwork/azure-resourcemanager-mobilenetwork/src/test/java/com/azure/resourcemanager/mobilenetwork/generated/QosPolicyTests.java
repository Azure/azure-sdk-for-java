// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.QosPolicy;
import org.junit.jupiter.api.Assertions;

public final class QosPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        QosPolicy model =
            BinaryData
                .fromString(
                    "{\"5qi\":1698371946,\"allocationAndRetentionPriorityLevel\":523614486,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"maximumBitRate\":{\"uplink\":\"hmouwqlgzrfze\",\"downlink\":\"yebizikayuh\"}}")
                .toObject(QosPolicy.class);
        Assertions.assertEquals(1698371946, model.fiveQi());
        Assertions.assertEquals(523614486, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals("hmouwqlgzrfze", model.maximumBitRate().uplink());
        Assertions.assertEquals("yebizikayuh", model.maximumBitRate().downlink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        QosPolicy model =
            new QosPolicy()
                .withFiveQi(1698371946)
                .withAllocationAndRetentionPriorityLevel(523614486)
                .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                .withMaximumBitRate(new Ambr().withUplink("hmouwqlgzrfze").withDownlink("yebizikayuh"));
        model = BinaryData.fromObject(model).toObject(QosPolicy.class);
        Assertions.assertEquals(1698371946, model.fiveQi());
        Assertions.assertEquals(523614486, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals("hmouwqlgzrfze", model.maximumBitRate().uplink());
        Assertions.assertEquals("yebizikayuh", model.maximumBitRate().downlink());
    }
}
