// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.QosPolicy;
import org.junit.jupiter.api.Assertions;

public final class QosPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        QosPolicy model =
            BinaryData
                .fromString(
                    "{\"5qi\":1458242132,\"allocationAndRetentionPriorityLevel\":2100624724,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"maximumBitRate\":{\"uplink\":\"yhgsopbyrqufe\",\"downlink\":\"xuvw\"}}")
                .toObject(QosPolicy.class);
        Assertions.assertEquals(1458242132, model.fiveQi());
        Assertions.assertEquals(2100624724, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals("yhgsopbyrqufe", model.maximumBitRate().uplink());
        Assertions.assertEquals("xuvw", model.maximumBitRate().downlink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        QosPolicy model =
            new QosPolicy()
                .withFiveQi(1458242132)
                .withAllocationAndRetentionPriorityLevel(2100624724)
                .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                .withMaximumBitRate(new Ambr().withUplink("yhgsopbyrqufe").withDownlink("xuvw"));
        model = BinaryData.fromObject(model).toObject(QosPolicy.class);
        Assertions.assertEquals(1458242132, model.fiveQi());
        Assertions.assertEquals(2100624724, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals("yhgsopbyrqufe", model.maximumBitRate().uplink());
        Assertions.assertEquals("xuvw", model.maximumBitRate().downlink());
    }
}
