// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.SiteInner;
import com.azure.resourcemanager.mobilenetwork.models.SiteListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SiteListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SiteListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"provisioningState\":\"Unknown\",\"networkFunctions\":[{\"id\":\"dhttzaefedxihchr\"},{\"id\":\"k\"},{\"id\":\"rjdqnsdfzp\"},{\"id\":\"tg\"}]},\"location\":\"lkdghr\",\"tags\":{\"bwnhhtql\":\"utlwxezwzhok\",\"pifhpfeoajvgcxtx\":\"ehgpp\",\"smkss\":\"csheafidltugsr\",\"iftxfkf\":\"h\"},\"id\":\"egprhptil\",\"name\":\"ucb\",\"type\":\"qtgdqohmcwsl\"},{\"properties\":{\"provisioningState\":\"Succeeded\",\"networkFunctions\":[{\"id\":\"wbralllibphbqzm\"}]},\"location\":\"aka\",\"tags\":{\"lhjlmuoyxprimr\":\"kjpdnjzhajo\",\"eislstvasylwx\":\"opteecj\",\"eoohguufuzboyj\":\"zaum\"},\"id\":\"thwtzol\",\"name\":\"a\",\"type\":\"mwmdxmebwjscjpa\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"networkFunctions\":[{\"id\":\"f\"}]},\"location\":\"nmwmqtibx\",\"tags\":{\"dija\":\"ddtvqctt\",\"sieekpndzaapm\":\"ukm\"},\"id\":\"dqmeqwigpibudq\",\"name\":\"yxeb\",\"type\":\"ybpmzznrtffyaq\"}],\"nextLink\":\"mhh\"}")
                .toObject(SiteListResult.class);
        Assertions.assertEquals("lkdghr", model.value().get(0).location());
        Assertions.assertEquals("utlwxezwzhok", model.value().get(0).tags().get("bwnhhtql"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SiteListResult model =
            new SiteListResult()
                .withValue(
                    Arrays
                        .asList(
                            new SiteInner()
                                .withLocation("lkdghr")
                                .withTags(
                                    mapOf(
                                        "bwnhhtql",
                                        "utlwxezwzhok",
                                        "pifhpfeoajvgcxtx",
                                        "ehgpp",
                                        "smkss",
                                        "csheafidltugsr",
                                        "iftxfkf",
                                        "h")),
                            new SiteInner()
                                .withLocation("aka")
                                .withTags(
                                    mapOf(
                                        "lhjlmuoyxprimr",
                                        "kjpdnjzhajo",
                                        "eislstvasylwx",
                                        "opteecj",
                                        "eoohguufuzboyj",
                                        "zaum")),
                            new SiteInner()
                                .withLocation("nmwmqtibx")
                                .withTags(mapOf("dija", "ddtvqctt", "sieekpndzaapm", "ukm"))));
        model = BinaryData.fromObject(model).toObject(SiteListResult.class);
        Assertions.assertEquals("lkdghr", model.value().get(0).location());
        Assertions.assertEquals("utlwxezwzhok", model.value().get(0).tags().get("bwnhhtql"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
