// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.SiteInner;
import com.azure.resourcemanager.mobilenetwork.models.SiteListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SiteListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SiteListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"networkFunctions\":[{\"id\":\"ebjvewzcjzn\"},{\"id\":\"cpmguaadraufact\"},{\"id\":\"hzovaj\"}]},\"location\":\"iuxxpshneekulfg\",\"tags\":{\"rds\":\"ubkwdle\",\"hminyflnorwmduv\":\"tujbazpju\"},\"id\":\"pklvxw\",\"name\":\"ygdxpgpqchis\",\"type\":\"epn\"},{\"properties\":{\"provisioningState\":\"Deleted\",\"networkFunctions\":[{\"id\":\"ibbdaxconfoza\"},{\"id\":\"rsukokwbqplh\"}]},\"location\":\"nuuepzlrp\",\"tags\":{\"nnrwrbiork\":\"soldweyuqdunv\",\"xmsivfomiloxggdu\":\"alywjhhgdn\"},\"id\":\"iqndieuzaofj\",\"name\":\"hvcyyysfg\",\"type\":\"otcubi\"},{\"properties\":{\"provisioningState\":\"Deleted\",\"networkFunctions\":[{\"id\":\"qonmacj\"}]},\"location\":\"nizshqvcim\",\"tags\":{\"ccwr\":\"fgmblrrilbywdxsm\",\"dvoqyt\":\"fscjfnynszquji\",\"hjoxo\":\"byowbblgyavutp\"},\"id\":\"smsks\",\"name\":\"pi\",\"type\":\"lqol\"}],\"nextLink\":\"kcgxxlxsffgcvi\"}")
            .toObject(SiteListResult.class);
        Assertions.assertEquals("iuxxpshneekulfg", model.value().get(0).location());
        Assertions.assertEquals("ubkwdle", model.value().get(0).tags().get("rds"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SiteListResult model = new SiteListResult().withValue(Arrays.asList(
            new SiteInner().withLocation("iuxxpshneekulfg")
                .withTags(mapOf("rds", "ubkwdle", "hminyflnorwmduv", "tujbazpju")),
            new SiteInner().withLocation("nuuepzlrp")
                .withTags(mapOf("nnrwrbiork", "soldweyuqdunv", "xmsivfomiloxggdu", "alywjhhgdn")),
            new SiteInner().withLocation("nizshqvcim")
                .withTags(mapOf("ccwr", "fgmblrrilbywdxsm", "dvoqyt", "fscjfnynszquji", "hjoxo", "byowbblgyavutp"))));
        model = BinaryData.fromObject(model).toObject(SiteListResult.class);
        Assertions.assertEquals("iuxxpshneekulfg", model.value().get(0).location());
        Assertions.assertEquals("ubkwdle", model.value().get(0).tags().get("rds"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
