// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.SiteInner;
import com.azure.resourcemanager.mobilenetwork.models.SiteListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SiteListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SiteListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"networkFunctions\":[{\"id\":\"clrcivtsox\"},{\"id\":\"kenx\"}]},\"location\":\"yyefrpmpdnqqs\",\"tags\":{\"vmm\":\"ao\",\"itgvkx\":\"npqfrtqlkzmeg\"},\"id\":\"zyqdrfegcealzx\",\"name\":\"hcans\",\"type\":\"moy\"},{\"properties\":{\"provisioningState\":\"Deleting\",\"networkFunctions\":[{\"id\":\"ivbkbxgomfaj\"},{\"id\":\"asqvd\"},{\"id\":\"y\"}]},\"location\":\"uxakjsqzhzbezk\",\"tags\":{\"vvjskgfmocwahp\":\"sidxasicdd\",\"eaahhvjhhn\":\"gat\",\"jjidjk\":\"kzyb\",\"vblbjednljlageua\":\"yxkyxvx\"},\"id\":\"lxunsmjbnkppxy\",\"name\":\"enlsvxeizzgwkln\",\"type\":\"rmffeyc\"},{\"properties\":{\"provisioningState\":\"Deleting\",\"networkFunctions\":[{\"id\":\"merteeammxqiek\"},{\"id\":\"zddrt\"},{\"id\":\"doj\"},{\"id\":\"xv\"}]},\"location\":\"refdee\",\"tags\":{\"s\":\"cuijpxt\",\"wsawddjibabxvi\":\"wprtu\",\"tfgle\":\"itvtzeexavo\"},\"id\":\"dmdqb\",\"name\":\"pypqtgsfj\",\"type\":\"cbslhhx\"}],\"nextLink\":\"bxv\"}")
            .toObject(SiteListResult.class);
        Assertions.assertEquals("yyefrpmpdnqqs", model.value().get(0).location());
        Assertions.assertEquals("ao", model.value().get(0).tags().get("vmm"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SiteListResult model = new SiteListResult().withValue(Arrays.asList(
            new SiteInner().withLocation("yyefrpmpdnqqs").withTags(mapOf("vmm", "ao", "itgvkx", "npqfrtqlkzmeg")),
            new SiteInner().withLocation("uxakjsqzhzbezk")
                .withTags(mapOf("vvjskgfmocwahp", "sidxasicdd", "eaahhvjhhn", "gat", "jjidjk", "kzyb",
                    "vblbjednljlageua", "yxkyxvx")),
            new SiteInner().withLocation("refdee")
                .withTags(mapOf("s", "cuijpxt", "wsawddjibabxvi", "wprtu", "tfgle", "itvtzeexavo"))));
        model = BinaryData.fromObject(model).toObject(SiteListResult.class);
        Assertions.assertEquals("yyefrpmpdnqqs", model.value().get(0).location());
        Assertions.assertEquals("ao", model.value().get(0).tags().get("vmm"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
