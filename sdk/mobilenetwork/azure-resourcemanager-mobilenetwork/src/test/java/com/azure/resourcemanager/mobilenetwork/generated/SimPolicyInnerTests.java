// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.SimPolicyInner;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.PduSessionType;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.ServiceResourceId;
import com.azure.resourcemanager.mobilenetwork.models.SliceConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.SliceResourceId;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SimPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SimPolicyInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"siteProvisioningState\":{\"tcktyhjtqedcgzu\":\"NotApplicable\",\"mmrqz\":\"Adding\",\"rjvpglydzgkrvqee\":\"Failed\",\"oepry\":\"Deleting\"},\"ueAmbr\":{\"uplink\":\"t\",\"downlink\":\"wytpzdmovz\"},\"defaultSlice\":{\"id\":\"fvaawzqa\"},\"rfspIndex\":1787423883,\"registrationTimer\":97417905,\"sliceConfigurations\":[{\"slice\":{\"id\":\"riglaec\"},\"defaultDataNetwork\":{\"id\":\"ndtic\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"pvz\"},\"sessionAmbr\":{\"uplink\":\"lqtmldgxob\",\"downlink\":\"irclnpk\"},\"5qi\":1115944872,\"allocationAndRetentionPriorityLevel\":1763691901,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"defaultSessionType\":\"IPv6\",\"additionalAllowedSessionTypes\":[\"IPv6\"],\"allowedServices\":[{\"id\":\"jlb\"},{\"id\":\"xqvkjlmxhomdyn\"},{\"id\":\"dwdigumb\"}],\"maximumNumberOfBufferedPackets\":1256720827},{\"dataNetwork\":{\"id\":\"auzzptjazysd\"},\"sessionAmbr\":{\"uplink\":\"hezwwvaiq\",\"downlink\":\"uvvfonkp\"},\"5qi\":1476796114,\"allocationAndRetentionPriorityLevel\":157079545,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv6\",\"IPv4\",\"IPv4\"],\"allowedServices\":[{\"id\":\"mncsttijfybvp\"}],\"maximumNumberOfBufferedPackets\":1661659645}]}]},\"location\":\"sgsgbdhu\",\"tags\":{\"zvhxnk\":\"njdgkynscliq\",\"bo\":\"mtk\",\"hihfrbbcevqagtlt\":\"ppnvdxz\",\"vgtrdcnifmzzs\":\"hlfkqojpy\"},\"id\":\"ymbrnysuxmpraf\",\"name\":\"g\",\"type\":\"khocxvdfffwaf\"}")
            .toObject(SimPolicyInner.class);
        Assertions.assertEquals("sgsgbdhu", model.location());
        Assertions.assertEquals("njdgkynscliq", model.tags().get("zvhxnk"));
        Assertions.assertEquals("t", model.ueAmbr().uplink());
        Assertions.assertEquals("wytpzdmovz", model.ueAmbr().downlink());
        Assertions.assertEquals("fvaawzqa", model.defaultSlice().id());
        Assertions.assertEquals(1787423883, model.rfspIndex());
        Assertions.assertEquals(97417905, model.registrationTimer());
        Assertions.assertEquals("riglaec", model.sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("ndtic", model.sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("pvz",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("lqtmldgxob",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("irclnpk",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().downlink());
        Assertions.assertEquals(1115944872,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).fiveQi());
        Assertions.assertEquals(1763691901,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV6,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV6,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .additionalAllowedSessionTypes()
                .get(0));
        Assertions.assertEquals("jlb",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).allowedServices().get(0).id());
        Assertions.assertEquals(1256720827,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).maximumNumberOfBufferedPackets());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SimPolicyInner model
            = new SimPolicyInner().withLocation("sgsgbdhu")
                .withTags(mapOf("zvhxnk", "njdgkynscliq", "bo", "mtk", "hihfrbbcevqagtlt", "ppnvdxz", "vgtrdcnifmzzs",
                    "hlfkqojpy"))
                .withUeAmbr(new Ambr().withUplink("t").withDownlink("wytpzdmovz"))
                .withDefaultSlice(new SliceResourceId().withId("fvaawzqa"))
                .withRfspIndex(1787423883)
                .withRegistrationTimer(97417905)
                .withSliceConfigurations(
                    Arrays
                        .asList(
                            new SliceConfiguration().withSlice(new SliceResourceId().withId("riglaec"))
                                .withDefaultDataNetwork(new DataNetworkResourceId().withId("ndtic"))
                                .withDataNetworkConfigurations(
                                    Arrays.asList(
                                        new DataNetworkConfiguration()
                                            .withDataNetwork(new DataNetworkResourceId().withId("pvz"))
                                            .withSessionAmbr(
                                                new Ambr().withUplink("lqtmldgxob").withDownlink("irclnpk"))
                                            .withFiveQi(1115944872)
                                            .withAllocationAndRetentionPriorityLevel(1763691901)
                                            .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                                            .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                                            .withDefaultSessionType(PduSessionType.IPV6)
                                            .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV6))
                                            .withAllowedServices(Arrays.asList(
                                                new ServiceResourceId().withId("jlb"),
                                                new ServiceResourceId().withId("xqvkjlmxhomdyn"),
                                                new ServiceResourceId().withId("dwdigumb")))
                                            .withMaximumNumberOfBufferedPackets(1256720827),
                                        new DataNetworkConfiguration()
                                            .withDataNetwork(new DataNetworkResourceId().withId("auzzptjazysd"))
                                            .withSessionAmbr(
                                                new Ambr().withUplink("hezwwvaiq").withDownlink("uvvfonkp"))
                                            .withFiveQi(1476796114)
                                            .withAllocationAndRetentionPriorityLevel(157079545)
                                            .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                                            .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                                            .withDefaultSessionType(PduSessionType.IPV4)
                                            .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV6,
                                                PduSessionType.IPV4, PduSessionType.IPV4))
                                            .withAllowedServices(
                                                Arrays.asList(new ServiceResourceId().withId("mncsttijfybvp")))
                                            .withMaximumNumberOfBufferedPackets(1661659645)))));
        model = BinaryData.fromObject(model).toObject(SimPolicyInner.class);
        Assertions.assertEquals("sgsgbdhu", model.location());
        Assertions.assertEquals("njdgkynscliq", model.tags().get("zvhxnk"));
        Assertions.assertEquals("t", model.ueAmbr().uplink());
        Assertions.assertEquals("wytpzdmovz", model.ueAmbr().downlink());
        Assertions.assertEquals("fvaawzqa", model.defaultSlice().id());
        Assertions.assertEquals(1787423883, model.rfspIndex());
        Assertions.assertEquals(97417905, model.registrationTimer());
        Assertions.assertEquals("riglaec", model.sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("ndtic", model.sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("pvz",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("lqtmldgxob",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("irclnpk",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().downlink());
        Assertions.assertEquals(1115944872,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).fiveQi());
        Assertions.assertEquals(1763691901,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV6,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV6,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .additionalAllowedSessionTypes()
                .get(0));
        Assertions.assertEquals("jlb",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).allowedServices().get(0).id());
        Assertions.assertEquals(1256720827,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).maximumNumberOfBufferedPackets());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
