// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.SimPolicyInner;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.PduSessionType;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.ServiceResourceId;
import com.azure.resourcemanager.mobilenetwork.models.SliceConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.SliceResourceId;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SimPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SimPolicyInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Deleted\",\"siteProvisioningState\":{\"rmbzo\":\"Updating\"},\"ueAmbr\":{\"uplink\":\"okixrjqcir\",\"downlink\":\"zpfrla\"},\"defaultSlice\":{\"id\":\"szrnwo\"},\"rfspIndex\":1723984044,\"registrationTimer\":427413462,\"sliceConfigurations\":[{\"slice\":{\"id\":\"wp\"},\"defaultDataNetwork\":{\"id\":\"ylwbtlhflsjcdhsz\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"vfbgofeljagrqmqh\"},\"sessionAmbr\":{\"uplink\":\"dvriiiojnal\",\"downlink\":\"hfkvtvsexsowuel\"},\"5qi\":1968234640,\"allocationAndRetentionPriorityLevel\":1709132634,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv6\"],\"allowedServices\":[{\"id\":\"pjgwwspug\"},{\"id\":\"ftqsxhqxujxuk\"}],\"maximumNumberOfBufferedPackets\":1615725858},{\"dataNetwork\":{\"id\":\"digrjguufzdmsyqt\"},\"sessionAmbr\":{\"uplink\":\"ihwhbotzingamvpp\",\"downlink\":\"o\"},\"5qi\":1799279870,\"allocationAndRetentionPriorityLevel\":1534302042,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv4\"],\"allowedServices\":[{\"id\":\"wynwcvtbvkayhm\"},{\"id\":\"nvyq\"},{\"id\":\"atkzwpcnpw\"},{\"id\":\"cjaesgvvs\"}],\"maximumNumberOfBufferedPackets\":1469869368},{\"dataNetwork\":{\"id\":\"ajguqf\"},\"sessionAmbr\":{\"uplink\":\"wygzlvdnkfxusem\",\"downlink\":\"wzrmuh\"},\"5qi\":1693108330,\"allocationAndRetentionPriorityLevel\":857980637,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"defaultSessionType\":\"IPv6\",\"additionalAllowedSessionTypes\":[\"IPv4\",\"IPv4\",\"IPv6\"],\"allowedServices\":[{\"id\":\"ymgc\"},{\"id\":\"elvezrypq\"},{\"id\":\"mfe\"}],\"maximumNumberOfBufferedPackets\":1181848977}]}]},\"location\":\"qwkyhkobop\",\"tags\":{\"pbqpcrfkbwccsn\":\"dkow\",\"htjsying\":\"vcdwxlpqekftn\",\"tmtdhtmdvypgik\":\"fq\",\"irryuzhlh\":\"gszywk\"},\"id\":\"joqrvqqaatj\",\"name\":\"nrvgoupmfiibfgg\",\"type\":\"ioolvrwxkvtkkgll\"}")
            .toObject(SimPolicyInner.class);
        Assertions.assertEquals("qwkyhkobop", model.location());
        Assertions.assertEquals("dkow", model.tags().get("pbqpcrfkbwccsn"));
        Assertions.assertEquals("okixrjqcir", model.ueAmbr().uplink());
        Assertions.assertEquals("zpfrla", model.ueAmbr().downlink());
        Assertions.assertEquals("szrnwo", model.defaultSlice().id());
        Assertions.assertEquals(1723984044, model.rfspIndex());
        Assertions.assertEquals(427413462, model.registrationTimer());
        Assertions.assertEquals("wp", model.sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("ylwbtlhflsjcdhsz", model.sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("vfbgofeljagrqmqh",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("dvriiiojnal",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("hfkvtvsexsowuel",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().downlink());
        Assertions.assertEquals(1968234640,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).fiveQi());
        Assertions.assertEquals(1709132634, model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0)
            .allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV4,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV6, model.sliceConfigurations().get(0).dataNetworkConfigurations()
            .get(0).additionalAllowedSessionTypes().get(0));
        Assertions.assertEquals("pjgwwspug",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).allowedServices().get(0).id());
        Assertions.assertEquals(1615725858,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).maximumNumberOfBufferedPackets());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SimPolicyInner model
            = new SimPolicyInner().withLocation("qwkyhkobop")
                .withTags(mapOf("pbqpcrfkbwccsn", "dkow", "htjsying", "vcdwxlpqekftn", "tmtdhtmdvypgik", "fq",
                    "irryuzhlh", "gszywk"))
                .withUeAmbr(new Ambr().withUplink("okixrjqcir").withDownlink("zpfrla"))
                .withDefaultSlice(
                    new SliceResourceId().withId("szrnwo"))
                .withRfspIndex(
                    1723984044)
                .withRegistrationTimer(
                    427413462)
                .withSliceConfigurations(
                    Arrays
                        .asList(new SliceConfiguration().withSlice(new SliceResourceId().withId("wp"))
                            .withDefaultDataNetwork(
                                new DataNetworkResourceId().withId("ylwbtlhflsjcdhsz"))
                            .withDataNetworkConfigurations(Arrays.asList(
                                new DataNetworkConfiguration()
                                    .withDataNetwork(new DataNetworkResourceId().withId("vfbgofeljagrqmqh"))
                                    .withSessionAmbr(
                                        new Ambr().withUplink("dvriiiojnal").withDownlink("hfkvtvsexsowuel"))
                                    .withFiveQi(1968234640).withAllocationAndRetentionPriorityLevel(1709132634)
                                    .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                                    .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                                    .withDefaultSessionType(PduSessionType.IPV4)
                                    .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV6))
                                    .withAllowedServices(
                                        Arrays.asList(new ServiceResourceId().withId("pjgwwspug"),
                                            new ServiceResourceId().withId("ftqsxhqxujxuk")))
                                    .withMaximumNumberOfBufferedPackets(1615725858),
                                new DataNetworkConfiguration()
                                    .withDataNetwork(new DataNetworkResourceId().withId("digrjguufzdmsyqt"))
                                    .withSessionAmbr(new Ambr().withUplink("ihwhbotzingamvpp").withDownlink("o"))
                                    .withFiveQi(1799279870).withAllocationAndRetentionPriorityLevel(1534302042)
                                    .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                                    .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                                    .withDefaultSessionType(PduSessionType.IPV4)
                                    .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV4))
                                    .withAllowedServices(
                                        Arrays.asList(new ServiceResourceId().withId("wynwcvtbvkayhm"),
                                            new ServiceResourceId().withId("nvyq"), new ServiceResourceId()
                                                .withId("atkzwpcnpw"),
                                            new ServiceResourceId().withId("cjaesgvvs")))
                                    .withMaximumNumberOfBufferedPackets(1469869368),
                                new DataNetworkConfiguration()
                                    .withDataNetwork(new DataNetworkResourceId().withId("ajguqf"))
                                    .withSessionAmbr(new Ambr().withUplink("wygzlvdnkfxusem").withDownlink("wzrmuh"))
                                    .withFiveQi(1693108330).withAllocationAndRetentionPriorityLevel(857980637)
                                    .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                                    .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                                    .withDefaultSessionType(PduSessionType.IPV6)
                                    .withAdditionalAllowedSessionTypes(
                                        Arrays.asList(PduSessionType.IPV4, PduSessionType.IPV4, PduSessionType.IPV6))
                                    .withAllowedServices(Arrays.asList(new ServiceResourceId().withId("ymgc"),
                                        new ServiceResourceId().withId("elvezrypq"),
                                        new ServiceResourceId().withId("mfe")))
                                    .withMaximumNumberOfBufferedPackets(1181848977)))));
        model = BinaryData.fromObject(model).toObject(SimPolicyInner.class);
        Assertions.assertEquals("qwkyhkobop", model.location());
        Assertions.assertEquals("dkow", model.tags().get("pbqpcrfkbwccsn"));
        Assertions.assertEquals("okixrjqcir", model.ueAmbr().uplink());
        Assertions.assertEquals("zpfrla", model.ueAmbr().downlink());
        Assertions.assertEquals("szrnwo", model.defaultSlice().id());
        Assertions.assertEquals(1723984044, model.rfspIndex());
        Assertions.assertEquals(427413462, model.registrationTimer());
        Assertions.assertEquals("wp", model.sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("ylwbtlhflsjcdhsz", model.sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("vfbgofeljagrqmqh",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("dvriiiojnal",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("hfkvtvsexsowuel",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().downlink());
        Assertions.assertEquals(1968234640,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).fiveQi());
        Assertions.assertEquals(1709132634, model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0)
            .allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV4,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV6, model.sliceConfigurations().get(0).dataNetworkConfigurations()
            .get(0).additionalAllowedSessionTypes().get(0));
        Assertions.assertEquals("pjgwwspug",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).allowedServices().get(0).id());
        Assertions.assertEquals(1615725858,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).maximumNumberOfBufferedPackets());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
