// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.SimPolicyInner;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.PduSessionType;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.ServiceResourceId;
import com.azure.resourcemanager.mobilenetwork.models.SliceConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.SliceResourceId;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SimPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SimPolicyInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"siteProvisioningState\":{\"mywwtkgkxnyed\":\"Updating\"},\"ueAmbr\":{\"uplink\":\"b\",\"downlink\":\"yvudtjuewbci\"},\"defaultSlice\":{\"id\":\"xuuwhcj\"},\"rfspIndex\":1562574982,\"registrationTimer\":1400153044,\"sliceConfigurations\":[{\"slice\":{\"id\":\"vpayakkudzpx\"},\"defaultDataNetwork\":{\"id\":\"wjplma\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"tcyohpfkyrk\"},\"sessionAmbr\":{\"uplink\":\"bdgiogsjk\",\"downlink\":\"nwqjnoba\"},\"5qi\":615088237,\"allocationAndRetentionPriorityLevel\":261138703,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"defaultSessionType\":\"IPv6\",\"additionalAllowedSessionTypes\":[\"IPv4\"],\"allowedServices\":[{\"id\":\"tfpmvmemfnczdw\"},{\"id\":\"vbalxlllc\"},{\"id\":\"podbzevwrdnh\"}],\"maximumNumberOfBufferedPackets\":420547781},{\"dataNetwork\":{\"id\":\"uvsj\"},\"sessionAmbr\":{\"uplink\":\"swsmys\",\"downlink\":\"uluqypfc\"},\"5qi\":291266426,\"allocationAndRetentionPriorityLevel\":631107682,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv6\",\"IPv6\"],\"allowedServices\":[{\"id\":\"widf\"},{\"id\":\"xsspuunnoxyhk\"},{\"id\":\"g\"},{\"id\":\"ddrihpf\"}],\"maximumNumberOfBufferedPackets\":1342446252},{\"dataNetwork\":{\"id\":\"caaewdao\"},\"sessionAmbr\":{\"uplink\":\"djvlpj\",\"downlink\":\"xkzb\"},\"5qi\":2006830876,\"allocationAndRetentionPriorityLevel\":1001888045,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"defaultSessionType\":\"IPv6\",\"additionalAllowedSessionTypes\":[\"IPv4\",\"IPv4\"],\"allowedServices\":[{\"id\":\"jdxon\"}],\"maximumNumberOfBufferedPackets\":170670215},{\"dataNetwork\":{\"id\":\"ggcula\"},\"sessionAmbr\":{\"uplink\":\"z\",\"downlink\":\"y\"},\"5qi\":1152319383,\"allocationAndRetentionPriorityLevel\":1569571564,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv4\"],\"allowedServices\":[{\"id\":\"uajlyj\"},{\"id\":\"lvofqzhvfcibyfmo\"}],\"maximumNumberOfBufferedPackets\":1885560912}]}]},\"location\":\"kjpvdwxf\",\"tags\":{\"jrkambtrnegvmnv\":\"ivwzjbhyzs\",\"qvldspastjbkkd\":\"q\",\"apeewchpxlkt\":\"flvestmjlxrrilo\",\"ufuztcktyhjtq\":\"kuziycsle\"},\"id\":\"dcgzul\",\"name\":\"mmrqz\",\"type\":\"rr\"}")
            .toObject(SimPolicyInner.class);
        Assertions.assertEquals("kjpvdwxf", model.location());
        Assertions.assertEquals("ivwzjbhyzs", model.tags().get("jrkambtrnegvmnv"));
        Assertions.assertEquals("b", model.ueAmbr().uplink());
        Assertions.assertEquals("yvudtjuewbci", model.ueAmbr().downlink());
        Assertions.assertEquals("xuuwhcj", model.defaultSlice().id());
        Assertions.assertEquals(1562574982, model.rfspIndex());
        Assertions.assertEquals(1400153044, model.registrationTimer());
        Assertions.assertEquals("vpayakkudzpx", model.sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("wjplma", model.sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("tcyohpfkyrk",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("bdgiogsjk",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("nwqjnoba",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().downlink());
        Assertions.assertEquals(615088237,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).fiveQi());
        Assertions.assertEquals(261138703,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV6,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV4,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .additionalAllowedSessionTypes()
                .get(0));
        Assertions.assertEquals("tfpmvmemfnczdw",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).allowedServices().get(0).id());
        Assertions.assertEquals(420547781,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).maximumNumberOfBufferedPackets());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SimPolicyInner model
            = new SimPolicyInner().withLocation("kjpvdwxf")
                .withTags(mapOf("jrkambtrnegvmnv", "ivwzjbhyzs", "qvldspastjbkkd", "q", "apeewchpxlkt",
                    "flvestmjlxrrilo", "ufuztcktyhjtq", "kuziycsle"))
                .withUeAmbr(new Ambr().withUplink("b").withDownlink("yvudtjuewbci"))
                .withDefaultSlice(new SliceResourceId().withId("xuuwhcj"))
                .withRfspIndex(1562574982)
                .withRegistrationTimer(1400153044)
                .withSliceConfigurations(
                    Arrays
                        .asList(
                            new SliceConfiguration().withSlice(new SliceResourceId().withId("vpayakkudzpx"))
                                .withDefaultDataNetwork(new DataNetworkResourceId().withId("wjplma"))
                                .withDataNetworkConfigurations(
                                    Arrays.asList(
                                        new DataNetworkConfiguration()
                                            .withDataNetwork(new DataNetworkResourceId().withId("tcyohpfkyrk"))
                                            .withSessionAmbr(
                                                new Ambr().withUplink("bdgiogsjk").withDownlink("nwqjnoba"))
                                            .withFiveQi(615088237)
                                            .withAllocationAndRetentionPriorityLevel(261138703)
                                            .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                                            .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                                            .withDefaultSessionType(PduSessionType.IPV6)
                                            .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV4))
                                            .withAllowedServices(Arrays.asList(
                                                new ServiceResourceId().withId("tfpmvmemfnczdw"),
                                                new ServiceResourceId().withId("vbalxlllc"),
                                                new ServiceResourceId().withId("podbzevwrdnh")))
                                            .withMaximumNumberOfBufferedPackets(420547781),
                                        new DataNetworkConfiguration()
                                            .withDataNetwork(new DataNetworkResourceId().withId("uvsj"))
                                            .withSessionAmbr(new Ambr().withUplink("swsmys").withDownlink("uluqypfc"))
                                            .withFiveQi(291266426)
                                            .withAllocationAndRetentionPriorityLevel(631107682)
                                            .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                                            .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                                            .withDefaultSessionType(PduSessionType.IPV4)
                                            .withAdditionalAllowedSessionTypes(
                                                Arrays.asList(PduSessionType.IPV6, PduSessionType.IPV6))
                                            .withAllowedServices(Arrays.asList(new ServiceResourceId().withId("widf"),
                                                new ServiceResourceId().withId("xsspuunnoxyhk"),
                                                new ServiceResourceId().withId("g"),
                                                new ServiceResourceId().withId("ddrihpf")))
                                            .withMaximumNumberOfBufferedPackets(1342446252),
                                        new DataNetworkConfiguration()
                                            .withDataNetwork(new DataNetworkResourceId().withId("caaewdao"))
                                            .withSessionAmbr(new Ambr().withUplink("djvlpj").withDownlink("xkzb"))
                                            .withFiveQi(2006830876)
                                            .withAllocationAndRetentionPriorityLevel(1001888045)
                                            .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                                            .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                                            .withDefaultSessionType(PduSessionType.IPV6)
                                            .withAdditionalAllowedSessionTypes(
                                                Arrays.asList(PduSessionType.IPV4, PduSessionType.IPV4))
                                            .withAllowedServices(Arrays.asList(new ServiceResourceId().withId("jdxon")))
                                            .withMaximumNumberOfBufferedPackets(170670215),
                                        new DataNetworkConfiguration()
                                            .withDataNetwork(new DataNetworkResourceId().withId("ggcula"))
                                            .withSessionAmbr(new Ambr().withUplink("z").withDownlink("y"))
                                            .withFiveQi(1152319383)
                                            .withAllocationAndRetentionPriorityLevel(1569571564)
                                            .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                                            .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                                            .withDefaultSessionType(PduSessionType.IPV4)
                                            .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV4))
                                            .withAllowedServices(Arrays.asList(new ServiceResourceId().withId("uajlyj"),
                                                new ServiceResourceId().withId("lvofqzhvfcibyfmo")))
                                            .withMaximumNumberOfBufferedPackets(1885560912)))));
        model = BinaryData.fromObject(model).toObject(SimPolicyInner.class);
        Assertions.assertEquals("kjpvdwxf", model.location());
        Assertions.assertEquals("ivwzjbhyzs", model.tags().get("jrkambtrnegvmnv"));
        Assertions.assertEquals("b", model.ueAmbr().uplink());
        Assertions.assertEquals("yvudtjuewbci", model.ueAmbr().downlink());
        Assertions.assertEquals("xuuwhcj", model.defaultSlice().id());
        Assertions.assertEquals(1562574982, model.rfspIndex());
        Assertions.assertEquals(1400153044, model.registrationTimer());
        Assertions.assertEquals("vpayakkudzpx", model.sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("wjplma", model.sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("tcyohpfkyrk",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("bdgiogsjk",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("nwqjnoba",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().downlink());
        Assertions.assertEquals(615088237,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).fiveQi());
        Assertions.assertEquals(261138703,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV6,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV4,
            model.sliceConfigurations()
                .get(0)
                .dataNetworkConfigurations()
                .get(0)
                .additionalAllowedSessionTypes()
                .get(0));
        Assertions.assertEquals("tfpmvmemfnczdw",
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).allowedServices().get(0).id());
        Assertions.assertEquals(420547781,
            model.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).maximumNumberOfBufferedPackets());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
