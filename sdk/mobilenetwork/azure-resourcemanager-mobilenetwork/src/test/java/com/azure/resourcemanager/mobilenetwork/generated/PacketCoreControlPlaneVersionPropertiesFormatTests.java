// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.PacketCoreControlPlaneVersionPropertiesFormat;
import com.azure.resourcemanager.mobilenetwork.models.ObsoleteVersion;
import com.azure.resourcemanager.mobilenetwork.models.Platform;
import com.azure.resourcemanager.mobilenetwork.models.PlatformType;
import com.azure.resourcemanager.mobilenetwork.models.RecommendedVersion;
import com.azure.resourcemanager.mobilenetwork.models.VersionState;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PacketCoreControlPlaneVersionPropertiesFormatTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PacketCoreControlPlaneVersionPropertiesFormat model = BinaryData.fromString(
            "{\"provisioningState\":\"Failed\",\"platforms\":[{\"platformType\":\"AKS-HCI\",\"versionState\":\"Unknown\",\"minimumPlatformSoftwareVersion\":\"cogjltdtbn\",\"maximumPlatformSoftwareVersion\":\"adoocrkvc\",\"recommendedVersion\":\"NotRecommended\",\"obsoleteVersion\":\"Obsolete\",\"haUpgradesAvailable\":[\"mqg\",\"qqu\",\"zikywgg\",\"kallatmel\"]},{\"platformType\":\"AKS-HCI\",\"versionState\":\"Deprecated\",\"minimumPlatformSoftwareVersion\":\"cjzkzivgvvcna\",\"maximumPlatformSoftwareVersion\":\"hyrnxxmu\",\"recommendedVersion\":\"NotRecommended\",\"obsoleteVersion\":\"Obsolete\",\"haUpgradesAvailable\":[\"v\",\"tkwqqtchealm\"]}]}")
            .toObject(PacketCoreControlPlaneVersionPropertiesFormat.class);
        Assertions.assertEquals(PlatformType.AKS_HCI, model.platforms().get(0).platformType());
        Assertions.assertEquals(VersionState.UNKNOWN, model.platforms().get(0).versionState());
        Assertions.assertEquals("cogjltdtbn", model.platforms().get(0).minimumPlatformSoftwareVersion());
        Assertions.assertEquals("adoocrkvc", model.platforms().get(0).maximumPlatformSoftwareVersion());
        Assertions.assertEquals(RecommendedVersion.NOT_RECOMMENDED, model.platforms().get(0).recommendedVersion());
        Assertions.assertEquals(ObsoleteVersion.OBSOLETE, model.platforms().get(0).obsoleteVersion());
        Assertions.assertEquals("mqg", model.platforms().get(0).haUpgradesAvailable().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PacketCoreControlPlaneVersionPropertiesFormat model
            = new PacketCoreControlPlaneVersionPropertiesFormat().withPlatforms(Arrays.asList(
                new Platform().withPlatformType(PlatformType.AKS_HCI)
                    .withVersionState(VersionState.UNKNOWN)
                    .withMinimumPlatformSoftwareVersion("cogjltdtbn")
                    .withMaximumPlatformSoftwareVersion("adoocrkvc")
                    .withRecommendedVersion(RecommendedVersion.NOT_RECOMMENDED)
                    .withObsoleteVersion(ObsoleteVersion.OBSOLETE)
                    .withHaUpgradesAvailable(Arrays.asList("mqg", "qqu", "zikywgg", "kallatmel")),
                new Platform().withPlatformType(PlatformType.AKS_HCI)
                    .withVersionState(VersionState.DEPRECATED)
                    .withMinimumPlatformSoftwareVersion("cjzkzivgvvcna")
                    .withMaximumPlatformSoftwareVersion("hyrnxxmu")
                    .withRecommendedVersion(RecommendedVersion.NOT_RECOMMENDED)
                    .withObsoleteVersion(ObsoleteVersion.OBSOLETE)
                    .withHaUpgradesAvailable(Arrays.asList("v", "tkwqqtchealm"))));
        model = BinaryData.fromObject(model).toObject(PacketCoreControlPlaneVersionPropertiesFormat.class);
        Assertions.assertEquals(PlatformType.AKS_HCI, model.platforms().get(0).platformType());
        Assertions.assertEquals(VersionState.UNKNOWN, model.platforms().get(0).versionState());
        Assertions.assertEquals("cogjltdtbn", model.platforms().get(0).minimumPlatformSoftwareVersion());
        Assertions.assertEquals("adoocrkvc", model.platforms().get(0).maximumPlatformSoftwareVersion());
        Assertions.assertEquals(RecommendedVersion.NOT_RECOMMENDED, model.platforms().get(0).recommendedVersion());
        Assertions.assertEquals(ObsoleteVersion.OBSOLETE, model.platforms().get(0).obsoleteVersion());
        Assertions.assertEquals("mqg", model.platforms().get(0).haUpgradesAvailable().get(0));
    }
}
