// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.SliceInner;
import com.azure.resourcemanager.mobilenetwork.models.SliceListResult;
import com.azure.resourcemanager.mobilenetwork.models.Snssai;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SliceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SliceListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleting\",\"snssai\":{\"sst\":1094227624,\"sd\":\"t\"},\"description\":\"kxn\"},\"location\":\"dabg\",\"tags\":{\"ewbcihxuuw\":\"dtj\",\"yxccyb\":\"c\",\"px\":\"payakkud\"},\"id\":\"wjplma\",\"name\":\"stcyohpfkyrkdbd\",\"type\":\"iogsjkmnwq\"},{\"properties\":{\"provisioningState\":\"Succeeded\",\"snssai\":{\"sst\":1313812453,\"sd\":\"iyhddvi\"},\"description\":\"egfnmntfpmvmemfn\"},\"location\":\"dwvvba\",\"tags\":{\"chp\":\"l\",\"evwrdnhfuk\":\"db\",\"fcvlerch\":\"vsjcswsmystuluqy\"},\"id\":\"qbmfpjbabwidf\",\"name\":\"xsspuunnoxyhk\",\"type\":\"g\"},{\"properties\":{\"provisioningState\":\"Deleted\",\"snssai\":{\"sst\":2067421779,\"sd\":\"hp\"},\"description\":\"oqcaaewdaomdj\"},\"location\":\"pjxxkzb\",\"tags\":{\"xonbzoggculapz\":\"geivsiykzkdncj\",\"pgogtqxepny\":\"y\"},\"id\":\"b\",\"name\":\"uajlyj\",\"type\":\"lvofqzhvfcibyfmo\"},{\"properties\":{\"provisioningState\":\"Accepted\",\"snssai\":{\"sst\":1105067830,\"sd\":\"jpvd\"},\"description\":\"fzwiivwzjbhyz\"},\"location\":\"jrkambtrnegvmnv\",\"tags\":{\"flvestmjlxrrilo\":\"qvldspastjbkkd\",\"kuziycsle\":\"apeewchpxlkt\",\"dcgzul\":\"ufuztcktyhjtq\"},\"id\":\"mmrqz\",\"name\":\"rr\",\"type\":\"vpglydz\"}],\"nextLink\":\"rvqeevtoepryutn\"}")
            .toObject(SliceListResult.class);
        Assertions.assertEquals("dabg", model.value().get(0).location());
        Assertions.assertEquals("dtj", model.value().get(0).tags().get("ewbcihxuuw"));
        Assertions.assertEquals(1094227624, model.value().get(0).snssai().sst());
        Assertions.assertEquals("t", model.value().get(0).snssai().sd());
        Assertions.assertEquals("kxn", model.value().get(0).description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SliceListResult model = new SliceListResult().withValue(Arrays.asList(
            new SliceInner().withLocation("dabg").withTags(mapOf("ewbcihxuuw", "dtj", "yxccyb", "c", "px", "payakkud"))
                .withSnssai(new Snssai().withSst(1094227624).withSd("t")).withDescription("kxn"),
            new SliceInner().withLocation("dwvvba")
                .withTags(mapOf("chp", "l", "evwrdnhfuk", "db", "fcvlerch", "vsjcswsmystuluqy"))
                .withSnssai(new Snssai().withSst(1313812453).withSd("iyhddvi")).withDescription("egfnmntfpmvmemfn"),
            new SliceInner().withLocation("pjxxkzb")
                .withTags(mapOf("xonbzoggculapz", "geivsiykzkdncj", "pgogtqxepny", "y"))
                .withSnssai(new Snssai().withSst(2067421779).withSd("hp")).withDescription("oqcaaewdaomdj"),
            new SliceInner().withLocation("jrkambtrnegvmnv")
                .withTags(
                    mapOf("flvestmjlxrrilo", "qvldspastjbkkd", "kuziycsle", "apeewchpxlkt", "dcgzul", "ufuztcktyhjtq"))
                .withSnssai(new Snssai().withSst(1105067830).withSd("jpvd")).withDescription("fzwiivwzjbhyz")));
        model = BinaryData.fromObject(model).toObject(SliceListResult.class);
        Assertions.assertEquals("dabg", model.value().get(0).location());
        Assertions.assertEquals("dtj", model.value().get(0).tags().get("ewbcihxuuw"));
        Assertions.assertEquals(1094227624, model.value().get(0).snssai().sst());
        Assertions.assertEquals("t", model.value().get(0).snssai().sd());
        Assertions.assertEquals("kxn", model.value().get(0).description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
