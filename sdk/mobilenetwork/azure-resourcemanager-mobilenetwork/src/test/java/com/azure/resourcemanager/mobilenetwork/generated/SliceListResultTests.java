// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.SliceInner;
import com.azure.resourcemanager.mobilenetwork.models.SliceListResult;
import com.azure.resourcemanager.mobilenetwork.models.Snssai;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SliceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SliceListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"snssai\":{\"sst\":1738814564,\"sd\":\"dvruzslzojhpctf\"},\"description\":\"dxotng\"},\"location\":\"gugey\",\"tags\":{\"jee\":\"grkyuizabsnmfpph\",\"omfgbeglqgleohib\":\"yhyhsgzfczb\"},\"id\":\"tnluankrr\",\"name\":\"xeeebtijvacvbmqz\",\"type\":\"qqxlajr\"},{\"properties\":{\"provisioningState\":\"Accepted\",\"snssai\":{\"sst\":799727678,\"sd\":\"evehjkuyxoaf\"},\"description\":\"oqltfae\"},\"location\":\"inmfgvxirp\",\"tags\":{\"yznuciqd\":\"iypoqeyhlqhykprl\",\"asiibmiybnnust\":\"mexiitdfuxt\",\"nmgixh\":\"nlj\",\"oudorhcgyyp\":\"mavmq\"},\"id\":\"otwypundmb\",\"name\":\"hu\",\"type\":\"cmjkavlgorbmftpm\"},{\"properties\":{\"provisioningState\":\"Accepted\",\"snssai\":{\"sst\":1730011842,\"sd\":\"ltfvnz\"},\"description\":\"jtotpvopvpbd\"},\"location\":\"qgqqihedsvqwthmk\",\"tags\":{\"qcwdhoh\":\"cysihs\",\"sufco\":\"dtmcd\"},\"id\":\"dxbzlmcmuap\",\"name\":\"vhdbevwqqxey\",\"type\":\"ko\"}],\"nextLink\":\"zinkfkbgbzbowxeq\"}")
            .toObject(SliceListResult.class);
        Assertions.assertEquals("gugey", model.value().get(0).location());
        Assertions.assertEquals("grkyuizabsnmfpph", model.value().get(0).tags().get("jee"));
        Assertions.assertEquals(1738814564, model.value().get(0).snssai().sst());
        Assertions.assertEquals("dvruzslzojhpctf", model.value().get(0).snssai().sd());
        Assertions.assertEquals("dxotng", model.value().get(0).description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SliceListResult model = new SliceListResult().withValue(Arrays.asList(
            new SliceInner().withLocation("gugey")
                .withTags(mapOf("jee", "grkyuizabsnmfpph", "omfgbeglqgleohib", "yhyhsgzfczb"))
                .withSnssai(new Snssai().withSst(1738814564).withSd("dvruzslzojhpctf"))
                .withDescription("dxotng"),
            new SliceInner().withLocation("inmfgvxirp")
                .withTags(mapOf("yznuciqd", "iypoqeyhlqhykprl", "asiibmiybnnust", "mexiitdfuxt", "nmgixh", "nlj",
                    "oudorhcgyyp", "mavmq"))
                .withSnssai(new Snssai().withSst(799727678).withSd("evehjkuyxoaf"))
                .withDescription("oqltfae"),
            new SliceInner().withLocation("qgqqihedsvqwthmk")
                .withTags(mapOf("qcwdhoh", "cysihs", "sufco", "dtmcd"))
                .withSnssai(new Snssai().withSst(1730011842).withSd("ltfvnz"))
                .withDescription("jtotpvopvpbd")));
        model = BinaryData.fromObject(model).toObject(SliceListResult.class);
        Assertions.assertEquals("gugey", model.value().get(0).location());
        Assertions.assertEquals("grkyuizabsnmfpph", model.value().get(0).tags().get("jee"));
        Assertions.assertEquals(1738814564, model.value().get(0).snssai().sst());
        Assertions.assertEquals("dvruzslzojhpctf", model.value().get(0).snssai().sd());
        Assertions.assertEquals("dxotng", model.value().get(0).description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
