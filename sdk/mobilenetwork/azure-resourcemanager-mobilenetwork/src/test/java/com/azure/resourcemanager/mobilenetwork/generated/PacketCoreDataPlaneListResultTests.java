// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.PacketCoreDataPlaneInner;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import com.azure.resourcemanager.mobilenetwork.models.PacketCoreDataPlaneListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PacketCoreDataPlaneListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PacketCoreDataPlaneListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"provisioningState\":\"Unknown\",\"userPlaneAccessInterface\":{\"name\":\"bmwmbesldnkw\",\"ipv4Address\":\"pp\",\"ipv4Subnet\":\"lcxog\",\"ipv4Gateway\":\"konzmnsik\"},\"userPlaneAccessVirtualIpv4Addresses\":[\"qzeqqkdltfzxm\"]},\"location\":\"v\",\"tags\":{\"odkwobd\":\"r\"},\"id\":\"gxtibqdxbxw\",\"name\":\"kbogqxndlkzgx\",\"type\":\"uriplbpodxunkb\"},{\"properties\":{\"provisioningState\":\"Succeeded\",\"userPlaneAccessInterface\":{\"name\":\"ubyyntw\",\"ipv4Address\":\"bqtkoievseotgqr\",\"ipv4Subnet\":\"tmuwlauwzi\",\"ipv4Gateway\":\"bm\"},\"userPlaneAccessVirtualIpv4Addresses\":[\"jefuzmuvpbttdumo\",\"p\"]},\"location\":\"ebmnzbtbhjpglk\",\"tags\":{\"dyhtozfikdowwquu\":\"hdneuelfph\",\"ithhqzon\":\"xzxcl\"},\"id\":\"sg\",\"name\":\"b\",\"type\":\"c\"}],\"nextLink\":\"fwdsj\"}")
                .toObject(PacketCoreDataPlaneListResult.class);
        Assertions.assertEquals("v", model.value().get(0).location());
        Assertions.assertEquals("r", model.value().get(0).tags().get("odkwobd"));
        Assertions.assertEquals("bmwmbesldnkw", model.value().get(0).userPlaneAccessInterface().name());
        Assertions.assertEquals("pp", model.value().get(0).userPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("lcxog", model.value().get(0).userPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("konzmnsik", model.value().get(0).userPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals("qzeqqkdltfzxm", model.value().get(0).userPlaneAccessVirtualIpv4Addresses().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PacketCoreDataPlaneListResult model =
            new PacketCoreDataPlaneListResult()
                .withValue(
                    Arrays
                        .asList(
                            new PacketCoreDataPlaneInner()
                                .withLocation("v")
                                .withTags(mapOf("odkwobd", "r"))
                                .withUserPlaneAccessInterface(
                                    new InterfaceProperties()
                                        .withName("bmwmbesldnkw")
                                        .withIpv4Address("pp")
                                        .withIpv4Subnet("lcxog")
                                        .withIpv4Gateway("konzmnsik"))
                                .withUserPlaneAccessVirtualIpv4Addresses(Arrays.asList("qzeqqkdltfzxm")),
                            new PacketCoreDataPlaneInner()
                                .withLocation("ebmnzbtbhjpglk")
                                .withTags(mapOf("dyhtozfikdowwquu", "hdneuelfph", "ithhqzon", "xzxcl"))
                                .withUserPlaneAccessInterface(
                                    new InterfaceProperties()
                                        .withName("ubyyntw")
                                        .withIpv4Address("bqtkoievseotgqr")
                                        .withIpv4Subnet("tmuwlauwzi")
                                        .withIpv4Gateway("bm"))
                                .withUserPlaneAccessVirtualIpv4Addresses(Arrays.asList("jefuzmuvpbttdumo", "p"))));
        model = BinaryData.fromObject(model).toObject(PacketCoreDataPlaneListResult.class);
        Assertions.assertEquals("v", model.value().get(0).location());
        Assertions.assertEquals("r", model.value().get(0).tags().get("odkwobd"));
        Assertions.assertEquals("bmwmbesldnkw", model.value().get(0).userPlaneAccessInterface().name());
        Assertions.assertEquals("pp", model.value().get(0).userPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("lcxog", model.value().get(0).userPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("konzmnsik", model.value().get(0).userPlaneAccessInterface().ipv4Gateway());
        Assertions.assertEquals("qzeqqkdltfzxm", model.value().get(0).userPlaneAccessVirtualIpv4Addresses().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
