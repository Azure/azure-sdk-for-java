// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.PacketCoreDataPlaneInner;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import com.azure.resourcemanager.mobilenetwork.models.PacketCoreDataPlaneListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PacketCoreDataPlaneListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PacketCoreDataPlaneListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"userPlaneAccessInterface\":{\"name\":\"cpwi\",\"ipv4Address\":\"vqtmnub\",\"ipv4Subnet\":\"kpzksmondjmq\",\"ipv4Gateway\":\"vypomgkopkwho\"}},\"location\":\"pajqgxysm\",\"tags\":{\"qvmkcxo\":\"bq\",\"tddckcb\":\"apvhelxprgly\"},\"id\":\"uejrjxgc\",\"name\":\"qibrhosxsdqrhzoy\",\"type\":\"i\"},{\"properties\":{\"provisioningState\":\"Accepted\",\"userPlaneAccessInterface\":{\"name\":\"yiba\",\"ipv4Address\":\"fluszdtm\",\"ipv4Subnet\":\"kwofyyvoq\",\"ipv4Gateway\":\"piexpbtgiw\"}},\"location\":\"oenwashr\",\"tags\":{\"ulpiuj\":\"kcnqxwbpo\",\"obyu\":\"aasipqi\"},\"id\":\"erpqlpqwcciuqg\",\"name\":\"dbutauvfbtkuwhh\",\"type\":\"hykojoxafnndlpic\"}],\"nextLink\":\"o\"}")
                .toObject(PacketCoreDataPlaneListResult.class);
        Assertions.assertEquals("pajqgxysm", model.value().get(0).location());
        Assertions.assertEquals("bq", model.value().get(0).tags().get("qvmkcxo"));
        Assertions.assertEquals("cpwi", model.value().get(0).userPlaneAccessInterface().name());
        Assertions.assertEquals("vqtmnub", model.value().get(0).userPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("kpzksmondjmq", model.value().get(0).userPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("vypomgkopkwho", model.value().get(0).userPlaneAccessInterface().ipv4Gateway());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PacketCoreDataPlaneListResult model =
            new PacketCoreDataPlaneListResult()
                .withValue(
                    Arrays
                        .asList(
                            new PacketCoreDataPlaneInner()
                                .withLocation("pajqgxysm")
                                .withTags(mapOf("qvmkcxo", "bq", "tddckcb", "apvhelxprgly"))
                                .withUserPlaneAccessInterface(
                                    new InterfaceProperties()
                                        .withName("cpwi")
                                        .withIpv4Address("vqtmnub")
                                        .withIpv4Subnet("kpzksmondjmq")
                                        .withIpv4Gateway("vypomgkopkwho")),
                            new PacketCoreDataPlaneInner()
                                .withLocation("oenwashr")
                                .withTags(mapOf("ulpiuj", "kcnqxwbpo", "obyu", "aasipqi"))
                                .withUserPlaneAccessInterface(
                                    new InterfaceProperties()
                                        .withName("yiba")
                                        .withIpv4Address("fluszdtm")
                                        .withIpv4Subnet("kwofyyvoq")
                                        .withIpv4Gateway("piexpbtgiw"))));
        model = BinaryData.fromObject(model).toObject(PacketCoreDataPlaneListResult.class);
        Assertions.assertEquals("pajqgxysm", model.value().get(0).location());
        Assertions.assertEquals("bq", model.value().get(0).tags().get("qvmkcxo"));
        Assertions.assertEquals("cpwi", model.value().get(0).userPlaneAccessInterface().name());
        Assertions.assertEquals("vqtmnub", model.value().get(0).userPlaneAccessInterface().ipv4Address());
        Assertions.assertEquals("kpzksmondjmq", model.value().get(0).userPlaneAccessInterface().ipv4Subnet());
        Assertions.assertEquals("vypomgkopkwho", model.value().get(0).userPlaneAccessInterface().ipv4Gateway());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
