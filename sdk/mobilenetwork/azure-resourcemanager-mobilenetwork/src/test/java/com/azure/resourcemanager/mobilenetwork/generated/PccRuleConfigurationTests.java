// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.ServiceDataFlowTemplate;
import com.azure.resourcemanager.mobilenetwork.models.TrafficControlPermission;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PccRuleConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PccRuleConfiguration model =
            BinaryData
                .fromString(
                    "{\"ruleName\":\"vm\",\"rulePrecedence\":1907297138,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"slthaq\",\"downlink\":\"x\"},\"5qi\":400254725,\"allocationAndRetentionPriorityLevel\":236380813,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"srezp\",\"downlink\":\"rhneuyowq\"}},\"trafficControl\":\"Enabled\",\"serviceDataFlowTemplates\":[{\"templateName\":\"t\",\"direction\":\"Bidirectional\",\"protocol\":[\"bi\"],\"remoteIpList\":[\"gpikpzimejza\",\"lfzxiavrmbzonoki\"],\"ports\":[\"q\"]},{\"templateName\":\"irgzp\",\"direction\":\"Bidirectional\",\"protocol\":[\"azszrnwoiindfpw\",\"jylwbtlhflsj\"],\"remoteIpList\":[\"hszfjvfb\",\"ofel\"],\"ports\":[\"rqmq\",\"ldvriiiojnalghfk\",\"tvsexsowuel\"]}]}")
                .toObject(PccRuleConfiguration.class);
        Assertions.assertEquals("vm", model.ruleName());
        Assertions.assertEquals(1907297138, model.rulePrecedence());
        Assertions.assertEquals(400254725, model.ruleQosPolicy().fiveQi());
        Assertions.assertEquals(236380813, model.ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("srezp", model.ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("rhneuyowq", model.ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("slthaq", model.ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("x", model.ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.ENABLED, model.trafficControl());
        Assertions.assertEquals("t", model.serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.BIDIRECTIONAL, model.serviceDataFlowTemplates().get(0).direction());
        Assertions.assertEquals("bi", model.serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions.assertEquals("gpikpzimejza", model.serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions.assertEquals("q", model.serviceDataFlowTemplates().get(0).ports().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PccRuleConfiguration model =
            new PccRuleConfiguration()
                .withRuleName("vm")
                .withRulePrecedence(1907297138)
                .withRuleQosPolicy(
                    new PccRuleQosPolicy()
                        .withFiveQi(400254725)
                        .withAllocationAndRetentionPriorityLevel(236380813)
                        .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                        .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                        .withMaximumBitRate(new Ambr().withUplink("srezp").withDownlink("rhneuyowq"))
                        .withGuaranteedBitRate(new Ambr().withUplink("slthaq").withDownlink("x")))
                .withTrafficControl(TrafficControlPermission.ENABLED)
                .withServiceDataFlowTemplates(
                    Arrays
                        .asList(
                            new ServiceDataFlowTemplate()
                                .withTemplateName("t")
                                .withDirection(SdfDirection.BIDIRECTIONAL)
                                .withProtocol(Arrays.asList("bi"))
                                .withRemoteIpList(Arrays.asList("gpikpzimejza", "lfzxiavrmbzonoki"))
                                .withPorts(Arrays.asList("q")),
                            new ServiceDataFlowTemplate()
                                .withTemplateName("irgzp")
                                .withDirection(SdfDirection.BIDIRECTIONAL)
                                .withProtocol(Arrays.asList("azszrnwoiindfpw", "jylwbtlhflsj"))
                                .withRemoteIpList(Arrays.asList("hszfjvfb", "ofel"))
                                .withPorts(Arrays.asList("rqmq", "ldvriiiojnalghfk", "tvsexsowuel"))));
        model = BinaryData.fromObject(model).toObject(PccRuleConfiguration.class);
        Assertions.assertEquals("vm", model.ruleName());
        Assertions.assertEquals(1907297138, model.rulePrecedence());
        Assertions.assertEquals(400254725, model.ruleQosPolicy().fiveQi());
        Assertions.assertEquals(236380813, model.ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("srezp", model.ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("rhneuyowq", model.ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("slthaq", model.ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("x", model.ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.ENABLED, model.trafficControl());
        Assertions.assertEquals("t", model.serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.BIDIRECTIONAL, model.serviceDataFlowTemplates().get(0).direction());
        Assertions.assertEquals("bi", model.serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions.assertEquals("gpikpzimejza", model.serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions.assertEquals("q", model.serviceDataFlowTemplates().get(0).ports().get(0));
    }
}
