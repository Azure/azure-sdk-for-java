// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.ServiceDataFlowTemplate;
import com.azure.resourcemanager.mobilenetwork.models.TrafficControlPermission;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PccRuleConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PccRuleConfiguration model = BinaryData.fromString(
            "{\"ruleName\":\"ujrywvtyl\",\"rulePrecedence\":2136343303,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"curdoiwiitht\",\"downlink\":\"wubxc\"},\"5qi\":40609312,\"allocationAndRetentionPriorityLevel\":1077701136,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"ntwjch\",\"downlink\":\"dgoihxumwctondzj\"}},\"trafficControl\":\"Enabled\",\"serviceDataFlowTemplates\":[{\"templateName\":\"fdlwg\",\"direction\":\"Downlink\",\"protocol\":[\"sb\",\"tov\",\"tgseinqfiufxqkn\"],\"remoteIpList\":[\"rgnepttwqmsniffc\",\"mqnrojlpijnkr\"],\"ports\":[\"ddhcratizzr\"]},{\"templateName\":\"nasx\",\"direction\":\"Uplink\",\"protocol\":[\"ozqyzh\",\"tw\",\"sgogczhonnxk\",\"lgnyhmo\"],\"remoteIpList\":[\"xkk\",\"thrrgh\"],\"ports\":[\"dhqxvcx\",\"frpdsofbshrns\",\"buswdvzyy\"]},{\"templateName\":\"ycnunvjsrtk\",\"direction\":\"Downlink\",\"protocol\":[\"nopqgikyzirtx\",\"yuxzejntpsewgi\",\"ilqu\",\"rydxtqm\"],\"remoteIpList\":[\"ox\",\"rgguf\",\"yaomtb\",\"hhavgrvkffovjz\"],\"ports\":[\"bibgjmfxumv\",\"cluyovwxnbkf\"]}]}")
            .toObject(PccRuleConfiguration.class);
        Assertions.assertEquals("ujrywvtyl", model.ruleName());
        Assertions.assertEquals(2136343303, model.rulePrecedence());
        Assertions.assertEquals(40609312, model.ruleQosPolicy().fiveQi());
        Assertions.assertEquals(1077701136, model.ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("ntwjch", model.ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("dgoihxumwctondzj", model.ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("curdoiwiitht", model.ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("wubxc", model.ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.ENABLED, model.trafficControl());
        Assertions.assertEquals("fdlwg", model.serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.DOWNLINK, model.serviceDataFlowTemplates().get(0).direction());
        Assertions.assertEquals("sb", model.serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions.assertEquals("rgnepttwqmsniffc", model.serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions.assertEquals("ddhcratizzr", model.serviceDataFlowTemplates().get(0).ports().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PccRuleConfiguration model = new PccRuleConfiguration().withRuleName("ujrywvtyl")
            .withRulePrecedence(2136343303)
            .withRuleQosPolicy(new PccRuleQosPolicy().withFiveQi(40609312)
                .withAllocationAndRetentionPriorityLevel(1077701136)
                .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                .withMaximumBitRate(new Ambr().withUplink("ntwjch").withDownlink("dgoihxumwctondzj"))
                .withGuaranteedBitRate(new Ambr().withUplink("curdoiwiitht").withDownlink("wubxc")))
            .withTrafficControl(TrafficControlPermission.ENABLED)
            .withServiceDataFlowTemplates(Arrays.asList(
                new ServiceDataFlowTemplate().withTemplateName("fdlwg")
                    .withDirection(SdfDirection.DOWNLINK)
                    .withProtocol(Arrays.asList("sb", "tov", "tgseinqfiufxqkn"))
                    .withRemoteIpList(Arrays.asList("rgnepttwqmsniffc", "mqnrojlpijnkr"))
                    .withPorts(Arrays.asList("ddhcratizzr")),
                new ServiceDataFlowTemplate().withTemplateName("nasx")
                    .withDirection(SdfDirection.UPLINK)
                    .withProtocol(Arrays.asList("ozqyzh", "tw", "sgogczhonnxk", "lgnyhmo"))
                    .withRemoteIpList(Arrays.asList("xkk", "thrrgh"))
                    .withPorts(Arrays.asList("dhqxvcx", "frpdsofbshrns", "buswdvzyy")),
                new ServiceDataFlowTemplate().withTemplateName("ycnunvjsrtk")
                    .withDirection(SdfDirection.DOWNLINK)
                    .withProtocol(Arrays.asList("nopqgikyzirtx", "yuxzejntpsewgi", "ilqu", "rydxtqm"))
                    .withRemoteIpList(Arrays.asList("ox", "rgguf", "yaomtb", "hhavgrvkffovjz"))
                    .withPorts(Arrays.asList("bibgjmfxumv", "cluyovwxnbkf"))));
        model = BinaryData.fromObject(model).toObject(PccRuleConfiguration.class);
        Assertions.assertEquals("ujrywvtyl", model.ruleName());
        Assertions.assertEquals(2136343303, model.rulePrecedence());
        Assertions.assertEquals(40609312, model.ruleQosPolicy().fiveQi());
        Assertions.assertEquals(1077701136, model.ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("ntwjch", model.ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("dgoihxumwctondzj", model.ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("curdoiwiitht", model.ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("wubxc", model.ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.ENABLED, model.trafficControl());
        Assertions.assertEquals("fdlwg", model.serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.DOWNLINK, model.serviceDataFlowTemplates().get(0).direction());
        Assertions.assertEquals("sb", model.serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions.assertEquals("rgnepttwqmsniffc", model.serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions.assertEquals("ddhcratizzr", model.serviceDataFlowTemplates().get(0).ports().get(0));
    }
}
