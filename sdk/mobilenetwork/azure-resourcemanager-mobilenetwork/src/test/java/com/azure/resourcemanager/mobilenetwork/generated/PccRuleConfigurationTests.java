// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.ServiceDataFlowTemplate;
import com.azure.resourcemanager.mobilenetwork.models.TrafficControlPermission;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PccRuleConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PccRuleConfiguration model = BinaryData.fromString(
            "{\"ruleName\":\"mtdaa\",\"rulePrecedence\":687186912,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"wvgpiohg\",\"downlink\":\"xrtfudxep\"},\"5qi\":1902888428,\"allocationAndRetentionPriorityLevel\":682770513,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"mnpkukghimdblxg\",\"downlink\":\"imfnjhfjx\"}},\"trafficControl\":\"Blocked\",\"serviceDataFlowTemplates\":[{\"templateName\":\"kkfoqr\",\"direction\":\"Bidirectional\",\"protocol\":[\"kzikfjawneaivxwc\",\"elpcirelsfeaenwa\"],\"remoteIpList\":[\"atklddxbjhwuaa\",\"oz\"],\"ports\":[\"ph\",\"oulpjrv\",\"ag\",\"rvimjwosytxitcsk\"]}]}")
            .toObject(PccRuleConfiguration.class);
        Assertions.assertEquals("mtdaa", model.ruleName());
        Assertions.assertEquals(687186912, model.rulePrecedence());
        Assertions.assertEquals(1902888428, model.ruleQosPolicy().fiveQi());
        Assertions.assertEquals(682770513, model.ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, model.ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("mnpkukghimdblxg", model.ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("imfnjhfjx", model.ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("wvgpiohg", model.ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("xrtfudxep", model.ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.BLOCKED, model.trafficControl());
        Assertions.assertEquals("kkfoqr", model.serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.BIDIRECTIONAL, model.serviceDataFlowTemplates().get(0).direction());
        Assertions.assertEquals("kzikfjawneaivxwc", model.serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions.assertEquals("atklddxbjhwuaa", model.serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions.assertEquals("ph", model.serviceDataFlowTemplates().get(0).ports().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PccRuleConfiguration model = new PccRuleConfiguration().withRuleName("mtdaa").withRulePrecedence(687186912)
            .withRuleQosPolicy(
                new PccRuleQosPolicy().withFiveQi(1902888428).withAllocationAndRetentionPriorityLevel(682770513)
                    .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                    .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                    .withMaximumBitRate(new Ambr().withUplink("mnpkukghimdblxg").withDownlink("imfnjhfjx"))
                    .withGuaranteedBitRate(new Ambr().withUplink("wvgpiohg").withDownlink("xrtfudxep")))
            .withTrafficControl(TrafficControlPermission.BLOCKED)
            .withServiceDataFlowTemplates(Arrays.asList(
                new ServiceDataFlowTemplate().withTemplateName("kkfoqr").withDirection(SdfDirection.BIDIRECTIONAL)
                    .withProtocol(Arrays.asList("kzikfjawneaivxwc", "elpcirelsfeaenwa"))
                    .withRemoteIpList(Arrays.asList("atklddxbjhwuaa", "oz"))
                    .withPorts(Arrays.asList("ph", "oulpjrv", "ag", "rvimjwosytxitcsk"))));
        model = BinaryData.fromObject(model).toObject(PccRuleConfiguration.class);
        Assertions.assertEquals("mtdaa", model.ruleName());
        Assertions.assertEquals(687186912, model.rulePrecedence());
        Assertions.assertEquals(1902888428, model.ruleQosPolicy().fiveQi());
        Assertions.assertEquals(682770513, model.ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, model.ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("mnpkukghimdblxg", model.ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("imfnjhfjx", model.ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("wvgpiohg", model.ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("xrtfudxep", model.ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.BLOCKED, model.trafficControl());
        Assertions.assertEquals("kkfoqr", model.serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.BIDIRECTIONAL, model.serviceDataFlowTemplates().get(0).direction());
        Assertions.assertEquals("kzikfjawneaivxwc", model.serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions.assertEquals("atklddxbjhwuaa", model.serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions.assertEquals("ph", model.serviceDataFlowTemplates().get(0).ports().get(0));
    }
}
