// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.ServiceDataFlowTemplate;
import com.azure.resourcemanager.mobilenetwork.models.TrafficControlPermission;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PccRuleConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PccRuleConfiguration model =
            BinaryData
                .fromString(
                    "{\"ruleName\":\"gitvg\",\"rulePrecedence\":1795332478,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"ixkwmyijejveg\",\"downlink\":\"hbpnaixexccbd\"},\"5qi\":303838192,\"allocationAndRetentionPriorityLevel\":393468474,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"rrvqa\",\"downlink\":\"qkghtpwijnhy\"}},\"trafficControl\":\"Enabled\",\"serviceDataFlowTemplates\":[{\"templateName\":\"ycxzbfvoo\",\"direction\":\"Bidirectional\",\"protocol\":[\"vmtgjqppy\",\"s\"],\"remoteIpList\":[\"on\",\"myhgfipnsxkmc\",\"a\"],\"ports\":[\"rjreafxts\",\"umh\",\"glikkxwslolb\"]}]}")
                .toObject(PccRuleConfiguration.class);
        Assertions.assertEquals("gitvg", model.ruleName());
        Assertions.assertEquals(1795332478, model.rulePrecedence());
        Assertions.assertEquals(303838192, model.ruleQosPolicy().fiveQi());
        Assertions.assertEquals(393468474, model.ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, model.ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("rrvqa", model.ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("qkghtpwijnhy", model.ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("ixkwmyijejveg", model.ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("hbpnaixexccbd", model.ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.ENABLED, model.trafficControl());
        Assertions.assertEquals("ycxzbfvoo", model.serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.BIDIRECTIONAL, model.serviceDataFlowTemplates().get(0).direction());
        Assertions.assertEquals("vmtgjqppy", model.serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions.assertEquals("on", model.serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions.assertEquals("rjreafxts", model.serviceDataFlowTemplates().get(0).ports().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PccRuleConfiguration model =
            new PccRuleConfiguration()
                .withRuleName("gitvg")
                .withRulePrecedence(1795332478)
                .withRuleQosPolicy(
                    new PccRuleQosPolicy()
                        .withFiveQi(303838192)
                        .withAllocationAndRetentionPriorityLevel(393468474)
                        .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                        .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                        .withMaximumBitRate(new Ambr().withUplink("rrvqa").withDownlink("qkghtpwijnhy"))
                        .withGuaranteedBitRate(new Ambr().withUplink("ixkwmyijejveg").withDownlink("hbpnaixexccbd")))
                .withTrafficControl(TrafficControlPermission.ENABLED)
                .withServiceDataFlowTemplates(
                    Arrays
                        .asList(
                            new ServiceDataFlowTemplate()
                                .withTemplateName("ycxzbfvoo")
                                .withDirection(SdfDirection.BIDIRECTIONAL)
                                .withProtocol(Arrays.asList("vmtgjqppy", "s"))
                                .withRemoteIpList(Arrays.asList("on", "myhgfipnsxkmc", "a"))
                                .withPorts(Arrays.asList("rjreafxts", "umh", "glikkxwslolb"))));
        model = BinaryData.fromObject(model).toObject(PccRuleConfiguration.class);
        Assertions.assertEquals("gitvg", model.ruleName());
        Assertions.assertEquals(1795332478, model.rulePrecedence());
        Assertions.assertEquals(303838192, model.ruleQosPolicy().fiveQi());
        Assertions.assertEquals(393468474, model.ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, model.ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("rrvqa", model.ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("qkghtpwijnhy", model.ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("ixkwmyijejveg", model.ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("hbpnaixexccbd", model.ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.ENABLED, model.trafficControl());
        Assertions.assertEquals("ycxzbfvoo", model.serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.BIDIRECTIONAL, model.serviceDataFlowTemplates().get(0).direction());
        Assertions.assertEquals("vmtgjqppy", model.serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions.assertEquals("on", model.serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions.assertEquals("rjreafxts", model.serviceDataFlowTemplates().get(0).ports().get(0));
    }
}
