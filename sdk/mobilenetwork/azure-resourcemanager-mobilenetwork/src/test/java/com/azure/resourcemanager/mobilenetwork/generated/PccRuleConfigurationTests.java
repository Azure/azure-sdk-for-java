// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.ServiceDataFlowTemplate;
import com.azure.resourcemanager.mobilenetwork.models.TrafficControlPermission;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PccRuleConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PccRuleConfiguration model = BinaryData.fromString(
            "{\"ruleName\":\"hirctymoxoftpipi\",\"rulePrecedence\":420468172,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"uh\",\"downlink\":\"a\"},\"5qi\":1233927611,\"allocationAndRetentionPriorityLevel\":2038479554,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"maximumBitRate\":{\"uplink\":\"usps\",\"downlink\":\"asdvl\"}},\"trafficControl\":\"Blocked\",\"serviceDataFlowTemplates\":[{\"templateName\":\"gz\",\"direction\":\"Bidirectional\",\"protocol\":[\"ucvpamrs\",\"euzvx\"],\"remoteIpList\":[\"i\",\"jn\",\"nytx\",\"fq\"],\"ports\":[\"xmrhu\",\"lw\",\"cesutrgjupauut\"]},{\"templateName\":\"woqhihe\",\"direction\":\"Uplink\",\"protocol\":[\"w\"],\"remoteIpList\":[\"nfqn\",\"cypsxjv\",\"oimwkslirc\"],\"ports\":[\"xvydfceacvlhvygd\"]},{\"templateName\":\"ftumrtwnawjslbiw\",\"direction\":\"Bidirectional\",\"protocol\":[\"gcyztsfmznbae\",\"ph\",\"hqnrn\",\"pxehuwrykqga\"],\"remoteIpList\":[\"mvikl\",\"ydv\"],\"ports\":[\"ejd\",\"nxcvds\",\"hnjivo\"]},{\"templateName\":\"v\",\"direction\":\"Bidirectional\",\"protocol\":[\"v\",\"fzg\"],\"remoteIpList\":[\"jdftuljltd\",\"ceamtm\"],\"ports\":[\"o\"]}]}")
            .toObject(PccRuleConfiguration.class);
        Assertions.assertEquals("hirctymoxoftpipi", model.ruleName());
        Assertions.assertEquals(420468172, model.rulePrecedence());
        Assertions.assertEquals(1233927611, model.ruleQosPolicy().fiveQi());
        Assertions.assertEquals(2038479554, model.ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            model.ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("usps", model.ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("asdvl", model.ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("uh", model.ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("a", model.ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.BLOCKED, model.trafficControl());
        Assertions.assertEquals("gz", model.serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.BIDIRECTIONAL, model.serviceDataFlowTemplates().get(0).direction());
        Assertions.assertEquals("ucvpamrs", model.serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions.assertEquals("i", model.serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions.assertEquals("xmrhu", model.serviceDataFlowTemplates().get(0).ports().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PccRuleConfiguration model = new PccRuleConfiguration().withRuleName("hirctymoxoftpipi")
            .withRulePrecedence(420468172)
            .withRuleQosPolicy(new PccRuleQosPolicy().withFiveQi(1233927611)
                .withAllocationAndRetentionPriorityLevel(2038479554)
                .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                .withMaximumBitRate(new Ambr().withUplink("usps").withDownlink("asdvl"))
                .withGuaranteedBitRate(new Ambr().withUplink("uh").withDownlink("a")))
            .withTrafficControl(TrafficControlPermission.BLOCKED)
            .withServiceDataFlowTemplates(Arrays.asList(
                new ServiceDataFlowTemplate().withTemplateName("gz")
                    .withDirection(SdfDirection.BIDIRECTIONAL)
                    .withProtocol(Arrays.asList("ucvpamrs", "euzvx"))
                    .withRemoteIpList(Arrays.asList("i", "jn", "nytx", "fq"))
                    .withPorts(Arrays.asList("xmrhu", "lw", "cesutrgjupauut")),
                new ServiceDataFlowTemplate().withTemplateName("woqhihe")
                    .withDirection(SdfDirection.UPLINK)
                    .withProtocol(Arrays.asList("w"))
                    .withRemoteIpList(Arrays.asList("nfqn", "cypsxjv", "oimwkslirc"))
                    .withPorts(Arrays.asList("xvydfceacvlhvygd")),
                new ServiceDataFlowTemplate().withTemplateName("ftumrtwnawjslbiw")
                    .withDirection(SdfDirection.BIDIRECTIONAL)
                    .withProtocol(Arrays.asList("gcyztsfmznbae", "ph", "hqnrn", "pxehuwrykqga"))
                    .withRemoteIpList(Arrays.asList("mvikl", "ydv"))
                    .withPorts(Arrays.asList("ejd", "nxcvds", "hnjivo")),
                new ServiceDataFlowTemplate().withTemplateName("v")
                    .withDirection(SdfDirection.BIDIRECTIONAL)
                    .withProtocol(Arrays.asList("v", "fzg"))
                    .withRemoteIpList(Arrays.asList("jdftuljltd", "ceamtm"))
                    .withPorts(Arrays.asList("o"))));
        model = BinaryData.fromObject(model).toObject(PccRuleConfiguration.class);
        Assertions.assertEquals("hirctymoxoftpipi", model.ruleName());
        Assertions.assertEquals(420468172, model.rulePrecedence());
        Assertions.assertEquals(1233927611, model.ruleQosPolicy().fiveQi());
        Assertions.assertEquals(2038479554, model.ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            model.ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("usps", model.ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("asdvl", model.ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("uh", model.ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("a", model.ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.BLOCKED, model.trafficControl());
        Assertions.assertEquals("gz", model.serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.BIDIRECTIONAL, model.serviceDataFlowTemplates().get(0).direction());
        Assertions.assertEquals("ucvpamrs", model.serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions.assertEquals("i", model.serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions.assertEquals("xmrhu", model.serviceDataFlowTemplates().get(0).ports().get(0));
    }
}
