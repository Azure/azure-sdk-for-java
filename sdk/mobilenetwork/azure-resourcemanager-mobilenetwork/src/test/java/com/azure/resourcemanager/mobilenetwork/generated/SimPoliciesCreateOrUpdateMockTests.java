// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.SimPolicy;
import com.azure.resourcemanager.mobilenetwork.models.SliceConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.SliceResourceId;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SimPoliciesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"siteProvisioningState\":{\"fho\":\"Updating\",\"xwklooz\":\"Updating\",\"txvcm\":\"Deleting\"},\"ueAmbr\":{\"uplink\":\"funlcpxxvi\",\"downlink\":\"yeyng\"},\"defaultSlice\":{\"id\":\"g\"},\"rfspIndex\":770458191,\"registrationTimer\":1735235828,\"sliceConfigurations\":[{\"slice\":{\"id\":\"ygg\"},\"defaultDataNetwork\":{\"id\":\"pmcrdcuelj\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"ahxm\"},\"sessionAmbr\":{\"uplink\":\"q\",\"downlink\":\"yarvsxzqbglcjk\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"yspthzod\"},\"sessionAmbr\":{\"uplink\":\"btl\",\"downlink\":\"jtgblios\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"kfmkmfdjxyxgbk\"},\"sessionAmbr\":{\"uplink\":\"qvjcteoe\",\"downlink\":\"l\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"slskkz\"},\"sessionAmbr\":{\"uplink\":\"xv\",\"downlink\":\"nzdpvoco\"},\"allowedServices\":[]}]},{\"slice\":{\"id\":\"hpcnabxzfsn\"},\"defaultDataNetwork\":{\"id\":\"gyte\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"zilmhivzkww\"},\"sessionAmbr\":{\"uplink\":\"ncknrzdajlsk\",\"downlink\":\"ptjxulweuc\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"rthxqlehmcg\"},\"sessionAmbr\":{\"uplink\":\"jei\",\"downlink\":\"ue\"},\"allowedServices\":[]}]},{\"slice\":{\"id\":\"oka\"},\"defaultDataNetwork\":{\"id\":\"vfejvqnttmbqda\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"fiv\"},\"sessionAmbr\":{\"uplink\":\"okpysthhzagj\",\"downlink\":\"wyy\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"lhgenuzejgvkv\"},\"sessionAmbr\":{\"uplink\":\"baqszllrzlsmmd\",\"downlink\":\"gmihzpimcqr\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"nxtminklog\"},\"sessionAmbr\":{\"uplink\":\"svtzarhzv\",\"downlink\":\"nsqktc\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"bjwzzos\"},\"sessionAmbr\":{\"uplink\":\"pkybtgl\",\"downlink\":\"kzpgaj\"},\"allowedServices\":[]}]}]},\"location\":\"jcemqbmfuvqar\",\"tags\":{\"fgtdmbvx\":\"uqrebluimmbwx\",\"budbt\":\"kraokq\"},\"id\":\"aokbavlyttaaknwf\",\"name\":\"ke\",\"type\":\"sm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MobileNetworkManager manager = MobileNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SimPolicy response
            = manager.simPolicies()
                .define("rngl")
                .withRegion("ajq")
                .withExistingMobileNetwork("slojfkqidnqt", "qxjhqxcsqhtkbtnq")
                .withUeAmbr(new Ambr().withUplink("xricctkwmuqq").withDownlink("ajxeiygle"))
                .withDefaultSlice(new SliceResourceId().withId("rwvaexhdc"))
                .withSliceConfigurations(Arrays
                    .asList(
                        new SliceConfiguration().withSlice(new SliceResourceId().withId("kbrup"))
                            .withDefaultDataNetwork(new DataNetworkResourceId().withId("behdmljzacvume"))
                            .withDataNetworkConfigurations(Arrays.asList(new DataNetworkConfiguration()
                                .withDataNetwork(new DataNetworkResourceId().withId("pbibn"))
                                .withSessionAmbr(new Ambr().withUplink("pphepifexl").withDownlink("qirccj"))
                                .withAllowedServices(Arrays.asList()))),
                        new SliceConfiguration().withSlice(new SliceResourceId().withId("ly"))
                            .withDefaultDataNetwork(new DataNetworkResourceId().withId("cgxvrpj"))
                            .withDataNetworkConfigurations(
                                Arrays
                                    .asList(
                                        new DataNetworkConfiguration()
                                            .withDataNetwork(new DataNetworkResourceId().withId("czuod"))
                                            .withSessionAmbr(
                                                new Ambr().withUplink("cpunettepdjx").withDownlink("eskoy"))
                                            .withAllowedServices(Arrays.asList()),
                                        new DataNetworkConfiguration()
                                            .withDataNetwork(new DataNetworkResourceId().withId("uiylpc"))
                                            .withSessionAmbr(new Ambr().withUplink("aewse").withDownlink("vesk"))
                                            .withAllowedServices(Arrays.asList()),
                                        new DataNetworkConfiguration()
                                            .withDataNetwork(new DataNetworkResourceId().withId("xegqphr"))
                                            .withSessionAmbr(new Ambr().withUplink("fn").withDownlink("hctmjtsgh"))
                                            .withAllowedServices(Arrays.asList()))),
                        new SliceConfiguration().withSlice(new SliceResourceId().withId("bcbcpz"))
                            .withDefaultDataNetwork(new DataNetworkResourceId().withId("rpzeqac"))
                            .withDataNetworkConfigurations(Arrays.asList(new DataNetworkConfiguration()
                                .withDataNetwork(new DataNetworkResourceId().withId("dtzmpype"))
                                .withSessionAmbr(new Ambr().withUplink("cpczshnuqnd").withDownlink("izupfkhu"))
                                .withAllowedServices(Arrays.asList()),
                                new DataNetworkConfiguration().withDataNetwork(new DataNetworkResourceId().withId("tu"))
                                    .withSessionAmbr(new Ambr().withUplink("zx").withDownlink("mtvtvegwqiukvzwy"))
                                    .withAllowedServices(Arrays.asList()),
                                new DataNetworkConfiguration()
                                    .withDataNetwork(new DataNetworkResourceId().withId("wtthaokgksk"))
                                    .withSessionAmbr(new Ambr().withUplink("i").withDownlink("bs"))
                                    .withAllowedServices(Arrays.asList())))))
                .withTags(mapOf("dexyionofninbdb", "peexpgeumilhwuit", "cw", "s", "pcbbprtugav", "qrs", "fogdrtbfcm",
                    "zbcyksiv"))
                .withRfspIndex(1400683190)
                .withRegistrationTimer(1314607825)
                .create();

        Assertions.assertEquals("jcemqbmfuvqar", response.location());
        Assertions.assertEquals("uqrebluimmbwx", response.tags().get("fgtdmbvx"));
        Assertions.assertEquals("funlcpxxvi", response.ueAmbr().uplink());
        Assertions.assertEquals("yeyng", response.ueAmbr().downlink());
        Assertions.assertEquals("g", response.defaultSlice().id());
        Assertions.assertEquals(770458191, response.rfspIndex());
        Assertions.assertEquals(1735235828, response.registrationTimer());
        Assertions.assertEquals("ygg", response.sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("pmcrdcuelj", response.sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("ahxm",
            response.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("q",
            response.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("yarvsxzqbglcjk",
            response.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().downlink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
