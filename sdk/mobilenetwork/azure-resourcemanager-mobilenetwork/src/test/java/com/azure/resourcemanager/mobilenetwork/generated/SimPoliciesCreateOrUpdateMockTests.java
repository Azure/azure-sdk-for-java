// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.SimPolicy;
import com.azure.resourcemanager.mobilenetwork.models.SliceConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.SliceResourceId;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SimPoliciesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"siteProvisioningState\":{\"oiqtamtyvskn\":\"Adding\",\"wzawnvsbcfhzagxn\":\"Adding\"},\"ueAmbr\":{\"uplink\":\"hycvdimwrzre\",\"downlink\":\"zgyufutrwp\"},\"defaultSlice\":{\"id\":\"eryekzkdhmeottaw\"},\"rfspIndex\":924161676,\"registrationTimer\":1538790173,\"sliceConfigurations\":[{\"slice\":{\"id\":\"whnhjtfv\"},\"defaultDataNetwork\":{\"id\":\"n\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"miljpnwynud\"},\"sessionAmbr\":{\"uplink\":\"llzsauz\",\"downlink\":\"jlxeehuxiqhz\"},\"allowedServices\":[]}]},{\"slice\":{\"id\":\"raymezx\"},\"defaultDataNetwork\":{\"id\":\"skihmxrfd\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"jrednwyysh\"},\"sessionAmbr\":{\"uplink\":\"uwg\",\"downlink\":\"evuafpwzyifrk\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"wltxeqipxgzdyims\"},\"sessionAmbr\":{\"uplink\":\"ayorprav\",\"downlink\":\"jogeslabnsmjkwyn\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"xa\"},\"sessionAmbr\":{\"uplink\":\"kqsykvwjtqpke\",\"downlink\":\"myltj\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"rspxklur\"},\"sessionAmbr\":{\"uplink\":\"clf\",\"downlink\":\"xa\"},\"allowedServices\":[]}]},{\"slice\":{\"id\":\"n\"},\"defaultDataNetwork\":{\"id\":\"oytzpose\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"igpxvkq\"},\"sessionAmbr\":{\"uplink\":\"aupxvpi\",\"downlink\":\"dfaifyzyzeyuube\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"ds\"},\"sessionAmbr\":{\"uplink\":\"l\",\"downlink\":\"ytoithgygvfl\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"gvdihoynkrxwetwk\"},\"sessionAmbr\":{\"uplink\":\"rcyrucpcunnu\",\"downlink\":\"dqumoenodnai\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"nhq\"},\"sessionAmbr\":{\"uplink\":\"skndnelqkaadlknw\",\"downlink\":\"oanniyopetxi\"},\"allowedServices\":[]}]}]},\"location\":\"nrlyxnuc\",\"tags\":{\"dtcjbctv\":\"hblkwqpatvbq\"},\"id\":\"vuzqymt\",\"name\":\"owog\",\"type\":\"gitsqh\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MobileNetworkManager manager =
            MobileNetworkManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SimPolicy response =
            manager
                .simPolicies()
                .define("qi")
                .withRegion("btxjeaoqaqbzg")
                .withExistingMobileNetwork("coqra", "wugyx")
                .withUeAmbr(new Ambr().withUplink("xzak").withDownlink("ejkm"))
                .withDefaultSlice(new SliceResourceId().withId("bizt"))
                .withSliceConfigurations(
                    Arrays
                        .asList(
                            new SliceConfiguration()
                                .withSlice(new SliceResourceId().withId("ovjufycsjmlbe"))
                                .withDefaultDataNetwork(new DataNetworkResourceId().withId("yeji"))
                                .withDataNetworkConfigurations(
                                    Arrays
                                        .asList(
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("uxegthortudawlpj"))
                                                .withSessionAmbr(
                                                    new Ambr().withUplink("elqerpp").withDownlink("cbgqnzmnhiil"))
                                                .withAllowedServices(Arrays.asList()),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("alwcjgckbb"))
                                                .withSessionAmbr(
                                                    new Ambr().withUplink("ccgzpraoxnyu").withDownlink("fa"))
                                                .withAllowedServices(Arrays.asList()))),
                            new SliceConfiguration()
                                .withSlice(new SliceResourceId().withId("sgftipwc"))
                                .withDefaultDataNetwork(new DataNetworkResourceId().withId("byubhiqdxyurnpn"))
                                .withDataNetworkConfigurations(
                                    Arrays
                                        .asList(
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("zafccnuhiigb"))
                                                .withSessionAmbr(
                                                    new Ambr().withUplink("lbuigv").withDownlink("vatvcrkd"))
                                                .withAllowedServices(Arrays.asList()))),
                            new SliceConfiguration()
                                .withSlice(new SliceResourceId().withId("b"))
                                .withDefaultDataNetwork(new DataNetworkResourceId().withId("bqxvhcsyhzlwxae"))
                                .withDataNetworkConfigurations(
                                    Arrays
                                        .asList(
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("vurex"))
                                                .withSessionAmbr(
                                                    new Ambr().withUplink("ndsbdw").withDownlink("aderzmw"))
                                                .withAllowedServices(Arrays.asList()))),
                            new SliceConfiguration()
                                .withSlice(new SliceResourceId().withId("t"))
                                .withDefaultDataNetwork(new DataNetworkResourceId().withId("pag"))
                                .withDataNetworkConfigurations(
                                    Arrays
                                        .asList(
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("mvmmagoaqylkjz"))
                                                .withSessionAmbr(
                                                    new Ambr().withUplink("jiuazjc").withDownlink("mxitpfinzcpd"))
                                                .withAllowedServices(Arrays.asList()),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("tkrlgjmtbd"))
                                                .withSessionAmbr(
                                                    new Ambr().withUplink("vcqguefzh").withDownlink("mpheqdur"))
                                                .withAllowedServices(Arrays.asList()),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("lyujlfyoump"))
                                                .withSessionAmbr(
                                                    new Ambr()
                                                        .withUplink("kyeclcdigpta")
                                                        .withDownlink("brzmqxucycijoclx"))
                                                .withAllowedServices(Arrays.asList()),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("utgjcyz"))
                                                .withSessionAmbr(new Ambr().withUplink("zjd").withDownlink("r"))
                                                .withAllowedServices(Arrays.asList())))))
                .withTags(mapOf("v", "w", "e", "atbwbqam", "pkcvmwf", "liys", "pmywbormcq", "uxx"))
                .withRfspIndex(1667946932)
                .withRegistrationTimer(25286412)
                .create();

        Assertions.assertEquals("nrlyxnuc", response.location());
        Assertions.assertEquals("hblkwqpatvbq", response.tags().get("dtcjbctv"));
        Assertions.assertEquals("hycvdimwrzre", response.ueAmbr().uplink());
        Assertions.assertEquals("zgyufutrwp", response.ueAmbr().downlink());
        Assertions.assertEquals("eryekzkdhmeottaw", response.defaultSlice().id());
        Assertions.assertEquals(924161676, response.rfspIndex());
        Assertions.assertEquals(1538790173, response.registrationTimer());
        Assertions.assertEquals("whnhjtfv", response.sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("n", response.sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions
            .assertEquals(
                "miljpnwynud",
                response.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions
            .assertEquals(
                "llzsauz",
                response.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions
            .assertEquals(
                "jlxeehuxiqhz",
                response.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().downlink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
