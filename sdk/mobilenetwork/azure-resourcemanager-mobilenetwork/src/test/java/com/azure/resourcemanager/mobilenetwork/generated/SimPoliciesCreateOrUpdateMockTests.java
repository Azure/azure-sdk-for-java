// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.SimPolicy;
import com.azure.resourcemanager.mobilenetwork.models.SliceConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.SliceResourceId;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SimPoliciesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"siteProvisioningState\":{\"zzlt\":\"Updating\"},\"ueAmbr\":{\"uplink\":\"fhbzffovwmbjlzq\",\"downlink\":\"czpgvdwnapfdq\"},\"defaultSlice\":{\"id\":\"owftptnuwjtks\"},\"rfspIndex\":2008228134,\"registrationTimer\":588054641,\"sliceConfigurations\":[{\"slice\":{\"id\":\"y\"},\"defaultDataNetwork\":{\"id\":\"leseyqrhvyeldo\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"v\"},\"sessionAmbr\":{\"uplink\":\"kwiswskukjtas\",\"downlink\":\"vwisp\"},\"allowedServices\":[]}]},{\"slice\":{\"id\":\"xkdtxfkndlqvtwkn\"},\"defaultDataNetwork\":{\"id\":\"gmmbu\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"yw\"},\"sessionAmbr\":{\"uplink\":\"tmqa\",\"downlink\":\"kueatgroeshoy\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"zcbyfq\"},\"sessionAmbr\":{\"uplink\":\"kfaoytehq\",\"downlink\":\"uvjmv\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"mtdwcky\"},\"sessionAmbr\":{\"uplink\":\"roejnndl\",\"downlink\":\"djus\"},\"allowedServices\":[]}]},{\"slice\":{\"id\":\"br\"},\"defaultDataNetwork\":{\"id\":\"eqy\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"ceysfaqeg\"},\"sessionAmbr\":{\"uplink\":\"lwryshwddkvbxgkq\",\"downlink\":\"sybwptdaca\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"vvlfntymtp\"},\"sessionAmbr\":{\"uplink\":\"iwenazero\",\"downlink\":\"zrsq\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"lsxkd\"},\"sessionAmbr\":{\"uplink\":\"wqapfgsdp\",\"downlink\":\"vessm\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"hhkuuip\"},\"sessionAmbr\":{\"uplink\":\"dqq\",\"downlink\":\"tekva\"},\"allowedServices\":[]}]}]},\"location\":\"l\",\"tags\":{\"emxhzzy\":\"qvqyvweht\"},\"id\":\"ev\",\"name\":\"sxivzrrryvei\",\"type\":\"ipsk\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        MobileNetworkManager manager = MobileNetworkManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        SimPolicy response
            = manager
                .simPolicies().define(
                    "elgcmpzqjhhhqx")
                .withRegion("apx").withExistingMobileNetwork("zv", "qxfx")
                .withUeAmbr(
                    new Ambr().withUplink("zusjsz").withDownlink("bscm"))
                .withDefaultSlice(
                    new SliceResourceId().withId("lzijiufehgmvflnw"))
                .withSliceConfigurations(Arrays.asList(new SliceConfiguration()
                    .withSlice(new SliceResourceId().withId("erlniylylyfw"))
                    .withDefaultDataNetwork(new DataNetworkResourceId().withId("zutgqztwhghmupg"))
                    .withDataNetworkConfigurations(Arrays.asList(new DataNetworkConfiguration()
                        .withDataNetwork(new DataNetworkResourceId().withId("jtcdxabbujftaben"))
                        .withSessionAmbr(new Ambr().withUplink("bklqpxz").withDownlink("cafeddw"))
                        .withAllowedServices(Arrays.asList()),
                        new DataNetworkConfiguration()
                            .withDataNetwork(new DataNetworkResourceId().withId("nlzafwxudgnh"))
                            .withSessionAmbr(new Ambr().withUplink("ookrtalvnbw").withDownlink("pbeme"))
                            .withAllowedServices(Arrays.asList()),
                        new DataNetworkConfiguration().withDataNetwork(new DataNetworkResourceId().withId("uclvdjj"))
                            .withSessionAmbr(new Ambr().withUplink("kyrdnqodx").withDownlink("hhxhq"))
                            .withAllowedServices(Arrays.asList()),
                        new DataNetworkConfiguration()
                            .withDataNetwork(new DataNetworkResourceId().withId("aqnvzoqgyipemchg"))
                            .withSessionAmbr(new Ambr().withUplink("v").withDownlink("czuejdtxptl"))
                            .withAllowedServices(Arrays.asList()))),
                    new SliceConfiguration().withSlice(new SliceResourceId().withId("h"))
                        .withDefaultDataNetwork(new DataNetworkResourceId().withId("zhomewjjstliu"))
                        .withDataNetworkConfigurations(Arrays.asList(
                            new DataNetworkConfiguration().withDataNetwork(new DataNetworkResourceId().withId("awmo"))
                                .withSessionAmbr(new Ambr().withUplink("ia").withDownlink("cz"))
                                .withAllowedServices(Arrays.asList()),
                            new DataNetworkConfiguration()
                                .withDataNetwork(new DataNetworkResourceId().withId("vodrrslblxydkxr"))
                                .withSessionAmbr(new Ambr().withUplink("vvbxiwkgfbqljnq").withDownlink("hychocokuleh"))
                                .withAllowedServices(Arrays.asList()),
                            new DataNetworkConfiguration()
                                .withDataNetwork(new DataNetworkResourceId().withId("rqlrqffawe"))
                                .withSessionAmbr(new Ambr().withUplink("urkphyjdxravju").withDownlink("dbrxmrgc"))
                                .withAllowedServices(Arrays.asList())))))
                .withTags(mapOf("scgdu", "fjjkbajb")).withRfspIndex(1717154026).withRegistrationTimer(1205812916)
                .create();

        Assertions.assertEquals("l", response.location());
        Assertions.assertEquals("qvqyvweht", response.tags().get("emxhzzy"));
        Assertions.assertEquals("fhbzffovwmbjlzq", response.ueAmbr().uplink());
        Assertions.assertEquals("czpgvdwnapfdq", response.ueAmbr().downlink());
        Assertions.assertEquals("owftptnuwjtks", response.defaultSlice().id());
        Assertions.assertEquals(2008228134, response.rfspIndex());
        Assertions.assertEquals(588054641, response.registrationTimer());
        Assertions.assertEquals("y", response.sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("leseyqrhvyeldo", response.sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions.assertEquals("v",
            response.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("kwiswskukjtas",
            response.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("vwisp",
            response.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().downlink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
