// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mobilenetwork.MobileNetworkManager;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.SimPolicy;
import com.azure.resourcemanager.mobilenetwork.models.SliceConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.SliceResourceId;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SimPoliciesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"siteProvisioningState\":{\"kduoiqtamtyvs\":\"Updating\",\"xrwzawnvsbcf\":\"NotApplicable\",\"agxnvhycvdimw\":\"Failed\"},\"ueAmbr\":{\"uplink\":\"zregzgyufutrwpw\",\"downlink\":\"ryekzkd\"},\"defaultSlice\":{\"id\":\"meottawj\"},\"rfspIndex\":375034092,\"registrationTimer\":543459562,\"sliceConfigurations\":[{\"slice\":{\"id\":\"hnhjtfvpndpmi\"},\"defaultDataNetwork\":{\"id\":\"jpnwynudql\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"sauzpjlx\"},\"sessionAmbr\":{\"uplink\":\"ehuxiqhzlraym\",\"downlink\":\"zxlskihmxr\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"dsajrednwyysh\"},\"sessionAmbr\":{\"uplink\":\"uwg\",\"downlink\":\"evuafpwzyifrk\"},\"allowedServices\":[]}]},{\"slice\":{\"id\":\"wltxeqipxgzdyims\"},\"defaultDataNetwork\":{\"id\":\"ayorprav\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"oge\"},\"sessionAmbr\":{\"uplink\":\"labnsmjkwynq\",\"downlink\":\"aekqsykvwj\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"qpkevmyltjc\"},\"sessionAmbr\":{\"uplink\":\"spxklu\",\"downlink\":\"cclfgxannn\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"ytzpo\"},\"sessionAmbr\":{\"uplink\":\"ewxigpxvk\",\"downlink\":\"maupxvpi\"},\"allowedServices\":[]},{\"dataNetwork\":{\"id\":\"dfaifyzyzeyuube\"},\"sessionAmbr\":{\"uplink\":\"ds\",\"downlink\":\"l\"},\"allowedServices\":[]}]}]},\"location\":\"toi\",\"tags\":{\"rxwe\":\"ygvfltgvdihoyn\",\"cy\":\"wkd\",\"dnaienhqhskndnel\":\"ucpcunnuzdqumoen\",\"lknwfoanniyop\":\"kaa\"},\"id\":\"txiv\",\"name\":\"nrlyxnuc\",\"type\":\"ephblkwqpatvbqs\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MobileNetworkManager manager =
            MobileNetworkManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SimPolicy response =
            manager
                .simPolicies()
                .define("hza")
                .withRegion("f")
                .withExistingMobileNetwork("sgftipwc", "byubhiqdxyurnpn")
                .withUeAmbr(new Ambr().withUplink("vatvcrkd").withDownlink("b"))
                .withDefaultSlice(new SliceResourceId().withId("bqxvhcsyhzlwxae"))
                .withSliceConfigurations(
                    Arrays
                        .asList(
                            new SliceConfiguration()
                                .withSlice(new SliceResourceId().withId("xdndsbdweaderzm"))
                                .withDefaultDataNetwork(new DataNetworkResourceId().withId("ntopa"))
                                .withDataNetworkConfigurations(
                                    Arrays
                                        .asList(
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("tmvmmagoaqylkjz"))
                                                .withSessionAmbr(
                                                    new Ambr().withUplink("jiuazjc").withDownlink("mxitpfinzcpd"))
                                                .withAllowedServices(Arrays.asList()),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("tkrlgjmtbd"))
                                                .withSessionAmbr(
                                                    new Ambr().withUplink("vcqguefzh").withDownlink("mpheqdur"))
                                                .withAllowedServices(Arrays.asList()),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("lyujlfyoump"))
                                                .withSessionAmbr(
                                                    new Ambr()
                                                        .withUplink("kyeclcdigpta")
                                                        .withDownlink("brzmqxucycijoclx"))
                                                .withAllowedServices(Arrays.asList()),
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("utgjcyz"))
                                                .withSessionAmbr(new Ambr().withUplink("zjd").withDownlink("r"))
                                                .withAllowedServices(Arrays.asList()))),
                            new SliceConfiguration()
                                .withSlice(new SliceResourceId().withId("jb"))
                                .withDefaultDataNetwork(new DataNetworkResourceId().withId("xjeaoqaqbzgyh"))
                                .withDataNetworkConfigurations(
                                    Arrays
                                        .asList(
                                            new DataNetworkConfiguration()
                                                .withDataNetwork(new DataNetworkResourceId().withId("wvua"))
                                                .withSessionAmbr(
                                                    new Ambr().withUplink("bwbqamt").withDownlink("uliyslpkcv"))
                                                .withAllowedServices(Arrays.asList())))))
                .withTags(mapOf("myw", "xe"))
                .withRfspIndex(1277865813)
                .withRegistrationTimer(92922352)
                .create();

        Assertions.assertEquals("toi", response.location());
        Assertions.assertEquals("ygvfltgvdihoyn", response.tags().get("rxwe"));
        Assertions.assertEquals("zregzgyufutrwpw", response.ueAmbr().uplink());
        Assertions.assertEquals("ryekzkd", response.ueAmbr().downlink());
        Assertions.assertEquals("meottawj", response.defaultSlice().id());
        Assertions.assertEquals(375034092, response.rfspIndex());
        Assertions.assertEquals(543459562, response.registrationTimer());
        Assertions.assertEquals("hnhjtfvpndpmi", response.sliceConfigurations().get(0).slice().id());
        Assertions.assertEquals("jpnwynudql", response.sliceConfigurations().get(0).defaultDataNetwork().id());
        Assertions
            .assertEquals(
                "sauzpjlx",
                response.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions
            .assertEquals(
                "ehuxiqhzlraym",
                response.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions
            .assertEquals(
                "zxlskihmxr",
                response.sliceConfigurations().get(0).dataNetworkConfigurations().get(0).sessionAmbr().downlink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
