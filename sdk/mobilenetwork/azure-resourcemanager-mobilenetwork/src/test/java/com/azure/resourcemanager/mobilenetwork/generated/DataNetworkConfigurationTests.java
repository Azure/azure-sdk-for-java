// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.PduSessionType;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.ServiceResourceId;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DataNetworkConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataNetworkConfiguration model = BinaryData.fromString(
            "{\"dataNetwork\":{\"id\":\"avodg\"},\"sessionAmbr\":{\"uplink\":\"xdbeesmieknl\",\"downlink\":\"ariaawi\"},\"5qi\":343253872,\"allocationAndRetentionPriorityLevel\":891454353,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv6\"],\"allowedServices\":[{\"id\":\"iagtc\"},{\"id\":\"jocqwogfnzjvusf\"},{\"id\":\"ld\"}],\"maximumNumberOfBufferedPackets\":1956453984}")
            .toObject(DataNetworkConfiguration.class);
        Assertions.assertEquals("avodg", model.dataNetwork().id());
        Assertions.assertEquals("xdbeesmieknl", model.sessionAmbr().uplink());
        Assertions.assertEquals("ariaawi", model.sessionAmbr().downlink());
        Assertions.assertEquals(343253872, model.fiveQi());
        Assertions.assertEquals(891454353, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV4, model.defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV6, model.additionalAllowedSessionTypes().get(0));
        Assertions.assertEquals("iagtc", model.allowedServices().get(0).id());
        Assertions.assertEquals(1956453984, model.maximumNumberOfBufferedPackets());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataNetworkConfiguration model
            = new DataNetworkConfiguration().withDataNetwork(new DataNetworkResourceId().withId("avodg"))
                .withSessionAmbr(new Ambr().withUplink("xdbeesmieknl").withDownlink("ariaawi"))
                .withFiveQi(343253872)
                .withAllocationAndRetentionPriorityLevel(891454353)
                .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                .withDefaultSessionType(PduSessionType.IPV4)
                .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV6))
                .withAllowedServices(Arrays.asList(new ServiceResourceId().withId("iagtc"),
                    new ServiceResourceId().withId("jocqwogfnzjvusf"), new ServiceResourceId().withId("ld")))
                .withMaximumNumberOfBufferedPackets(1956453984);
        model = BinaryData.fromObject(model).toObject(DataNetworkConfiguration.class);
        Assertions.assertEquals("avodg", model.dataNetwork().id());
        Assertions.assertEquals("xdbeesmieknl", model.sessionAmbr().uplink());
        Assertions.assertEquals("ariaawi", model.sessionAmbr().downlink());
        Assertions.assertEquals(343253872, model.fiveQi());
        Assertions.assertEquals(891454353, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV4, model.defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV6, model.additionalAllowedSessionTypes().get(0));
        Assertions.assertEquals("iagtc", model.allowedServices().get(0).id());
        Assertions.assertEquals(1956453984, model.maximumNumberOfBufferedPackets());
    }
}
