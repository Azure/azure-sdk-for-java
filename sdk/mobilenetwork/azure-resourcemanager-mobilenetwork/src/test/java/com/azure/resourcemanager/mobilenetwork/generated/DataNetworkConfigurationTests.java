// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.PduSessionType;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.ServiceResourceId;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DataNetworkConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataNetworkConfiguration model = BinaryData.fromString(
            "{\"dataNetwork\":{\"id\":\"nzqodfvpg\"},\"sessionAmbr\":{\"uplink\":\"hoxgsgbpf\",\"downlink\":\"zdjtxvzflbqv\"},\"5qi\":1973485152,\"allocationAndRetentionPriorityLevel\":887715159,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv4\"],\"allowedServices\":[{\"id\":\"etnwsdtutnw\"},{\"id\":\"duy\"},{\"id\":\"vuzhyr\"}],\"maximumNumberOfBufferedPackets\":680405996}")
            .toObject(DataNetworkConfiguration.class);
        Assertions.assertEquals("nzqodfvpg", model.dataNetwork().id());
        Assertions.assertEquals("hoxgsgbpf", model.sessionAmbr().uplink());
        Assertions.assertEquals("zdjtxvzflbqv", model.sessionAmbr().downlink());
        Assertions.assertEquals(1973485152, model.fiveQi());
        Assertions.assertEquals(887715159, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV4, model.defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV4, model.additionalAllowedSessionTypes().get(0));
        Assertions.assertEquals("etnwsdtutnw", model.allowedServices().get(0).id());
        Assertions.assertEquals(680405996, model.maximumNumberOfBufferedPackets());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataNetworkConfiguration model
            = new DataNetworkConfiguration().withDataNetwork(new DataNetworkResourceId().withId("nzqodfvpg"))
                .withSessionAmbr(new Ambr().withUplink("hoxgsgbpf").withDownlink("zdjtxvzflbqv"))
                .withFiveQi(1973485152)
                .withAllocationAndRetentionPriorityLevel(887715159)
                .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                .withDefaultSessionType(PduSessionType.IPV4)
                .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV4))
                .withAllowedServices(Arrays.asList(new ServiceResourceId().withId("etnwsdtutnw"),
                    new ServiceResourceId().withId("duy"), new ServiceResourceId().withId("vuzhyr")))
                .withMaximumNumberOfBufferedPackets(680405996);
        model = BinaryData.fromObject(model).toObject(DataNetworkConfiguration.class);
        Assertions.assertEquals("nzqodfvpg", model.dataNetwork().id());
        Assertions.assertEquals("hoxgsgbpf", model.sessionAmbr().uplink());
        Assertions.assertEquals("zdjtxvzflbqv", model.sessionAmbr().downlink());
        Assertions.assertEquals(1973485152, model.fiveQi());
        Assertions.assertEquals(887715159, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV4, model.defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV4, model.additionalAllowedSessionTypes().get(0));
        Assertions.assertEquals("etnwsdtutnw", model.allowedServices().get(0).id());
        Assertions.assertEquals(680405996, model.maximumNumberOfBufferedPackets());
    }
}
