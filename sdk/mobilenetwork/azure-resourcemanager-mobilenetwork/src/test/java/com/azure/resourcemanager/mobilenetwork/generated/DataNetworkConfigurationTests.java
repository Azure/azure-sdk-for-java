// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.PduSessionType;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.ServiceResourceId;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DataNetworkConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataNetworkConfiguration model = BinaryData.fromString(
            "{\"dataNetwork\":{\"id\":\"xcbihw\"},\"sessionAmbr\":{\"uplink\":\"knfd\",\"downlink\":\"twjchrdg\"},\"5qi\":916840280,\"allocationAndRetentionPriorityLevel\":144072003,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv4\"],\"allowedServices\":[{\"id\":\"uu\"},{\"id\":\"fdlwg\"},{\"id\":\"ytsbwtovv\"},{\"id\":\"gseinq\"}],\"maximumNumberOfBufferedPackets\":1894270396}")
            .toObject(DataNetworkConfiguration.class);
        Assertions.assertEquals("xcbihw", model.dataNetwork().id());
        Assertions.assertEquals("knfd", model.sessionAmbr().uplink());
        Assertions.assertEquals("twjchrdg", model.sessionAmbr().downlink());
        Assertions.assertEquals(916840280, model.fiveQi());
        Assertions.assertEquals(144072003, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV4, model.defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV4, model.additionalAllowedSessionTypes().get(0));
        Assertions.assertEquals("uu", model.allowedServices().get(0).id());
        Assertions.assertEquals(1894270396, model.maximumNumberOfBufferedPackets());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataNetworkConfiguration model
            = new DataNetworkConfiguration().withDataNetwork(new DataNetworkResourceId().withId("xcbihw"))
                .withSessionAmbr(new Ambr().withUplink("knfd").withDownlink("twjchrdg")).withFiveQi(916840280)
                .withAllocationAndRetentionPriorityLevel(144072003)
                .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                .withDefaultSessionType(PduSessionType.IPV4)
                .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV4))
                .withAllowedServices(
                    Arrays.asList(new ServiceResourceId().withId("uu"), new ServiceResourceId().withId("fdlwg"),
                        new ServiceResourceId().withId("ytsbwtovv"), new ServiceResourceId().withId("gseinq")))
                .withMaximumNumberOfBufferedPackets(1894270396);
        model = BinaryData.fromObject(model).toObject(DataNetworkConfiguration.class);
        Assertions.assertEquals("xcbihw", model.dataNetwork().id());
        Assertions.assertEquals("knfd", model.sessionAmbr().uplink());
        Assertions.assertEquals("twjchrdg", model.sessionAmbr().downlink());
        Assertions.assertEquals(916840280, model.fiveQi());
        Assertions.assertEquals(144072003, model.allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE, model.preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV4, model.defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV4, model.additionalAllowedSessionTypes().get(0));
        Assertions.assertEquals("uu", model.allowedServices().get(0).id());
        Assertions.assertEquals(1894270396, model.maximumNumberOfBufferedPackets());
    }
}
