// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.PduSessionType;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.ServiceResourceId;
import com.azure.resourcemanager.mobilenetwork.models.SliceConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.SliceResourceId;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SliceConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SliceConfiguration model = BinaryData.fromString(
            "{\"slice\":{\"id\":\"mjihyeozphv\"},\"defaultDataNetwork\":{\"id\":\"auyqncygupkv\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"mdscwxqupev\"},\"sessionAmbr\":{\"uplink\":\"hfstotxhojujbyp\",\"downlink\":\"lmcuvhixb\"},\"5qi\":1696706590,\"allocationAndRetentionPriorityLevel\":12838706,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv4\",\"IPv6\",\"IPv6\",\"IPv4\"],\"allowedServices\":[{\"id\":\"iwkkbn\"},{\"id\":\"jrywvtylbfpnc\"},{\"id\":\"rd\"}],\"maximumNumberOfBufferedPackets\":287864608}]}")
            .toObject(SliceConfiguration.class);
        Assertions.assertEquals("mjihyeozphv", model.slice().id());
        Assertions.assertEquals("auyqncygupkv", model.defaultDataNetwork().id());
        Assertions.assertEquals("mdscwxqupev", model.dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("hfstotxhojujbyp", model.dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("lmcuvhixb", model.dataNetworkConfigurations().get(0).sessionAmbr().downlink());
        Assertions.assertEquals(1696706590, model.dataNetworkConfigurations().get(0).fiveQi());
        Assertions.assertEquals(12838706,
            model.dataNetworkConfigurations().get(0).allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT,
            model.dataNetworkConfigurations().get(0).preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            model.dataNetworkConfigurations().get(0).preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV4, model.dataNetworkConfigurations().get(0).defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV4,
            model.dataNetworkConfigurations().get(0).additionalAllowedSessionTypes().get(0));
        Assertions.assertEquals("iwkkbn", model.dataNetworkConfigurations().get(0).allowedServices().get(0).id());
        Assertions.assertEquals(287864608, model.dataNetworkConfigurations().get(0).maximumNumberOfBufferedPackets());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SliceConfiguration model = new SliceConfiguration().withSlice(new SliceResourceId().withId("mjihyeozphv"))
            .withDefaultDataNetwork(new DataNetworkResourceId().withId("auyqncygupkv"))
            .withDataNetworkConfigurations(Arrays.asList(new DataNetworkConfiguration()
                .withDataNetwork(new DataNetworkResourceId().withId("mdscwxqupev"))
                .withSessionAmbr(new Ambr().withUplink("hfstotxhojujbyp").withDownlink("lmcuvhixb"))
                .withFiveQi(1696706590).withAllocationAndRetentionPriorityLevel(12838706)
                .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                .withDefaultSessionType(PduSessionType.IPV4)
                .withAdditionalAllowedSessionTypes(
                    Arrays.asList(PduSessionType.IPV4, PduSessionType.IPV6, PduSessionType.IPV6, PduSessionType.IPV4))
                .withAllowedServices(Arrays.asList(new ServiceResourceId().withId("iwkkbn"),
                    new ServiceResourceId().withId("jrywvtylbfpnc"), new ServiceResourceId().withId("rd")))
                .withMaximumNumberOfBufferedPackets(287864608)));
        model = BinaryData.fromObject(model).toObject(SliceConfiguration.class);
        Assertions.assertEquals("mjihyeozphv", model.slice().id());
        Assertions.assertEquals("auyqncygupkv", model.defaultDataNetwork().id());
        Assertions.assertEquals("mdscwxqupev", model.dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("hfstotxhojujbyp", model.dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("lmcuvhixb", model.dataNetworkConfigurations().get(0).sessionAmbr().downlink());
        Assertions.assertEquals(1696706590, model.dataNetworkConfigurations().get(0).fiveQi());
        Assertions.assertEquals(12838706,
            model.dataNetworkConfigurations().get(0).allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT,
            model.dataNetworkConfigurations().get(0).preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            model.dataNetworkConfigurations().get(0).preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV4, model.dataNetworkConfigurations().get(0).defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV4,
            model.dataNetworkConfigurations().get(0).additionalAllowedSessionTypes().get(0));
        Assertions.assertEquals("iwkkbn", model.dataNetworkConfigurations().get(0).allowedServices().get(0).id());
        Assertions.assertEquals(287864608, model.dataNetworkConfigurations().get(0).maximumNumberOfBufferedPackets());
    }
}
