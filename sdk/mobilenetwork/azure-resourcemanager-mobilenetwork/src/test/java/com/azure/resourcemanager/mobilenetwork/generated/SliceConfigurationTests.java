// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.DataNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.PduSessionType;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.ServiceResourceId;
import com.azure.resourcemanager.mobilenetwork.models.SliceConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.SliceResourceId;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SliceConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SliceConfiguration model = BinaryData.fromString(
            "{\"slice\":{\"id\":\"mylweazulc\"},\"defaultDataNetwork\":{\"id\":\"ethwwnpjhlfz\"},\"dataNetworkConfigurations\":[{\"dataNetwork\":{\"id\":\"pchwa\"},\"sessionAmbr\":{\"uplink\":\"fb\",\"downlink\":\"usnfepgfewet\"},\"5qi\":1730417051,\"allocationAndRetentionPriorityLevel\":378855798,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv6\",\"IPv4\"],\"allowedServices\":[{\"id\":\"immbcx\"},{\"id\":\"h\"}],\"maximumNumberOfBufferedPackets\":331049008},{\"dataNetwork\":{\"id\":\"orxvxcjzhqiz\"},\"sessionAmbr\":{\"uplink\":\"fpxtg\",\"downlink\":\"scjavftju\"},\"5qi\":562191246,\"allocationAndRetentionPriorityLevel\":2005963573,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"defaultSessionType\":\"IPv4\",\"additionalAllowedSessionTypes\":[\"IPv4\",\"IPv4\",\"IPv4\",\"IPv4\"],\"allowedServices\":[{\"id\":\"civmmg\"},{\"id\":\"f\"}],\"maximumNumberOfBufferedPackets\":1851539206}]}")
            .toObject(SliceConfiguration.class);
        Assertions.assertEquals("mylweazulc", model.slice().id());
        Assertions.assertEquals("ethwwnpjhlfz", model.defaultDataNetwork().id());
        Assertions.assertEquals("pchwa", model.dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("fb", model.dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("usnfepgfewet", model.dataNetworkConfigurations().get(0).sessionAmbr().downlink());
        Assertions.assertEquals(1730417051, model.dataNetworkConfigurations().get(0).fiveQi());
        Assertions.assertEquals(378855798,
            model.dataNetworkConfigurations().get(0).allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT,
            model.dataNetworkConfigurations().get(0).preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            model.dataNetworkConfigurations().get(0).preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV4, model.dataNetworkConfigurations().get(0).defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV6,
            model.dataNetworkConfigurations().get(0).additionalAllowedSessionTypes().get(0));
        Assertions.assertEquals("immbcx", model.dataNetworkConfigurations().get(0).allowedServices().get(0).id());
        Assertions.assertEquals(331049008, model.dataNetworkConfigurations().get(0).maximumNumberOfBufferedPackets());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SliceConfiguration model = new SliceConfiguration().withSlice(new SliceResourceId().withId("mylweazulc"))
            .withDefaultDataNetwork(new DataNetworkResourceId().withId("ethwwnpjhlfz"))
            .withDataNetworkConfigurations(Arrays.asList(
                new DataNetworkConfiguration().withDataNetwork(new DataNetworkResourceId().withId("pchwa"))
                    .withSessionAmbr(new Ambr().withUplink("fb").withDownlink("usnfepgfewet"))
                    .withFiveQi(1730417051)
                    .withAllocationAndRetentionPriorityLevel(378855798)
                    .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                    .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                    .withDefaultSessionType(PduSessionType.IPV4)
                    .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV6, PduSessionType.IPV4))
                    .withAllowedServices(
                        Arrays.asList(new ServiceResourceId().withId("immbcx"), new ServiceResourceId().withId("h")))
                    .withMaximumNumberOfBufferedPackets(331049008),
                new DataNetworkConfiguration().withDataNetwork(new DataNetworkResourceId().withId("orxvxcjzhqiz"))
                    .withSessionAmbr(new Ambr().withUplink("fpxtg").withDownlink("scjavftju"))
                    .withFiveQi(562191246)
                    .withAllocationAndRetentionPriorityLevel(2005963573)
                    .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                    .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                    .withDefaultSessionType(PduSessionType.IPV4)
                    .withAdditionalAllowedSessionTypes(Arrays.asList(PduSessionType.IPV4, PduSessionType.IPV4,
                        PduSessionType.IPV4, PduSessionType.IPV4))
                    .withAllowedServices(
                        Arrays.asList(new ServiceResourceId().withId("civmmg"), new ServiceResourceId().withId("f")))
                    .withMaximumNumberOfBufferedPackets(1851539206)));
        model = BinaryData.fromObject(model).toObject(SliceConfiguration.class);
        Assertions.assertEquals("mylweazulc", model.slice().id());
        Assertions.assertEquals("ethwwnpjhlfz", model.defaultDataNetwork().id());
        Assertions.assertEquals("pchwa", model.dataNetworkConfigurations().get(0).dataNetwork().id());
        Assertions.assertEquals("fb", model.dataNetworkConfigurations().get(0).sessionAmbr().uplink());
        Assertions.assertEquals("usnfepgfewet", model.dataNetworkConfigurations().get(0).sessionAmbr().downlink());
        Assertions.assertEquals(1730417051, model.dataNetworkConfigurations().get(0).fiveQi());
        Assertions.assertEquals(378855798,
            model.dataNetworkConfigurations().get(0).allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT,
            model.dataNetworkConfigurations().get(0).preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.NOT_PREEMPTABLE,
            model.dataNetworkConfigurations().get(0).preemptionVulnerability());
        Assertions.assertEquals(PduSessionType.IPV4, model.dataNetworkConfigurations().get(0).defaultSessionType());
        Assertions.assertEquals(PduSessionType.IPV6,
            model.dataNetworkConfigurations().get(0).additionalAllowedSessionTypes().get(0));
        Assertions.assertEquals("immbcx", model.dataNetworkConfigurations().get(0).allowedServices().get(0).id());
        Assertions.assertEquals(331049008, model.dataNetworkConfigurations().get(0).maximumNumberOfBufferedPackets());
    }
}
