// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.PacketCoreControlPlaneVersionInner;
import com.azure.resourcemanager.mobilenetwork.models.ObsoleteVersion;
import com.azure.resourcemanager.mobilenetwork.models.Platform;
import com.azure.resourcemanager.mobilenetwork.models.PlatformType;
import com.azure.resourcemanager.mobilenetwork.models.RecommendedVersion;
import com.azure.resourcemanager.mobilenetwork.models.VersionState;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PacketCoreControlPlaneVersionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PacketCoreControlPlaneVersionInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Deleted\",\"platforms\":[{\"platformType\":\"AKS-HCI\",\"versionState\":\"Unknown\",\"minimumPlatformSoftwareVersion\":\"uoegrpkhjwniyqs\",\"maximumPlatformSoftwareVersion\":\"i\",\"recommendedVersion\":\"NotRecommended\",\"obsoleteVersion\":\"Obsolete\",\"haUpgradesAvailable\":[\"zl\",\"mbmpaxmodfvuefy\",\"sbpfvmwyhr\",\"ouyftaakc\"]},{\"platformType\":\"3P-AZURE-STACK-HCI\",\"versionState\":\"Active\",\"minimumPlatformSoftwareVersion\":\"qtmnubexkpzk\",\"maximumPlatformSoftwareVersion\":\"ondjmq\",\"recommendedVersion\":\"NotRecommended\",\"obsoleteVersion\":\"NotObsolete\",\"haUpgradesAvailable\":[\"gkopkwhojvpajqgx\"]},{\"platformType\":\"3P-AZURE-STACK-HCI\",\"versionState\":\"Unknown\",\"minimumPlatformSoftwareVersion\":\"bq\",\"maximumPlatformSoftwareVersion\":\"vmkcx\",\"recommendedVersion\":\"NotRecommended\",\"obsoleteVersion\":\"NotObsolete\",\"haUpgradesAvailable\":[\"lxprglyatddckcbc\",\"ejrjxgciqibrho\",\"xsdqrhzoymibmrqy\",\"bahwfl\"]},{\"platformType\":\"3P-AZURE-STACK-HCI\",\"versionState\":\"ValidationFailed\",\"minimumPlatformSoftwareVersion\":\"hrkwo\",\"maximumPlatformSoftwareVersion\":\"yvoqa\",\"recommendedVersion\":\"NotRecommended\",\"obsoleteVersion\":\"NotObsolete\",\"haUpgradesAvailable\":[\"tg\",\"wbwo\",\"nwashrtd\",\"kcnqxwbpo\"]}]},\"id\":\"lpiujwaa\",\"name\":\"ipqiiobyuqerpq\",\"type\":\"pqwcciuqgbdbutau\"}")
            .toObject(PacketCoreControlPlaneVersionInner.class);
        Assertions.assertEquals(PlatformType.AKS_HCI, model.platforms().get(0).platformType());
        Assertions.assertEquals(VersionState.UNKNOWN, model.platforms().get(0).versionState());
        Assertions.assertEquals("uoegrpkhjwniyqs", model.platforms().get(0).minimumPlatformSoftwareVersion());
        Assertions.assertEquals("i", model.platforms().get(0).maximumPlatformSoftwareVersion());
        Assertions.assertEquals(RecommendedVersion.NOT_RECOMMENDED, model.platforms().get(0).recommendedVersion());
        Assertions.assertEquals(ObsoleteVersion.OBSOLETE, model.platforms().get(0).obsoleteVersion());
        Assertions.assertEquals("zl", model.platforms().get(0).haUpgradesAvailable().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PacketCoreControlPlaneVersionInner model = new PacketCoreControlPlaneVersionInner().withPlatforms(Arrays.asList(
            new Platform().withPlatformType(PlatformType.AKS_HCI)
                .withVersionState(VersionState.UNKNOWN)
                .withMinimumPlatformSoftwareVersion("uoegrpkhjwniyqs")
                .withMaximumPlatformSoftwareVersion("i")
                .withRecommendedVersion(RecommendedVersion.NOT_RECOMMENDED)
                .withObsoleteVersion(ObsoleteVersion.OBSOLETE)
                .withHaUpgradesAvailable(Arrays.asList("zl", "mbmpaxmodfvuefy", "sbpfvmwyhr", "ouyftaakc")),
            new Platform().withPlatformType(PlatformType.THREE_P_AZURE_STACK_HCI)
                .withVersionState(VersionState.ACTIVE)
                .withMinimumPlatformSoftwareVersion("qtmnubexkpzk")
                .withMaximumPlatformSoftwareVersion("ondjmq")
                .withRecommendedVersion(RecommendedVersion.NOT_RECOMMENDED)
                .withObsoleteVersion(ObsoleteVersion.NOT_OBSOLETE)
                .withHaUpgradesAvailable(Arrays.asList("gkopkwhojvpajqgx")),
            new Platform().withPlatformType(PlatformType.THREE_P_AZURE_STACK_HCI)
                .withVersionState(VersionState.UNKNOWN)
                .withMinimumPlatformSoftwareVersion("bq")
                .withMaximumPlatformSoftwareVersion("vmkcx")
                .withRecommendedVersion(RecommendedVersion.NOT_RECOMMENDED)
                .withObsoleteVersion(ObsoleteVersion.NOT_OBSOLETE)
                .withHaUpgradesAvailable(
                    Arrays.asList("lxprglyatddckcbc", "ejrjxgciqibrho", "xsdqrhzoymibmrqy", "bahwfl")),
            new Platform().withPlatformType(PlatformType.THREE_P_AZURE_STACK_HCI)
                .withVersionState(VersionState.VALIDATION_FAILED)
                .withMinimumPlatformSoftwareVersion("hrkwo")
                .withMaximumPlatformSoftwareVersion("yvoqa")
                .withRecommendedVersion(RecommendedVersion.NOT_RECOMMENDED)
                .withObsoleteVersion(ObsoleteVersion.NOT_OBSOLETE)
                .withHaUpgradesAvailable(Arrays.asList("tg", "wbwo", "nwashrtd", "kcnqxwbpo"))));
        model = BinaryData.fromObject(model).toObject(PacketCoreControlPlaneVersionInner.class);
        Assertions.assertEquals(PlatformType.AKS_HCI, model.platforms().get(0).platformType());
        Assertions.assertEquals(VersionState.UNKNOWN, model.platforms().get(0).versionState());
        Assertions.assertEquals("uoegrpkhjwniyqs", model.platforms().get(0).minimumPlatformSoftwareVersion());
        Assertions.assertEquals("i", model.platforms().get(0).maximumPlatformSoftwareVersion());
        Assertions.assertEquals(RecommendedVersion.NOT_RECOMMENDED, model.platforms().get(0).recommendedVersion());
        Assertions.assertEquals(ObsoleteVersion.OBSOLETE, model.platforms().get(0).obsoleteVersion());
        Assertions.assertEquals("zl", model.platforms().get(0).haUpgradesAvailable().get(0));
    }
}
