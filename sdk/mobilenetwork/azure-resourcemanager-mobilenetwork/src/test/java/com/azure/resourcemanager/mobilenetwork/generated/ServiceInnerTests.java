// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.ServiceInner;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.QosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.ServiceDataFlowTemplate;
import com.azure.resourcemanager.mobilenetwork.models.TrafficControlPermission;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServiceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Accepted\",\"servicePrecedence\":1638328793,\"serviceQosPolicy\":{\"5qi\":84729056,\"allocationAndRetentionPriorityLevel\":1322696494,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"dreqnovvqf\",\"downlink\":\"vljxywsu\"}},\"pccRules\":[{\"ruleName\":\"yrs\",\"rulePrecedence\":371488938,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"tgadgvraeaen\",\"downlink\":\"qnzarrwl\"},\"5qi\":1397845425,\"allocationAndRetentionPriorityLevel\":1309534736,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"cewiipfpub\",\"downlink\":\"ibwwiftohqkv\"}},\"trafficControl\":\"Blocked\",\"serviceDataFlowTemplates\":[{\"templateName\":\"sgplsakn\",\"direction\":\"Uplink\",\"protocol\":[\"synljphuopxodl\",\"iyntorzihle\",\"sjswsrms\"],\"remoteIpList\":[\"zrpzb\",\"hckqqzqioxiy\",\"uiizynke\",\"yatrwy\"],\"ports\":[\"ibzyhwitsmyp\",\"ynpcdpumnzgmwznm\",\"biknsorgjhxbld\",\"lwwrl\"]},{\"templateName\":\"dmtnc\",\"direction\":\"Downlink\",\"protocol\":[\"otllxdyhgsyo\"],\"remoteIpList\":[\"gjltdtbnnhado\",\"crkvcikhnv\",\"amqgxqquezikyw\",\"gxk\"],\"ports\":[\"atmelwui\"]}]},{\"ruleName\":\"iccjzkzivgvvcna\",\"rulePrecedence\":980473752,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"rnxxmueed\",\"downlink\":\"drd\"},\"5qi\":817024636,\"allocationAndRetentionPriorityLevel\":467483193,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"NotPreemptable\",\"maximumBitRate\":{\"uplink\":\"healmfmtda\",\"downlink\":\"ygdvwv\"}},\"trafficControl\":\"Blocked\",\"serviceDataFlowTemplates\":[{\"templateName\":\"hgwxrtfudx\",\"direction\":\"Downlink\",\"protocol\":[\"gyqagvrvmnpkuk\"],\"remoteIpList\":[\"i\",\"dblx\"],\"ports\":[\"mfnjh\",\"j\",\"wmszkk\"]},{\"templateName\":\"oqreyfkzikfjawn\",\"direction\":\"Downlink\",\"protocol\":[\"vxwc\"],\"remoteIpList\":[\"lpcirelsf\",\"aenwabf\",\"tkl\",\"dxbjhwuaanozj\"],\"ports\":[\"hyoulpjr\"]},{\"templateName\":\"xagl\",\"direction\":\"Uplink\",\"protocol\":[\"mjwosytx\",\"tcs\"],\"remoteIpList\":[\"cktqumiekkezzi\",\"hlyfjhdgqgg\",\"bdunygaeqid\"],\"ports\":[\"atpxl\",\"rxcyjmoad\",\"uvarmywdmjsjq\",\"jhhyxxrwlycoduhp\"]},{\"templateName\":\"xkgymareqnajxqu\",\"direction\":\"Bidirectional\",\"protocol\":[\"ky\"],\"remoteIpList\":[\"beddgssofw\",\"mzqa\"],\"ports\":[\"mnjijpxacqqudf\",\"byxbaaabjy\"]}]},{\"ruleName\":\"ayffim\",\"rulePrecedence\":1578513386,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"uzqogsexnevf\",\"downlink\":\"nwnwme\"},\"5qi\":1440499034,\"allocationAndRetentionPriorityLevel\":10547913,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"soibjudpfrx\",\"downlink\":\"rthzvaytdwkqbrqu\"}},\"trafficControl\":\"Blocked\",\"serviceDataFlowTemplates\":[{\"templateName\":\"h\",\"direction\":\"Uplink\",\"protocol\":[\"i\",\"ivpdtiir\",\"tdqoaxoruzfgsq\",\"yfxrx\"],\"remoteIpList\":[\"eptra\"],\"ports\":[\"ezw\",\"wnwxuqlcvyd\"]},{\"templateName\":\"patdooaojkniodko\",\"direction\":\"Bidirectional\",\"protocol\":[\"wnujhemmsbvdk\"],\"remoteIpList\":[\"odtji\",\"fw\",\"lfltka\",\"jvefkdlfoakggkfp\"],\"ports\":[\"owpulpq\"]},{\"templateName\":\"lyls\",\"direction\":\"Downlink\",\"protocol\":[\"qjnsjervtia\"],\"remoteIpList\":[\"sdszue\",\"psbzkfzbeyvpn\",\"icvi\"],\"ports\":[\"jjxd\"]},{\"templateName\":\"rbuukzclewyhmlwp\",\"direction\":\"Bidirectional\",\"protocol\":[\"zpof\",\"cckwyfzqwhxxbu\",\"qa\",\"zfeqztppri\"],\"remoteIpList\":[\"xorjaltolmncwsob\",\"wcsdbnwdcfhucq\",\"pfuvglsbjjca\",\"vxb\"],\"ports\":[\"udutnco\",\"mr\",\"xqtvcofu\"]}]},{\"ruleName\":\"f\",\"rulePrecedence\":573023383,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"jub\",\"downlink\":\"dknnqvsazn\"},\"5qi\":764676926,\"allocationAndRetentionPriorityLevel\":1165613569,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"sahmky\",\"downlink\":\"grauwjuetaebur\"}},\"trafficControl\":\"Enabled\",\"serviceDataFlowTemplates\":[{\"templateName\":\"ovsm\",\"direction\":\"Bidirectional\",\"protocol\":[\"wabm\",\"oefki\"],\"remoteIpList\":[\"vtpuqujmqlgk\"],\"ports\":[\"ndo\",\"ongbjcnt\",\"jitcjedftwwaez\"]},{\"templateName\":\"ojvdcpzfoqo\",\"direction\":\"Bidirectional\",\"protocol\":[\"ybxarzgszu\",\"oxciqopidoamcio\"],\"remoteIpList\":[\"khazxkhnzbonlwn\"],\"ports\":[\"gokdwbwhks\",\"zcmrvexztvb\",\"qgsfraoyzkoow\",\"lmnguxaw\"]},{\"templateName\":\"aldsy\",\"direction\":\"Downlink\",\"protocol\":[\"imerqfobwyznk\",\"ykutwpf\",\"pagmhrskdsnf\",\"sd\"],\"remoteIpList\":[\"kgtdlmkkze\",\"dlhewp\",\"sdsttwvog\",\"bbejdcngqqm\"],\"ports\":[\"ufgmjzrwrdg\",\"twaenuuzko\"]},{\"templateName\":\"bminrfdwoyuhhzi\",\"direction\":\"Bidirectional\",\"protocol\":[\"fozbhdmsmlmzqhof\",\"rmaequ\",\"ah\"],\"remoteIpList\":[\"cslfaoqzpiyylha\",\"nswhcc\"],\"ports\":[\"kaivwit\"]}]}]},\"location\":\"cywuggwol\",\"tags\":{\"i\":\"zbwemh\",\"wmsweypqwd\":\"sbrgz\",\"mkttlstvlzywem\":\"ggicccnxqhue\",\"lusiy\":\"zrncsdt\"},\"id\":\"bsfgytguslfea\",\"name\":\"cy\",\"type\":\"qukyhejhzi\"}")
                .toObject(ServiceInner.class);
        Assertions.assertEquals("cywuggwol", model.location());
        Assertions.assertEquals("zbwemh", model.tags().get("i"));
        Assertions.assertEquals(1638328793, model.servicePrecedence());
        Assertions.assertEquals(84729056, model.serviceQosPolicy().fiveQi());
        Assertions.assertEquals(1322696494, model.serviceQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.serviceQosPolicy().preemptionCapability());
        Assertions
            .assertEquals(PreemptionVulnerability.PREEMPTABLE, model.serviceQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("dreqnovvqf", model.serviceQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("vljxywsu", model.serviceQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("yrs", model.pccRules().get(0).ruleName());
        Assertions.assertEquals(371488938, model.pccRules().get(0).rulePrecedence());
        Assertions.assertEquals(1397845425, model.pccRules().get(0).ruleQosPolicy().fiveQi());
        Assertions
            .assertEquals(1309534736, model.pccRules().get(0).ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions
            .assertEquals(
                PreemptionCapability.NOT_PREEMPT, model.pccRules().get(0).ruleQosPolicy().preemptionCapability());
        Assertions
            .assertEquals(
                PreemptionVulnerability.PREEMPTABLE, model.pccRules().get(0).ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("cewiipfpub", model.pccRules().get(0).ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("ibwwiftohqkv", model.pccRules().get(0).ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("tgadgvraeaen", model.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("qnzarrwl", model.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.BLOCKED, model.pccRules().get(0).trafficControl());
        Assertions.assertEquals("sgplsakn", model.pccRules().get(0).serviceDataFlowTemplates().get(0).templateName());
        Assertions
            .assertEquals(SdfDirection.UPLINK, model.pccRules().get(0).serviceDataFlowTemplates().get(0).direction());
        Assertions
            .assertEquals(
                "synljphuopxodl", model.pccRules().get(0).serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions
            .assertEquals("zrpzb", model.pccRules().get(0).serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions
            .assertEquals("ibzyhwitsmyp", model.pccRules().get(0).serviceDataFlowTemplates().get(0).ports().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceInner model =
            new ServiceInner()
                .withLocation("cywuggwol")
                .withTags(
                    mapOf("i", "zbwemh", "wmsweypqwd", "sbrgz", "mkttlstvlzywem", "ggicccnxqhue", "lusiy", "zrncsdt"))
                .withServicePrecedence(1638328793)
                .withServiceQosPolicy(
                    new QosPolicy()
                        .withFiveQi(84729056)
                        .withAllocationAndRetentionPriorityLevel(1322696494)
                        .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                        .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                        .withMaximumBitRate(new Ambr().withUplink("dreqnovvqf").withDownlink("vljxywsu")))
                .withPccRules(
                    Arrays
                        .asList(
                            new PccRuleConfiguration()
                                .withRuleName("yrs")
                                .withRulePrecedence(371488938)
                                .withRuleQosPolicy(
                                    new PccRuleQosPolicy()
                                        .withFiveQi(1397845425)
                                        .withAllocationAndRetentionPriorityLevel(1309534736)
                                        .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                                        .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                                        .withMaximumBitRate(
                                            new Ambr().withUplink("cewiipfpub").withDownlink("ibwwiftohqkv"))
                                        .withGuaranteedBitRate(
                                            new Ambr().withUplink("tgadgvraeaen").withDownlink("qnzarrwl")))
                                .withTrafficControl(TrafficControlPermission.BLOCKED)
                                .withServiceDataFlowTemplates(
                                    Arrays
                                        .asList(
                                            new ServiceDataFlowTemplate()
                                                .withTemplateName("sgplsakn")
                                                .withDirection(SdfDirection.UPLINK)
                                                .withProtocol(
                                                    Arrays.asList("synljphuopxodl", "iyntorzihle", "sjswsrms"))
                                                .withRemoteIpList(
                                                    Arrays.asList("zrpzb", "hckqqzqioxiy", "uiizynke", "yatrwy"))
                                                .withPorts(
                                                    Arrays
                                                        .asList(
                                                            "ibzyhwitsmyp",
                                                            "ynpcdpumnzgmwznm",
                                                            "biknsorgjhxbld",
                                                            "lwwrl")),
                                            new ServiceDataFlowTemplate()
                                                .withTemplateName("dmtnc")
                                                .withDirection(SdfDirection.DOWNLINK)
                                                .withProtocol(Arrays.asList("otllxdyhgsyo"))
                                                .withRemoteIpList(
                                                    Arrays
                                                        .asList("gjltdtbnnhado", "crkvcikhnv", "amqgxqquezikyw", "gxk"))
                                                .withPorts(Arrays.asList("atmelwui")))),
                            new PccRuleConfiguration()
                                .withRuleName("iccjzkzivgvvcna")
                                .withRulePrecedence(980473752)
                                .withRuleQosPolicy(
                                    new PccRuleQosPolicy()
                                        .withFiveQi(817024636)
                                        .withAllocationAndRetentionPriorityLevel(467483193)
                                        .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                                        .withPreemptionVulnerability(PreemptionVulnerability.NOT_PREEMPTABLE)
                                        .withMaximumBitRate(new Ambr().withUplink("healmfmtda").withDownlink("ygdvwv"))
                                        .withGuaranteedBitRate(new Ambr().withUplink("rnxxmueed").withDownlink("drd")))
                                .withTrafficControl(TrafficControlPermission.BLOCKED)
                                .withServiceDataFlowTemplates(
                                    Arrays
                                        .asList(
                                            new ServiceDataFlowTemplate()
                                                .withTemplateName("hgwxrtfudx")
                                                .withDirection(SdfDirection.DOWNLINK)
                                                .withProtocol(Arrays.asList("gyqagvrvmnpkuk"))
                                                .withRemoteIpList(Arrays.asList("i", "dblx"))
                                                .withPorts(Arrays.asList("mfnjh", "j", "wmszkk")),
                                            new ServiceDataFlowTemplate()
                                                .withTemplateName("oqreyfkzikfjawn")
                                                .withDirection(SdfDirection.DOWNLINK)
                                                .withProtocol(Arrays.asList("vxwc"))
                                                .withRemoteIpList(
                                                    Arrays.asList("lpcirelsf", "aenwabf", "tkl", "dxbjhwuaanozj"))
                                                .withPorts(Arrays.asList("hyoulpjr")),
                                            new ServiceDataFlowTemplate()
                                                .withTemplateName("xagl")
                                                .withDirection(SdfDirection.UPLINK)
                                                .withProtocol(Arrays.asList("mjwosytx", "tcs"))
                                                .withRemoteIpList(
                                                    Arrays.asList("cktqumiekkezzi", "hlyfjhdgqgg", "bdunygaeqid"))
                                                .withPorts(
                                                    Arrays
                                                        .asList(
                                                            "atpxl", "rxcyjmoad", "uvarmywdmjsjq", "jhhyxxrwlycoduhp")),
                                            new ServiceDataFlowTemplate()
                                                .withTemplateName("xkgymareqnajxqu")
                                                .withDirection(SdfDirection.BIDIRECTIONAL)
                                                .withProtocol(Arrays.asList("ky"))
                                                .withRemoteIpList(Arrays.asList("beddgssofw", "mzqa"))
                                                .withPorts(Arrays.asList("mnjijpxacqqudf", "byxbaaabjy")))),
                            new PccRuleConfiguration()
                                .withRuleName("ayffim")
                                .withRulePrecedence(1578513386)
                                .withRuleQosPolicy(
                                    new PccRuleQosPolicy()
                                        .withFiveQi(1440499034)
                                        .withAllocationAndRetentionPriorityLevel(10547913)
                                        .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                                        .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                                        .withMaximumBitRate(
                                            new Ambr().withUplink("soibjudpfrx").withDownlink("rthzvaytdwkqbrqu"))
                                        .withGuaranteedBitRate(
                                            new Ambr().withUplink("uzqogsexnevf").withDownlink("nwnwme")))
                                .withTrafficControl(TrafficControlPermission.BLOCKED)
                                .withServiceDataFlowTemplates(
                                    Arrays
                                        .asList(
                                            new ServiceDataFlowTemplate()
                                                .withTemplateName("h")
                                                .withDirection(SdfDirection.UPLINK)
                                                .withProtocol(Arrays.asList("i", "ivpdtiir", "tdqoaxoruzfgsq", "yfxrx"))
                                                .withRemoteIpList(Arrays.asList("eptra"))
                                                .withPorts(Arrays.asList("ezw", "wnwxuqlcvyd")),
                                            new ServiceDataFlowTemplate()
                                                .withTemplateName("patdooaojkniodko")
                                                .withDirection(SdfDirection.BIDIRECTIONAL)
                                                .withProtocol(Arrays.asList("wnujhemmsbvdk"))
                                                .withRemoteIpList(
                                                    Arrays.asList("odtji", "fw", "lfltka", "jvefkdlfoakggkfp"))
                                                .withPorts(Arrays.asList("owpulpq")),
                                            new ServiceDataFlowTemplate()
                                                .withTemplateName("lyls")
                                                .withDirection(SdfDirection.DOWNLINK)
                                                .withProtocol(Arrays.asList("qjnsjervtia"))
                                                .withRemoteIpList(Arrays.asList("sdszue", "psbzkfzbeyvpn", "icvi"))
                                                .withPorts(Arrays.asList("jjxd")),
                                            new ServiceDataFlowTemplate()
                                                .withTemplateName("rbuukzclewyhmlwp")
                                                .withDirection(SdfDirection.BIDIRECTIONAL)
                                                .withProtocol(
                                                    Arrays.asList("zpof", "cckwyfzqwhxxbu", "qa", "zfeqztppri"))
                                                .withRemoteIpList(
                                                    Arrays
                                                        .asList(
                                                            "xorjaltolmncwsob",
                                                            "wcsdbnwdcfhucq",
                                                            "pfuvglsbjjca",
                                                            "vxb"))
                                                .withPorts(Arrays.asList("udutnco", "mr", "xqtvcofu")))),
                            new PccRuleConfiguration()
                                .withRuleName("f")
                                .withRulePrecedence(573023383)
                                .withRuleQosPolicy(
                                    new PccRuleQosPolicy()
                                        .withFiveQi(764676926)
                                        .withAllocationAndRetentionPriorityLevel(1165613569)
                                        .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                                        .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                                        .withMaximumBitRate(
                                            new Ambr().withUplink("sahmky").withDownlink("grauwjuetaebur"))
                                        .withGuaranteedBitRate(new Ambr().withUplink("jub").withDownlink("dknnqvsazn")))
                                .withTrafficControl(TrafficControlPermission.ENABLED)
                                .withServiceDataFlowTemplates(
                                    Arrays
                                        .asList(
                                            new ServiceDataFlowTemplate()
                                                .withTemplateName("ovsm")
                                                .withDirection(SdfDirection.BIDIRECTIONAL)
                                                .withProtocol(Arrays.asList("wabm", "oefki"))
                                                .withRemoteIpList(Arrays.asList("vtpuqujmqlgk"))
                                                .withPorts(Arrays.asList("ndo", "ongbjcnt", "jitcjedftwwaez")),
                                            new ServiceDataFlowTemplate()
                                                .withTemplateName("ojvdcpzfoqo")
                                                .withDirection(SdfDirection.BIDIRECTIONAL)
                                                .withProtocol(Arrays.asList("ybxarzgszu", "oxciqopidoamcio"))
                                                .withRemoteIpList(Arrays.asList("khazxkhnzbonlwn"))
                                                .withPorts(
                                                    Arrays
                                                        .asList(
                                                            "gokdwbwhks", "zcmrvexztvb", "qgsfraoyzkoow", "lmnguxaw")),
                                            new ServiceDataFlowTemplate()
                                                .withTemplateName("aldsy")
                                                .withDirection(SdfDirection.DOWNLINK)
                                                .withProtocol(
                                                    Arrays.asList("imerqfobwyznk", "ykutwpf", "pagmhrskdsnf", "sd"))
                                                .withRemoteIpList(
                                                    Arrays.asList("kgtdlmkkze", "dlhewp", "sdsttwvog", "bbejdcngqqm"))
                                                .withPorts(Arrays.asList("ufgmjzrwrdg", "twaenuuzko")),
                                            new ServiceDataFlowTemplate()
                                                .withTemplateName("bminrfdwoyuhhzi")
                                                .withDirection(SdfDirection.BIDIRECTIONAL)
                                                .withProtocol(Arrays.asList("fozbhdmsmlmzqhof", "rmaequ", "ah"))
                                                .withRemoteIpList(Arrays.asList("cslfaoqzpiyylha", "nswhcc"))
                                                .withPorts(Arrays.asList("kaivwit"))))));
        model = BinaryData.fromObject(model).toObject(ServiceInner.class);
        Assertions.assertEquals("cywuggwol", model.location());
        Assertions.assertEquals("zbwemh", model.tags().get("i"));
        Assertions.assertEquals(1638328793, model.servicePrecedence());
        Assertions.assertEquals(84729056, model.serviceQosPolicy().fiveQi());
        Assertions.assertEquals(1322696494, model.serviceQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.serviceQosPolicy().preemptionCapability());
        Assertions
            .assertEquals(PreemptionVulnerability.PREEMPTABLE, model.serviceQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("dreqnovvqf", model.serviceQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("vljxywsu", model.serviceQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("yrs", model.pccRules().get(0).ruleName());
        Assertions.assertEquals(371488938, model.pccRules().get(0).rulePrecedence());
        Assertions.assertEquals(1397845425, model.pccRules().get(0).ruleQosPolicy().fiveQi());
        Assertions
            .assertEquals(1309534736, model.pccRules().get(0).ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions
            .assertEquals(
                PreemptionCapability.NOT_PREEMPT, model.pccRules().get(0).ruleQosPolicy().preemptionCapability());
        Assertions
            .assertEquals(
                PreemptionVulnerability.PREEMPTABLE, model.pccRules().get(0).ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("cewiipfpub", model.pccRules().get(0).ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("ibwwiftohqkv", model.pccRules().get(0).ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("tgadgvraeaen", model.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("qnzarrwl", model.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.BLOCKED, model.pccRules().get(0).trafficControl());
        Assertions.assertEquals("sgplsakn", model.pccRules().get(0).serviceDataFlowTemplates().get(0).templateName());
        Assertions
            .assertEquals(SdfDirection.UPLINK, model.pccRules().get(0).serviceDataFlowTemplates().get(0).direction());
        Assertions
            .assertEquals(
                "synljphuopxodl", model.pccRules().get(0).serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions
            .assertEquals("zrpzb", model.pccRules().get(0).serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions
            .assertEquals("ibzyhwitsmyp", model.pccRules().get(0).serviceDataFlowTemplates().get(0).ports().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
