// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.ServiceInner;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.QosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.ServiceDataFlowTemplate;
import com.azure.resourcemanager.mobilenetwork.models.TrafficControlPermission;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServiceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Deleted\",\"servicePrecedence\":1398026456,\"serviceQosPolicy\":{\"5qi\":1827391658,\"allocationAndRetentionPriorityLevel\":460922562,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"zpof\",\"downlink\":\"cckwyfzqwhxxbu\"}},\"pccRules\":[{\"ruleName\":\"a\",\"rulePrecedence\":437954475,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"qztpp\",\"downlink\":\"iolxor\"},\"5qi\":295575748,\"allocationAndRetentionPriorityLevel\":1263192387,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"wsobqwcsdbn\",\"downlink\":\"dcfhucqdpf\"}},\"trafficControl\":\"Enabled\",\"serviceDataFlowTemplates\":[{\"templateName\":\"sbjjc\",\"direction\":\"Downlink\",\"protocol\":[\"xbvtvudu\"],\"remoteIpList\":[\"cormr\",\"xqtvcofu\",\"f\",\"vkg\"],\"ports\":[\"gdknnqv\",\"aznqntoru\"]},{\"templateName\":\"sgsahmkycgr\",\"direction\":\"Bidirectional\",\"protocol\":[\"juetaebur\"],\"remoteIpList\":[\"dmovsm\",\"l\",\"wabm\",\"oefki\"],\"ports\":[\"tpuqujmq\",\"gkfbtndoaong\",\"jcntuj\"]},{\"templateName\":\"tcje\",\"direction\":\"Downlink\",\"protocol\":[\"wwa\",\"zkoj\",\"dcpzfoqo\",\"i\"],\"remoteIpList\":[\"bxarzgszufoxci\",\"opidoamciodh\",\"haz\"],\"ports\":[\"nz\",\"onlwntoeg\"]}]}]},\"location\":\"dwbwhkszzcmrvexz\",\"tags\":{\"gsfraoyzkoow\":\"t\"},\"id\":\"lmnguxaw\",\"name\":\"aldsy\",\"type\":\"uximerqfobw\"}")
            .toObject(ServiceInner.class);
        Assertions.assertEquals("dwbwhkszzcmrvexz", model.location());
        Assertions.assertEquals("t", model.tags().get("gsfraoyzkoow"));
        Assertions.assertEquals(1398026456, model.servicePrecedence());
        Assertions.assertEquals(1827391658, model.serviceQosPolicy().fiveQi());
        Assertions.assertEquals(460922562, model.serviceQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.serviceQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            model.serviceQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("zpof", model.serviceQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("cckwyfzqwhxxbu", model.serviceQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("a", model.pccRules().get(0).ruleName());
        Assertions.assertEquals(437954475, model.pccRules().get(0).rulePrecedence());
        Assertions.assertEquals(295575748, model.pccRules().get(0).ruleQosPolicy().fiveQi());
        Assertions.assertEquals(1263192387,
            model.pccRules().get(0).ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT,
            model.pccRules().get(0).ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            model.pccRules().get(0).ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("wsobqwcsdbn", model.pccRules().get(0).ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("dcfhucqdpf", model.pccRules().get(0).ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("qztpp", model.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("iolxor", model.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.ENABLED, model.pccRules().get(0).trafficControl());
        Assertions.assertEquals("sbjjc", model.pccRules().get(0).serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.DOWNLINK,
            model.pccRules().get(0).serviceDataFlowTemplates().get(0).direction());
        Assertions.assertEquals("xbvtvudu",
            model.pccRules().get(0).serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions.assertEquals("cormr",
            model.pccRules().get(0).serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions.assertEquals("gdknnqv", model.pccRules().get(0).serviceDataFlowTemplates().get(0).ports().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceInner model = new ServiceInner().withLocation("dwbwhkszzcmrvexz")
            .withTags(mapOf("gsfraoyzkoow", "t"))
            .withServicePrecedence(1398026456)
            .withServiceQosPolicy(new QosPolicy().withFiveQi(1827391658)
                .withAllocationAndRetentionPriorityLevel(460922562)
                .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                .withMaximumBitRate(new Ambr().withUplink("zpof").withDownlink("cckwyfzqwhxxbu")))
            .withPccRules(Arrays.asList(new PccRuleConfiguration().withRuleName("a")
                .withRulePrecedence(437954475)
                .withRuleQosPolicy(new PccRuleQosPolicy().withFiveQi(295575748)
                    .withAllocationAndRetentionPriorityLevel(1263192387)
                    .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                    .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                    .withMaximumBitRate(new Ambr().withUplink("wsobqwcsdbn").withDownlink("dcfhucqdpf"))
                    .withGuaranteedBitRate(new Ambr().withUplink("qztpp").withDownlink("iolxor")))
                .withTrafficControl(TrafficControlPermission.ENABLED)
                .withServiceDataFlowTemplates(Arrays.asList(
                    new ServiceDataFlowTemplate().withTemplateName("sbjjc")
                        .withDirection(SdfDirection.DOWNLINK)
                        .withProtocol(Arrays.asList("xbvtvudu"))
                        .withRemoteIpList(Arrays.asList("cormr", "xqtvcofu", "f", "vkg"))
                        .withPorts(Arrays.asList("gdknnqv", "aznqntoru")),
                    new ServiceDataFlowTemplate().withTemplateName("sgsahmkycgr")
                        .withDirection(SdfDirection.BIDIRECTIONAL)
                        .withProtocol(Arrays.asList("juetaebur"))
                        .withRemoteIpList(Arrays.asList("dmovsm", "l", "wabm", "oefki"))
                        .withPorts(Arrays.asList("tpuqujmq", "gkfbtndoaong", "jcntuj")),
                    new ServiceDataFlowTemplate().withTemplateName("tcje")
                        .withDirection(SdfDirection.DOWNLINK)
                        .withProtocol(Arrays.asList("wwa", "zkoj", "dcpzfoqo", "i"))
                        .withRemoteIpList(Arrays.asList("bxarzgszufoxci", "opidoamciodh", "haz"))
                        .withPorts(Arrays.asList("nz", "onlwntoeg"))))));
        model = BinaryData.fromObject(model).toObject(ServiceInner.class);
        Assertions.assertEquals("dwbwhkszzcmrvexz", model.location());
        Assertions.assertEquals("t", model.tags().get("gsfraoyzkoow"));
        Assertions.assertEquals(1398026456, model.servicePrecedence());
        Assertions.assertEquals(1827391658, model.serviceQosPolicy().fiveQi());
        Assertions.assertEquals(460922562, model.serviceQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT, model.serviceQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            model.serviceQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("zpof", model.serviceQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("cckwyfzqwhxxbu", model.serviceQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("a", model.pccRules().get(0).ruleName());
        Assertions.assertEquals(437954475, model.pccRules().get(0).rulePrecedence());
        Assertions.assertEquals(295575748, model.pccRules().get(0).ruleQosPolicy().fiveQi());
        Assertions.assertEquals(1263192387,
            model.pccRules().get(0).ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT,
            model.pccRules().get(0).ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            model.pccRules().get(0).ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("wsobqwcsdbn", model.pccRules().get(0).ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("dcfhucqdpf", model.pccRules().get(0).ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("qztpp", model.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("iolxor", model.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.ENABLED, model.pccRules().get(0).trafficControl());
        Assertions.assertEquals("sbjjc", model.pccRules().get(0).serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.DOWNLINK,
            model.pccRules().get(0).serviceDataFlowTemplates().get(0).direction());
        Assertions.assertEquals("xbvtvudu",
            model.pccRules().get(0).serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions.assertEquals("cormr",
            model.pccRules().get(0).serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions.assertEquals("gdknnqv", model.pccRules().get(0).serviceDataFlowTemplates().get(0).ports().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
