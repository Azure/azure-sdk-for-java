// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mobilenetwork.fluent.models.ServiceInner;
import com.azure.resourcemanager.mobilenetwork.models.Ambr;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleQosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionCapability;
import com.azure.resourcemanager.mobilenetwork.models.PreemptionVulnerability;
import com.azure.resourcemanager.mobilenetwork.models.QosPolicy;
import com.azure.resourcemanager.mobilenetwork.models.SdfDirection;
import com.azure.resourcemanager.mobilenetwork.models.ServiceDataFlowTemplate;
import com.azure.resourcemanager.mobilenetwork.models.TrafficControlPermission;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServiceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"servicePrecedence\":1370014910,\"serviceQosPolicy\":{\"5qi\":2064087160,\"allocationAndRetentionPriorityLevel\":898647722,\"preemptionCapability\":\"MayPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"mhrkwofyyvoqacp\",\"downlink\":\"expbtg\"}},\"pccRules\":[{\"ruleName\":\"bwoenwashrt\",\"rulePrecedence\":2130378751,\"ruleQosPolicy\":{\"guaranteedBitRate\":{\"uplink\":\"nqxwbp\",\"downlink\":\"kulpiujwaasi\"},\"5qi\":172575084,\"allocationAndRetentionPriorityLevel\":1035814224,\"preemptionCapability\":\"NotPreempt\",\"preemptionVulnerability\":\"Preemptable\",\"maximumBitRate\":{\"uplink\":\"erpqlpqwcciuqg\",\"downlink\":\"dbutauvfbtkuwhh\"}},\"trafficControl\":\"Blocked\",\"serviceDataFlowTemplates\":[{\"templateName\":\"ojoxafnndlp\",\"direction\":\"Downlink\",\"protocol\":[\"koymkcd\",\"h\",\"pkkpw\"],\"remoteIpList\":[\"eqnovvqfovl\",\"xywsuws\",\"rsndsytgadgvra\"],\"ports\":[\"neqn\"]}]}]},\"location\":\"rrwlquuijfqkace\",\"tags\":{\"f\":\"pfpubjibww\",\"kn\":\"ohqkvpuvksgpls\"},\"id\":\"n\",\"name\":\"synljphuopxodl\",\"type\":\"iyntorzihle\"}")
            .toObject(ServiceInner.class);
        Assertions.assertEquals("rrwlquuijfqkace", model.location());
        Assertions.assertEquals("pfpubjibww", model.tags().get("f"));
        Assertions.assertEquals(1370014910, model.servicePrecedence());
        Assertions.assertEquals(2064087160, model.serviceQosPolicy().fiveQi());
        Assertions.assertEquals(898647722, model.serviceQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, model.serviceQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            model.serviceQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("mhrkwofyyvoqacp", model.serviceQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("expbtg", model.serviceQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("bwoenwashrt", model.pccRules().get(0).ruleName());
        Assertions.assertEquals(2130378751, model.pccRules().get(0).rulePrecedence());
        Assertions.assertEquals(172575084, model.pccRules().get(0).ruleQosPolicy().fiveQi());
        Assertions.assertEquals(1035814224,
            model.pccRules().get(0).ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT,
            model.pccRules().get(0).ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            model.pccRules().get(0).ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("erpqlpqwcciuqg", model.pccRules().get(0).ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("dbutauvfbtkuwhh", model.pccRules().get(0).ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("nqxwbp", model.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("kulpiujwaasi", model.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.BLOCKED, model.pccRules().get(0).trafficControl());
        Assertions.assertEquals("ojoxafnndlp",
            model.pccRules().get(0).serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.DOWNLINK,
            model.pccRules().get(0).serviceDataFlowTemplates().get(0).direction());
        Assertions.assertEquals("koymkcd", model.pccRules().get(0).serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions.assertEquals("eqnovvqfovl",
            model.pccRules().get(0).serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions.assertEquals("neqn", model.pccRules().get(0).serviceDataFlowTemplates().get(0).ports().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceInner model = new ServiceInner().withLocation("rrwlquuijfqkace")
            .withTags(mapOf("f", "pfpubjibww", "kn", "ohqkvpuvksgpls")).withServicePrecedence(1370014910)
            .withServiceQosPolicy(new QosPolicy().withFiveQi(2064087160)
                .withAllocationAndRetentionPriorityLevel(898647722)
                .withPreemptionCapability(PreemptionCapability.MAY_PREEMPT)
                .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                .withMaximumBitRate(new Ambr().withUplink("mhrkwofyyvoqacp").withDownlink("expbtg")))
            .withPccRules(
                Arrays
                    .asList(new PccRuleConfiguration().withRuleName("bwoenwashrt").withRulePrecedence(2130378751)
                        .withRuleQosPolicy(new PccRuleQosPolicy().withFiveQi(172575084)
                            .withAllocationAndRetentionPriorityLevel(1035814224)
                            .withPreemptionCapability(PreemptionCapability.NOT_PREEMPT)
                            .withPreemptionVulnerability(PreemptionVulnerability.PREEMPTABLE)
                            .withMaximumBitRate(new Ambr().withUplink("erpqlpqwcciuqg").withDownlink("dbutauvfbtkuwhh"))
                            .withGuaranteedBitRate(new Ambr().withUplink("nqxwbp").withDownlink("kulpiujwaasi")))
                        .withTrafficControl(TrafficControlPermission.BLOCKED)
                        .withServiceDataFlowTemplates(Arrays.asList(new ServiceDataFlowTemplate()
                            .withTemplateName("ojoxafnndlp").withDirection(SdfDirection.DOWNLINK)
                            .withProtocol(Arrays.asList("koymkcd", "h", "pkkpw"))
                            .withRemoteIpList(Arrays.asList("eqnovvqfovl", "xywsuws", "rsndsytgadgvra"))
                            .withPorts(Arrays.asList("neqn"))))));
        model = BinaryData.fromObject(model).toObject(ServiceInner.class);
        Assertions.assertEquals("rrwlquuijfqkace", model.location());
        Assertions.assertEquals("pfpubjibww", model.tags().get("f"));
        Assertions.assertEquals(1370014910, model.servicePrecedence());
        Assertions.assertEquals(2064087160, model.serviceQosPolicy().fiveQi());
        Assertions.assertEquals(898647722, model.serviceQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.MAY_PREEMPT, model.serviceQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            model.serviceQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("mhrkwofyyvoqacp", model.serviceQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("expbtg", model.serviceQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("bwoenwashrt", model.pccRules().get(0).ruleName());
        Assertions.assertEquals(2130378751, model.pccRules().get(0).rulePrecedence());
        Assertions.assertEquals(172575084, model.pccRules().get(0).ruleQosPolicy().fiveQi());
        Assertions.assertEquals(1035814224,
            model.pccRules().get(0).ruleQosPolicy().allocationAndRetentionPriorityLevel());
        Assertions.assertEquals(PreemptionCapability.NOT_PREEMPT,
            model.pccRules().get(0).ruleQosPolicy().preemptionCapability());
        Assertions.assertEquals(PreemptionVulnerability.PREEMPTABLE,
            model.pccRules().get(0).ruleQosPolicy().preemptionVulnerability());
        Assertions.assertEquals("erpqlpqwcciuqg", model.pccRules().get(0).ruleQosPolicy().maximumBitRate().uplink());
        Assertions.assertEquals("dbutauvfbtkuwhh", model.pccRules().get(0).ruleQosPolicy().maximumBitRate().downlink());
        Assertions.assertEquals("nqxwbp", model.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().uplink());
        Assertions.assertEquals("kulpiujwaasi", model.pccRules().get(0).ruleQosPolicy().guaranteedBitRate().downlink());
        Assertions.assertEquals(TrafficControlPermission.BLOCKED, model.pccRules().get(0).trafficControl());
        Assertions.assertEquals("ojoxafnndlp",
            model.pccRules().get(0).serviceDataFlowTemplates().get(0).templateName());
        Assertions.assertEquals(SdfDirection.DOWNLINK,
            model.pccRules().get(0).serviceDataFlowTemplates().get(0).direction());
        Assertions.assertEquals("koymkcd", model.pccRules().get(0).serviceDataFlowTemplates().get(0).protocol().get(0));
        Assertions.assertEquals("eqnovvqfovl",
            model.pccRules().get(0).serviceDataFlowTemplates().get(0).remoteIpList().get(0));
        Assertions.assertEquals("neqn", model.pccRules().get(0).serviceDataFlowTemplates().get(0).ports().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
