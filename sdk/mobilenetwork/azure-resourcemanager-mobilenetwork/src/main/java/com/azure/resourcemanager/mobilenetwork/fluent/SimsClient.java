// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.mobilenetwork.fluent.models.SimInner;
import com.azure.resourcemanager.mobilenetwork.models.TagsObject;

/** An instance of this class provides access to all the operations defined in SimsClient. */
public interface SimsClient {
    /**
     * Deletes the specified sim.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simName The name of the SIM.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String simName);

    /**
     * Deletes the specified sim.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simName The name of the SIM.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String simName, Context context);

    /**
     * Deletes the specified sim.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simName The name of the SIM.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String simName);

    /**
     * Deletes the specified sim.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simName The name of the SIM.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String simName, Context context);

    /**
     * Gets information about the specified sim.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simName The name of the SIM.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified sim.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SimInner getByResourceGroup(String resourceGroupName, String simName);

    /**
     * Gets information about the specified sim.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simName The name of the SIM.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified sim along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SimInner> getByResourceGroupWithResponse(String resourceGroupName, String simName, Context context);

    /**
     * Creates or updates a Sim.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simName The name of the SIM.
     * @param parameters Parameters supplied to the create or update sim operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of sim resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SimInner>, SimInner> beginCreateOrUpdate(
        String resourceGroupName, String simName, SimInner parameters);

    /**
     * Creates or updates a Sim.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simName The name of the SIM.
     * @param parameters Parameters supplied to the create or update sim operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of sim resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SimInner>, SimInner> beginCreateOrUpdate(
        String resourceGroupName, String simName, SimInner parameters, Context context);

    /**
     * Creates or updates a Sim.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simName The name of the SIM.
     * @param parameters Parameters supplied to the create or update sim operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sim resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SimInner createOrUpdate(String resourceGroupName, String simName, SimInner parameters);

    /**
     * Creates or updates a Sim.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simName The name of the SIM.
     * @param parameters Parameters supplied to the create or update sim operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sim resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SimInner createOrUpdate(String resourceGroupName, String simName, SimInner parameters, Context context);

    /**
     * Updates a sim update tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simName The name of the SIM.
     * @param parameters Parameters supplied to update sim tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sim resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SimInner updateTags(String resourceGroupName, String simName, TagsObject parameters);

    /**
     * Updates a sim update tags.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param simName The name of the SIM.
     * @param parameters Parameters supplied to update sim tags.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sim resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SimInner> updateTagsWithResponse(
        String resourceGroupName, String simName, TagsObject parameters, Context context);

    /**
     * Gets all the sims in a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the sims in a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SimInner> list();

    /**
     * Gets all the sims in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the sims in a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SimInner> list(Context context);

    /**
     * Gets all the Sims in a subscription.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Sims in a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SimInner> listByResourceGroup(String resourceGroupName);

    /**
     * Gets all the Sims in a subscription.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Sims in a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SimInner> listByResourceGroup(String resourceGroupName, Context context);
}
