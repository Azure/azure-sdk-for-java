// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * QoS policy.
 */
@Fluent
public class QosPolicy implements JsonSerializable<QosPolicy> {
    /*
     * 5G QoS Flow Indicator value. The 5QI identifies a specific QoS forwarding treatment to be provided to a flow. See
     * 3GPP TS23.501 section 5.7.2.1 for a full description of the 5QI parameter, and table 5.7.4-1 for the definition
     * the 5QI values.
     */
    private Integer fiveQi;

    /*
     * QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower
     * priority, if the settings of `preemptionCapability` and `preemptionVulnerability` allow it. 1 is the highest
     * level of priority. If this field is not specified then `5qi` is used to derive the ARP value. See 3GPP TS23.501
     * section 5.7.2.2 for a full description of the ARP parameters.
     */
    private Integer allocationAndRetentionPriorityLevel;

    /*
     * QoS Flow preemption capability. The preemption capability of a QoS Flow controls whether it can preempt another
     * QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP
     * parameters.
     */
    private PreemptionCapability preemptionCapability;

    /*
     * QoS Flow preemption vulnerability. The preemption vulnerability of a QoS Flow controls whether it can be
     * preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of
     * the ARP parameters.
     */
    private PreemptionVulnerability preemptionVulnerability;

    /*
     * The maximum bit rate (MBR) for all service data flows that use this data flow policy rule or service.
     */
    private Ambr maximumBitRate;

    /**
     * Creates an instance of QosPolicy class.
     */
    public QosPolicy() {
    }

    /**
     * Get the fiveQi property: 5G QoS Flow Indicator value. The 5QI identifies a specific QoS forwarding treatment to
     * be provided to a flow. See 3GPP TS23.501 section 5.7.2.1 for a full description of the 5QI parameter, and table
     * 5.7.4-1 for the definition the 5QI values.
     * 
     * @return the fiveQi value.
     */
    public Integer fiveQi() {
        return this.fiveQi;
    }

    /**
     * Set the fiveQi property: 5G QoS Flow Indicator value. The 5QI identifies a specific QoS forwarding treatment to
     * be provided to a flow. See 3GPP TS23.501 section 5.7.2.1 for a full description of the 5QI parameter, and table
     * 5.7.4-1 for the definition the 5QI values.
     * 
     * @param fiveQi the fiveQi value to set.
     * @return the QosPolicy object itself.
     */
    public QosPolicy withFiveQi(Integer fiveQi) {
        this.fiveQi = fiveQi;
        return this;
    }

    /**
     * Get the allocationAndRetentionPriorityLevel property: QoS Flow allocation and retention priority (ARP) level.
     * Flows with higher priority preempt flows with lower priority, if the settings of `preemptionCapability` and
     * `preemptionVulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `5qi`
     * is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
     * 
     * @return the allocationAndRetentionPriorityLevel value.
     */
    public Integer allocationAndRetentionPriorityLevel() {
        return this.allocationAndRetentionPriorityLevel;
    }

    /**
     * Set the allocationAndRetentionPriorityLevel property: QoS Flow allocation and retention priority (ARP) level.
     * Flows with higher priority preempt flows with lower priority, if the settings of `preemptionCapability` and
     * `preemptionVulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `5qi`
     * is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
     * 
     * @param allocationAndRetentionPriorityLevel the allocationAndRetentionPriorityLevel value to set.
     * @return the QosPolicy object itself.
     */
    public QosPolicy withAllocationAndRetentionPriorityLevel(Integer allocationAndRetentionPriorityLevel) {
        this.allocationAndRetentionPriorityLevel = allocationAndRetentionPriorityLevel;
        return this;
    }

    /**
     * Get the preemptionCapability property: QoS Flow preemption capability. The preemption capability of a QoS Flow
     * controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2
     * for a full description of the ARP parameters.
     * 
     * @return the preemptionCapability value.
     */
    public PreemptionCapability preemptionCapability() {
        return this.preemptionCapability;
    }

    /**
     * Set the preemptionCapability property: QoS Flow preemption capability. The preemption capability of a QoS Flow
     * controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2
     * for a full description of the ARP parameters.
     * 
     * @param preemptionCapability the preemptionCapability value to set.
     * @return the QosPolicy object itself.
     */
    public QosPolicy withPreemptionCapability(PreemptionCapability preemptionCapability) {
        this.preemptionCapability = preemptionCapability;
        return this;
    }

    /**
     * Get the preemptionVulnerability property: QoS Flow preemption vulnerability. The preemption vulnerability of a
     * QoS Flow controls whether it can be preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501
     * section 5.7.2.2 for a full description of the ARP parameters.
     * 
     * @return the preemptionVulnerability value.
     */
    public PreemptionVulnerability preemptionVulnerability() {
        return this.preemptionVulnerability;
    }

    /**
     * Set the preemptionVulnerability property: QoS Flow preemption vulnerability. The preemption vulnerability of a
     * QoS Flow controls whether it can be preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501
     * section 5.7.2.2 for a full description of the ARP parameters.
     * 
     * @param preemptionVulnerability the preemptionVulnerability value to set.
     * @return the QosPolicy object itself.
     */
    public QosPolicy withPreemptionVulnerability(PreemptionVulnerability preemptionVulnerability) {
        this.preemptionVulnerability = preemptionVulnerability;
        return this;
    }

    /**
     * Get the maximumBitRate property: The maximum bit rate (MBR) for all service data flows that use this data flow
     * policy rule or service.
     * 
     * @return the maximumBitRate value.
     */
    public Ambr maximumBitRate() {
        return this.maximumBitRate;
    }

    /**
     * Set the maximumBitRate property: The maximum bit rate (MBR) for all service data flows that use this data flow
     * policy rule or service.
     * 
     * @param maximumBitRate the maximumBitRate value to set.
     * @return the QosPolicy object itself.
     */
    public QosPolicy withMaximumBitRate(Ambr maximumBitRate) {
        this.maximumBitRate = maximumBitRate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (maximumBitRate() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property maximumBitRate in model QosPolicy"));
        } else {
            maximumBitRate().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(QosPolicy.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("maximumBitRate", this.maximumBitRate);
        jsonWriter.writeNumberField("5qi", this.fiveQi);
        jsonWriter.writeNumberField("allocationAndRetentionPriorityLevel", this.allocationAndRetentionPriorityLevel);
        jsonWriter.writeStringField("preemptionCapability",
            this.preemptionCapability == null ? null : this.preemptionCapability.toString());
        jsonWriter.writeStringField("preemptionVulnerability",
            this.preemptionVulnerability == null ? null : this.preemptionVulnerability.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QosPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QosPolicy if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the QosPolicy.
     */
    public static QosPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QosPolicy deserializedQosPolicy = new QosPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maximumBitRate".equals(fieldName)) {
                    deserializedQosPolicy.maximumBitRate = Ambr.fromJson(reader);
                } else if ("5qi".equals(fieldName)) {
                    deserializedQosPolicy.fiveQi = reader.getNullable(JsonReader::getInt);
                } else if ("allocationAndRetentionPriorityLevel".equals(fieldName)) {
                    deserializedQosPolicy.allocationAndRetentionPriorityLevel = reader.getNullable(JsonReader::getInt);
                } else if ("preemptionCapability".equals(fieldName)) {
                    deserializedQosPolicy.preemptionCapability = PreemptionCapability.fromString(reader.getString());
                } else if ("preemptionVulnerability".equals(fieldName)) {
                    deserializedQosPolicy.preemptionVulnerability
                        = PreemptionVulnerability.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQosPolicy;
        });
    }
}
