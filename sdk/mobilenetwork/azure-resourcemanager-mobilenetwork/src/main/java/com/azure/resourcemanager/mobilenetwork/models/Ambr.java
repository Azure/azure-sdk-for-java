// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Aggregate maximum bit rate.
 */
@Fluent
public final class Ambr implements JsonSerializable<Ambr> {
    /*
     * Uplink bit rate.
     */
    private String uplink;

    /*
     * Downlink bit rate.
     */
    private String downlink;

    /**
     * Creates an instance of Ambr class.
     */
    public Ambr() {
    }

    /**
     * Get the uplink property: Uplink bit rate.
     * 
     * @return the uplink value.
     */
    public String uplink() {
        return this.uplink;
    }

    /**
     * Set the uplink property: Uplink bit rate.
     * 
     * @param uplink the uplink value to set.
     * @return the Ambr object itself.
     */
    public Ambr withUplink(String uplink) {
        this.uplink = uplink;
        return this;
    }

    /**
     * Get the downlink property: Downlink bit rate.
     * 
     * @return the downlink value.
     */
    public String downlink() {
        return this.downlink;
    }

    /**
     * Set the downlink property: Downlink bit rate.
     * 
     * @param downlink the downlink value to set.
     * @return the Ambr object itself.
     */
    public Ambr withDownlink(String downlink) {
        this.downlink = downlink;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (uplink() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property uplink in model Ambr"));
        }
        if (downlink() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property downlink in model Ambr"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Ambr.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("uplink", this.uplink);
        jsonWriter.writeStringField("downlink", this.downlink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Ambr from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Ambr if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Ambr.
     */
    public static Ambr fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Ambr deserializedAmbr = new Ambr();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("uplink".equals(fieldName)) {
                    deserializedAmbr.uplink = reader.getString();
                } else if ("downlink".equals(fieldName)) {
                    deserializedAmbr.downlink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAmbr;
        });
    }
}
