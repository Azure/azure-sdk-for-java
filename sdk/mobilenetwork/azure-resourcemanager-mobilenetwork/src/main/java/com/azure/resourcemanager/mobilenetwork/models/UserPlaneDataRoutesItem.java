// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The UserPlaneDataRoutesItem model.
 */
@Fluent
public final class UserPlaneDataRoutesItem implements JsonSerializable<UserPlaneDataRoutesItem> {
    /*
     * Reference to an attached data network resource.
     */
    private AttachedDataNetworkResourceId attachedDataNetwork;

    /*
     * A list of IPv4 routes.
     */
    private List<Ipv4Route> routes;

    /**
     * Creates an instance of UserPlaneDataRoutesItem class.
     */
    public UserPlaneDataRoutesItem() {
    }

    /**
     * Get the attachedDataNetwork property: Reference to an attached data network resource.
     * 
     * @return the attachedDataNetwork value.
     */
    public AttachedDataNetworkResourceId attachedDataNetwork() {
        return this.attachedDataNetwork;
    }

    /**
     * Set the attachedDataNetwork property: Reference to an attached data network resource.
     * 
     * @param attachedDataNetwork the attachedDataNetwork value to set.
     * @return the UserPlaneDataRoutesItem object itself.
     */
    public UserPlaneDataRoutesItem withAttachedDataNetwork(AttachedDataNetworkResourceId attachedDataNetwork) {
        this.attachedDataNetwork = attachedDataNetwork;
        return this;
    }

    /**
     * Get the routes property: A list of IPv4 routes.
     * 
     * @return the routes value.
     */
    public List<Ipv4Route> routes() {
        return this.routes;
    }

    /**
     * Set the routes property: A list of IPv4 routes.
     * 
     * @param routes the routes value to set.
     * @return the UserPlaneDataRoutesItem object itself.
     */
    public UserPlaneDataRoutesItem withRoutes(List<Ipv4Route> routes) {
        this.routes = routes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (attachedDataNetwork() != null) {
            attachedDataNetwork().validate();
        }
        if (routes() != null) {
            routes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("attachedDataNetwork", this.attachedDataNetwork);
        jsonWriter.writeArrayField("routes", this.routes, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserPlaneDataRoutesItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserPlaneDataRoutesItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UserPlaneDataRoutesItem.
     */
    public static UserPlaneDataRoutesItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserPlaneDataRoutesItem deserializedUserPlaneDataRoutesItem = new UserPlaneDataRoutesItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attachedDataNetwork".equals(fieldName)) {
                    deserializedUserPlaneDataRoutesItem.attachedDataNetwork
                        = AttachedDataNetworkResourceId.fromJson(reader);
                } else if ("routes".equals(fieldName)) {
                    List<Ipv4Route> routes = reader.readArray(reader1 -> Ipv4Route.fromJson(reader1));
                    deserializedUserPlaneDataRoutesItem.routes = routes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserPlaneDataRoutesItem;
        });
    }
}
