// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Data flow policy rule QoS policy.
 */
@Fluent
public final class PccRuleQosPolicy extends QosPolicy {
    /*
     * The guaranteed bit rate (GBR) for all service data flows that use this data flow policy rule. This is an optional
     * setting. If you do not provide a value, there will be no GBR set for the data flow policy rule that uses this QoS
     * definition.
     */
    private Ambr guaranteedBitRate;

    /**
     * Creates an instance of PccRuleQosPolicy class.
     */
    public PccRuleQosPolicy() {
    }

    /**
     * Get the guaranteedBitRate property: The guaranteed bit rate (GBR) for all service data flows that use this data
     * flow policy rule. This is an optional setting. If you do not provide a value, there will be no GBR set for the
     * data flow policy rule that uses this QoS definition.
     * 
     * @return the guaranteedBitRate value.
     */
    public Ambr guaranteedBitRate() {
        return this.guaranteedBitRate;
    }

    /**
     * Set the guaranteedBitRate property: The guaranteed bit rate (GBR) for all service data flows that use this data
     * flow policy rule. This is an optional setting. If you do not provide a value, there will be no GBR set for the
     * data flow policy rule that uses this QoS definition.
     * 
     * @param guaranteedBitRate the guaranteedBitRate value to set.
     * @return the PccRuleQosPolicy object itself.
     */
    public PccRuleQosPolicy withGuaranteedBitRate(Ambr guaranteedBitRate) {
        this.guaranteedBitRate = guaranteedBitRate;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PccRuleQosPolicy withFiveQi(Integer fiveQi) {
        super.withFiveQi(fiveQi);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PccRuleQosPolicy withAllocationAndRetentionPriorityLevel(Integer allocationAndRetentionPriorityLevel) {
        super.withAllocationAndRetentionPriorityLevel(allocationAndRetentionPriorityLevel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PccRuleQosPolicy withPreemptionCapability(PreemptionCapability preemptionCapability) {
        super.withPreemptionCapability(preemptionCapability);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PccRuleQosPolicy withPreemptionVulnerability(PreemptionVulnerability preemptionVulnerability) {
        super.withPreemptionVulnerability(preemptionVulnerability);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PccRuleQosPolicy withMaximumBitRate(Ambr maximumBitRate) {
        super.withMaximumBitRate(maximumBitRate);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (guaranteedBitRate() != null) {
            guaranteedBitRate().validate();
        }
        if (maximumBitRate() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property maximumBitRate in model PccRuleQosPolicy"));
        } else {
            maximumBitRate().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PccRuleQosPolicy.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("maximumBitRate", maximumBitRate());
        jsonWriter.writeNumberField("5qi", fiveQi());
        jsonWriter.writeNumberField("allocationAndRetentionPriorityLevel", allocationAndRetentionPriorityLevel());
        jsonWriter.writeStringField("preemptionCapability",
            preemptionCapability() == null ? null : preemptionCapability().toString());
        jsonWriter.writeStringField("preemptionVulnerability",
            preemptionVulnerability() == null ? null : preemptionVulnerability().toString());
        jsonWriter.writeJsonField("guaranteedBitRate", this.guaranteedBitRate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PccRuleQosPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PccRuleQosPolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PccRuleQosPolicy.
     */
    public static PccRuleQosPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PccRuleQosPolicy deserializedPccRuleQosPolicy = new PccRuleQosPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maximumBitRate".equals(fieldName)) {
                    deserializedPccRuleQosPolicy.withMaximumBitRate(Ambr.fromJson(reader));
                } else if ("5qi".equals(fieldName)) {
                    deserializedPccRuleQosPolicy.withFiveQi(reader.getNullable(JsonReader::getInt));
                } else if ("allocationAndRetentionPriorityLevel".equals(fieldName)) {
                    deserializedPccRuleQosPolicy
                        .withAllocationAndRetentionPriorityLevel(reader.getNullable(JsonReader::getInt));
                } else if ("preemptionCapability".equals(fieldName)) {
                    deserializedPccRuleQosPolicy
                        .withPreemptionCapability(PreemptionCapability.fromString(reader.getString()));
                } else if ("preemptionVulnerability".equals(fieldName)) {
                    deserializedPccRuleQosPolicy
                        .withPreemptionVulnerability(PreemptionVulnerability.fromString(reader.getString()));
                } else if ("guaranteedBitRate".equals(fieldName)) {
                    deserializedPccRuleQosPolicy.guaranteedBitRate = Ambr.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPccRuleQosPolicy;
        });
    }
}
