// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mobilenetwork.models.ProvisioningState;
import com.azure.resourcemanager.mobilenetwork.models.Snssai;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Network slice resource. Must be created in the same location as its parent mobile network. */
@Fluent
public final class SliceInner extends Resource {
    /*
     * Slice properties.
     */
    @JsonProperty(value = "properties", required = true)
    private SlicePropertiesFormat innerProperties = new SlicePropertiesFormat();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of SliceInner class. */
    public SliceInner() {
    }

    /**
     * Get the innerProperties property: Slice properties.
     *
     * @return the innerProperties value.
     */
    private SlicePropertiesFormat innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public SliceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SliceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the network slice resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the snssai property: Single-network slice selection assistance information (S-NSSAI). Unique at the scope of
     * a mobile network.
     *
     * @return the snssai value.
     */
    public Snssai snssai() {
        return this.innerProperties() == null ? null : this.innerProperties().snssai();
    }

    /**
     * Set the snssai property: Single-network slice selection assistance information (S-NSSAI). Unique at the scope of
     * a mobile network.
     *
     * @param snssai the snssai value to set.
     * @return the SliceInner object itself.
     */
    public SliceInner withSnssai(Snssai snssai) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SlicePropertiesFormat();
        }
        this.innerProperties().withSnssai(snssai);
        return this;
    }

    /**
     * Get the description property: An optional description for this network slice.
     *
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: An optional description for this network slice.
     *
     * @param description the description value to set.
     * @return the SliceInner object itself.
     */
    public SliceInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SlicePropertiesFormat();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property innerProperties in model SliceInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SliceInner.class);
}
