// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mobilenetwork.models.ProvisioningState;
import com.azure.resourcemanager.mobilenetwork.models.RecommendedVersion;
import com.azure.resourcemanager.mobilenetwork.models.VersionState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Packet core control plane version resource. */
@Fluent
public final class PacketCoreControlPlaneVersionInner extends ProxyResource {
    /*
     * Packet core control plane version properties.
     */
    @JsonProperty(value = "properties", required = true)
    private PacketCoreControlPlaneVersionPropertiesFormat innerProperties =
        new PacketCoreControlPlaneVersionPropertiesFormat();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy
     * information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Get the innerProperties property: Packet core control plane version properties.
     *
     * @return the innerProperties value.
     */
    private PacketCoreControlPlaneVersionPropertiesFormat innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the provisioningState property: The provisioning state of the packet core control plane version resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the versionState property: The state of this packet core control plane version.
     *
     * @return the versionState value.
     */
    public VersionState versionState() {
        return this.innerProperties() == null ? null : this.innerProperties().versionState();
    }

    /**
     * Set the versionState property: The state of this packet core control plane version.
     *
     * @param versionState the versionState value to set.
     * @return the PacketCoreControlPlaneVersionInner object itself.
     */
    public PacketCoreControlPlaneVersionInner withVersionState(VersionState versionState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PacketCoreControlPlaneVersionPropertiesFormat();
        }
        this.innerProperties().withVersionState(versionState);
        return this;
    }

    /**
     * Get the recommendedVersion property: Indicates whether this is the recommended version to use for new packet core
     * control plane deployments.
     *
     * @return the recommendedVersion value.
     */
    public RecommendedVersion recommendedVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().recommendedVersion();
    }

    /**
     * Set the recommendedVersion property: Indicates whether this is the recommended version to use for new packet core
     * control plane deployments.
     *
     * @param recommendedVersion the recommendedVersion value to set.
     * @return the PacketCoreControlPlaneVersionInner object itself.
     */
    public PacketCoreControlPlaneVersionInner withRecommendedVersion(RecommendedVersion recommendedVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PacketCoreControlPlaneVersionPropertiesFormat();
        }
        this.innerProperties().withRecommendedVersion(recommendedVersion);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model PacketCoreControlPlaneVersionInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PacketCoreControlPlaneVersionInner.class);
}
