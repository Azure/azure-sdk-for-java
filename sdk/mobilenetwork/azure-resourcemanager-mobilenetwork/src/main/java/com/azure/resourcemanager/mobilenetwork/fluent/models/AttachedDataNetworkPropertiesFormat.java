// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mobilenetwork.models.InterfaceProperties;
import com.azure.resourcemanager.mobilenetwork.models.NaptConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Data network properties. */
@Fluent
public final class AttachedDataNetworkPropertiesFormat {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AttachedDataNetworkPropertiesFormat.class);

    /*
     * The provisioning state of the attached data network resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The user plane interface on the data network. In 5G networks this is
     * called as N6 interface whereas in 4G networks this is called as SGi
     * interface.
     */
    @JsonProperty(value = "userPlaneDataInterface", required = true)
    private InterfaceProperties userPlaneDataInterface;

    /*
     * The Network Address and Port Translation configuration.
     * If not specified the attached data network uses a default NAPT
     * configuration with NAPT enabled.
     */
    @JsonProperty(value = "naptConfiguration")
    private NaptConfiguration naptConfiguration;

    /*
     * The user equipment address pool prefixes for the attached data network
     * that are dynamically assigned by the core to UEs when they set up a PDU
     * session.
     * At least one of userEquipmentAddressPoolPrefix and
     * userEquipmentStaticAddressPoolPrefix must be defined. If both are
     * defined then they must be the same size.
     */
    @JsonProperty(value = "userEquipmentAddressPoolPrefix")
    private List<String> userEquipmentAddressPoolPrefix;

    /*
     * The user equipment address pool prefixes for the attached data network
     * that are statically assigned by the core to UEs when they set up a PDU
     * session.
     * The mapping of static IP to sim is configured in staticIpConfiguration
     * on the sim resource.
     * At least one of userEquipmentAddressPoolPrefix and
     * userEquipmentStaticAddressPoolPrefix must be defined. If both are
     * defined then they must be the same size.
     */
    @JsonProperty(value = "userEquipmentStaticAddressPoolPrefix")
    private List<String> userEquipmentStaticAddressPoolPrefix;

    /**
     * Get the provisioningState property: The provisioning state of the attached data network resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the userPlaneDataInterface property: The user plane interface on the data network. In 5G networks this is
     * called as N6 interface whereas in 4G networks this is called as SGi interface.
     *
     * @return the userPlaneDataInterface value.
     */
    public InterfaceProperties userPlaneDataInterface() {
        return this.userPlaneDataInterface;
    }

    /**
     * Set the userPlaneDataInterface property: The user plane interface on the data network. In 5G networks this is
     * called as N6 interface whereas in 4G networks this is called as SGi interface.
     *
     * @param userPlaneDataInterface the userPlaneDataInterface value to set.
     * @return the AttachedDataNetworkPropertiesFormat object itself.
     */
    public AttachedDataNetworkPropertiesFormat withUserPlaneDataInterface(InterfaceProperties userPlaneDataInterface) {
        this.userPlaneDataInterface = userPlaneDataInterface;
        return this;
    }

    /**
     * Get the naptConfiguration property: The Network Address and Port Translation configuration. If not specified the
     * attached data network uses a default NAPT configuration with NAPT enabled.
     *
     * @return the naptConfiguration value.
     */
    public NaptConfiguration naptConfiguration() {
        return this.naptConfiguration;
    }

    /**
     * Set the naptConfiguration property: The Network Address and Port Translation configuration. If not specified the
     * attached data network uses a default NAPT configuration with NAPT enabled.
     *
     * @param naptConfiguration the naptConfiguration value to set.
     * @return the AttachedDataNetworkPropertiesFormat object itself.
     */
    public AttachedDataNetworkPropertiesFormat withNaptConfiguration(NaptConfiguration naptConfiguration) {
        this.naptConfiguration = naptConfiguration;
        return this;
    }

    /**
     * Get the userEquipmentAddressPoolPrefix property: The user equipment address pool prefixes for the attached data
     * network that are dynamically assigned by the core to UEs when they set up a PDU session. At least one of
     * userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined then
     * they must be the same size.
     *
     * @return the userEquipmentAddressPoolPrefix value.
     */
    public List<String> userEquipmentAddressPoolPrefix() {
        return this.userEquipmentAddressPoolPrefix;
    }

    /**
     * Set the userEquipmentAddressPoolPrefix property: The user equipment address pool prefixes for the attached data
     * network that are dynamically assigned by the core to UEs when they set up a PDU session. At least one of
     * userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined then
     * they must be the same size.
     *
     * @param userEquipmentAddressPoolPrefix the userEquipmentAddressPoolPrefix value to set.
     * @return the AttachedDataNetworkPropertiesFormat object itself.
     */
    public AttachedDataNetworkPropertiesFormat withUserEquipmentAddressPoolPrefix(
        List<String> userEquipmentAddressPoolPrefix) {
        this.userEquipmentAddressPoolPrefix = userEquipmentAddressPoolPrefix;
        return this;
    }

    /**
     * Get the userEquipmentStaticAddressPoolPrefix property: The user equipment address pool prefixes for the attached
     * data network that are statically assigned by the core to UEs when they set up a PDU session. The mapping of
     * static IP to sim is configured in staticIpConfiguration on the sim resource. At least one of
     * userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined then
     * they must be the same size.
     *
     * @return the userEquipmentStaticAddressPoolPrefix value.
     */
    public List<String> userEquipmentStaticAddressPoolPrefix() {
        return this.userEquipmentStaticAddressPoolPrefix;
    }

    /**
     * Set the userEquipmentStaticAddressPoolPrefix property: The user equipment address pool prefixes for the attached
     * data network that are statically assigned by the core to UEs when they set up a PDU session. The mapping of
     * static IP to sim is configured in staticIpConfiguration on the sim resource. At least one of
     * userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined then
     * they must be the same size.
     *
     * @param userEquipmentStaticAddressPoolPrefix the userEquipmentStaticAddressPoolPrefix value to set.
     * @return the AttachedDataNetworkPropertiesFormat object itself.
     */
    public AttachedDataNetworkPropertiesFormat withUserEquipmentStaticAddressPoolPrefix(
        List<String> userEquipmentStaticAddressPoolPrefix) {
        this.userEquipmentStaticAddressPoolPrefix = userEquipmentStaticAddressPoolPrefix;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (userPlaneDataInterface() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property userPlaneDataInterface in model"
                            + " AttachedDataNetworkPropertiesFormat"));
        } else {
            userPlaneDataInterface().validate();
        }
        if (naptConfiguration() != null) {
            naptConfiguration().validate();
        }
    }
}
