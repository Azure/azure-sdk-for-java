// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration relating to a particular PLMN.
 */
@Fluent
public final class PublicLandMobileNetwork extends PlmnId {
    /*
     * Configuration relating to SUPI concealment.
     */
    private PublicLandMobileNetworkHomeNetworkPublicKeys homeNetworkPublicKeys;

    /**
     * Creates an instance of PublicLandMobileNetwork class.
     */
    public PublicLandMobileNetwork() {
    }

    /**
     * Get the homeNetworkPublicKeys property: Configuration relating to SUPI concealment.
     * 
     * @return the homeNetworkPublicKeys value.
     */
    public PublicLandMobileNetworkHomeNetworkPublicKeys homeNetworkPublicKeys() {
        return this.homeNetworkPublicKeys;
    }

    /**
     * Set the homeNetworkPublicKeys property: Configuration relating to SUPI concealment.
     * 
     * @param homeNetworkPublicKeys the homeNetworkPublicKeys value to set.
     * @return the PublicLandMobileNetwork object itself.
     */
    public PublicLandMobileNetwork
        withHomeNetworkPublicKeys(PublicLandMobileNetworkHomeNetworkPublicKeys homeNetworkPublicKeys) {
        this.homeNetworkPublicKeys = homeNetworkPublicKeys;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PublicLandMobileNetwork withMcc(String mcc) {
        super.withMcc(mcc);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PublicLandMobileNetwork withMnc(String mnc) {
        super.withMnc(mnc);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (homeNetworkPublicKeys() != null) {
            homeNetworkPublicKeys().validate();
        }
        if (mcc() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property mcc in model PublicLandMobileNetwork"));
        }
        if (mnc() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property mnc in model PublicLandMobileNetwork"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PublicLandMobileNetwork.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mcc", mcc());
        jsonWriter.writeStringField("mnc", mnc());
        jsonWriter.writeJsonField("homeNetworkPublicKeys", this.homeNetworkPublicKeys);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PublicLandMobileNetwork from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PublicLandMobileNetwork if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PublicLandMobileNetwork.
     */
    public static PublicLandMobileNetwork fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PublicLandMobileNetwork deserializedPublicLandMobileNetwork = new PublicLandMobileNetwork();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mcc".equals(fieldName)) {
                    deserializedPublicLandMobileNetwork.withMcc(reader.getString());
                } else if ("mnc".equals(fieldName)) {
                    deserializedPublicLandMobileNetwork.withMnc(reader.getString());
                } else if ("homeNetworkPublicKeys".equals(fieldName)) {
                    deserializedPublicLandMobileNetwork.homeNetworkPublicKeys
                        = PublicLandMobileNetworkHomeNetworkPublicKeys.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPublicLandMobileNetwork;
        });
    }
}
