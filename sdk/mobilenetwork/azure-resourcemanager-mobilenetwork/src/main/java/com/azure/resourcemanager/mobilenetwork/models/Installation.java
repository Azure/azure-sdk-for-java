// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The installation state of the packet core.
 */
@Fluent
public final class Installation implements JsonSerializable<Installation> {
    /*
     * The desired installation state
     */
    private DesiredInstallationState desiredState;

    /*
     * Installation state
     */
    private InstallationState state;

    /*
     * Whether a reinstall of the packet core is required to pick up the latest configuration changes.
     */
    private ReinstallRequired reinstallRequired;

    /*
     * Reason(s) for the current installation state of the packet core.
     */
    private List<InstallationReason> reasons;

    /*
     * A reference to an in-progress installation operation
     */
    private AsyncOperationId operation;

    /**
     * Creates an instance of Installation class.
     */
    public Installation() {
    }

    /**
     * Get the desiredState property: The desired installation state.
     * 
     * @return the desiredState value.
     */
    public DesiredInstallationState desiredState() {
        return this.desiredState;
    }

    /**
     * Set the desiredState property: The desired installation state.
     * 
     * @param desiredState the desiredState value to set.
     * @return the Installation object itself.
     */
    public Installation withDesiredState(DesiredInstallationState desiredState) {
        this.desiredState = desiredState;
        return this;
    }

    /**
     * Get the state property: Installation state.
     * 
     * @return the state value.
     */
    public InstallationState state() {
        return this.state;
    }

    /**
     * Get the reinstallRequired property: Whether a reinstall of the packet core is required to pick up the latest
     * configuration changes.
     * 
     * @return the reinstallRequired value.
     */
    public ReinstallRequired reinstallRequired() {
        return this.reinstallRequired;
    }

    /**
     * Get the reasons property: Reason(s) for the current installation state of the packet core.
     * 
     * @return the reasons value.
     */
    public List<InstallationReason> reasons() {
        return this.reasons;
    }

    /**
     * Get the operation property: A reference to an in-progress installation operation.
     * 
     * @return the operation value.
     */
    public AsyncOperationId operation() {
        return this.operation;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operation() != null) {
            operation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("desiredState", this.desiredState == null ? null : this.desiredState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Installation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Installation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Installation.
     */
    public static Installation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Installation deserializedInstallation = new Installation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("desiredState".equals(fieldName)) {
                    deserializedInstallation.desiredState = DesiredInstallationState.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedInstallation.state = InstallationState.fromString(reader.getString());
                } else if ("reinstallRequired".equals(fieldName)) {
                    deserializedInstallation.reinstallRequired = ReinstallRequired.fromString(reader.getString());
                } else if ("reasons".equals(fieldName)) {
                    List<InstallationReason> reasons
                        = reader.readArray(reader1 -> InstallationReason.fromString(reader1.getString()));
                    deserializedInstallation.reasons = reasons;
                } else if ("operation".equals(fieldName)) {
                    deserializedInstallation.operation = AsyncOperationId.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstallation;
        });
    }
}
