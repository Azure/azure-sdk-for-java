// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mobilenetwork.fluent.models.PacketCoreControlPlaneInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of PacketCoreControlPlane. */
public interface PacketCoreControlPlane {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the identity property: The identity used to retrieve the ingress certificate from Azure key vault.
     *
     * @return the identity value.
     */
    ManagedServiceIdentity identity();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: The provisioning state of the packet core control plane resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the installation property: The installation state of the packet core control plane resource.
     *
     * @return the installation value.
     */
    Installation installation();

    /**
     * Gets the sites property: Site(s) under which this packet core control plane should be deployed. The sites must be
     * in the same location as the packet core control plane.
     *
     * @return the sites value.
     */
    List<SiteResourceId> sites();

    /**
     * Gets the platform property: The platform where the packet core is deployed.
     *
     * @return the platform value.
     */
    PlatformConfiguration platform();

    /**
     * Gets the coreNetworkTechnology property: The core network technology generation (5G core or EPC / 4G core).
     *
     * @return the coreNetworkTechnology value.
     */
    CoreNetworkType coreNetworkTechnology();

    /**
     * Gets the version property: The desired version of the packet core software.
     *
     * @return the version value.
     */
    String version();

    /**
     * Gets the installedVersion property: The currently installed version of the packet core software.
     *
     * @return the installedVersion value.
     */
    String installedVersion();

    /**
     * Gets the rollbackVersion property: The previous version of the packet core software that was deployed. Used when
     * performing the rollback action.
     *
     * @return the rollbackVersion value.
     */
    String rollbackVersion();

    /**
     * Gets the controlPlaneAccessInterface property: The control plane interface on the access network. For 5G
     * networks, this is the N2 interface. For 4G networks, this is the S1-MME interface.
     *
     * @return the controlPlaneAccessInterface value.
     */
    InterfaceProperties controlPlaneAccessInterface();

    /**
     * Gets the sku property: The SKU defining the throughput and SIM allowances for this packet core control plane
     * deployment.
     *
     * @return the sku value.
     */
    BillingSku sku();

    /**
     * Gets the ueMtu property: The MTU (in bytes) signaled to the UE. The same MTU is set on the user plane data links
     * for all data networks. The MTU set on the user plane access link is calculated to be 60 bytes greater than this
     * value to allow for GTP encapsulation.
     *
     * @return the ueMtu value.
     */
    Integer ueMtu();

    /**
     * Gets the localDiagnosticsAccess property: The kubernetes ingress configuration to control access to packet core
     * diagnostics over local APIs.
     *
     * @return the localDiagnosticsAccess value.
     */
    LocalDiagnosticsAccessConfiguration localDiagnosticsAccess();

    /**
     * Gets the diagnosticsUpload property: Configuration for uploading packet core diagnostics.
     *
     * @return the diagnosticsUpload value.
     */
    DiagnosticsUploadConfiguration diagnosticsUpload();

    /**
     * Gets the interopSettings property: Settings to allow interoperability with third party components e.g. RANs and
     * UEs.
     *
     * @return the interopSettings value.
     */
    Object interopSettings();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.mobilenetwork.fluent.models.PacketCoreControlPlaneInner object.
     *
     * @return the inner object.
     */
    PacketCoreControlPlaneInner innerModel();

    /** The entirety of the PacketCoreControlPlane definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithSites,
            DefinitionStages.WithPlatform,
            DefinitionStages.WithControlPlaneAccessInterface,
            DefinitionStages.WithSku,
            DefinitionStages.WithLocalDiagnosticsAccess,
            DefinitionStages.WithCreate {
    }

    /** The PacketCoreControlPlane definition stages. */
    interface DefinitionStages {
        /** The first stage of the PacketCoreControlPlane definition. */
        interface Blank extends WithLocation {
        }

        /** The stage of the PacketCoreControlPlane definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /** The stage of the PacketCoreControlPlane definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithSites withExistingResourceGroup(String resourceGroupName);
        }

        /** The stage of the PacketCoreControlPlane definition allowing to specify sites. */
        interface WithSites {
            /**
             * Specifies the sites property: Site(s) under which this packet core control plane should be deployed. The
             * sites must be in the same location as the packet core control plane..
             *
             * @param sites Site(s) under which this packet core control plane should be deployed. The sites must be in
             *     the same location as the packet core control plane.
             * @return the next definition stage.
             */
            WithPlatform withSites(List<SiteResourceId> sites);
        }

        /** The stage of the PacketCoreControlPlane definition allowing to specify platform. */
        interface WithPlatform {
            /**
             * Specifies the platform property: The platform where the packet core is deployed..
             *
             * @param platform The platform where the packet core is deployed.
             * @return the next definition stage.
             */
            WithControlPlaneAccessInterface withPlatform(PlatformConfiguration platform);
        }

        /** The stage of the PacketCoreControlPlane definition allowing to specify controlPlaneAccessInterface. */
        interface WithControlPlaneAccessInterface {
            /**
             * Specifies the controlPlaneAccessInterface property: The control plane interface on the access network.
             * For 5G networks, this is the N2 interface. For 4G networks, this is the S1-MME interface..
             *
             * @param controlPlaneAccessInterface The control plane interface on the access network. For 5G networks,
             *     this is the N2 interface. For 4G networks, this is the S1-MME interface.
             * @return the next definition stage.
             */
            WithSku withControlPlaneAccessInterface(InterfaceProperties controlPlaneAccessInterface);
        }

        /** The stage of the PacketCoreControlPlane definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The SKU defining the throughput and SIM allowances for this packet core
             * control plane deployment..
             *
             * @param sku The SKU defining the throughput and SIM allowances for this packet core control plane
             *     deployment.
             * @return the next definition stage.
             */
            WithLocalDiagnosticsAccess withSku(BillingSku sku);
        }

        /** The stage of the PacketCoreControlPlane definition allowing to specify localDiagnosticsAccess. */
        interface WithLocalDiagnosticsAccess {
            /**
             * Specifies the localDiagnosticsAccess property: The kubernetes ingress configuration to control access to
             * packet core diagnostics over local APIs..
             *
             * @param localDiagnosticsAccess The kubernetes ingress configuration to control access to packet core
             *     diagnostics over local APIs.
             * @return the next definition stage.
             */
            WithCreate withLocalDiagnosticsAccess(LocalDiagnosticsAccessConfiguration localDiagnosticsAccess);
        }

        /**
         * The stage of the PacketCoreControlPlane definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithIdentity,
                DefinitionStages.WithInstallation,
                DefinitionStages.WithCoreNetworkTechnology,
                DefinitionStages.WithVersion,
                DefinitionStages.WithUeMtu,
                DefinitionStages.WithDiagnosticsUpload,
                DefinitionStages.WithInteropSettings {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            PacketCoreControlPlane create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            PacketCoreControlPlane create(Context context);
        }

        /** The stage of the PacketCoreControlPlane definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /** The stage of the PacketCoreControlPlane definition allowing to specify identity. */
        interface WithIdentity {
            /**
             * Specifies the identity property: The identity used to retrieve the ingress certificate from Azure key
             * vault..
             *
             * @param identity The identity used to retrieve the ingress certificate from Azure key vault.
             * @return the next definition stage.
             */
            WithCreate withIdentity(ManagedServiceIdentity identity);
        }

        /** The stage of the PacketCoreControlPlane definition allowing to specify installation. */
        interface WithInstallation {
            /**
             * Specifies the installation property: The installation state of the packet core control plane resource..
             *
             * @param installation The installation state of the packet core control plane resource.
             * @return the next definition stage.
             */
            WithCreate withInstallation(Installation installation);
        }

        /** The stage of the PacketCoreControlPlane definition allowing to specify coreNetworkTechnology. */
        interface WithCoreNetworkTechnology {
            /**
             * Specifies the coreNetworkTechnology property: The core network technology generation (5G core or EPC / 4G
             * core)..
             *
             * @param coreNetworkTechnology The core network technology generation (5G core or EPC / 4G core).
             * @return the next definition stage.
             */
            WithCreate withCoreNetworkTechnology(CoreNetworkType coreNetworkTechnology);
        }

        /** The stage of the PacketCoreControlPlane definition allowing to specify version. */
        interface WithVersion {
            /**
             * Specifies the version property: The desired version of the packet core software..
             *
             * @param version The desired version of the packet core software.
             * @return the next definition stage.
             */
            WithCreate withVersion(String version);
        }

        /** The stage of the PacketCoreControlPlane definition allowing to specify ueMtu. */
        interface WithUeMtu {
            /**
             * Specifies the ueMtu property: The MTU (in bytes) signaled to the UE. The same MTU is set on the user
             * plane data links for all data networks. The MTU set on the user plane access link is calculated to be 60
             * bytes greater than this value to allow for GTP encapsulation..
             *
             * @param ueMtu The MTU (in bytes) signaled to the UE. The same MTU is set on the user plane data links for
             *     all data networks. The MTU set on the user plane access link is calculated to be 60 bytes greater
             *     than this value to allow for GTP encapsulation.
             * @return the next definition stage.
             */
            WithCreate withUeMtu(Integer ueMtu);
        }

        /** The stage of the PacketCoreControlPlane definition allowing to specify diagnosticsUpload. */
        interface WithDiagnosticsUpload {
            /**
             * Specifies the diagnosticsUpload property: Configuration for uploading packet core diagnostics.
             *
             * @param diagnosticsUpload Configuration for uploading packet core diagnostics.
             * @return the next definition stage.
             */
            WithCreate withDiagnosticsUpload(DiagnosticsUploadConfiguration diagnosticsUpload);
        }

        /** The stage of the PacketCoreControlPlane definition allowing to specify interopSettings. */
        interface WithInteropSettings {
            /**
             * Specifies the interopSettings property: Settings to allow interoperability with third party components
             * e.g. RANs and UEs..
             *
             * @param interopSettings Settings to allow interoperability with third party components e.g. RANs and UEs.
             * @return the next definition stage.
             */
            WithCreate withInteropSettings(Object interopSettings);
        }
    }

    /**
     * Begins update for the PacketCoreControlPlane resource.
     *
     * @return the stage of resource update.
     */
    PacketCoreControlPlane.Update update();

    /** The template for PacketCoreControlPlane update. */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithIdentity {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        PacketCoreControlPlane apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        PacketCoreControlPlane apply(Context context);
    }

    /** The PacketCoreControlPlane update stages. */
    interface UpdateStages {
        /** The stage of the PacketCoreControlPlane update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /** The stage of the PacketCoreControlPlane update allowing to specify identity. */
        interface WithIdentity {
            /**
             * Specifies the identity property: The managed service identity associated with this resource..
             *
             * @param identity The managed service identity associated with this resource.
             * @return the next definition stage.
             */
            Update withIdentity(ManagedServiceIdentity identity);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    PacketCoreControlPlane refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    PacketCoreControlPlane refresh(Context context);

    /**
     * Roll back the specified packet core control plane to the previous version, "rollbackVersion". Multiple
     * consecutive rollbacks are not possible. This action may cause a service outage.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    AsyncOperationStatus rollback();

    /**
     * Roll back the specified packet core control plane to the previous version, "rollbackVersion". Multiple
     * consecutive rollbacks are not possible. This action may cause a service outage.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    AsyncOperationStatus rollback(Context context);

    /**
     * Reinstall the specified packet core control plane. This action will remove any transaction state from the packet
     * core to return it to a known state. This action will cause a service outage.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    AsyncOperationStatus reinstall();

    /**
     * Reinstall the specified packet core control plane. This action will remove any transaction state from the packet
     * core to return it to a known state. This action will cause a service outage.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    AsyncOperationStatus reinstall(Context context);

    /**
     * Collect a diagnostics package for the specified packet core control plane. This action will upload the
     * diagnostics to a storage account.
     *
     * @param parameters Parameters supplied to the packet core control plane collect diagnostics package operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    AsyncOperationStatus collectDiagnosticsPackage(PacketCoreControlPlaneCollectDiagnosticsPackage parameters);

    /**
     * Collect a diagnostics package for the specified packet core control plane. This action will upload the
     * diagnostics to a storage account.
     *
     * @param parameters Parameters supplied to the packet core control plane collect diagnostics package operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    AsyncOperationStatus collectDiagnosticsPackage(
        PacketCoreControlPlaneCollectDiagnosticsPackage parameters, Context context);
}
