// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The SIMs to clone.
 */
@Fluent
public final class SimClone implements JsonSerializable<SimClone> {
    /*
     * The SIM Group where the SIMs should be cloned.
     */
    private SimGroupResourceId targetSimGroupId;

    /*
     * A list of SIM resource names to be cloned.
     */
    private List<String> sims;

    /**
     * Creates an instance of SimClone class.
     */
    public SimClone() {
    }

    /**
     * Get the targetSimGroupId property: The SIM Group where the SIMs should be cloned.
     * 
     * @return the targetSimGroupId value.
     */
    public SimGroupResourceId targetSimGroupId() {
        return this.targetSimGroupId;
    }

    /**
     * Set the targetSimGroupId property: The SIM Group where the SIMs should be cloned.
     * 
     * @param targetSimGroupId the targetSimGroupId value to set.
     * @return the SimClone object itself.
     */
    public SimClone withTargetSimGroupId(SimGroupResourceId targetSimGroupId) {
        this.targetSimGroupId = targetSimGroupId;
        return this;
    }

    /**
     * Get the sims property: A list of SIM resource names to be cloned.
     * 
     * @return the sims value.
     */
    public List<String> sims() {
        return this.sims;
    }

    /**
     * Set the sims property: A list of SIM resource names to be cloned.
     * 
     * @param sims the sims value to set.
     * @return the SimClone object itself.
     */
    public SimClone withSims(List<String> sims) {
        this.sims = sims;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetSimGroupId() != null) {
            targetSimGroupId().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("targetSimGroupId", this.targetSimGroupId);
        jsonWriter.writeArrayField("sims", this.sims, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SimClone from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SimClone if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the SimClone.
     */
    public static SimClone fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SimClone deserializedSimClone = new SimClone();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetSimGroupId".equals(fieldName)) {
                    deserializedSimClone.targetSimGroupId = SimGroupResourceId.fromJson(reader);
                } else if ("sims".equals(fieldName)) {
                    List<String> sims = reader.readArray(reader1 -> reader1.getString());
                    deserializedSimClone.sims = sims;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSimClone;
        });
    }
}
