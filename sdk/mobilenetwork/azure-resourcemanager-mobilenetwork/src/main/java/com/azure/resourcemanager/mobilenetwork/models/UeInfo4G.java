// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * UE Information for 4G.
 */
@Fluent
public final class UeInfo4G extends ExtendedUeInfoProperties {
    /*
     * RAT Type
     */
    private RatType ratType = RatType.FOURG;

    /*
     * UE Information properties for 4G.
     */
    private UeInfo4GProperties info;

    /**
     * Creates an instance of UeInfo4G class.
     */
    public UeInfo4G() {
    }

    /**
     * Get the ratType property: RAT Type.
     * 
     * @return the ratType value.
     */
    @Override
    public RatType ratType() {
        return this.ratType;
    }

    /**
     * Get the info property: UE Information properties for 4G.
     * 
     * @return the info value.
     */
    public UeInfo4GProperties info() {
        return this.info;
    }

    /**
     * Set the info property: UE Information properties for 4G.
     * 
     * @param info the info value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withInfo(UeInfo4GProperties info) {
        this.info = info;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UeInfo4G withLastReadAt(OffsetDateTime lastReadAt) {
        super.withLastReadAt(lastReadAt);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (info() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property info in model UeInfo4G"));
        } else {
            info().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UeInfo4G.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("lastReadAt",
            lastReadAt() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(lastReadAt()));
        jsonWriter.writeJsonField("info", this.info);
        jsonWriter.writeStringField("ratType", this.ratType == null ? null : this.ratType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UeInfo4G from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UeInfo4G if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UeInfo4G.
     */
    public static UeInfo4G fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UeInfo4G deserializedUeInfo4G = new UeInfo4G();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastReadAt".equals(fieldName)) {
                    deserializedUeInfo4G.withLastReadAt(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("info".equals(fieldName)) {
                    deserializedUeInfo4G.info = UeInfo4GProperties.fromJson(reader);
                } else if ("ratType".equals(fieldName)) {
                    deserializedUeInfo4G.ratType = RatType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUeInfo4G;
        });
    }
}
