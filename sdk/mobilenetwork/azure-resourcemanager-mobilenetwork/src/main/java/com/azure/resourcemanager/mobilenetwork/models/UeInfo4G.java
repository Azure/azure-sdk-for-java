// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mobilenetwork.fluent.models.UeInfo4GProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * UE Information for 4G.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "ratType")
@JsonTypeName("4G")
@Fluent
public final class UeInfo4G extends ExtendedUeInfoProperties {
    /*
     * UE Information properties for 4G.
     */
    @JsonProperty(value = "info", required = true)
    private UeInfo4GProperties innerInfo = new UeInfo4GProperties();

    /**
     * Creates an instance of UeInfo4G class.
     */
    public UeInfo4G() {
    }

    /**
     * Get the innerInfo property: UE Information properties for 4G.
     * 
     * @return the innerInfo value.
     */
    private UeInfo4GProperties innerInfo() {
        return this.innerInfo;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UeInfo4G withLastReadAt(OffsetDateTime lastReadAt) {
        super.withLastReadAt(lastReadAt);
        return this;
    }

    /**
     * Get the imsi property: International mobile subscriber identifier.
     * 
     * @return the imsi value.
     */
    public String imsi() {
        return this.innerInfo() == null ? null : this.innerInfo().imsi();
    }

    /**
     * Set the imsi property: International mobile subscriber identifier.
     * 
     * @param imsi the imsi value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withImsi(String imsi) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withImsi(imsi);
        return this;
    }

    /**
     * Get the imei property: International mobile equipment identity.
     * 
     * @return the imei value.
     */
    public String imei() {
        return this.innerInfo() == null ? null : this.innerInfo().imei();
    }

    /**
     * Set the imei property: International mobile equipment identity.
     * 
     * @param imei the imei value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withImei(String imei) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withImei(imei);
        return this;
    }

    /**
     * Get the imeisv property: International mobile equipment identity – software version.
     * 
     * @return the imeisv value.
     */
    public String imeisv() {
        return this.innerInfo() == null ? null : this.innerInfo().imeisv();
    }

    /**
     * Set the imeisv property: International mobile equipment identity – software version.
     * 
     * @param imeisv the imeisv value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withImeisv(String imeisv) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withImeisv(imeisv);
        return this;
    }

    /**
     * Get the sessionInfo property: The sessionInfo property.
     * 
     * @return the sessionInfo value.
     */
    public List<UeSessionInfo4G> sessionInfo() {
        return this.innerInfo() == null ? null : this.innerInfo().sessionInfo();
    }

    /**
     * Set the sessionInfo property: The sessionInfo property.
     * 
     * @param sessionInfo the sessionInfo value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withSessionInfo(List<UeSessionInfo4G> sessionInfo) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withSessionInfo(sessionInfo);
        return this;
    }

    /**
     * Get the mTmsi property: MME Temporary Mobile Subscriber Identity.
     * 
     * @return the mTmsi value.
     */
    public int mTmsi() {
        return this.innerInfo() == null ? 0 : this.innerInfo().mTmsi();
    }

    /**
     * Set the mTmsi property: MME Temporary Mobile Subscriber Identity.
     * 
     * @param mTmsi the mTmsi value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withMTmsi(int mTmsi) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withMTmsi(mTmsi);
        return this;
    }

    /**
     * Get the mcc property: Mobile country code (MCC).
     * 
     * @return the mcc value.
     */
    public String mcc() {
        return this.innerInfo() == null ? null : this.innerInfo().mcc();
    }

    /**
     * Set the mcc property: Mobile country code (MCC).
     * 
     * @param mcc the mcc value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withMcc(String mcc) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withMcc(mcc);
        return this;
    }

    /**
     * Get the mnc property: Mobile network code (MNC).
     * 
     * @return the mnc value.
     */
    public String mnc() {
        return this.innerInfo() == null ? null : this.innerInfo().mnc();
    }

    /**
     * Set the mnc property: Mobile network code (MNC).
     * 
     * @param mnc the mnc value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withMnc(String mnc) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withMnc(mnc);
        return this;
    }

    /**
     * Get the groupId property: MME group identifier.
     * 
     * @return the groupId value.
     */
    public int groupId() {
        return this.innerInfo() == null ? 0 : this.innerInfo().groupId();
    }

    /**
     * Set the groupId property: MME group identifier.
     * 
     * @param groupId the groupId value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withGroupId(int groupId) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withGroupId(groupId);
        return this;
    }

    /**
     * Get the code property: MME code.
     * 
     * @return the code value.
     */
    public int code() {
        return this.innerInfo() == null ? 0 : this.innerInfo().code();
    }

    /**
     * Set the code property: MME code.
     * 
     * @param code the code value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withCode(int code) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withCode(code);
        return this;
    }

    /**
     * Get the perUeTnla property: Per-UE transport network layer association.
     * 
     * @return the perUeTnla value.
     */
    public String perUeTnla() {
        return this.innerInfo() == null ? null : this.innerInfo().perUeTnla();
    }

    /**
     * Set the perUeTnla property: Per-UE transport network layer association.
     * 
     * @param perUeTnla the perUeTnla value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withPerUeTnla(String perUeTnla) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withPerUeTnla(perUeTnla);
        return this;
    }

    /**
     * Get the mmeS1ApId property: MME S1AP identifier.
     * 
     * @return the mmeS1ApId value.
     */
    public int mmeS1ApId() {
        return this.innerInfo() == null ? 0 : this.innerInfo().mmeS1ApId();
    }

    /**
     * Set the mmeS1ApId property: MME S1AP identifier.
     * 
     * @param mmeS1ApId the mmeS1ApId value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withMmeS1ApId(int mmeS1ApId) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withMmeS1ApId(mmeS1ApId);
        return this;
    }

    /**
     * Get the enbS1ApId property: eNodeB S1AP identifier.
     * 
     * @return the enbS1ApId value.
     */
    public int enbS1ApId() {
        return this.innerInfo() == null ? 0 : this.innerInfo().enbS1ApId();
    }

    /**
     * Set the enbS1ApId property: eNodeB S1AP identifier.
     * 
     * @param enbS1ApId the enbS1ApId value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withEnbS1ApId(int enbS1ApId) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withEnbS1ApId(enbS1ApId);
        return this;
    }

    /**
     * Get the lastVisitedTai property: Last Visited TAI.
     * 
     * @return the lastVisitedTai value.
     */
    public String lastVisitedTai() {
        return this.innerInfo() == null ? null : this.innerInfo().lastVisitedTai();
    }

    /**
     * Set the lastVisitedTai property: Last Visited TAI.
     * 
     * @param lastVisitedTai the lastVisitedTai value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withLastVisitedTai(String lastVisitedTai) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withLastVisitedTai(lastVisitedTai);
        return this;
    }

    /**
     * Get the ueState property: State of the UE.
     * 
     * @return the ueState value.
     */
    public UeState ueState() {
        return this.innerInfo() == null ? null : this.innerInfo().ueState();
    }

    /**
     * Set the ueState property: State of the UE.
     * 
     * @param ueState the ueState value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withUeState(UeState ueState) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withUeState(ueState);
        return this;
    }

    /**
     * Get the rrcEstablishmentCause property: Radio connection establishment cause.
     * 
     * @return the rrcEstablishmentCause value.
     */
    public RrcEstablishmentCause rrcEstablishmentCause() {
        return this.innerInfo() == null ? null : this.innerInfo().rrcEstablishmentCause();
    }

    /**
     * Set the rrcEstablishmentCause property: Radio connection establishment cause.
     * 
     * @param rrcEstablishmentCause the rrcEstablishmentCause value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withRrcEstablishmentCause(RrcEstablishmentCause rrcEstablishmentCause) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withRrcEstablishmentCause(rrcEstablishmentCause);
        return this;
    }

    /**
     * Get the ueUsageSetting property: The UE's usage setting.
     * 
     * @return the ueUsageSetting value.
     */
    public UeUsageSetting ueUsageSetting() {
        return this.innerInfo() == null ? null : this.innerInfo().ueUsageSetting();
    }

    /**
     * Set the ueUsageSetting property: The UE's usage setting.
     * 
     * @param ueUsageSetting the ueUsageSetting value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withUeUsageSetting(UeUsageSetting ueUsageSetting) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withUeUsageSetting(ueUsageSetting);
        return this;
    }

    /**
     * Get the lastActivityTime property: The timestamp of last activity of UE (UTC).
     * 
     * @return the lastActivityTime value.
     */
    public OffsetDateTime lastActivityTime() {
        return this.innerInfo() == null ? null : this.innerInfo().lastActivityTime();
    }

    /**
     * Set the lastActivityTime property: The timestamp of last activity of UE (UTC).
     * 
     * @param lastActivityTime the lastActivityTime value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withLastActivityTime(OffsetDateTime lastActivityTime) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withLastActivityTime(lastActivityTime);
        return this;
    }

    /**
     * Get the locationType property: Location Type.
     * 
     * @return the locationType value.
     */
    public String locationType() {
        return this.innerInfo() == null ? null : this.innerInfo().locationType();
    }

    /**
     * Set the locationType property: Location Type.
     * 
     * @param locationType the locationType value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withLocationType(String locationType) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withLocationType(locationType);
        return this;
    }

    /**
     * Get the tac property: Type Allocation Code of UE.
     * 
     * @return the tac value.
     */
    public String tac() {
        return this.innerInfo() == null ? null : this.innerInfo().tac();
    }

    /**
     * Set the tac property: Type Allocation Code of UE.
     * 
     * @param tac the tac value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withTac(String tac) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withTac(tac);
        return this;
    }

    /**
     * Get the mccConnectionInfoMcc property: Mobile country code (MCC).
     * 
     * @return the mccConnectionInfoMcc value.
     */
    public String mccConnectionInfoMcc() {
        return this.innerInfo() == null ? null : this.innerInfo().mccConnectionInfoMcc();
    }

    /**
     * Set the mccConnectionInfoMcc property: Mobile country code (MCC).
     * 
     * @param mccConnectionInfoMcc the mccConnectionInfoMcc value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withMccConnectionInfoMcc(String mccConnectionInfoMcc) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withMccConnectionInfoMcc(mccConnectionInfoMcc);
        return this;
    }

    /**
     * Get the mncConnectionInfoMnc property: Mobile network code (MNC).
     * 
     * @return the mncConnectionInfoMnc value.
     */
    public String mncConnectionInfoMnc() {
        return this.innerInfo() == null ? null : this.innerInfo().mncConnectionInfoMnc();
    }

    /**
     * Set the mncConnectionInfoMnc property: Mobile network code (MNC).
     * 
     * @param mncConnectionInfoMnc the mncConnectionInfoMnc value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withMncConnectionInfoMnc(String mncConnectionInfoMnc) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withMncConnectionInfoMnc(mncConnectionInfoMnc);
        return this;
    }

    /**
     * Get the ngeNbId property: NG-eNodeB identifier.
     * 
     * @return the ngeNbId value.
     */
    public String ngeNbId() {
        return this.innerInfo() == null ? null : this.innerInfo().ngeNbId();
    }

    /**
     * Set the ngeNbId property: NG-eNodeB identifier.
     * 
     * @param ngeNbId the ngeNbId value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withNgeNbId(String ngeNbId) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withNgeNbId(ngeNbId);
        return this;
    }

    /**
     * Get the eNbId property: eNodeB identifier.
     * 
     * @return the eNbId value.
     */
    public String eNbId() {
        return this.innerInfo() == null ? null : this.innerInfo().eNbId();
    }

    /**
     * Set the eNbId property: eNodeB identifier.
     * 
     * @param eNbId the eNbId value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withENbId(String eNbId) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withENbId(eNbId);
        return this;
    }

    /**
     * Get the n3IwfId property: N3 IWF identifier.
     * 
     * @return the n3IwfId value.
     */
    public String n3IwfId() {
        return this.innerInfo() == null ? null : this.innerInfo().n3IwfId();
    }

    /**
     * Set the n3IwfId property: N3 IWF identifier.
     * 
     * @param n3IwfId the n3IwfId value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withN3IwfId(String n3IwfId) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withN3IwfId(n3IwfId);
        return this;
    }

    /**
     * Get the wagfId property: W-AGF identifier.
     * 
     * @return the wagfId value.
     */
    public String wagfId() {
        return this.innerInfo() == null ? null : this.innerInfo().wagfId();
    }

    /**
     * Set the wagfId property: W-AGF identifier.
     * 
     * @param wagfId the wagfId value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withWagfId(String wagfId) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withWagfId(wagfId);
        return this;
    }

    /**
     * Get the tngfId property: TNGF identifier.
     * 
     * @return the tngfId value.
     */
    public String tngfId() {
        return this.innerInfo() == null ? null : this.innerInfo().tngfId();
    }

    /**
     * Set the tngfId property: TNGF identifier.
     * 
     * @param tngfId the tngfId value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withTngfId(String tngfId) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withTngfId(tngfId);
        return this;
    }

    /**
     * Get the nid property: Network identifier.
     * 
     * @return the nid value.
     */
    public String nid() {
        return this.innerInfo() == null ? null : this.innerInfo().nid();
    }

    /**
     * Set the nid property: Network identifier.
     * 
     * @param nid the nid value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withNid(String nid) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withNid(nid);
        return this;
    }

    /**
     * Get the mccGlobalRanNodeIdMcc property: Mobile country code (MCC).
     * 
     * @return the mccGlobalRanNodeIdMcc value.
     */
    public String mccGlobalRanNodeIdMcc() {
        return this.innerInfo() == null ? null : this.innerInfo().mccGlobalRanNodeIdMcc();
    }

    /**
     * Set the mccGlobalRanNodeIdMcc property: Mobile country code (MCC).
     * 
     * @param mccGlobalRanNodeIdMcc the mccGlobalRanNodeIdMcc value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withMccGlobalRanNodeIdMcc(String mccGlobalRanNodeIdMcc) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withMccGlobalRanNodeIdMcc(mccGlobalRanNodeIdMcc);
        return this;
    }

    /**
     * Get the mncGlobalRanNodeIdMnc property: Mobile network code (MNC).
     * 
     * @return the mncGlobalRanNodeIdMnc value.
     */
    public String mncGlobalRanNodeIdMnc() {
        return this.innerInfo() == null ? null : this.innerInfo().mncGlobalRanNodeIdMnc();
    }

    /**
     * Set the mncGlobalRanNodeIdMnc property: Mobile network code (MNC).
     * 
     * @param mncGlobalRanNodeIdMnc the mncGlobalRanNodeIdMnc value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withMncGlobalRanNodeIdMnc(String mncGlobalRanNodeIdMnc) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withMncGlobalRanNodeIdMnc(mncGlobalRanNodeIdMnc);
        return this;
    }

    /**
     * Get the bitLength property: The bitLength property.
     * 
     * @return the bitLength value.
     */
    public Integer bitLength() {
        return this.innerInfo() == null ? null : this.innerInfo().bitLength();
    }

    /**
     * Set the bitLength property: The bitLength property.
     * 
     * @param bitLength the bitLength value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withBitLength(Integer bitLength) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withBitLength(bitLength);
        return this;
    }

    /**
     * Get the gNBValue property: The gNBValue property.
     * 
     * @return the gNBValue value.
     */
    public String gNBValue() {
        return this.innerInfo() == null ? null : this.innerInfo().gNBValue();
    }

    /**
     * Set the gNBValue property: The gNBValue property.
     * 
     * @param gNBValue the gNBValue value to set.
     * @return the UeInfo4G object itself.
     */
    public UeInfo4G withGNBValue(String gNBValue) {
        if (this.innerInfo() == null) {
            this.innerInfo = new UeInfo4GProperties();
        }
        this.innerInfo().withGNBValue(gNBValue);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerInfo() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property innerInfo in model UeInfo4G"));
        } else {
            innerInfo().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UeInfo4G.class);
}
