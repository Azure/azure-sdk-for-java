// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The SIMs to upload. The SIM credentials must be encrypted.
 */
@Fluent
public final class EncryptedSimUploadList implements JsonSerializable<EncryptedSimUploadList> {
    /*
     * The upload file format version.
     */
    private int version;

    /*
     * An identifier for the Azure SIM onboarding public key used for encrypted upload.
     */
    private int azureKeyIdentifier;

    /*
     * The fingerprint of the SIM vendor public key. The private counterpart is used for signing the encrypted transport
     * key.
     */
    private String vendorKeyFingerprint;

    /*
     * The transport key used for encrypting SIM credentials, encrypted using the SIM onboarding public key.
     */
    private String encryptedTransportKey;

    /*
     * The encrypted transport key, signed using the SIM vendor private key.
     */
    private String signedTransportKey;

    /*
     * A list of SIMs to upload, with encrypted properties.
     */
    private List<SimNameAndEncryptedProperties> sims;

    /**
     * Creates an instance of EncryptedSimUploadList class.
     */
    public EncryptedSimUploadList() {
    }

    /**
     * Get the version property: The upload file format version.
     * 
     * @return the version value.
     */
    public int version() {
        return this.version;
    }

    /**
     * Set the version property: The upload file format version.
     * 
     * @param version the version value to set.
     * @return the EncryptedSimUploadList object itself.
     */
    public EncryptedSimUploadList withVersion(int version) {
        this.version = version;
        return this;
    }

    /**
     * Get the azureKeyIdentifier property: An identifier for the Azure SIM onboarding public key used for encrypted
     * upload.
     * 
     * @return the azureKeyIdentifier value.
     */
    public int azureKeyIdentifier() {
        return this.azureKeyIdentifier;
    }

    /**
     * Set the azureKeyIdentifier property: An identifier for the Azure SIM onboarding public key used for encrypted
     * upload.
     * 
     * @param azureKeyIdentifier the azureKeyIdentifier value to set.
     * @return the EncryptedSimUploadList object itself.
     */
    public EncryptedSimUploadList withAzureKeyIdentifier(int azureKeyIdentifier) {
        this.azureKeyIdentifier = azureKeyIdentifier;
        return this;
    }

    /**
     * Get the vendorKeyFingerprint property: The fingerprint of the SIM vendor public key. The private counterpart is
     * used for signing the encrypted transport key.
     * 
     * @return the vendorKeyFingerprint value.
     */
    public String vendorKeyFingerprint() {
        return this.vendorKeyFingerprint;
    }

    /**
     * Set the vendorKeyFingerprint property: The fingerprint of the SIM vendor public key. The private counterpart is
     * used for signing the encrypted transport key.
     * 
     * @param vendorKeyFingerprint the vendorKeyFingerprint value to set.
     * @return the EncryptedSimUploadList object itself.
     */
    public EncryptedSimUploadList withVendorKeyFingerprint(String vendorKeyFingerprint) {
        this.vendorKeyFingerprint = vendorKeyFingerprint;
        return this;
    }

    /**
     * Get the encryptedTransportKey property: The transport key used for encrypting SIM credentials, encrypted using
     * the SIM onboarding public key.
     * 
     * @return the encryptedTransportKey value.
     */
    public String encryptedTransportKey() {
        return this.encryptedTransportKey;
    }

    /**
     * Set the encryptedTransportKey property: The transport key used for encrypting SIM credentials, encrypted using
     * the SIM onboarding public key.
     * 
     * @param encryptedTransportKey the encryptedTransportKey value to set.
     * @return the EncryptedSimUploadList object itself.
     */
    public EncryptedSimUploadList withEncryptedTransportKey(String encryptedTransportKey) {
        this.encryptedTransportKey = encryptedTransportKey;
        return this;
    }

    /**
     * Get the signedTransportKey property: The encrypted transport key, signed using the SIM vendor private key.
     * 
     * @return the signedTransportKey value.
     */
    public String signedTransportKey() {
        return this.signedTransportKey;
    }

    /**
     * Set the signedTransportKey property: The encrypted transport key, signed using the SIM vendor private key.
     * 
     * @param signedTransportKey the signedTransportKey value to set.
     * @return the EncryptedSimUploadList object itself.
     */
    public EncryptedSimUploadList withSignedTransportKey(String signedTransportKey) {
        this.signedTransportKey = signedTransportKey;
        return this;
    }

    /**
     * Get the sims property: A list of SIMs to upload, with encrypted properties.
     * 
     * @return the sims value.
     */
    public List<SimNameAndEncryptedProperties> sims() {
        return this.sims;
    }

    /**
     * Set the sims property: A list of SIMs to upload, with encrypted properties.
     * 
     * @param sims the sims value to set.
     * @return the EncryptedSimUploadList object itself.
     */
    public EncryptedSimUploadList withSims(List<SimNameAndEncryptedProperties> sims) {
        this.sims = sims;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vendorKeyFingerprint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property vendorKeyFingerprint in model EncryptedSimUploadList"));
        }
        if (encryptedTransportKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property encryptedTransportKey in model EncryptedSimUploadList"));
        }
        if (signedTransportKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property signedTransportKey in model EncryptedSimUploadList"));
        }
        if (sims() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property sims in model EncryptedSimUploadList"));
        } else {
            sims().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EncryptedSimUploadList.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("version", this.version);
        jsonWriter.writeIntField("azureKeyIdentifier", this.azureKeyIdentifier);
        jsonWriter.writeStringField("vendorKeyFingerprint", this.vendorKeyFingerprint);
        jsonWriter.writeStringField("encryptedTransportKey", this.encryptedTransportKey);
        jsonWriter.writeStringField("signedTransportKey", this.signedTransportKey);
        jsonWriter.writeArrayField("sims", this.sims, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptedSimUploadList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptedSimUploadList if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EncryptedSimUploadList.
     */
    public static EncryptedSimUploadList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptedSimUploadList deserializedEncryptedSimUploadList = new EncryptedSimUploadList();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedEncryptedSimUploadList.version = reader.getInt();
                } else if ("azureKeyIdentifier".equals(fieldName)) {
                    deserializedEncryptedSimUploadList.azureKeyIdentifier = reader.getInt();
                } else if ("vendorKeyFingerprint".equals(fieldName)) {
                    deserializedEncryptedSimUploadList.vendorKeyFingerprint = reader.getString();
                } else if ("encryptedTransportKey".equals(fieldName)) {
                    deserializedEncryptedSimUploadList.encryptedTransportKey = reader.getString();
                } else if ("signedTransportKey".equals(fieldName)) {
                    deserializedEncryptedSimUploadList.signedTransportKey = reader.getString();
                } else if ("sims".equals(fieldName)) {
                    List<SimNameAndEncryptedProperties> sims
                        = reader.readArray(reader1 -> SimNameAndEncryptedProperties.fromJson(reader1));
                    deserializedEncryptedSimUploadList.sims = sims;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptedSimUploadList;
        });
    }
}
