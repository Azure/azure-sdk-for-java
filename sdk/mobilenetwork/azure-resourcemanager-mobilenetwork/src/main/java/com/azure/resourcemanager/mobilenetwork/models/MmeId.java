// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * MME identifier.
 */
@Fluent
public final class MmeId implements JsonSerializable<MmeId> {
    /*
     * MME group identifier
     */
    private int groupId;

    /*
     * MME code
     */
    private int code;

    /**
     * Creates an instance of MmeId class.
     */
    public MmeId() {
    }

    /**
     * Get the groupId property: MME group identifier.
     * 
     * @return the groupId value.
     */
    public int groupId() {
        return this.groupId;
    }

    /**
     * Set the groupId property: MME group identifier.
     * 
     * @param groupId the groupId value to set.
     * @return the MmeId object itself.
     */
    public MmeId withGroupId(int groupId) {
        this.groupId = groupId;
        return this;
    }

    /**
     * Get the code property: MME code.
     * 
     * @return the code value.
     */
    public int code() {
        return this.code;
    }

    /**
     * Set the code property: MME code.
     * 
     * @param code the code value to set.
     * @return the MmeId object itself.
     */
    public MmeId withCode(int code) {
        this.code = code;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("groupId", this.groupId);
        jsonWriter.writeIntField("code", this.code);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MmeId from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MmeId if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MmeId.
     */
    public static MmeId fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MmeId deserializedMmeId = new MmeId();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("groupId".equals(fieldName)) {
                    deserializedMmeId.groupId = reader.getInt();
                } else if ("code".equals(fieldName)) {
                    deserializedMmeId.code = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMmeId;
        });
    }
}
