// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * HTTPS server certificate configuration.
 */
@Fluent
public final class HttpsServerCertificate implements JsonSerializable<HttpsServerCertificate> {
    /*
     * The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
     */
    private String certificateUrl;

    /*
     * The provisioning state of the certificate.
     */
    private CertificateProvisioning provisioning;

    /**
     * Creates an instance of HttpsServerCertificate class.
     */
    public HttpsServerCertificate() {
    }

    /**
     * Get the certificateUrl property: The certificate URL, unversioned. For example:
     * https://contosovault.vault.azure.net/certificates/ingress.
     * 
     * @return the certificateUrl value.
     */
    public String certificateUrl() {
        return this.certificateUrl;
    }

    /**
     * Set the certificateUrl property: The certificate URL, unversioned. For example:
     * https://contosovault.vault.azure.net/certificates/ingress.
     * 
     * @param certificateUrl the certificateUrl value to set.
     * @return the HttpsServerCertificate object itself.
     */
    public HttpsServerCertificate withCertificateUrl(String certificateUrl) {
        this.certificateUrl = certificateUrl;
        return this;
    }

    /**
     * Get the provisioning property: The provisioning state of the certificate.
     * 
     * @return the provisioning value.
     */
    public CertificateProvisioning provisioning() {
        return this.provisioning;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (certificateUrl() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property certificateUrl in model HttpsServerCertificate"));
        }
        if (provisioning() != null) {
            provisioning().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HttpsServerCertificate.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("certificateUrl", this.certificateUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HttpsServerCertificate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HttpsServerCertificate if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HttpsServerCertificate.
     */
    public static HttpsServerCertificate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HttpsServerCertificate deserializedHttpsServerCertificate = new HttpsServerCertificate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("certificateUrl".equals(fieldName)) {
                    deserializedHttpsServerCertificate.certificateUrl = reader.getString();
                } else if ("provisioning".equals(fieldName)) {
                    deserializedHttpsServerCertificate.provisioning = CertificateProvisioning.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHttpsServerCertificate;
        });
    }
}
