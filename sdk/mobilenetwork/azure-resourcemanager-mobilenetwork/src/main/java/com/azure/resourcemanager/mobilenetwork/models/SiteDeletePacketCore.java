// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The packet core to delete under a site.
 */
@Fluent
public final class SiteDeletePacketCore implements JsonSerializable<SiteDeletePacketCore> {
    /*
     * Reference to an packet core control plane resource.
     */
    private PacketCoreControlPlaneResourceId packetCore;

    /**
     * Creates an instance of SiteDeletePacketCore class.
     */
    public SiteDeletePacketCore() {
    }

    /**
     * Get the packetCore property: Reference to an packet core control plane resource.
     * 
     * @return the packetCore value.
     */
    public PacketCoreControlPlaneResourceId packetCore() {
        return this.packetCore;
    }

    /**
     * Set the packetCore property: Reference to an packet core control plane resource.
     * 
     * @param packetCore the packetCore value to set.
     * @return the SiteDeletePacketCore object itself.
     */
    public SiteDeletePacketCore withPacketCore(PacketCoreControlPlaneResourceId packetCore) {
        this.packetCore = packetCore;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (packetCore() != null) {
            packetCore().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("packetCore", this.packetCore);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SiteDeletePacketCore from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SiteDeletePacketCore if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SiteDeletePacketCore.
     */
    public static SiteDeletePacketCore fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SiteDeletePacketCore deserializedSiteDeletePacketCore = new SiteDeletePacketCore();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("packetCore".equals(fieldName)) {
                    deserializedSiteDeletePacketCore.packetCore = PacketCoreControlPlaneResourceId.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSiteDeletePacketCore;
        });
    }
}
