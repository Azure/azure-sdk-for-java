// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Range of port numbers to use as translated ports on each translated address.
 * If not specified and NAPT is enabled, this range defaults to 1,024 - 49,999.
 * (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA. Ports 50,000 and
 * above are reserved for non-NAPT use.).
 */
@Fluent
public final class PortRange implements JsonSerializable<PortRange> {
    /*
     * The minimum port number
     */
    private Integer minPort;

    /*
     * The maximum port number
     */
    private Integer maxPort;

    /**
     * Creates an instance of PortRange class.
     */
    public PortRange() {
    }

    /**
     * Get the minPort property: The minimum port number.
     * 
     * @return the minPort value.
     */
    public Integer minPort() {
        return this.minPort;
    }

    /**
     * Set the minPort property: The minimum port number.
     * 
     * @param minPort the minPort value to set.
     * @return the PortRange object itself.
     */
    public PortRange withMinPort(Integer minPort) {
        this.minPort = minPort;
        return this;
    }

    /**
     * Get the maxPort property: The maximum port number.
     * 
     * @return the maxPort value.
     */
    public Integer maxPort() {
        return this.maxPort;
    }

    /**
     * Set the maxPort property: The maximum port number.
     * 
     * @param maxPort the maxPort value to set.
     * @return the PortRange object itself.
     */
    public PortRange withMaxPort(Integer maxPort) {
        this.maxPort = maxPort;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("minPort", this.minPort);
        jsonWriter.writeNumberField("maxPort", this.maxPort);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PortRange from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PortRange if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the PortRange.
     */
    public static PortRange fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PortRange deserializedPortRange = new PortRange();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("minPort".equals(fieldName)) {
                    deserializedPortRange.minPort = reader.getNullable(JsonReader::getInt);
                } else if ("maxPort".equals(fieldName)) {
                    deserializedPortRange.maxPort = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPortRange;
        });
    }
}
