// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * UE Information properties for 4G.
 */
@Fluent
public final class UeInfo4GProperties implements JsonSerializable<UeInfo4GProperties> {
    /*
     * International mobile subscriber identifier
     */
    private String imsi;

    /*
     * International mobile equipment identity
     */
    private String imei;

    /*
     * International mobile equipment identity – software version
     */
    private String imeisv;

    /*
     * Globally Unique Temporary Identifier (4G)
     */
    private Guti4G guti;

    /*
     * UE Connection Info for 4G
     */
    private UeConnectionInfo4G connectionInfo;

    /*
     * The sessionInfo property.
     */
    private List<UeSessionInfo4G> sessionInfo;

    /**
     * Creates an instance of UeInfo4GProperties class.
     */
    public UeInfo4GProperties() {
    }

    /**
     * Get the imsi property: International mobile subscriber identifier.
     * 
     * @return the imsi value.
     */
    public String imsi() {
        return this.imsi;
    }

    /**
     * Set the imsi property: International mobile subscriber identifier.
     * 
     * @param imsi the imsi value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withImsi(String imsi) {
        this.imsi = imsi;
        return this;
    }

    /**
     * Get the imei property: International mobile equipment identity.
     * 
     * @return the imei value.
     */
    public String imei() {
        return this.imei;
    }

    /**
     * Set the imei property: International mobile equipment identity.
     * 
     * @param imei the imei value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withImei(String imei) {
        this.imei = imei;
        return this;
    }

    /**
     * Get the imeisv property: International mobile equipment identity – software version.
     * 
     * @return the imeisv value.
     */
    public String imeisv() {
        return this.imeisv;
    }

    /**
     * Set the imeisv property: International mobile equipment identity – software version.
     * 
     * @param imeisv the imeisv value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withImeisv(String imeisv) {
        this.imeisv = imeisv;
        return this;
    }

    /**
     * Get the guti property: Globally Unique Temporary Identifier (4G).
     * 
     * @return the guti value.
     */
    public Guti4G guti() {
        return this.guti;
    }

    /**
     * Set the guti property: Globally Unique Temporary Identifier (4G).
     * 
     * @param guti the guti value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withGuti(Guti4G guti) {
        this.guti = guti;
        return this;
    }

    /**
     * Get the connectionInfo property: UE Connection Info for 4G.
     * 
     * @return the connectionInfo value.
     */
    public UeConnectionInfo4G connectionInfo() {
        return this.connectionInfo;
    }

    /**
     * Set the connectionInfo property: UE Connection Info for 4G.
     * 
     * @param connectionInfo the connectionInfo value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withConnectionInfo(UeConnectionInfo4G connectionInfo) {
        this.connectionInfo = connectionInfo;
        return this;
    }

    /**
     * Get the sessionInfo property: The sessionInfo property.
     * 
     * @return the sessionInfo value.
     */
    public List<UeSessionInfo4G> sessionInfo() {
        return this.sessionInfo;
    }

    /**
     * Set the sessionInfo property: The sessionInfo property.
     * 
     * @param sessionInfo the sessionInfo value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withSessionInfo(List<UeSessionInfo4G> sessionInfo) {
        this.sessionInfo = sessionInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (imsi() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property imsi in model UeInfo4GProperties"));
        }
        if (guti() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property guti in model UeInfo4GProperties"));
        } else {
            guti().validate();
        }
        if (connectionInfo() != null) {
            connectionInfo().validate();
        }
        if (sessionInfo() != null) {
            sessionInfo().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UeInfo4GProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("imsi", this.imsi);
        jsonWriter.writeJsonField("guti", this.guti);
        jsonWriter.writeStringField("imei", this.imei);
        jsonWriter.writeStringField("imeisv", this.imeisv);
        jsonWriter.writeJsonField("connectionInfo", this.connectionInfo);
        jsonWriter.writeArrayField("sessionInfo", this.sessionInfo, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UeInfo4GProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UeInfo4GProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UeInfo4GProperties.
     */
    public static UeInfo4GProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UeInfo4GProperties deserializedUeInfo4GProperties = new UeInfo4GProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("imsi".equals(fieldName)) {
                    deserializedUeInfo4GProperties.imsi = reader.getString();
                } else if ("guti".equals(fieldName)) {
                    deserializedUeInfo4GProperties.guti = Guti4G.fromJson(reader);
                } else if ("imei".equals(fieldName)) {
                    deserializedUeInfo4GProperties.imei = reader.getString();
                } else if ("imeisv".equals(fieldName)) {
                    deserializedUeInfo4GProperties.imeisv = reader.getString();
                } else if ("connectionInfo".equals(fieldName)) {
                    deserializedUeInfo4GProperties.connectionInfo = UeConnectionInfo4G.fromJson(reader);
                } else if ("sessionInfo".equals(fieldName)) {
                    List<UeSessionInfo4G> sessionInfo = reader.readArray(reader1 -> UeSessionInfo4G.fromJson(reader1));
                    deserializedUeInfo4GProperties.sessionInfo = sessionInfo;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUeInfo4GProperties;
        });
    }
}
