// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.mobilenetwork.models.PacketCaptureStatus;
import com.azure.resourcemanager.mobilenetwork.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Packet capture session properties. */
@Fluent
public final class PacketCapturePropertiesFormat {
    /*
     * The provisioning state of the packet capture session resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The status of the packet capture session.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private PacketCaptureStatus status;

    /*
     * The reason the current packet capture session state.
     */
    @JsonProperty(value = "reason", access = JsonProperty.Access.WRITE_ONLY)
    private String reason;

    /*
     * The start time of the packet capture session.
     */
    @JsonProperty(value = "captureStartTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime captureStartTime;

    /*
     * List of network interfaces to capture on.
     */
    @JsonProperty(value = "networkInterfaces")
    private List<String> networkInterfaces;

    /*
     * Number of bytes captured per packet, the remaining bytes are truncated. The default "0" means the entire packet
     * is captured.
     */
    @JsonProperty(value = "bytesToCapturePerPacket")
    private Long bytesToCapturePerPacket;

    /*
     * Maximum size of the capture output.
     */
    @JsonProperty(value = "totalBytesPerSession")
    private Long totalBytesPerSession;

    /*
     * Maximum duration of the capture session in seconds.
     */
    @JsonProperty(value = "timeLimitInSeconds")
    private Integer timeLimitInSeconds;

    /** Creates an instance of PacketCapturePropertiesFormat class. */
    public PacketCapturePropertiesFormat() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the packet capture session resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: The status of the packet capture session.
     *
     * @return the status value.
     */
    public PacketCaptureStatus status() {
        return this.status;
    }

    /**
     * Get the reason property: The reason the current packet capture session state.
     *
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Get the captureStartTime property: The start time of the packet capture session.
     *
     * @return the captureStartTime value.
     */
    public OffsetDateTime captureStartTime() {
        return this.captureStartTime;
    }

    /**
     * Get the networkInterfaces property: List of network interfaces to capture on.
     *
     * @return the networkInterfaces value.
     */
    public List<String> networkInterfaces() {
        return this.networkInterfaces;
    }

    /**
     * Set the networkInterfaces property: List of network interfaces to capture on.
     *
     * @param networkInterfaces the networkInterfaces value to set.
     * @return the PacketCapturePropertiesFormat object itself.
     */
    public PacketCapturePropertiesFormat withNetworkInterfaces(List<String> networkInterfaces) {
        this.networkInterfaces = networkInterfaces;
        return this;
    }

    /**
     * Get the bytesToCapturePerPacket property: Number of bytes captured per packet, the remaining bytes are truncated.
     * The default "0" means the entire packet is captured.
     *
     * @return the bytesToCapturePerPacket value.
     */
    public Long bytesToCapturePerPacket() {
        return this.bytesToCapturePerPacket;
    }

    /**
     * Set the bytesToCapturePerPacket property: Number of bytes captured per packet, the remaining bytes are truncated.
     * The default "0" means the entire packet is captured.
     *
     * @param bytesToCapturePerPacket the bytesToCapturePerPacket value to set.
     * @return the PacketCapturePropertiesFormat object itself.
     */
    public PacketCapturePropertiesFormat withBytesToCapturePerPacket(Long bytesToCapturePerPacket) {
        this.bytesToCapturePerPacket = bytesToCapturePerPacket;
        return this;
    }

    /**
     * Get the totalBytesPerSession property: Maximum size of the capture output.
     *
     * @return the totalBytesPerSession value.
     */
    public Long totalBytesPerSession() {
        return this.totalBytesPerSession;
    }

    /**
     * Set the totalBytesPerSession property: Maximum size of the capture output.
     *
     * @param totalBytesPerSession the totalBytesPerSession value to set.
     * @return the PacketCapturePropertiesFormat object itself.
     */
    public PacketCapturePropertiesFormat withTotalBytesPerSession(Long totalBytesPerSession) {
        this.totalBytesPerSession = totalBytesPerSession;
        return this;
    }

    /**
     * Get the timeLimitInSeconds property: Maximum duration of the capture session in seconds.
     *
     * @return the timeLimitInSeconds value.
     */
    public Integer timeLimitInSeconds() {
        return this.timeLimitInSeconds;
    }

    /**
     * Set the timeLimitInSeconds property: Maximum duration of the capture session in seconds.
     *
     * @param timeLimitInSeconds the timeLimitInSeconds value to set.
     * @return the PacketCapturePropertiesFormat object itself.
     */
    public PacketCapturePropertiesFormat withTimeLimitInSeconds(Integer timeLimitInSeconds) {
        this.timeLimitInSeconds = timeLimitInSeconds;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
