// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Static IP configuration for a SIM, scoped to a particular attached data network and slice.
 */
@Fluent
public final class SimStaticIpProperties implements JsonSerializable<SimStaticIpProperties> {
    /*
     * The attached data network on which the static IP address will be used. The combination of attached data network
     * and slice defines the network scope of the IP address. The attached data network must be in the same location as
     * the SIM.
     */
    private AttachedDataNetworkResourceId attachedDataNetwork;

    /*
     * The network slice on which the static IP address will be used. The combination of attached data network and slice
     * defines the network scope of the IP address. The slice must be in the same location as the SIM.
     */
    private SliceResourceId slice;

    /*
     * The static IP configuration for the SIM to use at the defined network scope.
     */
    private SimStaticIpPropertiesStaticIp staticIp;

    /**
     * Creates an instance of SimStaticIpProperties class.
     */
    public SimStaticIpProperties() {
    }

    /**
     * Get the attachedDataNetwork property: The attached data network on which the static IP address will be used. The
     * combination of attached data network and slice defines the network scope of the IP address. The attached data
     * network must be in the same location as the SIM.
     * 
     * @return the attachedDataNetwork value.
     */
    public AttachedDataNetworkResourceId attachedDataNetwork() {
        return this.attachedDataNetwork;
    }

    /**
     * Set the attachedDataNetwork property: The attached data network on which the static IP address will be used. The
     * combination of attached data network and slice defines the network scope of the IP address. The attached data
     * network must be in the same location as the SIM.
     * 
     * @param attachedDataNetwork the attachedDataNetwork value to set.
     * @return the SimStaticIpProperties object itself.
     */
    public SimStaticIpProperties withAttachedDataNetwork(AttachedDataNetworkResourceId attachedDataNetwork) {
        this.attachedDataNetwork = attachedDataNetwork;
        return this;
    }

    /**
     * Get the slice property: The network slice on which the static IP address will be used. The combination of
     * attached data network and slice defines the network scope of the IP address. The slice must be in the same
     * location as the SIM.
     * 
     * @return the slice value.
     */
    public SliceResourceId slice() {
        return this.slice;
    }

    /**
     * Set the slice property: The network slice on which the static IP address will be used. The combination of
     * attached data network and slice defines the network scope of the IP address. The slice must be in the same
     * location as the SIM.
     * 
     * @param slice the slice value to set.
     * @return the SimStaticIpProperties object itself.
     */
    public SimStaticIpProperties withSlice(SliceResourceId slice) {
        this.slice = slice;
        return this;
    }

    /**
     * Get the staticIp property: The static IP configuration for the SIM to use at the defined network scope.
     * 
     * @return the staticIp value.
     */
    public SimStaticIpPropertiesStaticIp staticIp() {
        return this.staticIp;
    }

    /**
     * Set the staticIp property: The static IP configuration for the SIM to use at the defined network scope.
     * 
     * @param staticIp the staticIp value to set.
     * @return the SimStaticIpProperties object itself.
     */
    public SimStaticIpProperties withStaticIp(SimStaticIpPropertiesStaticIp staticIp) {
        this.staticIp = staticIp;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (attachedDataNetwork() != null) {
            attachedDataNetwork().validate();
        }
        if (slice() != null) {
            slice().validate();
        }
        if (staticIp() != null) {
            staticIp().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("attachedDataNetwork", this.attachedDataNetwork);
        jsonWriter.writeJsonField("slice", this.slice);
        jsonWriter.writeJsonField("staticIp", this.staticIp);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SimStaticIpProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SimStaticIpProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SimStaticIpProperties.
     */
    public static SimStaticIpProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SimStaticIpProperties deserializedSimStaticIpProperties = new SimStaticIpProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attachedDataNetwork".equals(fieldName)) {
                    deserializedSimStaticIpProperties.attachedDataNetwork
                        = AttachedDataNetworkResourceId.fromJson(reader);
                } else if ("slice".equals(fieldName)) {
                    deserializedSimStaticIpProperties.slice = SliceResourceId.fromJson(reader);
                } else if ("staticIp".equals(fieldName)) {
                    deserializedSimStaticIpProperties.staticIp = SimStaticIpPropertiesStaticIp.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSimStaticIpProperties;
        });
    }
}
