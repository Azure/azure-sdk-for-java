// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * UE Location Info properties.
 */
@Fluent
public final class UeLocationInfo implements JsonSerializable<UeLocationInfo> {
    /*
     * Location Type
     */
    private String locationType;

    /*
     * Type Allocation Code of UE
     */
    private String tac;

    /*
     * PLMN Identifier
     */
    private PlmnId plmn;

    /**
     * Creates an instance of UeLocationInfo class.
     */
    public UeLocationInfo() {
    }

    /**
     * Get the locationType property: Location Type.
     * 
     * @return the locationType value.
     */
    public String locationType() {
        return this.locationType;
    }

    /**
     * Set the locationType property: Location Type.
     * 
     * @param locationType the locationType value to set.
     * @return the UeLocationInfo object itself.
     */
    public UeLocationInfo withLocationType(String locationType) {
        this.locationType = locationType;
        return this;
    }

    /**
     * Get the tac property: Type Allocation Code of UE.
     * 
     * @return the tac value.
     */
    public String tac() {
        return this.tac;
    }

    /**
     * Set the tac property: Type Allocation Code of UE.
     * 
     * @param tac the tac value to set.
     * @return the UeLocationInfo object itself.
     */
    public UeLocationInfo withTac(String tac) {
        this.tac = tac;
        return this;
    }

    /**
     * Get the plmn property: PLMN Identifier.
     * 
     * @return the plmn value.
     */
    public PlmnId plmn() {
        return this.plmn;
    }

    /**
     * Set the plmn property: PLMN Identifier.
     * 
     * @param plmn the plmn value to set.
     * @return the UeLocationInfo object itself.
     */
    public UeLocationInfo withPlmn(PlmnId plmn) {
        this.plmn = plmn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (locationType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property locationType in model UeLocationInfo"));
        }
        if (tac() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property tac in model UeLocationInfo"));
        }
        if (plmn() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property plmn in model UeLocationInfo"));
        } else {
            plmn().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UeLocationInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("locationType", this.locationType);
        jsonWriter.writeStringField("tac", this.tac);
        jsonWriter.writeJsonField("plmn", this.plmn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UeLocationInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UeLocationInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UeLocationInfo.
     */
    public static UeLocationInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UeLocationInfo deserializedUeLocationInfo = new UeLocationInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("locationType".equals(fieldName)) {
                    deserializedUeLocationInfo.locationType = reader.getString();
                } else if ("tac".equals(fieldName)) {
                    deserializedUeLocationInfo.tac = reader.getString();
                } else if ("plmn".equals(fieldName)) {
                    deserializedUeLocationInfo.plmn = PlmnId.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUeLocationInfo;
        });
    }
}
