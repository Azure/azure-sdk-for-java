// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Global RAN Node ID.
 */
@Fluent
public final class GlobalRanNodeId implements JsonSerializable<GlobalRanNodeId> {
    /*
     * PLMN Identifier
     */
    private PlmnId plmnId;

    /*
     * gNodeB identifier
     */
    private GNbId gNbId;

    /*
     * NG-eNodeB identifier
     */
    private String ngeNbId;

    /*
     * eNodeB identifier
     */
    private String eNbId;

    /*
     * N3 IWF identifier
     */
    private String n3IwfId;

    /*
     * W-AGF identifier
     */
    private String wagfId;

    /*
     * TNGF identifier
     */
    private String tngfId;

    /*
     * Network identifier
     */
    private String nid;

    /**
     * Creates an instance of GlobalRanNodeId class.
     */
    public GlobalRanNodeId() {
    }

    /**
     * Get the plmnId property: PLMN Identifier.
     * 
     * @return the plmnId value.
     */
    public PlmnId plmnId() {
        return this.plmnId;
    }

    /**
     * Set the plmnId property: PLMN Identifier.
     * 
     * @param plmnId the plmnId value to set.
     * @return the GlobalRanNodeId object itself.
     */
    public GlobalRanNodeId withPlmnId(PlmnId plmnId) {
        this.plmnId = plmnId;
        return this;
    }

    /**
     * Get the gNbId property: gNodeB identifier.
     * 
     * @return the gNbId value.
     */
    public GNbId gNbId() {
        return this.gNbId;
    }

    /**
     * Set the gNbId property: gNodeB identifier.
     * 
     * @param gNbId the gNbId value to set.
     * @return the GlobalRanNodeId object itself.
     */
    public GlobalRanNodeId withGNbId(GNbId gNbId) {
        this.gNbId = gNbId;
        return this;
    }

    /**
     * Get the ngeNbId property: NG-eNodeB identifier.
     * 
     * @return the ngeNbId value.
     */
    public String ngeNbId() {
        return this.ngeNbId;
    }

    /**
     * Set the ngeNbId property: NG-eNodeB identifier.
     * 
     * @param ngeNbId the ngeNbId value to set.
     * @return the GlobalRanNodeId object itself.
     */
    public GlobalRanNodeId withNgeNbId(String ngeNbId) {
        this.ngeNbId = ngeNbId;
        return this;
    }

    /**
     * Get the eNbId property: eNodeB identifier.
     * 
     * @return the eNbId value.
     */
    public String eNbId() {
        return this.eNbId;
    }

    /**
     * Set the eNbId property: eNodeB identifier.
     * 
     * @param eNbId the eNbId value to set.
     * @return the GlobalRanNodeId object itself.
     */
    public GlobalRanNodeId withENbId(String eNbId) {
        this.eNbId = eNbId;
        return this;
    }

    /**
     * Get the n3IwfId property: N3 IWF identifier.
     * 
     * @return the n3IwfId value.
     */
    public String n3IwfId() {
        return this.n3IwfId;
    }

    /**
     * Set the n3IwfId property: N3 IWF identifier.
     * 
     * @param n3IwfId the n3IwfId value to set.
     * @return the GlobalRanNodeId object itself.
     */
    public GlobalRanNodeId withN3IwfId(String n3IwfId) {
        this.n3IwfId = n3IwfId;
        return this;
    }

    /**
     * Get the wagfId property: W-AGF identifier.
     * 
     * @return the wagfId value.
     */
    public String wagfId() {
        return this.wagfId;
    }

    /**
     * Set the wagfId property: W-AGF identifier.
     * 
     * @param wagfId the wagfId value to set.
     * @return the GlobalRanNodeId object itself.
     */
    public GlobalRanNodeId withWagfId(String wagfId) {
        this.wagfId = wagfId;
        return this;
    }

    /**
     * Get the tngfId property: TNGF identifier.
     * 
     * @return the tngfId value.
     */
    public String tngfId() {
        return this.tngfId;
    }

    /**
     * Set the tngfId property: TNGF identifier.
     * 
     * @param tngfId the tngfId value to set.
     * @return the GlobalRanNodeId object itself.
     */
    public GlobalRanNodeId withTngfId(String tngfId) {
        this.tngfId = tngfId;
        return this;
    }

    /**
     * Get the nid property: Network identifier.
     * 
     * @return the nid value.
     */
    public String nid() {
        return this.nid;
    }

    /**
     * Set the nid property: Network identifier.
     * 
     * @param nid the nid value to set.
     * @return the GlobalRanNodeId object itself.
     */
    public GlobalRanNodeId withNid(String nid) {
        this.nid = nid;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (plmnId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property plmnId in model GlobalRanNodeId"));
        } else {
            plmnId().validate();
        }
        if (gNbId() != null) {
            gNbId().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GlobalRanNodeId.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("plmnId", this.plmnId);
        jsonWriter.writeJsonField("gNbId", this.gNbId);
        jsonWriter.writeStringField("ngeNbId", this.ngeNbId);
        jsonWriter.writeStringField("eNbId", this.eNbId);
        jsonWriter.writeStringField("n3IwfId", this.n3IwfId);
        jsonWriter.writeStringField("wagfId", this.wagfId);
        jsonWriter.writeStringField("tngfId", this.tngfId);
        jsonWriter.writeStringField("nid", this.nid);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GlobalRanNodeId from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GlobalRanNodeId if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GlobalRanNodeId.
     */
    public static GlobalRanNodeId fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GlobalRanNodeId deserializedGlobalRanNodeId = new GlobalRanNodeId();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("plmnId".equals(fieldName)) {
                    deserializedGlobalRanNodeId.plmnId = PlmnId.fromJson(reader);
                } else if ("gNbId".equals(fieldName)) {
                    deserializedGlobalRanNodeId.gNbId = GNbId.fromJson(reader);
                } else if ("ngeNbId".equals(fieldName)) {
                    deserializedGlobalRanNodeId.ngeNbId = reader.getString();
                } else if ("eNbId".equals(fieldName)) {
                    deserializedGlobalRanNodeId.eNbId = reader.getString();
                } else if ("n3IwfId".equals(fieldName)) {
                    deserializedGlobalRanNodeId.n3IwfId = reader.getString();
                } else if ("wagfId".equals(fieldName)) {
                    deserializedGlobalRanNodeId.wagfId = reader.getString();
                } else if ("tngfId".equals(fieldName)) {
                    deserializedGlobalRanNodeId.tngfId = reader.getString();
                } else if ("nid".equals(fieldName)) {
                    deserializedGlobalRanNodeId.nid = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGlobalRanNodeId;
        });
    }
}
