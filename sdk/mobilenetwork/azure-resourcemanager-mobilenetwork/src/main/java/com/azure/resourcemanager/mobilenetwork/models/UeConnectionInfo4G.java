// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * UE Connection Info for 4G.
 */
@Fluent
public final class UeConnectionInfo4G implements JsonSerializable<UeConnectionInfo4G> {
    /*
     * UE Location Info properties
     */
    private UeLocationInfo locationInfo;

    /*
     * Global RAN Node ID
     */
    private GlobalRanNodeId globalRanNodeId;

    /*
     * Per-UE transport network layer association
     */
    private String perUeTnla;

    /*
     * MME S1AP identifier
     */
    private int mmeS1ApId;

    /*
     * eNodeB S1AP identifier
     */
    private int enbS1ApId;

    /*
     * Last Visited TAI
     */
    private String lastVisitedTai;

    /*
     * State of the UE.
     */
    private UeState ueState;

    /*
     * Radio connection establishment cause
     */
    private RrcEstablishmentCause rrcEstablishmentCause;

    /*
     * The UE's usage setting
     */
    private UeUsageSetting ueUsageSetting;

    /*
     * The timestamp of last activity of UE (UTC).
     */
    private OffsetDateTime lastActivityTime;

    /**
     * Creates an instance of UeConnectionInfo4G class.
     */
    public UeConnectionInfo4G() {
    }

    /**
     * Get the locationInfo property: UE Location Info properties.
     * 
     * @return the locationInfo value.
     */
    public UeLocationInfo locationInfo() {
        return this.locationInfo;
    }

    /**
     * Set the locationInfo property: UE Location Info properties.
     * 
     * @param locationInfo the locationInfo value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withLocationInfo(UeLocationInfo locationInfo) {
        this.locationInfo = locationInfo;
        return this;
    }

    /**
     * Get the globalRanNodeId property: Global RAN Node ID.
     * 
     * @return the globalRanNodeId value.
     */
    public GlobalRanNodeId globalRanNodeId() {
        return this.globalRanNodeId;
    }

    /**
     * Set the globalRanNodeId property: Global RAN Node ID.
     * 
     * @param globalRanNodeId the globalRanNodeId value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withGlobalRanNodeId(GlobalRanNodeId globalRanNodeId) {
        this.globalRanNodeId = globalRanNodeId;
        return this;
    }

    /**
     * Get the perUeTnla property: Per-UE transport network layer association.
     * 
     * @return the perUeTnla value.
     */
    public String perUeTnla() {
        return this.perUeTnla;
    }

    /**
     * Set the perUeTnla property: Per-UE transport network layer association.
     * 
     * @param perUeTnla the perUeTnla value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withPerUeTnla(String perUeTnla) {
        this.perUeTnla = perUeTnla;
        return this;
    }

    /**
     * Get the mmeS1ApId property: MME S1AP identifier.
     * 
     * @return the mmeS1ApId value.
     */
    public int mmeS1ApId() {
        return this.mmeS1ApId;
    }

    /**
     * Set the mmeS1ApId property: MME S1AP identifier.
     * 
     * @param mmeS1ApId the mmeS1ApId value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withMmeS1ApId(int mmeS1ApId) {
        this.mmeS1ApId = mmeS1ApId;
        return this;
    }

    /**
     * Get the enbS1ApId property: eNodeB S1AP identifier.
     * 
     * @return the enbS1ApId value.
     */
    public int enbS1ApId() {
        return this.enbS1ApId;
    }

    /**
     * Set the enbS1ApId property: eNodeB S1AP identifier.
     * 
     * @param enbS1ApId the enbS1ApId value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withEnbS1ApId(int enbS1ApId) {
        this.enbS1ApId = enbS1ApId;
        return this;
    }

    /**
     * Get the lastVisitedTai property: Last Visited TAI.
     * 
     * @return the lastVisitedTai value.
     */
    public String lastVisitedTai() {
        return this.lastVisitedTai;
    }

    /**
     * Set the lastVisitedTai property: Last Visited TAI.
     * 
     * @param lastVisitedTai the lastVisitedTai value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withLastVisitedTai(String lastVisitedTai) {
        this.lastVisitedTai = lastVisitedTai;
        return this;
    }

    /**
     * Get the ueState property: State of the UE.
     * 
     * @return the ueState value.
     */
    public UeState ueState() {
        return this.ueState;
    }

    /**
     * Set the ueState property: State of the UE.
     * 
     * @param ueState the ueState value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withUeState(UeState ueState) {
        this.ueState = ueState;
        return this;
    }

    /**
     * Get the rrcEstablishmentCause property: Radio connection establishment cause.
     * 
     * @return the rrcEstablishmentCause value.
     */
    public RrcEstablishmentCause rrcEstablishmentCause() {
        return this.rrcEstablishmentCause;
    }

    /**
     * Set the rrcEstablishmentCause property: Radio connection establishment cause.
     * 
     * @param rrcEstablishmentCause the rrcEstablishmentCause value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withRrcEstablishmentCause(RrcEstablishmentCause rrcEstablishmentCause) {
        this.rrcEstablishmentCause = rrcEstablishmentCause;
        return this;
    }

    /**
     * Get the ueUsageSetting property: The UE's usage setting.
     * 
     * @return the ueUsageSetting value.
     */
    public UeUsageSetting ueUsageSetting() {
        return this.ueUsageSetting;
    }

    /**
     * Set the ueUsageSetting property: The UE's usage setting.
     * 
     * @param ueUsageSetting the ueUsageSetting value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withUeUsageSetting(UeUsageSetting ueUsageSetting) {
        this.ueUsageSetting = ueUsageSetting;
        return this;
    }

    /**
     * Get the lastActivityTime property: The timestamp of last activity of UE (UTC).
     * 
     * @return the lastActivityTime value.
     */
    public OffsetDateTime lastActivityTime() {
        return this.lastActivityTime;
    }

    /**
     * Set the lastActivityTime property: The timestamp of last activity of UE (UTC).
     * 
     * @param lastActivityTime the lastActivityTime value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withLastActivityTime(OffsetDateTime lastActivityTime) {
        this.lastActivityTime = lastActivityTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (locationInfo() != null) {
            locationInfo().validate();
        }
        if (globalRanNodeId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property globalRanNodeId in model UeConnectionInfo4G"));
        } else {
            globalRanNodeId().validate();
        }
        if (ueState() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property ueState in model UeConnectionInfo4G"));
        }
        if (rrcEstablishmentCause() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property rrcEstablishmentCause in model UeConnectionInfo4G"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UeConnectionInfo4G.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("globalRanNodeId", this.globalRanNodeId);
        jsonWriter.writeIntField("mmeS1apId", this.mmeS1ApId);
        jsonWriter.writeIntField("enbS1apId", this.enbS1ApId);
        jsonWriter.writeStringField("ueState", this.ueState == null ? null : this.ueState.toString());
        jsonWriter.writeStringField("rrcEstablishmentCause",
            this.rrcEstablishmentCause == null ? null : this.rrcEstablishmentCause.toString());
        jsonWriter.writeJsonField("locationInfo", this.locationInfo);
        jsonWriter.writeStringField("perUeTnla", this.perUeTnla);
        jsonWriter.writeStringField("lastVisitedTai", this.lastVisitedTai);
        jsonWriter.writeStringField("ueUsageSetting",
            this.ueUsageSetting == null ? null : this.ueUsageSetting.toString());
        jsonWriter.writeStringField("lastActivityTime",
            this.lastActivityTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastActivityTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UeConnectionInfo4G from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UeConnectionInfo4G if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UeConnectionInfo4G.
     */
    public static UeConnectionInfo4G fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UeConnectionInfo4G deserializedUeConnectionInfo4G = new UeConnectionInfo4G();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("globalRanNodeId".equals(fieldName)) {
                    deserializedUeConnectionInfo4G.globalRanNodeId = GlobalRanNodeId.fromJson(reader);
                } else if ("mmeS1apId".equals(fieldName)) {
                    deserializedUeConnectionInfo4G.mmeS1ApId = reader.getInt();
                } else if ("enbS1apId".equals(fieldName)) {
                    deserializedUeConnectionInfo4G.enbS1ApId = reader.getInt();
                } else if ("ueState".equals(fieldName)) {
                    deserializedUeConnectionInfo4G.ueState = UeState.fromString(reader.getString());
                } else if ("rrcEstablishmentCause".equals(fieldName)) {
                    deserializedUeConnectionInfo4G.rrcEstablishmentCause
                        = RrcEstablishmentCause.fromString(reader.getString());
                } else if ("locationInfo".equals(fieldName)) {
                    deserializedUeConnectionInfo4G.locationInfo = UeLocationInfo.fromJson(reader);
                } else if ("perUeTnla".equals(fieldName)) {
                    deserializedUeConnectionInfo4G.perUeTnla = reader.getString();
                } else if ("lastVisitedTai".equals(fieldName)) {
                    deserializedUeConnectionInfo4G.lastVisitedTai = reader.getString();
                } else if ("ueUsageSetting".equals(fieldName)) {
                    deserializedUeConnectionInfo4G.ueUsageSetting = UeUsageSetting.fromString(reader.getString());
                } else if ("lastActivityTime".equals(fieldName)) {
                    deserializedUeConnectionInfo4G.lastActivityTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUeConnectionInfo4G;
        });
    }
}
