// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DNN and UE IP address.
 */
@Fluent
public final class DnnIpPair implements JsonSerializable<DnnIpPair> {
    /*
     * Data network name
     */
    private String dnn;

    /*
     * UE IP address
     */
    private UeIpAddress ueIpAddress;

    /**
     * Creates an instance of DnnIpPair class.
     */
    public DnnIpPair() {
    }

    /**
     * Get the dnn property: Data network name.
     * 
     * @return the dnn value.
     */
    public String dnn() {
        return this.dnn;
    }

    /**
     * Set the dnn property: Data network name.
     * 
     * @param dnn the dnn value to set.
     * @return the DnnIpPair object itself.
     */
    public DnnIpPair withDnn(String dnn) {
        this.dnn = dnn;
        return this;
    }

    /**
     * Get the ueIpAddress property: UE IP address.
     * 
     * @return the ueIpAddress value.
     */
    public UeIpAddress ueIpAddress() {
        return this.ueIpAddress;
    }

    /**
     * Set the ueIpAddress property: UE IP address.
     * 
     * @param ueIpAddress the ueIpAddress value to set.
     * @return the DnnIpPair object itself.
     */
    public DnnIpPair withUeIpAddress(UeIpAddress ueIpAddress) {
        this.ueIpAddress = ueIpAddress;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ueIpAddress() != null) {
            ueIpAddress().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dnn", this.dnn);
        jsonWriter.writeJsonField("ueIpAddress", this.ueIpAddress);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DnnIpPair from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DnnIpPair if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the DnnIpPair.
     */
    public static DnnIpPair fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DnnIpPair deserializedDnnIpPair = new DnnIpPair();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dnn".equals(fieldName)) {
                    deserializedDnnIpPair.dnn = reader.getString();
                } else if ("ueIpAddress".equals(fieldName)) {
                    deserializedDnnIpPair.ueIpAddress = UeIpAddress.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDnnIpPair;
        });
    }
}
