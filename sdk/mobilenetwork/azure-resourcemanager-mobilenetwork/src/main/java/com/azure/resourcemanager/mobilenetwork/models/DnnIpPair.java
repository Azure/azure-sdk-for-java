// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.mobilenetwork.fluent.models.UeIpAddress;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DNN and UE IP address.
 */
@Fluent
public final class DnnIpPair {
    /*
     * Data network name
     */
    @JsonProperty(value = "dnn")
    private String dnn;

    /*
     * UE IP address
     */
    @JsonProperty(value = "ueIpAddress")
    private UeIpAddress innerUeIpAddress;

    /**
     * Creates an instance of DnnIpPair class.
     */
    public DnnIpPair() {
    }

    /**
     * Get the dnn property: Data network name.
     * 
     * @return the dnn value.
     */
    public String dnn() {
        return this.dnn;
    }

    /**
     * Set the dnn property: Data network name.
     * 
     * @param dnn the dnn value to set.
     * @return the DnnIpPair object itself.
     */
    public DnnIpPair withDnn(String dnn) {
        this.dnn = dnn;
        return this;
    }

    /**
     * Get the innerUeIpAddress property: UE IP address.
     * 
     * @return the innerUeIpAddress value.
     */
    private UeIpAddress innerUeIpAddress() {
        return this.innerUeIpAddress;
    }

    /**
     * Get the ipV4Addr property: IPv4 address.
     * 
     * @return the ipV4Addr value.
     */
    public String ipV4Addr() {
        return this.innerUeIpAddress() == null ? null : this.innerUeIpAddress().ipV4Addr();
    }

    /**
     * Set the ipV4Addr property: IPv4 address.
     * 
     * @param ipV4Addr the ipV4Addr value to set.
     * @return the DnnIpPair object itself.
     */
    public DnnIpPair withIpV4Addr(String ipV4Addr) {
        if (this.innerUeIpAddress() == null) {
            this.innerUeIpAddress = new UeIpAddress();
        }
        this.innerUeIpAddress().withIpV4Addr(ipV4Addr);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerUeIpAddress() != null) {
            innerUeIpAddress().validate();
        }
    }
}
