// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mobilenetwork.fluent.models.SliceInner;
import com.azure.resourcemanager.mobilenetwork.models.ProvisioningState;
import com.azure.resourcemanager.mobilenetwork.models.Slice;
import com.azure.resourcemanager.mobilenetwork.models.Snssai;
import com.azure.resourcemanager.mobilenetwork.models.TagsObject;
import java.util.Collections;
import java.util.Map;

public final class SliceImpl implements Slice, Slice.Definition, Slice.Update {
    private SliceInner innerObject;

    private final com.azure.resourcemanager.mobilenetwork.MobileNetworkManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Snssai snssai() {
        return this.innerModel().snssai();
    }

    public String description() {
        return this.innerModel().description();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SliceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.mobilenetwork.MobileNetworkManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String mobileNetworkName;

    private String sliceName;

    private TagsObject updateParameters;

    public SliceImpl withExistingMobileNetwork(String resourceGroupName, String mobileNetworkName) {
        this.resourceGroupName = resourceGroupName;
        this.mobileNetworkName = mobileNetworkName;
        return this;
    }

    public Slice create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSlices()
                .createOrUpdate(resourceGroupName, mobileNetworkName, sliceName, this.innerModel(), Context.NONE);
        return this;
    }

    public Slice create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSlices()
                .createOrUpdate(resourceGroupName, mobileNetworkName, sliceName, this.innerModel(), context);
        return this;
    }

    SliceImpl(String name, com.azure.resourcemanager.mobilenetwork.MobileNetworkManager serviceManager) {
        this.innerObject = new SliceInner();
        this.serviceManager = serviceManager;
        this.sliceName = name;
    }

    public SliceImpl update() {
        this.updateParameters = new TagsObject();
        return this;
    }

    public Slice apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSlices()
                .updateTagsWithResponse(resourceGroupName, mobileNetworkName, sliceName, updateParameters, Context.NONE)
                .getValue();
        return this;
    }

    public Slice apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSlices()
                .updateTagsWithResponse(resourceGroupName, mobileNetworkName, sliceName, updateParameters, context)
                .getValue();
        return this;
    }

    SliceImpl(SliceInner innerObject, com.azure.resourcemanager.mobilenetwork.MobileNetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.mobileNetworkName = Utils.getValueFromIdByName(innerObject.id(), "mobileNetworks");
        this.sliceName = Utils.getValueFromIdByName(innerObject.id(), "slices");
    }

    public Slice refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSlices()
                .getWithResponse(resourceGroupName, mobileNetworkName, sliceName, Context.NONE)
                .getValue();
        return this;
    }

    public Slice refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSlices()
                .getWithResponse(resourceGroupName, mobileNetworkName, sliceName, context)
                .getValue();
        return this;
    }

    public SliceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SliceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SliceImpl withSnssai(Snssai snssai) {
        this.innerModel().withSnssai(snssai);
        return this;
    }

    public SliceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public SliceImpl withDescription(String description) {
        this.innerModel().withDescription(description);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
