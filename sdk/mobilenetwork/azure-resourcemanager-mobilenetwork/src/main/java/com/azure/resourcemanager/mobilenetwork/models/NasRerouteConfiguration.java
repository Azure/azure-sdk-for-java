// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration enabling NAS reroute.
 */
@Fluent
public final class NasRerouteConfiguration implements JsonSerializable<NasRerouteConfiguration> {
    /*
     * The macro network's MME group ID. This is where unknown UEs are sent to via NAS reroute.
     */
    private int macroMmeGroupId;

    /**
     * Creates an instance of NasRerouteConfiguration class.
     */
    public NasRerouteConfiguration() {
    }

    /**
     * Get the macroMmeGroupId property: The macro network's MME group ID. This is where unknown UEs are sent to via NAS
     * reroute.
     * 
     * @return the macroMmeGroupId value.
     */
    public int macroMmeGroupId() {
        return this.macroMmeGroupId;
    }

    /**
     * Set the macroMmeGroupId property: The macro network's MME group ID. This is where unknown UEs are sent to via NAS
     * reroute.
     * 
     * @param macroMmeGroupId the macroMmeGroupId value to set.
     * @return the NasRerouteConfiguration object itself.
     */
    public NasRerouteConfiguration withMacroMmeGroupId(int macroMmeGroupId) {
        this.macroMmeGroupId = macroMmeGroupId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("macroMmeGroupId", this.macroMmeGroupId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NasRerouteConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NasRerouteConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NasRerouteConfiguration.
     */
    public static NasRerouteConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NasRerouteConfiguration deserializedNasRerouteConfiguration = new NasRerouteConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("macroMmeGroupId".equals(fieldName)) {
                    deserializedNasRerouteConfiguration.macroMmeGroupId = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNasRerouteConfiguration;
        });
    }
}
