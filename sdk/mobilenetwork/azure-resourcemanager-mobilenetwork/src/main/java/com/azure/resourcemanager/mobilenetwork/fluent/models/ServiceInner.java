// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mobilenetwork.models.PccRuleConfiguration;
import com.azure.resourcemanager.mobilenetwork.models.ProvisioningState;
import com.azure.resourcemanager.mobilenetwork.models.QosPolicy;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Service resource. */
@Fluent
public final class ServiceInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServiceInner.class);

    /*
     * Service Properties.
     */
    @JsonProperty(value = "properties", required = true)
    private ServicePropertiesFormat innerProperties = new ServicePropertiesFormat();

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData innerSystemData;

    /**
     * Get the innerProperties property: Service Properties.
     *
     * @return the innerProperties value.
     */
    private ServicePropertiesFormat innerProperties() {
        return this.innerProperties;
    }

//    /**
//     * Get the innerSystemData property: Metadata pertaining to creation and last modification of the resource.
//     *
//     * @return the innerSystemData value.
//     */
//    private SystemData innerSystemData() {
//        return this.innerSystemData;
//    }

    /** {@inheritDoc} */
    @Override
    public ServiceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ServiceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the service resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the servicePrecedence property: A precedence value that is used to decide between services when identifying
     * the QoS values to use for a particular Sim. A lower value means a higher priority. This value should be unique
     * among all services configured in the Mobile Network.
     *
     * @return the servicePrecedence value.
     */
    public int servicePrecedence() {
        return this.innerProperties() == null ? 0 : this.innerProperties().servicePrecedence();
    }

    /**
     * Set the servicePrecedence property: A precedence value that is used to decide between services when identifying
     * the QoS values to use for a particular Sim. A lower value means a higher priority. This value should be unique
     * among all services configured in the Mobile Network.
     *
     * @param servicePrecedence the servicePrecedence value to set.
     * @return the ServiceInner object itself.
     */
    public ServiceInner withServicePrecedence(int servicePrecedence) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServicePropertiesFormat();
        }
        this.innerProperties().withServicePrecedence(servicePrecedence);
        return this;
    }

    /**
     * Get the serviceQosPolicy property: The QoS policy to use for packets matching this service. This can be
     * overridden for particular flows using the ruleQosPolicy field in a PccRuleConfiguration. If this field is null
     * then the UE's simPolicy will define the QoS settings.
     *
     * @return the serviceQosPolicy value.
     */
    public QosPolicy serviceQosPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().serviceQosPolicy();
    }

    /**
     * Set the serviceQosPolicy property: The QoS policy to use for packets matching this service. This can be
     * overridden for particular flows using the ruleQosPolicy field in a PccRuleConfiguration. If this field is null
     * then the UE's simPolicy will define the QoS settings.
     *
     * @param serviceQosPolicy the serviceQosPolicy value to set.
     * @return the ServiceInner object itself.
     */
    public ServiceInner withServiceQosPolicy(QosPolicy serviceQosPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServicePropertiesFormat();
        }
        this.innerProperties().withServiceQosPolicy(serviceQosPolicy);
        return this;
    }

    /**
     * Get the pccRules property: The set of PCC Rules that make up this service.
     *
     * @return the pccRules value.
     */
    public List<PccRuleConfiguration> pccRules() {
        return this.innerProperties() == null ? null : this.innerProperties().pccRules();
    }

    /**
     * Set the pccRules property: The set of PCC Rules that make up this service.
     *
     * @param pccRules the pccRules value to set.
     * @return the ServiceInner object itself.
     */
    public ServiceInner withPccRules(List<PccRuleConfiguration> pccRules) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServicePropertiesFormat();
        }
        this.innerProperties().withPccRules(pccRules);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property innerProperties in model ServiceInner"));
        } else {
            innerProperties().validate();
        }
    }
}
