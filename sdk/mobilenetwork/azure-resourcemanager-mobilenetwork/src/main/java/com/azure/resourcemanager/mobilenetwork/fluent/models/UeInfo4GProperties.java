// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mobilenetwork.models.RrcEstablishmentCause;
import com.azure.resourcemanager.mobilenetwork.models.UeSessionInfo4G;
import com.azure.resourcemanager.mobilenetwork.models.UeState;
import com.azure.resourcemanager.mobilenetwork.models.UeUsageSetting;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * UE Information properties for 4G.
 */
@Fluent
public final class UeInfo4GProperties {
    /*
     * International mobile subscriber identifier
     */
    @JsonProperty(value = "imsi", required = true)
    private String imsi;

    /*
     * International mobile equipment identity
     */
    @JsonProperty(value = "imei")
    private String imei;

    /*
     * International mobile equipment identity – software version
     */
    @JsonProperty(value = "imeisv")
    private String imeisv;

    /*
     * Globally Unique Temporary Identifier (4G)
     */
    @JsonProperty(value = "guti", required = true)
    private Guti4G innerGuti = new Guti4G();

    /*
     * UE Connection Info for 4G
     */
    @JsonProperty(value = "connectionInfo")
    private UeConnectionInfo4G innerConnectionInfo;

    /*
     * The sessionInfo property.
     */
    @JsonProperty(value = "sessionInfo")
    private List<UeSessionInfo4G> sessionInfo;

    /**
     * Creates an instance of UeInfo4GProperties class.
     */
    public UeInfo4GProperties() {
    }

    /**
     * Get the imsi property: International mobile subscriber identifier.
     * 
     * @return the imsi value.
     */
    public String imsi() {
        return this.imsi;
    }

    /**
     * Set the imsi property: International mobile subscriber identifier.
     * 
     * @param imsi the imsi value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withImsi(String imsi) {
        this.imsi = imsi;
        return this;
    }

    /**
     * Get the imei property: International mobile equipment identity.
     * 
     * @return the imei value.
     */
    public String imei() {
        return this.imei;
    }

    /**
     * Set the imei property: International mobile equipment identity.
     * 
     * @param imei the imei value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withImei(String imei) {
        this.imei = imei;
        return this;
    }

    /**
     * Get the imeisv property: International mobile equipment identity – software version.
     * 
     * @return the imeisv value.
     */
    public String imeisv() {
        return this.imeisv;
    }

    /**
     * Set the imeisv property: International mobile equipment identity – software version.
     * 
     * @param imeisv the imeisv value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withImeisv(String imeisv) {
        this.imeisv = imeisv;
        return this;
    }

    /**
     * Get the innerGuti property: Globally Unique Temporary Identifier (4G).
     * 
     * @return the innerGuti value.
     */
    private Guti4G innerGuti() {
        return this.innerGuti;
    }

    /**
     * Get the innerConnectionInfo property: UE Connection Info for 4G.
     * 
     * @return the innerConnectionInfo value.
     */
    private UeConnectionInfo4G innerConnectionInfo() {
        return this.innerConnectionInfo;
    }

    /**
     * Get the sessionInfo property: The sessionInfo property.
     * 
     * @return the sessionInfo value.
     */
    public List<UeSessionInfo4G> sessionInfo() {
        return this.sessionInfo;
    }

    /**
     * Set the sessionInfo property: The sessionInfo property.
     * 
     * @param sessionInfo the sessionInfo value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withSessionInfo(List<UeSessionInfo4G> sessionInfo) {
        this.sessionInfo = sessionInfo;
        return this;
    }

    /**
     * Get the mTmsi property: MME Temporary Mobile Subscriber Identity.
     * 
     * @return the mTmsi value.
     */
    public int mTmsi() {
        return this.innerGuti() == null ? 0 : this.innerGuti().mTmsi();
    }

    /**
     * Set the mTmsi property: MME Temporary Mobile Subscriber Identity.
     * 
     * @param mTmsi the mTmsi value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withMTmsi(int mTmsi) {
        if (this.innerGuti() == null) {
            this.innerGuti = new Guti4G();
        }
        this.innerGuti().withMTmsi(mTmsi);
        return this;
    }

    /**
     * Get the mcc property: Mobile country code (MCC).
     * 
     * @return the mcc value.
     */
    public String mcc() {
        return this.innerGuti() == null ? null : this.innerGuti().mcc();
    }

    /**
     * Set the mcc property: Mobile country code (MCC).
     * 
     * @param mcc the mcc value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withMcc(String mcc) {
        if (this.innerGuti() == null) {
            this.innerGuti = new Guti4G();
        }
        this.innerGuti().withMcc(mcc);
        return this;
    }

    /**
     * Get the mnc property: Mobile network code (MNC).
     * 
     * @return the mnc value.
     */
    public String mnc() {
        return this.innerGuti() == null ? null : this.innerGuti().mnc();
    }

    /**
     * Set the mnc property: Mobile network code (MNC).
     * 
     * @param mnc the mnc value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withMnc(String mnc) {
        if (this.innerGuti() == null) {
            this.innerGuti = new Guti4G();
        }
        this.innerGuti().withMnc(mnc);
        return this;
    }

    /**
     * Get the groupId property: MME group identifier.
     * 
     * @return the groupId value.
     */
    public int groupId() {
        return this.innerGuti() == null ? 0 : this.innerGuti().groupId();
    }

    /**
     * Set the groupId property: MME group identifier.
     * 
     * @param groupId the groupId value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withGroupId(int groupId) {
        if (this.innerGuti() == null) {
            this.innerGuti = new Guti4G();
        }
        this.innerGuti().withGroupId(groupId);
        return this;
    }

    /**
     * Get the code property: MME code.
     * 
     * @return the code value.
     */
    public int code() {
        return this.innerGuti() == null ? 0 : this.innerGuti().code();
    }

    /**
     * Set the code property: MME code.
     * 
     * @param code the code value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withCode(int code) {
        if (this.innerGuti() == null) {
            this.innerGuti = new Guti4G();
        }
        this.innerGuti().withCode(code);
        return this;
    }

    /**
     * Get the perUeTnla property: Per-UE transport network layer association.
     * 
     * @return the perUeTnla value.
     */
    public String perUeTnla() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().perUeTnla();
    }

    /**
     * Set the perUeTnla property: Per-UE transport network layer association.
     * 
     * @param perUeTnla the perUeTnla value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withPerUeTnla(String perUeTnla) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withPerUeTnla(perUeTnla);
        return this;
    }

    /**
     * Get the mmeS1ApId property: MME S1AP identifier.
     * 
     * @return the mmeS1ApId value.
     */
    public Integer mmeS1ApId() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().mmeS1ApId();
    }

    /**
     * Set the mmeS1ApId property: MME S1AP identifier.
     * 
     * @param mmeS1ApId the mmeS1ApId value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withMmeS1ApId(Integer mmeS1ApId) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withMmeS1ApId(mmeS1ApId);
        return this;
    }

    /**
     * Get the enbS1ApId property: eNodeB S1AP identifier.
     * 
     * @return the enbS1ApId value.
     */
    public Integer enbS1ApId() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().enbS1ApId();
    }

    /**
     * Set the enbS1ApId property: eNodeB S1AP identifier.
     * 
     * @param enbS1ApId the enbS1ApId value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withEnbS1ApId(Integer enbS1ApId) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withEnbS1ApId(enbS1ApId);
        return this;
    }

    /**
     * Get the lastVisitedTai property: Last Visited TAI.
     * 
     * @return the lastVisitedTai value.
     */
    public String lastVisitedTai() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().lastVisitedTai();
    }

    /**
     * Set the lastVisitedTai property: Last Visited TAI.
     * 
     * @param lastVisitedTai the lastVisitedTai value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withLastVisitedTai(String lastVisitedTai) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withLastVisitedTai(lastVisitedTai);
        return this;
    }

    /**
     * Get the ueState property: State of the UE.
     * 
     * @return the ueState value.
     */
    public UeState ueState() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().ueState();
    }

    /**
     * Set the ueState property: State of the UE.
     * 
     * @param ueState the ueState value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withUeState(UeState ueState) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withUeState(ueState);
        return this;
    }

    /**
     * Get the rrcEstablishmentCause property: Radio connection establishment cause.
     * 
     * @return the rrcEstablishmentCause value.
     */
    public RrcEstablishmentCause rrcEstablishmentCause() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().rrcEstablishmentCause();
    }

    /**
     * Set the rrcEstablishmentCause property: Radio connection establishment cause.
     * 
     * @param rrcEstablishmentCause the rrcEstablishmentCause value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withRrcEstablishmentCause(RrcEstablishmentCause rrcEstablishmentCause) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withRrcEstablishmentCause(rrcEstablishmentCause);
        return this;
    }

    /**
     * Get the ueUsageSetting property: The UE's usage setting.
     * 
     * @return the ueUsageSetting value.
     */
    public UeUsageSetting ueUsageSetting() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().ueUsageSetting();
    }

    /**
     * Set the ueUsageSetting property: The UE's usage setting.
     * 
     * @param ueUsageSetting the ueUsageSetting value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withUeUsageSetting(UeUsageSetting ueUsageSetting) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withUeUsageSetting(ueUsageSetting);
        return this;
    }

    /**
     * Get the lastActivityTime property: The timestamp of last activity of UE (UTC).
     * 
     * @return the lastActivityTime value.
     */
    public OffsetDateTime lastActivityTime() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().lastActivityTime();
    }

    /**
     * Set the lastActivityTime property: The timestamp of last activity of UE (UTC).
     * 
     * @param lastActivityTime the lastActivityTime value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withLastActivityTime(OffsetDateTime lastActivityTime) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withLastActivityTime(lastActivityTime);
        return this;
    }

    /**
     * Get the locationType property: Location Type.
     * 
     * @return the locationType value.
     */
    public String locationType() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().locationType();
    }

    /**
     * Set the locationType property: Location Type.
     * 
     * @param locationType the locationType value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withLocationType(String locationType) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withLocationType(locationType);
        return this;
    }

    /**
     * Get the tac property: Type Allocation Code of UE.
     * 
     * @return the tac value.
     */
    public String tac() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().tac();
    }

    /**
     * Set the tac property: Type Allocation Code of UE.
     * 
     * @param tac the tac value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withTac(String tac) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withTac(tac);
        return this;
    }

    /**
     * Get the mcc property: Mobile country code (MCC).
     * 
     * @return the mcc value.
     */
    public String mccConnectionInfoMcc() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().mcc();
    }

    /**
     * Set the mcc property: Mobile country code (MCC).
     * 
     * @param mcc the mcc value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withMccConnectionInfoMcc(String mcc) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withMcc(mcc);
        return this;
    }

    /**
     * Get the mnc property: Mobile network code (MNC).
     * 
     * @return the mnc value.
     */
    public String mncConnectionInfoMnc() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().mnc();
    }

    /**
     * Set the mnc property: Mobile network code (MNC).
     * 
     * @param mnc the mnc value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withMncConnectionInfoMnc(String mnc) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withMnc(mnc);
        return this;
    }

    /**
     * Get the ngeNbId property: NG-eNodeB identifier.
     * 
     * @return the ngeNbId value.
     */
    public String ngeNbId() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().ngeNbId();
    }

    /**
     * Set the ngeNbId property: NG-eNodeB identifier.
     * 
     * @param ngeNbId the ngeNbId value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withNgeNbId(String ngeNbId) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withNgeNbId(ngeNbId);
        return this;
    }

    /**
     * Get the eNbId property: eNodeB identifier.
     * 
     * @return the eNbId value.
     */
    public String eNbId() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().eNbId();
    }

    /**
     * Set the eNbId property: eNodeB identifier.
     * 
     * @param eNbId the eNbId value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withENbId(String eNbId) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withENbId(eNbId);
        return this;
    }

    /**
     * Get the n3IwfId property: N3 IWF identifier.
     * 
     * @return the n3IwfId value.
     */
    public String n3IwfId() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().n3IwfId();
    }

    /**
     * Set the n3IwfId property: N3 IWF identifier.
     * 
     * @param n3IwfId the n3IwfId value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withN3IwfId(String n3IwfId) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withN3IwfId(n3IwfId);
        return this;
    }

    /**
     * Get the wagfId property: W-AGF identifier.
     * 
     * @return the wagfId value.
     */
    public String wagfId() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().wagfId();
    }

    /**
     * Set the wagfId property: W-AGF identifier.
     * 
     * @param wagfId the wagfId value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withWagfId(String wagfId) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withWagfId(wagfId);
        return this;
    }

    /**
     * Get the tngfId property: TNGF identifier.
     * 
     * @return the tngfId value.
     */
    public String tngfId() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().tngfId();
    }

    /**
     * Set the tngfId property: TNGF identifier.
     * 
     * @param tngfId the tngfId value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withTngfId(String tngfId) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withTngfId(tngfId);
        return this;
    }

    /**
     * Get the nid property: Network identifier.
     * 
     * @return the nid value.
     */
    public String nid() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().nid();
    }

    /**
     * Set the nid property: Network identifier.
     * 
     * @param nid the nid value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withNid(String nid) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withNid(nid);
        return this;
    }

    /**
     * Get the mccGlobalRanNodeIdMcc property: Mobile country code (MCC).
     * 
     * @return the mccGlobalRanNodeIdMcc value.
     */
    public String mccGlobalRanNodeIdMcc() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().mccGlobalRanNodeIdMcc();
    }

    /**
     * Set the mccGlobalRanNodeIdMcc property: Mobile country code (MCC).
     * 
     * @param mccGlobalRanNodeIdMcc the mccGlobalRanNodeIdMcc value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withMccGlobalRanNodeIdMcc(String mccGlobalRanNodeIdMcc) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withMccGlobalRanNodeIdMcc(mccGlobalRanNodeIdMcc);
        return this;
    }

    /**
     * Get the mncGlobalRanNodeIdMnc property: Mobile network code (MNC).
     * 
     * @return the mncGlobalRanNodeIdMnc value.
     */
    public String mncGlobalRanNodeIdMnc() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().mncGlobalRanNodeIdMnc();
    }

    /**
     * Set the mncGlobalRanNodeIdMnc property: Mobile network code (MNC).
     * 
     * @param mncGlobalRanNodeIdMnc the mncGlobalRanNodeIdMnc value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withMncGlobalRanNodeIdMnc(String mncGlobalRanNodeIdMnc) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withMncGlobalRanNodeIdMnc(mncGlobalRanNodeIdMnc);
        return this;
    }

    /**
     * Get the bitLength property: The bitLength property.
     * 
     * @return the bitLength value.
     */
    public Integer bitLength() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().bitLength();
    }

    /**
     * Set the bitLength property: The bitLength property.
     * 
     * @param bitLength the bitLength value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withBitLength(Integer bitLength) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withBitLength(bitLength);
        return this;
    }

    /**
     * Get the gNBValue property: The gNBValue property.
     * 
     * @return the gNBValue value.
     */
    public String gNBValue() {
        return this.innerConnectionInfo() == null ? null : this.innerConnectionInfo().gNBValue();
    }

    /**
     * Set the gNBValue property: The gNBValue property.
     * 
     * @param gNBValue the gNBValue value to set.
     * @return the UeInfo4GProperties object itself.
     */
    public UeInfo4GProperties withGNBValue(String gNBValue) {
        if (this.innerConnectionInfo() == null) {
            this.innerConnectionInfo = new UeConnectionInfo4G();
        }
        this.innerConnectionInfo().withGNBValue(gNBValue);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (imsi() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property imsi in model UeInfo4GProperties"));
        }
        if (innerGuti() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property innerGuti in model UeInfo4GProperties"));
        } else {
            innerGuti().validate();
        }
        if (innerConnectionInfo() != null) {
            innerConnectionInfo().validate();
        }
        if (sessionInfo() != null) {
            sessionInfo().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UeInfo4GProperties.class);
}
