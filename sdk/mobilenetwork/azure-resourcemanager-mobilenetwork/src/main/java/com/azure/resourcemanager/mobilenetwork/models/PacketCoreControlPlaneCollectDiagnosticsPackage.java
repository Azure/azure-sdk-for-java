// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Packet core control plane collect diagnostics package options.
 */
@Fluent
public final class PacketCoreControlPlaneCollectDiagnosticsPackage
    implements JsonSerializable<PacketCoreControlPlaneCollectDiagnosticsPackage> {
    /*
     * The Storage Account Blob URL to upload the diagnostics package to.
     */
    private String storageAccountBlobUrl;

    /**
     * Creates an instance of PacketCoreControlPlaneCollectDiagnosticsPackage class.
     */
    public PacketCoreControlPlaneCollectDiagnosticsPackage() {
    }

    /**
     * Get the storageAccountBlobUrl property: The Storage Account Blob URL to upload the diagnostics package to.
     * 
     * @return the storageAccountBlobUrl value.
     */
    public String storageAccountBlobUrl() {
        return this.storageAccountBlobUrl;
    }

    /**
     * Set the storageAccountBlobUrl property: The Storage Account Blob URL to upload the diagnostics package to.
     * 
     * @param storageAccountBlobUrl the storageAccountBlobUrl value to set.
     * @return the PacketCoreControlPlaneCollectDiagnosticsPackage object itself.
     */
    public PacketCoreControlPlaneCollectDiagnosticsPackage withStorageAccountBlobUrl(String storageAccountBlobUrl) {
        this.storageAccountBlobUrl = storageAccountBlobUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageAccountBlobUrl() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property storageAccountBlobUrl in model PacketCoreControlPlaneCollectDiagnosticsPackage"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PacketCoreControlPlaneCollectDiagnosticsPackage.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageAccountBlobUrl", this.storageAccountBlobUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PacketCoreControlPlaneCollectDiagnosticsPackage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PacketCoreControlPlaneCollectDiagnosticsPackage if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PacketCoreControlPlaneCollectDiagnosticsPackage.
     */
    public static PacketCoreControlPlaneCollectDiagnosticsPackage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PacketCoreControlPlaneCollectDiagnosticsPackage deserializedPacketCoreControlPlaneCollectDiagnosticsPackage
                = new PacketCoreControlPlaneCollectDiagnosticsPackage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageAccountBlobUrl".equals(fieldName)) {
                    deserializedPacketCoreControlPlaneCollectDiagnosticsPackage.storageAccountBlobUrl
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPacketCoreControlPlaneCollectDiagnosticsPackage;
        });
    }
}
