// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Basic UE Information Properties.
 */
@Fluent
public final class UeInfoPropertiesFormat implements JsonSerializable<UeInfoPropertiesFormat> {
    /*
     * RAT Type
     */
    private RatType ratType;

    /*
     * State of the UE.
     */
    private UeState ueState;

    /*
     * The ueIpAddresses property.
     */
    private List<DnnIpPair> ueIpAddresses;

    /*
     * The timestamp of last list UEs call to the packet core (UTC).
     */
    private OffsetDateTime lastReadAt;

    /**
     * Creates an instance of UeInfoPropertiesFormat class.
     */
    public UeInfoPropertiesFormat() {
    }

    /**
     * Get the ratType property: RAT Type.
     * 
     * @return the ratType value.
     */
    public RatType ratType() {
        return this.ratType;
    }

    /**
     * Set the ratType property: RAT Type.
     * 
     * @param ratType the ratType value to set.
     * @return the UeInfoPropertiesFormat object itself.
     */
    public UeInfoPropertiesFormat withRatType(RatType ratType) {
        this.ratType = ratType;
        return this;
    }

    /**
     * Get the ueState property: State of the UE.
     * 
     * @return the ueState value.
     */
    public UeState ueState() {
        return this.ueState;
    }

    /**
     * Set the ueState property: State of the UE.
     * 
     * @param ueState the ueState value to set.
     * @return the UeInfoPropertiesFormat object itself.
     */
    public UeInfoPropertiesFormat withUeState(UeState ueState) {
        this.ueState = ueState;
        return this;
    }

    /**
     * Get the ueIpAddresses property: The ueIpAddresses property.
     * 
     * @return the ueIpAddresses value.
     */
    public List<DnnIpPair> ueIpAddresses() {
        return this.ueIpAddresses;
    }

    /**
     * Set the ueIpAddresses property: The ueIpAddresses property.
     * 
     * @param ueIpAddresses the ueIpAddresses value to set.
     * @return the UeInfoPropertiesFormat object itself.
     */
    public UeInfoPropertiesFormat withUeIpAddresses(List<DnnIpPair> ueIpAddresses) {
        this.ueIpAddresses = ueIpAddresses;
        return this;
    }

    /**
     * Get the lastReadAt property: The timestamp of last list UEs call to the packet core (UTC).
     * 
     * @return the lastReadAt value.
     */
    public OffsetDateTime lastReadAt() {
        return this.lastReadAt;
    }

    /**
     * Set the lastReadAt property: The timestamp of last list UEs call to the packet core (UTC).
     * 
     * @param lastReadAt the lastReadAt value to set.
     * @return the UeInfoPropertiesFormat object itself.
     */
    public UeInfoPropertiesFormat withLastReadAt(OffsetDateTime lastReadAt) {
        this.lastReadAt = lastReadAt;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ratType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property ratType in model UeInfoPropertiesFormat"));
        }
        if (ueState() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property ueState in model UeInfoPropertiesFormat"));
        }
        if (ueIpAddresses() != null) {
            ueIpAddresses().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UeInfoPropertiesFormat.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ratType", this.ratType == null ? null : this.ratType.toString());
        jsonWriter.writeStringField("ueState", this.ueState == null ? null : this.ueState.toString());
        jsonWriter.writeArrayField("ueIpAddresses", this.ueIpAddresses, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("lastReadAt",
            this.lastReadAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastReadAt));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UeInfoPropertiesFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UeInfoPropertiesFormat if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UeInfoPropertiesFormat.
     */
    public static UeInfoPropertiesFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UeInfoPropertiesFormat deserializedUeInfoPropertiesFormat = new UeInfoPropertiesFormat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ratType".equals(fieldName)) {
                    deserializedUeInfoPropertiesFormat.ratType = RatType.fromString(reader.getString());
                } else if ("ueState".equals(fieldName)) {
                    deserializedUeInfoPropertiesFormat.ueState = UeState.fromString(reader.getString());
                } else if ("ueIpAddresses".equals(fieldName)) {
                    List<DnnIpPair> ueIpAddresses = reader.readArray(reader1 -> DnnIpPair.fromJson(reader1));
                    deserializedUeInfoPropertiesFormat.ueIpAddresses = ueIpAddresses;
                } else if ("lastReadAt".equals(fieldName)) {
                    deserializedUeInfoPropertiesFormat.lastReadAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUeInfoPropertiesFormat;
        });
    }
}
