// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Certificate provisioning state.
 */
@Immutable
public final class CertificateProvisioning implements JsonSerializable<CertificateProvisioning> {
    /*
     * The certificate's provisioning state
     */
    private CertificateProvisioningState state;

    /*
     * Reason for certificate provisioning failure.
     */
    private String reason;

    /**
     * Creates an instance of CertificateProvisioning class.
     */
    public CertificateProvisioning() {
    }

    /**
     * Get the state property: The certificate's provisioning state.
     * 
     * @return the state value.
     */
    public CertificateProvisioningState state() {
        return this.state;
    }

    /**
     * Get the reason property: Reason for certificate provisioning failure.
     * 
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CertificateProvisioning from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CertificateProvisioning if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CertificateProvisioning.
     */
    public static CertificateProvisioning fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CertificateProvisioning deserializedCertificateProvisioning = new CertificateProvisioning();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedCertificateProvisioning.state
                        = CertificateProvisioningState.fromString(reader.getString());
                } else if ("reason".equals(fieldName)) {
                    deserializedCertificateProvisioning.reason = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertificateProvisioning;
        });
    }
}
