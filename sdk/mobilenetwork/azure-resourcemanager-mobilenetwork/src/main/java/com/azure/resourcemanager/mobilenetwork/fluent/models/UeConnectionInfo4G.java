// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mobilenetwork.models.RrcEstablishmentCause;
import com.azure.resourcemanager.mobilenetwork.models.UeState;
import com.azure.resourcemanager.mobilenetwork.models.UeUsageSetting;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * UE Connection Info for 4G.
 */
@Fluent
public final class UeConnectionInfo4G {
    /*
     * UE Location Info properties
     */
    @JsonProperty(value = "locationInfo")
    private UeLocationInfo innerLocationInfo;

    /*
     * Global RAN Node ID
     */
    @JsonProperty(value = "globalRanNodeId", required = true)
    private GlobalRanNodeId innerGlobalRanNodeId = new GlobalRanNodeId();

    /*
     * Per-UE transport network layer association
     */
    @JsonProperty(value = "perUeTnla")
    private String perUeTnla;

    /*
     * MME S1AP identifier
     */
    @JsonProperty(value = "mmeS1apId", required = true)
    private int mmeS1ApId;

    /*
     * eNodeB S1AP identifier
     */
    @JsonProperty(value = "enbS1apId", required = true)
    private int enbS1ApId;

    /*
     * Last Visited TAI
     */
    @JsonProperty(value = "lastVisitedTai")
    private String lastVisitedTai;

    /*
     * State of the UE.
     */
    @JsonProperty(value = "ueState", required = true)
    private UeState ueState;

    /*
     * Radio connection establishment cause
     */
    @JsonProperty(value = "rrcEstablishmentCause", required = true)
    private RrcEstablishmentCause rrcEstablishmentCause;

    /*
     * The UE's usage setting
     */
    @JsonProperty(value = "ueUsageSetting")
    private UeUsageSetting ueUsageSetting;

    /*
     * The timestamp of last activity of UE (UTC).
     */
    @JsonProperty(value = "lastActivityTime")
    private OffsetDateTime lastActivityTime;

    /**
     * Creates an instance of UeConnectionInfo4G class.
     */
    public UeConnectionInfo4G() {
    }

    /**
     * Get the innerLocationInfo property: UE Location Info properties.
     * 
     * @return the innerLocationInfo value.
     */
    private UeLocationInfo innerLocationInfo() {
        return this.innerLocationInfo;
    }

    /**
     * Get the innerGlobalRanNodeId property: Global RAN Node ID.
     * 
     * @return the innerGlobalRanNodeId value.
     */
    private GlobalRanNodeId innerGlobalRanNodeId() {
        return this.innerGlobalRanNodeId;
    }

    /**
     * Get the perUeTnla property: Per-UE transport network layer association.
     * 
     * @return the perUeTnla value.
     */
    public String perUeTnla() {
        return this.perUeTnla;
    }

    /**
     * Set the perUeTnla property: Per-UE transport network layer association.
     * 
     * @param perUeTnla the perUeTnla value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withPerUeTnla(String perUeTnla) {
        this.perUeTnla = perUeTnla;
        return this;
    }

    /**
     * Get the mmeS1ApId property: MME S1AP identifier.
     * 
     * @return the mmeS1ApId value.
     */
    public int mmeS1ApId() {
        return this.mmeS1ApId;
    }

    /**
     * Set the mmeS1ApId property: MME S1AP identifier.
     * 
     * @param mmeS1ApId the mmeS1ApId value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withMmeS1ApId(int mmeS1ApId) {
        this.mmeS1ApId = mmeS1ApId;
        return this;
    }

    /**
     * Get the enbS1ApId property: eNodeB S1AP identifier.
     * 
     * @return the enbS1ApId value.
     */
    public int enbS1ApId() {
        return this.enbS1ApId;
    }

    /**
     * Set the enbS1ApId property: eNodeB S1AP identifier.
     * 
     * @param enbS1ApId the enbS1ApId value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withEnbS1ApId(int enbS1ApId) {
        this.enbS1ApId = enbS1ApId;
        return this;
    }

    /**
     * Get the lastVisitedTai property: Last Visited TAI.
     * 
     * @return the lastVisitedTai value.
     */
    public String lastVisitedTai() {
        return this.lastVisitedTai;
    }

    /**
     * Set the lastVisitedTai property: Last Visited TAI.
     * 
     * @param lastVisitedTai the lastVisitedTai value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withLastVisitedTai(String lastVisitedTai) {
        this.lastVisitedTai = lastVisitedTai;
        return this;
    }

    /**
     * Get the ueState property: State of the UE.
     * 
     * @return the ueState value.
     */
    public UeState ueState() {
        return this.ueState;
    }

    /**
     * Set the ueState property: State of the UE.
     * 
     * @param ueState the ueState value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withUeState(UeState ueState) {
        this.ueState = ueState;
        return this;
    }

    /**
     * Get the rrcEstablishmentCause property: Radio connection establishment cause.
     * 
     * @return the rrcEstablishmentCause value.
     */
    public RrcEstablishmentCause rrcEstablishmentCause() {
        return this.rrcEstablishmentCause;
    }

    /**
     * Set the rrcEstablishmentCause property: Radio connection establishment cause.
     * 
     * @param rrcEstablishmentCause the rrcEstablishmentCause value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withRrcEstablishmentCause(RrcEstablishmentCause rrcEstablishmentCause) {
        this.rrcEstablishmentCause = rrcEstablishmentCause;
        return this;
    }

    /**
     * Get the ueUsageSetting property: The UE's usage setting.
     * 
     * @return the ueUsageSetting value.
     */
    public UeUsageSetting ueUsageSetting() {
        return this.ueUsageSetting;
    }

    /**
     * Set the ueUsageSetting property: The UE's usage setting.
     * 
     * @param ueUsageSetting the ueUsageSetting value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withUeUsageSetting(UeUsageSetting ueUsageSetting) {
        this.ueUsageSetting = ueUsageSetting;
        return this;
    }

    /**
     * Get the lastActivityTime property: The timestamp of last activity of UE (UTC).
     * 
     * @return the lastActivityTime value.
     */
    public OffsetDateTime lastActivityTime() {
        return this.lastActivityTime;
    }

    /**
     * Set the lastActivityTime property: The timestamp of last activity of UE (UTC).
     * 
     * @param lastActivityTime the lastActivityTime value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withLastActivityTime(OffsetDateTime lastActivityTime) {
        this.lastActivityTime = lastActivityTime;
        return this;
    }

    /**
     * Get the locationType property: Location Type.
     * 
     * @return the locationType value.
     */
    public String locationType() {
        return this.innerLocationInfo() == null ? null : this.innerLocationInfo().locationType();
    }

    /**
     * Set the locationType property: Location Type.
     * 
     * @param locationType the locationType value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withLocationType(String locationType) {
        if (this.innerLocationInfo() == null) {
            this.innerLocationInfo = new UeLocationInfo();
        }
        this.innerLocationInfo().withLocationType(locationType);
        return this;
    }

    /**
     * Get the tac property: Type Allocation Code of UE.
     * 
     * @return the tac value.
     */
    public String tac() {
        return this.innerLocationInfo() == null ? null : this.innerLocationInfo().tac();
    }

    /**
     * Set the tac property: Type Allocation Code of UE.
     * 
     * @param tac the tac value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withTac(String tac) {
        if (this.innerLocationInfo() == null) {
            this.innerLocationInfo = new UeLocationInfo();
        }
        this.innerLocationInfo().withTac(tac);
        return this;
    }

    /**
     * Get the mcc property: Mobile country code (MCC).
     * 
     * @return the mcc value.
     */
    public String mcc() {
        return this.innerLocationInfo() == null ? null : this.innerLocationInfo().mcc();
    }

    /**
     * Set the mcc property: Mobile country code (MCC).
     * 
     * @param mcc the mcc value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withMcc(String mcc) {
        if (this.innerLocationInfo() == null) {
            this.innerLocationInfo = new UeLocationInfo();
        }
        this.innerLocationInfo().withMcc(mcc);
        return this;
    }

    /**
     * Get the mnc property: Mobile network code (MNC).
     * 
     * @return the mnc value.
     */
    public String mnc() {
        return this.innerLocationInfo() == null ? null : this.innerLocationInfo().mnc();
    }

    /**
     * Set the mnc property: Mobile network code (MNC).
     * 
     * @param mnc the mnc value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withMnc(String mnc) {
        if (this.innerLocationInfo() == null) {
            this.innerLocationInfo = new UeLocationInfo();
        }
        this.innerLocationInfo().withMnc(mnc);
        return this;
    }

    /**
     * Get the ngeNbId property: NG-eNodeB identifier.
     * 
     * @return the ngeNbId value.
     */
    public String ngeNbId() {
        return this.innerGlobalRanNodeId() == null ? null : this.innerGlobalRanNodeId().ngeNbId();
    }

    /**
     * Set the ngeNbId property: NG-eNodeB identifier.
     * 
     * @param ngeNbId the ngeNbId value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withNgeNbId(String ngeNbId) {
        if (this.innerGlobalRanNodeId() == null) {
            this.innerGlobalRanNodeId = new GlobalRanNodeId();
        }
        this.innerGlobalRanNodeId().withNgeNbId(ngeNbId);
        return this;
    }

    /**
     * Get the eNbId property: eNodeB identifier.
     * 
     * @return the eNbId value.
     */
    public String eNbId() {
        return this.innerGlobalRanNodeId() == null ? null : this.innerGlobalRanNodeId().eNbId();
    }

    /**
     * Set the eNbId property: eNodeB identifier.
     * 
     * @param eNbId the eNbId value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withENbId(String eNbId) {
        if (this.innerGlobalRanNodeId() == null) {
            this.innerGlobalRanNodeId = new GlobalRanNodeId();
        }
        this.innerGlobalRanNodeId().withENbId(eNbId);
        return this;
    }

    /**
     * Get the n3IwfId property: N3 IWF identifier.
     * 
     * @return the n3IwfId value.
     */
    public String n3IwfId() {
        return this.innerGlobalRanNodeId() == null ? null : this.innerGlobalRanNodeId().n3IwfId();
    }

    /**
     * Set the n3IwfId property: N3 IWF identifier.
     * 
     * @param n3IwfId the n3IwfId value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withN3IwfId(String n3IwfId) {
        if (this.innerGlobalRanNodeId() == null) {
            this.innerGlobalRanNodeId = new GlobalRanNodeId();
        }
        this.innerGlobalRanNodeId().withN3IwfId(n3IwfId);
        return this;
    }

    /**
     * Get the wagfId property: W-AGF identifier.
     * 
     * @return the wagfId value.
     */
    public String wagfId() {
        return this.innerGlobalRanNodeId() == null ? null : this.innerGlobalRanNodeId().wagfId();
    }

    /**
     * Set the wagfId property: W-AGF identifier.
     * 
     * @param wagfId the wagfId value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withWagfId(String wagfId) {
        if (this.innerGlobalRanNodeId() == null) {
            this.innerGlobalRanNodeId = new GlobalRanNodeId();
        }
        this.innerGlobalRanNodeId().withWagfId(wagfId);
        return this;
    }

    /**
     * Get the tngfId property: TNGF identifier.
     * 
     * @return the tngfId value.
     */
    public String tngfId() {
        return this.innerGlobalRanNodeId() == null ? null : this.innerGlobalRanNodeId().tngfId();
    }

    /**
     * Set the tngfId property: TNGF identifier.
     * 
     * @param tngfId the tngfId value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withTngfId(String tngfId) {
        if (this.innerGlobalRanNodeId() == null) {
            this.innerGlobalRanNodeId = new GlobalRanNodeId();
        }
        this.innerGlobalRanNodeId().withTngfId(tngfId);
        return this;
    }

    /**
     * Get the nid property: Network identifier.
     * 
     * @return the nid value.
     */
    public String nid() {
        return this.innerGlobalRanNodeId() == null ? null : this.innerGlobalRanNodeId().nid();
    }

    /**
     * Set the nid property: Network identifier.
     * 
     * @param nid the nid value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withNid(String nid) {
        if (this.innerGlobalRanNodeId() == null) {
            this.innerGlobalRanNodeId = new GlobalRanNodeId();
        }
        this.innerGlobalRanNodeId().withNid(nid);
        return this;
    }

    /**
     * Get the mcc property: Mobile country code (MCC).
     * 
     * @return the mcc value.
     */
    public String mccGlobalRanNodeIdMcc() {
        return this.innerGlobalRanNodeId() == null ? null : this.innerGlobalRanNodeId().mcc();
    }

    /**
     * Set the mcc property: Mobile country code (MCC).
     * 
     * @param mcc the mcc value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withMccGlobalRanNodeIdMcc(String mcc) {
        if (this.innerGlobalRanNodeId() == null) {
            this.innerGlobalRanNodeId = new GlobalRanNodeId();
        }
        this.innerGlobalRanNodeId().withMcc(mcc);
        return this;
    }

    /**
     * Get the mnc property: Mobile network code (MNC).
     * 
     * @return the mnc value.
     */
    public String mncGlobalRanNodeIdMnc() {
        return this.innerGlobalRanNodeId() == null ? null : this.innerGlobalRanNodeId().mnc();
    }

    /**
     * Set the mnc property: Mobile network code (MNC).
     * 
     * @param mnc the mnc value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withMncGlobalRanNodeIdMnc(String mnc) {
        if (this.innerGlobalRanNodeId() == null) {
            this.innerGlobalRanNodeId = new GlobalRanNodeId();
        }
        this.innerGlobalRanNodeId().withMnc(mnc);
        return this;
    }

    /**
     * Get the bitLength property: The bitLength property.
     * 
     * @return the bitLength value.
     */
    public Integer bitLength() {
        return this.innerGlobalRanNodeId() == null ? null : this.innerGlobalRanNodeId().bitLength();
    }

    /**
     * Set the bitLength property: The bitLength property.
     * 
     * @param bitLength the bitLength value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withBitLength(Integer bitLength) {
        if (this.innerGlobalRanNodeId() == null) {
            this.innerGlobalRanNodeId = new GlobalRanNodeId();
        }
        this.innerGlobalRanNodeId().withBitLength(bitLength);
        return this;
    }

    /**
     * Get the gNBValue property: The gNBValue property.
     * 
     * @return the gNBValue value.
     */
    public String gNBValue() {
        return this.innerGlobalRanNodeId() == null ? null : this.innerGlobalRanNodeId().gNBValue();
    }

    /**
     * Set the gNBValue property: The gNBValue property.
     * 
     * @param gNBValue the gNBValue value to set.
     * @return the UeConnectionInfo4G object itself.
     */
    public UeConnectionInfo4G withGNBValue(String gNBValue) {
        if (this.innerGlobalRanNodeId() == null) {
            this.innerGlobalRanNodeId = new GlobalRanNodeId();
        }
        this.innerGlobalRanNodeId().withGNBValue(gNBValue);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerLocationInfo() != null) {
            innerLocationInfo().validate();
        }
        if (innerGlobalRanNodeId() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property innerGlobalRanNodeId in model UeConnectionInfo4G"));
        } else {
            innerGlobalRanNodeId().validate();
        }
        if (ueState() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property ueState in model UeConnectionInfo4G"));
        }
        if (rrcEstablishmentCause() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property rrcEstablishmentCause in model UeConnectionInfo4G"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UeConnectionInfo4G.class);
}
