// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mobilenetwork.models.ProvisioningState;
import com.azure.resourcemanager.mobilenetwork.models.Snssai;
import java.io.IOException;

/**
 * Network slice properties.
 */
@Fluent
public final class SlicePropertiesFormat implements JsonSerializable<SlicePropertiesFormat> {
    /*
     * The provisioning state of the network slice resource.
     */
    private ProvisioningState provisioningState;

    /*
     * Single-network slice selection assistance information (S-NSSAI). Unique at the scope of a mobile network.
     */
    private Snssai snssai;

    /*
     * An optional description for this network slice.
     */
    private String description;

    /**
     * Creates an instance of SlicePropertiesFormat class.
     */
    public SlicePropertiesFormat() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the network slice resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the snssai property: Single-network slice selection assistance information (S-NSSAI). Unique at the scope of
     * a mobile network.
     * 
     * @return the snssai value.
     */
    public Snssai snssai() {
        return this.snssai;
    }

    /**
     * Set the snssai property: Single-network slice selection assistance information (S-NSSAI). Unique at the scope of
     * a mobile network.
     * 
     * @param snssai the snssai value to set.
     * @return the SlicePropertiesFormat object itself.
     */
    public SlicePropertiesFormat withSnssai(Snssai snssai) {
        this.snssai = snssai;
        return this;
    }

    /**
     * Get the description property: An optional description for this network slice.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: An optional description for this network slice.
     * 
     * @param description the description value to set.
     * @return the SlicePropertiesFormat object itself.
     */
    public SlicePropertiesFormat withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (snssai() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property snssai in model SlicePropertiesFormat"));
        } else {
            snssai().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SlicePropertiesFormat.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("snssai", this.snssai);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SlicePropertiesFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SlicePropertiesFormat if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SlicePropertiesFormat.
     */
    public static SlicePropertiesFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SlicePropertiesFormat deserializedSlicePropertiesFormat = new SlicePropertiesFormat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("snssai".equals(fieldName)) {
                    deserializedSlicePropertiesFormat.snssai = Snssai.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSlicePropertiesFormat.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedSlicePropertiesFormat.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSlicePropertiesFormat;
        });
    }
}
