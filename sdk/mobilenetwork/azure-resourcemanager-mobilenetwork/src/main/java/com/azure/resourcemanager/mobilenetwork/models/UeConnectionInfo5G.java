// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * UE Connection Info for 5G.
 */
@Fluent
public final class UeConnectionInfo5G implements JsonSerializable<UeConnectionInfo5G> {
    /*
     * UE Location Info properties
     */
    private UeLocationInfo locationInfo;

    /*
     * Global RAN Node ID
     */
    private GlobalRanNodeId globalRanNodeId;

    /*
     * Per-UE transport network layer association
     */
    private String perUeTnla;

    /*
     * The AMF UE NGAP ID
     */
    private long amfUeNgapId;

    /*
     * The RAN UE NGAP ID
     */
    private int ranUeNgapId;

    /*
     * Last Visited TAI
     */
    private String lastVisitedTai;

    /*
     * Allowed Network Slice Selection Assistance Information
     */
    private List<Snssai> allowedNssai;

    /*
     * State of the UE.
     */
    private UeState ueState;

    /*
     * Radio connection establishment cause
     */
    private RrcEstablishmentCause rrcEstablishmentCause;

    /*
     * The UE's usage setting
     */
    private UeUsageSetting ueUsageSetting;

    /*
     * The timestamp of last activity of UE (UTC).
     */
    private OffsetDateTime lastActivityTime;

    /**
     * Creates an instance of UeConnectionInfo5G class.
     */
    public UeConnectionInfo5G() {
    }

    /**
     * Get the locationInfo property: UE Location Info properties.
     * 
     * @return the locationInfo value.
     */
    public UeLocationInfo locationInfo() {
        return this.locationInfo;
    }

    /**
     * Set the locationInfo property: UE Location Info properties.
     * 
     * @param locationInfo the locationInfo value to set.
     * @return the UeConnectionInfo5G object itself.
     */
    public UeConnectionInfo5G withLocationInfo(UeLocationInfo locationInfo) {
        this.locationInfo = locationInfo;
        return this;
    }

    /**
     * Get the globalRanNodeId property: Global RAN Node ID.
     * 
     * @return the globalRanNodeId value.
     */
    public GlobalRanNodeId globalRanNodeId() {
        return this.globalRanNodeId;
    }

    /**
     * Set the globalRanNodeId property: Global RAN Node ID.
     * 
     * @param globalRanNodeId the globalRanNodeId value to set.
     * @return the UeConnectionInfo5G object itself.
     */
    public UeConnectionInfo5G withGlobalRanNodeId(GlobalRanNodeId globalRanNodeId) {
        this.globalRanNodeId = globalRanNodeId;
        return this;
    }

    /**
     * Get the perUeTnla property: Per-UE transport network layer association.
     * 
     * @return the perUeTnla value.
     */
    public String perUeTnla() {
        return this.perUeTnla;
    }

    /**
     * Set the perUeTnla property: Per-UE transport network layer association.
     * 
     * @param perUeTnla the perUeTnla value to set.
     * @return the UeConnectionInfo5G object itself.
     */
    public UeConnectionInfo5G withPerUeTnla(String perUeTnla) {
        this.perUeTnla = perUeTnla;
        return this;
    }

    /**
     * Get the amfUeNgapId property: The AMF UE NGAP ID.
     * 
     * @return the amfUeNgapId value.
     */
    public long amfUeNgapId() {
        return this.amfUeNgapId;
    }

    /**
     * Set the amfUeNgapId property: The AMF UE NGAP ID.
     * 
     * @param amfUeNgapId the amfUeNgapId value to set.
     * @return the UeConnectionInfo5G object itself.
     */
    public UeConnectionInfo5G withAmfUeNgapId(long amfUeNgapId) {
        this.amfUeNgapId = amfUeNgapId;
        return this;
    }

    /**
     * Get the ranUeNgapId property: The RAN UE NGAP ID.
     * 
     * @return the ranUeNgapId value.
     */
    public int ranUeNgapId() {
        return this.ranUeNgapId;
    }

    /**
     * Set the ranUeNgapId property: The RAN UE NGAP ID.
     * 
     * @param ranUeNgapId the ranUeNgapId value to set.
     * @return the UeConnectionInfo5G object itself.
     */
    public UeConnectionInfo5G withRanUeNgapId(int ranUeNgapId) {
        this.ranUeNgapId = ranUeNgapId;
        return this;
    }

    /**
     * Get the lastVisitedTai property: Last Visited TAI.
     * 
     * @return the lastVisitedTai value.
     */
    public String lastVisitedTai() {
        return this.lastVisitedTai;
    }

    /**
     * Set the lastVisitedTai property: Last Visited TAI.
     * 
     * @param lastVisitedTai the lastVisitedTai value to set.
     * @return the UeConnectionInfo5G object itself.
     */
    public UeConnectionInfo5G withLastVisitedTai(String lastVisitedTai) {
        this.lastVisitedTai = lastVisitedTai;
        return this;
    }

    /**
     * Get the allowedNssai property: Allowed Network Slice Selection Assistance Information.
     * 
     * @return the allowedNssai value.
     */
    public List<Snssai> allowedNssai() {
        return this.allowedNssai;
    }

    /**
     * Set the allowedNssai property: Allowed Network Slice Selection Assistance Information.
     * 
     * @param allowedNssai the allowedNssai value to set.
     * @return the UeConnectionInfo5G object itself.
     */
    public UeConnectionInfo5G withAllowedNssai(List<Snssai> allowedNssai) {
        this.allowedNssai = allowedNssai;
        return this;
    }

    /**
     * Get the ueState property: State of the UE.
     * 
     * @return the ueState value.
     */
    public UeState ueState() {
        return this.ueState;
    }

    /**
     * Set the ueState property: State of the UE.
     * 
     * @param ueState the ueState value to set.
     * @return the UeConnectionInfo5G object itself.
     */
    public UeConnectionInfo5G withUeState(UeState ueState) {
        this.ueState = ueState;
        return this;
    }

    /**
     * Get the rrcEstablishmentCause property: Radio connection establishment cause.
     * 
     * @return the rrcEstablishmentCause value.
     */
    public RrcEstablishmentCause rrcEstablishmentCause() {
        return this.rrcEstablishmentCause;
    }

    /**
     * Set the rrcEstablishmentCause property: Radio connection establishment cause.
     * 
     * @param rrcEstablishmentCause the rrcEstablishmentCause value to set.
     * @return the UeConnectionInfo5G object itself.
     */
    public UeConnectionInfo5G withRrcEstablishmentCause(RrcEstablishmentCause rrcEstablishmentCause) {
        this.rrcEstablishmentCause = rrcEstablishmentCause;
        return this;
    }

    /**
     * Get the ueUsageSetting property: The UE's usage setting.
     * 
     * @return the ueUsageSetting value.
     */
    public UeUsageSetting ueUsageSetting() {
        return this.ueUsageSetting;
    }

    /**
     * Set the ueUsageSetting property: The UE's usage setting.
     * 
     * @param ueUsageSetting the ueUsageSetting value to set.
     * @return the UeConnectionInfo5G object itself.
     */
    public UeConnectionInfo5G withUeUsageSetting(UeUsageSetting ueUsageSetting) {
        this.ueUsageSetting = ueUsageSetting;
        return this;
    }

    /**
     * Get the lastActivityTime property: The timestamp of last activity of UE (UTC).
     * 
     * @return the lastActivityTime value.
     */
    public OffsetDateTime lastActivityTime() {
        return this.lastActivityTime;
    }

    /**
     * Set the lastActivityTime property: The timestamp of last activity of UE (UTC).
     * 
     * @param lastActivityTime the lastActivityTime value to set.
     * @return the UeConnectionInfo5G object itself.
     */
    public UeConnectionInfo5G withLastActivityTime(OffsetDateTime lastActivityTime) {
        this.lastActivityTime = lastActivityTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (locationInfo() != null) {
            locationInfo().validate();
        }
        if (globalRanNodeId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property globalRanNodeId in model UeConnectionInfo5G"));
        } else {
            globalRanNodeId().validate();
        }
        if (allowedNssai() != null) {
            allowedNssai().forEach(e -> e.validate());
        }
        if (ueState() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property ueState in model UeConnectionInfo5G"));
        }
        if (rrcEstablishmentCause() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property rrcEstablishmentCause in model UeConnectionInfo5G"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UeConnectionInfo5G.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("globalRanNodeId", this.globalRanNodeId);
        jsonWriter.writeLongField("amfUeNgapId", this.amfUeNgapId);
        jsonWriter.writeIntField("ranUeNgapId", this.ranUeNgapId);
        jsonWriter.writeStringField("ueState", this.ueState == null ? null : this.ueState.toString());
        jsonWriter.writeStringField("rrcEstablishmentCause",
            this.rrcEstablishmentCause == null ? null : this.rrcEstablishmentCause.toString());
        jsonWriter.writeJsonField("locationInfo", this.locationInfo);
        jsonWriter.writeStringField("perUeTnla", this.perUeTnla);
        jsonWriter.writeStringField("lastVisitedTai", this.lastVisitedTai);
        jsonWriter.writeArrayField("allowedNssai", this.allowedNssai, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("ueUsageSetting",
            this.ueUsageSetting == null ? null : this.ueUsageSetting.toString());
        jsonWriter.writeStringField("lastActivityTime",
            this.lastActivityTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastActivityTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UeConnectionInfo5G from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UeConnectionInfo5G if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UeConnectionInfo5G.
     */
    public static UeConnectionInfo5G fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UeConnectionInfo5G deserializedUeConnectionInfo5G = new UeConnectionInfo5G();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("globalRanNodeId".equals(fieldName)) {
                    deserializedUeConnectionInfo5G.globalRanNodeId = GlobalRanNodeId.fromJson(reader);
                } else if ("amfUeNgapId".equals(fieldName)) {
                    deserializedUeConnectionInfo5G.amfUeNgapId = reader.getLong();
                } else if ("ranUeNgapId".equals(fieldName)) {
                    deserializedUeConnectionInfo5G.ranUeNgapId = reader.getInt();
                } else if ("ueState".equals(fieldName)) {
                    deserializedUeConnectionInfo5G.ueState = UeState.fromString(reader.getString());
                } else if ("rrcEstablishmentCause".equals(fieldName)) {
                    deserializedUeConnectionInfo5G.rrcEstablishmentCause
                        = RrcEstablishmentCause.fromString(reader.getString());
                } else if ("locationInfo".equals(fieldName)) {
                    deserializedUeConnectionInfo5G.locationInfo = UeLocationInfo.fromJson(reader);
                } else if ("perUeTnla".equals(fieldName)) {
                    deserializedUeConnectionInfo5G.perUeTnla = reader.getString();
                } else if ("lastVisitedTai".equals(fieldName)) {
                    deserializedUeConnectionInfo5G.lastVisitedTai = reader.getString();
                } else if ("allowedNssai".equals(fieldName)) {
                    List<Snssai> allowedNssai = reader.readArray(reader1 -> Snssai.fromJson(reader1));
                    deserializedUeConnectionInfo5G.allowedNssai = allowedNssai;
                } else if ("ueUsageSetting".equals(fieldName)) {
                    deserializedUeConnectionInfo5G.ueUsageSetting = UeUsageSetting.fromString(reader.getString());
                } else if ("lastActivityTime".equals(fieldName)) {
                    deserializedUeConnectionInfo5G.lastActivityTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUeConnectionInfo5G;
        });
    }
}
