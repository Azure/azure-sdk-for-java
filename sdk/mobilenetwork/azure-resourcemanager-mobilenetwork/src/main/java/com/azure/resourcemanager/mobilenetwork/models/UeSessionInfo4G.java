// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * UE Session Info for 4G.
 */
@Fluent
public final class UeSessionInfo4G implements JsonSerializable<UeSessionInfo4G> {
    /*
     * EPS bearer identifier
     */
    private int ebi;

    /*
     * Access point name
     */
    private String apn;

    /*
     * UE IP address
     */
    private UeIpAddress ueIpAddress;

    /*
     * Packet Data Network Type
     */
    private PdnType pdnType;

    /**
     * Creates an instance of UeSessionInfo4G class.
     */
    public UeSessionInfo4G() {
    }

    /**
     * Get the ebi property: EPS bearer identifier.
     * 
     * @return the ebi value.
     */
    public int ebi() {
        return this.ebi;
    }

    /**
     * Set the ebi property: EPS bearer identifier.
     * 
     * @param ebi the ebi value to set.
     * @return the UeSessionInfo4G object itself.
     */
    public UeSessionInfo4G withEbi(int ebi) {
        this.ebi = ebi;
        return this;
    }

    /**
     * Get the apn property: Access point name.
     * 
     * @return the apn value.
     */
    public String apn() {
        return this.apn;
    }

    /**
     * Set the apn property: Access point name.
     * 
     * @param apn the apn value to set.
     * @return the UeSessionInfo4G object itself.
     */
    public UeSessionInfo4G withApn(String apn) {
        this.apn = apn;
        return this;
    }

    /**
     * Get the ueIpAddress property: UE IP address.
     * 
     * @return the ueIpAddress value.
     */
    public UeIpAddress ueIpAddress() {
        return this.ueIpAddress;
    }

    /**
     * Set the ueIpAddress property: UE IP address.
     * 
     * @param ueIpAddress the ueIpAddress value to set.
     * @return the UeSessionInfo4G object itself.
     */
    public UeSessionInfo4G withUeIpAddress(UeIpAddress ueIpAddress) {
        this.ueIpAddress = ueIpAddress;
        return this;
    }

    /**
     * Get the pdnType property: Packet Data Network Type.
     * 
     * @return the pdnType value.
     */
    public PdnType pdnType() {
        return this.pdnType;
    }

    /**
     * Set the pdnType property: Packet Data Network Type.
     * 
     * @param pdnType the pdnType value to set.
     * @return the UeSessionInfo4G object itself.
     */
    public UeSessionInfo4G withPdnType(PdnType pdnType) {
        this.pdnType = pdnType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (apn() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property apn in model UeSessionInfo4G"));
        }
        if (ueIpAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property ueIpAddress in model UeSessionInfo4G"));
        } else {
            ueIpAddress().validate();
        }
        if (pdnType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property pdnType in model UeSessionInfo4G"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UeSessionInfo4G.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("ebi", this.ebi);
        jsonWriter.writeStringField("apn", this.apn);
        jsonWriter.writeJsonField("ueIpAddress", this.ueIpAddress);
        jsonWriter.writeStringField("pdnType", this.pdnType == null ? null : this.pdnType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UeSessionInfo4G from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UeSessionInfo4G if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UeSessionInfo4G.
     */
    public static UeSessionInfo4G fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UeSessionInfo4G deserializedUeSessionInfo4G = new UeSessionInfo4G();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ebi".equals(fieldName)) {
                    deserializedUeSessionInfo4G.ebi = reader.getInt();
                } else if ("apn".equals(fieldName)) {
                    deserializedUeSessionInfo4G.apn = reader.getString();
                } else if ("ueIpAddress".equals(fieldName)) {
                    deserializedUeSessionInfo4G.ueIpAddress = UeIpAddress.fromJson(reader);
                } else if ("pdnType".equals(fieldName)) {
                    deserializedUeSessionInfo4G.pdnType = PdnType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUeSessionInfo4G;
        });
    }
}
