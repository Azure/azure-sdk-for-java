// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An IPv4 route.
 */
@Fluent
public final class Ipv4Route implements JsonSerializable<Ipv4Route> {
    /*
     * The destination IPv4 prefix.
     */
    private String destination;

    /*
     * A list of next hops for the destination.
     */
    private List<Ipv4RouteNextHop> nextHops;

    /**
     * Creates an instance of Ipv4Route class.
     */
    public Ipv4Route() {
    }

    /**
     * Get the destination property: The destination IPv4 prefix.
     * 
     * @return the destination value.
     */
    public String destination() {
        return this.destination;
    }

    /**
     * Set the destination property: The destination IPv4 prefix.
     * 
     * @param destination the destination value to set.
     * @return the Ipv4Route object itself.
     */
    public Ipv4Route withDestination(String destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get the nextHops property: A list of next hops for the destination.
     * 
     * @return the nextHops value.
     */
    public List<Ipv4RouteNextHop> nextHops() {
        return this.nextHops;
    }

    /**
     * Set the nextHops property: A list of next hops for the destination.
     * 
     * @param nextHops the nextHops value to set.
     * @return the Ipv4Route object itself.
     */
    public Ipv4Route withNextHops(List<Ipv4RouteNextHop> nextHops) {
        this.nextHops = nextHops;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nextHops() != null) {
            nextHops().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("destination", this.destination);
        jsonWriter.writeArrayField("nextHops", this.nextHops, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Ipv4Route from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Ipv4Route if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Ipv4Route.
     */
    public static Ipv4Route fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Ipv4Route deserializedIpv4Route = new Ipv4Route();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("destination".equals(fieldName)) {
                    deserializedIpv4Route.destination = reader.getString();
                } else if ("nextHops".equals(fieldName)) {
                    List<Ipv4RouteNextHop> nextHops = reader.readArray(reader1 -> Ipv4RouteNextHop.fromJson(reader1));
                    deserializedIpv4Route.nextHops = nextHops;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpv4Route;
        });
    }
}
