// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * gNodeB identifier.
 */
@Fluent
public final class GNbId implements JsonSerializable<GNbId> {
    /*
     * The bitLength property.
     */
    private Integer bitLength;

    /*
     * The gNBValue property.
     */
    private String gNBValue;

    /**
     * Creates an instance of GNbId class.
     */
    public GNbId() {
    }

    /**
     * Get the bitLength property: The bitLength property.
     * 
     * @return the bitLength value.
     */
    public Integer bitLength() {
        return this.bitLength;
    }

    /**
     * Set the bitLength property: The bitLength property.
     * 
     * @param bitLength the bitLength value to set.
     * @return the GNbId object itself.
     */
    public GNbId withBitLength(Integer bitLength) {
        this.bitLength = bitLength;
        return this;
    }

    /**
     * Get the gNBValue property: The gNBValue property.
     * 
     * @return the gNBValue value.
     */
    public String gNBValue() {
        return this.gNBValue;
    }

    /**
     * Set the gNBValue property: The gNBValue property.
     * 
     * @param gNBValue the gNBValue value to set.
     * @return the GNbId object itself.
     */
    public GNbId withGNBValue(String gNBValue) {
        this.gNBValue = gNBValue;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("bitLength", this.bitLength);
        jsonWriter.writeStringField("gNBValue", this.gNBValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GNbId from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GNbId if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the GNbId.
     */
    public static GNbId fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GNbId deserializedGNbId = new GNbId();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bitLength".equals(fieldName)) {
                    deserializedGNbId.bitLength = reader.getNullable(JsonReader::getInt);
                } else if ("gNBValue".equals(fieldName)) {
                    deserializedGNbId.gNBValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGNbId;
        });
    }
}
