// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mobilenetwork.models.ConfigurationState;
import com.azure.resourcemanager.mobilenetwork.models.MobileNetworkResourceId;
import com.azure.resourcemanager.mobilenetwork.models.ProvisioningState;
import com.azure.resourcemanager.mobilenetwork.models.SimPolicyResourceId;
import com.azure.resourcemanager.mobilenetwork.models.SimStaticIpProperties;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Sim resource. */
@Fluent
public final class SimInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SimInner.class);

    /*
     * Sim Properties.
     */
    @JsonProperty(value = "properties", required = true)
    private SimPropertiesFormat innerProperties = new SimPropertiesFormat();

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData innerSystemData;

    /**
     * Get the innerProperties property: Sim Properties.
     *
     * @return the innerProperties value.
     */
    private SimPropertiesFormat innerProperties() {
        return this.innerProperties;
    }

//    /**
//     * Get the innerSystemData property: Metadata pertaining to creation and last modification of the resource.
//     *
//     * @return the innerSystemData value.
//     */
//    private SystemData innerSystemData() {
//        return this.innerSystemData;
//    }

    /** {@inheritDoc} */
    @Override
    public SimInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SimInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the sim resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the configurationState property: The configuration state of the sim resource - complete or incomplete.
     *
     * @return the configurationState value.
     */
    public ConfigurationState configurationState() {
        return this.innerProperties() == null ? null : this.innerProperties().configurationState();
    }

    /**
     * Get the internationalMobileSubscriberIdentity property: The International Mobile Subscriber Identity (IMSI) for
     * the sim.
     *
     * @return the internationalMobileSubscriberIdentity value.
     */
    public String internationalMobileSubscriberIdentity() {
        return this.innerProperties() == null ? null : this.innerProperties().internationalMobileSubscriberIdentity();
    }

    /**
     * Set the internationalMobileSubscriberIdentity property: The International Mobile Subscriber Identity (IMSI) for
     * the sim.
     *
     * @param internationalMobileSubscriberIdentity the internationalMobileSubscriberIdentity value to set.
     * @return the SimInner object itself.
     */
    public SimInner withInternationalMobileSubscriberIdentity(String internationalMobileSubscriberIdentity) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SimPropertiesFormat();
        }
        this.innerProperties().withInternationalMobileSubscriberIdentity(internationalMobileSubscriberIdentity);
        return this;
    }

    /**
     * Get the integratedCircuitCardIdentifier property: The Integrated Circuit Card ID (ICC Id) for the sim.
     *
     * @return the integratedCircuitCardIdentifier value.
     */
    public String integratedCircuitCardIdentifier() {
        return this.innerProperties() == null ? null : this.innerProperties().integratedCircuitCardIdentifier();
    }

    /**
     * Set the integratedCircuitCardIdentifier property: The Integrated Circuit Card ID (ICC Id) for the sim.
     *
     * @param integratedCircuitCardIdentifier the integratedCircuitCardIdentifier value to set.
     * @return the SimInner object itself.
     */
    public SimInner withIntegratedCircuitCardIdentifier(String integratedCircuitCardIdentifier) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SimPropertiesFormat();
        }
        this.innerProperties().withIntegratedCircuitCardIdentifier(integratedCircuitCardIdentifier);
        return this;
    }

    /**
     * Get the authenticationKey property: The ki value for the sim.
     *
     * @return the authenticationKey value.
     */
    public String authenticationKey() {
        return this.innerProperties() == null ? null : this.innerProperties().authenticationKey();
    }

    /**
     * Set the authenticationKey property: The ki value for the sim.
     *
     * @param authenticationKey the authenticationKey value to set.
     * @return the SimInner object itself.
     */
    public SimInner withAuthenticationKey(String authenticationKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SimPropertiesFormat();
        }
        this.innerProperties().withAuthenticationKey(authenticationKey);
        return this;
    }

    /**
     * Get the operatorKeyCode property: The Opc value for the sim.
     *
     * @return the operatorKeyCode value.
     */
    public String operatorKeyCode() {
        return this.innerProperties() == null ? null : this.innerProperties().operatorKeyCode();
    }

    /**
     * Set the operatorKeyCode property: The Opc value for the sim.
     *
     * @param operatorKeyCode the operatorKeyCode value to set.
     * @return the SimInner object itself.
     */
    public SimInner withOperatorKeyCode(String operatorKeyCode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SimPropertiesFormat();
        }
        this.innerProperties().withOperatorKeyCode(operatorKeyCode);
        return this;
    }

    /**
     * Get the mobileNetwork property: Mobile network that this sim belongs to.
     *
     * @return the mobileNetwork value.
     */
    public MobileNetworkResourceId mobileNetwork() {
        return this.innerProperties() == null ? null : this.innerProperties().mobileNetwork();
    }

    /**
     * Set the mobileNetwork property: Mobile network that this sim belongs to.
     *
     * @param mobileNetwork the mobileNetwork value to set.
     * @return the SimInner object itself.
     */
    public SimInner withMobileNetwork(MobileNetworkResourceId mobileNetwork) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SimPropertiesFormat();
        }
        this.innerProperties().withMobileNetwork(mobileNetwork);
        return this;
    }

    /**
     * Get the deviceType property: An optional free-form text field that can be used to record the device type this sim
     * is associated with, for example 'Video camera'. The Azure portal allows Sims to be grouped and filtered based on
     * this value.
     *
     * @return the deviceType value.
     */
    public String deviceType() {
        return this.innerProperties() == null ? null : this.innerProperties().deviceType();
    }

    /**
     * Set the deviceType property: An optional free-form text field that can be used to record the device type this sim
     * is associated with, for example 'Video camera'. The Azure portal allows Sims to be grouped and filtered based on
     * this value.
     *
     * @param deviceType the deviceType value to set.
     * @return the SimInner object itself.
     */
    public SimInner withDeviceType(String deviceType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SimPropertiesFormat();
        }
        this.innerProperties().withDeviceType(deviceType);
        return this;
    }

    /**
     * Get the simPolicy property: The simPolicy used by this sim.
     *
     * @return the simPolicy value.
     */
    public SimPolicyResourceId simPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().simPolicy();
    }

    /**
     * Set the simPolicy property: The simPolicy used by this sim.
     *
     * @param simPolicy the simPolicy value to set.
     * @return the SimInner object itself.
     */
    public SimInner withSimPolicy(SimPolicyResourceId simPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SimPropertiesFormat();
        }
        this.innerProperties().withSimPolicy(simPolicy);
        return this;
    }

    /**
     * Get the staticIpConfiguration property: A list of static IP addresses assigned to this sim. Each address is
     * assigned at a defined network scope, made up of {attached data network, slice}.
     *
     * @return the staticIpConfiguration value.
     */
    public List<SimStaticIpProperties> staticIpConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().staticIpConfiguration();
    }

    /**
     * Set the staticIpConfiguration property: A list of static IP addresses assigned to this sim. Each address is
     * assigned at a defined network scope, made up of {attached data network, slice}.
     *
     * @param staticIpConfiguration the staticIpConfiguration value to set.
     * @return the SimInner object itself.
     */
    public SimInner withStaticIpConfiguration(List<SimStaticIpProperties> staticIpConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SimPropertiesFormat();
        }
        this.innerProperties().withStaticIpConfiguration(staticIpConfiguration);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property innerProperties in model SimInner"));
        } else {
            innerProperties().validate();
        }
    }
}
