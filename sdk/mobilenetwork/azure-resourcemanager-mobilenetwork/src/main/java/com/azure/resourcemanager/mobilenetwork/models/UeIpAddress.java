// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * UE IP address.
 */
@Fluent
public final class UeIpAddress implements JsonSerializable<UeIpAddress> {
    /*
     * IPv4 address.
     */
    private String ipV4Addr;

    /**
     * Creates an instance of UeIpAddress class.
     */
    public UeIpAddress() {
    }

    /**
     * Get the ipV4Addr property: IPv4 address.
     * 
     * @return the ipV4Addr value.
     */
    public String ipV4Addr() {
        return this.ipV4Addr;
    }

    /**
     * Set the ipV4Addr property: IPv4 address.
     * 
     * @param ipV4Addr the ipV4Addr value to set.
     * @return the UeIpAddress object itself.
     */
    public UeIpAddress withIpV4Addr(String ipV4Addr) {
        this.ipV4Addr = ipV4Addr;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ipV4Addr", this.ipV4Addr);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UeIpAddress from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UeIpAddress if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UeIpAddress.
     */
    public static UeIpAddress fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UeIpAddress deserializedUeIpAddress = new UeIpAddress();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipV4Addr".equals(fieldName)) {
                    deserializedUeIpAddress.ipV4Addr = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUeIpAddress;
        });
    }
}
