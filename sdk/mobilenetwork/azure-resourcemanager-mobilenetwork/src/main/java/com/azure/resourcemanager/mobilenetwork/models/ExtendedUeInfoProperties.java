// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Extended UE Information Properties.
 */
@Fluent
public class ExtendedUeInfoProperties implements JsonSerializable<ExtendedUeInfoProperties> {
    /*
     * RAT Type
     */
    private RatType ratType = RatType.fromString("ExtendedUeInfoProperties");

    /*
     * The timestamp of last UE info read from the packet core (UTC).
     */
    private OffsetDateTime lastReadAt;

    /**
     * Creates an instance of ExtendedUeInfoProperties class.
     */
    public ExtendedUeInfoProperties() {
    }

    /**
     * Get the ratType property: RAT Type.
     * 
     * @return the ratType value.
     */
    public RatType ratType() {
        return this.ratType;
    }

    /**
     * Get the lastReadAt property: The timestamp of last UE info read from the packet core (UTC).
     * 
     * @return the lastReadAt value.
     */
    public OffsetDateTime lastReadAt() {
        return this.lastReadAt;
    }

    /**
     * Set the lastReadAt property: The timestamp of last UE info read from the packet core (UTC).
     * 
     * @param lastReadAt the lastReadAt value to set.
     * @return the ExtendedUeInfoProperties object itself.
     */
    public ExtendedUeInfoProperties withLastReadAt(OffsetDateTime lastReadAt) {
        this.lastReadAt = lastReadAt;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ratType", this.ratType == null ? null : this.ratType.toString());
        jsonWriter.writeStringField("lastReadAt",
            this.lastReadAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastReadAt));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExtendedUeInfoProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExtendedUeInfoProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExtendedUeInfoProperties.
     */
    public static ExtendedUeInfoProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("ratType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("5G".equals(discriminatorValue)) {
                    return UeInfo5G.fromJson(readerToUse.reset());
                } else if ("4G".equals(discriminatorValue)) {
                    return UeInfo4G.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static ExtendedUeInfoProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExtendedUeInfoProperties deserializedExtendedUeInfoProperties = new ExtendedUeInfoProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ratType".equals(fieldName)) {
                    deserializedExtendedUeInfoProperties.ratType = RatType.fromString(reader.getString());
                } else if ("lastReadAt".equals(fieldName)) {
                    deserializedExtendedUeInfoProperties.lastReadAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExtendedUeInfoProperties;
        });
    }
}
