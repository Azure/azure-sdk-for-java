// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.mobilenetwork.fluent.ExtendedUeInformationsClient;
import com.azure.resourcemanager.mobilenetwork.fluent.models.ExtendedUeInfoInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ExtendedUeInformationsClient.
 */
public final class ExtendedUeInformationsClientImpl implements ExtendedUeInformationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ExtendedUeInformationsService service;

    /**
     * The service client containing this operation class.
     */
    private final MobileNetworkManagementClientImpl client;

    /**
     * Initializes an instance of ExtendedUeInformationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ExtendedUeInformationsClientImpl(MobileNetworkManagementClientImpl client) {
        this.service = RestProxy.create(ExtendedUeInformationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MobileNetworkManagementClientExtendedUeInformations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MobileNetworkManagem")
    public interface ExtendedUeInformationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/ues/{ueId}/extendedInformation/default")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtendedUeInfoInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("api-version") String apiVersion,
            @PathParam("packetCoreControlPlaneName") String packetCoreControlPlaneName, @PathParam("ueId") String ueId,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets extended information about the specified UE from the packet core.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param ueId IMSI of a UE.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extended information about the specified UE from the packet core along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtendedUeInfoInner>> getWithResponseAsync(String resourceGroupName,
        String packetCoreControlPlaneName, String ueId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (packetCoreControlPlaneName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter packetCoreControlPlaneName is required and cannot be null."));
        }
        if (ueId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ueId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, this.client.getApiVersion(), packetCoreControlPlaneName, ueId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets extended information about the specified UE from the packet core.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param ueId IMSI of a UE.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extended information about the specified UE from the packet core along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtendedUeInfoInner>> getWithResponseAsync(String resourceGroupName,
        String packetCoreControlPlaneName, String ueId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (packetCoreControlPlaneName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter packetCoreControlPlaneName is required and cannot be null."));
        }
        if (ueId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ueId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            this.client.getApiVersion(), packetCoreControlPlaneName, ueId, accept, context);
    }

    /**
     * Gets extended information about the specified UE from the packet core.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param ueId IMSI of a UE.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extended information about the specified UE from the packet core on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExtendedUeInfoInner> getAsync(String resourceGroupName, String packetCoreControlPlaneName,
        String ueId) {
        return getWithResponseAsync(resourceGroupName, packetCoreControlPlaneName, ueId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets extended information about the specified UE from the packet core.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param ueId IMSI of a UE.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extended information about the specified UE from the packet core along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExtendedUeInfoInner> getWithResponse(String resourceGroupName, String packetCoreControlPlaneName,
        String ueId, Context context) {
        return getWithResponseAsync(resourceGroupName, packetCoreControlPlaneName, ueId, context).block();
    }

    /**
     * Gets extended information about the specified UE from the packet core.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param packetCoreControlPlaneName The name of the packet core control plane.
     * @param ueId IMSI of a UE.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extended information about the specified UE from the packet core.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExtendedUeInfoInner get(String resourceGroupName, String packetCoreControlPlaneName, String ueId) {
        return getWithResponse(resourceGroupName, packetCoreControlPlaneName, ueId, Context.NONE).getValue();
    }
}
