// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The UserConsentConfiguration model.
 */
@Fluent
public final class UserConsentConfiguration implements JsonSerializable<UserConsentConfiguration> {
    /*
     * Allow Microsoft to access non-PII telemetry information from the packet core.
     */
    private Boolean allowSupportTelemetryAccess;

    /**
     * Creates an instance of UserConsentConfiguration class.
     */
    public UserConsentConfiguration() {
    }

    /**
     * Get the allowSupportTelemetryAccess property: Allow Microsoft to access non-PII telemetry information from the
     * packet core.
     * 
     * @return the allowSupportTelemetryAccess value.
     */
    public Boolean allowSupportTelemetryAccess() {
        return this.allowSupportTelemetryAccess;
    }

    /**
     * Set the allowSupportTelemetryAccess property: Allow Microsoft to access non-PII telemetry information from the
     * packet core.
     * 
     * @param allowSupportTelemetryAccess the allowSupportTelemetryAccess value to set.
     * @return the UserConsentConfiguration object itself.
     */
    public UserConsentConfiguration withAllowSupportTelemetryAccess(Boolean allowSupportTelemetryAccess) {
        this.allowSupportTelemetryAccess = allowSupportTelemetryAccess;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("allowSupportTelemetryAccess", this.allowSupportTelemetryAccess);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserConsentConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserConsentConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UserConsentConfiguration.
     */
    public static UserConsentConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserConsentConfiguration deserializedUserConsentConfiguration = new UserConsentConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowSupportTelemetryAccess".equals(fieldName)) {
                    deserializedUserConsentConfiguration.allowSupportTelemetryAccess
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserConsentConfiguration;
        });
    }
}
