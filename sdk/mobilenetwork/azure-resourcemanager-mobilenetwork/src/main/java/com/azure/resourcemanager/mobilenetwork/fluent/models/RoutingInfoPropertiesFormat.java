// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mobilenetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mobilenetwork.models.Ipv4Route;
import com.azure.resourcemanager.mobilenetwork.models.UserPlaneDataRoutesItem;
import java.io.IOException;
import java.util.List;

/**
 * Routing information properties.
 */
@Fluent
public final class RoutingInfoPropertiesFormat implements JsonSerializable<RoutingInfoPropertiesFormat> {
    /*
     * A list of IPv4 routes.
     */
    private List<Ipv4Route> controlPlaneAccessRoutes;

    /*
     * A list of IPv4 routes.
     */
    private List<Ipv4Route> userPlaneAccessRoutes;

    /*
     * A list of attached data networks and their IPv4 routes.
     */
    private List<UserPlaneDataRoutesItem> userPlaneDataRoutes;

    /**
     * Creates an instance of RoutingInfoPropertiesFormat class.
     */
    public RoutingInfoPropertiesFormat() {
    }

    /**
     * Get the controlPlaneAccessRoutes property: A list of IPv4 routes.
     * 
     * @return the controlPlaneAccessRoutes value.
     */
    public List<Ipv4Route> controlPlaneAccessRoutes() {
        return this.controlPlaneAccessRoutes;
    }

    /**
     * Set the controlPlaneAccessRoutes property: A list of IPv4 routes.
     * 
     * @param controlPlaneAccessRoutes the controlPlaneAccessRoutes value to set.
     * @return the RoutingInfoPropertiesFormat object itself.
     */
    public RoutingInfoPropertiesFormat withControlPlaneAccessRoutes(List<Ipv4Route> controlPlaneAccessRoutes) {
        this.controlPlaneAccessRoutes = controlPlaneAccessRoutes;
        return this;
    }

    /**
     * Get the userPlaneAccessRoutes property: A list of IPv4 routes.
     * 
     * @return the userPlaneAccessRoutes value.
     */
    public List<Ipv4Route> userPlaneAccessRoutes() {
        return this.userPlaneAccessRoutes;
    }

    /**
     * Set the userPlaneAccessRoutes property: A list of IPv4 routes.
     * 
     * @param userPlaneAccessRoutes the userPlaneAccessRoutes value to set.
     * @return the RoutingInfoPropertiesFormat object itself.
     */
    public RoutingInfoPropertiesFormat withUserPlaneAccessRoutes(List<Ipv4Route> userPlaneAccessRoutes) {
        this.userPlaneAccessRoutes = userPlaneAccessRoutes;
        return this;
    }

    /**
     * Get the userPlaneDataRoutes property: A list of attached data networks and their IPv4 routes.
     * 
     * @return the userPlaneDataRoutes value.
     */
    public List<UserPlaneDataRoutesItem> userPlaneDataRoutes() {
        return this.userPlaneDataRoutes;
    }

    /**
     * Set the userPlaneDataRoutes property: A list of attached data networks and their IPv4 routes.
     * 
     * @param userPlaneDataRoutes the userPlaneDataRoutes value to set.
     * @return the RoutingInfoPropertiesFormat object itself.
     */
    public RoutingInfoPropertiesFormat withUserPlaneDataRoutes(List<UserPlaneDataRoutesItem> userPlaneDataRoutes) {
        this.userPlaneDataRoutes = userPlaneDataRoutes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (controlPlaneAccessRoutes() != null) {
            controlPlaneAccessRoutes().forEach(e -> e.validate());
        }
        if (userPlaneAccessRoutes() != null) {
            userPlaneAccessRoutes().forEach(e -> e.validate());
        }
        if (userPlaneDataRoutes() != null) {
            userPlaneDataRoutes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("controlPlaneAccessRoutes", this.controlPlaneAccessRoutes,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("userPlaneAccessRoutes", this.userPlaneAccessRoutes,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("userPlaneDataRoutes", this.userPlaneDataRoutes,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoutingInfoPropertiesFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoutingInfoPropertiesFormat if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RoutingInfoPropertiesFormat.
     */
    public static RoutingInfoPropertiesFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoutingInfoPropertiesFormat deserializedRoutingInfoPropertiesFormat = new RoutingInfoPropertiesFormat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("controlPlaneAccessRoutes".equals(fieldName)) {
                    List<Ipv4Route> controlPlaneAccessRoutes = reader.readArray(reader1 -> Ipv4Route.fromJson(reader1));
                    deserializedRoutingInfoPropertiesFormat.controlPlaneAccessRoutes = controlPlaneAccessRoutes;
                } else if ("userPlaneAccessRoutes".equals(fieldName)) {
                    List<Ipv4Route> userPlaneAccessRoutes = reader.readArray(reader1 -> Ipv4Route.fromJson(reader1));
                    deserializedRoutingInfoPropertiesFormat.userPlaneAccessRoutes = userPlaneAccessRoutes;
                } else if ("userPlaneDataRoutes".equals(fieldName)) {
                    List<UserPlaneDataRoutesItem> userPlaneDataRoutes
                        = reader.readArray(reader1 -> UserPlaneDataRoutesItem.fromJson(reader1));
                    deserializedRoutingInfoPropertiesFormat.userPlaneDataRoutes = userPlaneDataRoutes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoutingInfoPropertiesFormat;
        });
    }
}
