// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deploymentmanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** The resource representation of a service topology. */
@JsonFlatten
@Fluent
public class ServiceTopologyResourceInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServiceTopologyResourceInner.class);

    /*
     * The resource Id of the artifact source that contains the artifacts that
     * can be referenced in the service units.
     */
    @JsonProperty(value = "properties.artifactSourceId")
    private String artifactSourceId;

    /**
     * Get the artifactSourceId property: The resource Id of the artifact source that contains the artifacts that can be
     * referenced in the service units.
     *
     * @return the artifactSourceId value.
     */
    public String artifactSourceId() {
        return this.artifactSourceId;
    }

    /**
     * Set the artifactSourceId property: The resource Id of the artifact source that contains the artifacts that can be
     * referenced in the service units.
     *
     * @param artifactSourceId the artifactSourceId value to set.
     * @return the ServiceTopologyResourceInner object itself.
     */
    public ServiceTopologyResourceInner withArtifactSourceId(String artifactSourceId) {
        this.artifactSourceId = artifactSourceId;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ServiceTopologyResourceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ServiceTopologyResourceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
