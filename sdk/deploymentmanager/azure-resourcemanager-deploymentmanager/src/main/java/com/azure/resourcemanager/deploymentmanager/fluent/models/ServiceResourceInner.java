// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deploymentmanager.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** The resource representation of a service in a service topology. */
@JsonFlatten
@Fluent
public class ServiceResourceInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServiceResourceInner.class);

    /*
     * The Azure location to which the resources in the service belong to or
     * should be deployed to.
     */
    @JsonProperty(value = "properties.targetLocation", required = true)
    private String targetLocation;

    /*
     * The subscription to which the resources in the service belong to or
     * should be deployed to.
     */
    @JsonProperty(value = "properties.targetSubscriptionId", required = true)
    private String targetSubscriptionId;

    /**
     * Get the targetLocation property: The Azure location to which the resources in the service belong to or should be
     * deployed to.
     *
     * @return the targetLocation value.
     */
    public String targetLocation() {
        return this.targetLocation;
    }

    /**
     * Set the targetLocation property: The Azure location to which the resources in the service belong to or should be
     * deployed to.
     *
     * @param targetLocation the targetLocation value to set.
     * @return the ServiceResourceInner object itself.
     */
    public ServiceResourceInner withTargetLocation(String targetLocation) {
        this.targetLocation = targetLocation;
        return this;
    }

    /**
     * Get the targetSubscriptionId property: The subscription to which the resources in the service belong to or should
     * be deployed to.
     *
     * @return the targetSubscriptionId value.
     */
    public String targetSubscriptionId() {
        return this.targetSubscriptionId;
    }

    /**
     * Set the targetSubscriptionId property: The subscription to which the resources in the service belong to or should
     * be deployed to.
     *
     * @param targetSubscriptionId the targetSubscriptionId value to set.
     * @return the ServiceResourceInner object itself.
     */
    public ServiceResourceInner withTargetSubscriptionId(String targetSubscriptionId) {
        this.targetSubscriptionId = targetSubscriptionId;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ServiceResourceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ServiceResourceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetLocation() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property targetLocation in model ServiceResourceInner"));
        }
        if (targetSubscriptionId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property targetSubscriptionId in model ServiceResourceInner"));
        }
    }
}
