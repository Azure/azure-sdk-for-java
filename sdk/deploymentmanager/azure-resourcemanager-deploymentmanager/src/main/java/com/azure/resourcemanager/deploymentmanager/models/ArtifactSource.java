// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deploymentmanager.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.deploymentmanager.fluent.models.ArtifactSourceInner;
import java.util.Map;

/** An immutable client-side representation of ArtifactSource. */
public interface ArtifactSource {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the sourceType property: The type of artifact source used.
     *
     * @return the sourceType value.
     */
    String sourceType();

    /**
     * Gets the artifactRoot property: The path from the location that the 'authentication' property [say, a SAS URI to
     * the blob container] refers to, to the location of the artifacts. This can be used to differentiate different
     * versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced
     * by the authentication property concatenated with this optional artifactRoot path forms the artifact source
     * location where the artifacts are expected to be found.
     *
     * @return the artifactRoot value.
     */
    String artifactRoot();

    /**
     * Gets the authentication property: The authentication method to use to access the artifact source.
     *
     * @return the authentication value.
     */
    Authentication authentication();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.deploymentmanager.fluent.models.ArtifactSourceInner object.
     *
     * @return the inner object.
     */
    ArtifactSourceInner innerModel();

    /** The entirety of the ArtifactSource definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The ArtifactSource definition stages. */
    interface DefinitionStages {
        /** The first stage of the ArtifactSource definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the ArtifactSource definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the ArtifactSource definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the ArtifactSource definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithSourceType,
                DefinitionStages.WithArtifactRoot,
                DefinitionStages.WithAuthentication {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ArtifactSource create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ArtifactSource create(Context context);
        }
        /** The stage of the ArtifactSource definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the ArtifactSource definition allowing to specify sourceType. */
        interface WithSourceType {
            /**
             * Specifies the sourceType property: The type of artifact source used..
             *
             * @param sourceType The type of artifact source used.
             * @return the next definition stage.
             */
            WithCreate withSourceType(String sourceType);
        }
        /** The stage of the ArtifactSource definition allowing to specify artifactRoot. */
        interface WithArtifactRoot {
            /**
             * Specifies the artifactRoot property: The path from the location that the 'authentication' property [say,
             * a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to
             * differentiate different versions of the artifacts. Or, different types of artifacts like binaries or
             * templates. The location referenced by the authentication property concatenated with this optional
             * artifactRoot path forms the artifact source location where the artifacts are expected to be found..
             *
             * @param artifactRoot The path from the location that the 'authentication' property [say, a SAS URI to the
             *     blob container] refers to, to the location of the artifacts. This can be used to differentiate
             *     different versions of the artifacts. Or, different types of artifacts like binaries or templates. The
             *     location referenced by the authentication property concatenated with this optional artifactRoot path
             *     forms the artifact source location where the artifacts are expected to be found.
             * @return the next definition stage.
             */
            WithCreate withArtifactRoot(String artifactRoot);
        }
        /** The stage of the ArtifactSource definition allowing to specify authentication. */
        interface WithAuthentication {
            /**
             * Specifies the authentication property: The authentication method to use to access the artifact source..
             *
             * @param authentication The authentication method to use to access the artifact source.
             * @return the next definition stage.
             */
            WithCreate withAuthentication(Authentication authentication);
        }
    }
    /**
     * Begins update for the ArtifactSource resource.
     *
     * @return the stage of resource update.
     */
    ArtifactSource.Update update();

    /** The template for ArtifactSource update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithSourceType,
            UpdateStages.WithArtifactRoot,
            UpdateStages.WithAuthentication {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ArtifactSource apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ArtifactSource apply(Context context);
    }
    /** The ArtifactSource update stages. */
    interface UpdateStages {
        /** The stage of the ArtifactSource update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the ArtifactSource update allowing to specify sourceType. */
        interface WithSourceType {
            /**
             * Specifies the sourceType property: The type of artifact source used..
             *
             * @param sourceType The type of artifact source used.
             * @return the next definition stage.
             */
            Update withSourceType(String sourceType);
        }
        /** The stage of the ArtifactSource update allowing to specify artifactRoot. */
        interface WithArtifactRoot {
            /**
             * Specifies the artifactRoot property: The path from the location that the 'authentication' property [say,
             * a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to
             * differentiate different versions of the artifacts. Or, different types of artifacts like binaries or
             * templates. The location referenced by the authentication property concatenated with this optional
             * artifactRoot path forms the artifact source location where the artifacts are expected to be found..
             *
             * @param artifactRoot The path from the location that the 'authentication' property [say, a SAS URI to the
             *     blob container] refers to, to the location of the artifacts. This can be used to differentiate
             *     different versions of the artifacts. Or, different types of artifacts like binaries or templates. The
             *     location referenced by the authentication property concatenated with this optional artifactRoot path
             *     forms the artifact source location where the artifacts are expected to be found.
             * @return the next definition stage.
             */
            Update withArtifactRoot(String artifactRoot);
        }
        /** The stage of the ArtifactSource update allowing to specify authentication. */
        interface WithAuthentication {
            /**
             * Specifies the authentication property: The authentication method to use to access the artifact source..
             *
             * @param authentication The authentication method to use to access the artifact source.
             * @return the next definition stage.
             */
            Update withAuthentication(Authentication authentication);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ArtifactSource refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ArtifactSource refresh(Context context);
}
