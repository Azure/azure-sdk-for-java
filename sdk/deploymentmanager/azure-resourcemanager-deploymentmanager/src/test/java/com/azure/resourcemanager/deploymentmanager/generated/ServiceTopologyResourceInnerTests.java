// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deploymentmanager.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deploymentmanager.fluent.models.ServiceTopologyResourceInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServiceTopologyResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceTopologyResourceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"artifactSourceId\":\"mhquvgjxp\"},\"location\":\"bczmeh\",\"tags\":{\"phrupidgsybbejhp\":\"opb\",\"ioq\":\"oycmsxaobhdxbmt\",\"p\":\"zehtbmu\",\"hwlrx\":\"wnoi\"},\"id\":\"bqsoqijg\",\"name\":\"dmbpazlobcufpdz\",\"type\":\"rbt\"}")
                .toObject(ServiceTopologyResourceInner.class);
        Assertions.assertEquals("bczmeh", model.location());
        Assertions.assertEquals("opb", model.tags().get("phrupidgsybbejhp"));
        Assertions.assertEquals("mhquvgjxp", model.artifactSourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceTopologyResourceInner model =
            new ServiceTopologyResourceInner()
                .withLocation("bczmeh")
                .withTags(mapOf("phrupidgsybbejhp", "opb", "ioq", "oycmsxaobhdxbmt", "p", "zehtbmu", "hwlrx", "wnoi"))
                .withArtifactSourceId("mhquvgjxp");
        model = BinaryData.fromObject(model).toObject(ServiceTopologyResourceInner.class);
        Assertions.assertEquals("bczmeh", model.location());
        Assertions.assertEquals("opb", model.tags().get("phrupidgsybbejhp"));
        Assertions.assertEquals("mhquvgjxp", model.artifactSourceId());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
