// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deploymentmanager.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.deploymentmanager.DeploymentManager;
import com.azure.resourcemanager.deploymentmanager.models.Rollout;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class RolloutsCancelWithResponseMockTests {
    @Test
    public void testCancelWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"identity\":{\"type\":\"ljphuopxodl\",\"identityIds\":[\"ynt\",\"rz\",\"hleosjsw\"]},\"properties\":{\"status\":\"slyzrpzbchckqq\",\"totalRetryAttempts\":893832741,\"operationInfo\":{\"retryAttempt\":1257157038,\"skipSucceededOnRetry\":true,\"startTime\":\"2021-10-31T06:14:16Z\",\"endTime\":\"2021-10-09T00:37:48Z\"},\"services\":[],\"buildVersion\":\"edyatrwyhqmibzyh\",\"artifactSourceId\":\"tsmypyynpcdp\",\"targetServiceTopologyId\":\"mnzgmwznmabi\",\"stepGroups\":[]},\"location\":\"sorgj\",\"tags\":{\"kdmtncvokotll\":\"ldtlwwr\",\"h\":\"d\"},\"id\":\"syocogjltdtbnnha\",\"name\":\"oocrkvcikhnv\",\"type\":\"amqgxqquezikyw\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DeploymentManager manager =
            DeploymentManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Rollout response =
            manager
                .rollouts()
                .cancelWithResponse("hqkvpuvksgplsak", "ynfs", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("sorgj", response.location());
        Assertions.assertEquals("ldtlwwr", response.tags().get("kdmtncvokotll"));
        Assertions.assertEquals("ljphuopxodl", response.identity().type());
        Assertions.assertEquals("ynt", response.identity().identityIds().get(0));
        Assertions.assertEquals("edyatrwyhqmibzyh", response.buildVersion());
        Assertions.assertEquals("tsmypyynpcdp", response.artifactSourceId());
        Assertions.assertEquals("mnzgmwznmabi", response.targetServiceTopologyId());
    }
}
