/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.deploymentmanager.v2019-11-01-preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.deploymentmanager.v2019-11-01-preview.ServiceUnits;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.deploymentmanager.v2019-11-01-preview.ServiceUnitResource;

class ServiceUnitsImpl extends WrapperImpl<ServiceUnitsInner> implements ServiceUnits {
    private final DeploymentManagerManager manager;

    ServiceUnitsImpl(DeploymentManagerManager manager) {
        super(manager.inner().serviceUnits());
        this.manager = manager;
    }

    public DeploymentManagerManager manager() {
        return this.manager;
    }

    @Override
    public ServiceUnitResourceImpl define(String name) {
        return wrapModel(name);
    }

    private ServiceUnitResourceImpl wrapModel(ServiceUnitResourceInner inner) {
        return  new ServiceUnitResourceImpl(inner, manager());
    }

    private ServiceUnitResourceImpl wrapModel(String name) {
        return new ServiceUnitResourceImpl(name, this.manager());
    }

    @Override
    public Observable<ServiceUnitResource> listAsync(String resourceGroupName, String serviceTopologyName, String serviceName) {
        ServiceUnitsInner client = this.inner();
        return client.listAsync(resourceGroupName, serviceTopologyName, serviceName)
        .flatMap(new Func1<List<ServiceUnitResourceInner>, Observable<ServiceUnitResourceInner>>() {
            @Override
            public Observable<ServiceUnitResourceInner> call(List<ServiceUnitResourceInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<ServiceUnitResourceInner, ServiceUnitResource>() {
            @Override
            public ServiceUnitResource call(ServiceUnitResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<ServiceUnitResource> getAsync(String resourceGroupName, String serviceTopologyName, String serviceName, String serviceUnitName) {
        ServiceUnitsInner client = this.inner();
        return client.getAsync(resourceGroupName, serviceTopologyName, serviceName, serviceUnitName)
        .flatMap(new Func1<ServiceUnitResourceInner, Observable<ServiceUnitResource>>() {
            @Override
            public Observable<ServiceUnitResource> call(ServiceUnitResourceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ServiceUnitResource)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serviceTopologyName, String serviceName, String serviceUnitName) {
        ServiceUnitsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serviceTopologyName, serviceName, serviceUnitName).toCompletable();
    }

}
