/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.logic.v2016_06_01;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The integration account RosettaNet ProcessConfiguration activity behavior.
 */
public class RosettaNetPipActivityBehavior {
    /**
     * The value indicating whether authorization is required.
     */
    @JsonProperty(value = "isAuthorizationRequired", required = true)
    private boolean isAuthorizationRequired;

    /**
     * The persistent confidentiality encryption scope. Possible values
     * include: 'NotSpecified', 'None', 'Payload', 'PayloadContainer'.
     */
    @JsonProperty(value = "persistentConfidentialityScope", required = true)
    private RosettaNetPipConfidentialityScope persistentConfidentialityScope;

    /**
     * The value indicating whether secured transport is required.
     */
    @JsonProperty(value = "isSecuredTransportRequired", required = true)
    private boolean isSecuredTransportRequired;

    /**
     * The value indicating whether the RosettaNet PIP is used for a single
     * action. Possible values include: 'NotSpecified', 'SingleAction',
     * 'DoubleAction'.
     */
    @JsonProperty(value = "actionType", required = true)
    private RosettaNetActionType actionType;

    /**
     * The value indicating whether the RosettaNet PIP communication is
     * synchronous. Possible values include: 'NotSpecified', 'Sync', 'Async'.
     */
    @JsonProperty(value = "responseType", required = true)
    private RosettaNetResponseType responseType;

    /**
     * The value indicating whether non-repudiation is for origin and content.
     */
    @JsonProperty(value = "nonRepudiationOfOriginAndContent", required = true)
    private boolean nonRepudiationOfOriginAndContent;

    /**
     * The value indicating retry count.
     */
    @JsonProperty(value = "retryCount", required = true)
    private int retryCount;

    /**
     * The time to perform in seconds.
     */
    @JsonProperty(value = "timeToPerformInSeconds", required = true)
    private int timeToPerformInSeconds;

    /**
     * Get the value indicating whether authorization is required.
     *
     * @return the isAuthorizationRequired value
     */
    public boolean isAuthorizationRequired() {
        return this.isAuthorizationRequired;
    }

    /**
     * Set the value indicating whether authorization is required.
     *
     * @param isAuthorizationRequired the isAuthorizationRequired value to set
     * @return the RosettaNetPipActivityBehavior object itself.
     */
    public RosettaNetPipActivityBehavior withIsAuthorizationRequired(boolean isAuthorizationRequired) {
        this.isAuthorizationRequired = isAuthorizationRequired;
        return this;
    }

    /**
     * Get the persistent confidentiality encryption scope. Possible values include: 'NotSpecified', 'None', 'Payload', 'PayloadContainer'.
     *
     * @return the persistentConfidentialityScope value
     */
    public RosettaNetPipConfidentialityScope persistentConfidentialityScope() {
        return this.persistentConfidentialityScope;
    }

    /**
     * Set the persistent confidentiality encryption scope. Possible values include: 'NotSpecified', 'None', 'Payload', 'PayloadContainer'.
     *
     * @param persistentConfidentialityScope the persistentConfidentialityScope value to set
     * @return the RosettaNetPipActivityBehavior object itself.
     */
    public RosettaNetPipActivityBehavior withPersistentConfidentialityScope(RosettaNetPipConfidentialityScope persistentConfidentialityScope) {
        this.persistentConfidentialityScope = persistentConfidentialityScope;
        return this;
    }

    /**
     * Get the value indicating whether secured transport is required.
     *
     * @return the isSecuredTransportRequired value
     */
    public boolean isSecuredTransportRequired() {
        return this.isSecuredTransportRequired;
    }

    /**
     * Set the value indicating whether secured transport is required.
     *
     * @param isSecuredTransportRequired the isSecuredTransportRequired value to set
     * @return the RosettaNetPipActivityBehavior object itself.
     */
    public RosettaNetPipActivityBehavior withIsSecuredTransportRequired(boolean isSecuredTransportRequired) {
        this.isSecuredTransportRequired = isSecuredTransportRequired;
        return this;
    }

    /**
     * Get the value indicating whether the RosettaNet PIP is used for a single action. Possible values include: 'NotSpecified', 'SingleAction', 'DoubleAction'.
     *
     * @return the actionType value
     */
    public RosettaNetActionType actionType() {
        return this.actionType;
    }

    /**
     * Set the value indicating whether the RosettaNet PIP is used for a single action. Possible values include: 'NotSpecified', 'SingleAction', 'DoubleAction'.
     *
     * @param actionType the actionType value to set
     * @return the RosettaNetPipActivityBehavior object itself.
     */
    public RosettaNetPipActivityBehavior withActionType(RosettaNetActionType actionType) {
        this.actionType = actionType;
        return this;
    }

    /**
     * Get the value indicating whether the RosettaNet PIP communication is synchronous. Possible values include: 'NotSpecified', 'Sync', 'Async'.
     *
     * @return the responseType value
     */
    public RosettaNetResponseType responseType() {
        return this.responseType;
    }

    /**
     * Set the value indicating whether the RosettaNet PIP communication is synchronous. Possible values include: 'NotSpecified', 'Sync', 'Async'.
     *
     * @param responseType the responseType value to set
     * @return the RosettaNetPipActivityBehavior object itself.
     */
    public RosettaNetPipActivityBehavior withResponseType(RosettaNetResponseType responseType) {
        this.responseType = responseType;
        return this;
    }

    /**
     * Get the value indicating whether non-repudiation is for origin and content.
     *
     * @return the nonRepudiationOfOriginAndContent value
     */
    public boolean nonRepudiationOfOriginAndContent() {
        return this.nonRepudiationOfOriginAndContent;
    }

    /**
     * Set the value indicating whether non-repudiation is for origin and content.
     *
     * @param nonRepudiationOfOriginAndContent the nonRepudiationOfOriginAndContent value to set
     * @return the RosettaNetPipActivityBehavior object itself.
     */
    public RosettaNetPipActivityBehavior withNonRepudiationOfOriginAndContent(boolean nonRepudiationOfOriginAndContent) {
        this.nonRepudiationOfOriginAndContent = nonRepudiationOfOriginAndContent;
        return this;
    }

    /**
     * Get the value indicating retry count.
     *
     * @return the retryCount value
     */
    public int retryCount() {
        return this.retryCount;
    }

    /**
     * Set the value indicating retry count.
     *
     * @param retryCount the retryCount value to set
     * @return the RosettaNetPipActivityBehavior object itself.
     */
    public RosettaNetPipActivityBehavior withRetryCount(int retryCount) {
        this.retryCount = retryCount;
        return this;
    }

    /**
     * Get the time to perform in seconds.
     *
     * @return the timeToPerformInSeconds value
     */
    public int timeToPerformInSeconds() {
        return this.timeToPerformInSeconds;
    }

    /**
     * Set the time to perform in seconds.
     *
     * @param timeToPerformInSeconds the timeToPerformInSeconds value to set
     * @return the RosettaNetPipActivityBehavior object itself.
     */
    public RosettaNetPipActivityBehavior withTimeToPerformInSeconds(int timeToPerformInSeconds) {
        this.timeToPerformInSeconds = timeToPerformInSeconds;
        return this;
    }

}
