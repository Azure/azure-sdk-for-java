/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.logic.v2016_06_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in RosettaNetProcessConfigurations.
 */
public class RosettaNetProcessConfigurationsInner {
    /** The Retrofit service to perform REST calls. */
    private RosettaNetProcessConfigurationsService service;
    /** The service client containing this operation class. */
    private LogicManagementClientImpl client;

    /**
     * Initializes an instance of RosettaNetProcessConfigurationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RosettaNetProcessConfigurationsInner(Retrofit retrofit, LogicManagementClientImpl client) {
        this.service = retrofit.create(RosettaNetProcessConfigurationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for RosettaNetProcessConfigurations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RosettaNetProcessConfigurationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2016_06_01.RosettaNetProcessConfigurations listByIntegrationAccounts" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/rosettanetprocessconfigurations")
        Observable<Response<ResponseBody>> listByIntegrationAccounts(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("integrationAccountName") String integrationAccountName, @Query("api-version") String apiVersion, @Query("$top") Integer top, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2016_06_01.RosettaNetProcessConfigurations get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/rosettanetprocessconfigurations/{rosettaNetProcessConfigurationName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("integrationAccountName") String integrationAccountName, @Path("rosettaNetProcessConfigurationName") String rosettaNetProcessConfigurationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2016_06_01.RosettaNetProcessConfigurations createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/rosettanetprocessconfigurations/{rosettaNetProcessConfigurationName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("integrationAccountName") String integrationAccountName, @Path("rosettaNetProcessConfigurationName") String rosettaNetProcessConfigurationName, @Query("api-version") String apiVersion, @Body IntegrationAccountRosettaNetProcessConfigurationInner rosettaNetProcessConfiguration, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2016_06_01.RosettaNetProcessConfigurations delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/rosettanetprocessconfigurations/{rosettaNetProcessConfigurationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("integrationAccountName") String integrationAccountName, @Path("rosettaNetProcessConfigurationName") String rosettaNetProcessConfigurationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2016_06_01.RosettaNetProcessConfigurations listByIntegrationAccountsNext" })
        @GET
        Observable<Response<ResponseBody>> listByIntegrationAccountsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets a list of integration account RosettaNet process configurations.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IntegrationAccountRosettaNetProcessConfigurationInner&gt; object if successful.
     */
    public PagedList<IntegrationAccountRosettaNetProcessConfigurationInner> listByIntegrationAccounts(final String resourceGroupName, final String integrationAccountName) {
        ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>> response = listByIntegrationAccountsSinglePageAsync(resourceGroupName, integrationAccountName).toBlocking().single();
        return new PagedList<IntegrationAccountRosettaNetProcessConfigurationInner>(response.body()) {
            @Override
            public Page<IntegrationAccountRosettaNetProcessConfigurationInner> nextPage(String nextPageLink) {
                return listByIntegrationAccountsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of integration account RosettaNet process configurations.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IntegrationAccountRosettaNetProcessConfigurationInner>> listByIntegrationAccountsAsync(final String resourceGroupName, final String integrationAccountName, final ListOperationCallback<IntegrationAccountRosettaNetProcessConfigurationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByIntegrationAccountsSinglePageAsync(resourceGroupName, integrationAccountName),
            new Func1<String, Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>> call(String nextPageLink) {
                    return listByIntegrationAccountsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of integration account RosettaNet process configurations.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationAccountRosettaNetProcessConfigurationInner&gt; object
     */
    public Observable<Page<IntegrationAccountRosettaNetProcessConfigurationInner>> listByIntegrationAccountsAsync(final String resourceGroupName, final String integrationAccountName) {
        return listByIntegrationAccountsWithServiceResponseAsync(resourceGroupName, integrationAccountName)
            .map(new Func1<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>, Page<IntegrationAccountRosettaNetProcessConfigurationInner>>() {
                @Override
                public Page<IntegrationAccountRosettaNetProcessConfigurationInner> call(ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of integration account RosettaNet process configurations.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationAccountRosettaNetProcessConfigurationInner&gt; object
     */
    public Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>> listByIntegrationAccountsWithServiceResponseAsync(final String resourceGroupName, final String integrationAccountName) {
        return listByIntegrationAccountsSinglePageAsync(resourceGroupName, integrationAccountName)
            .concatMap(new Func1<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>, Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>> call(ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByIntegrationAccountsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of integration account RosettaNet process configurations.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IntegrationAccountRosettaNetProcessConfigurationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>> listByIntegrationAccountsSinglePageAsync(final String resourceGroupName, final String integrationAccountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (integrationAccountName == null) {
            throw new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        final String filter = null;
        return service.listByIntegrationAccounts(this.client.subscriptionId(), resourceGroupName, integrationAccountName, this.client.apiVersion(), top, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IntegrationAccountRosettaNetProcessConfigurationInner>> result = listByIntegrationAccountsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a list of integration account RosettaNet process configurations.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param top The number of items to be included in the result.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IntegrationAccountRosettaNetProcessConfigurationInner&gt; object if successful.
     */
    public PagedList<IntegrationAccountRosettaNetProcessConfigurationInner> listByIntegrationAccounts(final String resourceGroupName, final String integrationAccountName, final Integer top, final String filter) {
        ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>> response = listByIntegrationAccountsSinglePageAsync(resourceGroupName, integrationAccountName, top, filter).toBlocking().single();
        return new PagedList<IntegrationAccountRosettaNetProcessConfigurationInner>(response.body()) {
            @Override
            public Page<IntegrationAccountRosettaNetProcessConfigurationInner> nextPage(String nextPageLink) {
                return listByIntegrationAccountsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of integration account RosettaNet process configurations.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param top The number of items to be included in the result.
     * @param filter The filter to apply on the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IntegrationAccountRosettaNetProcessConfigurationInner>> listByIntegrationAccountsAsync(final String resourceGroupName, final String integrationAccountName, final Integer top, final String filter, final ListOperationCallback<IntegrationAccountRosettaNetProcessConfigurationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByIntegrationAccountsSinglePageAsync(resourceGroupName, integrationAccountName, top, filter),
            new Func1<String, Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>> call(String nextPageLink) {
                    return listByIntegrationAccountsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of integration account RosettaNet process configurations.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param top The number of items to be included in the result.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationAccountRosettaNetProcessConfigurationInner&gt; object
     */
    public Observable<Page<IntegrationAccountRosettaNetProcessConfigurationInner>> listByIntegrationAccountsAsync(final String resourceGroupName, final String integrationAccountName, final Integer top, final String filter) {
        return listByIntegrationAccountsWithServiceResponseAsync(resourceGroupName, integrationAccountName, top, filter)
            .map(new Func1<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>, Page<IntegrationAccountRosettaNetProcessConfigurationInner>>() {
                @Override
                public Page<IntegrationAccountRosettaNetProcessConfigurationInner> call(ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of integration account RosettaNet process configurations.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param top The number of items to be included in the result.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationAccountRosettaNetProcessConfigurationInner&gt; object
     */
    public Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>> listByIntegrationAccountsWithServiceResponseAsync(final String resourceGroupName, final String integrationAccountName, final Integer top, final String filter) {
        return listByIntegrationAccountsSinglePageAsync(resourceGroupName, integrationAccountName, top, filter)
            .concatMap(new Func1<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>, Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>> call(ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByIntegrationAccountsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of integration account RosettaNet process configurations.
     *
    ServiceResponse<PageImpl<IntegrationAccountRosettaNetProcessConfigurationInner>> * @param resourceGroupName The resource group name.
    ServiceResponse<PageImpl<IntegrationAccountRosettaNetProcessConfigurationInner>> * @param integrationAccountName The integration account name.
    ServiceResponse<PageImpl<IntegrationAccountRosettaNetProcessConfigurationInner>> * @param top The number of items to be included in the result.
    ServiceResponse<PageImpl<IntegrationAccountRosettaNetProcessConfigurationInner>> * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IntegrationAccountRosettaNetProcessConfigurationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>> listByIntegrationAccountsSinglePageAsync(final String resourceGroupName, final String integrationAccountName, final Integer top, final String filter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (integrationAccountName == null) {
            throw new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByIntegrationAccounts(this.client.subscriptionId(), resourceGroupName, integrationAccountName, this.client.apiVersion(), top, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IntegrationAccountRosettaNetProcessConfigurationInner>> result = listByIntegrationAccountsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IntegrationAccountRosettaNetProcessConfigurationInner>> listByIntegrationAccountsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IntegrationAccountRosettaNetProcessConfigurationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IntegrationAccountRosettaNetProcessConfigurationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets an integration account RosettaNetProcessConfiguration.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param rosettaNetProcessConfigurationName The integration account RosettaNetProcessConfiguration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IntegrationAccountRosettaNetProcessConfigurationInner object if successful.
     */
    public IntegrationAccountRosettaNetProcessConfigurationInner get(String resourceGroupName, String integrationAccountName, String rosettaNetProcessConfigurationName) {
        return getWithServiceResponseAsync(resourceGroupName, integrationAccountName, rosettaNetProcessConfigurationName).toBlocking().single().body();
    }

    /**
     * Gets an integration account RosettaNetProcessConfiguration.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param rosettaNetProcessConfigurationName The integration account RosettaNetProcessConfiguration name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IntegrationAccountRosettaNetProcessConfigurationInner> getAsync(String resourceGroupName, String integrationAccountName, String rosettaNetProcessConfigurationName, final ServiceCallback<IntegrationAccountRosettaNetProcessConfigurationInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, integrationAccountName, rosettaNetProcessConfigurationName), serviceCallback);
    }

    /**
     * Gets an integration account RosettaNetProcessConfiguration.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param rosettaNetProcessConfigurationName The integration account RosettaNetProcessConfiguration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationAccountRosettaNetProcessConfigurationInner object
     */
    public Observable<IntegrationAccountRosettaNetProcessConfigurationInner> getAsync(String resourceGroupName, String integrationAccountName, String rosettaNetProcessConfigurationName) {
        return getWithServiceResponseAsync(resourceGroupName, integrationAccountName, rosettaNetProcessConfigurationName).map(new Func1<ServiceResponse<IntegrationAccountRosettaNetProcessConfigurationInner>, IntegrationAccountRosettaNetProcessConfigurationInner>() {
            @Override
            public IntegrationAccountRosettaNetProcessConfigurationInner call(ServiceResponse<IntegrationAccountRosettaNetProcessConfigurationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an integration account RosettaNetProcessConfiguration.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param rosettaNetProcessConfigurationName The integration account RosettaNetProcessConfiguration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationAccountRosettaNetProcessConfigurationInner object
     */
    public Observable<ServiceResponse<IntegrationAccountRosettaNetProcessConfigurationInner>> getWithServiceResponseAsync(String resourceGroupName, String integrationAccountName, String rosettaNetProcessConfigurationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (integrationAccountName == null) {
            throw new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null.");
        }
        if (rosettaNetProcessConfigurationName == null) {
            throw new IllegalArgumentException("Parameter rosettaNetProcessConfigurationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, integrationAccountName, rosettaNetProcessConfigurationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IntegrationAccountRosettaNetProcessConfigurationInner>>>() {
                @Override
                public Observable<ServiceResponse<IntegrationAccountRosettaNetProcessConfigurationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IntegrationAccountRosettaNetProcessConfigurationInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IntegrationAccountRosettaNetProcessConfigurationInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IntegrationAccountRosettaNetProcessConfigurationInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<IntegrationAccountRosettaNetProcessConfigurationInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates an integration account RosettaNetProcessConfiguration.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param rosettaNetProcessConfigurationName The integration account RosettaNet ProcessConfiguration name.
     * @param rosettaNetProcessConfiguration The integration account RosettaNet ProcessConfiguration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IntegrationAccountRosettaNetProcessConfigurationInner object if successful.
     */
    public IntegrationAccountRosettaNetProcessConfigurationInner createOrUpdate(String resourceGroupName, String integrationAccountName, String rosettaNetProcessConfigurationName, IntegrationAccountRosettaNetProcessConfigurationInner rosettaNetProcessConfiguration) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, integrationAccountName, rosettaNetProcessConfigurationName, rosettaNetProcessConfiguration).toBlocking().single().body();
    }

    /**
     * Creates or updates an integration account RosettaNetProcessConfiguration.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param rosettaNetProcessConfigurationName The integration account RosettaNet ProcessConfiguration name.
     * @param rosettaNetProcessConfiguration The integration account RosettaNet ProcessConfiguration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IntegrationAccountRosettaNetProcessConfigurationInner> createOrUpdateAsync(String resourceGroupName, String integrationAccountName, String rosettaNetProcessConfigurationName, IntegrationAccountRosettaNetProcessConfigurationInner rosettaNetProcessConfiguration, final ServiceCallback<IntegrationAccountRosettaNetProcessConfigurationInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, integrationAccountName, rosettaNetProcessConfigurationName, rosettaNetProcessConfiguration), serviceCallback);
    }

    /**
     * Creates or updates an integration account RosettaNetProcessConfiguration.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param rosettaNetProcessConfigurationName The integration account RosettaNet ProcessConfiguration name.
     * @param rosettaNetProcessConfiguration The integration account RosettaNet ProcessConfiguration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationAccountRosettaNetProcessConfigurationInner object
     */
    public Observable<IntegrationAccountRosettaNetProcessConfigurationInner> createOrUpdateAsync(String resourceGroupName, String integrationAccountName, String rosettaNetProcessConfigurationName, IntegrationAccountRosettaNetProcessConfigurationInner rosettaNetProcessConfiguration) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, integrationAccountName, rosettaNetProcessConfigurationName, rosettaNetProcessConfiguration).map(new Func1<ServiceResponse<IntegrationAccountRosettaNetProcessConfigurationInner>, IntegrationAccountRosettaNetProcessConfigurationInner>() {
            @Override
            public IntegrationAccountRosettaNetProcessConfigurationInner call(ServiceResponse<IntegrationAccountRosettaNetProcessConfigurationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an integration account RosettaNetProcessConfiguration.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param rosettaNetProcessConfigurationName The integration account RosettaNet ProcessConfiguration name.
     * @param rosettaNetProcessConfiguration The integration account RosettaNet ProcessConfiguration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationAccountRosettaNetProcessConfigurationInner object
     */
    public Observable<ServiceResponse<IntegrationAccountRosettaNetProcessConfigurationInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String integrationAccountName, String rosettaNetProcessConfigurationName, IntegrationAccountRosettaNetProcessConfigurationInner rosettaNetProcessConfiguration) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (integrationAccountName == null) {
            throw new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null.");
        }
        if (rosettaNetProcessConfigurationName == null) {
            throw new IllegalArgumentException("Parameter rosettaNetProcessConfigurationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (rosettaNetProcessConfiguration == null) {
            throw new IllegalArgumentException("Parameter rosettaNetProcessConfiguration is required and cannot be null.");
        }
        Validator.validate(rosettaNetProcessConfiguration);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, integrationAccountName, rosettaNetProcessConfigurationName, this.client.apiVersion(), rosettaNetProcessConfiguration, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IntegrationAccountRosettaNetProcessConfigurationInner>>>() {
                @Override
                public Observable<ServiceResponse<IntegrationAccountRosettaNetProcessConfigurationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IntegrationAccountRosettaNetProcessConfigurationInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IntegrationAccountRosettaNetProcessConfigurationInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IntegrationAccountRosettaNetProcessConfigurationInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<IntegrationAccountRosettaNetProcessConfigurationInner>() { }.getType())
                .register(201, new TypeToken<IntegrationAccountRosettaNetProcessConfigurationInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes an integration account RosettaNet ProcessConfiguration.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param rosettaNetProcessConfigurationName The integration account RosettaNetProcessConfiguration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String integrationAccountName, String rosettaNetProcessConfigurationName) {
        deleteWithServiceResponseAsync(resourceGroupName, integrationAccountName, rosettaNetProcessConfigurationName).toBlocking().single().body();
    }

    /**
     * Deletes an integration account RosettaNet ProcessConfiguration.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param rosettaNetProcessConfigurationName The integration account RosettaNetProcessConfiguration name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String integrationAccountName, String rosettaNetProcessConfigurationName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, integrationAccountName, rosettaNetProcessConfigurationName), serviceCallback);
    }

    /**
     * Deletes an integration account RosettaNet ProcessConfiguration.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param rosettaNetProcessConfigurationName The integration account RosettaNetProcessConfiguration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String integrationAccountName, String rosettaNetProcessConfigurationName) {
        return deleteWithServiceResponseAsync(resourceGroupName, integrationAccountName, rosettaNetProcessConfigurationName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an integration account RosettaNet ProcessConfiguration.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param rosettaNetProcessConfigurationName The integration account RosettaNetProcessConfiguration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String integrationAccountName, String rosettaNetProcessConfigurationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (integrationAccountName == null) {
            throw new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null.");
        }
        if (rosettaNetProcessConfigurationName == null) {
            throw new IllegalArgumentException("Parameter rosettaNetProcessConfigurationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, integrationAccountName, rosettaNetProcessConfigurationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a list of integration account RosettaNet process configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IntegrationAccountRosettaNetProcessConfigurationInner&gt; object if successful.
     */
    public PagedList<IntegrationAccountRosettaNetProcessConfigurationInner> listByIntegrationAccountsNext(final String nextPageLink) {
        ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>> response = listByIntegrationAccountsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<IntegrationAccountRosettaNetProcessConfigurationInner>(response.body()) {
            @Override
            public Page<IntegrationAccountRosettaNetProcessConfigurationInner> nextPage(String nextPageLink) {
                return listByIntegrationAccountsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of integration account RosettaNet process configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IntegrationAccountRosettaNetProcessConfigurationInner>> listByIntegrationAccountsNextAsync(final String nextPageLink, final ServiceFuture<List<IntegrationAccountRosettaNetProcessConfigurationInner>> serviceFuture, final ListOperationCallback<IntegrationAccountRosettaNetProcessConfigurationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByIntegrationAccountsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>> call(String nextPageLink) {
                    return listByIntegrationAccountsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of integration account RosettaNet process configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationAccountRosettaNetProcessConfigurationInner&gt; object
     */
    public Observable<Page<IntegrationAccountRosettaNetProcessConfigurationInner>> listByIntegrationAccountsNextAsync(final String nextPageLink) {
        return listByIntegrationAccountsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>, Page<IntegrationAccountRosettaNetProcessConfigurationInner>>() {
                @Override
                public Page<IntegrationAccountRosettaNetProcessConfigurationInner> call(ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of integration account RosettaNet process configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationAccountRosettaNetProcessConfigurationInner&gt; object
     */
    public Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>> listByIntegrationAccountsNextWithServiceResponseAsync(final String nextPageLink) {
        return listByIntegrationAccountsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>, Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>> call(ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByIntegrationAccountsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of integration account RosettaNet process configurations.
     *
    ServiceResponse<PageImpl<IntegrationAccountRosettaNetProcessConfigurationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IntegrationAccountRosettaNetProcessConfigurationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>> listByIntegrationAccountsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByIntegrationAccountsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IntegrationAccountRosettaNetProcessConfigurationInner>> result = listByIntegrationAccountsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IntegrationAccountRosettaNetProcessConfigurationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IntegrationAccountRosettaNetProcessConfigurationInner>> listByIntegrationAccountsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IntegrationAccountRosettaNetProcessConfigurationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IntegrationAccountRosettaNetProcessConfigurationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
