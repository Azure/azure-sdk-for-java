/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.logic.v2016_06_01;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The AS2 agreement acknowledgement connection settings.
 */
public class AS2AcknowledgementConnectionSettings {
    /**
     * The value indicating whether to ignore mismatch in certificate name.
     */
    @JsonProperty(value = "ignoreCertificateNameMismatch", required = true)
    private boolean ignoreCertificateNameMismatch;

    /**
     * The value indicating whether to support HTTP status code 'CONTINUE'.
     */
    @JsonProperty(value = "supportHttpStatusCodeContinue", required = true)
    private boolean supportHttpStatusCodeContinue;

    /**
     * The value indicating whether to keep the connection alive.
     */
    @JsonProperty(value = "keepHttpConnectionAlive", required = true)
    private boolean keepHttpConnectionAlive;

    /**
     * The value indicating whether to unfold the HTTP headers.
     */
    @JsonProperty(value = "unfoldHttpHeaders", required = true)
    private boolean unfoldHttpHeaders;

    /**
     * Get the value indicating whether to ignore mismatch in certificate name.
     *
     * @return the ignoreCertificateNameMismatch value
     */
    public boolean ignoreCertificateNameMismatch() {
        return this.ignoreCertificateNameMismatch;
    }

    /**
     * Set the value indicating whether to ignore mismatch in certificate name.
     *
     * @param ignoreCertificateNameMismatch the ignoreCertificateNameMismatch value to set
     * @return the AS2AcknowledgementConnectionSettings object itself.
     */
    public AS2AcknowledgementConnectionSettings withIgnoreCertificateNameMismatch(boolean ignoreCertificateNameMismatch) {
        this.ignoreCertificateNameMismatch = ignoreCertificateNameMismatch;
        return this;
    }

    /**
     * Get the value indicating whether to support HTTP status code 'CONTINUE'.
     *
     * @return the supportHttpStatusCodeContinue value
     */
    public boolean supportHttpStatusCodeContinue() {
        return this.supportHttpStatusCodeContinue;
    }

    /**
     * Set the value indicating whether to support HTTP status code 'CONTINUE'.
     *
     * @param supportHttpStatusCodeContinue the supportHttpStatusCodeContinue value to set
     * @return the AS2AcknowledgementConnectionSettings object itself.
     */
    public AS2AcknowledgementConnectionSettings withSupportHttpStatusCodeContinue(boolean supportHttpStatusCodeContinue) {
        this.supportHttpStatusCodeContinue = supportHttpStatusCodeContinue;
        return this;
    }

    /**
     * Get the value indicating whether to keep the connection alive.
     *
     * @return the keepHttpConnectionAlive value
     */
    public boolean keepHttpConnectionAlive() {
        return this.keepHttpConnectionAlive;
    }

    /**
     * Set the value indicating whether to keep the connection alive.
     *
     * @param keepHttpConnectionAlive the keepHttpConnectionAlive value to set
     * @return the AS2AcknowledgementConnectionSettings object itself.
     */
    public AS2AcknowledgementConnectionSettings withKeepHttpConnectionAlive(boolean keepHttpConnectionAlive) {
        this.keepHttpConnectionAlive = keepHttpConnectionAlive;
        return this;
    }

    /**
     * Get the value indicating whether to unfold the HTTP headers.
     *
     * @return the unfoldHttpHeaders value
     */
    public boolean unfoldHttpHeaders() {
        return this.unfoldHttpHeaders;
    }

    /**
     * Set the value indicating whether to unfold the HTTP headers.
     *
     * @param unfoldHttpHeaders the unfoldHttpHeaders value to set
     * @return the AS2AcknowledgementConnectionSettings object itself.
     */
    public AS2AcknowledgementConnectionSettings withUnfoldHttpHeaders(boolean unfoldHttpHeaders) {
        this.unfoldHttpHeaders = unfoldHttpHeaders;
        return this;
    }

}
