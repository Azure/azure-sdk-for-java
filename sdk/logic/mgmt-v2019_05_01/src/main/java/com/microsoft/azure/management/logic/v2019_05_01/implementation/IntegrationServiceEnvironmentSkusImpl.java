/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.logic.v2019_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironmentSkus;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironmentSkuDefinition;

class IntegrationServiceEnvironmentSkusImpl extends WrapperImpl<IntegrationServiceEnvironmentSkusInner> implements IntegrationServiceEnvironmentSkus {
    private final LogicManager manager;

    IntegrationServiceEnvironmentSkusImpl(LogicManager manager) {
        super(manager.inner().integrationServiceEnvironmentSkus());
        this.manager = manager;
    }

    public LogicManager manager() {
        return this.manager;
    }

    private IntegrationServiceEnvironmentSkuDefinitionImpl wrapModel(IntegrationServiceEnvironmentSkuDefinitionInner inner) {
        return  new IntegrationServiceEnvironmentSkuDefinitionImpl(inner, manager());
    }

    @Override
    public Observable<IntegrationServiceEnvironmentSkuDefinition> listAsync(final String resourceGroup, final String integrationServiceEnvironmentName) {
        IntegrationServiceEnvironmentSkusInner client = this.inner();
        return client.listAsync(resourceGroup, integrationServiceEnvironmentName)
        .flatMapIterable(new Func1<Page<IntegrationServiceEnvironmentSkuDefinitionInner>, Iterable<IntegrationServiceEnvironmentSkuDefinitionInner>>() {
            @Override
            public Iterable<IntegrationServiceEnvironmentSkuDefinitionInner> call(Page<IntegrationServiceEnvironmentSkuDefinitionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<IntegrationServiceEnvironmentSkuDefinitionInner, IntegrationServiceEnvironmentSkuDefinition>() {
            @Override
            public IntegrationServiceEnvironmentSkuDefinition call(IntegrationServiceEnvironmentSkuDefinitionInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
