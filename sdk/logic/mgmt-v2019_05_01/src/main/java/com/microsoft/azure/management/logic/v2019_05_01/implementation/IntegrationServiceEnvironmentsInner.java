/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.logic.v2019_05_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.logic.v2019_05_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in IntegrationServiceEnvironments.
 */
public class IntegrationServiceEnvironmentsInner implements InnerSupportsGet<IntegrationServiceEnvironmentInner>, InnerSupportsDelete<Void>, InnerSupportsListing<IntegrationServiceEnvironmentInner> {
    /** The Retrofit service to perform REST calls. */
    private IntegrationServiceEnvironmentsService service;
    /** The service client containing this operation class. */
    private LogicManagementClientImpl client;

    /**
     * Initializes an instance of IntegrationServiceEnvironmentsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public IntegrationServiceEnvironmentsInner(Retrofit retrofit, LogicManagementClientImpl client) {
        this.service = retrofit.create(IntegrationServiceEnvironmentsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for IntegrationServiceEnvironments to be
     * used by Retrofit to perform actually REST calls.
     */
    interface IntegrationServiceEnvironmentsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironments list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$top") Integer top, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironments listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Query("api-version") String apiVersion, @Query("$top") Integer top, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironments getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("integrationServiceEnvironmentName") String integrationServiceEnvironmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironments createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("integrationServiceEnvironmentName") String integrationServiceEnvironmentName, @Query("api-version") String apiVersion, @Body IntegrationServiceEnvironmentInner integrationServiceEnvironment, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironments beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("integrationServiceEnvironmentName") String integrationServiceEnvironmentName, @Query("api-version") String apiVersion, @Body IntegrationServiceEnvironmentInner integrationServiceEnvironment, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironments update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("integrationServiceEnvironmentName") String integrationServiceEnvironmentName, @Query("api-version") String apiVersion, @Body IntegrationServiceEnvironmentInner integrationServiceEnvironment, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironments beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("integrationServiceEnvironmentName") String integrationServiceEnvironmentName, @Query("api-version") String apiVersion, @Body IntegrationServiceEnvironmentInner integrationServiceEnvironment, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironments delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("integrationServiceEnvironmentName") String integrationServiceEnvironmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironments restart" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/restart")
        Observable<Response<ResponseBody>> restart(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("integrationServiceEnvironmentName") String integrationServiceEnvironmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironments listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironments listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets a list of integration service environments by subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object if successful.
     */
    public PagedList<IntegrationServiceEnvironmentInner> list() {
        ServiceResponse<Page<IntegrationServiceEnvironmentInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<IntegrationServiceEnvironmentInner>(response.body()) {
            @Override
            public Page<IntegrationServiceEnvironmentInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of integration service environments by subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IntegrationServiceEnvironmentInner>> listAsync(final ListOperationCallback<IntegrationServiceEnvironmentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of integration service environments by subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object
     */
    public Observable<Page<IntegrationServiceEnvironmentInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>, Page<IntegrationServiceEnvironmentInner>>() {
                @Override
                public Page<IntegrationServiceEnvironmentInner> call(ServiceResponse<Page<IntegrationServiceEnvironmentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of integration service environments by subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object
     */
    public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(ServiceResponse<Page<IntegrationServiceEnvironmentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of integration service environments by subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IntegrationServiceEnvironmentInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IntegrationServiceEnvironmentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a list of integration service environments by subscription.
     *
     * @param top The number of items to be included in the result.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object if successful.
     */
    public PagedList<IntegrationServiceEnvironmentInner> list(final Integer top) {
        ServiceResponse<Page<IntegrationServiceEnvironmentInner>> response = listSinglePageAsync(top).toBlocking().single();
        return new PagedList<IntegrationServiceEnvironmentInner>(response.body()) {
            @Override
            public Page<IntegrationServiceEnvironmentInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of integration service environments by subscription.
     *
     * @param top The number of items to be included in the result.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IntegrationServiceEnvironmentInner>> listAsync(final Integer top, final ListOperationCallback<IntegrationServiceEnvironmentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(top),
            new Func1<String, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of integration service environments by subscription.
     *
     * @param top The number of items to be included in the result.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object
     */
    public Observable<Page<IntegrationServiceEnvironmentInner>> listAsync(final Integer top) {
        return listWithServiceResponseAsync(top)
            .map(new Func1<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>, Page<IntegrationServiceEnvironmentInner>>() {
                @Override
                public Page<IntegrationServiceEnvironmentInner> call(ServiceResponse<Page<IntegrationServiceEnvironmentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of integration service environments by subscription.
     *
     * @param top The number of items to be included in the result.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object
     */
    public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> listWithServiceResponseAsync(final Integer top) {
        return listSinglePageAsync(top)
            .concatMap(new Func1<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(ServiceResponse<Page<IntegrationServiceEnvironmentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of integration service environments by subscription.
     *
    ServiceResponse<PageImpl<IntegrationServiceEnvironmentInner>> * @param top The number of items to be included in the result.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> listSinglePageAsync(final Integer top) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IntegrationServiceEnvironmentInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IntegrationServiceEnvironmentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IntegrationServiceEnvironmentInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IntegrationServiceEnvironmentInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IntegrationServiceEnvironmentInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets a list of integration service environments by resource group.
     *
     * @param resourceGroup The resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object if successful.
     */
    public PagedList<IntegrationServiceEnvironmentInner> listByResourceGroup(final String resourceGroup) {
        ServiceResponse<Page<IntegrationServiceEnvironmentInner>> response = listByResourceGroupSinglePageAsync(resourceGroup).toBlocking().single();
        return new PagedList<IntegrationServiceEnvironmentInner>(response.body()) {
            @Override
            public Page<IntegrationServiceEnvironmentInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of integration service environments by resource group.
     *
     * @param resourceGroup The resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IntegrationServiceEnvironmentInner>> listByResourceGroupAsync(final String resourceGroup, final ListOperationCallback<IntegrationServiceEnvironmentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroup),
            new Func1<String, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of integration service environments by resource group.
     *
     * @param resourceGroup The resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object
     */
    public Observable<Page<IntegrationServiceEnvironmentInner>> listByResourceGroupAsync(final String resourceGroup) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroup)
            .map(new Func1<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>, Page<IntegrationServiceEnvironmentInner>>() {
                @Override
                public Page<IntegrationServiceEnvironmentInner> call(ServiceResponse<Page<IntegrationServiceEnvironmentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of integration service environments by resource group.
     *
     * @param resourceGroup The resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object
     */
    public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroup) {
        return listByResourceGroupSinglePageAsync(resourceGroup)
            .concatMap(new Func1<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(ServiceResponse<Page<IntegrationServiceEnvironmentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of integration service environments by resource group.
     *
     * @param resourceGroup The resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> listByResourceGroupSinglePageAsync(final String resourceGroup) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroup, this.client.apiVersion(), top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IntegrationServiceEnvironmentInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IntegrationServiceEnvironmentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a list of integration service environments by resource group.
     *
     * @param resourceGroup The resource group.
     * @param top The number of items to be included in the result.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object if successful.
     */
    public PagedList<IntegrationServiceEnvironmentInner> listByResourceGroup(final String resourceGroup, final Integer top) {
        ServiceResponse<Page<IntegrationServiceEnvironmentInner>> response = listByResourceGroupSinglePageAsync(resourceGroup, top).toBlocking().single();
        return new PagedList<IntegrationServiceEnvironmentInner>(response.body()) {
            @Override
            public Page<IntegrationServiceEnvironmentInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of integration service environments by resource group.
     *
     * @param resourceGroup The resource group.
     * @param top The number of items to be included in the result.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IntegrationServiceEnvironmentInner>> listByResourceGroupAsync(final String resourceGroup, final Integer top, final ListOperationCallback<IntegrationServiceEnvironmentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroup, top),
            new Func1<String, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of integration service environments by resource group.
     *
     * @param resourceGroup The resource group.
     * @param top The number of items to be included in the result.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object
     */
    public Observable<Page<IntegrationServiceEnvironmentInner>> listByResourceGroupAsync(final String resourceGroup, final Integer top) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroup, top)
            .map(new Func1<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>, Page<IntegrationServiceEnvironmentInner>>() {
                @Override
                public Page<IntegrationServiceEnvironmentInner> call(ServiceResponse<Page<IntegrationServiceEnvironmentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of integration service environments by resource group.
     *
     * @param resourceGroup The resource group.
     * @param top The number of items to be included in the result.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object
     */
    public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroup, final Integer top) {
        return listByResourceGroupSinglePageAsync(resourceGroup, top)
            .concatMap(new Func1<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(ServiceResponse<Page<IntegrationServiceEnvironmentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of integration service environments by resource group.
     *
    ServiceResponse<PageImpl<IntegrationServiceEnvironmentInner>> * @param resourceGroup The resource group.
    ServiceResponse<PageImpl<IntegrationServiceEnvironmentInner>> * @param top The number of items to be included in the result.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> listByResourceGroupSinglePageAsync(final String resourceGroup, final Integer top) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroup, this.client.apiVersion(), top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IntegrationServiceEnvironmentInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IntegrationServiceEnvironmentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IntegrationServiceEnvironmentInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IntegrationServiceEnvironmentInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IntegrationServiceEnvironmentInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IntegrationServiceEnvironmentInner object if successful.
     */
    public IntegrationServiceEnvironmentInner getByResourceGroup(String resourceGroup, String integrationServiceEnvironmentName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName).toBlocking().single().body();
    }

    /**
     * Gets an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IntegrationServiceEnvironmentInner> getByResourceGroupAsync(String resourceGroup, String integrationServiceEnvironmentName, final ServiceCallback<IntegrationServiceEnvironmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName), serviceCallback);
    }

    /**
     * Gets an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationServiceEnvironmentInner object
     */
    public Observable<IntegrationServiceEnvironmentInner> getByResourceGroupAsync(String resourceGroup, String integrationServiceEnvironmentName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName).map(new Func1<ServiceResponse<IntegrationServiceEnvironmentInner>, IntegrationServiceEnvironmentInner>() {
            @Override
            public IntegrationServiceEnvironmentInner call(ServiceResponse<IntegrationServiceEnvironmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationServiceEnvironmentInner object
     */
    public Observable<ServiceResponse<IntegrationServiceEnvironmentInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroup, String integrationServiceEnvironmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (integrationServiceEnvironmentName == null) {
            throw new IllegalArgumentException("Parameter integrationServiceEnvironmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroup, integrationServiceEnvironmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IntegrationServiceEnvironmentInner>>>() {
                @Override
                public Observable<ServiceResponse<IntegrationServiceEnvironmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IntegrationServiceEnvironmentInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IntegrationServiceEnvironmentInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IntegrationServiceEnvironmentInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<IntegrationServiceEnvironmentInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IntegrationServiceEnvironmentInner object if successful.
     */
    public IntegrationServiceEnvironmentInner createOrUpdate(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment) {
        return createOrUpdateWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName, integrationServiceEnvironment).toBlocking().last().body();
    }

    /**
     * Creates or updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IntegrationServiceEnvironmentInner> createOrUpdateAsync(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment, final ServiceCallback<IntegrationServiceEnvironmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName, integrationServiceEnvironment), serviceCallback);
    }

    /**
     * Creates or updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<IntegrationServiceEnvironmentInner> createOrUpdateAsync(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment) {
        return createOrUpdateWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName, integrationServiceEnvironment).map(new Func1<ServiceResponse<IntegrationServiceEnvironmentInner>, IntegrationServiceEnvironmentInner>() {
            @Override
            public IntegrationServiceEnvironmentInner call(ServiceResponse<IntegrationServiceEnvironmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<IntegrationServiceEnvironmentInner>> createOrUpdateWithServiceResponseAsync(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (integrationServiceEnvironmentName == null) {
            throw new IllegalArgumentException("Parameter integrationServiceEnvironmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (integrationServiceEnvironment == null) {
            throw new IllegalArgumentException("Parameter integrationServiceEnvironment is required and cannot be null.");
        }
        Validator.validate(integrationServiceEnvironment);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroup, integrationServiceEnvironmentName, this.client.apiVersion(), integrationServiceEnvironment, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<IntegrationServiceEnvironmentInner>() { }.getType());
    }

    /**
     * Creates or updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IntegrationServiceEnvironmentInner object if successful.
     */
    public IntegrationServiceEnvironmentInner beginCreateOrUpdate(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName, integrationServiceEnvironment).toBlocking().single().body();
    }

    /**
     * Creates or updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IntegrationServiceEnvironmentInner> beginCreateOrUpdateAsync(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment, final ServiceCallback<IntegrationServiceEnvironmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName, integrationServiceEnvironment), serviceCallback);
    }

    /**
     * Creates or updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationServiceEnvironmentInner object
     */
    public Observable<IntegrationServiceEnvironmentInner> beginCreateOrUpdateAsync(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName, integrationServiceEnvironment).map(new Func1<ServiceResponse<IntegrationServiceEnvironmentInner>, IntegrationServiceEnvironmentInner>() {
            @Override
            public IntegrationServiceEnvironmentInner call(ServiceResponse<IntegrationServiceEnvironmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationServiceEnvironmentInner object
     */
    public Observable<ServiceResponse<IntegrationServiceEnvironmentInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (integrationServiceEnvironmentName == null) {
            throw new IllegalArgumentException("Parameter integrationServiceEnvironmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (integrationServiceEnvironment == null) {
            throw new IllegalArgumentException("Parameter integrationServiceEnvironment is required and cannot be null.");
        }
        Validator.validate(integrationServiceEnvironment);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroup, integrationServiceEnvironmentName, this.client.apiVersion(), integrationServiceEnvironment, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IntegrationServiceEnvironmentInner>>>() {
                @Override
                public Observable<ServiceResponse<IntegrationServiceEnvironmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IntegrationServiceEnvironmentInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IntegrationServiceEnvironmentInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IntegrationServiceEnvironmentInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<IntegrationServiceEnvironmentInner>() { }.getType())
                .register(201, new TypeToken<IntegrationServiceEnvironmentInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IntegrationServiceEnvironmentInner object if successful.
     */
    public IntegrationServiceEnvironmentInner update(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment) {
        return updateWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName, integrationServiceEnvironment).toBlocking().last().body();
    }

    /**
     * Updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IntegrationServiceEnvironmentInner> updateAsync(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment, final ServiceCallback<IntegrationServiceEnvironmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName, integrationServiceEnvironment), serviceCallback);
    }

    /**
     * Updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<IntegrationServiceEnvironmentInner> updateAsync(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment) {
        return updateWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName, integrationServiceEnvironment).map(new Func1<ServiceResponse<IntegrationServiceEnvironmentInner>, IntegrationServiceEnvironmentInner>() {
            @Override
            public IntegrationServiceEnvironmentInner call(ServiceResponse<IntegrationServiceEnvironmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<IntegrationServiceEnvironmentInner>> updateWithServiceResponseAsync(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (integrationServiceEnvironmentName == null) {
            throw new IllegalArgumentException("Parameter integrationServiceEnvironmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (integrationServiceEnvironment == null) {
            throw new IllegalArgumentException("Parameter integrationServiceEnvironment is required and cannot be null.");
        }
        Validator.validate(integrationServiceEnvironment);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroup, integrationServiceEnvironmentName, this.client.apiVersion(), integrationServiceEnvironment, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<IntegrationServiceEnvironmentInner>() { }.getType());
    }

    /**
     * Updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IntegrationServiceEnvironmentInner object if successful.
     */
    public IntegrationServiceEnvironmentInner beginUpdate(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment) {
        return beginUpdateWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName, integrationServiceEnvironment).toBlocking().single().body();
    }

    /**
     * Updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IntegrationServiceEnvironmentInner> beginUpdateAsync(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment, final ServiceCallback<IntegrationServiceEnvironmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName, integrationServiceEnvironment), serviceCallback);
    }

    /**
     * Updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationServiceEnvironmentInner object
     */
    public Observable<IntegrationServiceEnvironmentInner> beginUpdateAsync(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment) {
        return beginUpdateWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName, integrationServiceEnvironment).map(new Func1<ServiceResponse<IntegrationServiceEnvironmentInner>, IntegrationServiceEnvironmentInner>() {
            @Override
            public IntegrationServiceEnvironmentInner call(ServiceResponse<IntegrationServiceEnvironmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationServiceEnvironmentInner object
     */
    public Observable<ServiceResponse<IntegrationServiceEnvironmentInner>> beginUpdateWithServiceResponseAsync(String resourceGroup, String integrationServiceEnvironmentName, IntegrationServiceEnvironmentInner integrationServiceEnvironment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (integrationServiceEnvironmentName == null) {
            throw new IllegalArgumentException("Parameter integrationServiceEnvironmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (integrationServiceEnvironment == null) {
            throw new IllegalArgumentException("Parameter integrationServiceEnvironment is required and cannot be null.");
        }
        Validator.validate(integrationServiceEnvironment);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroup, integrationServiceEnvironmentName, this.client.apiVersion(), integrationServiceEnvironment, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IntegrationServiceEnvironmentInner>>>() {
                @Override
                public Observable<ServiceResponse<IntegrationServiceEnvironmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IntegrationServiceEnvironmentInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IntegrationServiceEnvironmentInner> beginUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IntegrationServiceEnvironmentInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<IntegrationServiceEnvironmentInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroup, String integrationServiceEnvironmentName) {
        deleteWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName).toBlocking().single().body();
    }

    /**
     * Deletes an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroup, String integrationServiceEnvironmentName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName), serviceCallback);
    }

    /**
     * Deletes an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroup, String integrationServiceEnvironmentName) {
        return deleteWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroup, String integrationServiceEnvironmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (integrationServiceEnvironmentName == null) {
            throw new IllegalArgumentException("Parameter integrationServiceEnvironmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroup, integrationServiceEnvironmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Restarts an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void restart(String resourceGroup, String integrationServiceEnvironmentName) {
        restartWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName).toBlocking().single().body();
    }

    /**
     * Restarts an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> restartAsync(String resourceGroup, String integrationServiceEnvironmentName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(restartWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName), serviceCallback);
    }

    /**
     * Restarts an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> restartAsync(String resourceGroup, String integrationServiceEnvironmentName) {
        return restartWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Restarts an integration service environment.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> restartWithServiceResponseAsync(String resourceGroup, String integrationServiceEnvironmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (integrationServiceEnvironmentName == null) {
            throw new IllegalArgumentException("Parameter integrationServiceEnvironmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.restart(this.client.subscriptionId(), resourceGroup, integrationServiceEnvironmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = restartDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> restartDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets a list of integration service environments by subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object if successful.
     */
    public PagedList<IntegrationServiceEnvironmentInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<IntegrationServiceEnvironmentInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<IntegrationServiceEnvironmentInner>(response.body()) {
            @Override
            public Page<IntegrationServiceEnvironmentInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of integration service environments by subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IntegrationServiceEnvironmentInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<IntegrationServiceEnvironmentInner>> serviceFuture, final ListOperationCallback<IntegrationServiceEnvironmentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of integration service environments by subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object
     */
    public Observable<Page<IntegrationServiceEnvironmentInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>, Page<IntegrationServiceEnvironmentInner>>() {
                @Override
                public Page<IntegrationServiceEnvironmentInner> call(ServiceResponse<Page<IntegrationServiceEnvironmentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of integration service environments by subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object
     */
    public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(ServiceResponse<Page<IntegrationServiceEnvironmentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of integration service environments by subscription.
     *
    ServiceResponse<PageImpl<IntegrationServiceEnvironmentInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IntegrationServiceEnvironmentInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IntegrationServiceEnvironmentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IntegrationServiceEnvironmentInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IntegrationServiceEnvironmentInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IntegrationServiceEnvironmentInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets a list of integration service environments by resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object if successful.
     */
    public PagedList<IntegrationServiceEnvironmentInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<IntegrationServiceEnvironmentInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<IntegrationServiceEnvironmentInner>(response.body()) {
            @Override
            public Page<IntegrationServiceEnvironmentInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of integration service environments by resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IntegrationServiceEnvironmentInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<IntegrationServiceEnvironmentInner>> serviceFuture, final ListOperationCallback<IntegrationServiceEnvironmentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of integration service environments by resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object
     */
    public Observable<Page<IntegrationServiceEnvironmentInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>, Page<IntegrationServiceEnvironmentInner>>() {
                @Override
                public Page<IntegrationServiceEnvironmentInner> call(ServiceResponse<Page<IntegrationServiceEnvironmentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of integration service environments by resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object
     */
    public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(ServiceResponse<Page<IntegrationServiceEnvironmentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of integration service environments by resource group.
     *
    ServiceResponse<PageImpl<IntegrationServiceEnvironmentInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IntegrationServiceEnvironmentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationServiceEnvironmentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IntegrationServiceEnvironmentInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IntegrationServiceEnvironmentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IntegrationServiceEnvironmentInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IntegrationServiceEnvironmentInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IntegrationServiceEnvironmentInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
