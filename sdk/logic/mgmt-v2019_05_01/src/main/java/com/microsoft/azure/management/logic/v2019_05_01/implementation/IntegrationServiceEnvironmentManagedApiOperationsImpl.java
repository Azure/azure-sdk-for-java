/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.logic.v2019_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironmentManagedApiOperations;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.logic.v2019_05_01.ApiOperation;

class IntegrationServiceEnvironmentManagedApiOperationsImpl extends WrapperImpl<IntegrationServiceEnvironmentManagedApiOperationsInner> implements IntegrationServiceEnvironmentManagedApiOperations {
    private final LogicManager manager;

    IntegrationServiceEnvironmentManagedApiOperationsImpl(LogicManager manager) {
        super(manager.inner().integrationServiceEnvironmentManagedApiOperations());
        this.manager = manager;
    }

    public LogicManager manager() {
        return this.manager;
    }

    private ApiOperationImpl wrapModel(ApiOperationInner inner) {
        return  new ApiOperationImpl(inner, manager());
    }

    @Override
    public Observable<ApiOperation> listAsync(final String resourceGroup, final String integrationServiceEnvironmentName, final String apiName) {
        IntegrationServiceEnvironmentManagedApiOperationsInner client = this.inner();
        return client.listAsync(resourceGroup, integrationServiceEnvironmentName, apiName)
        .flatMapIterable(new Func1<Page<ApiOperationInner>, Iterable<ApiOperationInner>>() {
            @Override
            public Iterable<ApiOperationInner> call(Page<ApiOperationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ApiOperationInner, ApiOperation>() {
            @Override
            public ApiOperation call(ApiOperationInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
