/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.logic.v2019_05_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.logic.v2019_05_01.IntegrationAccount;
import rx.Observable;
import com.microsoft.azure.management.logic.v2019_05_01.WorkflowState;
import com.microsoft.azure.management.logic.v2019_05_01.IntegrationAccountSku;
import com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironment;

class IntegrationAccountImpl extends GroupableResourceCoreImpl<IntegrationAccount, IntegrationAccountInner, IntegrationAccountImpl, LogicManager> implements IntegrationAccount, IntegrationAccount.Definition, IntegrationAccount.Update {
    IntegrationAccountImpl(String name, IntegrationAccountInner inner, LogicManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<IntegrationAccount> createResourceAsync() {
        IntegrationAccountsInner client = this.manager().inner().integrationAccounts();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<IntegrationAccount> updateResourceAsync() {
        IntegrationAccountsInner client = this.manager().inner().integrationAccounts();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<IntegrationAccountInner> getInnerAsync() {
        IntegrationAccountsInner client = this.manager().inner().integrationAccounts();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public IntegrationServiceEnvironment integrationServiceEnvironment() {
        IntegrationServiceEnvironmentInner inner = this.inner().integrationServiceEnvironment();
        if (inner != null) {
            return  new IntegrationServiceEnvironmentImpl(inner.name(), inner, manager());
        } else {
            return null;
        }
    }

    @Override
    public IntegrationAccountSku sku() {
        return this.inner().sku();
    }

    @Override
    public WorkflowState state() {
        return this.inner().state();
    }

    @Override
    public IntegrationAccountImpl withIntegrationServiceEnvironment(IntegrationServiceEnvironmentInner integrationServiceEnvironment) {
        this.inner().withIntegrationServiceEnvironment(integrationServiceEnvironment);
        return this;
    }

    @Override
    public IntegrationAccountImpl withSku(IntegrationAccountSku sku) {
        this.inner().withSku(sku);
        return this;
    }

    @Override
    public IntegrationAccountImpl withState(WorkflowState state) {
        this.inner().withState(state);
        return this;
    }

}
