/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.logic.v2019_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironmentManagedApis;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.logic.v2019_05_01.ManagedApi;

class IntegrationServiceEnvironmentManagedApisImpl extends WrapperImpl<IntegrationServiceEnvironmentManagedApisInner> implements IntegrationServiceEnvironmentManagedApis {
    private final LogicManager manager;

    IntegrationServiceEnvironmentManagedApisImpl(LogicManager manager) {
        super(manager.inner().integrationServiceEnvironmentManagedApis());
        this.manager = manager;
    }

    public LogicManager manager() {
        return this.manager;
    }

    @Override
    public ManagedApiImpl define(String name) {
        return wrapModel(name);
    }

    private ManagedApiImpl wrapModel(ManagedApiInner inner) {
        return  new ManagedApiImpl(inner, manager());
    }

    private ManagedApiImpl wrapModel(String name) {
        return new ManagedApiImpl(name, this.manager());
    }

    @Override
    public Observable<ManagedApi> listAsync(final String resourceGroup, final String integrationServiceEnvironmentName) {
        IntegrationServiceEnvironmentManagedApisInner client = this.inner();
        return client.listAsync(resourceGroup, integrationServiceEnvironmentName)
        .flatMapIterable(new Func1<Page<ManagedApiInner>, Iterable<ManagedApiInner>>() {
            @Override
            public Iterable<ManagedApiInner> call(Page<ManagedApiInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagedApiInner, ManagedApi>() {
            @Override
            public ManagedApi call(ManagedApiInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<ManagedApi> getAsync(String resourceGroup, String integrationServiceEnvironmentName, String apiName) {
        IntegrationServiceEnvironmentManagedApisInner client = this.inner();
        return client.getAsync(resourceGroup, integrationServiceEnvironmentName, apiName)
        .flatMap(new Func1<ManagedApiInner, Observable<ManagedApi>>() {
            @Override
            public Observable<ManagedApi> call(ManagedApiInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ManagedApi)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroup, String integrationServiceEnvironmentName, String apiName) {
        IntegrationServiceEnvironmentManagedApisInner client = this.inner();
        return client.deleteAsync(resourceGroup, integrationServiceEnvironmentName, apiName).toCompletable();
    }

}
