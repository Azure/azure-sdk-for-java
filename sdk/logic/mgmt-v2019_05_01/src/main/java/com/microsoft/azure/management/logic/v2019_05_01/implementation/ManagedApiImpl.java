/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.logic.v2019_05_01.implementation;

import com.microsoft.azure.management.logic.v2019_05_01.ManagedApi;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.logic.v2019_05_01.ApiResourceProperties;
import java.util.Map;

class ManagedApiImpl extends CreatableUpdatableImpl<ManagedApi, ManagedApiInner, ManagedApiImpl> implements ManagedApi, ManagedApi.Definition, ManagedApi.Update {
    private final LogicManager manager;
    private String resourceGroup;
    private String integrationServiceEnvironmentName;
    private String apiName;

    ManagedApiImpl(String name, LogicManager manager) {
        super(name, new ManagedApiInner());
        this.manager = manager;
        // Set resource name
        this.apiName = name;
        //
    }

    ManagedApiImpl(ManagedApiInner inner, LogicManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.apiName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroup = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.integrationServiceEnvironmentName = IdParsingUtils.getValueFromIdByName(inner.id(), "integrationServiceEnvironments");
        this.apiName = IdParsingUtils.getValueFromIdByName(inner.id(), "managedApis");
        //
    }

    @Override
    public LogicManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ManagedApi> createResourceAsync() {
        IntegrationServiceEnvironmentManagedApisInner client = this.manager().inner().integrationServiceEnvironmentManagedApis();
        return client.putAsync(this.resourceGroup, this.integrationServiceEnvironmentName, this.apiName)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ManagedApi> updateResourceAsync() {
        IntegrationServiceEnvironmentManagedApisInner client = this.manager().inner().integrationServiceEnvironmentManagedApis();
        return client.putAsync(this.resourceGroup, this.integrationServiceEnvironmentName, this.apiName)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ManagedApiInner> getInnerAsync() {
        IntegrationServiceEnvironmentManagedApisInner client = this.manager().inner().integrationServiceEnvironmentManagedApis();
        return client.getAsync(this.resourceGroup, this.integrationServiceEnvironmentName, this.apiName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ApiResourceProperties properties() {
        return this.inner().properties();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ManagedApiImpl withExistingIntegrationServiceEnvironment(String resourceGroup, String integrationServiceEnvironmentName) {
        this.resourceGroup = resourceGroup;
        this.integrationServiceEnvironmentName = integrationServiceEnvironmentName;
        return this;
    }

}
