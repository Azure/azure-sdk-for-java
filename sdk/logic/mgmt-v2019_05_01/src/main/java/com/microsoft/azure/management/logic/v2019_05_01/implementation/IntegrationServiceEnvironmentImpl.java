/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.logic.v2019_05_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironment;
import rx.Observable;
import com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironmentProperties;

class IntegrationServiceEnvironmentImpl extends GroupableResourceCoreImpl<IntegrationServiceEnvironment, IntegrationServiceEnvironmentInner, IntegrationServiceEnvironmentImpl, LogicManager> implements IntegrationServiceEnvironment, IntegrationServiceEnvironment.Definition, IntegrationServiceEnvironment.Update {
    IntegrationServiceEnvironmentImpl(String name, IntegrationServiceEnvironmentInner inner, LogicManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<IntegrationServiceEnvironment> createResourceAsync() {
        IntegrationServiceEnvironmentsInner client = this.manager().inner().integrationServiceEnvironments();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<IntegrationServiceEnvironment> updateResourceAsync() {
        IntegrationServiceEnvironmentsInner client = this.manager().inner().integrationServiceEnvironments();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<IntegrationServiceEnvironmentInner> getInnerAsync() {
        IntegrationServiceEnvironmentsInner client = this.manager().inner().integrationServiceEnvironments();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public IntegrationServiceEnvironmentProperties properties() {
        return this.inner().properties();
    }

    @Override
    public IntegrationServiceEnvironmentSkuInner sku() {
        return this.inner().sku();
    }

    @Override
    public IntegrationServiceEnvironmentImpl withProperties(IntegrationServiceEnvironmentProperties properties) {
        this.inner().withProperties(properties);
        return this;
    }

    @Override
    public IntegrationServiceEnvironmentImpl withSku(IntegrationServiceEnvironmentSkuInner sku) {
        this.inner().withSku(sku);
        return this;
    }

}
