/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.logic.v2019_05_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.logic.v2019_05_01.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in IntegrationServiceEnvironmentNetworkHealths.
 */
public class IntegrationServiceEnvironmentNetworkHealthsInner {
    /** The Retrofit service to perform REST calls. */
    private IntegrationServiceEnvironmentNetworkHealthsService service;
    /** The service client containing this operation class. */
    private LogicManagementClientImpl client;

    /**
     * Initializes an instance of IntegrationServiceEnvironmentNetworkHealthsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public IntegrationServiceEnvironmentNetworkHealthsInner(Retrofit retrofit, LogicManagementClientImpl client) {
        this.service = retrofit.create(IntegrationServiceEnvironmentNetworkHealthsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for IntegrationServiceEnvironmentNetworkHealths to be
     * used by Retrofit to perform actually REST calls.
     */
    interface IntegrationServiceEnvironmentNetworkHealthsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2019_05_01.IntegrationServiceEnvironmentNetworkHealths get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/health/network")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroup") String resourceGroup, @Path("integrationServiceEnvironmentName") String integrationServiceEnvironmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the integration service environment network health.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Map&lt;String, IntegrationServiceEnvironmentSubnetNetworkHealthInner&gt; object if successful.
     */
    public Map<String, IntegrationServiceEnvironmentSubnetNetworkHealthInner> get(String resourceGroup, String integrationServiceEnvironmentName) {
        return getWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName).toBlocking().single().body();
    }

    /**
     * Gets the integration service environment network health.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Map<String, IntegrationServiceEnvironmentSubnetNetworkHealthInner>> getAsync(String resourceGroup, String integrationServiceEnvironmentName, final ServiceCallback<Map<String, IntegrationServiceEnvironmentSubnetNetworkHealthInner>> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName), serviceCallback);
    }

    /**
     * Gets the integration service environment network health.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Map&lt;String, IntegrationServiceEnvironmentSubnetNetworkHealthInner&gt; object
     */
    public Observable<Map<String, IntegrationServiceEnvironmentSubnetNetworkHealthInner>> getAsync(String resourceGroup, String integrationServiceEnvironmentName) {
        return getWithServiceResponseAsync(resourceGroup, integrationServiceEnvironmentName).map(new Func1<ServiceResponse<Map<String, IntegrationServiceEnvironmentSubnetNetworkHealthInner>>, Map<String, IntegrationServiceEnvironmentSubnetNetworkHealthInner>>() {
            @Override
            public Map<String, IntegrationServiceEnvironmentSubnetNetworkHealthInner> call(ServiceResponse<Map<String, IntegrationServiceEnvironmentSubnetNetworkHealthInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the integration service environment network health.
     *
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Map&lt;String, IntegrationServiceEnvironmentSubnetNetworkHealthInner&gt; object
     */
    public Observable<ServiceResponse<Map<String, IntegrationServiceEnvironmentSubnetNetworkHealthInner>>> getWithServiceResponseAsync(String resourceGroup, String integrationServiceEnvironmentName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroup == null) {
            throw new IllegalArgumentException("Parameter resourceGroup is required and cannot be null.");
        }
        if (integrationServiceEnvironmentName == null) {
            throw new IllegalArgumentException("Parameter integrationServiceEnvironmentName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroup, integrationServiceEnvironmentName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Map<String, IntegrationServiceEnvironmentSubnetNetworkHealthInner>>>>() {
                @Override
                public Observable<ServiceResponse<Map<String, IntegrationServiceEnvironmentSubnetNetworkHealthInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Map<String, IntegrationServiceEnvironmentSubnetNetworkHealthInner>> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Map<String, IntegrationServiceEnvironmentSubnetNetworkHealthInner>> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Map<String, IntegrationServiceEnvironmentSubnetNetworkHealthInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Map<String, IntegrationServiceEnvironmentSubnetNetworkHealthInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
