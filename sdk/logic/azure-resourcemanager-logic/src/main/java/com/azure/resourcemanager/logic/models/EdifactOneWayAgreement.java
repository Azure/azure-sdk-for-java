// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Edifact one way agreement.
 */
@Fluent
public final class EdifactOneWayAgreement implements JsonSerializable<EdifactOneWayAgreement> {
    /*
     * The sender business identity
     */
    private BusinessIdentity senderBusinessIdentity;

    /*
     * The receiver business identity
     */
    private BusinessIdentity receiverBusinessIdentity;

    /*
     * The EDIFACT protocol settings.
     */
    private EdifactProtocolSettings protocolSettings;

    /**
     * Creates an instance of EdifactOneWayAgreement class.
     */
    public EdifactOneWayAgreement() {
    }

    /**
     * Get the senderBusinessIdentity property: The sender business identity.
     * 
     * @return the senderBusinessIdentity value.
     */
    public BusinessIdentity senderBusinessIdentity() {
        return this.senderBusinessIdentity;
    }

    /**
     * Set the senderBusinessIdentity property: The sender business identity.
     * 
     * @param senderBusinessIdentity the senderBusinessIdentity value to set.
     * @return the EdifactOneWayAgreement object itself.
     */
    public EdifactOneWayAgreement withSenderBusinessIdentity(BusinessIdentity senderBusinessIdentity) {
        this.senderBusinessIdentity = senderBusinessIdentity;
        return this;
    }

    /**
     * Get the receiverBusinessIdentity property: The receiver business identity.
     * 
     * @return the receiverBusinessIdentity value.
     */
    public BusinessIdentity receiverBusinessIdentity() {
        return this.receiverBusinessIdentity;
    }

    /**
     * Set the receiverBusinessIdentity property: The receiver business identity.
     * 
     * @param receiverBusinessIdentity the receiverBusinessIdentity value to set.
     * @return the EdifactOneWayAgreement object itself.
     */
    public EdifactOneWayAgreement withReceiverBusinessIdentity(BusinessIdentity receiverBusinessIdentity) {
        this.receiverBusinessIdentity = receiverBusinessIdentity;
        return this;
    }

    /**
     * Get the protocolSettings property: The EDIFACT protocol settings.
     * 
     * @return the protocolSettings value.
     */
    public EdifactProtocolSettings protocolSettings() {
        return this.protocolSettings;
    }

    /**
     * Set the protocolSettings property: The EDIFACT protocol settings.
     * 
     * @param protocolSettings the protocolSettings value to set.
     * @return the EdifactOneWayAgreement object itself.
     */
    public EdifactOneWayAgreement withProtocolSettings(EdifactProtocolSettings protocolSettings) {
        this.protocolSettings = protocolSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (senderBusinessIdentity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property senderBusinessIdentity in model EdifactOneWayAgreement"));
        } else {
            senderBusinessIdentity().validate();
        }
        if (receiverBusinessIdentity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property receiverBusinessIdentity in model EdifactOneWayAgreement"));
        } else {
            receiverBusinessIdentity().validate();
        }
        if (protocolSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property protocolSettings in model EdifactOneWayAgreement"));
        } else {
            protocolSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EdifactOneWayAgreement.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("senderBusinessIdentity", this.senderBusinessIdentity);
        jsonWriter.writeJsonField("receiverBusinessIdentity", this.receiverBusinessIdentity);
        jsonWriter.writeJsonField("protocolSettings", this.protocolSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EdifactOneWayAgreement from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EdifactOneWayAgreement if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EdifactOneWayAgreement.
     */
    public static EdifactOneWayAgreement fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EdifactOneWayAgreement deserializedEdifactOneWayAgreement = new EdifactOneWayAgreement();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("senderBusinessIdentity".equals(fieldName)) {
                    deserializedEdifactOneWayAgreement.senderBusinessIdentity = BusinessIdentity.fromJson(reader);
                } else if ("receiverBusinessIdentity".equals(fieldName)) {
                    deserializedEdifactOneWayAgreement.receiverBusinessIdentity = BusinessIdentity.fromJson(reader);
                } else if ("protocolSettings".equals(fieldName)) {
                    deserializedEdifactOneWayAgreement.protocolSettings = EdifactProtocolSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEdifactOneWayAgreement;
        });
    }
}
