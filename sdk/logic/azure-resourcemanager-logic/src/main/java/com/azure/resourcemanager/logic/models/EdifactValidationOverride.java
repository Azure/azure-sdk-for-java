// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Edifact validation override settings.
 */
@Fluent
public final class EdifactValidationOverride implements JsonSerializable<EdifactValidationOverride> {
    /*
     * The message id on which the validation settings has to be applied.
     */
    private String messageId;

    /*
     * The value indicating whether to validate character Set.
     */
    private boolean enforceCharacterSet;

    /*
     * The value indicating whether to validate EDI types.
     */
    private boolean validateEdiTypes;

    /*
     * The value indicating whether to validate XSD types.
     */
    private boolean validateXsdTypes;

    /*
     * The value indicating whether to allow leading and trailing spaces and zeroes.
     */
    private boolean allowLeadingAndTrailingSpacesAndZeroes;

    /*
     * The trailing separator policy.
     */
    private TrailingSeparatorPolicy trailingSeparatorPolicy;

    /*
     * The value indicating whether to trim leading and trailing spaces and zeroes.
     */
    private boolean trimLeadingAndTrailingSpacesAndZeroes;

    /**
     * Creates an instance of EdifactValidationOverride class.
     */
    public EdifactValidationOverride() {
    }

    /**
     * Get the messageId property: The message id on which the validation settings has to be applied.
     * 
     * @return the messageId value.
     */
    public String messageId() {
        return this.messageId;
    }

    /**
     * Set the messageId property: The message id on which the validation settings has to be applied.
     * 
     * @param messageId the messageId value to set.
     * @return the EdifactValidationOverride object itself.
     */
    public EdifactValidationOverride withMessageId(String messageId) {
        this.messageId = messageId;
        return this;
    }

    /**
     * Get the enforceCharacterSet property: The value indicating whether to validate character Set.
     * 
     * @return the enforceCharacterSet value.
     */
    public boolean enforceCharacterSet() {
        return this.enforceCharacterSet;
    }

    /**
     * Set the enforceCharacterSet property: The value indicating whether to validate character Set.
     * 
     * @param enforceCharacterSet the enforceCharacterSet value to set.
     * @return the EdifactValidationOverride object itself.
     */
    public EdifactValidationOverride withEnforceCharacterSet(boolean enforceCharacterSet) {
        this.enforceCharacterSet = enforceCharacterSet;
        return this;
    }

    /**
     * Get the validateEdiTypes property: The value indicating whether to validate EDI types.
     * 
     * @return the validateEdiTypes value.
     */
    public boolean validateEdiTypes() {
        return this.validateEdiTypes;
    }

    /**
     * Set the validateEdiTypes property: The value indicating whether to validate EDI types.
     * 
     * @param validateEdiTypes the validateEdiTypes value to set.
     * @return the EdifactValidationOverride object itself.
     */
    public EdifactValidationOverride withValidateEdiTypes(boolean validateEdiTypes) {
        this.validateEdiTypes = validateEdiTypes;
        return this;
    }

    /**
     * Get the validateXsdTypes property: The value indicating whether to validate XSD types.
     * 
     * @return the validateXsdTypes value.
     */
    public boolean validateXsdTypes() {
        return this.validateXsdTypes;
    }

    /**
     * Set the validateXsdTypes property: The value indicating whether to validate XSD types.
     * 
     * @param validateXsdTypes the validateXsdTypes value to set.
     * @return the EdifactValidationOverride object itself.
     */
    public EdifactValidationOverride withValidateXsdTypes(boolean validateXsdTypes) {
        this.validateXsdTypes = validateXsdTypes;
        return this;
    }

    /**
     * Get the allowLeadingAndTrailingSpacesAndZeroes property: The value indicating whether to allow leading and
     * trailing spaces and zeroes.
     * 
     * @return the allowLeadingAndTrailingSpacesAndZeroes value.
     */
    public boolean allowLeadingAndTrailingSpacesAndZeroes() {
        return this.allowLeadingAndTrailingSpacesAndZeroes;
    }

    /**
     * Set the allowLeadingAndTrailingSpacesAndZeroes property: The value indicating whether to allow leading and
     * trailing spaces and zeroes.
     * 
     * @param allowLeadingAndTrailingSpacesAndZeroes the allowLeadingAndTrailingSpacesAndZeroes value to set.
     * @return the EdifactValidationOverride object itself.
     */
    public EdifactValidationOverride
        withAllowLeadingAndTrailingSpacesAndZeroes(boolean allowLeadingAndTrailingSpacesAndZeroes) {
        this.allowLeadingAndTrailingSpacesAndZeroes = allowLeadingAndTrailingSpacesAndZeroes;
        return this;
    }

    /**
     * Get the trailingSeparatorPolicy property: The trailing separator policy.
     * 
     * @return the trailingSeparatorPolicy value.
     */
    public TrailingSeparatorPolicy trailingSeparatorPolicy() {
        return this.trailingSeparatorPolicy;
    }

    /**
     * Set the trailingSeparatorPolicy property: The trailing separator policy.
     * 
     * @param trailingSeparatorPolicy the trailingSeparatorPolicy value to set.
     * @return the EdifactValidationOverride object itself.
     */
    public EdifactValidationOverride withTrailingSeparatorPolicy(TrailingSeparatorPolicy trailingSeparatorPolicy) {
        this.trailingSeparatorPolicy = trailingSeparatorPolicy;
        return this;
    }

    /**
     * Get the trimLeadingAndTrailingSpacesAndZeroes property: The value indicating whether to trim leading and trailing
     * spaces and zeroes.
     * 
     * @return the trimLeadingAndTrailingSpacesAndZeroes value.
     */
    public boolean trimLeadingAndTrailingSpacesAndZeroes() {
        return this.trimLeadingAndTrailingSpacesAndZeroes;
    }

    /**
     * Set the trimLeadingAndTrailingSpacesAndZeroes property: The value indicating whether to trim leading and trailing
     * spaces and zeroes.
     * 
     * @param trimLeadingAndTrailingSpacesAndZeroes the trimLeadingAndTrailingSpacesAndZeroes value to set.
     * @return the EdifactValidationOverride object itself.
     */
    public EdifactValidationOverride
        withTrimLeadingAndTrailingSpacesAndZeroes(boolean trimLeadingAndTrailingSpacesAndZeroes) {
        this.trimLeadingAndTrailingSpacesAndZeroes = trimLeadingAndTrailingSpacesAndZeroes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (messageId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property messageId in model EdifactValidationOverride"));
        }
        if (trailingSeparatorPolicy() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property trailingSeparatorPolicy in model EdifactValidationOverride"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EdifactValidationOverride.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("messageId", this.messageId);
        jsonWriter.writeBooleanField("enforceCharacterSet", this.enforceCharacterSet);
        jsonWriter.writeBooleanField("validateEDITypes", this.validateEdiTypes);
        jsonWriter.writeBooleanField("validateXSDTypes", this.validateXsdTypes);
        jsonWriter.writeBooleanField("allowLeadingAndTrailingSpacesAndZeroes",
            this.allowLeadingAndTrailingSpacesAndZeroes);
        jsonWriter.writeStringField("trailingSeparatorPolicy",
            this.trailingSeparatorPolicy == null ? null : this.trailingSeparatorPolicy.toString());
        jsonWriter.writeBooleanField("trimLeadingAndTrailingSpacesAndZeroes",
            this.trimLeadingAndTrailingSpacesAndZeroes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EdifactValidationOverride from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EdifactValidationOverride if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EdifactValidationOverride.
     */
    public static EdifactValidationOverride fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EdifactValidationOverride deserializedEdifactValidationOverride = new EdifactValidationOverride();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("messageId".equals(fieldName)) {
                    deserializedEdifactValidationOverride.messageId = reader.getString();
                } else if ("enforceCharacterSet".equals(fieldName)) {
                    deserializedEdifactValidationOverride.enforceCharacterSet = reader.getBoolean();
                } else if ("validateEDITypes".equals(fieldName)) {
                    deserializedEdifactValidationOverride.validateEdiTypes = reader.getBoolean();
                } else if ("validateXSDTypes".equals(fieldName)) {
                    deserializedEdifactValidationOverride.validateXsdTypes = reader.getBoolean();
                } else if ("allowLeadingAndTrailingSpacesAndZeroes".equals(fieldName)) {
                    deserializedEdifactValidationOverride.allowLeadingAndTrailingSpacesAndZeroes = reader.getBoolean();
                } else if ("trailingSeparatorPolicy".equals(fieldName)) {
                    deserializedEdifactValidationOverride.trailingSeparatorPolicy
                        = TrailingSeparatorPolicy.fromString(reader.getString());
                } else if ("trimLeadingAndTrailingSpacesAndZeroes".equals(fieldName)) {
                    deserializedEdifactValidationOverride.trimLeadingAndTrailingSpacesAndZeroes = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEdifactValidationOverride;
        });
    }
}
