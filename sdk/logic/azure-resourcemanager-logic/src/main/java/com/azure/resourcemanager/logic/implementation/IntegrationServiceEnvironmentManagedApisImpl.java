// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.logic.fluent.IntegrationServiceEnvironmentManagedApisClient;
import com.azure.resourcemanager.logic.fluent.models.ManagedApiInner;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironmentManagedApis;
import com.azure.resourcemanager.logic.models.ManagedApi;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class IntegrationServiceEnvironmentManagedApisImpl implements IntegrationServiceEnvironmentManagedApis {
    @JsonIgnore
    private final ClientLogger logger = new ClientLogger(IntegrationServiceEnvironmentManagedApisImpl.class);

    private final IntegrationServiceEnvironmentManagedApisClient innerClient;

    private final com.azure.resourcemanager.logic.LogicManager serviceManager;

    public IntegrationServiceEnvironmentManagedApisImpl(
        IntegrationServiceEnvironmentManagedApisClient innerClient,
        com.azure.resourcemanager.logic.LogicManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ManagedApi> list(String resourceGroup, String integrationServiceEnvironmentName) {
        PagedIterable<ManagedApiInner> inner =
            this.serviceClient().list(resourceGroup, integrationServiceEnvironmentName);
        return Utils.mapPage(inner, inner1 -> new ManagedApiImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedApi> list(
        String resourceGroup, String integrationServiceEnvironmentName, Context context) {
        PagedIterable<ManagedApiInner> inner =
            this.serviceClient().list(resourceGroup, integrationServiceEnvironmentName, context);
        return Utils.mapPage(inner, inner1 -> new ManagedApiImpl(inner1, this.manager()));
    }

    public ManagedApi get(String resourceGroup, String integrationServiceEnvironmentName, String apiName) {
        ManagedApiInner inner = this.serviceClient().get(resourceGroup, integrationServiceEnvironmentName, apiName);
        if (inner != null) {
            return new ManagedApiImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagedApi> getWithResponse(
        String resourceGroup, String integrationServiceEnvironmentName, String apiName, Context context) {
        Response<ManagedApiInner> inner =
            this.serviceClient().getWithResponse(resourceGroup, integrationServiceEnvironmentName, apiName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagedApiImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ManagedApi put(String resourceGroup, String integrationServiceEnvironmentName, String apiName) {
        ManagedApiInner inner = this.serviceClient().put(resourceGroup, integrationServiceEnvironmentName, apiName);
        if (inner != null) {
            return new ManagedApiImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ManagedApi put(
        String resourceGroup, String integrationServiceEnvironmentName, String apiName, Context context) {
        ManagedApiInner inner =
            this.serviceClient().put(resourceGroup, integrationServiceEnvironmentName, apiName, context);
        if (inner != null) {
            return new ManagedApiImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroup, String integrationServiceEnvironmentName, String apiName) {
        this.serviceClient().delete(resourceGroup, integrationServiceEnvironmentName, apiName);
    }

    public void delete(
        String resourceGroup, String integrationServiceEnvironmentName, String apiName, Context context) {
        this.serviceClient().delete(resourceGroup, integrationServiceEnvironmentName, apiName, context);
    }

    private IntegrationServiceEnvironmentManagedApisClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.logic.LogicManager manager() {
        return this.serviceManager;
    }
}
