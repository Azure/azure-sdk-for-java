// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AS2 agreement mdn settings.
 */
@Fluent
public final class AS2MdnSettings implements JsonSerializable<AS2MdnSettings> {
    /*
     * The value indicating whether to send or request a MDN.
     */
    private boolean needMdn;

    /*
     * The value indicating whether the MDN needs to be signed or not.
     */
    private boolean signMdn;

    /*
     * The value indicating whether to send the asynchronous MDN.
     */
    private boolean sendMdnAsynchronously;

    /*
     * The receipt delivery URL.
     */
    private String receiptDeliveryUrl;

    /*
     * The disposition notification to header value.
     */
    private String dispositionNotificationTo;

    /*
     * The value indicating whether to sign the outbound MDN if optional.
     */
    private boolean signOutboundMdnIfOptional;

    /*
     * The MDN text.
     */
    private String mdnText;

    /*
     * The value indicating whether to send inbound MDN to message box.
     */
    private boolean sendInboundMdnToMessageBox;

    /*
     * The signing or hashing algorithm.
     */
    private HashingAlgorithm micHashingAlgorithm;

    /**
     * Creates an instance of AS2MdnSettings class.
     */
    public AS2MdnSettings() {
    }

    /**
     * Get the needMdn property: The value indicating whether to send or request a MDN.
     * 
     * @return the needMdn value.
     */
    public boolean needMdn() {
        return this.needMdn;
    }

    /**
     * Set the needMdn property: The value indicating whether to send or request a MDN.
     * 
     * @param needMdn the needMdn value to set.
     * @return the AS2MdnSettings object itself.
     */
    public AS2MdnSettings withNeedMdn(boolean needMdn) {
        this.needMdn = needMdn;
        return this;
    }

    /**
     * Get the signMdn property: The value indicating whether the MDN needs to be signed or not.
     * 
     * @return the signMdn value.
     */
    public boolean signMdn() {
        return this.signMdn;
    }

    /**
     * Set the signMdn property: The value indicating whether the MDN needs to be signed or not.
     * 
     * @param signMdn the signMdn value to set.
     * @return the AS2MdnSettings object itself.
     */
    public AS2MdnSettings withSignMdn(boolean signMdn) {
        this.signMdn = signMdn;
        return this;
    }

    /**
     * Get the sendMdnAsynchronously property: The value indicating whether to send the asynchronous MDN.
     * 
     * @return the sendMdnAsynchronously value.
     */
    public boolean sendMdnAsynchronously() {
        return this.sendMdnAsynchronously;
    }

    /**
     * Set the sendMdnAsynchronously property: The value indicating whether to send the asynchronous MDN.
     * 
     * @param sendMdnAsynchronously the sendMdnAsynchronously value to set.
     * @return the AS2MdnSettings object itself.
     */
    public AS2MdnSettings withSendMdnAsynchronously(boolean sendMdnAsynchronously) {
        this.sendMdnAsynchronously = sendMdnAsynchronously;
        return this;
    }

    /**
     * Get the receiptDeliveryUrl property: The receipt delivery URL.
     * 
     * @return the receiptDeliveryUrl value.
     */
    public String receiptDeliveryUrl() {
        return this.receiptDeliveryUrl;
    }

    /**
     * Set the receiptDeliveryUrl property: The receipt delivery URL.
     * 
     * @param receiptDeliveryUrl the receiptDeliveryUrl value to set.
     * @return the AS2MdnSettings object itself.
     */
    public AS2MdnSettings withReceiptDeliveryUrl(String receiptDeliveryUrl) {
        this.receiptDeliveryUrl = receiptDeliveryUrl;
        return this;
    }

    /**
     * Get the dispositionNotificationTo property: The disposition notification to header value.
     * 
     * @return the dispositionNotificationTo value.
     */
    public String dispositionNotificationTo() {
        return this.dispositionNotificationTo;
    }

    /**
     * Set the dispositionNotificationTo property: The disposition notification to header value.
     * 
     * @param dispositionNotificationTo the dispositionNotificationTo value to set.
     * @return the AS2MdnSettings object itself.
     */
    public AS2MdnSettings withDispositionNotificationTo(String dispositionNotificationTo) {
        this.dispositionNotificationTo = dispositionNotificationTo;
        return this;
    }

    /**
     * Get the signOutboundMdnIfOptional property: The value indicating whether to sign the outbound MDN if optional.
     * 
     * @return the signOutboundMdnIfOptional value.
     */
    public boolean signOutboundMdnIfOptional() {
        return this.signOutboundMdnIfOptional;
    }

    /**
     * Set the signOutboundMdnIfOptional property: The value indicating whether to sign the outbound MDN if optional.
     * 
     * @param signOutboundMdnIfOptional the signOutboundMdnIfOptional value to set.
     * @return the AS2MdnSettings object itself.
     */
    public AS2MdnSettings withSignOutboundMdnIfOptional(boolean signOutboundMdnIfOptional) {
        this.signOutboundMdnIfOptional = signOutboundMdnIfOptional;
        return this;
    }

    /**
     * Get the mdnText property: The MDN text.
     * 
     * @return the mdnText value.
     */
    public String mdnText() {
        return this.mdnText;
    }

    /**
     * Set the mdnText property: The MDN text.
     * 
     * @param mdnText the mdnText value to set.
     * @return the AS2MdnSettings object itself.
     */
    public AS2MdnSettings withMdnText(String mdnText) {
        this.mdnText = mdnText;
        return this;
    }

    /**
     * Get the sendInboundMdnToMessageBox property: The value indicating whether to send inbound MDN to message box.
     * 
     * @return the sendInboundMdnToMessageBox value.
     */
    public boolean sendInboundMdnToMessageBox() {
        return this.sendInboundMdnToMessageBox;
    }

    /**
     * Set the sendInboundMdnToMessageBox property: The value indicating whether to send inbound MDN to message box.
     * 
     * @param sendInboundMdnToMessageBox the sendInboundMdnToMessageBox value to set.
     * @return the AS2MdnSettings object itself.
     */
    public AS2MdnSettings withSendInboundMdnToMessageBox(boolean sendInboundMdnToMessageBox) {
        this.sendInboundMdnToMessageBox = sendInboundMdnToMessageBox;
        return this;
    }

    /**
     * Get the micHashingAlgorithm property: The signing or hashing algorithm.
     * 
     * @return the micHashingAlgorithm value.
     */
    public HashingAlgorithm micHashingAlgorithm() {
        return this.micHashingAlgorithm;
    }

    /**
     * Set the micHashingAlgorithm property: The signing or hashing algorithm.
     * 
     * @param micHashingAlgorithm the micHashingAlgorithm value to set.
     * @return the AS2MdnSettings object itself.
     */
    public AS2MdnSettings withMicHashingAlgorithm(HashingAlgorithm micHashingAlgorithm) {
        this.micHashingAlgorithm = micHashingAlgorithm;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (micHashingAlgorithm() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property micHashingAlgorithm in model AS2MdnSettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AS2MdnSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("needMDN", this.needMdn);
        jsonWriter.writeBooleanField("signMDN", this.signMdn);
        jsonWriter.writeBooleanField("sendMDNAsynchronously", this.sendMdnAsynchronously);
        jsonWriter.writeBooleanField("signOutboundMDNIfOptional", this.signOutboundMdnIfOptional);
        jsonWriter.writeBooleanField("sendInboundMDNToMessageBox", this.sendInboundMdnToMessageBox);
        jsonWriter.writeStringField("micHashingAlgorithm",
            this.micHashingAlgorithm == null ? null : this.micHashingAlgorithm.toString());
        jsonWriter.writeStringField("receiptDeliveryUrl", this.receiptDeliveryUrl);
        jsonWriter.writeStringField("dispositionNotificationTo", this.dispositionNotificationTo);
        jsonWriter.writeStringField("mdnText", this.mdnText);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AS2MdnSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AS2MdnSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AS2MdnSettings.
     */
    public static AS2MdnSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AS2MdnSettings deserializedAS2MdnSettings = new AS2MdnSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("needMDN".equals(fieldName)) {
                    deserializedAS2MdnSettings.needMdn = reader.getBoolean();
                } else if ("signMDN".equals(fieldName)) {
                    deserializedAS2MdnSettings.signMdn = reader.getBoolean();
                } else if ("sendMDNAsynchronously".equals(fieldName)) {
                    deserializedAS2MdnSettings.sendMdnAsynchronously = reader.getBoolean();
                } else if ("signOutboundMDNIfOptional".equals(fieldName)) {
                    deserializedAS2MdnSettings.signOutboundMdnIfOptional = reader.getBoolean();
                } else if ("sendInboundMDNToMessageBox".equals(fieldName)) {
                    deserializedAS2MdnSettings.sendInboundMdnToMessageBox = reader.getBoolean();
                } else if ("micHashingAlgorithm".equals(fieldName)) {
                    deserializedAS2MdnSettings.micHashingAlgorithm = HashingAlgorithm.fromString(reader.getString());
                } else if ("receiptDeliveryUrl".equals(fieldName)) {
                    deserializedAS2MdnSettings.receiptDeliveryUrl = reader.getString();
                } else if ("dispositionNotificationTo".equals(fieldName)) {
                    deserializedAS2MdnSettings.dispositionNotificationTo = reader.getString();
                } else if ("mdnText".equals(fieldName)) {
                    deserializedAS2MdnSettings.mdnText = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAS2MdnSettings;
        });
    }
}
