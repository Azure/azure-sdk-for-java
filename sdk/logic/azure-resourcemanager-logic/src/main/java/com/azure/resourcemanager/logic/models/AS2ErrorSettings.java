// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AS2 agreement error settings.
 */
@Fluent
public final class AS2ErrorSettings implements JsonSerializable<AS2ErrorSettings> {
    /*
     * The value indicating whether to suspend duplicate message.
     */
    private boolean suspendDuplicateMessage;

    /*
     * The value indicating whether to resend message If MDN is not received.
     */
    private boolean resendIfMdnNotReceived;

    /**
     * Creates an instance of AS2ErrorSettings class.
     */
    public AS2ErrorSettings() {
    }

    /**
     * Get the suspendDuplicateMessage property: The value indicating whether to suspend duplicate message.
     * 
     * @return the suspendDuplicateMessage value.
     */
    public boolean suspendDuplicateMessage() {
        return this.suspendDuplicateMessage;
    }

    /**
     * Set the suspendDuplicateMessage property: The value indicating whether to suspend duplicate message.
     * 
     * @param suspendDuplicateMessage the suspendDuplicateMessage value to set.
     * @return the AS2ErrorSettings object itself.
     */
    public AS2ErrorSettings withSuspendDuplicateMessage(boolean suspendDuplicateMessage) {
        this.suspendDuplicateMessage = suspendDuplicateMessage;
        return this;
    }

    /**
     * Get the resendIfMdnNotReceived property: The value indicating whether to resend message If MDN is not received.
     * 
     * @return the resendIfMdnNotReceived value.
     */
    public boolean resendIfMdnNotReceived() {
        return this.resendIfMdnNotReceived;
    }

    /**
     * Set the resendIfMdnNotReceived property: The value indicating whether to resend message If MDN is not received.
     * 
     * @param resendIfMdnNotReceived the resendIfMdnNotReceived value to set.
     * @return the AS2ErrorSettings object itself.
     */
    public AS2ErrorSettings withResendIfMdnNotReceived(boolean resendIfMdnNotReceived) {
        this.resendIfMdnNotReceived = resendIfMdnNotReceived;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("suspendDuplicateMessage", this.suspendDuplicateMessage);
        jsonWriter.writeBooleanField("resendIfMDNNotReceived", this.resendIfMdnNotReceived);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AS2ErrorSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AS2ErrorSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AS2ErrorSettings.
     */
    public static AS2ErrorSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AS2ErrorSettings deserializedAS2ErrorSettings = new AS2ErrorSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("suspendDuplicateMessage".equals(fieldName)) {
                    deserializedAS2ErrorSettings.suspendDuplicateMessage = reader.getBoolean();
                } else if ("resendIfMDNNotReceived".equals(fieldName)) {
                    deserializedAS2ErrorSettings.resendIfMdnNotReceived = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAS2ErrorSettings;
        });
    }
}
