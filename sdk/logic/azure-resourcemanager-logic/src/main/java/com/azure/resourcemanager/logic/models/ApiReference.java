// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Api reference.
 */
@Fluent
public final class ApiReference extends ResourceReference {
    /*
     * The display name of the api.
     */
    private String displayName;

    /*
     * The description of the api.
     */
    private String description;

    /*
     * The icon uri of the api.
     */
    private String iconUri;

    /*
     * The swagger of the api.
     */
    private Object swagger;

    /*
     * The brand color of the api.
     */
    private String brandColor;

    /*
     * The tier.
     */
    private ApiTier category;

    /*
     * The integration service environment reference.
     */
    private ResourceReference integrationServiceEnvironment;

    /*
     * Gets the resource type.
     */
    private String type;

    /*
     * Gets the resource name.
     */
    private String name;

    /**
     * Creates an instance of ApiReference class.
     */
    public ApiReference() {
    }

    /**
     * Get the displayName property: The display name of the api.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the api.
     * 
     * @param displayName the displayName value to set.
     * @return the ApiReference object itself.
     */
    public ApiReference withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: The description of the api.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the api.
     * 
     * @param description the description value to set.
     * @return the ApiReference object itself.
     */
    public ApiReference withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the iconUri property: The icon uri of the api.
     * 
     * @return the iconUri value.
     */
    public String iconUri() {
        return this.iconUri;
    }

    /**
     * Set the iconUri property: The icon uri of the api.
     * 
     * @param iconUri the iconUri value to set.
     * @return the ApiReference object itself.
     */
    public ApiReference withIconUri(String iconUri) {
        this.iconUri = iconUri;
        return this;
    }

    /**
     * Get the swagger property: The swagger of the api.
     * 
     * @return the swagger value.
     */
    public Object swagger() {
        return this.swagger;
    }

    /**
     * Set the swagger property: The swagger of the api.
     * 
     * @param swagger the swagger value to set.
     * @return the ApiReference object itself.
     */
    public ApiReference withSwagger(Object swagger) {
        this.swagger = swagger;
        return this;
    }

    /**
     * Get the brandColor property: The brand color of the api.
     * 
     * @return the brandColor value.
     */
    public String brandColor() {
        return this.brandColor;
    }

    /**
     * Set the brandColor property: The brand color of the api.
     * 
     * @param brandColor the brandColor value to set.
     * @return the ApiReference object itself.
     */
    public ApiReference withBrandColor(String brandColor) {
        this.brandColor = brandColor;
        return this;
    }

    /**
     * Get the category property: The tier.
     * 
     * @return the category value.
     */
    public ApiTier category() {
        return this.category;
    }

    /**
     * Set the category property: The tier.
     * 
     * @param category the category value to set.
     * @return the ApiReference object itself.
     */
    public ApiReference withCategory(ApiTier category) {
        this.category = category;
        return this;
    }

    /**
     * Get the integrationServiceEnvironment property: The integration service environment reference.
     * 
     * @return the integrationServiceEnvironment value.
     */
    public ResourceReference integrationServiceEnvironment() {
        return this.integrationServiceEnvironment;
    }

    /**
     * Set the integrationServiceEnvironment property: The integration service environment reference.
     * 
     * @param integrationServiceEnvironment the integrationServiceEnvironment value to set.
     * @return the ApiReference object itself.
     */
    public ApiReference withIntegrationServiceEnvironment(ResourceReference integrationServiceEnvironment) {
        this.integrationServiceEnvironment = integrationServiceEnvironment;
        return this;
    }

    /**
     * Get the type property: Gets the resource type.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: Gets the resource name.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ApiReference withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (integrationServiceEnvironment() != null) {
            integrationServiceEnvironment().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", id());
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("iconUri", this.iconUri);
        jsonWriter.writeUntypedField("swagger", this.swagger);
        jsonWriter.writeStringField("brandColor", this.brandColor);
        jsonWriter.writeStringField("category", this.category == null ? null : this.category.toString());
        jsonWriter.writeJsonField("integrationServiceEnvironment", this.integrationServiceEnvironment);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiReference if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApiReference.
     */
    public static ApiReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiReference deserializedApiReference = new ApiReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedApiReference.withId(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedApiReference.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedApiReference.type = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedApiReference.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedApiReference.description = reader.getString();
                } else if ("iconUri".equals(fieldName)) {
                    deserializedApiReference.iconUri = reader.getString();
                } else if ("swagger".equals(fieldName)) {
                    deserializedApiReference.swagger = reader.readUntyped();
                } else if ("brandColor".equals(fieldName)) {
                    deserializedApiReference.brandColor = reader.getString();
                } else if ("category".equals(fieldName)) {
                    deserializedApiReference.category = ApiTier.fromString(reader.getString());
                } else if ("integrationServiceEnvironment".equals(fieldName)) {
                    deserializedApiReference.integrationServiceEnvironment = ResourceReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApiReference;
        });
    }
}
