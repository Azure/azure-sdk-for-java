// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The azure async operation resource.
 */
@Fluent
public final class IntegrationServiceEnvironmentNetworkDependency
    implements JsonSerializable<IntegrationServiceEnvironmentNetworkDependency> {
    /*
     * The network dependency category type.
     */
    private IntegrationServiceEnvironmentNetworkDependencyCategoryType category;

    /*
     * The display name.
     */
    private String displayName;

    /*
     * The endpoints.
     */
    private List<IntegrationServiceEnvironmentNetworkEndpoint> endpoints;

    /**
     * Creates an instance of IntegrationServiceEnvironmentNetworkDependency class.
     */
    public IntegrationServiceEnvironmentNetworkDependency() {
    }

    /**
     * Get the category property: The network dependency category type.
     * 
     * @return the category value.
     */
    public IntegrationServiceEnvironmentNetworkDependencyCategoryType category() {
        return this.category;
    }

    /**
     * Set the category property: The network dependency category type.
     * 
     * @param category the category value to set.
     * @return the IntegrationServiceEnvironmentNetworkDependency object itself.
     */
    public IntegrationServiceEnvironmentNetworkDependency
        withCategory(IntegrationServiceEnvironmentNetworkDependencyCategoryType category) {
        this.category = category;
        return this;
    }

    /**
     * Get the displayName property: The display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name.
     * 
     * @param displayName the displayName value to set.
     * @return the IntegrationServiceEnvironmentNetworkDependency object itself.
     */
    public IntegrationServiceEnvironmentNetworkDependency withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the endpoints property: The endpoints.
     * 
     * @return the endpoints value.
     */
    public List<IntegrationServiceEnvironmentNetworkEndpoint> endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: The endpoints.
     * 
     * @param endpoints the endpoints value to set.
     * @return the IntegrationServiceEnvironmentNetworkDependency object itself.
     */
    public IntegrationServiceEnvironmentNetworkDependency
        withEndpoints(List<IntegrationServiceEnvironmentNetworkEndpoint> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpoints() != null) {
            endpoints().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("category", this.category == null ? null : this.category.toString());
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeArrayField("endpoints", this.endpoints, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IntegrationServiceEnvironmentNetworkDependency from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IntegrationServiceEnvironmentNetworkDependency if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IntegrationServiceEnvironmentNetworkDependency.
     */
    public static IntegrationServiceEnvironmentNetworkDependency fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IntegrationServiceEnvironmentNetworkDependency deserializedIntegrationServiceEnvironmentNetworkDependency
                = new IntegrationServiceEnvironmentNetworkDependency();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("category".equals(fieldName)) {
                    deserializedIntegrationServiceEnvironmentNetworkDependency.category
                        = IntegrationServiceEnvironmentNetworkDependencyCategoryType.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedIntegrationServiceEnvironmentNetworkDependency.displayName = reader.getString();
                } else if ("endpoints".equals(fieldName)) {
                    List<IntegrationServiceEnvironmentNetworkEndpoint> endpoints
                        = reader.readArray(reader1 -> IntegrationServiceEnvironmentNetworkEndpoint.fromJson(reader1));
                    deserializedIntegrationServiceEnvironmentNetworkDependency.endpoints = endpoints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIntegrationServiceEnvironmentNetworkDependency;
        });
    }
}
