// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The tracking event.
 */
@Fluent
public final class TrackingEvent implements JsonSerializable<TrackingEvent> {
    /*
     * The event level.
     */
    private EventLevel eventLevel;

    /*
     * The event time.
     */
    private OffsetDateTime eventTime;

    /*
     * The record type.
     */
    private TrackingRecordType recordType;

    /*
     * The record.
     */
    private Object record;

    /*
     * The error.
     */
    private TrackingEventErrorInfo error;

    /**
     * Creates an instance of TrackingEvent class.
     */
    public TrackingEvent() {
    }

    /**
     * Get the eventLevel property: The event level.
     * 
     * @return the eventLevel value.
     */
    public EventLevel eventLevel() {
        return this.eventLevel;
    }

    /**
     * Set the eventLevel property: The event level.
     * 
     * @param eventLevel the eventLevel value to set.
     * @return the TrackingEvent object itself.
     */
    public TrackingEvent withEventLevel(EventLevel eventLevel) {
        this.eventLevel = eventLevel;
        return this;
    }

    /**
     * Get the eventTime property: The event time.
     * 
     * @return the eventTime value.
     */
    public OffsetDateTime eventTime() {
        return this.eventTime;
    }

    /**
     * Set the eventTime property: The event time.
     * 
     * @param eventTime the eventTime value to set.
     * @return the TrackingEvent object itself.
     */
    public TrackingEvent withEventTime(OffsetDateTime eventTime) {
        this.eventTime = eventTime;
        return this;
    }

    /**
     * Get the recordType property: The record type.
     * 
     * @return the recordType value.
     */
    public TrackingRecordType recordType() {
        return this.recordType;
    }

    /**
     * Set the recordType property: The record type.
     * 
     * @param recordType the recordType value to set.
     * @return the TrackingEvent object itself.
     */
    public TrackingEvent withRecordType(TrackingRecordType recordType) {
        this.recordType = recordType;
        return this;
    }

    /**
     * Get the record property: The record.
     * 
     * @return the record value.
     */
    public Object record() {
        return this.record;
    }

    /**
     * Set the record property: The record.
     * 
     * @param record the record value to set.
     * @return the TrackingEvent object itself.
     */
    public TrackingEvent withRecord(Object record) {
        this.record = record;
        return this;
    }

    /**
     * Get the error property: The error.
     * 
     * @return the error value.
     */
    public TrackingEventErrorInfo error() {
        return this.error;
    }

    /**
     * Set the error property: The error.
     * 
     * @param error the error value to set.
     * @return the TrackingEvent object itself.
     */
    public TrackingEvent withError(TrackingEventErrorInfo error) {
        this.error = error;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (eventLevel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property eventLevel in model TrackingEvent"));
        }
        if (eventTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property eventTime in model TrackingEvent"));
        }
        if (recordType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property recordType in model TrackingEvent"));
        }
        if (error() != null) {
            error().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TrackingEvent.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("eventLevel", this.eventLevel == null ? null : this.eventLevel.toString());
        jsonWriter.writeStringField("eventTime",
            this.eventTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.eventTime));
        jsonWriter.writeStringField("recordType", this.recordType == null ? null : this.recordType.toString());
        jsonWriter.writeUntypedField("record", this.record);
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrackingEvent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrackingEvent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TrackingEvent.
     */
    public static TrackingEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrackingEvent deserializedTrackingEvent = new TrackingEvent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eventLevel".equals(fieldName)) {
                    deserializedTrackingEvent.eventLevel = EventLevel.fromString(reader.getString());
                } else if ("eventTime".equals(fieldName)) {
                    deserializedTrackingEvent.eventTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("recordType".equals(fieldName)) {
                    deserializedTrackingEvent.recordType = TrackingRecordType.fromString(reader.getString());
                } else if ("record".equals(fieldName)) {
                    deserializedTrackingEvent.record = reader.readUntyped();
                } else if ("error".equals(fieldName)) {
                    deserializedTrackingEvent.error = TrackingEventErrorInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrackingEvent;
        });
    }
}
