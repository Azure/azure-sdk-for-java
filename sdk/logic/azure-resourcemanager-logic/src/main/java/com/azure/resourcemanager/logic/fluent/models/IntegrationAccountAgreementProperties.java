// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.logic.models.AgreementContent;
import com.azure.resourcemanager.logic.models.AgreementType;
import com.azure.resourcemanager.logic.models.BusinessIdentity;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The integration account agreement properties.
 */
@Fluent
public final class IntegrationAccountAgreementProperties
    implements JsonSerializable<IntegrationAccountAgreementProperties> {
    /*
     * The created time.
     */
    private OffsetDateTime createdTime;

    /*
     * The changed time.
     */
    private OffsetDateTime changedTime;

    /*
     * The metadata.
     */
    private Object metadata;

    /*
     * The agreement type.
     */
    private AgreementType agreementType;

    /*
     * The integration account partner that is set as host partner for this agreement.
     */
    private String hostPartner;

    /*
     * The integration account partner that is set as guest partner for this agreement.
     */
    private String guestPartner;

    /*
     * The business identity of the host partner.
     */
    private BusinessIdentity hostIdentity;

    /*
     * The business identity of the guest partner.
     */
    private BusinessIdentity guestIdentity;

    /*
     * The agreement content.
     */
    private AgreementContent content;

    /**
     * Creates an instance of IntegrationAccountAgreementProperties class.
     */
    public IntegrationAccountAgreementProperties() {
    }

    /**
     * Get the createdTime property: The created time.
     * 
     * @return the createdTime value.
     */
    public OffsetDateTime createdTime() {
        return this.createdTime;
    }

    /**
     * Get the changedTime property: The changed time.
     * 
     * @return the changedTime value.
     */
    public OffsetDateTime changedTime() {
        return this.changedTime;
    }

    /**
     * Get the metadata property: The metadata.
     * 
     * @return the metadata value.
     */
    public Object metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The metadata.
     * 
     * @param metadata the metadata value to set.
     * @return the IntegrationAccountAgreementProperties object itself.
     */
    public IntegrationAccountAgreementProperties withMetadata(Object metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the agreementType property: The agreement type.
     * 
     * @return the agreementType value.
     */
    public AgreementType agreementType() {
        return this.agreementType;
    }

    /**
     * Set the agreementType property: The agreement type.
     * 
     * @param agreementType the agreementType value to set.
     * @return the IntegrationAccountAgreementProperties object itself.
     */
    public IntegrationAccountAgreementProperties withAgreementType(AgreementType agreementType) {
        this.agreementType = agreementType;
        return this;
    }

    /**
     * Get the hostPartner property: The integration account partner that is set as host partner for this agreement.
     * 
     * @return the hostPartner value.
     */
    public String hostPartner() {
        return this.hostPartner;
    }

    /**
     * Set the hostPartner property: The integration account partner that is set as host partner for this agreement.
     * 
     * @param hostPartner the hostPartner value to set.
     * @return the IntegrationAccountAgreementProperties object itself.
     */
    public IntegrationAccountAgreementProperties withHostPartner(String hostPartner) {
        this.hostPartner = hostPartner;
        return this;
    }

    /**
     * Get the guestPartner property: The integration account partner that is set as guest partner for this agreement.
     * 
     * @return the guestPartner value.
     */
    public String guestPartner() {
        return this.guestPartner;
    }

    /**
     * Set the guestPartner property: The integration account partner that is set as guest partner for this agreement.
     * 
     * @param guestPartner the guestPartner value to set.
     * @return the IntegrationAccountAgreementProperties object itself.
     */
    public IntegrationAccountAgreementProperties withGuestPartner(String guestPartner) {
        this.guestPartner = guestPartner;
        return this;
    }

    /**
     * Get the hostIdentity property: The business identity of the host partner.
     * 
     * @return the hostIdentity value.
     */
    public BusinessIdentity hostIdentity() {
        return this.hostIdentity;
    }

    /**
     * Set the hostIdentity property: The business identity of the host partner.
     * 
     * @param hostIdentity the hostIdentity value to set.
     * @return the IntegrationAccountAgreementProperties object itself.
     */
    public IntegrationAccountAgreementProperties withHostIdentity(BusinessIdentity hostIdentity) {
        this.hostIdentity = hostIdentity;
        return this;
    }

    /**
     * Get the guestIdentity property: The business identity of the guest partner.
     * 
     * @return the guestIdentity value.
     */
    public BusinessIdentity guestIdentity() {
        return this.guestIdentity;
    }

    /**
     * Set the guestIdentity property: The business identity of the guest partner.
     * 
     * @param guestIdentity the guestIdentity value to set.
     * @return the IntegrationAccountAgreementProperties object itself.
     */
    public IntegrationAccountAgreementProperties withGuestIdentity(BusinessIdentity guestIdentity) {
        this.guestIdentity = guestIdentity;
        return this;
    }

    /**
     * Get the content property: The agreement content.
     * 
     * @return the content value.
     */
    public AgreementContent content() {
        return this.content;
    }

    /**
     * Set the content property: The agreement content.
     * 
     * @param content the content value to set.
     * @return the IntegrationAccountAgreementProperties object itself.
     */
    public IntegrationAccountAgreementProperties withContent(AgreementContent content) {
        this.content = content;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (agreementType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property agreementType in model IntegrationAccountAgreementProperties"));
        }
        if (hostPartner() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property hostPartner in model IntegrationAccountAgreementProperties"));
        }
        if (guestPartner() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property guestPartner in model IntegrationAccountAgreementProperties"));
        }
        if (hostIdentity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property hostIdentity in model IntegrationAccountAgreementProperties"));
        } else {
            hostIdentity().validate();
        }
        if (guestIdentity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property guestIdentity in model IntegrationAccountAgreementProperties"));
        } else {
            guestIdentity().validate();
        }
        if (content() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property content in model IntegrationAccountAgreementProperties"));
        } else {
            content().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IntegrationAccountAgreementProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("agreementType", this.agreementType == null ? null : this.agreementType.toString());
        jsonWriter.writeStringField("hostPartner", this.hostPartner);
        jsonWriter.writeStringField("guestPartner", this.guestPartner);
        jsonWriter.writeJsonField("hostIdentity", this.hostIdentity);
        jsonWriter.writeJsonField("guestIdentity", this.guestIdentity);
        jsonWriter.writeJsonField("content", this.content);
        jsonWriter.writeUntypedField("metadata", this.metadata);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IntegrationAccountAgreementProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IntegrationAccountAgreementProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IntegrationAccountAgreementProperties.
     */
    public static IntegrationAccountAgreementProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IntegrationAccountAgreementProperties deserializedIntegrationAccountAgreementProperties
                = new IntegrationAccountAgreementProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("agreementType".equals(fieldName)) {
                    deserializedIntegrationAccountAgreementProperties.agreementType
                        = AgreementType.fromString(reader.getString());
                } else if ("hostPartner".equals(fieldName)) {
                    deserializedIntegrationAccountAgreementProperties.hostPartner = reader.getString();
                } else if ("guestPartner".equals(fieldName)) {
                    deserializedIntegrationAccountAgreementProperties.guestPartner = reader.getString();
                } else if ("hostIdentity".equals(fieldName)) {
                    deserializedIntegrationAccountAgreementProperties.hostIdentity = BusinessIdentity.fromJson(reader);
                } else if ("guestIdentity".equals(fieldName)) {
                    deserializedIntegrationAccountAgreementProperties.guestIdentity = BusinessIdentity.fromJson(reader);
                } else if ("content".equals(fieldName)) {
                    deserializedIntegrationAccountAgreementProperties.content = AgreementContent.fromJson(reader);
                } else if ("createdTime".equals(fieldName)) {
                    deserializedIntegrationAccountAgreementProperties.createdTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("changedTime".equals(fieldName)) {
                    deserializedIntegrationAccountAgreementProperties.changedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("metadata".equals(fieldName)) {
                    deserializedIntegrationAccountAgreementProperties.metadata = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIntegrationAccountAgreementProperties;
        });
    }
}
