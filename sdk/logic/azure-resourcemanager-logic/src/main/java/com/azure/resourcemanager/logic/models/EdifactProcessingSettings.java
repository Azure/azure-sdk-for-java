// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Edifact agreement protocol settings.
 */
@Fluent
public final class EdifactProcessingSettings implements JsonSerializable<EdifactProcessingSettings> {
    /*
     * The value indicating whether to mask security information.
     */
    private boolean maskSecurityInfo;

    /*
     * The value indicating whether to preserve interchange.
     */
    private boolean preserveInterchange;

    /*
     * The value indicating whether to suspend interchange on error.
     */
    private boolean suspendInterchangeOnError;

    /*
     * The value indicating whether to create empty xml tags for trailing separators.
     */
    private boolean createEmptyXmlTagsForTrailingSeparators;

    /*
     * The value indicating whether to use dot as decimal separator.
     */
    private boolean useDotAsDecimalSeparator;

    /**
     * Creates an instance of EdifactProcessingSettings class.
     */
    public EdifactProcessingSettings() {
    }

    /**
     * Get the maskSecurityInfo property: The value indicating whether to mask security information.
     * 
     * @return the maskSecurityInfo value.
     */
    public boolean maskSecurityInfo() {
        return this.maskSecurityInfo;
    }

    /**
     * Set the maskSecurityInfo property: The value indicating whether to mask security information.
     * 
     * @param maskSecurityInfo the maskSecurityInfo value to set.
     * @return the EdifactProcessingSettings object itself.
     */
    public EdifactProcessingSettings withMaskSecurityInfo(boolean maskSecurityInfo) {
        this.maskSecurityInfo = maskSecurityInfo;
        return this;
    }

    /**
     * Get the preserveInterchange property: The value indicating whether to preserve interchange.
     * 
     * @return the preserveInterchange value.
     */
    public boolean preserveInterchange() {
        return this.preserveInterchange;
    }

    /**
     * Set the preserveInterchange property: The value indicating whether to preserve interchange.
     * 
     * @param preserveInterchange the preserveInterchange value to set.
     * @return the EdifactProcessingSettings object itself.
     */
    public EdifactProcessingSettings withPreserveInterchange(boolean preserveInterchange) {
        this.preserveInterchange = preserveInterchange;
        return this;
    }

    /**
     * Get the suspendInterchangeOnError property: The value indicating whether to suspend interchange on error.
     * 
     * @return the suspendInterchangeOnError value.
     */
    public boolean suspendInterchangeOnError() {
        return this.suspendInterchangeOnError;
    }

    /**
     * Set the suspendInterchangeOnError property: The value indicating whether to suspend interchange on error.
     * 
     * @param suspendInterchangeOnError the suspendInterchangeOnError value to set.
     * @return the EdifactProcessingSettings object itself.
     */
    public EdifactProcessingSettings withSuspendInterchangeOnError(boolean suspendInterchangeOnError) {
        this.suspendInterchangeOnError = suspendInterchangeOnError;
        return this;
    }

    /**
     * Get the createEmptyXmlTagsForTrailingSeparators property: The value indicating whether to create empty xml tags
     * for trailing separators.
     * 
     * @return the createEmptyXmlTagsForTrailingSeparators value.
     */
    public boolean createEmptyXmlTagsForTrailingSeparators() {
        return this.createEmptyXmlTagsForTrailingSeparators;
    }

    /**
     * Set the createEmptyXmlTagsForTrailingSeparators property: The value indicating whether to create empty xml tags
     * for trailing separators.
     * 
     * @param createEmptyXmlTagsForTrailingSeparators the createEmptyXmlTagsForTrailingSeparators value to set.
     * @return the EdifactProcessingSettings object itself.
     */
    public EdifactProcessingSettings
        withCreateEmptyXmlTagsForTrailingSeparators(boolean createEmptyXmlTagsForTrailingSeparators) {
        this.createEmptyXmlTagsForTrailingSeparators = createEmptyXmlTagsForTrailingSeparators;
        return this;
    }

    /**
     * Get the useDotAsDecimalSeparator property: The value indicating whether to use dot as decimal separator.
     * 
     * @return the useDotAsDecimalSeparator value.
     */
    public boolean useDotAsDecimalSeparator() {
        return this.useDotAsDecimalSeparator;
    }

    /**
     * Set the useDotAsDecimalSeparator property: The value indicating whether to use dot as decimal separator.
     * 
     * @param useDotAsDecimalSeparator the useDotAsDecimalSeparator value to set.
     * @return the EdifactProcessingSettings object itself.
     */
    public EdifactProcessingSettings withUseDotAsDecimalSeparator(boolean useDotAsDecimalSeparator) {
        this.useDotAsDecimalSeparator = useDotAsDecimalSeparator;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("maskSecurityInfo", this.maskSecurityInfo);
        jsonWriter.writeBooleanField("preserveInterchange", this.preserveInterchange);
        jsonWriter.writeBooleanField("suspendInterchangeOnError", this.suspendInterchangeOnError);
        jsonWriter.writeBooleanField("createEmptyXmlTagsForTrailingSeparators",
            this.createEmptyXmlTagsForTrailingSeparators);
        jsonWriter.writeBooleanField("useDotAsDecimalSeparator", this.useDotAsDecimalSeparator);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EdifactProcessingSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EdifactProcessingSettings if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EdifactProcessingSettings.
     */
    public static EdifactProcessingSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EdifactProcessingSettings deserializedEdifactProcessingSettings = new EdifactProcessingSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maskSecurityInfo".equals(fieldName)) {
                    deserializedEdifactProcessingSettings.maskSecurityInfo = reader.getBoolean();
                } else if ("preserveInterchange".equals(fieldName)) {
                    deserializedEdifactProcessingSettings.preserveInterchange = reader.getBoolean();
                } else if ("suspendInterchangeOnError".equals(fieldName)) {
                    deserializedEdifactProcessingSettings.suspendInterchangeOnError = reader.getBoolean();
                } else if ("createEmptyXmlTagsForTrailingSeparators".equals(fieldName)) {
                    deserializedEdifactProcessingSettings.createEmptyXmlTagsForTrailingSeparators = reader.getBoolean();
                } else if ("useDotAsDecimalSeparator".equals(fieldName)) {
                    deserializedEdifactProcessingSettings.useDotAsDecimalSeparator = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEdifactProcessingSettings;
        });
    }
}
