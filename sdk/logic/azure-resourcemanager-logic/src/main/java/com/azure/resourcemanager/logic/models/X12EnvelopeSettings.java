// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The X12 agreement envelope settings.
 */
@Fluent
public final class X12EnvelopeSettings implements JsonSerializable<X12EnvelopeSettings> {
    /*
     * The controls standards id.
     */
    private int controlStandardsId;

    /*
     * The value indicating whether to use control standards id as repetition character.
     */
    private boolean useControlStandardsIdAsRepetitionCharacter;

    /*
     * The sender application id.
     */
    private String senderApplicationId;

    /*
     * The receiver application id.
     */
    private String receiverApplicationId;

    /*
     * The control version number.
     */
    private String controlVersionNumber;

    /*
     * The interchange control number lower bound.
     */
    private int interchangeControlNumberLowerBound;

    /*
     * The interchange control number upper bound.
     */
    private int interchangeControlNumberUpperBound;

    /*
     * The value indicating whether to rollover interchange control number.
     */
    private boolean rolloverInterchangeControlNumber;

    /*
     * The value indicating whether to enable default group headers.
     */
    private boolean enableDefaultGroupHeaders;

    /*
     * The functional group id.
     */
    private String functionalGroupId;

    /*
     * The group control number lower bound.
     */
    private int groupControlNumberLowerBound;

    /*
     * The group control number upper bound.
     */
    private int groupControlNumberUpperBound;

    /*
     * The value indicating whether to rollover group control number.
     */
    private boolean rolloverGroupControlNumber;

    /*
     * The group header agency code.
     */
    private String groupHeaderAgencyCode;

    /*
     * The group header version.
     */
    private String groupHeaderVersion;

    /*
     * The transaction set control number lower bound.
     */
    private int transactionSetControlNumberLowerBound;

    /*
     * The transaction set control number upper bound.
     */
    private int transactionSetControlNumberUpperBound;

    /*
     * The value indicating whether to rollover transaction set control number.
     */
    private boolean rolloverTransactionSetControlNumber;

    /*
     * The transaction set control number prefix.
     */
    private String transactionSetControlNumberPrefix;

    /*
     * The transaction set control number suffix.
     */
    private String transactionSetControlNumberSuffix;

    /*
     * The value indicating whether to overwrite existing transaction set control number.
     */
    private boolean overwriteExistingTransactionSetControlNumber;

    /*
     * The group header date format.
     */
    private X12DateFormat groupHeaderDateFormat;

    /*
     * The group header time format.
     */
    private X12TimeFormat groupHeaderTimeFormat;

    /*
     * The usage indicator.
     */
    private UsageIndicator usageIndicator;

    /**
     * Creates an instance of X12EnvelopeSettings class.
     */
    public X12EnvelopeSettings() {
    }

    /**
     * Get the controlStandardsId property: The controls standards id.
     * 
     * @return the controlStandardsId value.
     */
    public int controlStandardsId() {
        return this.controlStandardsId;
    }

    /**
     * Set the controlStandardsId property: The controls standards id.
     * 
     * @param controlStandardsId the controlStandardsId value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withControlStandardsId(int controlStandardsId) {
        this.controlStandardsId = controlStandardsId;
        return this;
    }

    /**
     * Get the useControlStandardsIdAsRepetitionCharacter property: The value indicating whether to use control
     * standards id as repetition character.
     * 
     * @return the useControlStandardsIdAsRepetitionCharacter value.
     */
    public boolean useControlStandardsIdAsRepetitionCharacter() {
        return this.useControlStandardsIdAsRepetitionCharacter;
    }

    /**
     * Set the useControlStandardsIdAsRepetitionCharacter property: The value indicating whether to use control
     * standards id as repetition character.
     * 
     * @param useControlStandardsIdAsRepetitionCharacter the useControlStandardsIdAsRepetitionCharacter value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings
        withUseControlStandardsIdAsRepetitionCharacter(boolean useControlStandardsIdAsRepetitionCharacter) {
        this.useControlStandardsIdAsRepetitionCharacter = useControlStandardsIdAsRepetitionCharacter;
        return this;
    }

    /**
     * Get the senderApplicationId property: The sender application id.
     * 
     * @return the senderApplicationId value.
     */
    public String senderApplicationId() {
        return this.senderApplicationId;
    }

    /**
     * Set the senderApplicationId property: The sender application id.
     * 
     * @param senderApplicationId the senderApplicationId value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withSenderApplicationId(String senderApplicationId) {
        this.senderApplicationId = senderApplicationId;
        return this;
    }

    /**
     * Get the receiverApplicationId property: The receiver application id.
     * 
     * @return the receiverApplicationId value.
     */
    public String receiverApplicationId() {
        return this.receiverApplicationId;
    }

    /**
     * Set the receiverApplicationId property: The receiver application id.
     * 
     * @param receiverApplicationId the receiverApplicationId value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withReceiverApplicationId(String receiverApplicationId) {
        this.receiverApplicationId = receiverApplicationId;
        return this;
    }

    /**
     * Get the controlVersionNumber property: The control version number.
     * 
     * @return the controlVersionNumber value.
     */
    public String controlVersionNumber() {
        return this.controlVersionNumber;
    }

    /**
     * Set the controlVersionNumber property: The control version number.
     * 
     * @param controlVersionNumber the controlVersionNumber value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withControlVersionNumber(String controlVersionNumber) {
        this.controlVersionNumber = controlVersionNumber;
        return this;
    }

    /**
     * Get the interchangeControlNumberLowerBound property: The interchange control number lower bound.
     * 
     * @return the interchangeControlNumberLowerBound value.
     */
    public int interchangeControlNumberLowerBound() {
        return this.interchangeControlNumberLowerBound;
    }

    /**
     * Set the interchangeControlNumberLowerBound property: The interchange control number lower bound.
     * 
     * @param interchangeControlNumberLowerBound the interchangeControlNumberLowerBound value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withInterchangeControlNumberLowerBound(int interchangeControlNumberLowerBound) {
        this.interchangeControlNumberLowerBound = interchangeControlNumberLowerBound;
        return this;
    }

    /**
     * Get the interchangeControlNumberUpperBound property: The interchange control number upper bound.
     * 
     * @return the interchangeControlNumberUpperBound value.
     */
    public int interchangeControlNumberUpperBound() {
        return this.interchangeControlNumberUpperBound;
    }

    /**
     * Set the interchangeControlNumberUpperBound property: The interchange control number upper bound.
     * 
     * @param interchangeControlNumberUpperBound the interchangeControlNumberUpperBound value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withInterchangeControlNumberUpperBound(int interchangeControlNumberUpperBound) {
        this.interchangeControlNumberUpperBound = interchangeControlNumberUpperBound;
        return this;
    }

    /**
     * Get the rolloverInterchangeControlNumber property: The value indicating whether to rollover interchange control
     * number.
     * 
     * @return the rolloverInterchangeControlNumber value.
     */
    public boolean rolloverInterchangeControlNumber() {
        return this.rolloverInterchangeControlNumber;
    }

    /**
     * Set the rolloverInterchangeControlNumber property: The value indicating whether to rollover interchange control
     * number.
     * 
     * @param rolloverInterchangeControlNumber the rolloverInterchangeControlNumber value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withRolloverInterchangeControlNumber(boolean rolloverInterchangeControlNumber) {
        this.rolloverInterchangeControlNumber = rolloverInterchangeControlNumber;
        return this;
    }

    /**
     * Get the enableDefaultGroupHeaders property: The value indicating whether to enable default group headers.
     * 
     * @return the enableDefaultGroupHeaders value.
     */
    public boolean enableDefaultGroupHeaders() {
        return this.enableDefaultGroupHeaders;
    }

    /**
     * Set the enableDefaultGroupHeaders property: The value indicating whether to enable default group headers.
     * 
     * @param enableDefaultGroupHeaders the enableDefaultGroupHeaders value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withEnableDefaultGroupHeaders(boolean enableDefaultGroupHeaders) {
        this.enableDefaultGroupHeaders = enableDefaultGroupHeaders;
        return this;
    }

    /**
     * Get the functionalGroupId property: The functional group id.
     * 
     * @return the functionalGroupId value.
     */
    public String functionalGroupId() {
        return this.functionalGroupId;
    }

    /**
     * Set the functionalGroupId property: The functional group id.
     * 
     * @param functionalGroupId the functionalGroupId value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withFunctionalGroupId(String functionalGroupId) {
        this.functionalGroupId = functionalGroupId;
        return this;
    }

    /**
     * Get the groupControlNumberLowerBound property: The group control number lower bound.
     * 
     * @return the groupControlNumberLowerBound value.
     */
    public int groupControlNumberLowerBound() {
        return this.groupControlNumberLowerBound;
    }

    /**
     * Set the groupControlNumberLowerBound property: The group control number lower bound.
     * 
     * @param groupControlNumberLowerBound the groupControlNumberLowerBound value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withGroupControlNumberLowerBound(int groupControlNumberLowerBound) {
        this.groupControlNumberLowerBound = groupControlNumberLowerBound;
        return this;
    }

    /**
     * Get the groupControlNumberUpperBound property: The group control number upper bound.
     * 
     * @return the groupControlNumberUpperBound value.
     */
    public int groupControlNumberUpperBound() {
        return this.groupControlNumberUpperBound;
    }

    /**
     * Set the groupControlNumberUpperBound property: The group control number upper bound.
     * 
     * @param groupControlNumberUpperBound the groupControlNumberUpperBound value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withGroupControlNumberUpperBound(int groupControlNumberUpperBound) {
        this.groupControlNumberUpperBound = groupControlNumberUpperBound;
        return this;
    }

    /**
     * Get the rolloverGroupControlNumber property: The value indicating whether to rollover group control number.
     * 
     * @return the rolloverGroupControlNumber value.
     */
    public boolean rolloverGroupControlNumber() {
        return this.rolloverGroupControlNumber;
    }

    /**
     * Set the rolloverGroupControlNumber property: The value indicating whether to rollover group control number.
     * 
     * @param rolloverGroupControlNumber the rolloverGroupControlNumber value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withRolloverGroupControlNumber(boolean rolloverGroupControlNumber) {
        this.rolloverGroupControlNumber = rolloverGroupControlNumber;
        return this;
    }

    /**
     * Get the groupHeaderAgencyCode property: The group header agency code.
     * 
     * @return the groupHeaderAgencyCode value.
     */
    public String groupHeaderAgencyCode() {
        return this.groupHeaderAgencyCode;
    }

    /**
     * Set the groupHeaderAgencyCode property: The group header agency code.
     * 
     * @param groupHeaderAgencyCode the groupHeaderAgencyCode value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withGroupHeaderAgencyCode(String groupHeaderAgencyCode) {
        this.groupHeaderAgencyCode = groupHeaderAgencyCode;
        return this;
    }

    /**
     * Get the groupHeaderVersion property: The group header version.
     * 
     * @return the groupHeaderVersion value.
     */
    public String groupHeaderVersion() {
        return this.groupHeaderVersion;
    }

    /**
     * Set the groupHeaderVersion property: The group header version.
     * 
     * @param groupHeaderVersion the groupHeaderVersion value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withGroupHeaderVersion(String groupHeaderVersion) {
        this.groupHeaderVersion = groupHeaderVersion;
        return this;
    }

    /**
     * Get the transactionSetControlNumberLowerBound property: The transaction set control number lower bound.
     * 
     * @return the transactionSetControlNumberLowerBound value.
     */
    public int transactionSetControlNumberLowerBound() {
        return this.transactionSetControlNumberLowerBound;
    }

    /**
     * Set the transactionSetControlNumberLowerBound property: The transaction set control number lower bound.
     * 
     * @param transactionSetControlNumberLowerBound the transactionSetControlNumberLowerBound value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withTransactionSetControlNumberLowerBound(int transactionSetControlNumberLowerBound) {
        this.transactionSetControlNumberLowerBound = transactionSetControlNumberLowerBound;
        return this;
    }

    /**
     * Get the transactionSetControlNumberUpperBound property: The transaction set control number upper bound.
     * 
     * @return the transactionSetControlNumberUpperBound value.
     */
    public int transactionSetControlNumberUpperBound() {
        return this.transactionSetControlNumberUpperBound;
    }

    /**
     * Set the transactionSetControlNumberUpperBound property: The transaction set control number upper bound.
     * 
     * @param transactionSetControlNumberUpperBound the transactionSetControlNumberUpperBound value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withTransactionSetControlNumberUpperBound(int transactionSetControlNumberUpperBound) {
        this.transactionSetControlNumberUpperBound = transactionSetControlNumberUpperBound;
        return this;
    }

    /**
     * Get the rolloverTransactionSetControlNumber property: The value indicating whether to rollover transaction set
     * control number.
     * 
     * @return the rolloverTransactionSetControlNumber value.
     */
    public boolean rolloverTransactionSetControlNumber() {
        return this.rolloverTransactionSetControlNumber;
    }

    /**
     * Set the rolloverTransactionSetControlNumber property: The value indicating whether to rollover transaction set
     * control number.
     * 
     * @param rolloverTransactionSetControlNumber the rolloverTransactionSetControlNumber value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withRolloverTransactionSetControlNumber(boolean rolloverTransactionSetControlNumber) {
        this.rolloverTransactionSetControlNumber = rolloverTransactionSetControlNumber;
        return this;
    }

    /**
     * Get the transactionSetControlNumberPrefix property: The transaction set control number prefix.
     * 
     * @return the transactionSetControlNumberPrefix value.
     */
    public String transactionSetControlNumberPrefix() {
        return this.transactionSetControlNumberPrefix;
    }

    /**
     * Set the transactionSetControlNumberPrefix property: The transaction set control number prefix.
     * 
     * @param transactionSetControlNumberPrefix the transactionSetControlNumberPrefix value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withTransactionSetControlNumberPrefix(String transactionSetControlNumberPrefix) {
        this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
        return this;
    }

    /**
     * Get the transactionSetControlNumberSuffix property: The transaction set control number suffix.
     * 
     * @return the transactionSetControlNumberSuffix value.
     */
    public String transactionSetControlNumberSuffix() {
        return this.transactionSetControlNumberSuffix;
    }

    /**
     * Set the transactionSetControlNumberSuffix property: The transaction set control number suffix.
     * 
     * @param transactionSetControlNumberSuffix the transactionSetControlNumberSuffix value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withTransactionSetControlNumberSuffix(String transactionSetControlNumberSuffix) {
        this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
        return this;
    }

    /**
     * Get the overwriteExistingTransactionSetControlNumber property: The value indicating whether to overwrite existing
     * transaction set control number.
     * 
     * @return the overwriteExistingTransactionSetControlNumber value.
     */
    public boolean overwriteExistingTransactionSetControlNumber() {
        return this.overwriteExistingTransactionSetControlNumber;
    }

    /**
     * Set the overwriteExistingTransactionSetControlNumber property: The value indicating whether to overwrite existing
     * transaction set control number.
     * 
     * @param overwriteExistingTransactionSetControlNumber the overwriteExistingTransactionSetControlNumber value to
     * set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings
        withOverwriteExistingTransactionSetControlNumber(boolean overwriteExistingTransactionSetControlNumber) {
        this.overwriteExistingTransactionSetControlNumber = overwriteExistingTransactionSetControlNumber;
        return this;
    }

    /**
     * Get the groupHeaderDateFormat property: The group header date format.
     * 
     * @return the groupHeaderDateFormat value.
     */
    public X12DateFormat groupHeaderDateFormat() {
        return this.groupHeaderDateFormat;
    }

    /**
     * Set the groupHeaderDateFormat property: The group header date format.
     * 
     * @param groupHeaderDateFormat the groupHeaderDateFormat value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withGroupHeaderDateFormat(X12DateFormat groupHeaderDateFormat) {
        this.groupHeaderDateFormat = groupHeaderDateFormat;
        return this;
    }

    /**
     * Get the groupHeaderTimeFormat property: The group header time format.
     * 
     * @return the groupHeaderTimeFormat value.
     */
    public X12TimeFormat groupHeaderTimeFormat() {
        return this.groupHeaderTimeFormat;
    }

    /**
     * Set the groupHeaderTimeFormat property: The group header time format.
     * 
     * @param groupHeaderTimeFormat the groupHeaderTimeFormat value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withGroupHeaderTimeFormat(X12TimeFormat groupHeaderTimeFormat) {
        this.groupHeaderTimeFormat = groupHeaderTimeFormat;
        return this;
    }

    /**
     * Get the usageIndicator property: The usage indicator.
     * 
     * @return the usageIndicator value.
     */
    public UsageIndicator usageIndicator() {
        return this.usageIndicator;
    }

    /**
     * Set the usageIndicator property: The usage indicator.
     * 
     * @param usageIndicator the usageIndicator value to set.
     * @return the X12EnvelopeSettings object itself.
     */
    public X12EnvelopeSettings withUsageIndicator(UsageIndicator usageIndicator) {
        this.usageIndicator = usageIndicator;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (senderApplicationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property senderApplicationId in model X12EnvelopeSettings"));
        }
        if (receiverApplicationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property receiverApplicationId in model X12EnvelopeSettings"));
        }
        if (controlVersionNumber() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property controlVersionNumber in model X12EnvelopeSettings"));
        }
        if (groupHeaderAgencyCode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property groupHeaderAgencyCode in model X12EnvelopeSettings"));
        }
        if (groupHeaderVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property groupHeaderVersion in model X12EnvelopeSettings"));
        }
        if (groupHeaderDateFormat() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property groupHeaderDateFormat in model X12EnvelopeSettings"));
        }
        if (groupHeaderTimeFormat() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property groupHeaderTimeFormat in model X12EnvelopeSettings"));
        }
        if (usageIndicator() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property usageIndicator in model X12EnvelopeSettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(X12EnvelopeSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("controlStandardsId", this.controlStandardsId);
        jsonWriter.writeBooleanField("useControlStandardsIdAsRepetitionCharacter",
            this.useControlStandardsIdAsRepetitionCharacter);
        jsonWriter.writeStringField("senderApplicationId", this.senderApplicationId);
        jsonWriter.writeStringField("receiverApplicationId", this.receiverApplicationId);
        jsonWriter.writeStringField("controlVersionNumber", this.controlVersionNumber);
        jsonWriter.writeIntField("interchangeControlNumberLowerBound", this.interchangeControlNumberLowerBound);
        jsonWriter.writeIntField("interchangeControlNumberUpperBound", this.interchangeControlNumberUpperBound);
        jsonWriter.writeBooleanField("rolloverInterchangeControlNumber", this.rolloverInterchangeControlNumber);
        jsonWriter.writeBooleanField("enableDefaultGroupHeaders", this.enableDefaultGroupHeaders);
        jsonWriter.writeIntField("groupControlNumberLowerBound", this.groupControlNumberLowerBound);
        jsonWriter.writeIntField("groupControlNumberUpperBound", this.groupControlNumberUpperBound);
        jsonWriter.writeBooleanField("rolloverGroupControlNumber", this.rolloverGroupControlNumber);
        jsonWriter.writeStringField("groupHeaderAgencyCode", this.groupHeaderAgencyCode);
        jsonWriter.writeStringField("groupHeaderVersion", this.groupHeaderVersion);
        jsonWriter.writeIntField("transactionSetControlNumberLowerBound", this.transactionSetControlNumberLowerBound);
        jsonWriter.writeIntField("transactionSetControlNumberUpperBound", this.transactionSetControlNumberUpperBound);
        jsonWriter.writeBooleanField("rolloverTransactionSetControlNumber", this.rolloverTransactionSetControlNumber);
        jsonWriter.writeBooleanField("overwriteExistingTransactionSetControlNumber",
            this.overwriteExistingTransactionSetControlNumber);
        jsonWriter.writeStringField("groupHeaderDateFormat",
            this.groupHeaderDateFormat == null ? null : this.groupHeaderDateFormat.toString());
        jsonWriter.writeStringField("groupHeaderTimeFormat",
            this.groupHeaderTimeFormat == null ? null : this.groupHeaderTimeFormat.toString());
        jsonWriter.writeStringField("usageIndicator",
            this.usageIndicator == null ? null : this.usageIndicator.toString());
        jsonWriter.writeStringField("functionalGroupId", this.functionalGroupId);
        jsonWriter.writeStringField("transactionSetControlNumberPrefix", this.transactionSetControlNumberPrefix);
        jsonWriter.writeStringField("transactionSetControlNumberSuffix", this.transactionSetControlNumberSuffix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of X12EnvelopeSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of X12EnvelopeSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the X12EnvelopeSettings.
     */
    public static X12EnvelopeSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            X12EnvelopeSettings deserializedX12EnvelopeSettings = new X12EnvelopeSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("controlStandardsId".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.controlStandardsId = reader.getInt();
                } else if ("useControlStandardsIdAsRepetitionCharacter".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.useControlStandardsIdAsRepetitionCharacter = reader.getBoolean();
                } else if ("senderApplicationId".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.senderApplicationId = reader.getString();
                } else if ("receiverApplicationId".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.receiverApplicationId = reader.getString();
                } else if ("controlVersionNumber".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.controlVersionNumber = reader.getString();
                } else if ("interchangeControlNumberLowerBound".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.interchangeControlNumberLowerBound = reader.getInt();
                } else if ("interchangeControlNumberUpperBound".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.interchangeControlNumberUpperBound = reader.getInt();
                } else if ("rolloverInterchangeControlNumber".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.rolloverInterchangeControlNumber = reader.getBoolean();
                } else if ("enableDefaultGroupHeaders".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.enableDefaultGroupHeaders = reader.getBoolean();
                } else if ("groupControlNumberLowerBound".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.groupControlNumberLowerBound = reader.getInt();
                } else if ("groupControlNumberUpperBound".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.groupControlNumberUpperBound = reader.getInt();
                } else if ("rolloverGroupControlNumber".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.rolloverGroupControlNumber = reader.getBoolean();
                } else if ("groupHeaderAgencyCode".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.groupHeaderAgencyCode = reader.getString();
                } else if ("groupHeaderVersion".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.groupHeaderVersion = reader.getString();
                } else if ("transactionSetControlNumberLowerBound".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.transactionSetControlNumberLowerBound = reader.getInt();
                } else if ("transactionSetControlNumberUpperBound".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.transactionSetControlNumberUpperBound = reader.getInt();
                } else if ("rolloverTransactionSetControlNumber".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.rolloverTransactionSetControlNumber = reader.getBoolean();
                } else if ("overwriteExistingTransactionSetControlNumber".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.overwriteExistingTransactionSetControlNumber = reader.getBoolean();
                } else if ("groupHeaderDateFormat".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.groupHeaderDateFormat
                        = X12DateFormat.fromString(reader.getString());
                } else if ("groupHeaderTimeFormat".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.groupHeaderTimeFormat
                        = X12TimeFormat.fromString(reader.getString());
                } else if ("usageIndicator".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.usageIndicator = UsageIndicator.fromString(reader.getString());
                } else if ("functionalGroupId".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.functionalGroupId = reader.getString();
                } else if ("transactionSetControlNumberPrefix".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.transactionSetControlNumberPrefix = reader.getString();
                } else if ("transactionSetControlNumberSuffix".equals(fieldName)) {
                    deserializedX12EnvelopeSettings.transactionSetControlNumberSuffix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedX12EnvelopeSettings;
        });
    }
}
