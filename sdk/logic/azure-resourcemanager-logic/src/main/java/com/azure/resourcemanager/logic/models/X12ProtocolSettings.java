// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The X12 agreement protocol settings.
 */
@Fluent
public final class X12ProtocolSettings implements JsonSerializable<X12ProtocolSettings> {
    /*
     * The X12 validation settings.
     */
    private X12ValidationSettings validationSettings;

    /*
     * The X12 framing settings.
     */
    private X12FramingSettings framingSettings;

    /*
     * The X12 envelope settings.
     */
    private X12EnvelopeSettings envelopeSettings;

    /*
     * The X12 acknowledgment settings.
     */
    private X12AcknowledgementSettings acknowledgementSettings;

    /*
     * The X12 message filter.
     */
    private X12MessageFilter messageFilter;

    /*
     * The X12 security settings.
     */
    private X12SecuritySettings securitySettings;

    /*
     * The X12 processing settings.
     */
    private X12ProcessingSettings processingSettings;

    /*
     * The X12 envelope override settings.
     */
    private List<X12EnvelopeOverride> envelopeOverrides;

    /*
     * The X12 validation override settings.
     */
    private List<X12ValidationOverride> validationOverrides;

    /*
     * The X12 message filter list.
     */
    private List<X12MessageIdentifier> messageFilterList;

    /*
     * The X12 schema references.
     */
    private List<X12SchemaReference> schemaReferences;

    /*
     * The X12 delimiter override settings.
     */
    private List<X12DelimiterOverrides> x12DelimiterOverrides;

    /**
     * Creates an instance of X12ProtocolSettings class.
     */
    public X12ProtocolSettings() {
    }

    /**
     * Get the validationSettings property: The X12 validation settings.
     * 
     * @return the validationSettings value.
     */
    public X12ValidationSettings validationSettings() {
        return this.validationSettings;
    }

    /**
     * Set the validationSettings property: The X12 validation settings.
     * 
     * @param validationSettings the validationSettings value to set.
     * @return the X12ProtocolSettings object itself.
     */
    public X12ProtocolSettings withValidationSettings(X12ValidationSettings validationSettings) {
        this.validationSettings = validationSettings;
        return this;
    }

    /**
     * Get the framingSettings property: The X12 framing settings.
     * 
     * @return the framingSettings value.
     */
    public X12FramingSettings framingSettings() {
        return this.framingSettings;
    }

    /**
     * Set the framingSettings property: The X12 framing settings.
     * 
     * @param framingSettings the framingSettings value to set.
     * @return the X12ProtocolSettings object itself.
     */
    public X12ProtocolSettings withFramingSettings(X12FramingSettings framingSettings) {
        this.framingSettings = framingSettings;
        return this;
    }

    /**
     * Get the envelopeSettings property: The X12 envelope settings.
     * 
     * @return the envelopeSettings value.
     */
    public X12EnvelopeSettings envelopeSettings() {
        return this.envelopeSettings;
    }

    /**
     * Set the envelopeSettings property: The X12 envelope settings.
     * 
     * @param envelopeSettings the envelopeSettings value to set.
     * @return the X12ProtocolSettings object itself.
     */
    public X12ProtocolSettings withEnvelopeSettings(X12EnvelopeSettings envelopeSettings) {
        this.envelopeSettings = envelopeSettings;
        return this;
    }

    /**
     * Get the acknowledgementSettings property: The X12 acknowledgment settings.
     * 
     * @return the acknowledgementSettings value.
     */
    public X12AcknowledgementSettings acknowledgementSettings() {
        return this.acknowledgementSettings;
    }

    /**
     * Set the acknowledgementSettings property: The X12 acknowledgment settings.
     * 
     * @param acknowledgementSettings the acknowledgementSettings value to set.
     * @return the X12ProtocolSettings object itself.
     */
    public X12ProtocolSettings withAcknowledgementSettings(X12AcknowledgementSettings acknowledgementSettings) {
        this.acknowledgementSettings = acknowledgementSettings;
        return this;
    }

    /**
     * Get the messageFilter property: The X12 message filter.
     * 
     * @return the messageFilter value.
     */
    public X12MessageFilter messageFilter() {
        return this.messageFilter;
    }

    /**
     * Set the messageFilter property: The X12 message filter.
     * 
     * @param messageFilter the messageFilter value to set.
     * @return the X12ProtocolSettings object itself.
     */
    public X12ProtocolSettings withMessageFilter(X12MessageFilter messageFilter) {
        this.messageFilter = messageFilter;
        return this;
    }

    /**
     * Get the securitySettings property: The X12 security settings.
     * 
     * @return the securitySettings value.
     */
    public X12SecuritySettings securitySettings() {
        return this.securitySettings;
    }

    /**
     * Set the securitySettings property: The X12 security settings.
     * 
     * @param securitySettings the securitySettings value to set.
     * @return the X12ProtocolSettings object itself.
     */
    public X12ProtocolSettings withSecuritySettings(X12SecuritySettings securitySettings) {
        this.securitySettings = securitySettings;
        return this;
    }

    /**
     * Get the processingSettings property: The X12 processing settings.
     * 
     * @return the processingSettings value.
     */
    public X12ProcessingSettings processingSettings() {
        return this.processingSettings;
    }

    /**
     * Set the processingSettings property: The X12 processing settings.
     * 
     * @param processingSettings the processingSettings value to set.
     * @return the X12ProtocolSettings object itself.
     */
    public X12ProtocolSettings withProcessingSettings(X12ProcessingSettings processingSettings) {
        this.processingSettings = processingSettings;
        return this;
    }

    /**
     * Get the envelopeOverrides property: The X12 envelope override settings.
     * 
     * @return the envelopeOverrides value.
     */
    public List<X12EnvelopeOverride> envelopeOverrides() {
        return this.envelopeOverrides;
    }

    /**
     * Set the envelopeOverrides property: The X12 envelope override settings.
     * 
     * @param envelopeOverrides the envelopeOverrides value to set.
     * @return the X12ProtocolSettings object itself.
     */
    public X12ProtocolSettings withEnvelopeOverrides(List<X12EnvelopeOverride> envelopeOverrides) {
        this.envelopeOverrides = envelopeOverrides;
        return this;
    }

    /**
     * Get the validationOverrides property: The X12 validation override settings.
     * 
     * @return the validationOverrides value.
     */
    public List<X12ValidationOverride> validationOverrides() {
        return this.validationOverrides;
    }

    /**
     * Set the validationOverrides property: The X12 validation override settings.
     * 
     * @param validationOverrides the validationOverrides value to set.
     * @return the X12ProtocolSettings object itself.
     */
    public X12ProtocolSettings withValidationOverrides(List<X12ValidationOverride> validationOverrides) {
        this.validationOverrides = validationOverrides;
        return this;
    }

    /**
     * Get the messageFilterList property: The X12 message filter list.
     * 
     * @return the messageFilterList value.
     */
    public List<X12MessageIdentifier> messageFilterList() {
        return this.messageFilterList;
    }

    /**
     * Set the messageFilterList property: The X12 message filter list.
     * 
     * @param messageFilterList the messageFilterList value to set.
     * @return the X12ProtocolSettings object itself.
     */
    public X12ProtocolSettings withMessageFilterList(List<X12MessageIdentifier> messageFilterList) {
        this.messageFilterList = messageFilterList;
        return this;
    }

    /**
     * Get the schemaReferences property: The X12 schema references.
     * 
     * @return the schemaReferences value.
     */
    public List<X12SchemaReference> schemaReferences() {
        return this.schemaReferences;
    }

    /**
     * Set the schemaReferences property: The X12 schema references.
     * 
     * @param schemaReferences the schemaReferences value to set.
     * @return the X12ProtocolSettings object itself.
     */
    public X12ProtocolSettings withSchemaReferences(List<X12SchemaReference> schemaReferences) {
        this.schemaReferences = schemaReferences;
        return this;
    }

    /**
     * Get the x12DelimiterOverrides property: The X12 delimiter override settings.
     * 
     * @return the x12DelimiterOverrides value.
     */
    public List<X12DelimiterOverrides> x12DelimiterOverrides() {
        return this.x12DelimiterOverrides;
    }

    /**
     * Set the x12DelimiterOverrides property: The X12 delimiter override settings.
     * 
     * @param x12DelimiterOverrides the x12DelimiterOverrides value to set.
     * @return the X12ProtocolSettings object itself.
     */
    public X12ProtocolSettings withX12DelimiterOverrides(List<X12DelimiterOverrides> x12DelimiterOverrides) {
        this.x12DelimiterOverrides = x12DelimiterOverrides;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (validationSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property validationSettings in model X12ProtocolSettings"));
        } else {
            validationSettings().validate();
        }
        if (framingSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property framingSettings in model X12ProtocolSettings"));
        } else {
            framingSettings().validate();
        }
        if (envelopeSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property envelopeSettings in model X12ProtocolSettings"));
        } else {
            envelopeSettings().validate();
        }
        if (acknowledgementSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property acknowledgementSettings in model X12ProtocolSettings"));
        } else {
            acknowledgementSettings().validate();
        }
        if (messageFilter() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property messageFilter in model X12ProtocolSettings"));
        } else {
            messageFilter().validate();
        }
        if (securitySettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property securitySettings in model X12ProtocolSettings"));
        } else {
            securitySettings().validate();
        }
        if (processingSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property processingSettings in model X12ProtocolSettings"));
        } else {
            processingSettings().validate();
        }
        if (envelopeOverrides() != null) {
            envelopeOverrides().forEach(e -> e.validate());
        }
        if (validationOverrides() != null) {
            validationOverrides().forEach(e -> e.validate());
        }
        if (messageFilterList() != null) {
            messageFilterList().forEach(e -> e.validate());
        }
        if (schemaReferences() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property schemaReferences in model X12ProtocolSettings"));
        } else {
            schemaReferences().forEach(e -> e.validate());
        }
        if (x12DelimiterOverrides() != null) {
            x12DelimiterOverrides().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(X12ProtocolSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("validationSettings", this.validationSettings);
        jsonWriter.writeJsonField("framingSettings", this.framingSettings);
        jsonWriter.writeJsonField("envelopeSettings", this.envelopeSettings);
        jsonWriter.writeJsonField("acknowledgementSettings", this.acknowledgementSettings);
        jsonWriter.writeJsonField("messageFilter", this.messageFilter);
        jsonWriter.writeJsonField("securitySettings", this.securitySettings);
        jsonWriter.writeJsonField("processingSettings", this.processingSettings);
        jsonWriter.writeArrayField("schemaReferences", this.schemaReferences,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("envelopeOverrides", this.envelopeOverrides,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("validationOverrides", this.validationOverrides,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("messageFilterList", this.messageFilterList,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("x12DelimiterOverrides", this.x12DelimiterOverrides,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of X12ProtocolSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of X12ProtocolSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the X12ProtocolSettings.
     */
    public static X12ProtocolSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            X12ProtocolSettings deserializedX12ProtocolSettings = new X12ProtocolSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("validationSettings".equals(fieldName)) {
                    deserializedX12ProtocolSettings.validationSettings = X12ValidationSettings.fromJson(reader);
                } else if ("framingSettings".equals(fieldName)) {
                    deserializedX12ProtocolSettings.framingSettings = X12FramingSettings.fromJson(reader);
                } else if ("envelopeSettings".equals(fieldName)) {
                    deserializedX12ProtocolSettings.envelopeSettings = X12EnvelopeSettings.fromJson(reader);
                } else if ("acknowledgementSettings".equals(fieldName)) {
                    deserializedX12ProtocolSettings.acknowledgementSettings
                        = X12AcknowledgementSettings.fromJson(reader);
                } else if ("messageFilter".equals(fieldName)) {
                    deserializedX12ProtocolSettings.messageFilter = X12MessageFilter.fromJson(reader);
                } else if ("securitySettings".equals(fieldName)) {
                    deserializedX12ProtocolSettings.securitySettings = X12SecuritySettings.fromJson(reader);
                } else if ("processingSettings".equals(fieldName)) {
                    deserializedX12ProtocolSettings.processingSettings = X12ProcessingSettings.fromJson(reader);
                } else if ("schemaReferences".equals(fieldName)) {
                    List<X12SchemaReference> schemaReferences
                        = reader.readArray(reader1 -> X12SchemaReference.fromJson(reader1));
                    deserializedX12ProtocolSettings.schemaReferences = schemaReferences;
                } else if ("envelopeOverrides".equals(fieldName)) {
                    List<X12EnvelopeOverride> envelopeOverrides
                        = reader.readArray(reader1 -> X12EnvelopeOverride.fromJson(reader1));
                    deserializedX12ProtocolSettings.envelopeOverrides = envelopeOverrides;
                } else if ("validationOverrides".equals(fieldName)) {
                    List<X12ValidationOverride> validationOverrides
                        = reader.readArray(reader1 -> X12ValidationOverride.fromJson(reader1));
                    deserializedX12ProtocolSettings.validationOverrides = validationOverrides;
                } else if ("messageFilterList".equals(fieldName)) {
                    List<X12MessageIdentifier> messageFilterList
                        = reader.readArray(reader1 -> X12MessageIdentifier.fromJson(reader1));
                    deserializedX12ProtocolSettings.messageFilterList = messageFilterList;
                } else if ("x12DelimiterOverrides".equals(fieldName)) {
                    List<X12DelimiterOverrides> x12DelimiterOverrides
                        = reader.readArray(reader1 -> X12DelimiterOverrides.fromJson(reader1));
                    deserializedX12ProtocolSettings.x12DelimiterOverrides = x12DelimiterOverrides;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedX12ProtocolSettings;
        });
    }
}
