// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.logic.fluent.models.IntegrationAccountCertificateInner;
import com.azure.resourcemanager.logic.models.IntegrationAccountCertificate;
import com.azure.resourcemanager.logic.models.KeyVaultKeyReference;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;

public final class IntegrationAccountCertificateImpl
    implements IntegrationAccountCertificate,
        IntegrationAccountCertificate.Definition,
        IntegrationAccountCertificate.Update {
    private IntegrationAccountCertificateInner innerObject;

    private final com.azure.resourcemanager.logic.LogicManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public OffsetDateTime createdTime() {
        return this.innerModel().createdTime();
    }

    public OffsetDateTime changedTime() {
        return this.innerModel().changedTime();
    }

    public Object metadata() {
        return this.innerModel().metadata();
    }

    public KeyVaultKeyReference key() {
        return this.innerModel().key();
    }

    public String publicCertificate() {
        return this.innerModel().publicCertificate();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public IntegrationAccountCertificateInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.logic.LogicManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String integrationAccountName;

    private String certificateName;

    public IntegrationAccountCertificateImpl withExistingIntegrationAccount(
        String resourceGroupName, String integrationAccountName) {
        this.resourceGroupName = resourceGroupName;
        this.integrationAccountName = integrationAccountName;
        return this;
    }

    public IntegrationAccountCertificate create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIntegrationAccountCertificates()
                .createOrUpdateWithResponse(
                    resourceGroupName, integrationAccountName, certificateName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public IntegrationAccountCertificate create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIntegrationAccountCertificates()
                .createOrUpdateWithResponse(
                    resourceGroupName, integrationAccountName, certificateName, this.innerModel(), context)
                .getValue();
        return this;
    }

    IntegrationAccountCertificateImpl(String name, com.azure.resourcemanager.logic.LogicManager serviceManager) {
        this.innerObject = new IntegrationAccountCertificateInner();
        this.serviceManager = serviceManager;
        this.certificateName = name;
    }

    public IntegrationAccountCertificateImpl update() {
        return this;
    }

    public IntegrationAccountCertificate apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIntegrationAccountCertificates()
                .createOrUpdateWithResponse(
                    resourceGroupName, integrationAccountName, certificateName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public IntegrationAccountCertificate apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIntegrationAccountCertificates()
                .createOrUpdateWithResponse(
                    resourceGroupName, integrationAccountName, certificateName, this.innerModel(), context)
                .getValue();
        return this;
    }

    IntegrationAccountCertificateImpl(
        IntegrationAccountCertificateInner innerObject, com.azure.resourcemanager.logic.LogicManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.integrationAccountName = Utils.getValueFromIdByName(innerObject.id(), "integrationAccounts");
        this.certificateName = Utils.getValueFromIdByName(innerObject.id(), "certificates");
    }

    public IntegrationAccountCertificate refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIntegrationAccountCertificates()
                .getWithResponse(resourceGroupName, integrationAccountName, certificateName, Context.NONE)
                .getValue();
        return this;
    }

    public IntegrationAccountCertificate refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIntegrationAccountCertificates()
                .getWithResponse(resourceGroupName, integrationAccountName, certificateName, context)
                .getValue();
        return this;
    }

    public IntegrationAccountCertificateImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public IntegrationAccountCertificateImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public IntegrationAccountCertificateImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public IntegrationAccountCertificateImpl withMetadata(Object metadata) {
        this.innerModel().withMetadata(metadata);
        return this;
    }

    public IntegrationAccountCertificateImpl withKey(KeyVaultKeyReference key) {
        this.innerModel().withKey(key);
        return this;
    }

    public IntegrationAccountCertificateImpl withPublicCertificate(String publicCertificate) {
        this.innerModel().withPublicCertificate(publicCertificate);
        return this;
    }
}
