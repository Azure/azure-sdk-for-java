// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The B2B partner content.
 */
@Fluent
public final class B2BPartnerContent implements JsonSerializable<B2BPartnerContent> {
    /*
     * The list of partner business identities.
     */
    private List<BusinessIdentity> businessIdentities;

    /**
     * Creates an instance of B2BPartnerContent class.
     */
    public B2BPartnerContent() {
    }

    /**
     * Get the businessIdentities property: The list of partner business identities.
     * 
     * @return the businessIdentities value.
     */
    public List<BusinessIdentity> businessIdentities() {
        return this.businessIdentities;
    }

    /**
     * Set the businessIdentities property: The list of partner business identities.
     * 
     * @param businessIdentities the businessIdentities value to set.
     * @return the B2BPartnerContent object itself.
     */
    public B2BPartnerContent withBusinessIdentities(List<BusinessIdentity> businessIdentities) {
        this.businessIdentities = businessIdentities;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (businessIdentities() != null) {
            businessIdentities().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("businessIdentities", this.businessIdentities,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of B2BPartnerContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of B2BPartnerContent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the B2BPartnerContent.
     */
    public static B2BPartnerContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            B2BPartnerContent deserializedB2BPartnerContent = new B2BPartnerContent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("businessIdentities".equals(fieldName)) {
                    List<BusinessIdentity> businessIdentities
                        = reader.readArray(reader1 -> BusinessIdentity.fromJson(reader1));
                    deserializedB2BPartnerContent.businessIdentities = businessIdentities;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedB2BPartnerContent;
        });
    }
}
