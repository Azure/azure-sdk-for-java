// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The X12 message filter for odata query.
 */
@Fluent
public final class X12MessageFilter implements JsonSerializable<X12MessageFilter> {
    /*
     * The message filter type.
     */
    private MessageFilterType messageFilterType;

    /**
     * Creates an instance of X12MessageFilter class.
     */
    public X12MessageFilter() {
    }

    /**
     * Get the messageFilterType property: The message filter type.
     * 
     * @return the messageFilterType value.
     */
    public MessageFilterType messageFilterType() {
        return this.messageFilterType;
    }

    /**
     * Set the messageFilterType property: The message filter type.
     * 
     * @param messageFilterType the messageFilterType value to set.
     * @return the X12MessageFilter object itself.
     */
    public X12MessageFilter withMessageFilterType(MessageFilterType messageFilterType) {
        this.messageFilterType = messageFilterType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (messageFilterType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property messageFilterType in model X12MessageFilter"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(X12MessageFilter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("messageFilterType",
            this.messageFilterType == null ? null : this.messageFilterType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of X12MessageFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of X12MessageFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the X12MessageFilter.
     */
    public static X12MessageFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            X12MessageFilter deserializedX12MessageFilter = new X12MessageFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("messageFilterType".equals(fieldName)) {
                    deserializedX12MessageFilter.messageFilterType = MessageFilterType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedX12MessageFilter;
        });
    }
}
