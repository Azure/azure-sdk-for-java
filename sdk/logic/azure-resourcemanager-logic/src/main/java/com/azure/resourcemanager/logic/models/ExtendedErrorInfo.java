// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The extended error info.
 */
@Fluent
public final class ExtendedErrorInfo implements JsonSerializable<ExtendedErrorInfo> {
    /*
     * The error code.
     */
    private ErrorResponseCode code;

    /*
     * The error message.
     */
    private String message;

    /*
     * The error message details.
     */
    private List<ExtendedErrorInfo> details;

    /*
     * The inner error.
     */
    private Object innerError;

    /**
     * Creates an instance of ExtendedErrorInfo class.
     */
    public ExtendedErrorInfo() {
    }

    /**
     * Get the code property: The error code.
     * 
     * @return the code value.
     */
    public ErrorResponseCode code() {
        return this.code;
    }

    /**
     * Set the code property: The error code.
     * 
     * @param code the code value to set.
     * @return the ExtendedErrorInfo object itself.
     */
    public ExtendedErrorInfo withCode(ErrorResponseCode code) {
        this.code = code;
        return this;
    }

    /**
     * Get the message property: The error message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: The error message.
     * 
     * @param message the message value to set.
     * @return the ExtendedErrorInfo object itself.
     */
    public ExtendedErrorInfo withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the details property: The error message details.
     * 
     * @return the details value.
     */
    public List<ExtendedErrorInfo> details() {
        return this.details;
    }

    /**
     * Set the details property: The error message details.
     * 
     * @param details the details value to set.
     * @return the ExtendedErrorInfo object itself.
     */
    public ExtendedErrorInfo withDetails(List<ExtendedErrorInfo> details) {
        this.details = details;
        return this;
    }

    /**
     * Get the innerError property: The inner error.
     * 
     * @return the innerError value.
     */
    public Object innerError() {
        return this.innerError;
    }

    /**
     * Set the innerError property: The inner error.
     * 
     * @param innerError the innerError value to set.
     * @return the ExtendedErrorInfo object itself.
     */
    public ExtendedErrorInfo withInnerError(Object innerError) {
        this.innerError = innerError;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (code() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property code in model ExtendedErrorInfo"));
        }
        if (message() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property message in model ExtendedErrorInfo"));
        }
        if (details() != null) {
            details().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExtendedErrorInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("code", this.code == null ? null : this.code.toString());
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeArrayField("details", this.details, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeUntypedField("innerError", this.innerError);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExtendedErrorInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExtendedErrorInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExtendedErrorInfo.
     */
    public static ExtendedErrorInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExtendedErrorInfo deserializedExtendedErrorInfo = new ExtendedErrorInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    deserializedExtendedErrorInfo.code = ErrorResponseCode.fromString(reader.getString());
                } else if ("message".equals(fieldName)) {
                    deserializedExtendedErrorInfo.message = reader.getString();
                } else if ("details".equals(fieldName)) {
                    List<ExtendedErrorInfo> details = reader.readArray(reader1 -> ExtendedErrorInfo.fromJson(reader1));
                    deserializedExtendedErrorInfo.details = details;
                } else if ("innerError".equals(fieldName)) {
                    deserializedExtendedErrorInfo.innerError = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExtendedErrorInfo;
        });
    }
}
