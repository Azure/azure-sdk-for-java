// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.fluent.models.IntegrationAccountInner;
import com.azure.resourcemanager.logic.fluent.models.IntegrationServiceEnvironmentInner;
import com.azure.resourcemanager.logic.models.IntegrationAccount;
import com.azure.resourcemanager.logic.models.IntegrationAccountSku;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironment;
import com.azure.resourcemanager.logic.models.WorkflowState;
import java.util.Collections;
import java.util.Map;

public final class IntegrationAccountImpl
    implements IntegrationAccount, IntegrationAccount.Definition, IntegrationAccount.Update {
    private IntegrationAccountInner innerObject;

    private final LogicManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public IntegrationAccountSku sku() {
        return this.innerModel().sku();
    }

    public IntegrationServiceEnvironment integrationServiceEnvironment() {
        IntegrationServiceEnvironmentInner inner = this.innerModel().integrationServiceEnvironment();
        if (inner != null) {
            return new IntegrationServiceEnvironmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public WorkflowState state() {
        return this.innerModel().state();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public IntegrationAccountInner innerModel() {
        return this.innerObject;
    }

    private LogicManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String integrationAccountName;

    public IntegrationAccountImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public IntegrationAccount create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIntegrationAccounts()
                .createOrUpdateWithResponse(resourceGroupName, integrationAccountName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public IntegrationAccount create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIntegrationAccounts()
                .createOrUpdateWithResponse(resourceGroupName, integrationAccountName, this.innerModel(), context)
                .getValue();
        return this;
    }

    IntegrationAccountImpl(String name, LogicManager serviceManager) {
        this.innerObject = new IntegrationAccountInner();
        this.serviceManager = serviceManager;
        this.integrationAccountName = name;
    }

    public IntegrationAccountImpl update() {
        return this;
    }

    public IntegrationAccount apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIntegrationAccounts()
                .updateWithResponse(resourceGroupName, integrationAccountName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public IntegrationAccount apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIntegrationAccounts()
                .updateWithResponse(resourceGroupName, integrationAccountName, this.innerModel(), context)
                .getValue();
        return this;
    }

    IntegrationAccountImpl(IntegrationAccountInner innerObject, LogicManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.integrationAccountName = Utils.getValueFromIdByName(innerObject.id(), "integrationAccounts");
    }

    public IntegrationAccount refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIntegrationAccounts()
                .getByResourceGroupWithResponse(resourceGroupName, integrationAccountName, Context.NONE)
                .getValue();
        return this;
    }

    public IntegrationAccount refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIntegrationAccounts()
                .getByResourceGroupWithResponse(resourceGroupName, integrationAccountName, context)
                .getValue();
        return this;
    }

    public IntegrationAccountImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public IntegrationAccountImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public IntegrationAccountImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public IntegrationAccountImpl withSku(IntegrationAccountSku sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public IntegrationAccountImpl withIntegrationServiceEnvironment(
        IntegrationServiceEnvironmentInner integrationServiceEnvironment) {
        this.innerModel().withIntegrationServiceEnvironment(integrationServiceEnvironment);
        return this;
    }

    public IntegrationAccountImpl withState(WorkflowState state) {
        this.innerModel().withState(state);
        return this;
    }
}
