// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The network configuration.
 */
@Fluent
public final class NetworkConfiguration implements JsonSerializable<NetworkConfiguration> {
    /*
     * Gets the virtual network address space.
     */
    private String virtualNetworkAddressSpace;

    /*
     * The access endpoint.
     */
    private IntegrationServiceEnvironmentAccessEndpoint accessEndpoint;

    /*
     * The subnets.
     */
    private List<ResourceReference> subnets;

    /**
     * Creates an instance of NetworkConfiguration class.
     */
    public NetworkConfiguration() {
    }

    /**
     * Get the virtualNetworkAddressSpace property: Gets the virtual network address space.
     * 
     * @return the virtualNetworkAddressSpace value.
     */
    public String virtualNetworkAddressSpace() {
        return this.virtualNetworkAddressSpace;
    }

    /**
     * Set the virtualNetworkAddressSpace property: Gets the virtual network address space.
     * 
     * @param virtualNetworkAddressSpace the virtualNetworkAddressSpace value to set.
     * @return the NetworkConfiguration object itself.
     */
    public NetworkConfiguration withVirtualNetworkAddressSpace(String virtualNetworkAddressSpace) {
        this.virtualNetworkAddressSpace = virtualNetworkAddressSpace;
        return this;
    }

    /**
     * Get the accessEndpoint property: The access endpoint.
     * 
     * @return the accessEndpoint value.
     */
    public IntegrationServiceEnvironmentAccessEndpoint accessEndpoint() {
        return this.accessEndpoint;
    }

    /**
     * Set the accessEndpoint property: The access endpoint.
     * 
     * @param accessEndpoint the accessEndpoint value to set.
     * @return the NetworkConfiguration object itself.
     */
    public NetworkConfiguration withAccessEndpoint(IntegrationServiceEnvironmentAccessEndpoint accessEndpoint) {
        this.accessEndpoint = accessEndpoint;
        return this;
    }

    /**
     * Get the subnets property: The subnets.
     * 
     * @return the subnets value.
     */
    public List<ResourceReference> subnets() {
        return this.subnets;
    }

    /**
     * Set the subnets property: The subnets.
     * 
     * @param subnets the subnets value to set.
     * @return the NetworkConfiguration object itself.
     */
    public NetworkConfiguration withSubnets(List<ResourceReference> subnets) {
        this.subnets = subnets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (accessEndpoint() != null) {
            accessEndpoint().validate();
        }
        if (subnets() != null) {
            subnets().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("virtualNetworkAddressSpace", this.virtualNetworkAddressSpace);
        jsonWriter.writeJsonField("accessEndpoint", this.accessEndpoint);
        jsonWriter.writeArrayField("subnets", this.subnets, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkConfiguration.
     */
    public static NetworkConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkConfiguration deserializedNetworkConfiguration = new NetworkConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("virtualNetworkAddressSpace".equals(fieldName)) {
                    deserializedNetworkConfiguration.virtualNetworkAddressSpace = reader.getString();
                } else if ("accessEndpoint".equals(fieldName)) {
                    deserializedNetworkConfiguration.accessEndpoint
                        = IntegrationServiceEnvironmentAccessEndpoint.fromJson(reader);
                } else if ("subnets".equals(fieldName)) {
                    List<ResourceReference> subnets = reader.readArray(reader1 -> ResourceReference.fromJson(reader1));
                    deserializedNetworkConfiguration.subnets = subnets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkConfiguration;
        });
    }
}
