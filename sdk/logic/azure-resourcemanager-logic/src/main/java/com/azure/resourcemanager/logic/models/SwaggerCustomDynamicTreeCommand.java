// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The swagger tree command.
 */
@Fluent
public final class SwaggerCustomDynamicTreeCommand implements JsonSerializable<SwaggerCustomDynamicTreeCommand> {
    /*
     * The path to an item property which defines the display name of the item.
     */
    private String operationId;

    /*
     * The path to an item property which defines the display name of the item.
     */
    private String itemsPath;

    /*
     * The path to an item property which defines the display name of the item.
     */
    private String itemValuePath;

    /*
     * The path to an item property which defines the display name of the item.
     */
    private String itemTitlePath;

    /*
     * The path to an item property which defines the display name of the item.
     */
    private String itemFullTitlePath;

    /*
     * The path to an item property which defines the display name of the item.
     */
    private String itemIsParent;

    /*
     * The path to an item property which defines the display name of the item.
     */
    private String selectableFilter;

    /*
     * Dictionary of <SwaggerCustomDynamicTreeParameter>
     */
    private Map<String, SwaggerCustomDynamicTreeParameter> parameters;

    /**
     * Creates an instance of SwaggerCustomDynamicTreeCommand class.
     */
    public SwaggerCustomDynamicTreeCommand() {
    }

    /**
     * Get the operationId property: The path to an item property which defines the display name of the item.
     * 
     * @return the operationId value.
     */
    public String operationId() {
        return this.operationId;
    }

    /**
     * Set the operationId property: The path to an item property which defines the display name of the item.
     * 
     * @param operationId the operationId value to set.
     * @return the SwaggerCustomDynamicTreeCommand object itself.
     */
    public SwaggerCustomDynamicTreeCommand withOperationId(String operationId) {
        this.operationId = operationId;
        return this;
    }

    /**
     * Get the itemsPath property: The path to an item property which defines the display name of the item.
     * 
     * @return the itemsPath value.
     */
    public String itemsPath() {
        return this.itemsPath;
    }

    /**
     * Set the itemsPath property: The path to an item property which defines the display name of the item.
     * 
     * @param itemsPath the itemsPath value to set.
     * @return the SwaggerCustomDynamicTreeCommand object itself.
     */
    public SwaggerCustomDynamicTreeCommand withItemsPath(String itemsPath) {
        this.itemsPath = itemsPath;
        return this;
    }

    /**
     * Get the itemValuePath property: The path to an item property which defines the display name of the item.
     * 
     * @return the itemValuePath value.
     */
    public String itemValuePath() {
        return this.itemValuePath;
    }

    /**
     * Set the itemValuePath property: The path to an item property which defines the display name of the item.
     * 
     * @param itemValuePath the itemValuePath value to set.
     * @return the SwaggerCustomDynamicTreeCommand object itself.
     */
    public SwaggerCustomDynamicTreeCommand withItemValuePath(String itemValuePath) {
        this.itemValuePath = itemValuePath;
        return this;
    }

    /**
     * Get the itemTitlePath property: The path to an item property which defines the display name of the item.
     * 
     * @return the itemTitlePath value.
     */
    public String itemTitlePath() {
        return this.itemTitlePath;
    }

    /**
     * Set the itemTitlePath property: The path to an item property which defines the display name of the item.
     * 
     * @param itemTitlePath the itemTitlePath value to set.
     * @return the SwaggerCustomDynamicTreeCommand object itself.
     */
    public SwaggerCustomDynamicTreeCommand withItemTitlePath(String itemTitlePath) {
        this.itemTitlePath = itemTitlePath;
        return this;
    }

    /**
     * Get the itemFullTitlePath property: The path to an item property which defines the display name of the item.
     * 
     * @return the itemFullTitlePath value.
     */
    public String itemFullTitlePath() {
        return this.itemFullTitlePath;
    }

    /**
     * Set the itemFullTitlePath property: The path to an item property which defines the display name of the item.
     * 
     * @param itemFullTitlePath the itemFullTitlePath value to set.
     * @return the SwaggerCustomDynamicTreeCommand object itself.
     */
    public SwaggerCustomDynamicTreeCommand withItemFullTitlePath(String itemFullTitlePath) {
        this.itemFullTitlePath = itemFullTitlePath;
        return this;
    }

    /**
     * Get the itemIsParent property: The path to an item property which defines the display name of the item.
     * 
     * @return the itemIsParent value.
     */
    public String itemIsParent() {
        return this.itemIsParent;
    }

    /**
     * Set the itemIsParent property: The path to an item property which defines the display name of the item.
     * 
     * @param itemIsParent the itemIsParent value to set.
     * @return the SwaggerCustomDynamicTreeCommand object itself.
     */
    public SwaggerCustomDynamicTreeCommand withItemIsParent(String itemIsParent) {
        this.itemIsParent = itemIsParent;
        return this;
    }

    /**
     * Get the selectableFilter property: The path to an item property which defines the display name of the item.
     * 
     * @return the selectableFilter value.
     */
    public String selectableFilter() {
        return this.selectableFilter;
    }

    /**
     * Set the selectableFilter property: The path to an item property which defines the display name of the item.
     * 
     * @param selectableFilter the selectableFilter value to set.
     * @return the SwaggerCustomDynamicTreeCommand object itself.
     */
    public SwaggerCustomDynamicTreeCommand withSelectableFilter(String selectableFilter) {
        this.selectableFilter = selectableFilter;
        return this;
    }

    /**
     * Get the parameters property: Dictionary of &lt;SwaggerCustomDynamicTreeParameter&gt;.
     * 
     * @return the parameters value.
     */
    public Map<String, SwaggerCustomDynamicTreeParameter> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Dictionary of &lt;SwaggerCustomDynamicTreeParameter&gt;.
     * 
     * @param parameters the parameters value to set.
     * @return the SwaggerCustomDynamicTreeCommand object itself.
     */
    public SwaggerCustomDynamicTreeCommand withParameters(Map<String, SwaggerCustomDynamicTreeParameter> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (parameters() != null) {
            parameters().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operationId", this.operationId);
        jsonWriter.writeStringField("itemsPath", this.itemsPath);
        jsonWriter.writeStringField("itemValuePath", this.itemValuePath);
        jsonWriter.writeStringField("itemTitlePath", this.itemTitlePath);
        jsonWriter.writeStringField("itemFullTitlePath", this.itemFullTitlePath);
        jsonWriter.writeStringField("itemIsParent", this.itemIsParent);
        jsonWriter.writeStringField("selectableFilter", this.selectableFilter);
        jsonWriter.writeMapField("parameters", this.parameters, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SwaggerCustomDynamicTreeCommand from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SwaggerCustomDynamicTreeCommand if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SwaggerCustomDynamicTreeCommand.
     */
    public static SwaggerCustomDynamicTreeCommand fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SwaggerCustomDynamicTreeCommand deserializedSwaggerCustomDynamicTreeCommand
                = new SwaggerCustomDynamicTreeCommand();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operationId".equals(fieldName)) {
                    deserializedSwaggerCustomDynamicTreeCommand.operationId = reader.getString();
                } else if ("itemsPath".equals(fieldName)) {
                    deserializedSwaggerCustomDynamicTreeCommand.itemsPath = reader.getString();
                } else if ("itemValuePath".equals(fieldName)) {
                    deserializedSwaggerCustomDynamicTreeCommand.itemValuePath = reader.getString();
                } else if ("itemTitlePath".equals(fieldName)) {
                    deserializedSwaggerCustomDynamicTreeCommand.itemTitlePath = reader.getString();
                } else if ("itemFullTitlePath".equals(fieldName)) {
                    deserializedSwaggerCustomDynamicTreeCommand.itemFullTitlePath = reader.getString();
                } else if ("itemIsParent".equals(fieldName)) {
                    deserializedSwaggerCustomDynamicTreeCommand.itemIsParent = reader.getString();
                } else if ("selectableFilter".equals(fieldName)) {
                    deserializedSwaggerCustomDynamicTreeCommand.selectableFilter = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    Map<String, SwaggerCustomDynamicTreeParameter> parameters
                        = reader.readMap(reader1 -> SwaggerCustomDynamicTreeParameter.fromJson(reader1));
                    deserializedSwaggerCustomDynamicTreeCommand.parameters = parameters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSwaggerCustomDynamicTreeCommand;
        });
    }
}
