// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironmentNetworkDependency;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironmentNetworkDependencyHealth;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironmentNetworkEndPointAccessibilityState;
import java.io.IOException;
import java.util.List;

/**
 * The integration service environment subnet network health.
 */
@Fluent
public final class IntegrationServiceEnvironmentSubnetNetworkHealthInner
    implements JsonSerializable<IntegrationServiceEnvironmentSubnetNetworkHealthInner> {
    /*
     * The outbound network dependencies.
     */
    private List<IntegrationServiceEnvironmentNetworkDependency> outboundNetworkDependencies;

    /*
     * The integration service environment network health.
     */
    private IntegrationServiceEnvironmentNetworkDependencyHealth outboundNetworkHealth;

    /*
     * The integration service environment network health state.
     */
    private IntegrationServiceEnvironmentNetworkEndPointAccessibilityState networkDependencyHealthState;

    /**
     * Creates an instance of IntegrationServiceEnvironmentSubnetNetworkHealthInner class.
     */
    public IntegrationServiceEnvironmentSubnetNetworkHealthInner() {
    }

    /**
     * Get the outboundNetworkDependencies property: The outbound network dependencies.
     * 
     * @return the outboundNetworkDependencies value.
     */
    public List<IntegrationServiceEnvironmentNetworkDependency> outboundNetworkDependencies() {
        return this.outboundNetworkDependencies;
    }

    /**
     * Set the outboundNetworkDependencies property: The outbound network dependencies.
     * 
     * @param outboundNetworkDependencies the outboundNetworkDependencies value to set.
     * @return the IntegrationServiceEnvironmentSubnetNetworkHealthInner object itself.
     */
    public IntegrationServiceEnvironmentSubnetNetworkHealthInner withOutboundNetworkDependencies(
        List<IntegrationServiceEnvironmentNetworkDependency> outboundNetworkDependencies) {
        this.outboundNetworkDependencies = outboundNetworkDependencies;
        return this;
    }

    /**
     * Get the outboundNetworkHealth property: The integration service environment network health.
     * 
     * @return the outboundNetworkHealth value.
     */
    public IntegrationServiceEnvironmentNetworkDependencyHealth outboundNetworkHealth() {
        return this.outboundNetworkHealth;
    }

    /**
     * Set the outboundNetworkHealth property: The integration service environment network health.
     * 
     * @param outboundNetworkHealth the outboundNetworkHealth value to set.
     * @return the IntegrationServiceEnvironmentSubnetNetworkHealthInner object itself.
     */
    public IntegrationServiceEnvironmentSubnetNetworkHealthInner
        withOutboundNetworkHealth(IntegrationServiceEnvironmentNetworkDependencyHealth outboundNetworkHealth) {
        this.outboundNetworkHealth = outboundNetworkHealth;
        return this;
    }

    /**
     * Get the networkDependencyHealthState property: The integration service environment network health state.
     * 
     * @return the networkDependencyHealthState value.
     */
    public IntegrationServiceEnvironmentNetworkEndPointAccessibilityState networkDependencyHealthState() {
        return this.networkDependencyHealthState;
    }

    /**
     * Set the networkDependencyHealthState property: The integration service environment network health state.
     * 
     * @param networkDependencyHealthState the networkDependencyHealthState value to set.
     * @return the IntegrationServiceEnvironmentSubnetNetworkHealthInner object itself.
     */
    public IntegrationServiceEnvironmentSubnetNetworkHealthInner withNetworkDependencyHealthState(
        IntegrationServiceEnvironmentNetworkEndPointAccessibilityState networkDependencyHealthState) {
        this.networkDependencyHealthState = networkDependencyHealthState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (outboundNetworkDependencies() != null) {
            outboundNetworkDependencies().forEach(e -> e.validate());
        }
        if (outboundNetworkHealth() != null) {
            outboundNetworkHealth().validate();
        }
        if (networkDependencyHealthState() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property networkDependencyHealthState in model IntegrationServiceEnvironmentSubnetNetworkHealthInner"));
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(IntegrationServiceEnvironmentSubnetNetworkHealthInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("networkDependencyHealthState",
            this.networkDependencyHealthState == null ? null : this.networkDependencyHealthState.toString());
        jsonWriter.writeArrayField("outboundNetworkDependencies", this.outboundNetworkDependencies,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("outboundNetworkHealth", this.outboundNetworkHealth);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IntegrationServiceEnvironmentSubnetNetworkHealthInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IntegrationServiceEnvironmentSubnetNetworkHealthInner if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IntegrationServiceEnvironmentSubnetNetworkHealthInner.
     */
    public static IntegrationServiceEnvironmentSubnetNetworkHealthInner fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            IntegrationServiceEnvironmentSubnetNetworkHealthInner deserializedIntegrationServiceEnvironmentSubnetNetworkHealthInner
                = new IntegrationServiceEnvironmentSubnetNetworkHealthInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("networkDependencyHealthState".equals(fieldName)) {
                    deserializedIntegrationServiceEnvironmentSubnetNetworkHealthInner.networkDependencyHealthState
                        = IntegrationServiceEnvironmentNetworkEndPointAccessibilityState.fromString(reader.getString());
                } else if ("outboundNetworkDependencies".equals(fieldName)) {
                    List<IntegrationServiceEnvironmentNetworkDependency> outboundNetworkDependencies
                        = reader.readArray(reader1 -> IntegrationServiceEnvironmentNetworkDependency.fromJson(reader1));
                    deserializedIntegrationServiceEnvironmentSubnetNetworkHealthInner.outboundNetworkDependencies
                        = outboundNetworkDependencies;
                } else if ("outboundNetworkHealth".equals(fieldName)) {
                    deserializedIntegrationServiceEnvironmentSubnetNetworkHealthInner.outboundNetworkHealth
                        = IntegrationServiceEnvironmentNetworkDependencyHealth.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIntegrationServiceEnvironmentSubnetNetworkHealthInner;
        });
    }
}
