// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AS2 agreement acknowledgement connection settings.
 */
@Fluent
public final class AS2AcknowledgementConnectionSettings
    implements JsonSerializable<AS2AcknowledgementConnectionSettings> {
    /*
     * Indicates whether to ignore mismatch in certificate name.
     */
    private boolean ignoreCertificateNameMismatch;

    /*
     * Indicates whether to support HTTP status code 'CONTINUE'.
     */
    private boolean supportHttpStatusCodeContinue;

    /*
     * Indicates whether to keep the connection alive.
     */
    private boolean keepHttpConnectionAlive;

    /*
     * Indicates whether to unfold the HTTP headers.
     */
    private boolean unfoldHttpHeaders;

    /**
     * Creates an instance of AS2AcknowledgementConnectionSettings class.
     */
    public AS2AcknowledgementConnectionSettings() {
    }

    /**
     * Get the ignoreCertificateNameMismatch property: Indicates whether to ignore mismatch in certificate name.
     * 
     * @return the ignoreCertificateNameMismatch value.
     */
    public boolean ignoreCertificateNameMismatch() {
        return this.ignoreCertificateNameMismatch;
    }

    /**
     * Set the ignoreCertificateNameMismatch property: Indicates whether to ignore mismatch in certificate name.
     * 
     * @param ignoreCertificateNameMismatch the ignoreCertificateNameMismatch value to set.
     * @return the AS2AcknowledgementConnectionSettings object itself.
     */
    public AS2AcknowledgementConnectionSettings
        withIgnoreCertificateNameMismatch(boolean ignoreCertificateNameMismatch) {
        this.ignoreCertificateNameMismatch = ignoreCertificateNameMismatch;
        return this;
    }

    /**
     * Get the supportHttpStatusCodeContinue property: Indicates whether to support HTTP status code 'CONTINUE'.
     * 
     * @return the supportHttpStatusCodeContinue value.
     */
    public boolean supportHttpStatusCodeContinue() {
        return this.supportHttpStatusCodeContinue;
    }

    /**
     * Set the supportHttpStatusCodeContinue property: Indicates whether to support HTTP status code 'CONTINUE'.
     * 
     * @param supportHttpStatusCodeContinue the supportHttpStatusCodeContinue value to set.
     * @return the AS2AcknowledgementConnectionSettings object itself.
     */
    public AS2AcknowledgementConnectionSettings
        withSupportHttpStatusCodeContinue(boolean supportHttpStatusCodeContinue) {
        this.supportHttpStatusCodeContinue = supportHttpStatusCodeContinue;
        return this;
    }

    /**
     * Get the keepHttpConnectionAlive property: Indicates whether to keep the connection alive.
     * 
     * @return the keepHttpConnectionAlive value.
     */
    public boolean keepHttpConnectionAlive() {
        return this.keepHttpConnectionAlive;
    }

    /**
     * Set the keepHttpConnectionAlive property: Indicates whether to keep the connection alive.
     * 
     * @param keepHttpConnectionAlive the keepHttpConnectionAlive value to set.
     * @return the AS2AcknowledgementConnectionSettings object itself.
     */
    public AS2AcknowledgementConnectionSettings withKeepHttpConnectionAlive(boolean keepHttpConnectionAlive) {
        this.keepHttpConnectionAlive = keepHttpConnectionAlive;
        return this;
    }

    /**
     * Get the unfoldHttpHeaders property: Indicates whether to unfold the HTTP headers.
     * 
     * @return the unfoldHttpHeaders value.
     */
    public boolean unfoldHttpHeaders() {
        return this.unfoldHttpHeaders;
    }

    /**
     * Set the unfoldHttpHeaders property: Indicates whether to unfold the HTTP headers.
     * 
     * @param unfoldHttpHeaders the unfoldHttpHeaders value to set.
     * @return the AS2AcknowledgementConnectionSettings object itself.
     */
    public AS2AcknowledgementConnectionSettings withUnfoldHttpHeaders(boolean unfoldHttpHeaders) {
        this.unfoldHttpHeaders = unfoldHttpHeaders;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("ignoreCertificateNameMismatch", this.ignoreCertificateNameMismatch);
        jsonWriter.writeBooleanField("supportHttpStatusCodeContinue", this.supportHttpStatusCodeContinue);
        jsonWriter.writeBooleanField("keepHttpConnectionAlive", this.keepHttpConnectionAlive);
        jsonWriter.writeBooleanField("unfoldHttpHeaders", this.unfoldHttpHeaders);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AS2AcknowledgementConnectionSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AS2AcknowledgementConnectionSettings if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AS2AcknowledgementConnectionSettings.
     */
    public static AS2AcknowledgementConnectionSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AS2AcknowledgementConnectionSettings deserializedAS2AcknowledgementConnectionSettings
                = new AS2AcknowledgementConnectionSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ignoreCertificateNameMismatch".equals(fieldName)) {
                    deserializedAS2AcknowledgementConnectionSettings.ignoreCertificateNameMismatch
                        = reader.getBoolean();
                } else if ("supportHttpStatusCodeContinue".equals(fieldName)) {
                    deserializedAS2AcknowledgementConnectionSettings.supportHttpStatusCodeContinue
                        = reader.getBoolean();
                } else if ("keepHttpConnectionAlive".equals(fieldName)) {
                    deserializedAS2AcknowledgementConnectionSettings.keepHttpConnectionAlive = reader.getBoolean();
                } else if ("unfoldHttpHeaders".equals(fieldName)) {
                    deserializedAS2AcknowledgementConnectionSettings.unfoldHttpHeaders = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAS2AcknowledgementConnectionSettings;
        });
    }
}
