// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.logic.models.ContentLink;
import com.azure.resourcemanager.logic.models.IntegrationAccountMapPropertiesParametersSchema;
import com.azure.resourcemanager.logic.models.MapType;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The integration account map.
 */
@Fluent
public final class IntegrationAccountMapProperties implements JsonSerializable<IntegrationAccountMapProperties> {
    /*
     * The map type.
     */
    private MapType mapType;

    /*
     * The parameters schema of integration account map.
     */
    private IntegrationAccountMapPropertiesParametersSchema parametersSchema;

    /*
     * The created time.
     */
    private OffsetDateTime createdTime;

    /*
     * The changed time.
     */
    private OffsetDateTime changedTime;

    /*
     * The content.
     */
    private String content;

    /*
     * The content type.
     */
    private String contentType;

    /*
     * The content link.
     */
    private ContentLink contentLink;

    /*
     * The metadata.
     */
    private Object metadata;

    /**
     * Creates an instance of IntegrationAccountMapProperties class.
     */
    public IntegrationAccountMapProperties() {
    }

    /**
     * Get the mapType property: The map type.
     * 
     * @return the mapType value.
     */
    public MapType mapType() {
        return this.mapType;
    }

    /**
     * Set the mapType property: The map type.
     * 
     * @param mapType the mapType value to set.
     * @return the IntegrationAccountMapProperties object itself.
     */
    public IntegrationAccountMapProperties withMapType(MapType mapType) {
        this.mapType = mapType;
        return this;
    }

    /**
     * Get the parametersSchema property: The parameters schema of integration account map.
     * 
     * @return the parametersSchema value.
     */
    public IntegrationAccountMapPropertiesParametersSchema parametersSchema() {
        return this.parametersSchema;
    }

    /**
     * Set the parametersSchema property: The parameters schema of integration account map.
     * 
     * @param parametersSchema the parametersSchema value to set.
     * @return the IntegrationAccountMapProperties object itself.
     */
    public IntegrationAccountMapProperties
        withParametersSchema(IntegrationAccountMapPropertiesParametersSchema parametersSchema) {
        this.parametersSchema = parametersSchema;
        return this;
    }

    /**
     * Get the createdTime property: The created time.
     * 
     * @return the createdTime value.
     */
    public OffsetDateTime createdTime() {
        return this.createdTime;
    }

    /**
     * Get the changedTime property: The changed time.
     * 
     * @return the changedTime value.
     */
    public OffsetDateTime changedTime() {
        return this.changedTime;
    }

    /**
     * Get the content property: The content.
     * 
     * @return the content value.
     */
    public String content() {
        return this.content;
    }

    /**
     * Set the content property: The content.
     * 
     * @param content the content value to set.
     * @return the IntegrationAccountMapProperties object itself.
     */
    public IntegrationAccountMapProperties withContent(String content) {
        this.content = content;
        return this;
    }

    /**
     * Get the contentType property: The content type.
     * 
     * @return the contentType value.
     */
    public String contentType() {
        return this.contentType;
    }

    /**
     * Set the contentType property: The content type.
     * 
     * @param contentType the contentType value to set.
     * @return the IntegrationAccountMapProperties object itself.
     */
    public IntegrationAccountMapProperties withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }

    /**
     * Get the contentLink property: The content link.
     * 
     * @return the contentLink value.
     */
    public ContentLink contentLink() {
        return this.contentLink;
    }

    /**
     * Get the metadata property: The metadata.
     * 
     * @return the metadata value.
     */
    public Object metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The metadata.
     * 
     * @param metadata the metadata value to set.
     * @return the IntegrationAccountMapProperties object itself.
     */
    public IntegrationAccountMapProperties withMetadata(Object metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (mapType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property mapType in model IntegrationAccountMapProperties"));
        }
        if (parametersSchema() != null) {
            parametersSchema().validate();
        }
        if (contentLink() != null) {
            contentLink().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IntegrationAccountMapProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mapType", this.mapType == null ? null : this.mapType.toString());
        jsonWriter.writeJsonField("parametersSchema", this.parametersSchema);
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("contentType", this.contentType);
        jsonWriter.writeUntypedField("metadata", this.metadata);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IntegrationAccountMapProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IntegrationAccountMapProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IntegrationAccountMapProperties.
     */
    public static IntegrationAccountMapProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IntegrationAccountMapProperties deserializedIntegrationAccountMapProperties
                = new IntegrationAccountMapProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mapType".equals(fieldName)) {
                    deserializedIntegrationAccountMapProperties.mapType = MapType.fromString(reader.getString());
                } else if ("parametersSchema".equals(fieldName)) {
                    deserializedIntegrationAccountMapProperties.parametersSchema
                        = IntegrationAccountMapPropertiesParametersSchema.fromJson(reader);
                } else if ("createdTime".equals(fieldName)) {
                    deserializedIntegrationAccountMapProperties.createdTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("changedTime".equals(fieldName)) {
                    deserializedIntegrationAccountMapProperties.changedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("content".equals(fieldName)) {
                    deserializedIntegrationAccountMapProperties.content = reader.getString();
                } else if ("contentType".equals(fieldName)) {
                    deserializedIntegrationAccountMapProperties.contentType = reader.getString();
                } else if ("contentLink".equals(fieldName)) {
                    deserializedIntegrationAccountMapProperties.contentLink = ContentLink.fromJson(reader);
                } else if ("metadata".equals(fieldName)) {
                    deserializedIntegrationAccountMapProperties.metadata = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIntegrationAccountMapProperties;
        });
    }
}
