// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The X12 agreement security settings.
 */
@Fluent
public final class X12SecuritySettings implements JsonSerializable<X12SecuritySettings> {
    /*
     * The authorization qualifier.
     */
    private String authorizationQualifier;

    /*
     * The authorization value.
     */
    private String authorizationValue;

    /*
     * The security qualifier.
     */
    private String securityQualifier;

    /*
     * The password value.
     */
    private String passwordValue;

    /**
     * Creates an instance of X12SecuritySettings class.
     */
    public X12SecuritySettings() {
    }

    /**
     * Get the authorizationQualifier property: The authorization qualifier.
     * 
     * @return the authorizationQualifier value.
     */
    public String authorizationQualifier() {
        return this.authorizationQualifier;
    }

    /**
     * Set the authorizationQualifier property: The authorization qualifier.
     * 
     * @param authorizationQualifier the authorizationQualifier value to set.
     * @return the X12SecuritySettings object itself.
     */
    public X12SecuritySettings withAuthorizationQualifier(String authorizationQualifier) {
        this.authorizationQualifier = authorizationQualifier;
        return this;
    }

    /**
     * Get the authorizationValue property: The authorization value.
     * 
     * @return the authorizationValue value.
     */
    public String authorizationValue() {
        return this.authorizationValue;
    }

    /**
     * Set the authorizationValue property: The authorization value.
     * 
     * @param authorizationValue the authorizationValue value to set.
     * @return the X12SecuritySettings object itself.
     */
    public X12SecuritySettings withAuthorizationValue(String authorizationValue) {
        this.authorizationValue = authorizationValue;
        return this;
    }

    /**
     * Get the securityQualifier property: The security qualifier.
     * 
     * @return the securityQualifier value.
     */
    public String securityQualifier() {
        return this.securityQualifier;
    }

    /**
     * Set the securityQualifier property: The security qualifier.
     * 
     * @param securityQualifier the securityQualifier value to set.
     * @return the X12SecuritySettings object itself.
     */
    public X12SecuritySettings withSecurityQualifier(String securityQualifier) {
        this.securityQualifier = securityQualifier;
        return this;
    }

    /**
     * Get the passwordValue property: The password value.
     * 
     * @return the passwordValue value.
     */
    public String passwordValue() {
        return this.passwordValue;
    }

    /**
     * Set the passwordValue property: The password value.
     * 
     * @param passwordValue the passwordValue value to set.
     * @return the X12SecuritySettings object itself.
     */
    public X12SecuritySettings withPasswordValue(String passwordValue) {
        this.passwordValue = passwordValue;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authorizationQualifier() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authorizationQualifier in model X12SecuritySettings"));
        }
        if (securityQualifier() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property securityQualifier in model X12SecuritySettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(X12SecuritySettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("authorizationQualifier", this.authorizationQualifier);
        jsonWriter.writeStringField("securityQualifier", this.securityQualifier);
        jsonWriter.writeStringField("authorizationValue", this.authorizationValue);
        jsonWriter.writeStringField("passwordValue", this.passwordValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of X12SecuritySettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of X12SecuritySettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the X12SecuritySettings.
     */
    public static X12SecuritySettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            X12SecuritySettings deserializedX12SecuritySettings = new X12SecuritySettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authorizationQualifier".equals(fieldName)) {
                    deserializedX12SecuritySettings.authorizationQualifier = reader.getString();
                } else if ("securityQualifier".equals(fieldName)) {
                    deserializedX12SecuritySettings.securityQualifier = reader.getString();
                } else if ("authorizationValue".equals(fieldName)) {
                    deserializedX12SecuritySettings.authorizationValue = reader.getString();
                } else if ("passwordValue".equals(fieldName)) {
                    deserializedX12SecuritySettings.passwordValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedX12SecuritySettings;
        });
    }
}
