// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Edifact schema reference.
 */
@Fluent
public final class EdifactSchemaReference implements JsonSerializable<EdifactSchemaReference> {
    /*
     * The message id.
     */
    private String messageId;

    /*
     * The message version.
     */
    private String messageVersion;

    /*
     * The message release version.
     */
    private String messageRelease;

    /*
     * The sender application id.
     */
    private String senderApplicationId;

    /*
     * The sender application qualifier.
     */
    private String senderApplicationQualifier;

    /*
     * The association assigned code.
     */
    private String associationAssignedCode;

    /*
     * The schema name.
     */
    private String schemaName;

    /**
     * Creates an instance of EdifactSchemaReference class.
     */
    public EdifactSchemaReference() {
    }

    /**
     * Get the messageId property: The message id.
     * 
     * @return the messageId value.
     */
    public String messageId() {
        return this.messageId;
    }

    /**
     * Set the messageId property: The message id.
     * 
     * @param messageId the messageId value to set.
     * @return the EdifactSchemaReference object itself.
     */
    public EdifactSchemaReference withMessageId(String messageId) {
        this.messageId = messageId;
        return this;
    }

    /**
     * Get the messageVersion property: The message version.
     * 
     * @return the messageVersion value.
     */
    public String messageVersion() {
        return this.messageVersion;
    }

    /**
     * Set the messageVersion property: The message version.
     * 
     * @param messageVersion the messageVersion value to set.
     * @return the EdifactSchemaReference object itself.
     */
    public EdifactSchemaReference withMessageVersion(String messageVersion) {
        this.messageVersion = messageVersion;
        return this;
    }

    /**
     * Get the messageRelease property: The message release version.
     * 
     * @return the messageRelease value.
     */
    public String messageRelease() {
        return this.messageRelease;
    }

    /**
     * Set the messageRelease property: The message release version.
     * 
     * @param messageRelease the messageRelease value to set.
     * @return the EdifactSchemaReference object itself.
     */
    public EdifactSchemaReference withMessageRelease(String messageRelease) {
        this.messageRelease = messageRelease;
        return this;
    }

    /**
     * Get the senderApplicationId property: The sender application id.
     * 
     * @return the senderApplicationId value.
     */
    public String senderApplicationId() {
        return this.senderApplicationId;
    }

    /**
     * Set the senderApplicationId property: The sender application id.
     * 
     * @param senderApplicationId the senderApplicationId value to set.
     * @return the EdifactSchemaReference object itself.
     */
    public EdifactSchemaReference withSenderApplicationId(String senderApplicationId) {
        this.senderApplicationId = senderApplicationId;
        return this;
    }

    /**
     * Get the senderApplicationQualifier property: The sender application qualifier.
     * 
     * @return the senderApplicationQualifier value.
     */
    public String senderApplicationQualifier() {
        return this.senderApplicationQualifier;
    }

    /**
     * Set the senderApplicationQualifier property: The sender application qualifier.
     * 
     * @param senderApplicationQualifier the senderApplicationQualifier value to set.
     * @return the EdifactSchemaReference object itself.
     */
    public EdifactSchemaReference withSenderApplicationQualifier(String senderApplicationQualifier) {
        this.senderApplicationQualifier = senderApplicationQualifier;
        return this;
    }

    /**
     * Get the associationAssignedCode property: The association assigned code.
     * 
     * @return the associationAssignedCode value.
     */
    public String associationAssignedCode() {
        return this.associationAssignedCode;
    }

    /**
     * Set the associationAssignedCode property: The association assigned code.
     * 
     * @param associationAssignedCode the associationAssignedCode value to set.
     * @return the EdifactSchemaReference object itself.
     */
    public EdifactSchemaReference withAssociationAssignedCode(String associationAssignedCode) {
        this.associationAssignedCode = associationAssignedCode;
        return this;
    }

    /**
     * Get the schemaName property: The schema name.
     * 
     * @return the schemaName value.
     */
    public String schemaName() {
        return this.schemaName;
    }

    /**
     * Set the schemaName property: The schema name.
     * 
     * @param schemaName the schemaName value to set.
     * @return the EdifactSchemaReference object itself.
     */
    public EdifactSchemaReference withSchemaName(String schemaName) {
        this.schemaName = schemaName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (messageId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property messageId in model EdifactSchemaReference"));
        }
        if (messageVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property messageVersion in model EdifactSchemaReference"));
        }
        if (messageRelease() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property messageRelease in model EdifactSchemaReference"));
        }
        if (schemaName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property schemaName in model EdifactSchemaReference"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EdifactSchemaReference.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("messageId", this.messageId);
        jsonWriter.writeStringField("messageVersion", this.messageVersion);
        jsonWriter.writeStringField("messageRelease", this.messageRelease);
        jsonWriter.writeStringField("schemaName", this.schemaName);
        jsonWriter.writeStringField("senderApplicationId", this.senderApplicationId);
        jsonWriter.writeStringField("senderApplicationQualifier", this.senderApplicationQualifier);
        jsonWriter.writeStringField("associationAssignedCode", this.associationAssignedCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EdifactSchemaReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EdifactSchemaReference if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EdifactSchemaReference.
     */
    public static EdifactSchemaReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EdifactSchemaReference deserializedEdifactSchemaReference = new EdifactSchemaReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("messageId".equals(fieldName)) {
                    deserializedEdifactSchemaReference.messageId = reader.getString();
                } else if ("messageVersion".equals(fieldName)) {
                    deserializedEdifactSchemaReference.messageVersion = reader.getString();
                } else if ("messageRelease".equals(fieldName)) {
                    deserializedEdifactSchemaReference.messageRelease = reader.getString();
                } else if ("schemaName".equals(fieldName)) {
                    deserializedEdifactSchemaReference.schemaName = reader.getString();
                } else if ("senderApplicationId".equals(fieldName)) {
                    deserializedEdifactSchemaReference.senderApplicationId = reader.getString();
                } else if ("senderApplicationQualifier".equals(fieldName)) {
                    deserializedEdifactSchemaReference.senderApplicationQualifier = reader.getString();
                } else if ("associationAssignedCode".equals(fieldName)) {
                    deserializedEdifactSchemaReference.associationAssignedCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEdifactSchemaReference;
        });
    }
}
