// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AS2 agreement envelope settings.
 */
@Fluent
public final class AS2EnvelopeSettings implements JsonSerializable<AS2EnvelopeSettings> {
    /*
     * The message content type.
     */
    private String messageContentType;

    /*
     * The value indicating whether to transmit file name in mime header.
     */
    private boolean transmitFileNameInMimeHeader;

    /*
     * The template for file name.
     */
    private String fileNameTemplate;

    /*
     * The value indicating whether to suspend message on file name generation error.
     */
    private boolean suspendMessageOnFileNameGenerationError;

    /*
     * The value indicating whether to auto generate file name.
     */
    private boolean autogenerateFileName;

    /**
     * Creates an instance of AS2EnvelopeSettings class.
     */
    public AS2EnvelopeSettings() {
    }

    /**
     * Get the messageContentType property: The message content type.
     * 
     * @return the messageContentType value.
     */
    public String messageContentType() {
        return this.messageContentType;
    }

    /**
     * Set the messageContentType property: The message content type.
     * 
     * @param messageContentType the messageContentType value to set.
     * @return the AS2EnvelopeSettings object itself.
     */
    public AS2EnvelopeSettings withMessageContentType(String messageContentType) {
        this.messageContentType = messageContentType;
        return this;
    }

    /**
     * Get the transmitFileNameInMimeHeader property: The value indicating whether to transmit file name in mime header.
     * 
     * @return the transmitFileNameInMimeHeader value.
     */
    public boolean transmitFileNameInMimeHeader() {
        return this.transmitFileNameInMimeHeader;
    }

    /**
     * Set the transmitFileNameInMimeHeader property: The value indicating whether to transmit file name in mime header.
     * 
     * @param transmitFileNameInMimeHeader the transmitFileNameInMimeHeader value to set.
     * @return the AS2EnvelopeSettings object itself.
     */
    public AS2EnvelopeSettings withTransmitFileNameInMimeHeader(boolean transmitFileNameInMimeHeader) {
        this.transmitFileNameInMimeHeader = transmitFileNameInMimeHeader;
        return this;
    }

    /**
     * Get the fileNameTemplate property: The template for file name.
     * 
     * @return the fileNameTemplate value.
     */
    public String fileNameTemplate() {
        return this.fileNameTemplate;
    }

    /**
     * Set the fileNameTemplate property: The template for file name.
     * 
     * @param fileNameTemplate the fileNameTemplate value to set.
     * @return the AS2EnvelopeSettings object itself.
     */
    public AS2EnvelopeSettings withFileNameTemplate(String fileNameTemplate) {
        this.fileNameTemplate = fileNameTemplate;
        return this;
    }

    /**
     * Get the suspendMessageOnFileNameGenerationError property: The value indicating whether to suspend message on file
     * name generation error.
     * 
     * @return the suspendMessageOnFileNameGenerationError value.
     */
    public boolean suspendMessageOnFileNameGenerationError() {
        return this.suspendMessageOnFileNameGenerationError;
    }

    /**
     * Set the suspendMessageOnFileNameGenerationError property: The value indicating whether to suspend message on file
     * name generation error.
     * 
     * @param suspendMessageOnFileNameGenerationError the suspendMessageOnFileNameGenerationError value to set.
     * @return the AS2EnvelopeSettings object itself.
     */
    public AS2EnvelopeSettings
        withSuspendMessageOnFileNameGenerationError(boolean suspendMessageOnFileNameGenerationError) {
        this.suspendMessageOnFileNameGenerationError = suspendMessageOnFileNameGenerationError;
        return this;
    }

    /**
     * Get the autogenerateFileName property: The value indicating whether to auto generate file name.
     * 
     * @return the autogenerateFileName value.
     */
    public boolean autogenerateFileName() {
        return this.autogenerateFileName;
    }

    /**
     * Set the autogenerateFileName property: The value indicating whether to auto generate file name.
     * 
     * @param autogenerateFileName the autogenerateFileName value to set.
     * @return the AS2EnvelopeSettings object itself.
     */
    public AS2EnvelopeSettings withAutogenerateFileName(boolean autogenerateFileName) {
        this.autogenerateFileName = autogenerateFileName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (messageContentType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property messageContentType in model AS2EnvelopeSettings"));
        }
        if (fileNameTemplate() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property fileNameTemplate in model AS2EnvelopeSettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AS2EnvelopeSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("messageContentType", this.messageContentType);
        jsonWriter.writeBooleanField("transmitFileNameInMimeHeader", this.transmitFileNameInMimeHeader);
        jsonWriter.writeStringField("fileNameTemplate", this.fileNameTemplate);
        jsonWriter.writeBooleanField("suspendMessageOnFileNameGenerationError",
            this.suspendMessageOnFileNameGenerationError);
        jsonWriter.writeBooleanField("autogenerateFileName", this.autogenerateFileName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AS2EnvelopeSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AS2EnvelopeSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AS2EnvelopeSettings.
     */
    public static AS2EnvelopeSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AS2EnvelopeSettings deserializedAS2EnvelopeSettings = new AS2EnvelopeSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("messageContentType".equals(fieldName)) {
                    deserializedAS2EnvelopeSettings.messageContentType = reader.getString();
                } else if ("transmitFileNameInMimeHeader".equals(fieldName)) {
                    deserializedAS2EnvelopeSettings.transmitFileNameInMimeHeader = reader.getBoolean();
                } else if ("fileNameTemplate".equals(fieldName)) {
                    deserializedAS2EnvelopeSettings.fileNameTemplate = reader.getString();
                } else if ("suspendMessageOnFileNameGenerationError".equals(fieldName)) {
                    deserializedAS2EnvelopeSettings.suspendMessageOnFileNameGenerationError = reader.getBoolean();
                } else if ("autogenerateFileName".equals(fieldName)) {
                    deserializedAS2EnvelopeSettings.autogenerateFileName = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAS2EnvelopeSettings;
        });
    }
}
