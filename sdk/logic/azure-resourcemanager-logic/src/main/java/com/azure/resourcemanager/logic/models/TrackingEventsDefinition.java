// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The tracking events definition.
 */
@Fluent
public final class TrackingEventsDefinition implements JsonSerializable<TrackingEventsDefinition> {
    /*
     * The source type.
     */
    private String sourceType;

    /*
     * The track events options.
     */
    private TrackEventsOperationOptions trackEventsOptions;

    /*
     * The events.
     */
    private List<TrackingEvent> events;

    /**
     * Creates an instance of TrackingEventsDefinition class.
     */
    public TrackingEventsDefinition() {
    }

    /**
     * Get the sourceType property: The source type.
     * 
     * @return the sourceType value.
     */
    public String sourceType() {
        return this.sourceType;
    }

    /**
     * Set the sourceType property: The source type.
     * 
     * @param sourceType the sourceType value to set.
     * @return the TrackingEventsDefinition object itself.
     */
    public TrackingEventsDefinition withSourceType(String sourceType) {
        this.sourceType = sourceType;
        return this;
    }

    /**
     * Get the trackEventsOptions property: The track events options.
     * 
     * @return the trackEventsOptions value.
     */
    public TrackEventsOperationOptions trackEventsOptions() {
        return this.trackEventsOptions;
    }

    /**
     * Set the trackEventsOptions property: The track events options.
     * 
     * @param trackEventsOptions the trackEventsOptions value to set.
     * @return the TrackingEventsDefinition object itself.
     */
    public TrackingEventsDefinition withTrackEventsOptions(TrackEventsOperationOptions trackEventsOptions) {
        this.trackEventsOptions = trackEventsOptions;
        return this;
    }

    /**
     * Get the events property: The events.
     * 
     * @return the events value.
     */
    public List<TrackingEvent> events() {
        return this.events;
    }

    /**
     * Set the events property: The events.
     * 
     * @param events the events value to set.
     * @return the TrackingEventsDefinition object itself.
     */
    public TrackingEventsDefinition withEvents(List<TrackingEvent> events) {
        this.events = events;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceType in model TrackingEventsDefinition"));
        }
        if (events() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property events in model TrackingEventsDefinition"));
        } else {
            events().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TrackingEventsDefinition.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceType", this.sourceType);
        jsonWriter.writeArrayField("events", this.events, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("trackEventsOptions",
            this.trackEventsOptions == null ? null : this.trackEventsOptions.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrackingEventsDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrackingEventsDefinition if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TrackingEventsDefinition.
     */
    public static TrackingEventsDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrackingEventsDefinition deserializedTrackingEventsDefinition = new TrackingEventsDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceType".equals(fieldName)) {
                    deserializedTrackingEventsDefinition.sourceType = reader.getString();
                } else if ("events".equals(fieldName)) {
                    List<TrackingEvent> events = reader.readArray(reader1 -> TrackingEvent.fromJson(reader1));
                    deserializedTrackingEventsDefinition.events = events;
                } else if ("trackEventsOptions".equals(fieldName)) {
                    deserializedTrackingEventsDefinition.trackEventsOptions
                        = TrackEventsOperationOptions.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrackingEventsDefinition;
        });
    }
}
