// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The batch release criteria.
 */
@Fluent
public final class BatchReleaseCriteria implements JsonSerializable<BatchReleaseCriteria> {
    /*
     * The message count.
     */
    private Integer messageCount;

    /*
     * The batch size in bytes.
     */
    private Integer batchSize;

    /*
     * The recurrence.
     */
    private WorkflowTriggerRecurrence recurrence;

    /**
     * Creates an instance of BatchReleaseCriteria class.
     */
    public BatchReleaseCriteria() {
    }

    /**
     * Get the messageCount property: The message count.
     * 
     * @return the messageCount value.
     */
    public Integer messageCount() {
        return this.messageCount;
    }

    /**
     * Set the messageCount property: The message count.
     * 
     * @param messageCount the messageCount value to set.
     * @return the BatchReleaseCriteria object itself.
     */
    public BatchReleaseCriteria withMessageCount(Integer messageCount) {
        this.messageCount = messageCount;
        return this;
    }

    /**
     * Get the batchSize property: The batch size in bytes.
     * 
     * @return the batchSize value.
     */
    public Integer batchSize() {
        return this.batchSize;
    }

    /**
     * Set the batchSize property: The batch size in bytes.
     * 
     * @param batchSize the batchSize value to set.
     * @return the BatchReleaseCriteria object itself.
     */
    public BatchReleaseCriteria withBatchSize(Integer batchSize) {
        this.batchSize = batchSize;
        return this;
    }

    /**
     * Get the recurrence property: The recurrence.
     * 
     * @return the recurrence value.
     */
    public WorkflowTriggerRecurrence recurrence() {
        return this.recurrence;
    }

    /**
     * Set the recurrence property: The recurrence.
     * 
     * @param recurrence the recurrence value to set.
     * @return the BatchReleaseCriteria object itself.
     */
    public BatchReleaseCriteria withRecurrence(WorkflowTriggerRecurrence recurrence) {
        this.recurrence = recurrence;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recurrence() != null) {
            recurrence().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("messageCount", this.messageCount);
        jsonWriter.writeNumberField("batchSize", this.batchSize);
        jsonWriter.writeJsonField("recurrence", this.recurrence);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchReleaseCriteria from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchReleaseCriteria if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchReleaseCriteria.
     */
    public static BatchReleaseCriteria fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchReleaseCriteria deserializedBatchReleaseCriteria = new BatchReleaseCriteria();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("messageCount".equals(fieldName)) {
                    deserializedBatchReleaseCriteria.messageCount = reader.getNullable(JsonReader::getInt);
                } else if ("batchSize".equals(fieldName)) {
                    deserializedBatchReleaseCriteria.batchSize = reader.getNullable(JsonReader::getInt);
                } else if ("recurrence".equals(fieldName)) {
                    deserializedBatchReleaseCriteria.recurrence = WorkflowTriggerRecurrence.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBatchReleaseCriteria;
        });
    }
}
