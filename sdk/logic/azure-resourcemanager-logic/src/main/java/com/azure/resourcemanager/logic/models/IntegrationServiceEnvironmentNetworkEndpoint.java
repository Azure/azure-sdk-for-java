// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The network endpoint.
 */
@Fluent
public final class IntegrationServiceEnvironmentNetworkEndpoint
    implements JsonSerializable<IntegrationServiceEnvironmentNetworkEndpoint> {
    /*
     * The accessibility state.
     */
    private IntegrationServiceEnvironmentNetworkEndPointAccessibilityState accessibility;

    /*
     * The domain name.
     */
    private String domainName;

    /*
     * The ports.
     */
    private List<String> ports;

    /**
     * Creates an instance of IntegrationServiceEnvironmentNetworkEndpoint class.
     */
    public IntegrationServiceEnvironmentNetworkEndpoint() {
    }

    /**
     * Get the accessibility property: The accessibility state.
     * 
     * @return the accessibility value.
     */
    public IntegrationServiceEnvironmentNetworkEndPointAccessibilityState accessibility() {
        return this.accessibility;
    }

    /**
     * Set the accessibility property: The accessibility state.
     * 
     * @param accessibility the accessibility value to set.
     * @return the IntegrationServiceEnvironmentNetworkEndpoint object itself.
     */
    public IntegrationServiceEnvironmentNetworkEndpoint
        withAccessibility(IntegrationServiceEnvironmentNetworkEndPointAccessibilityState accessibility) {
        this.accessibility = accessibility;
        return this;
    }

    /**
     * Get the domainName property: The domain name.
     * 
     * @return the domainName value.
     */
    public String domainName() {
        return this.domainName;
    }

    /**
     * Set the domainName property: The domain name.
     * 
     * @param domainName the domainName value to set.
     * @return the IntegrationServiceEnvironmentNetworkEndpoint object itself.
     */
    public IntegrationServiceEnvironmentNetworkEndpoint withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }

    /**
     * Get the ports property: The ports.
     * 
     * @return the ports value.
     */
    public List<String> ports() {
        return this.ports;
    }

    /**
     * Set the ports property: The ports.
     * 
     * @param ports the ports value to set.
     * @return the IntegrationServiceEnvironmentNetworkEndpoint object itself.
     */
    public IntegrationServiceEnvironmentNetworkEndpoint withPorts(List<String> ports) {
        this.ports = ports;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accessibility", this.accessibility == null ? null : this.accessibility.toString());
        jsonWriter.writeStringField("domainName", this.domainName);
        jsonWriter.writeArrayField("ports", this.ports, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IntegrationServiceEnvironmentNetworkEndpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IntegrationServiceEnvironmentNetworkEndpoint if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IntegrationServiceEnvironmentNetworkEndpoint.
     */
    public static IntegrationServiceEnvironmentNetworkEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IntegrationServiceEnvironmentNetworkEndpoint deserializedIntegrationServiceEnvironmentNetworkEndpoint
                = new IntegrationServiceEnvironmentNetworkEndpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accessibility".equals(fieldName)) {
                    deserializedIntegrationServiceEnvironmentNetworkEndpoint.accessibility
                        = IntegrationServiceEnvironmentNetworkEndPointAccessibilityState.fromString(reader.getString());
                } else if ("domainName".equals(fieldName)) {
                    deserializedIntegrationServiceEnvironmentNetworkEndpoint.domainName = reader.getString();
                } else if ("ports".equals(fieldName)) {
                    List<String> ports = reader.readArray(reader1 -> reader1.getString());
                    deserializedIntegrationServiceEnvironmentNetworkEndpoint.ports = ports;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIntegrationServiceEnvironmentNetworkEndpoint;
        });
    }
}
