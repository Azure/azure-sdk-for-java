// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The API resource properties.
 */
@Fluent
public class ApiResourceProperties implements JsonSerializable<ApiResourceProperties> {
    /*
     * The name
     */
    private String name;

    /*
     * The connection parameters.
     */
    private Map<String, Object> connectionParameters;

    /*
     * The metadata.
     */
    private ApiResourceMetadata metadata;

    /*
     * The runtime urls.
     */
    private List<String> runtimeUrls;

    /*
     * The api general information.
     */
    private ApiResourceGeneralInformation generalInformation;

    /*
     * The capabilities.
     */
    private List<String> capabilities;

    /*
     * The backend service.
     */
    private ApiResourceBackendService backendService;

    /*
     * The policies for the API.
     */
    private ApiResourcePolicies policies;

    /*
     * The API definition.
     */
    private String apiDefinitionUrl;

    /*
     * The api definitions.
     */
    private ApiResourceDefinitions apiDefinitions;

    /*
     * The integration service environment reference.
     */
    private ResourceReference integrationServiceEnvironment;

    /*
     * The provisioning state.
     */
    private WorkflowProvisioningState provisioningState;

    /*
     * The category.
     */
    private ApiTier category;

    /**
     * Creates an instance of ApiResourceProperties class.
     */
    public ApiResourceProperties() {
    }

    /**
     * Get the name property: The name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name.
     * 
     * @param name the name value to set.
     * @return the ApiResourceProperties object itself.
     */
    ApiResourceProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the connectionParameters property: The connection parameters.
     * 
     * @return the connectionParameters value.
     */
    public Map<String, Object> connectionParameters() {
        return this.connectionParameters;
    }

    /**
     * Set the connectionParameters property: The connection parameters.
     * 
     * @param connectionParameters the connectionParameters value to set.
     * @return the ApiResourceProperties object itself.
     */
    ApiResourceProperties withConnectionParameters(Map<String, Object> connectionParameters) {
        this.connectionParameters = connectionParameters;
        return this;
    }

    /**
     * Get the metadata property: The metadata.
     * 
     * @return the metadata value.
     */
    public ApiResourceMetadata metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The metadata.
     * 
     * @param metadata the metadata value to set.
     * @return the ApiResourceProperties object itself.
     */
    ApiResourceProperties withMetadata(ApiResourceMetadata metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the runtimeUrls property: The runtime urls.
     * 
     * @return the runtimeUrls value.
     */
    public List<String> runtimeUrls() {
        return this.runtimeUrls;
    }

    /**
     * Set the runtimeUrls property: The runtime urls.
     * 
     * @param runtimeUrls the runtimeUrls value to set.
     * @return the ApiResourceProperties object itself.
     */
    ApiResourceProperties withRuntimeUrls(List<String> runtimeUrls) {
        this.runtimeUrls = runtimeUrls;
        return this;
    }

    /**
     * Get the generalInformation property: The api general information.
     * 
     * @return the generalInformation value.
     */
    public ApiResourceGeneralInformation generalInformation() {
        return this.generalInformation;
    }

    /**
     * Set the generalInformation property: The api general information.
     * 
     * @param generalInformation the generalInformation value to set.
     * @return the ApiResourceProperties object itself.
     */
    ApiResourceProperties withGeneralInformation(ApiResourceGeneralInformation generalInformation) {
        this.generalInformation = generalInformation;
        return this;
    }

    /**
     * Get the capabilities property: The capabilities.
     * 
     * @return the capabilities value.
     */
    public List<String> capabilities() {
        return this.capabilities;
    }

    /**
     * Set the capabilities property: The capabilities.
     * 
     * @param capabilities the capabilities value to set.
     * @return the ApiResourceProperties object itself.
     */
    ApiResourceProperties withCapabilities(List<String> capabilities) {
        this.capabilities = capabilities;
        return this;
    }

    /**
     * Get the backendService property: The backend service.
     * 
     * @return the backendService value.
     */
    public ApiResourceBackendService backendService() {
        return this.backendService;
    }

    /**
     * Set the backendService property: The backend service.
     * 
     * @param backendService the backendService value to set.
     * @return the ApiResourceProperties object itself.
     */
    ApiResourceProperties withBackendService(ApiResourceBackendService backendService) {
        this.backendService = backendService;
        return this;
    }

    /**
     * Get the policies property: The policies for the API.
     * 
     * @return the policies value.
     */
    public ApiResourcePolicies policies() {
        return this.policies;
    }

    /**
     * Set the policies property: The policies for the API.
     * 
     * @param policies the policies value to set.
     * @return the ApiResourceProperties object itself.
     */
    ApiResourceProperties withPolicies(ApiResourcePolicies policies) {
        this.policies = policies;
        return this;
    }

    /**
     * Get the apiDefinitionUrl property: The API definition.
     * 
     * @return the apiDefinitionUrl value.
     */
    public String apiDefinitionUrl() {
        return this.apiDefinitionUrl;
    }

    /**
     * Set the apiDefinitionUrl property: The API definition.
     * 
     * @param apiDefinitionUrl the apiDefinitionUrl value to set.
     * @return the ApiResourceProperties object itself.
     */
    ApiResourceProperties withApiDefinitionUrl(String apiDefinitionUrl) {
        this.apiDefinitionUrl = apiDefinitionUrl;
        return this;
    }

    /**
     * Get the apiDefinitions property: The api definitions.
     * 
     * @return the apiDefinitions value.
     */
    public ApiResourceDefinitions apiDefinitions() {
        return this.apiDefinitions;
    }

    /**
     * Set the apiDefinitions property: The api definitions.
     * 
     * @param apiDefinitions the apiDefinitions value to set.
     * @return the ApiResourceProperties object itself.
     */
    ApiResourceProperties withApiDefinitions(ApiResourceDefinitions apiDefinitions) {
        this.apiDefinitions = apiDefinitions;
        return this;
    }

    /**
     * Get the integrationServiceEnvironment property: The integration service environment reference.
     * 
     * @return the integrationServiceEnvironment value.
     */
    public ResourceReference integrationServiceEnvironment() {
        return this.integrationServiceEnvironment;
    }

    /**
     * Set the integrationServiceEnvironment property: The integration service environment reference.
     * 
     * @param integrationServiceEnvironment the integrationServiceEnvironment value to set.
     * @return the ApiResourceProperties object itself.
     */
    public ApiResourceProperties withIntegrationServiceEnvironment(ResourceReference integrationServiceEnvironment) {
        this.integrationServiceEnvironment = integrationServiceEnvironment;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    public WorkflowProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the ApiResourceProperties object itself.
     */
    ApiResourceProperties withProvisioningState(WorkflowProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the category property: The category.
     * 
     * @return the category value.
     */
    public ApiTier category() {
        return this.category;
    }

    /**
     * Set the category property: The category.
     * 
     * @param category the category value to set.
     * @return the ApiResourceProperties object itself.
     */
    ApiResourceProperties withCategory(ApiTier category) {
        this.category = category;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metadata() != null) {
            metadata().validate();
        }
        if (generalInformation() != null) {
            generalInformation().validate();
        }
        if (backendService() != null) {
            backendService().validate();
        }
        if (policies() != null) {
            policies().validate();
        }
        if (apiDefinitions() != null) {
            apiDefinitions().validate();
        }
        if (integrationServiceEnvironment() != null) {
            integrationServiceEnvironment().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("integrationServiceEnvironment", this.integrationServiceEnvironment);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiResourceProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApiResourceProperties.
     */
    public static ApiResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiResourceProperties deserializedApiResourceProperties = new ApiResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedApiResourceProperties.name = reader.getString();
                } else if ("connectionParameters".equals(fieldName)) {
                    Map<String, Object> connectionParameters = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedApiResourceProperties.connectionParameters = connectionParameters;
                } else if ("metadata".equals(fieldName)) {
                    deserializedApiResourceProperties.metadata = ApiResourceMetadata.fromJson(reader);
                } else if ("runtimeUrls".equals(fieldName)) {
                    List<String> runtimeUrls = reader.readArray(reader1 -> reader1.getString());
                    deserializedApiResourceProperties.runtimeUrls = runtimeUrls;
                } else if ("generalInformation".equals(fieldName)) {
                    deserializedApiResourceProperties.generalInformation
                        = ApiResourceGeneralInformation.fromJson(reader);
                } else if ("capabilities".equals(fieldName)) {
                    List<String> capabilities = reader.readArray(reader1 -> reader1.getString());
                    deserializedApiResourceProperties.capabilities = capabilities;
                } else if ("backendService".equals(fieldName)) {
                    deserializedApiResourceProperties.backendService = ApiResourceBackendService.fromJson(reader);
                } else if ("policies".equals(fieldName)) {
                    deserializedApiResourceProperties.policies = ApiResourcePolicies.fromJson(reader);
                } else if ("apiDefinitionUrl".equals(fieldName)) {
                    deserializedApiResourceProperties.apiDefinitionUrl = reader.getString();
                } else if ("apiDefinitions".equals(fieldName)) {
                    deserializedApiResourceProperties.apiDefinitions = ApiResourceDefinitions.fromJson(reader);
                } else if ("integrationServiceEnvironment".equals(fieldName)) {
                    deserializedApiResourceProperties.integrationServiceEnvironment
                        = ResourceReference.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedApiResourceProperties.provisioningState
                        = WorkflowProvisioningState.fromString(reader.getString());
                } else if ("category".equals(fieldName)) {
                    deserializedApiResourceProperties.category = ApiTier.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApiResourceProperties;
        });
    }
}
