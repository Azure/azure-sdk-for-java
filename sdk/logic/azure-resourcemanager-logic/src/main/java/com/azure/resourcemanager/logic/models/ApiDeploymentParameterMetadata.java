// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The API deployment parameter metadata.
 */
@Fluent
public final class ApiDeploymentParameterMetadata implements JsonSerializable<ApiDeploymentParameterMetadata> {
    /*
     * The type.
     */
    private String type;

    /*
     * Indicates whether its required.
     */
    private Boolean isRequired;

    /*
     * The display name.
     */
    private String displayName;

    /*
     * The description.
     */
    private String description;

    /*
     * The visibility.
     */
    private ApiDeploymentParameterVisibility visibility;

    /**
     * Creates an instance of ApiDeploymentParameterMetadata class.
     */
    public ApiDeploymentParameterMetadata() {
    }

    /**
     * Get the type property: The type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The type.
     * 
     * @param type the type value to set.
     * @return the ApiDeploymentParameterMetadata object itself.
     */
    public ApiDeploymentParameterMetadata withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the isRequired property: Indicates whether its required.
     * 
     * @return the isRequired value.
     */
    public Boolean isRequired() {
        return this.isRequired;
    }

    /**
     * Set the isRequired property: Indicates whether its required.
     * 
     * @param isRequired the isRequired value to set.
     * @return the ApiDeploymentParameterMetadata object itself.
     */
    public ApiDeploymentParameterMetadata withIsRequired(Boolean isRequired) {
        this.isRequired = isRequired;
        return this;
    }

    /**
     * Get the displayName property: The display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name.
     * 
     * @param displayName the displayName value to set.
     * @return the ApiDeploymentParameterMetadata object itself.
     */
    public ApiDeploymentParameterMetadata withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: The description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description.
     * 
     * @param description the description value to set.
     * @return the ApiDeploymentParameterMetadata object itself.
     */
    public ApiDeploymentParameterMetadata withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the visibility property: The visibility.
     * 
     * @return the visibility value.
     */
    public ApiDeploymentParameterVisibility visibility() {
        return this.visibility;
    }

    /**
     * Set the visibility property: The visibility.
     * 
     * @param visibility the visibility value to set.
     * @return the ApiDeploymentParameterMetadata object itself.
     */
    public ApiDeploymentParameterMetadata withVisibility(ApiDeploymentParameterVisibility visibility) {
        this.visibility = visibility;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeBooleanField("isRequired", this.isRequired);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("visibility", this.visibility == null ? null : this.visibility.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiDeploymentParameterMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiDeploymentParameterMetadata if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApiDeploymentParameterMetadata.
     */
    public static ApiDeploymentParameterMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiDeploymentParameterMetadata deserializedApiDeploymentParameterMetadata
                = new ApiDeploymentParameterMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedApiDeploymentParameterMetadata.type = reader.getString();
                } else if ("isRequired".equals(fieldName)) {
                    deserializedApiDeploymentParameterMetadata.isRequired = reader.getNullable(JsonReader::getBoolean);
                } else if ("displayName".equals(fieldName)) {
                    deserializedApiDeploymentParameterMetadata.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedApiDeploymentParameterMetadata.description = reader.getString();
                } else if ("visibility".equals(fieldName)) {
                    deserializedApiDeploymentParameterMetadata.visibility
                        = ApiDeploymentParameterVisibility.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApiDeploymentParameterMetadata;
        });
    }
}
