// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The callback url parameters.
 */
@Fluent
public final class GetCallbackUrlParameters implements JsonSerializable<GetCallbackUrlParameters> {
    /*
     * The expiry time.
     */
    private OffsetDateTime notAfter;

    /*
     * The key type.
     */
    private KeyType keyType;

    /**
     * Creates an instance of GetCallbackUrlParameters class.
     */
    public GetCallbackUrlParameters() {
    }

    /**
     * Get the notAfter property: The expiry time.
     * 
     * @return the notAfter value.
     */
    public OffsetDateTime notAfter() {
        return this.notAfter;
    }

    /**
     * Set the notAfter property: The expiry time.
     * 
     * @param notAfter the notAfter value to set.
     * @return the GetCallbackUrlParameters object itself.
     */
    public GetCallbackUrlParameters withNotAfter(OffsetDateTime notAfter) {
        this.notAfter = notAfter;
        return this;
    }

    /**
     * Get the keyType property: The key type.
     * 
     * @return the keyType value.
     */
    public KeyType keyType() {
        return this.keyType;
    }

    /**
     * Set the keyType property: The key type.
     * 
     * @param keyType the keyType value to set.
     * @return the GetCallbackUrlParameters object itself.
     */
    public GetCallbackUrlParameters withKeyType(KeyType keyType) {
        this.keyType = keyType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("notAfter",
            this.notAfter == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.notAfter));
        jsonWriter.writeStringField("keyType", this.keyType == null ? null : this.keyType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetCallbackUrlParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetCallbackUrlParameters if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GetCallbackUrlParameters.
     */
    public static GetCallbackUrlParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetCallbackUrlParameters deserializedGetCallbackUrlParameters = new GetCallbackUrlParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("notAfter".equals(fieldName)) {
                    deserializedGetCallbackUrlParameters.notAfter = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("keyType".equals(fieldName)) {
                    deserializedGetCallbackUrlParameters.keyType = KeyType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGetCallbackUrlParameters;
        });
    }
}
