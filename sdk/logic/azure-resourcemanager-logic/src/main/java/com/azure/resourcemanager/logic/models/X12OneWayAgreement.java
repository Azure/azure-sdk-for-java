// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The X12 one-way agreement. */
@Fluent
public final class X12OneWayAgreement {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(X12OneWayAgreement.class);

    /*
     * The sender business identity
     */
    @JsonProperty(value = "senderBusinessIdentity", required = true)
    private BusinessIdentity senderBusinessIdentity;

    /*
     * The receiver business identity
     */
    @JsonProperty(value = "receiverBusinessIdentity", required = true)
    private BusinessIdentity receiverBusinessIdentity;

    /*
     * The X12 protocol settings.
     */
    @JsonProperty(value = "protocolSettings", required = true)
    private X12ProtocolSettings protocolSettings;

    /**
     * Get the senderBusinessIdentity property: The sender business identity.
     *
     * @return the senderBusinessIdentity value.
     */
    public BusinessIdentity senderBusinessIdentity() {
        return this.senderBusinessIdentity;
    }

    /**
     * Set the senderBusinessIdentity property: The sender business identity.
     *
     * @param senderBusinessIdentity the senderBusinessIdentity value to set.
     * @return the X12OneWayAgreement object itself.
     */
    public X12OneWayAgreement withSenderBusinessIdentity(BusinessIdentity senderBusinessIdentity) {
        this.senderBusinessIdentity = senderBusinessIdentity;
        return this;
    }

    /**
     * Get the receiverBusinessIdentity property: The receiver business identity.
     *
     * @return the receiverBusinessIdentity value.
     */
    public BusinessIdentity receiverBusinessIdentity() {
        return this.receiverBusinessIdentity;
    }

    /**
     * Set the receiverBusinessIdentity property: The receiver business identity.
     *
     * @param receiverBusinessIdentity the receiverBusinessIdentity value to set.
     * @return the X12OneWayAgreement object itself.
     */
    public X12OneWayAgreement withReceiverBusinessIdentity(BusinessIdentity receiverBusinessIdentity) {
        this.receiverBusinessIdentity = receiverBusinessIdentity;
        return this;
    }

    /**
     * Get the protocolSettings property: The X12 protocol settings.
     *
     * @return the protocolSettings value.
     */
    public X12ProtocolSettings protocolSettings() {
        return this.protocolSettings;
    }

    /**
     * Set the protocolSettings property: The X12 protocol settings.
     *
     * @param protocolSettings the protocolSettings value to set.
     * @return the X12OneWayAgreement object itself.
     */
    public X12OneWayAgreement withProtocolSettings(X12ProtocolSettings protocolSettings) {
        this.protocolSettings = protocolSettings;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (senderBusinessIdentity() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property senderBusinessIdentity in model X12OneWayAgreement"));
        } else {
            senderBusinessIdentity().validate();
        }
        if (receiverBusinessIdentity() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property receiverBusinessIdentity in model X12OneWayAgreement"));
        } else {
            receiverBusinessIdentity().validate();
        }
        if (protocolSettings() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property protocolSettings in model X12OneWayAgreement"));
        } else {
            protocolSettings().validate();
        }
    }
}
