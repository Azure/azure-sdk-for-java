// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Edifact agreement framing settings.
 */
@Fluent
public final class EdifactFramingSettings implements JsonSerializable<EdifactFramingSettings> {
    /*
     * The service code list directory version.
     */
    private String serviceCodeListDirectoryVersion;

    /*
     * The character encoding.
     */
    private String characterEncoding;

    /*
     * The protocol version.
     */
    private int protocolVersion;

    /*
     * The data element separator.
     */
    private int dataElementSeparator;

    /*
     * The component separator.
     */
    private int componentSeparator;

    /*
     * The segment terminator.
     */
    private int segmentTerminator;

    /*
     * The release indicator.
     */
    private int releaseIndicator;

    /*
     * The repetition separator.
     */
    private int repetitionSeparator;

    /*
     * The EDIFACT frame setting characterSet.
     */
    private EdifactCharacterSet characterSet;

    /*
     * The EDIFACT frame setting decimal indicator.
     */
    private EdifactDecimalIndicator decimalPointIndicator;

    /*
     * The EDIFACT frame setting segment terminator suffix.
     */
    private SegmentTerminatorSuffix segmentTerminatorSuffix;

    /**
     * Creates an instance of EdifactFramingSettings class.
     */
    public EdifactFramingSettings() {
    }

    /**
     * Get the serviceCodeListDirectoryVersion property: The service code list directory version.
     * 
     * @return the serviceCodeListDirectoryVersion value.
     */
    public String serviceCodeListDirectoryVersion() {
        return this.serviceCodeListDirectoryVersion;
    }

    /**
     * Set the serviceCodeListDirectoryVersion property: The service code list directory version.
     * 
     * @param serviceCodeListDirectoryVersion the serviceCodeListDirectoryVersion value to set.
     * @return the EdifactFramingSettings object itself.
     */
    public EdifactFramingSettings withServiceCodeListDirectoryVersion(String serviceCodeListDirectoryVersion) {
        this.serviceCodeListDirectoryVersion = serviceCodeListDirectoryVersion;
        return this;
    }

    /**
     * Get the characterEncoding property: The character encoding.
     * 
     * @return the characterEncoding value.
     */
    public String characterEncoding() {
        return this.characterEncoding;
    }

    /**
     * Set the characterEncoding property: The character encoding.
     * 
     * @param characterEncoding the characterEncoding value to set.
     * @return the EdifactFramingSettings object itself.
     */
    public EdifactFramingSettings withCharacterEncoding(String characterEncoding) {
        this.characterEncoding = characterEncoding;
        return this;
    }

    /**
     * Get the protocolVersion property: The protocol version.
     * 
     * @return the protocolVersion value.
     */
    public int protocolVersion() {
        return this.protocolVersion;
    }

    /**
     * Set the protocolVersion property: The protocol version.
     * 
     * @param protocolVersion the protocolVersion value to set.
     * @return the EdifactFramingSettings object itself.
     */
    public EdifactFramingSettings withProtocolVersion(int protocolVersion) {
        this.protocolVersion = protocolVersion;
        return this;
    }

    /**
     * Get the dataElementSeparator property: The data element separator.
     * 
     * @return the dataElementSeparator value.
     */
    public int dataElementSeparator() {
        return this.dataElementSeparator;
    }

    /**
     * Set the dataElementSeparator property: The data element separator.
     * 
     * @param dataElementSeparator the dataElementSeparator value to set.
     * @return the EdifactFramingSettings object itself.
     */
    public EdifactFramingSettings withDataElementSeparator(int dataElementSeparator) {
        this.dataElementSeparator = dataElementSeparator;
        return this;
    }

    /**
     * Get the componentSeparator property: The component separator.
     * 
     * @return the componentSeparator value.
     */
    public int componentSeparator() {
        return this.componentSeparator;
    }

    /**
     * Set the componentSeparator property: The component separator.
     * 
     * @param componentSeparator the componentSeparator value to set.
     * @return the EdifactFramingSettings object itself.
     */
    public EdifactFramingSettings withComponentSeparator(int componentSeparator) {
        this.componentSeparator = componentSeparator;
        return this;
    }

    /**
     * Get the segmentTerminator property: The segment terminator.
     * 
     * @return the segmentTerminator value.
     */
    public int segmentTerminator() {
        return this.segmentTerminator;
    }

    /**
     * Set the segmentTerminator property: The segment terminator.
     * 
     * @param segmentTerminator the segmentTerminator value to set.
     * @return the EdifactFramingSettings object itself.
     */
    public EdifactFramingSettings withSegmentTerminator(int segmentTerminator) {
        this.segmentTerminator = segmentTerminator;
        return this;
    }

    /**
     * Get the releaseIndicator property: The release indicator.
     * 
     * @return the releaseIndicator value.
     */
    public int releaseIndicator() {
        return this.releaseIndicator;
    }

    /**
     * Set the releaseIndicator property: The release indicator.
     * 
     * @param releaseIndicator the releaseIndicator value to set.
     * @return the EdifactFramingSettings object itself.
     */
    public EdifactFramingSettings withReleaseIndicator(int releaseIndicator) {
        this.releaseIndicator = releaseIndicator;
        return this;
    }

    /**
     * Get the repetitionSeparator property: The repetition separator.
     * 
     * @return the repetitionSeparator value.
     */
    public int repetitionSeparator() {
        return this.repetitionSeparator;
    }

    /**
     * Set the repetitionSeparator property: The repetition separator.
     * 
     * @param repetitionSeparator the repetitionSeparator value to set.
     * @return the EdifactFramingSettings object itself.
     */
    public EdifactFramingSettings withRepetitionSeparator(int repetitionSeparator) {
        this.repetitionSeparator = repetitionSeparator;
        return this;
    }

    /**
     * Get the characterSet property: The EDIFACT frame setting characterSet.
     * 
     * @return the characterSet value.
     */
    public EdifactCharacterSet characterSet() {
        return this.characterSet;
    }

    /**
     * Set the characterSet property: The EDIFACT frame setting characterSet.
     * 
     * @param characterSet the characterSet value to set.
     * @return the EdifactFramingSettings object itself.
     */
    public EdifactFramingSettings withCharacterSet(EdifactCharacterSet characterSet) {
        this.characterSet = characterSet;
        return this;
    }

    /**
     * Get the decimalPointIndicator property: The EDIFACT frame setting decimal indicator.
     * 
     * @return the decimalPointIndicator value.
     */
    public EdifactDecimalIndicator decimalPointIndicator() {
        return this.decimalPointIndicator;
    }

    /**
     * Set the decimalPointIndicator property: The EDIFACT frame setting decimal indicator.
     * 
     * @param decimalPointIndicator the decimalPointIndicator value to set.
     * @return the EdifactFramingSettings object itself.
     */
    public EdifactFramingSettings withDecimalPointIndicator(EdifactDecimalIndicator decimalPointIndicator) {
        this.decimalPointIndicator = decimalPointIndicator;
        return this;
    }

    /**
     * Get the segmentTerminatorSuffix property: The EDIFACT frame setting segment terminator suffix.
     * 
     * @return the segmentTerminatorSuffix value.
     */
    public SegmentTerminatorSuffix segmentTerminatorSuffix() {
        return this.segmentTerminatorSuffix;
    }

    /**
     * Set the segmentTerminatorSuffix property: The EDIFACT frame setting segment terminator suffix.
     * 
     * @param segmentTerminatorSuffix the segmentTerminatorSuffix value to set.
     * @return the EdifactFramingSettings object itself.
     */
    public EdifactFramingSettings withSegmentTerminatorSuffix(SegmentTerminatorSuffix segmentTerminatorSuffix) {
        this.segmentTerminatorSuffix = segmentTerminatorSuffix;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (characterSet() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property characterSet in model EdifactFramingSettings"));
        }
        if (decimalPointIndicator() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property decimalPointIndicator in model EdifactFramingSettings"));
        }
        if (segmentTerminatorSuffix() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property segmentTerminatorSuffix in model EdifactFramingSettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EdifactFramingSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("protocolVersion", this.protocolVersion);
        jsonWriter.writeIntField("dataElementSeparator", this.dataElementSeparator);
        jsonWriter.writeIntField("componentSeparator", this.componentSeparator);
        jsonWriter.writeIntField("segmentTerminator", this.segmentTerminator);
        jsonWriter.writeIntField("releaseIndicator", this.releaseIndicator);
        jsonWriter.writeIntField("repetitionSeparator", this.repetitionSeparator);
        jsonWriter.writeStringField("characterSet", this.characterSet == null ? null : this.characterSet.toString());
        jsonWriter.writeStringField("decimalPointIndicator",
            this.decimalPointIndicator == null ? null : this.decimalPointIndicator.toString());
        jsonWriter.writeStringField("segmentTerminatorSuffix",
            this.segmentTerminatorSuffix == null ? null : this.segmentTerminatorSuffix.toString());
        jsonWriter.writeStringField("serviceCodeListDirectoryVersion", this.serviceCodeListDirectoryVersion);
        jsonWriter.writeStringField("characterEncoding", this.characterEncoding);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EdifactFramingSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EdifactFramingSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EdifactFramingSettings.
     */
    public static EdifactFramingSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EdifactFramingSettings deserializedEdifactFramingSettings = new EdifactFramingSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("protocolVersion".equals(fieldName)) {
                    deserializedEdifactFramingSettings.protocolVersion = reader.getInt();
                } else if ("dataElementSeparator".equals(fieldName)) {
                    deserializedEdifactFramingSettings.dataElementSeparator = reader.getInt();
                } else if ("componentSeparator".equals(fieldName)) {
                    deserializedEdifactFramingSettings.componentSeparator = reader.getInt();
                } else if ("segmentTerminator".equals(fieldName)) {
                    deserializedEdifactFramingSettings.segmentTerminator = reader.getInt();
                } else if ("releaseIndicator".equals(fieldName)) {
                    deserializedEdifactFramingSettings.releaseIndicator = reader.getInt();
                } else if ("repetitionSeparator".equals(fieldName)) {
                    deserializedEdifactFramingSettings.repetitionSeparator = reader.getInt();
                } else if ("characterSet".equals(fieldName)) {
                    deserializedEdifactFramingSettings.characterSet
                        = EdifactCharacterSet.fromString(reader.getString());
                } else if ("decimalPointIndicator".equals(fieldName)) {
                    deserializedEdifactFramingSettings.decimalPointIndicator
                        = EdifactDecimalIndicator.fromString(reader.getString());
                } else if ("segmentTerminatorSuffix".equals(fieldName)) {
                    deserializedEdifactFramingSettings.segmentTerminatorSuffix
                        = SegmentTerminatorSuffix.fromString(reader.getString());
                } else if ("serviceCodeListDirectoryVersion".equals(fieldName)) {
                    deserializedEdifactFramingSettings.serviceCodeListDirectoryVersion = reader.getString();
                } else if ("characterEncoding".equals(fieldName)) {
                    deserializedEdifactFramingSettings.characterEncoding = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEdifactFramingSettings;
        });
    }
}
