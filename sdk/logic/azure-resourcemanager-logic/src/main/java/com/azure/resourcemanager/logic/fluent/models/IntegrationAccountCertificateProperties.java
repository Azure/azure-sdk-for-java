// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.logic.models.KeyVaultKeyReference;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The integration account certificate properties.
 */
@Fluent
public final class IntegrationAccountCertificateProperties
    implements JsonSerializable<IntegrationAccountCertificateProperties> {
    /*
     * The created time.
     */
    private OffsetDateTime createdTime;

    /*
     * The changed time.
     */
    private OffsetDateTime changedTime;

    /*
     * The metadata.
     */
    private Object metadata;

    /*
     * The key details in the key vault.
     */
    private KeyVaultKeyReference key;

    /*
     * The public certificate.
     */
    private String publicCertificate;

    /**
     * Creates an instance of IntegrationAccountCertificateProperties class.
     */
    public IntegrationAccountCertificateProperties() {
    }

    /**
     * Get the createdTime property: The created time.
     * 
     * @return the createdTime value.
     */
    public OffsetDateTime createdTime() {
        return this.createdTime;
    }

    /**
     * Get the changedTime property: The changed time.
     * 
     * @return the changedTime value.
     */
    public OffsetDateTime changedTime() {
        return this.changedTime;
    }

    /**
     * Get the metadata property: The metadata.
     * 
     * @return the metadata value.
     */
    public Object metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The metadata.
     * 
     * @param metadata the metadata value to set.
     * @return the IntegrationAccountCertificateProperties object itself.
     */
    public IntegrationAccountCertificateProperties withMetadata(Object metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the key property: The key details in the key vault.
     * 
     * @return the key value.
     */
    public KeyVaultKeyReference key() {
        return this.key;
    }

    /**
     * Set the key property: The key details in the key vault.
     * 
     * @param key the key value to set.
     * @return the IntegrationAccountCertificateProperties object itself.
     */
    public IntegrationAccountCertificateProperties withKey(KeyVaultKeyReference key) {
        this.key = key;
        return this;
    }

    /**
     * Get the publicCertificate property: The public certificate.
     * 
     * @return the publicCertificate value.
     */
    public String publicCertificate() {
        return this.publicCertificate;
    }

    /**
     * Set the publicCertificate property: The public certificate.
     * 
     * @param publicCertificate the publicCertificate value to set.
     * @return the IntegrationAccountCertificateProperties object itself.
     */
    public IntegrationAccountCertificateProperties withPublicCertificate(String publicCertificate) {
        this.publicCertificate = publicCertificate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (key() != null) {
            key().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("metadata", this.metadata);
        jsonWriter.writeJsonField("key", this.key);
        jsonWriter.writeStringField("publicCertificate", this.publicCertificate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IntegrationAccountCertificateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IntegrationAccountCertificateProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IntegrationAccountCertificateProperties.
     */
    public static IntegrationAccountCertificateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IntegrationAccountCertificateProperties deserializedIntegrationAccountCertificateProperties
                = new IntegrationAccountCertificateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("createdTime".equals(fieldName)) {
                    deserializedIntegrationAccountCertificateProperties.createdTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("changedTime".equals(fieldName)) {
                    deserializedIntegrationAccountCertificateProperties.changedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("metadata".equals(fieldName)) {
                    deserializedIntegrationAccountCertificateProperties.metadata = reader.readUntyped();
                } else if ("key".equals(fieldName)) {
                    deserializedIntegrationAccountCertificateProperties.key = KeyVaultKeyReference.fromJson(reader);
                } else if ("publicCertificate".equals(fieldName)) {
                    deserializedIntegrationAccountCertificateProperties.publicCertificate = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIntegrationAccountCertificateProperties;
        });
    }
}
