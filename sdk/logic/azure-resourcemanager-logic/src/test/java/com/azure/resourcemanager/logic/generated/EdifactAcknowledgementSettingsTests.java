// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logic.models.EdifactAcknowledgementSettings;
import org.junit.jupiter.api.Assertions;

public final class EdifactAcknowledgementSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EdifactAcknowledgementSettings model = BinaryData.fromString(
            "{\"needTechnicalAcknowledgement\":true,\"batchTechnicalAcknowledgements\":true,\"needFunctionalAcknowledgement\":true,\"batchFunctionalAcknowledgements\":false,\"needLoopForValidMessages\":false,\"sendSynchronousAcknowledgement\":false,\"acknowledgementControlNumberPrefix\":\"w\",\"acknowledgementControlNumberSuffix\":\"kjexfdeqvhp\",\"acknowledgementControlNumberLowerBound\":1267268353,\"acknowledgementControlNumberUpperBound\":1297569440,\"rolloverAcknowledgementControlNumber\":true}")
            .toObject(EdifactAcknowledgementSettings.class);
        Assertions.assertEquals(true, model.needTechnicalAcknowledgement());
        Assertions.assertEquals(true, model.batchTechnicalAcknowledgements());
        Assertions.assertEquals(true, model.needFunctionalAcknowledgement());
        Assertions.assertEquals(false, model.batchFunctionalAcknowledgements());
        Assertions.assertEquals(false, model.needLoopForValidMessages());
        Assertions.assertEquals(false, model.sendSynchronousAcknowledgement());
        Assertions.assertEquals("w", model.acknowledgementControlNumberPrefix());
        Assertions.assertEquals("kjexfdeqvhp", model.acknowledgementControlNumberSuffix());
        Assertions.assertEquals(1267268353, model.acknowledgementControlNumberLowerBound());
        Assertions.assertEquals(1297569440, model.acknowledgementControlNumberUpperBound());
        Assertions.assertEquals(true, model.rolloverAcknowledgementControlNumber());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EdifactAcknowledgementSettings model
            = new EdifactAcknowledgementSettings().withNeedTechnicalAcknowledgement(true)
                .withBatchTechnicalAcknowledgements(true)
                .withNeedFunctionalAcknowledgement(true)
                .withBatchFunctionalAcknowledgements(false)
                .withNeedLoopForValidMessages(false)
                .withSendSynchronousAcknowledgement(false)
                .withAcknowledgementControlNumberPrefix("w")
                .withAcknowledgementControlNumberSuffix("kjexfdeqvhp")
                .withAcknowledgementControlNumberLowerBound(1267268353)
                .withAcknowledgementControlNumberUpperBound(1297569440)
                .withRolloverAcknowledgementControlNumber(true);
        model = BinaryData.fromObject(model).toObject(EdifactAcknowledgementSettings.class);
        Assertions.assertEquals(true, model.needTechnicalAcknowledgement());
        Assertions.assertEquals(true, model.batchTechnicalAcknowledgements());
        Assertions.assertEquals(true, model.needFunctionalAcknowledgement());
        Assertions.assertEquals(false, model.batchFunctionalAcknowledgements());
        Assertions.assertEquals(false, model.needLoopForValidMessages());
        Assertions.assertEquals(false, model.sendSynchronousAcknowledgement());
        Assertions.assertEquals("w", model.acknowledgementControlNumberPrefix());
        Assertions.assertEquals("kjexfdeqvhp", model.acknowledgementControlNumberSuffix());
        Assertions.assertEquals(1267268353, model.acknowledgementControlNumberLowerBound());
        Assertions.assertEquals(1297569440, model.acknowledgementControlNumberUpperBound());
        Assertions.assertEquals(true, model.rolloverAcknowledgementControlNumber());
    }
}
