// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logic.models.X12AcknowledgementSettings;
import org.junit.jupiter.api.Assertions;

public final class X12AcknowledgementSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        X12AcknowledgementSettings model = BinaryData.fromString(
            "{\"needTechnicalAcknowledgement\":false,\"batchTechnicalAcknowledgements\":true,\"needFunctionalAcknowledgement\":true,\"functionalAcknowledgementVersion\":\"elnwclt\",\"batchFunctionalAcknowledgements\":true,\"needImplementationAcknowledgement\":true,\"implementationAcknowledgementVersion\":\"ex\",\"batchImplementationAcknowledgements\":false,\"needLoopForValidMessages\":false,\"sendSynchronousAcknowledgement\":false,\"acknowledgementControlNumberPrefix\":\"kqscazuawxtzx\",\"acknowledgementControlNumberSuffix\":\"amwabzxrvxcushsp\",\"acknowledgementControlNumberLowerBound\":1333151238,\"acknowledgementControlNumberUpperBound\":35510152,\"rolloverAcknowledgementControlNumber\":false}")
            .toObject(X12AcknowledgementSettings.class);
        Assertions.assertEquals(false, model.needTechnicalAcknowledgement());
        Assertions.assertEquals(true, model.batchTechnicalAcknowledgements());
        Assertions.assertEquals(true, model.needFunctionalAcknowledgement());
        Assertions.assertEquals("elnwclt", model.functionalAcknowledgementVersion());
        Assertions.assertEquals(true, model.batchFunctionalAcknowledgements());
        Assertions.assertEquals(true, model.needImplementationAcknowledgement());
        Assertions.assertEquals("ex", model.implementationAcknowledgementVersion());
        Assertions.assertEquals(false, model.batchImplementationAcknowledgements());
        Assertions.assertEquals(false, model.needLoopForValidMessages());
        Assertions.assertEquals(false, model.sendSynchronousAcknowledgement());
        Assertions.assertEquals("kqscazuawxtzx", model.acknowledgementControlNumberPrefix());
        Assertions.assertEquals("amwabzxrvxcushsp", model.acknowledgementControlNumberSuffix());
        Assertions.assertEquals(1333151238, model.acknowledgementControlNumberLowerBound());
        Assertions.assertEquals(35510152, model.acknowledgementControlNumberUpperBound());
        Assertions.assertEquals(false, model.rolloverAcknowledgementControlNumber());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        X12AcknowledgementSettings model = new X12AcknowledgementSettings().withNeedTechnicalAcknowledgement(false)
            .withBatchTechnicalAcknowledgements(true)
            .withNeedFunctionalAcknowledgement(true)
            .withFunctionalAcknowledgementVersion("elnwclt")
            .withBatchFunctionalAcknowledgements(true)
            .withNeedImplementationAcknowledgement(true)
            .withImplementationAcknowledgementVersion("ex")
            .withBatchImplementationAcknowledgements(false)
            .withNeedLoopForValidMessages(false)
            .withSendSynchronousAcknowledgement(false)
            .withAcknowledgementControlNumberPrefix("kqscazuawxtzx")
            .withAcknowledgementControlNumberSuffix("amwabzxrvxcushsp")
            .withAcknowledgementControlNumberLowerBound(1333151238)
            .withAcknowledgementControlNumberUpperBound(35510152)
            .withRolloverAcknowledgementControlNumber(false);
        model = BinaryData.fromObject(model).toObject(X12AcknowledgementSettings.class);
        Assertions.assertEquals(false, model.needTechnicalAcknowledgement());
        Assertions.assertEquals(true, model.batchTechnicalAcknowledgements());
        Assertions.assertEquals(true, model.needFunctionalAcknowledgement());
        Assertions.assertEquals("elnwclt", model.functionalAcknowledgementVersion());
        Assertions.assertEquals(true, model.batchFunctionalAcknowledgements());
        Assertions.assertEquals(true, model.needImplementationAcknowledgement());
        Assertions.assertEquals("ex", model.implementationAcknowledgementVersion());
        Assertions.assertEquals(false, model.batchImplementationAcknowledgements());
        Assertions.assertEquals(false, model.needLoopForValidMessages());
        Assertions.assertEquals(false, model.sendSynchronousAcknowledgement());
        Assertions.assertEquals("kqscazuawxtzx", model.acknowledgementControlNumberPrefix());
        Assertions.assertEquals("amwabzxrvxcushsp", model.acknowledgementControlNumberSuffix());
        Assertions.assertEquals(1333151238, model.acknowledgementControlNumberLowerBound());
        Assertions.assertEquals(35510152, model.acknowledgementControlNumberUpperBound());
        Assertions.assertEquals(false, model.rolloverAcknowledgementControlNumber());
    }
}
