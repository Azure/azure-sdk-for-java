// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironment;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironmentSkuName;
import com.azure.resourcemanager.logic.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.logic.models.WorkflowProvisioningState;
import com.azure.resourcemanager.logic.models.WorkflowState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IntegrationServiceEnvironmentsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Completed\",\"state\":\"Deleted\",\"integrationServiceEnvironmentId\":\"friwgybjp\",\"endpointsConfiguration\":{},\"networkConfiguration\":{\"virtualNetworkAddressSpace\":\"vgllixdgby\",\"subnets\":[]},\"encryptionConfiguration\":{}},\"sku\":{\"name\":\"Premium\",\"capacity\":1744960818},\"identity\":{\"type\":\"UserAssigned\",\"tenantId\":\"b8ff624d-5503-4d3d-b0c6-28746ce0bcfa\",\"principalId\":\"935a150c-7023-408e-940a-dcff6a98aeaf\",\"userAssignedIdentities\":{}},\"location\":\"oohutxlcskltezuu\",\"tags\":{\"cgubsrtmdylper\":\"zlfbgr\"},\"id\":\"ilttjzgczfcmfpfb\",\"name\":\"detres\",\"type\":\"gvtshu\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        LogicManager manager =
            LogicManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<IntegrationServiceEnvironment> response =
            manager.integrationServiceEnvironments().list(187296293, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("oohutxlcskltezuu", response.iterator().next().location());
        Assertions.assertEquals("zlfbgr", response.iterator().next().tags().get("cgubsrtmdylper"));
        Assertions
            .assertEquals(
                WorkflowProvisioningState.COMPLETED, response.iterator().next().properties().provisioningState());
        Assertions.assertEquals(WorkflowState.DELETED, response.iterator().next().properties().state());
        Assertions.assertEquals("friwgybjp", response.iterator().next().properties().integrationServiceEnvironmentId());
        Assertions
            .assertEquals(
                "vgllixdgby",
                response.iterator().next().properties().networkConfiguration().virtualNetworkAddressSpace());
        Assertions.assertEquals(IntegrationServiceEnvironmentSkuName.PREMIUM, response.iterator().next().sku().name());
        Assertions.assertEquals(1744960818, response.iterator().next().sku().capacity());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
    }
}
