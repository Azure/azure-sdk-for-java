// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.logic.models.ParameterType;
import com.azure.resourcemanager.logic.models.Workflow;
import com.azure.resourcemanager.logic.models.WorkflowState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkflowsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Moving\",\"createdTime\":\"2021-04-23T01:16:32Z\",\"changedTime\":\"2021-10-24T15:13:04Z\",\"state\":\"Deleted\",\"version\":\"zarrfttxhifrj\",\"accessEndpoint\":\"hon\",\"endpointsConfiguration\":{\"workflow\":{\"outgoingIpAddresses\":[{}],\"accessEndpointIpAddresses\":[{}]},\"connector\":{\"outgoingIpAddresses\":[{}],\"accessEndpointIpAddresses\":[{}]}},\"accessControl\":{\"triggers\":{\"allowedCallerIpAddresses\":[{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"vzyoehlj\":{},\"lyguot\":{},\"nucqkt\":{},\"aergjtpriicteydl\":{}}}},\"contents\":{\"allowedCallerIpAddresses\":[{},{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"up\":{},\"wwyixorfx\":{}}}},\"actions\":{\"allowedCallerIpAddresses\":[{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"ziwkcpx\":{},\"jmyoufqapuaypc\":{},\"ikkmyrsvtrtxgg\":{},\"pohuv\":{}}}},\"workflowManagement\":{\"allowedCallerIpAddresses\":[{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"qkgjukntknj\":{},\"ywgziqcwnefdeh\":{},\"tlnwnlauwbne\":{}}}}},\"sku\":{\"name\":\"Premium\",\"plan\":{\"id\":\"geuoihtik\",\"name\":\"wp\",\"type\":\"yavcbdsuwctvbhc\"}},\"integrationAccount\":{\"id\":\"xtljyr\",\"name\":\"hpbtwzrziv\",\"type\":\"kdcjymdoldbuy\"},\"integrationServiceEnvironment\":{\"id\":\"ephviuexf\",\"name\":\"sdoxhyi\",\"type\":\"gaxruffkmt\"},\"definition\":\"dataxynkh\",\"parameters\":{\"bvgieey\":{\"type\":\"Object\",\"value\":\"datazdbbitpgrnhpmsdg\",\"metadata\":\"datawfodv\",\"description\":\"xmoj\"},\"sz\":{\"type\":\"Bool\",\"value\":\"dataqtbasvj\",\"metadata\":\"datagplagwvgbnx\",\"description\":\"udnqcbbbhinbs\"},\"qwjj\":{\"type\":\"Object\",\"value\":\"datakvr\",\"metadata\":\"dataosh\",\"description\":\"yzqdnrgnyb\"},\"ssqwzndzux\":{\"type\":\"SecureString\",\"value\":\"dataxunqr\",\"metadata\":\"dataticgsdcpm\",\"description\":\"kuydabhydcq\"}}},\"identity\":{\"type\":\"None\",\"tenantId\":\"ab17ef89-1910-46e0-8218-be975abbcb63\",\"principalId\":\"640df4f2-5024-420d-9572-548b189fc146\",\"userAssignedIdentities\":{\"tjlzkymcg\":{\"principalId\":\"q\",\"clientId\":\"ozmbapjvbzablmp\"},\"jqwlvsefvkxxd\":{\"principalId\":\"pb\",\"clientId\":\"gf\"}}},\"location\":\"gbnqmhr\",\"tags\":{\"gxudsmdglq\":\"exwgrflqb\",\"tjd\":\"k\"},\"id\":\"dasomxwsflylols\",\"name\":\"ficzw\",\"type\":\"kglmcg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogicManager manager = LogicManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Workflow> response = manager.workflows()
            .listByResourceGroup("kczolndwrggyt", 1224486353, "oxnjbyjg", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gbnqmhr", response.iterator().next().location());
        Assertions.assertEquals("exwgrflqb", response.iterator().next().tags().get("gxudsmdglq"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals(WorkflowState.DELETED, response.iterator().next().state());
        Assertions.assertEquals("xtljyr", response.iterator().next().integrationAccount().id());
        Assertions.assertEquals("ephviuexf", response.iterator().next().integrationServiceEnvironment().id());
        Assertions.assertEquals(ParameterType.OBJECT, response.iterator().next().parameters().get("bvgieey").type());
        Assertions.assertEquals("xmoj", response.iterator().next().parameters().get("bvgieey").description());
    }
}
