// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.logic.models.ParameterType;
import com.azure.resourcemanager.logic.models.Workflow;
import com.azure.resourcemanager.logic.models.WorkflowState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkflowsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"NotSpecified\",\"createdTime\":\"2021-06-18T20:42:22Z\",\"changedTime\":\"2021-01-15T23:52:52Z\",\"state\":\"NotSpecified\",\"version\":\"tj\",\"accessEndpoint\":\"jbpnatpymvqic\",\"endpointsConfiguration\":{\"workflow\":{\"outgoingIpAddresses\":[{},{},{}],\"accessEndpointIpAddresses\":[{},{},{}]},\"connector\":{\"outgoingIpAddresses\":[{},{},{},{}],\"accessEndpointIpAddresses\":[{}]}},\"accessControl\":{\"triggers\":{\"allowedCallerIpAddresses\":[{},{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"yeyzo\":{},\"vincnihmwvhcgc\":{},\"uasutdhmilhzy\":{}}}},\"contents\":{\"allowedCallerIpAddresses\":[{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"sdadyrhmpokfxcbb\":{},\"mxgajyracelnlwg\":{},\"eouhjetxupxe\":{},\"ins\":{}}}},\"actions\":{\"allowedCallerIpAddresses\":[{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"en\":{},\"fsxtsmzvaozfajal\":{}}}},\"workflowManagement\":{\"allowedCallerIpAddresses\":[{}],\"openAuthenticationPolicies\":{\"policies\":{\"lvvazujc\":{},\"zznw\":{},\"xzmszxyfaidzv\":{},\"qvdivzjyx\":{}}}}},\"sku\":{\"name\":\"Premium\",\"plan\":{\"id\":\"lxjbrqbut\",\"name\":\"cnqudm\",\"type\":\"uvaweajq\"}},\"integrationAccount\":{\"id\":\"bvkwr\",\"name\":\"zoqyymhdbg\",\"type\":\"hltmp\"},\"integrationServiceEnvironment\":{\"id\":\"qqgr\",\"name\":\"ttosnz\",\"type\":\"xifacrhpuzcagz\"},\"definition\":\"datapbw\",\"parameters\":{\"e\":{\"type\":\"Object\",\"value\":\"datauo\",\"metadata\":\"datao\",\"description\":\"db\"}}},\"identity\":{\"type\":\"UserAssigned\",\"tenantId\":\"d95aa318-3cd1-4b2a-b1f2-2e63e2224d5e\",\"principalId\":\"53f7e9d9-d093-4510-9e94-863d4c872458\",\"userAssignedIdentities\":{\"izcdugnzymljgay\":{\"principalId\":\"odp\",\"clientId\":\"dvytnbkvxdafil\"}}},\"location\":\"aqwnkxoqecjz\",\"tags\":{\"ewshhqgjvchl\":\"glgvm\",\"fbtczzjfzjo\":\"e\",\"qpukltfknroxmi\":\"wizjraksah\",\"esizknhcvxflz\":\"nbzczpfvqtvukc\"},\"id\":\"grnh\",\"name\":\"ysdmovbvnjyq\",\"type\":\"ofdgzl\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogicManager manager = LogicManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Workflow> response
            = manager.workflows().list(366519820, "ulmzxhgwz", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("aqwnkxoqecjz", response.iterator().next().location());
        Assertions.assertEquals("glgvm", response.iterator().next().tags().get("ewshhqgjvchl"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals(WorkflowState.NOT_SPECIFIED, response.iterator().next().state());
        Assertions.assertEquals("bvkwr", response.iterator().next().integrationAccount().id());
        Assertions.assertEquals("qqgr", response.iterator().next().integrationServiceEnvironment().id());
        Assertions.assertEquals(ParameterType.OBJECT, response.iterator().next().parameters().get("e").type());
        Assertions.assertEquals("db", response.iterator().next().parameters().get("e").description());
    }
}
