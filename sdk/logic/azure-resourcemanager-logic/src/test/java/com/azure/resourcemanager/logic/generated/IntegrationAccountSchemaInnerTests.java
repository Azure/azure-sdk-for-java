// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logic.fluent.models.IntegrationAccountSchemaInner;
import com.azure.resourcemanager.logic.models.SchemaType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationAccountSchemaInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationAccountSchemaInner model = BinaryData.fromString(
            "{\"properties\":{\"schemaType\":\"NotSpecified\",\"targetNamespace\":\"tcojocqwo\",\"documentName\":\"nzjvusfzldm\",\"fileName\":\"uxylfsbtkadpy\",\"createdTime\":\"2020-12-29T00:26:56Z\",\"changedTime\":\"2021-06-16T11:37:33Z\",\"metadata\":\"datagkbugrjqct\",\"content\":\"cmisofie\",\"contentType\":\"efojyqdhcupl\",\"contentLink\":{\"uri\":\"cwkhihi\",\"contentVersion\":\"hzdsqtzbsrgnow\",\"contentSize\":4272824792965282046,\"contentHash\":{\"algorithm\":\"vecactx\",\"value\":\"oteyowc\"},\"metadata\":\"dataqovekqvgqou\"}},\"location\":\"ifzmpjwyivqi\",\"tags\":{\"uagrttikteusqc\":\"cvhrfsp\",\"bl\":\"kvyklxubyjaffmm\"},\"id\":\"qcuubgqibrta\",\"name\":\"metttwgd\",\"type\":\"lqxihhrmooiz\"}")
            .toObject(IntegrationAccountSchemaInner.class);
        Assertions.assertEquals("ifzmpjwyivqi", model.location());
        Assertions.assertEquals("cvhrfsp", model.tags().get("uagrttikteusqc"));
        Assertions.assertEquals(SchemaType.NOT_SPECIFIED, model.schemaType());
        Assertions.assertEquals("tcojocqwo", model.targetNamespace());
        Assertions.assertEquals("nzjvusfzldm", model.documentName());
        Assertions.assertEquals("uxylfsbtkadpy", model.fileName());
        Assertions.assertEquals("cmisofie", model.content());
        Assertions.assertEquals("efojyqdhcupl", model.contentType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationAccountSchemaInner model = new IntegrationAccountSchemaInner().withLocation("ifzmpjwyivqi")
            .withTags(mapOf("uagrttikteusqc", "cvhrfsp", "bl", "kvyklxubyjaffmm"))
            .withSchemaType(SchemaType.NOT_SPECIFIED)
            .withTargetNamespace("tcojocqwo")
            .withDocumentName("nzjvusfzldm")
            .withFileName("uxylfsbtkadpy")
            .withMetadata("datagkbugrjqct")
            .withContent("cmisofie")
            .withContentType("efojyqdhcupl");
        model = BinaryData.fromObject(model).toObject(IntegrationAccountSchemaInner.class);
        Assertions.assertEquals("ifzmpjwyivqi", model.location());
        Assertions.assertEquals("cvhrfsp", model.tags().get("uagrttikteusqc"));
        Assertions.assertEquals(SchemaType.NOT_SPECIFIED, model.schemaType());
        Assertions.assertEquals("tcojocqwo", model.targetNamespace());
        Assertions.assertEquals("nzjvusfzldm", model.documentName());
        Assertions.assertEquals("uxylfsbtkadpy", model.fileName());
        Assertions.assertEquals("cmisofie", model.content());
        Assertions.assertEquals("efojyqdhcupl", model.contentType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
