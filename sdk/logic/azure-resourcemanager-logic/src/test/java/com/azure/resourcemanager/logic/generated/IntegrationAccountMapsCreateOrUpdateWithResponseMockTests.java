// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.IntegrationAccountMap;
import com.azure.resourcemanager.logic.models.IntegrationAccountMapPropertiesParametersSchema;
import com.azure.resourcemanager.logic.models.MapType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IntegrationAccountMapsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"mapType\":\"Xslt30\",\"parametersSchema\":{\"ref\":\"yf\"},\"createdTime\":\"2021-06-06T07:04:28Z\",\"changedTime\":\"2021-05-30T19:52:29Z\",\"content\":\"rbhrspzkvoknmer\",\"contentType\":\"noessuwkcnhdecxb\",\"contentLink\":{\"uri\":\"fepixfdojxb\",\"contentVersion\":\"fxdntpksb\",\"contentSize\":3147806891909012893,\"contentHash\":{\"algorithm\":\"aidqzflasvah\",\"value\":\"oojdnmrx\"},\"metadata\":\"dataumrzfdbo\"},\"metadata\":\"datakadanlhq\"},\"location\":\"r\",\"tags\":{\"zurhgucns\":\"iaoxpfkozvcxx\"},\"id\":\"pbleazvyftklbb\",\"name\":\"ibgczkk\",\"type\":\"rl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogicManager manager = LogicManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IntegrationAccountMap response = manager.integrationAccountMaps()
            .define("rgmlaerx")
            .withRegion("lrphadd")
            .withExistingIntegrationAccount("jezadkf", "piffgtqhghygzaya")
            .withMapType(MapType.XSLT)
            .withTags(mapOf("pau", "qcvabyzdaroedw", "zziavguskvvnzn", "lety"))
            .withParametersSchema(new IntegrationAccountMapPropertiesParametersSchema().withRef("mybuqjpgbiyaxg"))
            .withContent("nhpvbmbfixc")
            .withContentType("mdydkdc")
            .withMetadata("datavmymfaiw")
            .create();

        Assertions.assertEquals("r", response.location());
        Assertions.assertEquals("iaoxpfkozvcxx", response.tags().get("zurhgucns"));
        Assertions.assertEquals(MapType.XSLT30, response.mapType());
        Assertions.assertEquals("yf", response.parametersSchema().ref());
        Assertions.assertEquals("rbhrspzkvoknmer", response.content());
        Assertions.assertEquals("noessuwkcnhdecxb", response.contentType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
