// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logic.fluent.models.BatchConfigurationInner;
import com.azure.resourcemanager.logic.models.BatchConfigurationCollection;
import com.azure.resourcemanager.logic.models.BatchConfigurationProperties;
import com.azure.resourcemanager.logic.models.BatchReleaseCriteria;
import com.azure.resourcemanager.logic.models.RecurrenceFrequency;
import com.azure.resourcemanager.logic.models.RecurrenceSchedule;
import com.azure.resourcemanager.logic.models.WorkflowTriggerRecurrence;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BatchConfigurationCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BatchConfigurationCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"batchGroupName\":\"vbquwr\",\"releaseCriteria\":{\"messageCount\":1619568012,\"batchSize\":2007657488,\"recurrence\":{\"frequency\":\"Day\",\"interval\":1035155607,\"startTime\":\"fkmr\",\"endTime\":\"mvvhmxtdrjfuta\",\"timeZone\":\"ebjvewzcjzn\",\"schedule\":{}}},\"createdTime\":\"2021-08-15T08:27:46Z\",\"changedTime\":\"2021-11-09T20:57Z\",\"metadata\":\"dataaadraufactkahz\"},\"location\":\"v\",\"tags\":{\"ulfgslqu\":\"ziuxxpshnee\"},\"id\":\"kwdlenrdsutujba\",\"name\":\"pjuohminyfl\",\"type\":\"orwmduvwpklv\"}]}")
            .toObject(BatchConfigurationCollection.class);
        Assertions.assertEquals("v", model.value().get(0).location());
        Assertions.assertEquals("ziuxxpshnee", model.value().get(0).tags().get("ulfgslqu"));
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-15T08:27:46Z"),
            model.value().get(0).properties().createdTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-09T20:57Z"),
            model.value().get(0).properties().changedTime());
        Assertions.assertEquals("vbquwr", model.value().get(0).properties().batchGroupName());
        Assertions.assertEquals(1619568012, model.value().get(0).properties().releaseCriteria().messageCount());
        Assertions.assertEquals(2007657488, model.value().get(0).properties().releaseCriteria().batchSize());
        Assertions.assertEquals(RecurrenceFrequency.DAY,
            model.value().get(0).properties().releaseCriteria().recurrence().frequency());
        Assertions.assertEquals(1035155607,
            model.value().get(0).properties().releaseCriteria().recurrence().interval());
        Assertions.assertEquals("fkmr", model.value().get(0).properties().releaseCriteria().recurrence().startTime());
        Assertions.assertEquals("mvvhmxtdrjfuta",
            model.value().get(0).properties().releaseCriteria().recurrence().endTime());
        Assertions.assertEquals("ebjvewzcjzn",
            model.value().get(0).properties().releaseCriteria().recurrence().timeZone());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BatchConfigurationCollection model
            = new BatchConfigurationCollection()
                .withValue(
                    Arrays.asList(new BatchConfigurationInner().withLocation("v")
                        .withTags(mapOf("ulfgslqu", "ziuxxpshnee"))
                        .withProperties(new BatchConfigurationProperties()
                            .withCreatedTime(OffsetDateTime.parse("2021-08-15T08:27:46Z"))
                            .withChangedTime(OffsetDateTime.parse("2021-11-09T20:57Z"))
                            .withMetadata("dataaadraufactkahz")
                            .withBatchGroupName("vbquwr")
                            .withReleaseCriteria(new BatchReleaseCriteria().withMessageCount(1619568012)
                                .withBatchSize(2007657488)
                                .withRecurrence(new WorkflowTriggerRecurrence().withFrequency(RecurrenceFrequency.DAY)
                                    .withInterval(1035155607)
                                    .withStartTime("fkmr")
                                    .withEndTime("mvvhmxtdrjfuta")
                                    .withTimeZone("ebjvewzcjzn")
                                    .withSchedule(new RecurrenceSchedule()))))));
        model = BinaryData.fromObject(model).toObject(BatchConfigurationCollection.class);
        Assertions.assertEquals("v", model.value().get(0).location());
        Assertions.assertEquals("ziuxxpshnee", model.value().get(0).tags().get("ulfgslqu"));
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-15T08:27:46Z"),
            model.value().get(0).properties().createdTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-09T20:57Z"),
            model.value().get(0).properties().changedTime());
        Assertions.assertEquals("vbquwr", model.value().get(0).properties().batchGroupName());
        Assertions.assertEquals(1619568012, model.value().get(0).properties().releaseCriteria().messageCount());
        Assertions.assertEquals(2007657488, model.value().get(0).properties().releaseCriteria().batchSize());
        Assertions.assertEquals(RecurrenceFrequency.DAY,
            model.value().get(0).properties().releaseCriteria().recurrence().frequency());
        Assertions.assertEquals(1035155607,
            model.value().get(0).properties().releaseCriteria().recurrence().interval());
        Assertions.assertEquals("fkmr", model.value().get(0).properties().releaseCriteria().recurrence().startTime());
        Assertions.assertEquals("mvvhmxtdrjfuta",
            model.value().get(0).properties().releaseCriteria().recurrence().endTime());
        Assertions.assertEquals("ebjvewzcjzn",
            model.value().get(0).properties().releaseCriteria().recurrence().timeZone());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
