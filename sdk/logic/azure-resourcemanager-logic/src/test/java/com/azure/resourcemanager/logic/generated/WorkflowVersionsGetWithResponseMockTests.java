// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.ParameterType;
import com.azure.resourcemanager.logic.models.WorkflowState;
import com.azure.resourcemanager.logic.models.WorkflowVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkflowVersionsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Accepted\",\"createdTime\":\"2021-08-01T10:49:36Z\",\"changedTime\":\"2021-10-11T18:27:11Z\",\"state\":\"Deleted\",\"version\":\"ynbdvbuxljiqy\",\"accessEndpoint\":\"dmgrfhvewgv\",\"endpointsConfiguration\":{\"workflow\":{\"outgoingIpAddresses\":[{},{}],\"accessEndpointIpAddresses\":[{},{},{},{}]},\"connector\":{\"outgoingIpAddresses\":[{},{},{},{}],\"accessEndpointIpAddresses\":[{}]}},\"accessControl\":{\"triggers\":{\"allowedCallerIpAddresses\":[{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"ydlyszthpnwzpki\":{},\"efygdaumerkgmgqy\":{},\"ejqka\":{}}}},\"contents\":{\"allowedCallerIpAddresses\":[{},{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"xoihcqxexbksa\":{},\"nec\":{}}}},\"actions\":{\"allowedCallerIpAddresses\":[{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"jye\":{},\"pcg\":{},\"szwvooxieyyww\":{}}}},\"workflowManagement\":{\"allowedCallerIpAddresses\":[{},{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"cjfybkt\":{}}}}},\"sku\":{\"name\":\"Free\",\"plan\":{\"id\":\"vzzszcrwhrxoyvy\",\"name\":\"efpyjtwwaxx\",\"type\":\"rdsmra\"}},\"integrationAccount\":{\"id\":\"glpxmd\",\"name\":\"lbocecmnqcgbijyp\",\"type\":\"byrkxzebvxuzch\"},\"definition\":\"dataeogdkcrc\",\"parameters\":{\"mgefxkattpk\":{\"type\":\"Float\",\"value\":\"datamadlp\",\"metadata\":\"datarewhuqkic\",\"description\":\"yykmkelbqmn\"}}},\"location\":\"wldv\",\"tags\":{\"pnkvnuwjrxbbxkhv\":\"gxakgoptbjooqo\"},\"id\":\"qbxvtgloifmlbhli\",\"name\":\"g\",\"type\":\"imtzzyjhyiey\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogicManager manager = LogicManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkflowVersion response = manager.workflowVersions()
            .getWithResponse("wxabvxw", "agoeillsz", "gy", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("wldv", response.location());
        Assertions.assertEquals("gxakgoptbjooqo", response.tags().get("pnkvnuwjrxbbxkhv"));
        Assertions.assertEquals(WorkflowState.DELETED, response.state());
        Assertions.assertEquals("glpxmd", response.integrationAccount().id());
        Assertions.assertEquals(ParameterType.FLOAT, response.parameters().get("mgefxkattpk").type());
        Assertions.assertEquals("yykmkelbqmn", response.parameters().get("mgefxkattpk").description());
    }
}
