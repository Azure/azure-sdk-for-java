// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logic.models.SwaggerCustomDynamicTree;
import com.azure.resourcemanager.logic.models.SwaggerCustomDynamicTreeCommand;
import com.azure.resourcemanager.logic.models.SwaggerCustomDynamicTreeParameter;
import com.azure.resourcemanager.logic.models.SwaggerCustomDynamicTreeSettings;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SwaggerCustomDynamicTreeTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SwaggerCustomDynamicTree model = BinaryData.fromString(
            "{\"settings\":{\"CanSelectParentNodes\":false,\"CanSelectLeafNodes\":true},\"open\":{\"operationId\":\"hlfvsbaqdgzbjbb\",\"itemsPath\":\"udctdlkucxtyuf\",\"itemValuePath\":\"uhkmc\",\"itemTitlePath\":\"uomdlspsbg\",\"itemFullTitlePath\":\"nygroqia\",\"itemIsParent\":\"xoxwndfuyjo\",\"selectableFilter\":\"alcyflzuztdwxr\",\"parameters\":{\"lyjdbsx\":{\"selectedItemValuePath\":\"zprhpwwarzjzb\",\"value\":\"datat\",\"parameterReference\":\"xhriruvjizuky\",\"required\":true},\"rsmyisnd\":{\"selectedItemValuePath\":\"leqsk\",\"value\":\"dataol\",\"parameterReference\":\"bellpk\",\"required\":false}}},\"browse\":{\"operationId\":\"hgowhnvcqhmuv\",\"itemsPath\":\"stohurktod\",\"itemValuePath\":\"rtyijlvcmp\",\"itemTitlePath\":\"xx\",\"itemFullTitlePath\":\"ledbdkwz\",\"itemIsParent\":\"hvlsahjdebwy\",\"selectableFilter\":\"luszi\",\"parameters\":{\"pjonminsqjnuiiyt\":{\"selectedItemValuePath\":\"pxlkihfxtbvhmsv\",\"value\":\"datace\",\"parameterReference\":\"rhwriihwxchyyf\",\"required\":true},\"wzfxkof\":{\"selectedItemValuePath\":\"rpeyigfdppgkk\",\"value\":\"dataygjldljgd\",\"parameterReference\":\"grtse\",\"required\":false}}}}")
            .toObject(SwaggerCustomDynamicTree.class);
        Assertions.assertEquals(false, model.settings().canSelectParentNodes());
        Assertions.assertEquals(true, model.settings().canSelectLeafNodes());
        Assertions.assertEquals("hlfvsbaqdgzbjbb", model.open().operationId());
        Assertions.assertEquals("udctdlkucxtyuf", model.open().itemsPath());
        Assertions.assertEquals("uhkmc", model.open().itemValuePath());
        Assertions.assertEquals("uomdlspsbg", model.open().itemTitlePath());
        Assertions.assertEquals("nygroqia", model.open().itemFullTitlePath());
        Assertions.assertEquals("xoxwndfuyjo", model.open().itemIsParent());
        Assertions.assertEquals("alcyflzuztdwxr", model.open().selectableFilter());
        Assertions.assertEquals("zprhpwwarzjzb", model.open().parameters().get("lyjdbsx").selectedItemValuePath());
        Assertions.assertEquals("xhriruvjizuky", model.open().parameters().get("lyjdbsx").parameterReference());
        Assertions.assertEquals(true, model.open().parameters().get("lyjdbsx").required());
        Assertions.assertEquals("hgowhnvcqhmuv", model.browse().operationId());
        Assertions.assertEquals("stohurktod", model.browse().itemsPath());
        Assertions.assertEquals("rtyijlvcmp", model.browse().itemValuePath());
        Assertions.assertEquals("xx", model.browse().itemTitlePath());
        Assertions.assertEquals("ledbdkwz", model.browse().itemFullTitlePath());
        Assertions.assertEquals("hvlsahjdebwy", model.browse().itemIsParent());
        Assertions.assertEquals("luszi", model.browse().selectableFilter());
        Assertions.assertEquals("pxlkihfxtbvhmsv",
            model.browse().parameters().get("pjonminsqjnuiiyt").selectedItemValuePath());
        Assertions.assertEquals("rhwriihwxchyyf",
            model.browse().parameters().get("pjonminsqjnuiiyt").parameterReference());
        Assertions.assertEquals(true, model.browse().parameters().get("pjonminsqjnuiiyt").required());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SwaggerCustomDynamicTree model = new SwaggerCustomDynamicTree()
            .withSettings(
                new SwaggerCustomDynamicTreeSettings().withCanSelectParentNodes(false).withCanSelectLeafNodes(true))
            .withOpen(new SwaggerCustomDynamicTreeCommand().withOperationId("hlfvsbaqdgzbjbb")
                .withItemsPath("udctdlkucxtyuf")
                .withItemValuePath("uhkmc")
                .withItemTitlePath("uomdlspsbg")
                .withItemFullTitlePath("nygroqia")
                .withItemIsParent("xoxwndfuyjo")
                .withSelectableFilter("alcyflzuztdwxr")
                .withParameters(mapOf("lyjdbsx",
                    new SwaggerCustomDynamicTreeParameter().withSelectedItemValuePath("zprhpwwarzjzb")
                        .withValue("datat")
                        .withParameterReference("xhriruvjizuky")
                        .withRequired(true),
                    "rsmyisnd",
                    new SwaggerCustomDynamicTreeParameter().withSelectedItemValuePath("leqsk")
                        .withValue("dataol")
                        .withParameterReference("bellpk")
                        .withRequired(false))))
            .withBrowse(new SwaggerCustomDynamicTreeCommand().withOperationId("hgowhnvcqhmuv")
                .withItemsPath("stohurktod")
                .withItemValuePath("rtyijlvcmp")
                .withItemTitlePath("xx")
                .withItemFullTitlePath("ledbdkwz")
                .withItemIsParent("hvlsahjdebwy")
                .withSelectableFilter("luszi")
                .withParameters(mapOf("pjonminsqjnuiiyt",
                    new SwaggerCustomDynamicTreeParameter().withSelectedItemValuePath("pxlkihfxtbvhmsv")
                        .withValue("datace")
                        .withParameterReference("rhwriihwxchyyf")
                        .withRequired(true),
                    "wzfxkof",
                    new SwaggerCustomDynamicTreeParameter().withSelectedItemValuePath("rpeyigfdppgkk")
                        .withValue("dataygjldljgd")
                        .withParameterReference("grtse")
                        .withRequired(false))));
        model = BinaryData.fromObject(model).toObject(SwaggerCustomDynamicTree.class);
        Assertions.assertEquals(false, model.settings().canSelectParentNodes());
        Assertions.assertEquals(true, model.settings().canSelectLeafNodes());
        Assertions.assertEquals("hlfvsbaqdgzbjbb", model.open().operationId());
        Assertions.assertEquals("udctdlkucxtyuf", model.open().itemsPath());
        Assertions.assertEquals("uhkmc", model.open().itemValuePath());
        Assertions.assertEquals("uomdlspsbg", model.open().itemTitlePath());
        Assertions.assertEquals("nygroqia", model.open().itemFullTitlePath());
        Assertions.assertEquals("xoxwndfuyjo", model.open().itemIsParent());
        Assertions.assertEquals("alcyflzuztdwxr", model.open().selectableFilter());
        Assertions.assertEquals("zprhpwwarzjzb", model.open().parameters().get("lyjdbsx").selectedItemValuePath());
        Assertions.assertEquals("xhriruvjizuky", model.open().parameters().get("lyjdbsx").parameterReference());
        Assertions.assertEquals(true, model.open().parameters().get("lyjdbsx").required());
        Assertions.assertEquals("hgowhnvcqhmuv", model.browse().operationId());
        Assertions.assertEquals("stohurktod", model.browse().itemsPath());
        Assertions.assertEquals("rtyijlvcmp", model.browse().itemValuePath());
        Assertions.assertEquals("xx", model.browse().itemTitlePath());
        Assertions.assertEquals("ledbdkwz", model.browse().itemFullTitlePath());
        Assertions.assertEquals("hvlsahjdebwy", model.browse().itemIsParent());
        Assertions.assertEquals("luszi", model.browse().selectableFilter());
        Assertions.assertEquals("pxlkihfxtbvhmsv",
            model.browse().parameters().get("pjonminsqjnuiiyt").selectedItemValuePath());
        Assertions.assertEquals("rhwriihwxchyyf",
            model.browse().parameters().get("pjonminsqjnuiiyt").parameterReference());
        Assertions.assertEquals(true, model.browse().parameters().get("pjonminsqjnuiiyt").required());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
