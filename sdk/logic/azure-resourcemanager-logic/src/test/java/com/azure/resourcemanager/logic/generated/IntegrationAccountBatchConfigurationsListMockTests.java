// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.BatchConfiguration;
import com.azure.resourcemanager.logic.models.DaysOfWeek;
import com.azure.resourcemanager.logic.models.RecurrenceFrequency;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IntegrationAccountBatchConfigurationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"batchGroupName\":\"mbuhkcsh\",\"releaseCriteria\":{\"messageCount\":1397699982,\"batchSize\":1799873765,\"recurrence\":{\"frequency\":\"Hour\",\"interval\":1150542058,\"startTime\":\"eoijeppnpftwgtr\",\"endTime\":\"cyiue\",\"timeZone\":\"nejnjpwkwxnmqmyt\",\"schedule\":{\"minutes\":[1619844142,190768517,505260146,1283946557],\"hours\":[1037446644,414441424,1802472621],\"weekDays\":[\"Wednesday\",\"Friday\",\"Tuesday\",\"Friday\"],\"monthDays\":[988202352],\"monthlyOccurrences\":[{},{},{}]}}},\"createdTime\":\"2021-04-11T17:30:24Z\",\"changedTime\":\"2021-04-05T07:51:15Z\",\"metadata\":\"datalbsvtsjvd\"},\"location\":\"zafpvwrbqbyxu\",\"tags\":{\"fsjpvjwbxlgpepx\":\"kbbemhwtmeqt\",\"egkltlpbbepmmi\":\"jjnxdg\",\"uev\":\"mvada\",\"hgfojdbov\":\"wtdzgngnuuz\"},\"id\":\"mnelqlqn\",\"name\":\"vqmxzdi\",\"type\":\"n\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogicManager manager = LogicManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<BatchConfiguration> response = manager.integrationAccountBatchConfigurations()
            .list("dbbweaa", "gokpnbmhskhjjxe", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zafpvwrbqbyxu", response.iterator().next().location());
        Assertions.assertEquals("kbbemhwtmeqt", response.iterator().next().tags().get("fsjpvjwbxlgpepx"));
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-11T17:30:24Z"),
            response.iterator().next().properties().createdTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-05T07:51:15Z"),
            response.iterator().next().properties().changedTime());
        Assertions.assertEquals("mbuhkcsh", response.iterator().next().properties().batchGroupName());
        Assertions.assertEquals(1397699982, response.iterator().next().properties().releaseCriteria().messageCount());
        Assertions.assertEquals(1799873765, response.iterator().next().properties().releaseCriteria().batchSize());
        Assertions.assertEquals(RecurrenceFrequency.HOUR,
            response.iterator().next().properties().releaseCriteria().recurrence().frequency());
        Assertions.assertEquals(1150542058,
            response.iterator().next().properties().releaseCriteria().recurrence().interval());
        Assertions.assertEquals("eoijeppnpftwgtr",
            response.iterator().next().properties().releaseCriteria().recurrence().startTime());
        Assertions.assertEquals("cyiue",
            response.iterator().next().properties().releaseCriteria().recurrence().endTime());
        Assertions.assertEquals("nejnjpwkwxnmqmyt",
            response.iterator().next().properties().releaseCriteria().recurrence().timeZone());
        Assertions.assertEquals(1619844142,
            response.iterator().next().properties().releaseCriteria().recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(1037446644,
            response.iterator().next().properties().releaseCriteria().recurrence().schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.WEDNESDAY,
            response.iterator().next().properties().releaseCriteria().recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals(988202352,
            response.iterator().next().properties().releaseCriteria().recurrence().schedule().monthDays().get(0));
    }
}
