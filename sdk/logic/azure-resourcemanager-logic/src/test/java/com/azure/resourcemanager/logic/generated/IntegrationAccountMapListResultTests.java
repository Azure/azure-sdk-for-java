// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logic.fluent.models.IntegrationAccountMapInner;
import com.azure.resourcemanager.logic.models.IntegrationAccountMapListResult;
import com.azure.resourcemanager.logic.models.IntegrationAccountMapPropertiesParametersSchema;
import com.azure.resourcemanager.logic.models.MapType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationAccountMapListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationAccountMapListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"mapType\":\"Liquid\",\"parametersSchema\":{\"ref\":\"culkbawpfaj\"},\"createdTime\":\"2021-07-10T16:24:37Z\",\"changedTime\":\"2021-06-13T08:11:07Z\",\"content\":\"wtjjguktalhsnv\",\"contentType\":\"dmxzr\",\"contentLink\":{\"uri\":\"imlnwiaaomylw\",\"contentVersion\":\"z\",\"contentSize\":2879623854104865105,\"contentHash\":{\"algorithm\":\"hwwn\",\"value\":\"hlf\"},\"metadata\":\"datawpchwahf\"},\"metadata\":\"datausnfepgfewet\"},\"location\":\"l\",\"tags\":{\"cxfhbcporxv\":\"ncxykxhdjhlimm\",\"xfpxtgqscja\":\"cjzhqi\",\"qaz\":\"ftjuh\"},\"id\":\"mtggu\",\"name\":\"pijrajcivmmghf\",\"type\":\"fiwrxgkn\"},{\"properties\":{\"mapType\":\"NotSpecified\",\"parametersSchema\":{\"ref\":\"inzqodfvpgs\"},\"createdTime\":\"2021-06-18T14:08:16Z\",\"changedTime\":\"2021-08-05T02:27:24Z\",\"content\":\"bpfgzdj\",\"contentType\":\"vzflbq\",\"contentLink\":{\"uri\":\"qvlgafcqusrdvetn\",\"contentVersion\":\"dtutnwldu\",\"contentSize\":6613508255547335147,\"contentHash\":{\"algorithm\":\"yrmewipmvekdx\",\"value\":\"uqgsj\"},\"metadata\":\"dataundxgketw\"},\"metadata\":\"datahzjhf\"},\"location\":\"mhv\",\"tags\":{\"qsxvmhf\":\"vgpmun\"},\"id\":\"uzjyihsasbhudypo\",\"name\":\"yue\",\"type\":\"slynsqyrpfoo\"},{\"properties\":{\"mapType\":\"Xslt30\",\"parametersSchema\":{\"ref\":\"tyms\"},\"createdTime\":\"2021-07-18T21:06:13Z\",\"changedTime\":\"2021-08-12T19:25:58Z\",\"content\":\"nfwqzdzgtilaxhn\",\"contentType\":\"qlyvijo\",\"contentLink\":{\"uri\":\"vk\",\"contentVersion\":\"yzunbixxrtikv\",\"contentSize\":1201991349148626260,\"contentHash\":{\"algorithm\":\"lrcivtsoxfrke\",\"value\":\"pmyyefrpmpdnqq\"},\"metadata\":\"dataawaoqvmmbnpqfrt\"},\"metadata\":\"datakzmegnitgvkxlz\"},\"location\":\"qdrfegcealzxwhc\",\"tags\":{\"qhlwigdivbkbxgo\":\"ymo\",\"vdaeyyguxakjsq\":\"fajuwas\"},\"id\":\"hzbezkgi\",\"name\":\"sidxasicdd\",\"type\":\"vvjskgfmocwahp\"}],\"nextLink\":\"atjeaahh\"}")
            .toObject(IntegrationAccountMapListResult.class);
        Assertions.assertEquals("l", model.value().get(0).location());
        Assertions.assertEquals("ncxykxhdjhlimm", model.value().get(0).tags().get("cxfhbcporxv"));
        Assertions.assertEquals(MapType.LIQUID, model.value().get(0).mapType());
        Assertions.assertEquals("culkbawpfaj", model.value().get(0).parametersSchema().ref());
        Assertions.assertEquals("wtjjguktalhsnv", model.value().get(0).content());
        Assertions.assertEquals("dmxzr", model.value().get(0).contentType());
        Assertions.assertEquals("atjeaahh", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationAccountMapListResult model
            = new IntegrationAccountMapListResult()
                .withValue(
                    Arrays
                        .asList(
                            new IntegrationAccountMapInner().withLocation("l")
                                .withTags(
                                    mapOf("cxfhbcporxv", "ncxykxhdjhlimm", "xfpxtgqscja", "cjzhqi", "qaz", "ftjuh"))
                                .withMapType(MapType.LIQUID)
                                .withParametersSchema(
                                    new IntegrationAccountMapPropertiesParametersSchema().withRef("culkbawpfaj"))
                                .withContent("wtjjguktalhsnv")
                                .withContentType("dmxzr")
                                .withMetadata("datausnfepgfewet"),
                            new IntegrationAccountMapInner().withLocation("mhv")
                                .withTags(mapOf("qsxvmhf", "vgpmun"))
                                .withMapType(MapType.NOT_SPECIFIED)
                                .withParametersSchema(
                                    new IntegrationAccountMapPropertiesParametersSchema().withRef("inzqodfvpgs"))
                                .withContent("bpfgzdj")
                                .withContentType("vzflbq")
                                .withMetadata("datahzjhf"),
                            new IntegrationAccountMapInner().withLocation("qdrfegcealzxwhc")
                                .withTags(mapOf("qhlwigdivbkbxgo", "ymo", "vdaeyyguxakjsq", "fajuwas"))
                                .withMapType(MapType.XSLT30)
                                .withParametersSchema(
                                    new IntegrationAccountMapPropertiesParametersSchema().withRef("tyms"))
                                .withContent("nfwqzdzgtilaxhn")
                                .withContentType("qlyvijo")
                                .withMetadata("datakzmegnitgvkxlz")))
                .withNextLink("atjeaahh");
        model = BinaryData.fromObject(model).toObject(IntegrationAccountMapListResult.class);
        Assertions.assertEquals("l", model.value().get(0).location());
        Assertions.assertEquals("ncxykxhdjhlimm", model.value().get(0).tags().get("cxfhbcporxv"));
        Assertions.assertEquals(MapType.LIQUID, model.value().get(0).mapType());
        Assertions.assertEquals("culkbawpfaj", model.value().get(0).parametersSchema().ref());
        Assertions.assertEquals("wtjjguktalhsnv", model.value().get(0).content());
        Assertions.assertEquals("dmxzr", model.value().get(0).contentType());
        Assertions.assertEquals("atjeaahh", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
