// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.logic.models.ParameterType;
import com.azure.resourcemanager.logic.models.Workflow;
import com.azure.resourcemanager.logic.models.WorkflowState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkflowsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"NotSpecified\",\"createdTime\":\"2021-05-06T17:16:09Z\",\"changedTime\":\"2021-07-11T03:20:38Z\",\"state\":\"Completed\",\"version\":\"wfbqxo\",\"accessEndpoint\":\"vij\",\"endpointsConfiguration\":{\"workflow\":{\"outgoingIpAddresses\":[{},{}],\"accessEndpointIpAddresses\":[{},{},{},{}]},\"connector\":{\"outgoingIpAddresses\":[{}],\"accessEndpointIpAddresses\":[{},{}]}},\"accessControl\":{\"triggers\":{\"allowedCallerIpAddresses\":[{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"oezptngrpzv\":{}}}},\"contents\":{\"allowedCallerIpAddresses\":[{},{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"aczcd\":{},\"omrpucytj\":{}}}},\"actions\":{\"allowedCallerIpAddresses\":[{}],\"openAuthenticationPolicies\":{\"policies\":{\"jnxdyskyrhsijxml\":{},\"uymfxjs\":{},\"wmbdtfet\":{},\"gzybp\":{}}}},\"workflowManagement\":{\"allowedCallerIpAddresses\":[{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"o\":{},\"mq\":{}}}}},\"sku\":{\"name\":\"Free\",\"plan\":{\"id\":\"szqkrsnxuez\",\"name\":\"bqadtv\",\"type\":\"ugtmtgk\"}},\"integrationAccount\":{\"id\":\"cxxejplphkiy\",\"name\":\"p\",\"type\":\"odvzjkz\"},\"integrationServiceEnvironment\":{\"id\":\"xdpop\",\"name\":\"b\",\"type\":\"sncxbkwmhjqak\"},\"definition\":\"databc\",\"parameters\":{\"urilqcsq\":{\"type\":\"SecureString\",\"value\":\"datalmm\",\"metadata\":\"datagtwqmtyfqutm\",\"description\":\"bis\"},\"gvpqzvtgwlzqcy\":{\"type\":\"Int\",\"value\":\"databufo\",\"metadata\":\"datackbizqqajs\",\"description\":\"uwo\"},\"bvnhlwfd\":{\"type\":\"Float\",\"value\":\"datainb\",\"metadata\":\"dataekjbljfk\",\"description\":\"bnnmzzcbc\"}}},\"identity\":{\"type\":\"None\",\"tenantId\":\"98c5243e-ab04-4fae-a7ff-b65a16392972\",\"principalId\":\"1e001366-7232-4891-87ad-e84d6202cf26\",\"userAssignedIdentities\":{\"u\":{\"principalId\":\"kyoasxakbqbw\",\"clientId\":\"nfaumqkgccld\"},\"hfcdhbcr\":{\"principalId\":\"weeegszw\",\"clientId\":\"ryfap\"},\"nmcqudfxh\":{\"principalId\":\"qdszuxha\",\"clientId\":\"ywtyknfrhbknrag\"},\"uuvxklaruf\":{\"principalId\":\"drzegmluebzoujh\",\"clientId\":\"l\"}}},\"location\":\"fordzwbskfexgnf\",\"tags\":{\"pmowlsrxytev\":\"ojzlia\",\"nzzhyl\":\"qxpmfhehtrpql\"},\"id\":\"zuxqqrmck\",\"name\":\"m\",\"type\":\"sueutby\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogicManager manager = LogicManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Workflow response = manager.workflows()
            .getByResourceGroupWithResponse("zzeqd", "xurbj", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("fordzwbskfexgnf", response.location());
        Assertions.assertEquals("ojzlia", response.tags().get("pmowlsrxytev"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
        Assertions.assertEquals(WorkflowState.COMPLETED, response.state());
        Assertions.assertEquals("cxxejplphkiy", response.integrationAccount().id());
        Assertions.assertEquals("xdpop", response.integrationServiceEnvironment().id());
        Assertions.assertEquals(ParameterType.SECURE_STRING, response.parameters().get("urilqcsq").type());
        Assertions.assertEquals("bis", response.parameters().get("urilqcsq").description());
    }
}
