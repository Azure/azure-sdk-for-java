// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.logic.models.Workflow;
import com.azure.resourcemanager.logic.models.WorkflowState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WorkflowsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Created\",\"createdTime\":\"2021-07-21T06:13:34Z\",\"changedTime\":\"2021-09-17T09:38:18Z\",\"state\":\"Disabled\",\"version\":\"qhr\",\"accessEndpoint\":\"xk\",\"endpointsConfiguration\":{},\"accessControl\":{},\"sku\":{\"name\":\"Standard\"},\"integrationAccount\":{\"id\":\"byqjfkakfqfrkem\",\"name\":\"ldudxjascowv\",\"type\":\"jkpdxphlkksnm\"},\"integrationServiceEnvironment\":{\"id\":\"yfijdkzuqnws\",\"name\":\"huqol\",\"type\":\"hluqwquls\"},\"definition\":\"datarjb\",\"parameters\":{}},\"identity\":{\"type\":\"SystemAssigned\",\"tenantId\":\"7338e059-5507-4080-b27d-f139e74fd08a\",\"principalId\":\"7583e10f-614a-4c3d-859f-3ae197736eac\",\"userAssignedIdentities\":{}},\"location\":\"zvqqugdrftbcvexr\",\"tags\":{\"khyxvrqtvbcz\":\"uowtljvfwhrea\",\"pjpfseykgs\":\"ulmdgglm\",\"lkvec\":\"ngpszngafpg\",\"dyedmzrgjfo\":\"ujcngo\"},\"id\":\"nub\",\"name\":\"oitpkpztrgdgx\",\"type\":\"coqra\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        LogicManager manager =
            LogicManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Workflow response =
            manager
                .workflows()
                .getByResourceGroupWithResponse("wxh", "pejtl", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("zvqqugdrftbcvexr", response.location());
        Assertions.assertEquals("uowtljvfwhrea", response.tags().get("khyxvrqtvbcz"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals(WorkflowState.DISABLED, response.state());
        Assertions.assertEquals("byqjfkakfqfrkem", response.integrationAccount().id());
        Assertions.assertEquals("yfijdkzuqnws", response.integrationServiceEnvironment().id());
    }
}
