// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logic.models.DayOfWeek;
import com.azure.resourcemanager.logic.models.DaysOfWeek;
import com.azure.resourcemanager.logic.models.RecurrenceFrequency;
import com.azure.resourcemanager.logic.models.RecurrenceSchedule;
import com.azure.resourcemanager.logic.models.RecurrenceScheduleOccurrence;
import com.azure.resourcemanager.logic.models.WorkflowTriggerRecurrence;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WorkflowTriggerRecurrenceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkflowTriggerRecurrence model = BinaryData.fromString(
            "{\"frequency\":\"Week\",\"interval\":1187892327,\"startTime\":\"ukzclewyhmlwpaz\",\"endTime\":\"pofncck\",\"timeZone\":\"fz\",\"schedule\":{\"minutes\":[1032331086,722524915],\"hours\":[397594857],\"weekDays\":[\"Thursday\"],\"monthDays\":[1280631673],\"monthlyOccurrences\":[{\"day\":\"Friday\",\"occurrence\":1415965286}]}}")
            .toObject(WorkflowTriggerRecurrence.class);
        Assertions.assertEquals(RecurrenceFrequency.WEEK, model.frequency());
        Assertions.assertEquals(1187892327, model.interval());
        Assertions.assertEquals("ukzclewyhmlwpaz", model.startTime());
        Assertions.assertEquals("pofncck", model.endTime());
        Assertions.assertEquals("fz", model.timeZone());
        Assertions.assertEquals(1032331086, model.schedule().minutes().get(0));
        Assertions.assertEquals(397594857, model.schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.THURSDAY, model.schedule().weekDays().get(0));
        Assertions.assertEquals(1280631673, model.schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1415965286, model.schedule().monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkflowTriggerRecurrence model = new WorkflowTriggerRecurrence().withFrequency(RecurrenceFrequency.WEEK)
            .withInterval(1187892327)
            .withStartTime("ukzclewyhmlwpaz")
            .withEndTime("pofncck")
            .withTimeZone("fz")
            .withSchedule(new RecurrenceSchedule().withMinutes(Arrays.asList(1032331086, 722524915))
                .withHours(Arrays.asList(397594857))
                .withWeekDays(Arrays.asList(DaysOfWeek.THURSDAY))
                .withMonthDays(Arrays.asList(1280631673))
                .withMonthlyOccurrences(Arrays
                    .asList(new RecurrenceScheduleOccurrence().withDay(DayOfWeek.FRIDAY).withOccurrence(1415965286))));
        model = BinaryData.fromObject(model).toObject(WorkflowTriggerRecurrence.class);
        Assertions.assertEquals(RecurrenceFrequency.WEEK, model.frequency());
        Assertions.assertEquals(1187892327, model.interval());
        Assertions.assertEquals("ukzclewyhmlwpaz", model.startTime());
        Assertions.assertEquals("pofncck", model.endTime());
        Assertions.assertEquals("fz", model.timeZone());
        Assertions.assertEquals(1032331086, model.schedule().minutes().get(0));
        Assertions.assertEquals(397594857, model.schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.THURSDAY, model.schedule().weekDays().get(0));
        Assertions.assertEquals(1280631673, model.schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1415965286, model.schedule().monthlyOccurrences().get(0).occurrence());
    }
}
