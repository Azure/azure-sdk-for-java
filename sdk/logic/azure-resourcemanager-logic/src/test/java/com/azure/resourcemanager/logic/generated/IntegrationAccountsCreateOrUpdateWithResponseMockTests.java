// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.IntegrationAccount;
import com.azure.resourcemanager.logic.models.IntegrationAccountSku;
import com.azure.resourcemanager.logic.models.IntegrationAccountSkuName;
import com.azure.resourcemanager.logic.models.ResourceReference;
import com.azure.resourcemanager.logic.models.WorkflowState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IntegrationAccountsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"integrationServiceEnvironment\":{\"id\":\"e\",\"name\":\"wcqrvtwvy\",\"type\":\"rrxhxqpmzznmns\"},\"state\":\"NotSpecified\"},\"sku\":{\"name\":\"Basic\"},\"location\":\"vbwew\",\"tags\":{\"lp\":\"eiehwma\"},\"id\":\"ag\",\"name\":\"m\",\"type\":\"beneqapll\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogicManager manager = LogicManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IntegrationAccount response = manager.integrationAccounts()
            .define("jxwcojjmps")
            .withRegion("raqesk")
            .withExistingResourceGroup("ybfnx")
            .withTags(mapOf("yzaalpwwc", "c", "gsswijqsndqjbdtc", "i", "egdlcuedrmq", "xwqmund", "dpjuf", "wkutbtrhry"))
            .withSku(new IntegrationAccountSku().withName(IntegrationAccountSkuName.STANDARD))
            .withIntegrationServiceEnvironment(new ResourceReference().withId("cnuozjg"))
            .withState(WorkflowState.DISABLED)
            .create();

        Assertions.assertEquals("vbwew", response.location());
        Assertions.assertEquals("eiehwma", response.tags().get("lp"));
        Assertions.assertEquals(IntegrationAccountSkuName.BASIC, response.sku().name());
        Assertions.assertEquals("e", response.integrationServiceEnvironment().id());
        Assertions.assertEquals(WorkflowState.NOT_SPECIFIED, response.state());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
