// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.AgreementContent;
import com.azure.resourcemanager.logic.models.AgreementType;
import com.azure.resourcemanager.logic.models.BusinessIdentity;
import com.azure.resourcemanager.logic.models.IntegrationAccountAgreement;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IntegrationAccountAgreementsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"createdTime\":\"2021-03-27T07:21:58Z\",\"changedTime\":\"2021-04-11T17:43:47Z\",\"metadata\":\"datamicbigwcdgzseznu\",\"agreementType\":\"AS2\",\"hostPartner\":\"euairaabmdlqjb\",\"guestPartner\":\"dp\",\"hostIdentity\":{\"qualifier\":\"ixlhupm\",\"value\":\"mihzbdnpxp\"},\"guestIdentity\":{\"qualifier\":\"cdpreyxelyicg\",\"value\":\"flr\"},\"content\":{}},\"location\":\"jyg\",\"tags\":{\"vqcpdwjgquxw\":\"xrkbhammgmqfmef\"},\"id\":\"ysla\",\"name\":\"dkdcdjhunhg\",\"type\":\"cgawnrrnquo\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        LogicManager manager =
            LogicManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        IntegrationAccountAgreement response =
            manager
                .integrationAccountAgreements()
                .define("frhjulrsulwzp")
                .withRegion("qaboohxbms")
                .withExistingIntegrationAccount("fjjnnuxxr", "kmhmnulwempdc")
                .withAgreementType(AgreementType.EDIFACT)
                .withHostPartner("zotfriyrgkoek")
                .withGuestPartner("zwx")
                .withHostIdentity(new BusinessIdentity().withQualifier("yxhighc").withValue("xb"))
                .withGuestIdentity(new BusinessIdentity().withQualifier("molpcqyde").withValue("kvskiczdfrjei"))
                .withContent(new AgreementContent())
                .withTags(mapOf("qaeo", "qsxrmdvewu", "hhdau", "pjhgejkb", "exbkhx", "ghoox"))
                .withMetadata("datawmh")
                .create();

        Assertions.assertEquals("jyg", response.location());
        Assertions.assertEquals("xrkbhammgmqfmef", response.tags().get("vqcpdwjgquxw"));
        Assertions.assertEquals(AgreementType.AS2, response.agreementType());
        Assertions.assertEquals("euairaabmdlqjb", response.hostPartner());
        Assertions.assertEquals("dp", response.guestPartner());
        Assertions.assertEquals("ixlhupm", response.hostIdentity().qualifier());
        Assertions.assertEquals("mihzbdnpxp", response.hostIdentity().value());
        Assertions.assertEquals("cdpreyxelyicg", response.guestIdentity().qualifier());
        Assertions.assertEquals("flr", response.guestIdentity().value());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
