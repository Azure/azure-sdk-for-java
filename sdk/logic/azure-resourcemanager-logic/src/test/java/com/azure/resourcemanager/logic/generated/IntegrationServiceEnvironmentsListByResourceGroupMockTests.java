// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironment;
import com.azure.resourcemanager.logic.models.IntegrationServiceEnvironmentSkuName;
import com.azure.resourcemanager.logic.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.logic.models.WorkflowProvisioningState;
import com.azure.resourcemanager.logic.models.WorkflowState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IntegrationServiceEnvironmentsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Completed\",\"state\":\"Enabled\",\"integrationServiceEnvironmentId\":\"evzgjypanh\",\"endpointsConfiguration\":{},\"networkConfiguration\":{\"virtualNetworkAddressSpace\":\"zetwwzjwotnx\",\"subnets\":[]},\"encryptionConfiguration\":{}},\"sku\":{\"name\":\"Premium\",\"capacity\":1406765711},\"identity\":{\"type\":\"None\",\"tenantId\":\"c498f1fd-8b59-430f-8902-a6a3df4875dc\",\"principalId\":\"573f55da-41f1-40a3-9a1b-7fe1b4923369\",\"userAssignedIdentities\":{}},\"location\":\"snhpcselqx\",\"tags\":{\"rl\":\"pqibukklv\",\"vfqbqna\":\"mlccmetjscz\"},\"id\":\"dsyenzsieuscpl\",\"name\":\"yvdgxlyzk\",\"type\":\"itdshezsvkolru\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        LogicManager manager =
            LogicManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<IntegrationServiceEnvironment> response =
            manager
                .integrationServiceEnvironments()
                .listByResourceGroup("ft", 294215525, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("snhpcselqx", response.iterator().next().location());
        Assertions.assertEquals("pqibukklv", response.iterator().next().tags().get("rl"));
        Assertions
            .assertEquals(
                WorkflowProvisioningState.COMPLETED, response.iterator().next().properties().provisioningState());
        Assertions.assertEquals(WorkflowState.ENABLED, response.iterator().next().properties().state());
        Assertions
            .assertEquals("evzgjypanh", response.iterator().next().properties().integrationServiceEnvironmentId());
        Assertions
            .assertEquals(
                "zetwwzjwotnx",
                response.iterator().next().properties().networkConfiguration().virtualNetworkAddressSpace());
        Assertions.assertEquals(IntegrationServiceEnvironmentSkuName.PREMIUM, response.iterator().next().sku().name());
        Assertions.assertEquals(1406765711, response.iterator().next().sku().capacity());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.iterator().next().identity().type());
    }
}
