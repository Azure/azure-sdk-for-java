// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logic.fluent.models.IntegrationAccountSessionInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationAccountSessionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationAccountSessionInner model = BinaryData.fromString(
            "{\"properties\":{\"createdTime\":\"2021-01-30T00:23:26Z\",\"changedTime\":\"2021-08-04T23:09:48Z\",\"content\":\"datalrjvmtyg\"},\"location\":\"bmzyospsps\",\"tags\":{\"ogtieyujtvczkcny\":\"fkyjpmspbpssdfpp\",\"vxlx\":\"rxmunjdxvgln\"},\"id\":\"aglqivbgkcvkh\",\"name\":\"zvuqdflvon\",\"type\":\"yp\"}")
            .toObject(IntegrationAccountSessionInner.class);
        Assertions.assertEquals("bmzyospsps", model.location());
        Assertions.assertEquals("fkyjpmspbpssdfpp", model.tags().get("ogtieyujtvczkcny"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationAccountSessionInner model = new IntegrationAccountSessionInner().withLocation("bmzyospsps")
            .withTags(mapOf("ogtieyujtvczkcny", "fkyjpmspbpssdfpp", "vxlx", "rxmunjdxvgln"))
            .withContent("datalrjvmtyg");
        model = BinaryData.fromObject(model).toObject(IntegrationAccountSessionInner.class);
        Assertions.assertEquals("bmzyospsps", model.location());
        Assertions.assertEquals("fkyjpmspbpssdfpp", model.tags().get("ogtieyujtvczkcny"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
