// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logic.fluent.models.IntegrationAccountSessionInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationAccountSessionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationAccountSessionInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"createdTime\":\"2021-10-22T16:19:35Z\",\"changedTime\":\"2020-12-25T00:01:02Z\",\"content\":\"datajtxvzflbqvgaq\"},\"location\":\"lgafcqusrdve\",\"tags\":{\"uzhyrmewipmvekdx\":\"sdtutnwlduyc\",\"zhhzjhfjmhvvmu\":\"kuqgsjjxundxgket\",\"yihsasbhudypohyu\":\"gpmuneqsxvmhfbuz\"},\"id\":\"ms\",\"name\":\"ynsqyrpfoobr\",\"type\":\"ttymsjny\"}")
                .toObject(IntegrationAccountSessionInner.class);
        Assertions.assertEquals("lgafcqusrdve", model.location());
        Assertions.assertEquals("sdtutnwlduyc", model.tags().get("uzhyrmewipmvekdx"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationAccountSessionInner model =
            new IntegrationAccountSessionInner()
                .withLocation("lgafcqusrdve")
                .withTags(
                    mapOf(
                        "uzhyrmewipmvekdx",
                        "sdtutnwlduyc",
                        "zhhzjhfjmhvvmu",
                        "kuqgsjjxundxgket",
                        "yihsasbhudypohyu",
                        "gpmuneqsxvmhfbuz"))
                .withContent("datajtxvzflbqvgaq");
        model = BinaryData.fromObject(model).toObject(IntegrationAccountSessionInner.class);
        Assertions.assertEquals("lgafcqusrdve", model.location());
        Assertions.assertEquals("sdtutnwlduyc", model.tags().get("uzhyrmewipmvekdx"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
