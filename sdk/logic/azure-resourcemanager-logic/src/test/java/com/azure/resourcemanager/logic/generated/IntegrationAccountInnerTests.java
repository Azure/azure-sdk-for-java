// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logic.fluent.models.IntegrationAccountInner;
import com.azure.resourcemanager.logic.models.IntegrationAccountSku;
import com.azure.resourcemanager.logic.models.IntegrationAccountSkuName;
import com.azure.resourcemanager.logic.models.ResourceReference;
import com.azure.resourcemanager.logic.models.WorkflowState;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationAccountInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationAccountInner model = BinaryData.fromString(
            "{\"properties\":{\"integrationServiceEnvironment\":{\"id\":\"biwkojgcyzt\",\"name\":\"mznbaeqphch\",\"type\":\"rn\"},\"state\":\"Disabled\"},\"sku\":{\"name\":\"Basic\"},\"location\":\"uwrykqgaifmvikl\",\"tags\":{\"vdsrhnjiv\":\"vkhbejdznx\"},\"id\":\"lvtno\",\"name\":\"qfzgemjdftul\",\"type\":\"ltducea\"}")
            .toObject(IntegrationAccountInner.class);
        Assertions.assertEquals("uwrykqgaifmvikl", model.location());
        Assertions.assertEquals("vkhbejdznx", model.tags().get("vdsrhnjiv"));
        Assertions.assertEquals(IntegrationAccountSkuName.BASIC, model.sku().name());
        Assertions.assertEquals("biwkojgcyzt", model.integrationServiceEnvironment().id());
        Assertions.assertEquals(WorkflowState.DISABLED, model.state());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationAccountInner model = new IntegrationAccountInner().withLocation("uwrykqgaifmvikl")
            .withTags(mapOf("vdsrhnjiv", "vkhbejdznx"))
            .withSku(new IntegrationAccountSku().withName(IntegrationAccountSkuName.BASIC))
            .withIntegrationServiceEnvironment(new ResourceReference().withId("biwkojgcyzt"))
            .withState(WorkflowState.DISABLED);
        model = BinaryData.fromObject(model).toObject(IntegrationAccountInner.class);
        Assertions.assertEquals("uwrykqgaifmvikl", model.location());
        Assertions.assertEquals("vkhbejdznx", model.tags().get("vdsrhnjiv"));
        Assertions.assertEquals(IntegrationAccountSkuName.BASIC, model.sku().name());
        Assertions.assertEquals("biwkojgcyzt", model.integrationServiceEnvironment().id());
        Assertions.assertEquals(WorkflowState.DISABLED, model.state());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
