// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.IntegrationAccountSchema;
import com.azure.resourcemanager.logic.models.SchemaType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IntegrationAccountSchemasCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"schemaType\":\"NotSpecified\",\"targetNamespace\":\"ykezoxhazafmqmb\",\"documentName\":\"pciammpeakdhebz\",\"fileName\":\"qggjxklojdydh\",\"createdTime\":\"2021-11-01T09:25:01Z\",\"changedTime\":\"2021-05-21T20:50:11Z\",\"metadata\":\"dataisxgjihnxoxjghum\",\"content\":\"tbhogllvfe\",\"contentType\":\"cjuzzzil\",\"contentLink\":{\"uri\":\"rnovbgdba\",\"contentVersion\":\"nxsyh\",\"contentSize\":3351397072115102659,\"contentHash\":{\"algorithm\":\"dmzejcp\",\"value\":\"qjinrymzlqircivx\"},\"metadata\":\"datazmvgxqtkc\"}},\"location\":\"nyikyexwfsi\",\"tags\":{\"ztns\":\"elzuvd\"},\"id\":\"tesq\",\"name\":\"klzyhavtivefsrlt\",\"type\":\"xhpntewv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogicManager manager = LogicManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IntegrationAccountSchema response = manager.integrationAccountSchemas()
            .define("es")
            .withRegion("kgyuviqeskindgm")
            .withExistingIntegrationAccount("ozjzhixcivjoka", "jjpclm")
            .withSchemaType(SchemaType.NOT_SPECIFIED)
            .withTags(mapOf("huliflxrnsyvmue", "uvyuzzw", "rx", "kwvcogqjimxcth", "vjez", "kinutdhbmizb"))
            .withTargetNamespace("hfcnceo")
            .withDocumentName("irbshy")
            .withFileName("khe")
            .withMetadata("datazcpoydaifxmbxqzc")
            .withContent("cmlp")
            .withContentType("pzpldaoiidxknsq")
            .create();

        Assertions.assertEquals("nyikyexwfsi", response.location());
        Assertions.assertEquals("elzuvd", response.tags().get("ztns"));
        Assertions.assertEquals(SchemaType.NOT_SPECIFIED, response.schemaType());
        Assertions.assertEquals("ykezoxhazafmqmb", response.targetNamespace());
        Assertions.assertEquals("pciammpeakdhebz", response.documentName());
        Assertions.assertEquals("qggjxklojdydh", response.fileName());
        Assertions.assertEquals("tbhogllvfe", response.content());
        Assertions.assertEquals("cjuzzzil", response.contentType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
