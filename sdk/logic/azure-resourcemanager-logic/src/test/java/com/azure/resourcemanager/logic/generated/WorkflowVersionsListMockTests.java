// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.ParameterType;
import com.azure.resourcemanager.logic.models.WorkflowState;
import com.azure.resourcemanager.logic.models.WorkflowVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkflowVersionsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Created\",\"createdTime\":\"2021-01-26T20:34:54Z\",\"changedTime\":\"2021-05-10T23:21:19Z\",\"state\":\"Disabled\",\"version\":\"qsv\",\"accessEndpoint\":\"ocpp\",\"endpointsConfiguration\":{\"workflow\":{\"outgoingIpAddresses\":[{},{},{}],\"accessEndpointIpAddresses\":[{},{},{}]},\"connector\":{\"outgoingIpAddresses\":[{}],\"accessEndpointIpAddresses\":[{},{}]}},\"accessControl\":{\"triggers\":{\"allowedCallerIpAddresses\":[{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"siritpqqpynrlnou\":{},\"evizzcjnfy\":{}}}},\"contents\":{\"allowedCallerIpAddresses\":[{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"n\":{},\"qnumpna\":{}}}},\"actions\":{\"allowedCallerIpAddresses\":[{},{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"eafpvbsl\":{}}}},\"workflowManagement\":{\"allowedCallerIpAddresses\":[{}],\"openAuthenticationPolicies\":{\"policies\":{\"hnbofe\":{},\"cctppbgzfmuyl\":{},\"kbvvw\":{},\"ftrqsobu\":{}}}}},\"sku\":{\"name\":\"Shared\",\"plan\":{\"id\":\"jdxlbsnskc\",\"name\":\"fxtknywx\",\"type\":\"e\"}},\"integrationAccount\":{\"id\":\"ccbvchozkmi\",\"name\":\"xdnugbisfnbtqd\",\"type\":\"w\"},\"definition\":\"datadroi\",\"parameters\":{\"gxnlaurviyntcbl\":{\"type\":\"SecureObject\",\"value\":\"datakisyhnfqnekpxddd\",\"metadata\":\"datahfgdjahn\",\"description\":\"ktkhlqdxjdolobtz\"},\"znrjws\":{\"type\":\"Int\",\"value\":\"dataqtfbjkbfktelbl\",\"metadata\":\"datangrkjbdaxttoe\",\"description\":\"ohipijfywmmqz\"}}},\"location\":\"cktcwgnkxjd\",\"tags\":{\"waiabfntrmkeawmf\":\"iundzawotpiakle\",\"wd\":\"udcgdljbn\",\"giuzbpgskgpws\":\"fn\",\"nvxpz\":\"xh\"},\"id\":\"tiktgmdlwefsti\",\"name\":\"emakgzcmbgwllnm\",\"type\":\"dflckumjjpx\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogicManager manager = LogicManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<WorkflowVersion> response
            = manager.workflowVersions().list("ruwqbe", "dzruuscbs", 1166087847, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("cktcwgnkxjd", response.iterator().next().location());
        Assertions.assertEquals("iundzawotpiakle", response.iterator().next().tags().get("waiabfntrmkeawmf"));
        Assertions.assertEquals(WorkflowState.DISABLED, response.iterator().next().state());
        Assertions.assertEquals("ccbvchozkmi", response.iterator().next().integrationAccount().id());
        Assertions.assertEquals(ParameterType.SECURE_OBJECT,
            response.iterator().next().parameters().get("gxnlaurviyntcbl").type());
        Assertions.assertEquals("ktkhlqdxjdolobtz",
            response.iterator().next().parameters().get("gxnlaurviyntcbl").description());
    }
}
