// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.WorkflowTriggerCallbackUrl;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IntegrationAccountAssembliesListContentCallbackUrlWithResponseMockTests {
    @Test
    public void testListContentCallbackUrlWithResponse() throws Exception {
        String responseStr
            = "{\"value\":\"nf\",\"method\":\"gbym\",\"basePath\":\"fhkxcplhq\",\"relativePath\":\"wqpuyrpslueacnf\",\"relativePathParameters\":[\"pjqfupoamc\",\"dzqxkgr\"],\"queries\":{\"api-version\":\"qipskpynrs\",\"sp\":\"dcfwutah\",\"sv\":\"i\",\"sig\":\"dxsscirgqjn\",\"se\":\"eh\"}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogicManager manager = LogicManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkflowTriggerCallbackUrl response = manager.integrationAccountAssemblies()
            .listContentCallbackUrlWithResponse("qbruymapjnfofxir", "fmvydja", "zstuhlw",
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("pjqfupoamc", response.relativePathParameters().get(0));
        Assertions.assertEquals("qipskpynrs", response.queries().apiVersion());
        Assertions.assertEquals("dcfwutah", response.queries().sp());
        Assertions.assertEquals("i", response.queries().sv());
        Assertions.assertEquals("dxsscirgqjn", response.queries().sig());
        Assertions.assertEquals("eh", response.queries().se());
    }
}
