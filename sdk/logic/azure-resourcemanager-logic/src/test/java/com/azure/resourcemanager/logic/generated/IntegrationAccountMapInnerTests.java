// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logic.fluent.models.IntegrationAccountMapInner;
import com.azure.resourcemanager.logic.models.IntegrationAccountMapPropertiesParametersSchema;
import com.azure.resourcemanager.logic.models.MapType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationAccountMapInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationAccountMapInner model = BinaryData.fromString(
            "{\"properties\":{\"mapType\":\"Xslt\",\"parametersSchema\":{\"ref\":\"na\"},\"createdTime\":\"2021-02-08T20:51:05Z\",\"changedTime\":\"2021-01-07T13:26:47Z\",\"content\":\"jid\",\"contentType\":\"syxkyxvxevblb\",\"contentLink\":{\"uri\":\"nljlageuaulx\",\"contentVersion\":\"smjbnkppxyn\",\"contentSize\":8200427919923501571,\"contentHash\":{\"algorithm\":\"eizzgwk\",\"value\":\"srmffeycxcktpiym\"},\"metadata\":\"datateeammxqiekkkzd\"},\"metadata\":\"datatkgdojbmxva\"},\"location\":\"refdee\",\"tags\":{\"s\":\"cuijpxt\",\"wsawddjibabxvi\":\"wprtu\",\"tfgle\":\"itvtzeexavo\"},\"id\":\"dmdqb\",\"name\":\"pypqtgsfj\",\"type\":\"cbslhhx\"}")
            .toObject(IntegrationAccountMapInner.class);
        Assertions.assertEquals("refdee", model.location());
        Assertions.assertEquals("cuijpxt", model.tags().get("s"));
        Assertions.assertEquals(MapType.XSLT, model.mapType());
        Assertions.assertEquals("na", model.parametersSchema().ref());
        Assertions.assertEquals("jid", model.content());
        Assertions.assertEquals("syxkyxvxevblb", model.contentType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationAccountMapInner model = new IntegrationAccountMapInner().withLocation("refdee")
            .withTags(mapOf("s", "cuijpxt", "wsawddjibabxvi", "wprtu", "tfgle", "itvtzeexavo"))
            .withMapType(MapType.XSLT)
            .withParametersSchema(new IntegrationAccountMapPropertiesParametersSchema().withRef("na"))
            .withContent("jid")
            .withContentType("syxkyxvxevblb")
            .withMetadata("datatkgdojbmxva");
        model = BinaryData.fromObject(model).toObject(IntegrationAccountMapInner.class);
        Assertions.assertEquals("refdee", model.location());
        Assertions.assertEquals("cuijpxt", model.tags().get("s"));
        Assertions.assertEquals(MapType.XSLT, model.mapType());
        Assertions.assertEquals("na", model.parametersSchema().ref());
        Assertions.assertEquals("jid", model.content());
        Assertions.assertEquals("syxkyxvxevblb", model.contentType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
