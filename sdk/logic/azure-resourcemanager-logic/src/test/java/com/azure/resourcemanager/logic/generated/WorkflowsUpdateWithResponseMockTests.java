// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.logic.models.ParameterType;
import com.azure.resourcemanager.logic.models.Workflow;
import com.azure.resourcemanager.logic.models.WorkflowState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkflowsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Running\",\"createdTime\":\"2021-02-21T00:10Z\",\"changedTime\":\"2021-05-17T22:35:59Z\",\"state\":\"Disabled\",\"version\":\"sznmjtanrirrnqlo\",\"accessEndpoint\":\"s\",\"endpointsConfiguration\":{\"workflow\":{\"outgoingIpAddresses\":[{}],\"accessEndpointIpAddresses\":[{},{}]},\"connector\":{\"outgoingIpAddresses\":[{},{},{}],\"accessEndpointIpAddresses\":[{},{}]}},\"accessControl\":{\"triggers\":{\"allowedCallerIpAddresses\":[{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"ipgvfchzcpv\":{}}}},\"contents\":{\"allowedCallerIpAddresses\":[{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"zpfgkslvbrxlsbg\":{}}}},\"actions\":{\"allowedCallerIpAddresses\":[{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"irneopxd\":{},\"hcfs\":{}}}},\"workflowManagement\":{\"allowedCallerIpAddresses\":[{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"absmrfxucgv\":{},\"gwvmhbiziijd\":{}}}}},\"sku\":{\"name\":\"Standard\",\"plan\":{\"id\":\"boatvsfyxdfe\",\"name\":\"nawnqyagfxacoj\",\"type\":\"raxor\"}},\"integrationAccount\":{\"id\":\"oyngxogqvwchyn\",\"name\":\"tn\",\"type\":\"twmawypkpbmi\"},\"integrationServiceEnvironment\":{\"id\":\"vcjspjpmtsgvviz\",\"name\":\"gtbmluyy\",\"type\":\"zvqpnjqpwxf\"},\"definition\":\"dataijpayvlnzwicqopw\",\"parameters\":{\"zhydjkmxb\":{\"type\":\"String\",\"value\":\"datag\",\"metadata\":\"datah\",\"description\":\"yue\"},\"scugdyfyjeexmlk\":{\"type\":\"Float\",\"value\":\"dataotlfzbjs\",\"metadata\":\"dataqkbs\",\"description\":\"coaysargqkga\"},\"mnxcca\":{\"type\":\"Array\",\"value\":\"datajdgojavqe\",\"metadata\":\"datakkva\",\"description\":\"yowjp\"},\"vioc\":{\"type\":\"String\",\"value\":\"dataokhmkqyfatddwfhf\",\"metadata\":\"dataatoilmwz\",\"description\":\"aglwdntjfnmxzuk\"}}},\"identity\":{\"type\":\"UserAssigned\",\"tenantId\":\"4769f0ef-9883-458c-9bb0-2a5aa85aeacf\",\"principalId\":\"8102c417-8bd4-4c4b-9de6-46bd3ae10b86\",\"userAssignedIdentities\":{\"bluutmfimloz\":{\"principalId\":\"u\",\"clientId\":\"cnqfwob\"},\"aonmfnfatwio\":{\"principalId\":\"dxjirfye\",\"clientId\":\"jrdcgeormxipwcq\"},\"hotjcgdpqkfxdq\":{\"principalId\":\"hasqielh\",\"clientId\":\"kheim\"}}},\"location\":\"dvrglql\",\"tags\":{\"qo\":\"ese\"},\"id\":\"mjuqq\",\"name\":\"hmzlet\",\"type\":\"ckjuwkkvarff\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogicManager manager = LogicManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Workflow response = manager.workflows()
            .updateWithResponse("lzgkzhbnbnjpie", "nrivsiwwsohsuh", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("dvrglql", response.location());
        Assertions.assertEquals("ese", response.tags().get("qo"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals(WorkflowState.DISABLED, response.state());
        Assertions.assertEquals("oyngxogqvwchyn", response.integrationAccount().id());
        Assertions.assertEquals("vcjspjpmtsgvviz", response.integrationServiceEnvironment().id());
        Assertions.assertEquals(ParameterType.STRING, response.parameters().get("zhydjkmxb").type());
        Assertions.assertEquals("yue", response.parameters().get("zhydjkmxb").description());
    }
}
