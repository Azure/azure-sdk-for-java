// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.AgreementType;
import com.azure.resourcemanager.logic.models.IntegrationAccountAgreement;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IntegrationAccountAgreementsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"createdTime\":\"2021-10-17T19:58:15Z\",\"changedTime\":\"2021-04-09T05:22:51Z\",\"metadata\":\"datah\",\"agreementType\":\"NotSpecified\",\"hostPartner\":\"ifkwdvbtbrekqhs\",\"guestPartner\":\"htfpwpqb\",\"hostIdentity\":{\"qualifier\":\"ejuwyqwdqigmghgi\",\"value\":\"z\"},\"guestIdentity\":{\"qualifier\":\"xlujkhnjcm\",\"value\":\"nkfm\"},\"content\":{}},\"location\":\"twmlmhjnqtqeah\",\"tags\":{\"jhhkv\":\"vragpokddx\",\"tbkewkqynspg\":\"uavt\",\"qokmyrljial\":\"voffbkkwvdxae\",\"brqlpbcjtrpz\":\"bn\"},\"id\":\"yudivbxnhsqeaeo\",\"name\":\"qelwgdhuruzytza\",\"type\":\"ogatmoljiy\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        LogicManager manager =
            LogicManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<IntegrationAccountAgreement> response =
            manager
                .integrationAccountAgreements()
                .list("exzgpmnmabedd", "ilwgdfpfqfpcvstc", 520425903, "qrvwerfwxbsm", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("twmlmhjnqtqeah", response.iterator().next().location());
        Assertions.assertEquals("vragpokddx", response.iterator().next().tags().get("jhhkv"));
        Assertions.assertEquals(AgreementType.NOT_SPECIFIED, response.iterator().next().agreementType());
        Assertions.assertEquals("ifkwdvbtbrekqhs", response.iterator().next().hostPartner());
        Assertions.assertEquals("htfpwpqb", response.iterator().next().guestPartner());
        Assertions.assertEquals("ejuwyqwdqigmghgi", response.iterator().next().hostIdentity().qualifier());
        Assertions.assertEquals("z", response.iterator().next().hostIdentity().value());
        Assertions.assertEquals("xlujkhnjcm", response.iterator().next().guestIdentity().qualifier());
        Assertions.assertEquals("nkfm", response.iterator().next().guestIdentity().value());
    }
}
