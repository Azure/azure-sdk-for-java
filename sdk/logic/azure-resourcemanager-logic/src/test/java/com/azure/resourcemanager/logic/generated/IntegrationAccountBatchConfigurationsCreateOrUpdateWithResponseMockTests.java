// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.BatchConfiguration;
import com.azure.resourcemanager.logic.models.BatchConfigurationProperties;
import com.azure.resourcemanager.logic.models.BatchReleaseCriteria;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IntegrationAccountBatchConfigurationsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"batchGroupName\":\"btmkekxpkzwaq\",\"releaseCriteria\":{\"messageCount\":1131906752,\"batchSize\":1256995489},\"createdTime\":\"2021-07-03T05:53:58Z\",\"changedTime\":\"2021-07-04T03:41:28Z\",\"metadata\":\"datap\"},\"location\":\"vf\",\"tags\":{\"gmsfepxyi\":\"sztekxby\",\"fowxwyovcxjsgbi\":\"pqadagrhrdicxdwy\"},\"id\":\"cu\",\"name\":\"dveksbuhoduch\",\"type\":\"lscrdpibfdyjduss\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        LogicManager manager =
            LogicManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        BatchConfiguration response =
            manager
                .integrationAccountBatchConfigurations()
                .define("eituugedhfpjs")
                .withRegion("ledjcustbvtqigd")
                .withExistingIntegrationAccount("pqrtvaoznqni", "iezeagm")
                .withProperties(
                    new BatchConfigurationProperties()
                        .withCreatedTime(OffsetDateTime.parse("2021-10-10T19:21:12Z"))
                        .withChangedTime(OffsetDateTime.parse("2021-08-11T20:54:24Z"))
                        .withMetadata("dataebfsy")
                        .withBatchGroupName("lzmb")
                        .withReleaseCriteria(
                            new BatchReleaseCriteria().withMessageCount(1262532817).withBatchSize(587613619)))
                .withTags(mapOf("zsxezppkkwaae", "sgeafgfosehx", "fjlpze", "k"))
                .create();

        Assertions.assertEquals("vf", response.location());
        Assertions.assertEquals("sztekxby", response.tags().get("gmsfepxyi"));
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-03T05:53:58Z"), response.properties().createdTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-04T03:41:28Z"), response.properties().changedTime());
        Assertions.assertEquals("btmkekxpkzwaq", response.properties().batchGroupName());
        Assertions.assertEquals(1131906752, response.properties().releaseCriteria().messageCount());
        Assertions.assertEquals(1256995489, response.properties().releaseCriteria().batchSize());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
