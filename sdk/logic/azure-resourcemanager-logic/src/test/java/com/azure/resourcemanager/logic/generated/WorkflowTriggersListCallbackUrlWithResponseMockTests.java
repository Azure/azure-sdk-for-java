// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.WorkflowTriggerCallbackUrl;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkflowTriggersListCallbackUrlWithResponseMockTests {
    @Test
    public void testListCallbackUrlWithResponse() throws Exception {
        String responseStr
            = "{\"value\":\"lukeqzcbqvj\",\"method\":\"nwwqyyfctfsdhmru\",\"basePath\":\"m\",\"relativePath\":\"bbhktnuzorxati\",\"relativePathParameters\":[\"pd\",\"sautviti\",\"lcfxsgjdiqemcgh\"],\"queries\":{\"api-version\":\"jawfczbbvr\",\"sp\":\"htmzwgirc\",\"sv\":\"zpybrflqv\",\"sig\":\"lqwpmmmhupv\",\"se\":\"hpsugebgboq\"}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogicManager manager = LogicManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkflowTriggerCallbackUrl response = manager.workflowTriggers()
            .listCallbackUrlWithResponse("cwawblkkc", "ixsgklxgsqhczok", "ncqqhbjmvbe",
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("pd", response.relativePathParameters().get(0));
        Assertions.assertEquals("jawfczbbvr", response.queries().apiVersion());
        Assertions.assertEquals("htmzwgirc", response.queries().sp());
        Assertions.assertEquals("zpybrflqv", response.queries().sv());
        Assertions.assertEquals("lqwpmmmhupv", response.queries().sig());
        Assertions.assertEquals("hpsugebgboq", response.queries().se());
    }
}
