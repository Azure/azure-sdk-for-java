// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logic.models.SwaggerXml;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SwaggerXmlTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SwaggerXml model = BinaryData.fromString(
            "{\"name\":\"nfppkyks\",\"namespace\":\"cyfubg\",\"prefix\":\"lnjdaxio\",\"attribute\":false,\"wrapped\":false,\"extensions\":{\"cokpfyo\":\"datavcutwngfdsztmqqu\",\"vmsf\":\"dataf\",\"qgmoexgnyugsasgh\":\"datasyxthdfqqz\"}}")
            .toObject(SwaggerXml.class);
        Assertions.assertEquals("nfppkyks", model.name());
        Assertions.assertEquals("cyfubg", model.namespace());
        Assertions.assertEquals("lnjdaxio", model.prefix());
        Assertions.assertEquals(false, model.attribute());
        Assertions.assertEquals(false, model.wrapped());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SwaggerXml model = new SwaggerXml().withName("nfppkyks")
            .withNamespace("cyfubg")
            .withPrefix("lnjdaxio")
            .withAttribute(false)
            .withWrapped(false)
            .withExtensions(
                mapOf("cokpfyo", "datavcutwngfdsztmqqu", "vmsf", "dataf", "qgmoexgnyugsasgh", "datasyxthdfqqz"));
        model = BinaryData.fromObject(model).toObject(SwaggerXml.class);
        Assertions.assertEquals("nfppkyks", model.name());
        Assertions.assertEquals("cyfubg", model.namespace());
        Assertions.assertEquals("lnjdaxio", model.prefix());
        Assertions.assertEquals(false, model.attribute());
        Assertions.assertEquals(false, model.wrapped());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
