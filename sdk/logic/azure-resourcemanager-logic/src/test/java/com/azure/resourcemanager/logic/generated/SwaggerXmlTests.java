// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logic.models.SwaggerXml;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SwaggerXmlTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SwaggerXml model =
            BinaryData
                .fromString(
                    "{\"name\":\"fkmbtsuahxsgxj\",\"namespace\":\"mzrrscubiwsdrn\",\"prefix\":\"qwodiffjx\",\"attribute\":true,\"wrapped\":true,\"extensions\":{\"vjogjonmcyefo\":\"databwi\",\"fvfkak\":\"datazbamwine\",\"knyuxgvttxpn\":\"dataoldtvevboclzhz\"}}")
                .toObject(SwaggerXml.class);
        Assertions.assertEquals("fkmbtsuahxsgxj", model.name());
        Assertions.assertEquals("mzrrscubiwsdrn", model.namespace());
        Assertions.assertEquals("qwodiffjx", model.prefix());
        Assertions.assertEquals(true, model.attribute());
        Assertions.assertEquals(true, model.wrapped());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SwaggerXml model =
            new SwaggerXml()
                .withName("fkmbtsuahxsgxj")
                .withNamespace("mzrrscubiwsdrn")
                .withPrefix("qwodiffjx")
                .withAttribute(true)
                .withWrapped(true)
                .withExtensions(
                    mapOf("vjogjonmcyefo", "databwi", "fvfkak", "datazbamwine", "knyuxgvttxpn", "dataoldtvevboclzhz"));
        model = BinaryData.fromObject(model).toObject(SwaggerXml.class);
        Assertions.assertEquals("fkmbtsuahxsgxj", model.name());
        Assertions.assertEquals("mzrrscubiwsdrn", model.namespace());
        Assertions.assertEquals("qwodiffjx", model.prefix());
        Assertions.assertEquals(true, model.attribute());
        Assertions.assertEquals(true, model.wrapped());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
