// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logic.models.DayOfWeek;
import com.azure.resourcemanager.logic.models.DaysOfWeek;
import com.azure.resourcemanager.logic.models.RecurrenceSchedule;
import com.azure.resourcemanager.logic.models.RecurrenceScheduleOccurrence;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RecurrenceScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RecurrenceSchedule model = BinaryData.fromString(
            "{\"minutes\":[2094175875,411799174,621148688,110839155],\"hours\":[929982715],\"weekDays\":[\"Saturday\",\"Friday\"],\"monthDays\":[1283351152,1429171965,980549756],\"monthlyOccurrences\":[{\"day\":\"Wednesday\",\"occurrence\":1867992626},{\"day\":\"Saturday\",\"occurrence\":297328779},{\"day\":\"Friday\",\"occurrence\":1857074792},{\"day\":\"Sunday\",\"occurrence\":768047651}]}")
            .toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(2094175875, model.minutes().get(0));
        Assertions.assertEquals(929982715, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.SATURDAY, model.weekDays().get(0));
        Assertions.assertEquals(1283351152, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1867992626, model.monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RecurrenceSchedule model
            = new RecurrenceSchedule().withMinutes(Arrays.asList(2094175875, 411799174, 621148688, 110839155))
                .withHours(Arrays.asList(929982715))
                .withWeekDays(Arrays.asList(DaysOfWeek.SATURDAY, DaysOfWeek.FRIDAY))
                .withMonthDays(Arrays.asList(1283351152, 1429171965, 980549756))
                .withMonthlyOccurrences(Arrays.asList(
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.WEDNESDAY).withOccurrence(1867992626),
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.SATURDAY).withOccurrence(297328779),
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.FRIDAY).withOccurrence(1857074792),
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.SUNDAY).withOccurrence(768047651)));
        model = BinaryData.fromObject(model).toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(2094175875, model.minutes().get(0));
        Assertions.assertEquals(929982715, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.SATURDAY, model.weekDays().get(0));
        Assertions.assertEquals(1283351152, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1867992626, model.monthlyOccurrences().get(0).occurrence());
    }
}
