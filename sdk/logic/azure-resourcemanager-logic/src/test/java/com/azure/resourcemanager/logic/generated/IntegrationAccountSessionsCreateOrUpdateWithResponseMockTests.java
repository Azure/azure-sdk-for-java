// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logic.LogicManager;
import com.azure.resourcemanager.logic.models.IntegrationAccountSession;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IntegrationAccountSessionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"createdTime\":\"2021-09-05T23:50:41Z\",\"changedTime\":\"2021-10-12T12:55:52Z\",\"content\":\"datamebvxmaacrq\"},\"location\":\"ovboz\",\"tags\":{\"vjxyvx\":\"smrcxuga\"},\"id\":\"buzdphogmrcmgue\",\"name\":\"rasdrrfozzv\",\"type\":\"golzjnjkb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogicManager manager = LogicManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IntegrationAccountSession response = manager.integrationAccountSessions()
            .define("doilhrxjiwjivyor")
            .withRegion("ubazyrisci")
            .withExistingIntegrationAccount("kfvdjgwzakqgab", "bsuxgnwuykulo")
            .withTags(mapOf("sllfkcroviim", "vftqahj", "w", "dlmag", "endfpdoxtif", "gfx", "tklojlgsbystznwj", "sxxk"))
            .withContent("datanbql")
            .create();

        Assertions.assertEquals("ovboz", response.location());
        Assertions.assertEquals("smrcxuga", response.tags().get("vjxyvx"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
