// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logic.models.AS2MdnSettings;
import com.azure.resourcemanager.logic.models.HashingAlgorithm;
import org.junit.jupiter.api.Assertions;

public final class AS2MdnSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AS2MdnSettings model = BinaryData.fromString(
            "{\"needMDN\":false,\"signMDN\":true,\"sendMDNAsynchronously\":true,\"receiptDeliveryUrl\":\"vkzqk\",\"dispositionNotificationTo\":\"eokbze\",\"signOutboundMDNIfOptional\":true,\"mdnText\":\"rx\",\"sendInboundMDNToMessageBox\":false,\"micHashingAlgorithm\":\"SHA1\"}")
            .toObject(AS2MdnSettings.class);
        Assertions.assertEquals(false, model.needMdn());
        Assertions.assertEquals(true, model.signMdn());
        Assertions.assertEquals(true, model.sendMdnAsynchronously());
        Assertions.assertEquals("vkzqk", model.receiptDeliveryUrl());
        Assertions.assertEquals("eokbze", model.dispositionNotificationTo());
        Assertions.assertEquals(true, model.signOutboundMdnIfOptional());
        Assertions.assertEquals("rx", model.mdnText());
        Assertions.assertEquals(false, model.sendInboundMdnToMessageBox());
        Assertions.assertEquals(HashingAlgorithm.SHA1, model.micHashingAlgorithm());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AS2MdnSettings model = new AS2MdnSettings().withNeedMdn(false)
            .withSignMdn(true)
            .withSendMdnAsynchronously(true)
            .withReceiptDeliveryUrl("vkzqk")
            .withDispositionNotificationTo("eokbze")
            .withSignOutboundMdnIfOptional(true)
            .withMdnText("rx")
            .withSendInboundMdnToMessageBox(false)
            .withMicHashingAlgorithm(HashingAlgorithm.SHA1);
        model = BinaryData.fromObject(model).toObject(AS2MdnSettings.class);
        Assertions.assertEquals(false, model.needMdn());
        Assertions.assertEquals(true, model.signMdn());
        Assertions.assertEquals(true, model.sendMdnAsynchronously());
        Assertions.assertEquals("vkzqk", model.receiptDeliveryUrl());
        Assertions.assertEquals("eokbze", model.dispositionNotificationTo());
        Assertions.assertEquals(true, model.signOutboundMdnIfOptional());
        Assertions.assertEquals("rx", model.mdnText());
        Assertions.assertEquals(false, model.sendInboundMdnToMessageBox());
        Assertions.assertEquals(HashingAlgorithm.SHA1, model.micHashingAlgorithm());
    }
}
