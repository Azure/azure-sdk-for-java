/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.logic.v2016_06_01.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.logic.v2016_06_01.Workflows;
import com.microsoft.azure.management.logic.v2016_06_01.WorkflowVersions;
import com.microsoft.azure.management.logic.v2016_06_01.WorkflowTriggers;
import com.microsoft.azure.management.logic.v2016_06_01.WorkflowTriggerHistories;
import com.microsoft.azure.management.logic.v2016_06_01.WorkflowRuns;
import com.microsoft.azure.management.logic.v2016_06_01.WorkflowRunActions;
import com.microsoft.azure.management.logic.v2016_06_01.WorkflowRunActionRepetitions;
import com.microsoft.azure.management.logic.v2016_06_01.WorkflowRunActionScopedRepetitions;
import com.microsoft.azure.management.logic.v2016_06_01.WorkflowRunOperations;
import com.microsoft.azure.management.logic.v2016_06_01.IntegrationAccounts;
import com.microsoft.azure.management.logic.v2016_06_01.IntegrationAccountAssemblies;
import com.microsoft.azure.management.logic.v2016_06_01.IntegrationAccountBatchConfigurations;
import com.microsoft.azure.management.logic.v2016_06_01.Schemas;
import com.microsoft.azure.management.logic.v2016_06_01.Maps;
import com.microsoft.azure.management.logic.v2016_06_01.Partners;
import com.microsoft.azure.management.logic.v2016_06_01.Agreements;
import com.microsoft.azure.management.logic.v2016_06_01.Certificates;
import com.microsoft.azure.management.logic.v2016_06_01.Sessions;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure Logic resource management.
 */
public final class LogicManager extends ManagerCore<LogicManager, LogicManagementClientImpl> {
    private Workflows workflows;
    private WorkflowVersions workflowVersions;
    private WorkflowTriggers workflowTriggers;
    private WorkflowTriggerHistories workflowTriggerHistories;
    private WorkflowRuns workflowRuns;
    private WorkflowRunActions workflowRunActions;
    private WorkflowRunActionRepetitions workflowRunActionRepetitions;
    private WorkflowRunActionScopedRepetitions workflowRunActionScopedRepetitions;
    private WorkflowRunOperations workflowRunOperations;
    private IntegrationAccounts integrationAccounts;
    private IntegrationAccountAssemblies integrationAccountAssemblies;
    private IntegrationAccountBatchConfigurations integrationAccountBatchConfigurations;
    private Schemas schemas;
    private Maps maps;
    private Partners partners;
    private Agreements agreements;
    private Certificates certificates;
    private Sessions sessions;
    /**
    * Get a Configurable instance that can be used to create LogicManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new LogicManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of LogicManager that exposes Logic resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the LogicManager
    */
    public static LogicManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new LogicManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of LogicManager that exposes Logic resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the LogicManager
    */
    public static LogicManager authenticate(RestClient restClient, String subscriptionId) {
        return new LogicManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of LogicManager that exposes Logic management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing Logic management API entry points that work across subscriptions
        */
        LogicManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage Workflows.
     */
    public Workflows workflows() {
        if (this.workflows == null) {
            this.workflows = new WorkflowsImpl(this);
        }
        return this.workflows;
    }

    /**
     * @return Entry point to manage WorkflowVersions.
     */
    public WorkflowVersions workflowVersions() {
        if (this.workflowVersions == null) {
            this.workflowVersions = new WorkflowVersionsImpl(this);
        }
        return this.workflowVersions;
    }

    /**
     * @return Entry point to manage WorkflowTriggers.
     */
    public WorkflowTriggers workflowTriggers() {
        if (this.workflowTriggers == null) {
            this.workflowTriggers = new WorkflowTriggersImpl(this);
        }
        return this.workflowTriggers;
    }

    /**
     * @return Entry point to manage WorkflowTriggerHistories.
     */
    public WorkflowTriggerHistories workflowTriggerHistories() {
        if (this.workflowTriggerHistories == null) {
            this.workflowTriggerHistories = new WorkflowTriggerHistoriesImpl(this);
        }
        return this.workflowTriggerHistories;
    }

    /**
     * @return Entry point to manage WorkflowRuns.
     */
    public WorkflowRuns workflowRuns() {
        if (this.workflowRuns == null) {
            this.workflowRuns = new WorkflowRunsImpl(this);
        }
        return this.workflowRuns;
    }

    /**
     * @return Entry point to manage WorkflowRunActions.
     */
    public WorkflowRunActions workflowRunActions() {
        if (this.workflowRunActions == null) {
            this.workflowRunActions = new WorkflowRunActionsImpl(this);
        }
        return this.workflowRunActions;
    }

    /**
     * @return Entry point to manage WorkflowRunActionRepetitions.
     */
    public WorkflowRunActionRepetitions workflowRunActionRepetitions() {
        if (this.workflowRunActionRepetitions == null) {
            this.workflowRunActionRepetitions = new WorkflowRunActionRepetitionsImpl(this);
        }
        return this.workflowRunActionRepetitions;
    }

    /**
     * @return Entry point to manage WorkflowRunActionScopedRepetitions.
     */
    public WorkflowRunActionScopedRepetitions workflowRunActionScopedRepetitions() {
        if (this.workflowRunActionScopedRepetitions == null) {
            this.workflowRunActionScopedRepetitions = new WorkflowRunActionScopedRepetitionsImpl(this);
        }
        return this.workflowRunActionScopedRepetitions;
    }

    /**
     * @return Entry point to manage WorkflowRunOperations.
     */
    public WorkflowRunOperations workflowRunOperations() {
        if (this.workflowRunOperations == null) {
            this.workflowRunOperations = new WorkflowRunOperationsImpl(this);
        }
        return this.workflowRunOperations;
    }

    /**
     * @return Entry point to manage IntegrationAccounts.
     */
    public IntegrationAccounts integrationAccounts() {
        if (this.integrationAccounts == null) {
            this.integrationAccounts = new IntegrationAccountsImpl(this);
        }
        return this.integrationAccounts;
    }

    /**
     * @return Entry point to manage IntegrationAccountAssemblies.
     */
    public IntegrationAccountAssemblies integrationAccountAssemblies() {
        if (this.integrationAccountAssemblies == null) {
            this.integrationAccountAssemblies = new IntegrationAccountAssembliesImpl(this);
        }
        return this.integrationAccountAssemblies;
    }

    /**
     * @return Entry point to manage IntegrationAccountBatchConfigurations.
     */
    public IntegrationAccountBatchConfigurations integrationAccountBatchConfigurations() {
        if (this.integrationAccountBatchConfigurations == null) {
            this.integrationAccountBatchConfigurations = new IntegrationAccountBatchConfigurationsImpl(this);
        }
        return this.integrationAccountBatchConfigurations;
    }

    /**
     * @return Entry point to manage Schemas.
     */
    public Schemas schemas() {
        if (this.schemas == null) {
            this.schemas = new SchemasImpl(this);
        }
        return this.schemas;
    }

    /**
     * @return Entry point to manage Maps.
     */
    public Maps maps() {
        if (this.maps == null) {
            this.maps = new MapsImpl(this);
        }
        return this.maps;
    }

    /**
     * @return Entry point to manage Partners.
     */
    public Partners partners() {
        if (this.partners == null) {
            this.partners = new PartnersImpl(this);
        }
        return this.partners;
    }

    /**
     * @return Entry point to manage Agreements.
     */
    public Agreements agreements() {
        if (this.agreements == null) {
            this.agreements = new AgreementsImpl(this);
        }
        return this.agreements;
    }

    /**
     * @return Entry point to manage Certificates.
     */
    public Certificates certificates() {
        if (this.certificates == null) {
            this.certificates = new CertificatesImpl(this);
        }
        return this.certificates;
    }

    /**
     * @return Entry point to manage Sessions.
     */
    public Sessions sessions() {
        if (this.sessions == null) {
            this.sessions = new SessionsImpl(this);
        }
        return this.sessions;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public LogicManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return LogicManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private LogicManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new LogicManagementClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
