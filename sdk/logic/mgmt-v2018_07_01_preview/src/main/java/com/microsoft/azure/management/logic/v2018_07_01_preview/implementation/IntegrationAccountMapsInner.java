/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.logic.v2018_07_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.logic.v2018_07_01_preview.GetCallbackUrlParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in IntegrationAccountMaps.
 */
public class IntegrationAccountMapsInner {
    /** The Retrofit service to perform REST calls. */
    private IntegrationAccountMapsService service;
    /** The service client containing this operation class. */
    private LogicManagementClientImpl client;

    /**
     * Initializes an instance of IntegrationAccountMapsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public IntegrationAccountMapsInner(Retrofit retrofit, LogicManagementClientImpl client) {
        this.service = retrofit.create(IntegrationAccountMapsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for IntegrationAccountMaps to be
     * used by Retrofit to perform actually REST calls.
     */
    interface IntegrationAccountMapsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2018_07_01_preview.IntegrationAccountMaps list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("integrationAccountName") String integrationAccountName, @Query("api-version") String apiVersion, @Query("$top") Integer top, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2018_07_01_preview.IntegrationAccountMaps get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("integrationAccountName") String integrationAccountName, @Path("mapName") String mapName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2018_07_01_preview.IntegrationAccountMaps createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("integrationAccountName") String integrationAccountName, @Path("mapName") String mapName, @Query("api-version") String apiVersion, @Body IntegrationAccountMapInner map, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2018_07_01_preview.IntegrationAccountMaps delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("integrationAccountName") String integrationAccountName, @Path("mapName") String mapName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2018_07_01_preview.IntegrationAccountMaps listContentCallbackUrl" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}/listContentCallbackUrl")
        Observable<Response<ResponseBody>> listContentCallbackUrl(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("integrationAccountName") String integrationAccountName, @Path("mapName") String mapName, @Query("api-version") String apiVersion, @Body GetCallbackUrlParameters listContentCallbackUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.logic.v2018_07_01_preview.IntegrationAccountMaps listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets a list of integration account maps.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IntegrationAccountMapInner&gt; object if successful.
     */
    public PagedList<IntegrationAccountMapInner> list(final String resourceGroupName, final String integrationAccountName) {
        ServiceResponse<Page<IntegrationAccountMapInner>> response = listSinglePageAsync(resourceGroupName, integrationAccountName).toBlocking().single();
        return new PagedList<IntegrationAccountMapInner>(response.body()) {
            @Override
            public Page<IntegrationAccountMapInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of integration account maps.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IntegrationAccountMapInner>> listAsync(final String resourceGroupName, final String integrationAccountName, final ListOperationCallback<IntegrationAccountMapInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, integrationAccountName),
            new Func1<String, Observable<ServiceResponse<Page<IntegrationAccountMapInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountMapInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of integration account maps.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationAccountMapInner&gt; object
     */
    public Observable<Page<IntegrationAccountMapInner>> listAsync(final String resourceGroupName, final String integrationAccountName) {
        return listWithServiceResponseAsync(resourceGroupName, integrationAccountName)
            .map(new Func1<ServiceResponse<Page<IntegrationAccountMapInner>>, Page<IntegrationAccountMapInner>>() {
                @Override
                public Page<IntegrationAccountMapInner> call(ServiceResponse<Page<IntegrationAccountMapInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of integration account maps.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationAccountMapInner&gt; object
     */
    public Observable<ServiceResponse<Page<IntegrationAccountMapInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String integrationAccountName) {
        return listSinglePageAsync(resourceGroupName, integrationAccountName)
            .concatMap(new Func1<ServiceResponse<Page<IntegrationAccountMapInner>>, Observable<ServiceResponse<Page<IntegrationAccountMapInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountMapInner>>> call(ServiceResponse<Page<IntegrationAccountMapInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of integration account maps.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IntegrationAccountMapInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IntegrationAccountMapInner>>> listSinglePageAsync(final String resourceGroupName, final String integrationAccountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (integrationAccountName == null) {
            throw new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        final String filter = null;
        return service.list(this.client.subscriptionId(), resourceGroupName, integrationAccountName, this.client.apiVersion(), top, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IntegrationAccountMapInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountMapInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IntegrationAccountMapInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IntegrationAccountMapInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a list of integration account maps.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param top The number of items to be included in the result.
     * @param filter The filter to apply on the operation. Options for filters include: MapType.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IntegrationAccountMapInner&gt; object if successful.
     */
    public PagedList<IntegrationAccountMapInner> list(final String resourceGroupName, final String integrationAccountName, final Integer top, final String filter) {
        ServiceResponse<Page<IntegrationAccountMapInner>> response = listSinglePageAsync(resourceGroupName, integrationAccountName, top, filter).toBlocking().single();
        return new PagedList<IntegrationAccountMapInner>(response.body()) {
            @Override
            public Page<IntegrationAccountMapInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of integration account maps.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param top The number of items to be included in the result.
     * @param filter The filter to apply on the operation. Options for filters include: MapType.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IntegrationAccountMapInner>> listAsync(final String resourceGroupName, final String integrationAccountName, final Integer top, final String filter, final ListOperationCallback<IntegrationAccountMapInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, integrationAccountName, top, filter),
            new Func1<String, Observable<ServiceResponse<Page<IntegrationAccountMapInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountMapInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of integration account maps.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param top The number of items to be included in the result.
     * @param filter The filter to apply on the operation. Options for filters include: MapType.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationAccountMapInner&gt; object
     */
    public Observable<Page<IntegrationAccountMapInner>> listAsync(final String resourceGroupName, final String integrationAccountName, final Integer top, final String filter) {
        return listWithServiceResponseAsync(resourceGroupName, integrationAccountName, top, filter)
            .map(new Func1<ServiceResponse<Page<IntegrationAccountMapInner>>, Page<IntegrationAccountMapInner>>() {
                @Override
                public Page<IntegrationAccountMapInner> call(ServiceResponse<Page<IntegrationAccountMapInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of integration account maps.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param top The number of items to be included in the result.
     * @param filter The filter to apply on the operation. Options for filters include: MapType.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationAccountMapInner&gt; object
     */
    public Observable<ServiceResponse<Page<IntegrationAccountMapInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String integrationAccountName, final Integer top, final String filter) {
        return listSinglePageAsync(resourceGroupName, integrationAccountName, top, filter)
            .concatMap(new Func1<ServiceResponse<Page<IntegrationAccountMapInner>>, Observable<ServiceResponse<Page<IntegrationAccountMapInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountMapInner>>> call(ServiceResponse<Page<IntegrationAccountMapInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of integration account maps.
     *
    ServiceResponse<PageImpl<IntegrationAccountMapInner>> * @param resourceGroupName The resource group name.
    ServiceResponse<PageImpl<IntegrationAccountMapInner>> * @param integrationAccountName The integration account name.
    ServiceResponse<PageImpl<IntegrationAccountMapInner>> * @param top The number of items to be included in the result.
    ServiceResponse<PageImpl<IntegrationAccountMapInner>> * @param filter The filter to apply on the operation. Options for filters include: MapType.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IntegrationAccountMapInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IntegrationAccountMapInner>>> listSinglePageAsync(final String resourceGroupName, final String integrationAccountName, final Integer top, final String filter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (integrationAccountName == null) {
            throw new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, integrationAccountName, this.client.apiVersion(), top, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IntegrationAccountMapInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountMapInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IntegrationAccountMapInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IntegrationAccountMapInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IntegrationAccountMapInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IntegrationAccountMapInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IntegrationAccountMapInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets an integration account map.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IntegrationAccountMapInner object if successful.
     */
    public IntegrationAccountMapInner get(String resourceGroupName, String integrationAccountName, String mapName) {
        return getWithServiceResponseAsync(resourceGroupName, integrationAccountName, mapName).toBlocking().single().body();
    }

    /**
     * Gets an integration account map.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IntegrationAccountMapInner> getAsync(String resourceGroupName, String integrationAccountName, String mapName, final ServiceCallback<IntegrationAccountMapInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, integrationAccountName, mapName), serviceCallback);
    }

    /**
     * Gets an integration account map.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationAccountMapInner object
     */
    public Observable<IntegrationAccountMapInner> getAsync(String resourceGroupName, String integrationAccountName, String mapName) {
        return getWithServiceResponseAsync(resourceGroupName, integrationAccountName, mapName).map(new Func1<ServiceResponse<IntegrationAccountMapInner>, IntegrationAccountMapInner>() {
            @Override
            public IntegrationAccountMapInner call(ServiceResponse<IntegrationAccountMapInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an integration account map.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationAccountMapInner object
     */
    public Observable<ServiceResponse<IntegrationAccountMapInner>> getWithServiceResponseAsync(String resourceGroupName, String integrationAccountName, String mapName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (integrationAccountName == null) {
            throw new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null.");
        }
        if (mapName == null) {
            throw new IllegalArgumentException("Parameter mapName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, integrationAccountName, mapName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IntegrationAccountMapInner>>>() {
                @Override
                public Observable<ServiceResponse<IntegrationAccountMapInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IntegrationAccountMapInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IntegrationAccountMapInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IntegrationAccountMapInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<IntegrationAccountMapInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates an integration account map.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @param map The integration account map.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IntegrationAccountMapInner object if successful.
     */
    public IntegrationAccountMapInner createOrUpdate(String resourceGroupName, String integrationAccountName, String mapName, IntegrationAccountMapInner map) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, integrationAccountName, mapName, map).toBlocking().single().body();
    }

    /**
     * Creates or updates an integration account map.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @param map The integration account map.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IntegrationAccountMapInner> createOrUpdateAsync(String resourceGroupName, String integrationAccountName, String mapName, IntegrationAccountMapInner map, final ServiceCallback<IntegrationAccountMapInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, integrationAccountName, mapName, map), serviceCallback);
    }

    /**
     * Creates or updates an integration account map.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @param map The integration account map.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationAccountMapInner object
     */
    public Observable<IntegrationAccountMapInner> createOrUpdateAsync(String resourceGroupName, String integrationAccountName, String mapName, IntegrationAccountMapInner map) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, integrationAccountName, mapName, map).map(new Func1<ServiceResponse<IntegrationAccountMapInner>, IntegrationAccountMapInner>() {
            @Override
            public IntegrationAccountMapInner call(ServiceResponse<IntegrationAccountMapInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an integration account map.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @param map The integration account map.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntegrationAccountMapInner object
     */
    public Observable<ServiceResponse<IntegrationAccountMapInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String integrationAccountName, String mapName, IntegrationAccountMapInner map) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (integrationAccountName == null) {
            throw new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null.");
        }
        if (mapName == null) {
            throw new IllegalArgumentException("Parameter mapName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (map == null) {
            throw new IllegalArgumentException("Parameter map is required and cannot be null.");
        }
        Validator.validate(map);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, integrationAccountName, mapName, this.client.apiVersion(), map, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IntegrationAccountMapInner>>>() {
                @Override
                public Observable<ServiceResponse<IntegrationAccountMapInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IntegrationAccountMapInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IntegrationAccountMapInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IntegrationAccountMapInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<IntegrationAccountMapInner>() { }.getType())
                .register(201, new TypeToken<IntegrationAccountMapInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes an integration account map.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String integrationAccountName, String mapName) {
        deleteWithServiceResponseAsync(resourceGroupName, integrationAccountName, mapName).toBlocking().single().body();
    }

    /**
     * Deletes an integration account map.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String integrationAccountName, String mapName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, integrationAccountName, mapName), serviceCallback);
    }

    /**
     * Deletes an integration account map.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String integrationAccountName, String mapName) {
        return deleteWithServiceResponseAsync(resourceGroupName, integrationAccountName, mapName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an integration account map.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String integrationAccountName, String mapName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (integrationAccountName == null) {
            throw new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null.");
        }
        if (mapName == null) {
            throw new IllegalArgumentException("Parameter mapName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, integrationAccountName, mapName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get the content callback url.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @param listContentCallbackUrl the GetCallbackUrlParameters value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkflowTriggerCallbackUrlInner object if successful.
     */
    public WorkflowTriggerCallbackUrlInner listContentCallbackUrl(String resourceGroupName, String integrationAccountName, String mapName, GetCallbackUrlParameters listContentCallbackUrl) {
        return listContentCallbackUrlWithServiceResponseAsync(resourceGroupName, integrationAccountName, mapName, listContentCallbackUrl).toBlocking().single().body();
    }

    /**
     * Get the content callback url.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @param listContentCallbackUrl the GetCallbackUrlParameters value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkflowTriggerCallbackUrlInner> listContentCallbackUrlAsync(String resourceGroupName, String integrationAccountName, String mapName, GetCallbackUrlParameters listContentCallbackUrl, final ServiceCallback<WorkflowTriggerCallbackUrlInner> serviceCallback) {
        return ServiceFuture.fromResponse(listContentCallbackUrlWithServiceResponseAsync(resourceGroupName, integrationAccountName, mapName, listContentCallbackUrl), serviceCallback);
    }

    /**
     * Get the content callback url.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @param listContentCallbackUrl the GetCallbackUrlParameters value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkflowTriggerCallbackUrlInner object
     */
    public Observable<WorkflowTriggerCallbackUrlInner> listContentCallbackUrlAsync(String resourceGroupName, String integrationAccountName, String mapName, GetCallbackUrlParameters listContentCallbackUrl) {
        return listContentCallbackUrlWithServiceResponseAsync(resourceGroupName, integrationAccountName, mapName, listContentCallbackUrl).map(new Func1<ServiceResponse<WorkflowTriggerCallbackUrlInner>, WorkflowTriggerCallbackUrlInner>() {
            @Override
            public WorkflowTriggerCallbackUrlInner call(ServiceResponse<WorkflowTriggerCallbackUrlInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the content callback url.
     *
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @param listContentCallbackUrl the GetCallbackUrlParameters value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkflowTriggerCallbackUrlInner object
     */
    public Observable<ServiceResponse<WorkflowTriggerCallbackUrlInner>> listContentCallbackUrlWithServiceResponseAsync(String resourceGroupName, String integrationAccountName, String mapName, GetCallbackUrlParameters listContentCallbackUrl) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (integrationAccountName == null) {
            throw new IllegalArgumentException("Parameter integrationAccountName is required and cannot be null.");
        }
        if (mapName == null) {
            throw new IllegalArgumentException("Parameter mapName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (listContentCallbackUrl == null) {
            throw new IllegalArgumentException("Parameter listContentCallbackUrl is required and cannot be null.");
        }
        Validator.validate(listContentCallbackUrl);
        return service.listContentCallbackUrl(this.client.subscriptionId(), resourceGroupName, integrationAccountName, mapName, this.client.apiVersion(), listContentCallbackUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkflowTriggerCallbackUrlInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkflowTriggerCallbackUrlInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkflowTriggerCallbackUrlInner> clientResponse = listContentCallbackUrlDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkflowTriggerCallbackUrlInner> listContentCallbackUrlDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkflowTriggerCallbackUrlInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkflowTriggerCallbackUrlInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a list of integration account maps.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IntegrationAccountMapInner&gt; object if successful.
     */
    public PagedList<IntegrationAccountMapInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<IntegrationAccountMapInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<IntegrationAccountMapInner>(response.body()) {
            @Override
            public Page<IntegrationAccountMapInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of integration account maps.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IntegrationAccountMapInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<IntegrationAccountMapInner>> serviceFuture, final ListOperationCallback<IntegrationAccountMapInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<IntegrationAccountMapInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountMapInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of integration account maps.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationAccountMapInner&gt; object
     */
    public Observable<Page<IntegrationAccountMapInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<IntegrationAccountMapInner>>, Page<IntegrationAccountMapInner>>() {
                @Override
                public Page<IntegrationAccountMapInner> call(ServiceResponse<Page<IntegrationAccountMapInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of integration account maps.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IntegrationAccountMapInner&gt; object
     */
    public Observable<ServiceResponse<Page<IntegrationAccountMapInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<IntegrationAccountMapInner>>, Observable<ServiceResponse<Page<IntegrationAccountMapInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountMapInner>>> call(ServiceResponse<Page<IntegrationAccountMapInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of integration account maps.
     *
    ServiceResponse<PageImpl<IntegrationAccountMapInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IntegrationAccountMapInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IntegrationAccountMapInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IntegrationAccountMapInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IntegrationAccountMapInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IntegrationAccountMapInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IntegrationAccountMapInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IntegrationAccountMapInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IntegrationAccountMapInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IntegrationAccountMapInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
