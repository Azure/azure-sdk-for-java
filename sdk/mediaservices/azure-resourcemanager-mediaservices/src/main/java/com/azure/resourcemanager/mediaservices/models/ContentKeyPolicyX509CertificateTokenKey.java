// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies a certificate for token validation.
 */
@Fluent
public final class ContentKeyPolicyX509CertificateTokenKey extends ContentKeyPolicyRestrictionTokenKey {
    /*
     * The discriminator for derived types.
     */
    private String odataType = "#Microsoft.Media.ContentKeyPolicyX509CertificateTokenKey";

    /*
     * The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET)
     */
    private byte[] rawBody;

    /**
     * Creates an instance of ContentKeyPolicyX509CertificateTokenKey class.
     */
    public ContentKeyPolicyX509CertificateTokenKey() {
    }

    /**
     * Get the odataType property: The discriminator for derived types.
     * 
     * @return the odataType value.
     */
    @Override
    public String odataType() {
        return this.odataType;
    }

    /**
     * Get the rawBody property: The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET).
     * 
     * @return the rawBody value.
     */
    public byte[] rawBody() {
        return CoreUtils.clone(this.rawBody);
    }

    /**
     * Set the rawBody property: The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET).
     * 
     * @param rawBody the rawBody value to set.
     * @return the ContentKeyPolicyX509CertificateTokenKey object itself.
     */
    public ContentKeyPolicyX509CertificateTokenKey withRawBody(byte[] rawBody) {
        this.rawBody = CoreUtils.clone(rawBody);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (rawBody() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property rawBody in model ContentKeyPolicyX509CertificateTokenKey"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ContentKeyPolicyX509CertificateTokenKey.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBinaryField("rawBody", this.rawBody);
        jsonWriter.writeStringField("@odata.type", this.odataType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContentKeyPolicyX509CertificateTokenKey from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContentKeyPolicyX509CertificateTokenKey if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContentKeyPolicyX509CertificateTokenKey.
     */
    public static ContentKeyPolicyX509CertificateTokenKey fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContentKeyPolicyX509CertificateTokenKey deserializedContentKeyPolicyX509CertificateTokenKey
                = new ContentKeyPolicyX509CertificateTokenKey();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rawBody".equals(fieldName)) {
                    deserializedContentKeyPolicyX509CertificateTokenKey.rawBody = reader.getBinary();
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedContentKeyPolicyX509CertificateTokenKey.odataType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContentKeyPolicyX509CertificateTokenKey;
        });
    }
}
