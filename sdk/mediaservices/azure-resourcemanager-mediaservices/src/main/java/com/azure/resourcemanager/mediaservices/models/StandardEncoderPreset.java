// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Describes all the settings to be used when encoding the input video with the Standard Encoder.
 */
@Fluent
public final class StandardEncoderPreset extends Preset {
    /*
     * The discriminator for derived types.
     */
    private String odataType = "#Microsoft.Media.StandardEncoderPreset";

    /*
     * Dictionary containing key value pairs for parameters not exposed in the preset itself
     */
    private Map<String, String> experimentalOptions;

    /*
     * One or more filtering operations that are applied to the input media before encoding.
     */
    private Filters filters;

    /*
     * The list of codecs to be used when encoding the input video.
     */
    private List<Codec> codecs;

    /*
     * The list of outputs to be produced by the encoder.
     */
    private List<Format> formats;

    /**
     * Creates an instance of StandardEncoderPreset class.
     */
    public StandardEncoderPreset() {
    }

    /**
     * Get the odataType property: The discriminator for derived types.
     * 
     * @return the odataType value.
     */
    @Override
    public String odataType() {
        return this.odataType;
    }

    /**
     * Get the experimentalOptions property: Dictionary containing key value pairs for parameters not exposed in the
     * preset itself.
     * 
     * @return the experimentalOptions value.
     */
    public Map<String, String> experimentalOptions() {
        return this.experimentalOptions;
    }

    /**
     * Set the experimentalOptions property: Dictionary containing key value pairs for parameters not exposed in the
     * preset itself.
     * 
     * @param experimentalOptions the experimentalOptions value to set.
     * @return the StandardEncoderPreset object itself.
     */
    public StandardEncoderPreset withExperimentalOptions(Map<String, String> experimentalOptions) {
        this.experimentalOptions = experimentalOptions;
        return this;
    }

    /**
     * Get the filters property: One or more filtering operations that are applied to the input media before encoding.
     * 
     * @return the filters value.
     */
    public Filters filters() {
        return this.filters;
    }

    /**
     * Set the filters property: One or more filtering operations that are applied to the input media before encoding.
     * 
     * @param filters the filters value to set.
     * @return the StandardEncoderPreset object itself.
     */
    public StandardEncoderPreset withFilters(Filters filters) {
        this.filters = filters;
        return this;
    }

    /**
     * Get the codecs property: The list of codecs to be used when encoding the input video.
     * 
     * @return the codecs value.
     */
    public List<Codec> codecs() {
        return this.codecs;
    }

    /**
     * Set the codecs property: The list of codecs to be used when encoding the input video.
     * 
     * @param codecs the codecs value to set.
     * @return the StandardEncoderPreset object itself.
     */
    public StandardEncoderPreset withCodecs(List<Codec> codecs) {
        this.codecs = codecs;
        return this;
    }

    /**
     * Get the formats property: The list of outputs to be produced by the encoder.
     * 
     * @return the formats value.
     */
    public List<Format> formats() {
        return this.formats;
    }

    /**
     * Set the formats property: The list of outputs to be produced by the encoder.
     * 
     * @param formats the formats value to set.
     * @return the StandardEncoderPreset object itself.
     */
    public StandardEncoderPreset withFormats(List<Format> formats) {
        this.formats = formats;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (filters() != null) {
            filters().validate();
        }
        if (codecs() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property codecs in model StandardEncoderPreset"));
        } else {
            codecs().forEach(e -> e.validate());
        }
        if (formats() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property formats in model StandardEncoderPreset"));
        } else {
            formats().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StandardEncoderPreset.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("codecs", this.codecs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("formats", this.formats, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeMapField("experimentalOptions", this.experimentalOptions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("filters", this.filters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StandardEncoderPreset from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StandardEncoderPreset if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StandardEncoderPreset.
     */
    public static StandardEncoderPreset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StandardEncoderPreset deserializedStandardEncoderPreset = new StandardEncoderPreset();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("codecs".equals(fieldName)) {
                    List<Codec> codecs = reader.readArray(reader1 -> Codec.fromJson(reader1));
                    deserializedStandardEncoderPreset.codecs = codecs;
                } else if ("formats".equals(fieldName)) {
                    List<Format> formats = reader.readArray(reader1 -> Format.fromJson(reader1));
                    deserializedStandardEncoderPreset.formats = formats;
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedStandardEncoderPreset.odataType = reader.getString();
                } else if ("experimentalOptions".equals(fieldName)) {
                    Map<String, String> experimentalOptions = reader.readMap(reader1 -> reader1.getString());
                    deserializedStandardEncoderPreset.experimentalOptions = experimentalOptions;
                } else if ("filters".equals(fieldName)) {
                    deserializedStandardEncoderPreset.filters = Filters.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStandardEncoderPreset;
        });
    }
}
