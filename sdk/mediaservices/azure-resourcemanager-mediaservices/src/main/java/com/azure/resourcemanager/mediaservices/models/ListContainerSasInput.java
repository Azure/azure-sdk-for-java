// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The parameters to the list SAS request.
 */
@Fluent
public final class ListContainerSasInput implements JsonSerializable<ListContainerSasInput> {
    /*
     * The permissions to set on the SAS URL.
     */
    private AssetContainerPermission permissions;

    /*
     * The SAS URL expiration time. This must be less than 24 hours from the current time.
     */
    private OffsetDateTime expiryTime;

    /**
     * Creates an instance of ListContainerSasInput class.
     */
    public ListContainerSasInput() {
    }

    /**
     * Get the permissions property: The permissions to set on the SAS URL.
     * 
     * @return the permissions value.
     */
    public AssetContainerPermission permissions() {
        return this.permissions;
    }

    /**
     * Set the permissions property: The permissions to set on the SAS URL.
     * 
     * @param permissions the permissions value to set.
     * @return the ListContainerSasInput object itself.
     */
    public ListContainerSasInput withPermissions(AssetContainerPermission permissions) {
        this.permissions = permissions;
        return this;
    }

    /**
     * Get the expiryTime property: The SAS URL expiration time. This must be less than 24 hours from the current time.
     * 
     * @return the expiryTime value.
     */
    public OffsetDateTime expiryTime() {
        return this.expiryTime;
    }

    /**
     * Set the expiryTime property: The SAS URL expiration time. This must be less than 24 hours from the current time.
     * 
     * @param expiryTime the expiryTime value to set.
     * @return the ListContainerSasInput object itself.
     */
    public ListContainerSasInput withExpiryTime(OffsetDateTime expiryTime) {
        this.expiryTime = expiryTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("permissions", this.permissions == null ? null : this.permissions.toString());
        jsonWriter.writeStringField("expiryTime",
            this.expiryTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiryTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ListContainerSasInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ListContainerSasInput if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ListContainerSasInput.
     */
    public static ListContainerSasInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ListContainerSasInput deserializedListContainerSasInput = new ListContainerSasInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("permissions".equals(fieldName)) {
                    deserializedListContainerSasInput.permissions
                        = AssetContainerPermission.fromString(reader.getString());
                } else if ("expiryTime".equals(fieldName)) {
                    deserializedListContainerSasInput.expiryTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedListContainerSasInput;
        });
    }
}
