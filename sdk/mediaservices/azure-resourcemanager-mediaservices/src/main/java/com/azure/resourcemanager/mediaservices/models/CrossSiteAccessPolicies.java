// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The client access policy.
 */
@Fluent
public final class CrossSiteAccessPolicies implements JsonSerializable<CrossSiteAccessPolicies> {
    /*
     * The content of clientaccesspolicy.xml used by Silverlight.
     */
    private String clientAccessPolicy;

    /*
     * The content of crossdomain.xml used by Silverlight.
     */
    private String crossDomainPolicy;

    /**
     * Creates an instance of CrossSiteAccessPolicies class.
     */
    public CrossSiteAccessPolicies() {
    }

    /**
     * Get the clientAccessPolicy property: The content of clientaccesspolicy.xml used by Silverlight.
     * 
     * @return the clientAccessPolicy value.
     */
    public String clientAccessPolicy() {
        return this.clientAccessPolicy;
    }

    /**
     * Set the clientAccessPolicy property: The content of clientaccesspolicy.xml used by Silverlight.
     * 
     * @param clientAccessPolicy the clientAccessPolicy value to set.
     * @return the CrossSiteAccessPolicies object itself.
     */
    public CrossSiteAccessPolicies withClientAccessPolicy(String clientAccessPolicy) {
        this.clientAccessPolicy = clientAccessPolicy;
        return this;
    }

    /**
     * Get the crossDomainPolicy property: The content of crossdomain.xml used by Silverlight.
     * 
     * @return the crossDomainPolicy value.
     */
    public String crossDomainPolicy() {
        return this.crossDomainPolicy;
    }

    /**
     * Set the crossDomainPolicy property: The content of crossdomain.xml used by Silverlight.
     * 
     * @param crossDomainPolicy the crossDomainPolicy value to set.
     * @return the CrossSiteAccessPolicies object itself.
     */
    public CrossSiteAccessPolicies withCrossDomainPolicy(String crossDomainPolicy) {
        this.crossDomainPolicy = crossDomainPolicy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clientAccessPolicy", this.clientAccessPolicy);
        jsonWriter.writeStringField("crossDomainPolicy", this.crossDomainPolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CrossSiteAccessPolicies from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CrossSiteAccessPolicies if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CrossSiteAccessPolicies.
     */
    public static CrossSiteAccessPolicies fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CrossSiteAccessPolicies deserializedCrossSiteAccessPolicies = new CrossSiteAccessPolicies();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clientAccessPolicy".equals(fieldName)) {
                    deserializedCrossSiteAccessPolicies.clientAccessPolicy = reader.getString();
                } else if ("crossDomainPolicy".equals(fieldName)) {
                    deserializedCrossSiteAccessPolicies.crossDomainPolicy = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCrossSiteAccessPolicies;
        });
    }
}
