// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Filter First Quality.
 */
@Fluent
public final class FirstQuality implements JsonSerializable<FirstQuality> {
    /*
     * The first quality bitrate.
     */
    private int bitrate;

    /**
     * Creates an instance of FirstQuality class.
     */
    public FirstQuality() {
    }

    /**
     * Get the bitrate property: The first quality bitrate.
     * 
     * @return the bitrate value.
     */
    public int bitrate() {
        return this.bitrate;
    }

    /**
     * Set the bitrate property: The first quality bitrate.
     * 
     * @param bitrate the bitrate value to set.
     * @return the FirstQuality object itself.
     */
    public FirstQuality withBitrate(int bitrate) {
        this.bitrate = bitrate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("bitrate", this.bitrate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FirstQuality from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FirstQuality if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FirstQuality.
     */
    public static FirstQuality fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FirstQuality deserializedFirstQuality = new FirstQuality();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bitrate".equals(fieldName)) {
                    deserializedFirstQuality.bitrate = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFirstQuality;
        });
    }
}
