// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** Represents HTTPS job input. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@odata\\.type")
@JsonTypeName("#Microsoft.Media.JobInputHttp")
@JsonFlatten
@Fluent
public class JobInputHttp extends JobInputClip {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(JobInputHttp.class);

    /*
     * Base URI for HTTPS job input. It will be concatenated with provided file
     * names. If no base uri is given, then the provided file list is assumed
     * to be fully qualified uris. Maximum length of 4000 characters.
     */
    @JsonProperty(value = "baseUri")
    private String baseUri;

    /**
     * Get the baseUri property: Base URI for HTTPS job input. It will be concatenated with provided file names. If no
     * base uri is given, then the provided file list is assumed to be fully qualified uris. Maximum length of 4000
     * characters.
     *
     * @return the baseUri value.
     */
    public String baseUri() {
        return this.baseUri;
    }

    /**
     * Set the baseUri property: Base URI for HTTPS job input. It will be concatenated with provided file names. If no
     * base uri is given, then the provided file list is assumed to be fully qualified uris. Maximum length of 4000
     * characters.
     *
     * @param baseUri the baseUri value to set.
     * @return the JobInputHttp object itself.
     */
    public JobInputHttp withBaseUri(String baseUri) {
        this.baseUri = baseUri;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobInputHttp withFiles(List<String> files) {
        super.withFiles(files);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobInputHttp withStart(ClipTime start) {
        super.withStart(start);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobInputHttp withEnd(ClipTime end) {
        super.withEnd(end);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobInputHttp withLabel(String label) {
        super.withLabel(label);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public JobInputHttp withInputDefinitions(List<InputDefinition> inputDefinitions) {
        super.withInputDefinitions(inputDefinitions);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
