// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.mediaservices.models.AssetStorageEncryptionFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.UUID;

/** An Asset. */
@Fluent
public final class AssetInner extends ProxyResource {
    /*
     * The resource properties.
     */
    @JsonProperty(value = "properties")
    private AssetProperties innerProperties;

    /*
     * The system metadata relating to this resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of AssetInner class. */
    public AssetInner() {
    }

    /**
     * Get the innerProperties property: The resource properties.
     *
     * @return the innerProperties value.
     */
    private AssetProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: The system metadata relating to this resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the assetId property: The Asset ID.
     *
     * @return the assetId value.
     */
    public UUID assetId() {
        return this.innerProperties() == null ? null : this.innerProperties().assetId();
    }

    /**
     * Get the created property: The creation date of the Asset.
     *
     * @return the created value.
     */
    public OffsetDateTime created() {
        return this.innerProperties() == null ? null : this.innerProperties().created();
    }

    /**
     * Get the lastModified property: The last modified date of the Asset.
     *
     * @return the lastModified value.
     */
    public OffsetDateTime lastModified() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModified();
    }

    /**
     * Get the alternateId property: The alternate ID of the Asset.
     *
     * @return the alternateId value.
     */
    public String alternateId() {
        return this.innerProperties() == null ? null : this.innerProperties().alternateId();
    }

    /**
     * Set the alternateId property: The alternate ID of the Asset.
     *
     * @param alternateId the alternateId value to set.
     * @return the AssetInner object itself.
     */
    public AssetInner withAlternateId(String alternateId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AssetProperties();
        }
        this.innerProperties().withAlternateId(alternateId);
        return this;
    }

    /**
     * Get the description property: The Asset description.
     *
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: The Asset description.
     *
     * @param description the description value to set.
     * @return the AssetInner object itself.
     */
    public AssetInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AssetProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the container property: The name of the asset blob container.
     *
     * @return the container value.
     */
    public String container() {
        return this.innerProperties() == null ? null : this.innerProperties().container();
    }

    /**
     * Set the container property: The name of the asset blob container.
     *
     * @param container the container value to set.
     * @return the AssetInner object itself.
     */
    public AssetInner withContainer(String container) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AssetProperties();
        }
        this.innerProperties().withContainer(container);
        return this;
    }

    /**
     * Get the storageAccountName property: The name of the storage account.
     *
     * @return the storageAccountName value.
     */
    public String storageAccountName() {
        return this.innerProperties() == null ? null : this.innerProperties().storageAccountName();
    }

    /**
     * Set the storageAccountName property: The name of the storage account.
     *
     * @param storageAccountName the storageAccountName value to set.
     * @return the AssetInner object itself.
     */
    public AssetInner withStorageAccountName(String storageAccountName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AssetProperties();
        }
        this.innerProperties().withStorageAccountName(storageAccountName);
        return this;
    }

    /**
     * Get the storageEncryptionFormat property: The Asset encryption format. One of None or MediaStorageEncryption.
     *
     * @return the storageEncryptionFormat value.
     */
    public AssetStorageEncryptionFormat storageEncryptionFormat() {
        return this.innerProperties() == null ? null : this.innerProperties().storageEncryptionFormat();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
