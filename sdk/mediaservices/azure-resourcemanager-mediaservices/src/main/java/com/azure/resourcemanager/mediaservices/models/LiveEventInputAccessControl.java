// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The IP access control for live event input.
 */
@Fluent
public final class LiveEventInputAccessControl implements JsonSerializable<LiveEventInputAccessControl> {
    /*
     * The IP access control properties.
     */
    private IpAccessControl ip;

    /**
     * Creates an instance of LiveEventInputAccessControl class.
     */
    public LiveEventInputAccessControl() {
    }

    /**
     * Get the ip property: The IP access control properties.
     * 
     * @return the ip value.
     */
    public IpAccessControl ip() {
        return this.ip;
    }

    /**
     * Set the ip property: The IP access control properties.
     * 
     * @param ip the ip value to set.
     * @return the LiveEventInputAccessControl object itself.
     */
    public LiveEventInputAccessControl withIp(IpAccessControl ip) {
        this.ip = ip;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ip() != null) {
            ip().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("ip", this.ip);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LiveEventInputAccessControl from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LiveEventInputAccessControl if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LiveEventInputAccessControl.
     */
    public static LiveEventInputAccessControl fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LiveEventInputAccessControl deserializedLiveEventInputAccessControl = new LiveEventInputAccessControl();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ip".equals(fieldName)) {
                    deserializedLiveEventInputAccessControl.ip = IpAccessControl.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLiveEventInputAccessControl;
        });
    }
}
