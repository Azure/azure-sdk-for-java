// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes a built-in preset for encoding the input video with the Standard Encoder.
 */
@Fluent
public final class BuiltInStandardEncoderPreset extends Preset {
    /*
     * The discriminator for derived types.
     */
    private String odataType = "#Microsoft.Media.BuiltInStandardEncoderPreset";

    /*
     * Optional configuration settings for encoder. Configurations is only supported for ContentAwareEncoding and
     * H265ContentAwareEncoding BuiltInStandardEncoderPreset.
     */
    private PresetConfigurations configurations;

    /*
     * The built-in preset to be used for encoding videos.
     */
    private EncoderNamedPreset presetName;

    /**
     * Creates an instance of BuiltInStandardEncoderPreset class.
     */
    public BuiltInStandardEncoderPreset() {
    }

    /**
     * Get the odataType property: The discriminator for derived types.
     * 
     * @return the odataType value.
     */
    @Override
    public String odataType() {
        return this.odataType;
    }

    /**
     * Get the configurations property: Optional configuration settings for encoder. Configurations is only supported
     * for ContentAwareEncoding and H265ContentAwareEncoding BuiltInStandardEncoderPreset.
     * 
     * @return the configurations value.
     */
    public PresetConfigurations configurations() {
        return this.configurations;
    }

    /**
     * Set the configurations property: Optional configuration settings for encoder. Configurations is only supported
     * for ContentAwareEncoding and H265ContentAwareEncoding BuiltInStandardEncoderPreset.
     * 
     * @param configurations the configurations value to set.
     * @return the BuiltInStandardEncoderPreset object itself.
     */
    public BuiltInStandardEncoderPreset withConfigurations(PresetConfigurations configurations) {
        this.configurations = configurations;
        return this;
    }

    /**
     * Get the presetName property: The built-in preset to be used for encoding videos.
     * 
     * @return the presetName value.
     */
    public EncoderNamedPreset presetName() {
        return this.presetName;
    }

    /**
     * Set the presetName property: The built-in preset to be used for encoding videos.
     * 
     * @param presetName the presetName value to set.
     * @return the BuiltInStandardEncoderPreset object itself.
     */
    public BuiltInStandardEncoderPreset withPresetName(EncoderNamedPreset presetName) {
        this.presetName = presetName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (configurations() != null) {
            configurations().validate();
        }
        if (presetName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property presetName in model BuiltInStandardEncoderPreset"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BuiltInStandardEncoderPreset.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("presetName", this.presetName == null ? null : this.presetName.toString());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeJsonField("configurations", this.configurations);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BuiltInStandardEncoderPreset from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BuiltInStandardEncoderPreset if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BuiltInStandardEncoderPreset.
     */
    public static BuiltInStandardEncoderPreset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BuiltInStandardEncoderPreset deserializedBuiltInStandardEncoderPreset = new BuiltInStandardEncoderPreset();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("presetName".equals(fieldName)) {
                    deserializedBuiltInStandardEncoderPreset.presetName
                        = EncoderNamedPreset.fromString(reader.getString());
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedBuiltInStandardEncoderPreset.odataType = reader.getString();
                } else if ("configurations".equals(fieldName)) {
                    deserializedBuiltInStandardEncoderPreset.configurations = PresetConfigurations.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBuiltInStandardEncoderPreset;
        });
    }
}
