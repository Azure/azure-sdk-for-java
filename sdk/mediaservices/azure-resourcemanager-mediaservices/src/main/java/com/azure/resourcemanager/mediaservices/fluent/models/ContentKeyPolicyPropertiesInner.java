// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyOption;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

/**
 * The properties of the Content Key Policy.
 */
@Fluent
public final class ContentKeyPolicyPropertiesInner implements JsonSerializable<ContentKeyPolicyPropertiesInner> {
    /*
     * The legacy Policy ID.
     */
    private UUID policyId;

    /*
     * The creation date of the Policy
     */
    private OffsetDateTime created;

    /*
     * The last modified date of the Policy
     */
    private OffsetDateTime lastModified;

    /*
     * A description for the Policy.
     */
    private String description;

    /*
     * The Key Policy options.
     */
    private List<ContentKeyPolicyOption> options;

    /**
     * Creates an instance of ContentKeyPolicyPropertiesInner class.
     */
    public ContentKeyPolicyPropertiesInner() {
    }

    /**
     * Get the policyId property: The legacy Policy ID.
     * 
     * @return the policyId value.
     */
    public UUID policyId() {
        return this.policyId;
    }

    /**
     * Get the created property: The creation date of the Policy.
     * 
     * @return the created value.
     */
    public OffsetDateTime created() {
        return this.created;
    }

    /**
     * Get the lastModified property: The last modified date of the Policy.
     * 
     * @return the lastModified value.
     */
    public OffsetDateTime lastModified() {
        return this.lastModified;
    }

    /**
     * Get the description property: A description for the Policy.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description for the Policy.
     * 
     * @param description the description value to set.
     * @return the ContentKeyPolicyPropertiesInner object itself.
     */
    public ContentKeyPolicyPropertiesInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the options property: The Key Policy options.
     * 
     * @return the options value.
     */
    public List<ContentKeyPolicyOption> options() {
        return this.options;
    }

    /**
     * Set the options property: The Key Policy options.
     * 
     * @param options the options value to set.
     * @return the ContentKeyPolicyPropertiesInner object itself.
     */
    public ContentKeyPolicyPropertiesInner withOptions(List<ContentKeyPolicyOption> options) {
        this.options = options;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (options() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property options in model ContentKeyPolicyPropertiesInner"));
        } else {
            options().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ContentKeyPolicyPropertiesInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("options", this.options, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContentKeyPolicyPropertiesInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContentKeyPolicyPropertiesInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContentKeyPolicyPropertiesInner.
     */
    public static ContentKeyPolicyPropertiesInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContentKeyPolicyPropertiesInner deserializedContentKeyPolicyPropertiesInner
                = new ContentKeyPolicyPropertiesInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("options".equals(fieldName)) {
                    List<ContentKeyPolicyOption> options
                        = reader.readArray(reader1 -> ContentKeyPolicyOption.fromJson(reader1));
                    deserializedContentKeyPolicyPropertiesInner.options = options;
                } else if ("policyId".equals(fieldName)) {
                    deserializedContentKeyPolicyPropertiesInner.policyId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("created".equals(fieldName)) {
                    deserializedContentKeyPolicyPropertiesInner.created = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastModified".equals(fieldName)) {
                    deserializedContentKeyPolicyPropertiesInner.lastModified = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("description".equals(fieldName)) {
                    deserializedContentKeyPolicyPropertiesInner.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContentKeyPolicyPropertiesInner;
        });
    }
}
