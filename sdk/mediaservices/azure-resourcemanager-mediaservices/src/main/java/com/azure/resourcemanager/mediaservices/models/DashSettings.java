// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The DASH setting for a track.
 */
@Fluent
public final class DashSettings implements JsonSerializable<DashSettings> {
    /*
     * The role for the DASH setting.
     */
    private String role;

    /**
     * Creates an instance of DashSettings class.
     */
    public DashSettings() {
    }

    /**
     * Get the role property: The role for the DASH setting.
     * 
     * @return the role value.
     */
    public String role() {
        return this.role;
    }

    /**
     * Set the role property: The role for the DASH setting.
     * 
     * @param role the role value to set.
     * @return the DashSettings object itself.
     */
    public DashSettings withRole(String role) {
        this.role = role;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("role", this.role);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DashSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DashSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DashSettings.
     */
    public static DashSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DashSettings deserializedDashSettings = new DashSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("role".equals(fieldName)) {
                    deserializedDashSettings.role = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDashSettings;
        });
    }
}
