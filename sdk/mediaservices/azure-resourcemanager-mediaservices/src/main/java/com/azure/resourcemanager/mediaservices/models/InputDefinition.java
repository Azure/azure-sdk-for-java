// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * Base class for defining an input. Use sub classes of this class to specify tracks selections and related metadata.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "@odata\\.type",
    defaultImpl = InputDefinition.class)
@JsonTypeName("InputDefinition")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "#Microsoft.Media.FromAllInputFile", value = FromAllInputFile.class),
    @JsonSubTypes.Type(name = "#Microsoft.Media.FromEachInputFile", value = FromEachInputFile.class),
    @JsonSubTypes.Type(name = "#Microsoft.Media.InputFile", value = InputFile.class)
})
@JsonFlatten
@Fluent
public class InputDefinition {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(InputDefinition.class);

    /*
     * The list of TrackDescriptors which define the metadata and selection of
     * tracks in the input.
     */
    @JsonProperty(value = "includedTracks")
    private List<TrackDescriptor> includedTracks;

    /**
     * Get the includedTracks property: The list of TrackDescriptors which define the metadata and selection of tracks
     * in the input.
     *
     * @return the includedTracks value.
     */
    public List<TrackDescriptor> includedTracks() {
        return this.includedTracks;
    }

    /**
     * Set the includedTracks property: The list of TrackDescriptors which define the metadata and selection of tracks
     * in the input.
     *
     * @param includedTracks the includedTracks value to set.
     * @return the InputDefinition object itself.
     */
    public InputDefinition withIncludedTracks(List<TrackDescriptor> includedTracks) {
        this.includedTracks = includedTracks;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (includedTracks() != null) {
            includedTracks().forEach(e -> e.validate());
        }
    }
}
