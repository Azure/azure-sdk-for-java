// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * Describes the properties of an audio overlay.
 */
@Fluent
public final class AudioOverlay extends Overlay {
    /*
     * The discriminator for derived types.
     */
    private String odataType = "#Microsoft.Media.AudioOverlay";

    /**
     * Creates an instance of AudioOverlay class.
     */
    public AudioOverlay() {
    }

    /**
     * Get the odataType property: The discriminator for derived types.
     * 
     * @return the odataType value.
     */
    @Override
    public String odataType() {
        return this.odataType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AudioOverlay withInputLabel(String inputLabel) {
        super.withInputLabel(inputLabel);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AudioOverlay withStart(Duration start) {
        super.withStart(start);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AudioOverlay withEnd(Duration end) {
        super.withEnd(end);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AudioOverlay withFadeInDuration(Duration fadeInDuration) {
        super.withFadeInDuration(fadeInDuration);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AudioOverlay withFadeOutDuration(Duration fadeOutDuration) {
        super.withFadeOutDuration(fadeOutDuration);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AudioOverlay withAudioGainLevel(Double audioGainLevel) {
        super.withAudioGainLevel(audioGainLevel);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (inputLabel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property inputLabel in model AudioOverlay"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AudioOverlay.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("inputLabel", inputLabel());
        jsonWriter.writeStringField("start", CoreUtils.durationToStringWithDays(start()));
        jsonWriter.writeStringField("end", CoreUtils.durationToStringWithDays(end()));
        jsonWriter.writeStringField("fadeInDuration", CoreUtils.durationToStringWithDays(fadeInDuration()));
        jsonWriter.writeStringField("fadeOutDuration", CoreUtils.durationToStringWithDays(fadeOutDuration()));
        jsonWriter.writeNumberField("audioGainLevel", audioGainLevel());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AudioOverlay from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AudioOverlay if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AudioOverlay.
     */
    public static AudioOverlay fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AudioOverlay deserializedAudioOverlay = new AudioOverlay();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inputLabel".equals(fieldName)) {
                    deserializedAudioOverlay.withInputLabel(reader.getString());
                } else if ("start".equals(fieldName)) {
                    deserializedAudioOverlay
                        .withStart(reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString())));
                } else if ("end".equals(fieldName)) {
                    deserializedAudioOverlay
                        .withEnd(reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString())));
                } else if ("fadeInDuration".equals(fieldName)) {
                    deserializedAudioOverlay.withFadeInDuration(
                        reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString())));
                } else if ("fadeOutDuration".equals(fieldName)) {
                    deserializedAudioOverlay.withFadeOutDuration(
                        reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString())));
                } else if ("audioGainLevel".equals(fieldName)) {
                    deserializedAudioOverlay.withAudioGainLevel(reader.getNullable(JsonReader::getDouble));
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedAudioOverlay.odataType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAudioOverlay;
        });
    }
}
