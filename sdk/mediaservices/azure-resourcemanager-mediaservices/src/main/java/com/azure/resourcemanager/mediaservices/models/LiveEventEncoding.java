// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * Specifies the live event type and optional encoding settings for encoding live events.
 */
@Fluent
public final class LiveEventEncoding implements JsonSerializable<LiveEventEncoding> {
    /*
     * Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes
     * through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or
     * Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See
     * https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the
     * live event is created.
     */
    private LiveEventEncodingType encodingType;

    /*
     * The optional encoding preset name, used when encodingType is not None. This value is specified at creation time
     * and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’.
     * Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
     */
    private String presetName;

    /*
     * Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
     */
    private StretchMode stretchMode;

    /*
     * Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and
     * audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also
     * defines the key frame interval, or the length of a GoP (group of pictures). If this value is not set for an
     * encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live
     * events.
     */
    private Duration keyFrameInterval;

    /**
     * Creates an instance of LiveEventEncoding class.
     */
    public LiveEventEncoding() {
    }

    /**
     * Get the encodingType property: Live event type. When encodingType is set to PassthroughBasic or
     * PassthroughStandard, the service simply passes through the incoming video and audio layer(s) to the output. When
     * encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple
     * bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property
     * cannot be modified after the live event is created.
     * 
     * @return the encodingType value.
     */
    public LiveEventEncodingType encodingType() {
        return this.encodingType;
    }

    /**
     * Set the encodingType property: Live event type. When encodingType is set to PassthroughBasic or
     * PassthroughStandard, the service simply passes through the incoming video and audio layer(s) to the output. When
     * encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple
     * bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property
     * cannot be modified after the live event is created.
     * 
     * @param encodingType the encodingType value to set.
     * @return the LiveEventEncoding object itself.
     */
    public LiveEventEncoding withEncodingType(LiveEventEncodingType encodingType) {
        this.encodingType = encodingType;
        return this;
    }

    /**
     * Get the presetName property: The optional encoding preset name, used when encodingType is not None. This value is
     * specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset
     * name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
     * 
     * @return the presetName value.
     */
    public String presetName() {
        return this.presetName;
    }

    /**
     * Set the presetName property: The optional encoding preset name, used when encodingType is not None. This value is
     * specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset
     * name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
     * 
     * @param presetName the presetName value to set.
     * @return the LiveEventEncoding object itself.
     */
    public LiveEventEncoding withPresetName(String presetName) {
        this.presetName = presetName;
        return this;
    }

    /**
     * Get the stretchMode property: Specifies how the input video will be resized to fit the desired output
     * resolution(s). Default is None.
     * 
     * @return the stretchMode value.
     */
    public StretchMode stretchMode() {
        return this.stretchMode;
    }

    /**
     * Set the stretchMode property: Specifies how the input video will be resized to fit the desired output
     * resolution(s). Default is None.
     * 
     * @param stretchMode the stretchMode value to set.
     * @return the LiveEventEncoding object itself.
     */
    public LiveEventEncoding withStretchMode(StretchMode stretchMode) {
        this.stretchMode = stretchMode;
        return this;
    }

    /**
     * Get the keyFrameInterval property: Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output
     * fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2
     * seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).
     * If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value
     * cannot be set for pass-through live events.
     * 
     * @return the keyFrameInterval value.
     */
    public Duration keyFrameInterval() {
        return this.keyFrameInterval;
    }

    /**
     * Set the keyFrameInterval property: Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output
     * fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2
     * seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).
     * If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value
     * cannot be set for pass-through live events.
     * 
     * @param keyFrameInterval the keyFrameInterval value to set.
     * @return the LiveEventEncoding object itself.
     */
    public LiveEventEncoding withKeyFrameInterval(Duration keyFrameInterval) {
        this.keyFrameInterval = keyFrameInterval;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("encodingType", this.encodingType == null ? null : this.encodingType.toString());
        jsonWriter.writeStringField("presetName", this.presetName);
        jsonWriter.writeStringField("stretchMode", this.stretchMode == null ? null : this.stretchMode.toString());
        jsonWriter.writeStringField("keyFrameInterval", CoreUtils.durationToStringWithDays(this.keyFrameInterval));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LiveEventEncoding from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LiveEventEncoding if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LiveEventEncoding.
     */
    public static LiveEventEncoding fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LiveEventEncoding deserializedLiveEventEncoding = new LiveEventEncoding();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("encodingType".equals(fieldName)) {
                    deserializedLiveEventEncoding.encodingType = LiveEventEncodingType.fromString(reader.getString());
                } else if ("presetName".equals(fieldName)) {
                    deserializedLiveEventEncoding.presetName = reader.getString();
                } else if ("stretchMode".equals(fieldName)) {
                    deserializedLiveEventEncoding.stretchMode = StretchMode.fromString(reader.getString());
                } else if ("keyFrameInterval".equals(fieldName)) {
                    deserializedLiveEventEncoding.keyFrameInterval
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLiveEventEncoding;
        });
    }
}
