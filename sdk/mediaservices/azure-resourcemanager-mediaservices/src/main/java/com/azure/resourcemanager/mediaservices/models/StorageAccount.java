// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The storage account details. */
@Fluent
public final class StorageAccount {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(StorageAccount.class);

    /*
     * The ID of the storage account resource. Media Services relies on tables
     * and queues as well as blobs, so the primary storage account must be a
     * Standard Storage account (either Microsoft.ClassicStorage or
     * Microsoft.Storage). Blob only storage accounts can be added as secondary
     * storage accounts.
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * The type of the storage account.
     */
    @JsonProperty(value = "type", required = true)
    private StorageAccountType type;

    /**
     * Get the id property: The ID of the storage account resource. Media Services relies on tables and queues as well
     * as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or
     * Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The ID of the storage account resource. Media Services relies on tables and queues as well
     * as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or
     * Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.
     *
     * @param id the id value to set.
     * @return the StorageAccount object itself.
     */
    public StorageAccount withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the type property: The type of the storage account.
     *
     * @return the type value.
     */
    public StorageAccountType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of the storage account.
     *
     * @param type the type value to set.
     * @return the StorageAccount object itself.
     */
    public StorageAccount withType(StorageAccountType type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property type in model StorageAccount"));
        }
    }
}
