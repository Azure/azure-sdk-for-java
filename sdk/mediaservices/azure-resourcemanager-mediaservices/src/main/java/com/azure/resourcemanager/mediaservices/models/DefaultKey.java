// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Class to specify properties of default content key for each encryption scheme.
 */
@Fluent
public final class DefaultKey implements JsonSerializable<DefaultKey> {
    /*
     * Label can be used to specify Content Key when creating a Streaming Locator
     */
    private String label;

    /*
     * Policy used by Default Key
     */
    private String policyName;

    /**
     * Creates an instance of DefaultKey class.
     */
    public DefaultKey() {
    }

    /**
     * Get the label property: Label can be used to specify Content Key when creating a Streaming Locator.
     * 
     * @return the label value.
     */
    public String label() {
        return this.label;
    }

    /**
     * Set the label property: Label can be used to specify Content Key when creating a Streaming Locator.
     * 
     * @param label the label value to set.
     * @return the DefaultKey object itself.
     */
    public DefaultKey withLabel(String label) {
        this.label = label;
        return this;
    }

    /**
     * Get the policyName property: Policy used by Default Key.
     * 
     * @return the policyName value.
     */
    public String policyName() {
        return this.policyName;
    }

    /**
     * Set the policyName property: Policy used by Default Key.
     * 
     * @param policyName the policyName value to set.
     * @return the DefaultKey object itself.
     */
    public DefaultKey withPolicyName(String policyName) {
        this.policyName = policyName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("label", this.label);
        jsonWriter.writeStringField("policyName", this.policyName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DefaultKey from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DefaultKey if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the DefaultKey.
     */
    public static DefaultKey fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DefaultKey deserializedDefaultKey = new DefaultKey();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("label".equals(fieldName)) {
                    deserializedDefaultKey.label = reader.getString();
                } else if ("policyName".equals(fieldName)) {
                    deserializedDefaultKey.policyName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDefaultKey;
        });
    }
}
