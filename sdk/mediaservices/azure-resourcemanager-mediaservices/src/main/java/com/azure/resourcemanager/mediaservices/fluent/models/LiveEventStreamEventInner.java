// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.mediaservices.models.LiveEventStreamEventData;
import com.azure.resourcemanager.mediaservices.models.LiveEventStreamEventLevel;
import com.azure.resourcemanager.mediaservices.models.LiveEventStreamEventType;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** The live event stream event. */
@Fluent
public final class LiveEventStreamEventInner {
    /*
     * The type of the stream event. Format: StreamEvent/{eventType}
     */
    @JsonProperty(value = "eventType")
    private LiveEventStreamEventType eventType;

    /*
     * The time event raised.
     */
    @JsonProperty(value = "eventTime")
    private OffsetDateTime eventTime;

    /*
     * Event level.
     */
    @JsonProperty(value = "eventLevel")
    private LiveEventStreamEventLevel eventLevel;

    /*
     * Event data based on event type.
     */
    @JsonProperty(value = "data")
    private LiveEventStreamEventData data;

    /** Creates an instance of LiveEventStreamEventInner class. */
    public LiveEventStreamEventInner() {
    }

    /**
     * Get the eventType property: The type of the stream event. Format: StreamEvent/{eventType}.
     *
     * @return the eventType value.
     */
    public LiveEventStreamEventType eventType() {
        return this.eventType;
    }

    /**
     * Set the eventType property: The type of the stream event. Format: StreamEvent/{eventType}.
     *
     * @param eventType the eventType value to set.
     * @return the LiveEventStreamEventInner object itself.
     */
    public LiveEventStreamEventInner withEventType(LiveEventStreamEventType eventType) {
        this.eventType = eventType;
        return this;
    }

    /**
     * Get the eventTime property: The time event raised.
     *
     * @return the eventTime value.
     */
    public OffsetDateTime eventTime() {
        return this.eventTime;
    }

    /**
     * Set the eventTime property: The time event raised.
     *
     * @param eventTime the eventTime value to set.
     * @return the LiveEventStreamEventInner object itself.
     */
    public LiveEventStreamEventInner withEventTime(OffsetDateTime eventTime) {
        this.eventTime = eventTime;
        return this;
    }

    /**
     * Get the eventLevel property: Event level.
     *
     * @return the eventLevel value.
     */
    public LiveEventStreamEventLevel eventLevel() {
        return this.eventLevel;
    }

    /**
     * Set the eventLevel property: Event level.
     *
     * @param eventLevel the eventLevel value to set.
     * @return the LiveEventStreamEventInner object itself.
     */
    public LiveEventStreamEventInner withEventLevel(LiveEventStreamEventLevel eventLevel) {
        this.eventLevel = eventLevel;
        return this;
    }

    /**
     * Get the data property: Event data based on event type.
     *
     * @return the data value.
     */
    public LiveEventStreamEventData data() {
        return this.data;
    }

    /**
     * Set the data property: Event data based on event type.
     *
     * @param data the data value to set.
     * @return the LiveEventStreamEventInner object itself.
     */
    public LiveEventStreamEventInner withData(LiveEventStreamEventData data) {
        this.data = data;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (data() != null) {
            data().validate();
        }
    }
}
