// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Class to specify properties of all content keys in Streaming Policy.
 */
@Fluent
public final class StreamingPolicyContentKeys implements JsonSerializable<StreamingPolicyContentKeys> {
    /*
     * Default content key for an encryption scheme
     */
    private DefaultKey defaultKey;

    /*
     * Representing tracks needs separate content key
     */
    private List<StreamingPolicyContentKey> keyToTrackMappings;

    /**
     * Creates an instance of StreamingPolicyContentKeys class.
     */
    public StreamingPolicyContentKeys() {
    }

    /**
     * Get the defaultKey property: Default content key for an encryption scheme.
     * 
     * @return the defaultKey value.
     */
    public DefaultKey defaultKey() {
        return this.defaultKey;
    }

    /**
     * Set the defaultKey property: Default content key for an encryption scheme.
     * 
     * @param defaultKey the defaultKey value to set.
     * @return the StreamingPolicyContentKeys object itself.
     */
    public StreamingPolicyContentKeys withDefaultKey(DefaultKey defaultKey) {
        this.defaultKey = defaultKey;
        return this;
    }

    /**
     * Get the keyToTrackMappings property: Representing tracks needs separate content key.
     * 
     * @return the keyToTrackMappings value.
     */
    public List<StreamingPolicyContentKey> keyToTrackMappings() {
        return this.keyToTrackMappings;
    }

    /**
     * Set the keyToTrackMappings property: Representing tracks needs separate content key.
     * 
     * @param keyToTrackMappings the keyToTrackMappings value to set.
     * @return the StreamingPolicyContentKeys object itself.
     */
    public StreamingPolicyContentKeys withKeyToTrackMappings(List<StreamingPolicyContentKey> keyToTrackMappings) {
        this.keyToTrackMappings = keyToTrackMappings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (defaultKey() != null) {
            defaultKey().validate();
        }
        if (keyToTrackMappings() != null) {
            keyToTrackMappings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("defaultKey", this.defaultKey);
        jsonWriter.writeArrayField("keyToTrackMappings", this.keyToTrackMappings,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StreamingPolicyContentKeys from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StreamingPolicyContentKeys if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StreamingPolicyContentKeys.
     */
    public static StreamingPolicyContentKeys fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StreamingPolicyContentKeys deserializedStreamingPolicyContentKeys = new StreamingPolicyContentKeys();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("defaultKey".equals(fieldName)) {
                    deserializedStreamingPolicyContentKeys.defaultKey = DefaultKey.fromJson(reader);
                } else if ("keyToTrackMappings".equals(fieldName)) {
                    List<StreamingPolicyContentKey> keyToTrackMappings
                        = reader.readArray(reader1 -> StreamingPolicyContentKey.fromJson(reader1));
                    deserializedStreamingPolicyContentKeys.keyToTrackMappings = keyToTrackMappings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStreamingPolicyContentKeys;
        });
    }
}
