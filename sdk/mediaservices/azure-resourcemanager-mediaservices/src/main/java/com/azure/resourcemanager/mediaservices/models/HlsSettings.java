// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The HLS setting for a track.
 */
@Fluent
public final class HlsSettings implements JsonSerializable<HlsSettings> {
    /*
     * The default for the HLS setting.
     */
    private Boolean defaultProperty;

    /*
     * The forced for the HLS setting.
     */
    private Boolean forced;

    /*
     * The characteristics for the HLS setting.
     */
    private String characteristics;

    /**
     * Creates an instance of HlsSettings class.
     */
    public HlsSettings() {
    }

    /**
     * Get the defaultProperty property: The default for the HLS setting.
     * 
     * @return the defaultProperty value.
     */
    public Boolean defaultProperty() {
        return this.defaultProperty;
    }

    /**
     * Set the defaultProperty property: The default for the HLS setting.
     * 
     * @param defaultProperty the defaultProperty value to set.
     * @return the HlsSettings object itself.
     */
    public HlsSettings withDefaultProperty(Boolean defaultProperty) {
        this.defaultProperty = defaultProperty;
        return this;
    }

    /**
     * Get the forced property: The forced for the HLS setting.
     * 
     * @return the forced value.
     */
    public Boolean forced() {
        return this.forced;
    }

    /**
     * Set the forced property: The forced for the HLS setting.
     * 
     * @param forced the forced value to set.
     * @return the HlsSettings object itself.
     */
    public HlsSettings withForced(Boolean forced) {
        this.forced = forced;
        return this;
    }

    /**
     * Get the characteristics property: The characteristics for the HLS setting.
     * 
     * @return the characteristics value.
     */
    public String characteristics() {
        return this.characteristics;
    }

    /**
     * Set the characteristics property: The characteristics for the HLS setting.
     * 
     * @param characteristics the characteristics value to set.
     * @return the HlsSettings object itself.
     */
    public HlsSettings withCharacteristics(String characteristics) {
        this.characteristics = characteristics;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("default", this.defaultProperty);
        jsonWriter.writeBooleanField("forced", this.forced);
        jsonWriter.writeStringField("characteristics", this.characteristics);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HlsSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HlsSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HlsSettings.
     */
    public static HlsSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HlsSettings deserializedHlsSettings = new HlsSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("default".equals(fieldName)) {
                    deserializedHlsSettings.defaultProperty = reader.getNullable(JsonReader::getBoolean);
                } else if ("forced".equals(fieldName)) {
                    deserializedHlsSettings.forced = reader.getNullable(JsonReader::getBoolean);
                } else if ("characteristics".equals(fieldName)) {
                    deserializedHlsSettings.characteristics = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHlsSettings;
        });
    }
}
