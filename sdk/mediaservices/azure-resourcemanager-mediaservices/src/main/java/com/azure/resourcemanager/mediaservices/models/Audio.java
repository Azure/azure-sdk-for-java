// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the common properties for all audio codecs.
 */
@Fluent
public class Audio extends Codec {
    /*
     * The discriminator for derived types.
     */
    private String odataType = "#Microsoft.Media.Audio";

    /*
     * The number of channels in the audio.
     */
    private Integer channels;

    /*
     * The sampling rate to use for encoding in hertz.
     */
    private Integer samplingRate;

    /*
     * The bitrate, in bits per second, of the output encoded audio.
     */
    private Integer bitrate;

    /**
     * Creates an instance of Audio class.
     */
    public Audio() {
    }

    /**
     * Get the odataType property: The discriminator for derived types.
     * 
     * @return the odataType value.
     */
    @Override
    public String odataType() {
        return this.odataType;
    }

    /**
     * Get the channels property: The number of channels in the audio.
     * 
     * @return the channels value.
     */
    public Integer channels() {
        return this.channels;
    }

    /**
     * Set the channels property: The number of channels in the audio.
     * 
     * @param channels the channels value to set.
     * @return the Audio object itself.
     */
    public Audio withChannels(Integer channels) {
        this.channels = channels;
        return this;
    }

    /**
     * Get the samplingRate property: The sampling rate to use for encoding in hertz.
     * 
     * @return the samplingRate value.
     */
    public Integer samplingRate() {
        return this.samplingRate;
    }

    /**
     * Set the samplingRate property: The sampling rate to use for encoding in hertz.
     * 
     * @param samplingRate the samplingRate value to set.
     * @return the Audio object itself.
     */
    public Audio withSamplingRate(Integer samplingRate) {
        this.samplingRate = samplingRate;
        return this;
    }

    /**
     * Get the bitrate property: The bitrate, in bits per second, of the output encoded audio.
     * 
     * @return the bitrate value.
     */
    public Integer bitrate() {
        return this.bitrate;
    }

    /**
     * Set the bitrate property: The bitrate, in bits per second, of the output encoded audio.
     * 
     * @param bitrate the bitrate value to set.
     * @return the Audio object itself.
     */
    public Audio withBitrate(Integer bitrate) {
        this.bitrate = bitrate;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Audio withLabel(String label) {
        super.withLabel(label);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("label", label());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeNumberField("channels", this.channels);
        jsonWriter.writeNumberField("samplingRate", this.samplingRate);
        jsonWriter.writeNumberField("bitrate", this.bitrate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Audio from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Audio if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Audio.
     */
    public static Audio fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("@odata.type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("#Microsoft.Media.AacAudio".equals(discriminatorValue)) {
                    return AacAudio.fromJson(readerToUse.reset());
                } else if ("#Microsoft.Media.DDAudio".equals(discriminatorValue)) {
                    return DDAudio.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static Audio fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Audio deserializedAudio = new Audio();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("label".equals(fieldName)) {
                    deserializedAudio.withLabel(reader.getString());
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedAudio.odataType = reader.getString();
                } else if ("channels".equals(fieldName)) {
                    deserializedAudio.channels = reader.getNullable(JsonReader::getInt);
                } else if ("samplingRate".equals(fieldName)) {
                    deserializedAudio.samplingRate = reader.getNullable(JsonReader::getInt);
                } else if ("bitrate".equals(fieldName)) {
                    deserializedAudio.bitrate = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAudio;
        });
    }
}
