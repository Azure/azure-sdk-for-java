// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a token claim.
 */
@Fluent
public final class ContentKeyPolicyTokenClaim implements JsonSerializable<ContentKeyPolicyTokenClaim> {
    /*
     * Token claim type.
     */
    private String claimType;

    /*
     * Token claim value.
     */
    private String claimValue;

    /**
     * Creates an instance of ContentKeyPolicyTokenClaim class.
     */
    public ContentKeyPolicyTokenClaim() {
    }

    /**
     * Get the claimType property: Token claim type.
     * 
     * @return the claimType value.
     */
    public String claimType() {
        return this.claimType;
    }

    /**
     * Set the claimType property: Token claim type.
     * 
     * @param claimType the claimType value to set.
     * @return the ContentKeyPolicyTokenClaim object itself.
     */
    public ContentKeyPolicyTokenClaim withClaimType(String claimType) {
        this.claimType = claimType;
        return this;
    }

    /**
     * Get the claimValue property: Token claim value.
     * 
     * @return the claimValue value.
     */
    public String claimValue() {
        return this.claimValue;
    }

    /**
     * Set the claimValue property: Token claim value.
     * 
     * @param claimValue the claimValue value to set.
     * @return the ContentKeyPolicyTokenClaim object itself.
     */
    public ContentKeyPolicyTokenClaim withClaimValue(String claimValue) {
        this.claimValue = claimValue;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("claimType", this.claimType);
        jsonWriter.writeStringField("claimValue", this.claimValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContentKeyPolicyTokenClaim from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContentKeyPolicyTokenClaim if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ContentKeyPolicyTokenClaim.
     */
    public static ContentKeyPolicyTokenClaim fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContentKeyPolicyTokenClaim deserializedContentKeyPolicyTokenClaim = new ContentKeyPolicyTokenClaim();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("claimType".equals(fieldName)) {
                    deserializedContentKeyPolicyTokenClaim.claimType = reader.getString();
                } else if ("claimValue".equals(fieldName)) {
                    deserializedContentKeyPolicyTokenClaim.claimValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContentKeyPolicyTokenClaim;
        });
    }
}
