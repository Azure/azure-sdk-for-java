// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Representing a list of FilterTrackPropertyConditions to select a track. The filters are combined using a logical AND
 * operation.
 */
@Fluent
public final class FilterTrackSelection implements JsonSerializable<FilterTrackSelection> {
    /*
     * The track selections.
     */
    private List<FilterTrackPropertyCondition> trackSelections;

    /**
     * Creates an instance of FilterTrackSelection class.
     */
    public FilterTrackSelection() {
    }

    /**
     * Get the trackSelections property: The track selections.
     * 
     * @return the trackSelections value.
     */
    public List<FilterTrackPropertyCondition> trackSelections() {
        return this.trackSelections;
    }

    /**
     * Set the trackSelections property: The track selections.
     * 
     * @param trackSelections the trackSelections value to set.
     * @return the FilterTrackSelection object itself.
     */
    public FilterTrackSelection withTrackSelections(List<FilterTrackPropertyCondition> trackSelections) {
        this.trackSelections = trackSelections;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (trackSelections() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property trackSelections in model FilterTrackSelection"));
        } else {
            trackSelections().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FilterTrackSelection.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("trackSelections", this.trackSelections,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FilterTrackSelection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FilterTrackSelection if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FilterTrackSelection.
     */
    public static FilterTrackSelection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FilterTrackSelection deserializedFilterTrackSelection = new FilterTrackSelection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("trackSelections".equals(fieldName)) {
                    List<FilterTrackPropertyCondition> trackSelections
                        = reader.readArray(reader1 -> FilterTrackPropertyCondition.fromJson(reader1));
                    deserializedFilterTrackSelection.trackSelections = trackSelections;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFilterTrackSelection;
        });
    }
}
