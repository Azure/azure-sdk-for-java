// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The AccessControl model.
 */
@Fluent
public final class AccessControl implements JsonSerializable<AccessControl> {
    /*
     * The behavior for IP access control in Key Delivery.
     */
    private DefaultAction defaultAction;

    /*
     * The IP allow list for access control in Key Delivery. If the default action is set to 'Allow', the IP allow list
     * must be empty.
     */
    private List<String> ipAllowList;

    /**
     * Creates an instance of AccessControl class.
     */
    public AccessControl() {
    }

    /**
     * Get the defaultAction property: The behavior for IP access control in Key Delivery.
     * 
     * @return the defaultAction value.
     */
    public DefaultAction defaultAction() {
        return this.defaultAction;
    }

    /**
     * Set the defaultAction property: The behavior for IP access control in Key Delivery.
     * 
     * @param defaultAction the defaultAction value to set.
     * @return the AccessControl object itself.
     */
    public AccessControl withDefaultAction(DefaultAction defaultAction) {
        this.defaultAction = defaultAction;
        return this;
    }

    /**
     * Get the ipAllowList property: The IP allow list for access control in Key Delivery. If the default action is set
     * to 'Allow', the IP allow list must be empty.
     * 
     * @return the ipAllowList value.
     */
    public List<String> ipAllowList() {
        return this.ipAllowList;
    }

    /**
     * Set the ipAllowList property: The IP allow list for access control in Key Delivery. If the default action is set
     * to 'Allow', the IP allow list must be empty.
     * 
     * @param ipAllowList the ipAllowList value to set.
     * @return the AccessControl object itself.
     */
    public AccessControl withIpAllowList(List<String> ipAllowList) {
        this.ipAllowList = ipAllowList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("defaultAction", this.defaultAction == null ? null : this.defaultAction.toString());
        jsonWriter.writeArrayField("ipAllowList", this.ipAllowList, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessControl from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessControl if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessControl.
     */
    public static AccessControl fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessControl deserializedAccessControl = new AccessControl();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("defaultAction".equals(fieldName)) {
                    deserializedAccessControl.defaultAction = DefaultAction.fromString(reader.getString());
                } else if ("ipAllowList".equals(fieldName)) {
                    List<String> ipAllowList = reader.readArray(reader1 -> reader1.getString());
                    deserializedAccessControl.ipAllowList = ipAllowList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessControl;
        });
    }
}
