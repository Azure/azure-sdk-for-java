// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the settings to produce a PNG image from the input video.
 */
@Fluent
public final class PngLayer extends Layer {
    /**
     * Creates an instance of PngLayer class.
     */
    public PngLayer() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PngLayer withWidth(String width) {
        super.withWidth(width);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PngLayer withHeight(String height) {
        super.withHeight(height);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PngLayer withLabel(String label) {
        super.withLabel(label);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("width", width());
        jsonWriter.writeStringField("height", height());
        jsonWriter.writeStringField("label", label());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PngLayer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PngLayer if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the PngLayer.
     */
    public static PngLayer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PngLayer deserializedPngLayer = new PngLayer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("width".equals(fieldName)) {
                    deserializedPngLayer.withWidth(reader.getString());
                } else if ("height".equals(fieldName)) {
                    deserializedPngLayer.withHeight(reader.getString());
                } else if ("label".equals(fieldName)) {
                    deserializedPngLayer.withLabel(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPngLayer;
        });
    }
}
