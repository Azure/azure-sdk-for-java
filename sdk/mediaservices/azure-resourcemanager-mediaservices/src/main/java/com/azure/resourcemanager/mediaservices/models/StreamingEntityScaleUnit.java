// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * scale units definition.
 */
@Fluent
public final class StreamingEntityScaleUnit implements JsonSerializable<StreamingEntityScaleUnit> {
    /*
     * The scale unit number of the streaming endpoint.
     */
    private Integer scaleUnit;

    /**
     * Creates an instance of StreamingEntityScaleUnit class.
     */
    public StreamingEntityScaleUnit() {
    }

    /**
     * Get the scaleUnit property: The scale unit number of the streaming endpoint.
     * 
     * @return the scaleUnit value.
     */
    public Integer scaleUnit() {
        return this.scaleUnit;
    }

    /**
     * Set the scaleUnit property: The scale unit number of the streaming endpoint.
     * 
     * @param scaleUnit the scaleUnit value to set.
     * @return the StreamingEntityScaleUnit object itself.
     */
    public StreamingEntityScaleUnit withScaleUnit(Integer scaleUnit) {
        this.scaleUnit = scaleUnit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("scaleUnit", this.scaleUnit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StreamingEntityScaleUnit from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StreamingEntityScaleUnit if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StreamingEntityScaleUnit.
     */
    public static StreamingEntityScaleUnit fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StreamingEntityScaleUnit deserializedStreamingEntityScaleUnit = new StreamingEntityScaleUnit();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scaleUnit".equals(fieldName)) {
                    deserializedStreamingEntityScaleUnit.scaleUnit = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStreamingEntityScaleUnit;
        });
    }
}
