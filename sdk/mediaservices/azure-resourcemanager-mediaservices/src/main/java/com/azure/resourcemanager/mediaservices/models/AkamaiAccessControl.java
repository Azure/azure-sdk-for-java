// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Akamai access control.
 */
@Fluent
public final class AkamaiAccessControl implements JsonSerializable<AkamaiAccessControl> {
    /*
     * authentication key list
     */
    private List<AkamaiSignatureHeaderAuthenticationKey> akamaiSignatureHeaderAuthenticationKeyList;

    /**
     * Creates an instance of AkamaiAccessControl class.
     */
    public AkamaiAccessControl() {
    }

    /**
     * Get the akamaiSignatureHeaderAuthenticationKeyList property: authentication key list.
     * 
     * @return the akamaiSignatureHeaderAuthenticationKeyList value.
     */
    public List<AkamaiSignatureHeaderAuthenticationKey> akamaiSignatureHeaderAuthenticationKeyList() {
        return this.akamaiSignatureHeaderAuthenticationKeyList;
    }

    /**
     * Set the akamaiSignatureHeaderAuthenticationKeyList property: authentication key list.
     * 
     * @param akamaiSignatureHeaderAuthenticationKeyList the akamaiSignatureHeaderAuthenticationKeyList value to set.
     * @return the AkamaiAccessControl object itself.
     */
    public AkamaiAccessControl withAkamaiSignatureHeaderAuthenticationKeyList(
        List<AkamaiSignatureHeaderAuthenticationKey> akamaiSignatureHeaderAuthenticationKeyList) {
        this.akamaiSignatureHeaderAuthenticationKeyList = akamaiSignatureHeaderAuthenticationKeyList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (akamaiSignatureHeaderAuthenticationKeyList() != null) {
            akamaiSignatureHeaderAuthenticationKeyList().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("akamaiSignatureHeaderAuthenticationKeyList",
            this.akamaiSignatureHeaderAuthenticationKeyList, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkamaiAccessControl from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkamaiAccessControl if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AkamaiAccessControl.
     */
    public static AkamaiAccessControl fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkamaiAccessControl deserializedAkamaiAccessControl = new AkamaiAccessControl();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("akamaiSignatureHeaderAuthenticationKeyList".equals(fieldName)) {
                    List<AkamaiSignatureHeaderAuthenticationKey> akamaiSignatureHeaderAuthenticationKeyList
                        = reader.readArray(reader1 -> AkamaiSignatureHeaderAuthenticationKey.fromJson(reader1));
                    deserializedAkamaiAccessControl.akamaiSignatureHeaderAuthenticationKeyList
                        = akamaiSignatureHeaderAuthenticationKeyList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkamaiAccessControl;
        });
    }
}
