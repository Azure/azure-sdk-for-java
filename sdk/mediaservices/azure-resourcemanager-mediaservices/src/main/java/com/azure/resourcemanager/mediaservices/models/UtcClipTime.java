// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Specifies the clip time as a Utc time position in the media file. The Utc time can point to a different position
 * depending on whether the media file starts from a timestamp of zero or not.
 */
@Fluent
public final class UtcClipTime extends ClipTime {
    /*
     * The discriminator for derived types.
     */
    private String odataType = "#Microsoft.Media.UtcClipTime";

    /*
     * The time position on the timeline of the input media based on Utc time.
     */
    private OffsetDateTime time;

    /**
     * Creates an instance of UtcClipTime class.
     */
    public UtcClipTime() {
    }

    /**
     * Get the odataType property: The discriminator for derived types.
     * 
     * @return the odataType value.
     */
    @Override
    public String odataType() {
        return this.odataType;
    }

    /**
     * Get the time property: The time position on the timeline of the input media based on Utc time.
     * 
     * @return the time value.
     */
    public OffsetDateTime time() {
        return this.time;
    }

    /**
     * Set the time property: The time position on the timeline of the input media based on Utc time.
     * 
     * @param time the time value to set.
     * @return the UtcClipTime object itself.
     */
    public UtcClipTime withTime(OffsetDateTime time) {
        this.time = time;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (time() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property time in model UtcClipTime"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UtcClipTime.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("time",
            this.time == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.time));
        jsonWriter.writeStringField("@odata.type", this.odataType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UtcClipTime from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UtcClipTime if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UtcClipTime.
     */
    public static UtcClipTime fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UtcClipTime deserializedUtcClipTime = new UtcClipTime();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("time".equals(fieldName)) {
                    deserializedUtcClipTime.time = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedUtcClipTime.odataType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUtcClipTime;
        });
    }
}
