// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mediaservices.models.ProvisioningState;
import com.azure.resourcemanager.mediaservices.models.TrackBase;
import java.io.IOException;

/**
 * Properties of a video, audio or text track in the asset.
 */
@Fluent
public final class AssetTrackProperties implements JsonSerializable<AssetTrackProperties> {
    /*
     * Detailed information about a track in the asset.
     */
    private TrackBase track;

    /*
     * Provisioning state of the asset track.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of AssetTrackProperties class.
     */
    public AssetTrackProperties() {
    }

    /**
     * Get the track property: Detailed information about a track in the asset.
     * 
     * @return the track value.
     */
    public TrackBase track() {
        return this.track;
    }

    /**
     * Set the track property: Detailed information about a track in the asset.
     * 
     * @param track the track value to set.
     * @return the AssetTrackProperties object itself.
     */
    public AssetTrackProperties withTrack(TrackBase track) {
        this.track = track;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the asset track.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (track() != null) {
            track().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("track", this.track);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssetTrackProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssetTrackProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssetTrackProperties.
     */
    public static AssetTrackProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssetTrackProperties deserializedAssetTrackProperties = new AssetTrackProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("track".equals(fieldName)) {
                    deserializedAssetTrackProperties.track = TrackBase.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAssetTrackProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssetTrackProperties;
        });
    }
}
