// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Class to specify properties of content key.
 */
@Fluent
public final class StreamingPolicyContentKey implements JsonSerializable<StreamingPolicyContentKey> {
    /*
     * Label can be used to specify Content Key when creating a Streaming Locator
     */
    private String label;

    /*
     * Policy used by Content Key
     */
    private String policyName;

    /*
     * Tracks which use this content key
     */
    private List<TrackSelection> tracks;

    /**
     * Creates an instance of StreamingPolicyContentKey class.
     */
    public StreamingPolicyContentKey() {
    }

    /**
     * Get the label property: Label can be used to specify Content Key when creating a Streaming Locator.
     * 
     * @return the label value.
     */
    public String label() {
        return this.label;
    }

    /**
     * Set the label property: Label can be used to specify Content Key when creating a Streaming Locator.
     * 
     * @param label the label value to set.
     * @return the StreamingPolicyContentKey object itself.
     */
    public StreamingPolicyContentKey withLabel(String label) {
        this.label = label;
        return this;
    }

    /**
     * Get the policyName property: Policy used by Content Key.
     * 
     * @return the policyName value.
     */
    public String policyName() {
        return this.policyName;
    }

    /**
     * Set the policyName property: Policy used by Content Key.
     * 
     * @param policyName the policyName value to set.
     * @return the StreamingPolicyContentKey object itself.
     */
    public StreamingPolicyContentKey withPolicyName(String policyName) {
        this.policyName = policyName;
        return this;
    }

    /**
     * Get the tracks property: Tracks which use this content key.
     * 
     * @return the tracks value.
     */
    public List<TrackSelection> tracks() {
        return this.tracks;
    }

    /**
     * Set the tracks property: Tracks which use this content key.
     * 
     * @param tracks the tracks value to set.
     * @return the StreamingPolicyContentKey object itself.
     */
    public StreamingPolicyContentKey withTracks(List<TrackSelection> tracks) {
        this.tracks = tracks;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tracks() != null) {
            tracks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("label", this.label);
        jsonWriter.writeStringField("policyName", this.policyName);
        jsonWriter.writeArrayField("tracks", this.tracks, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StreamingPolicyContentKey from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StreamingPolicyContentKey if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StreamingPolicyContentKey.
     */
    public static StreamingPolicyContentKey fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StreamingPolicyContentKey deserializedStreamingPolicyContentKey = new StreamingPolicyContentKey();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("label".equals(fieldName)) {
                    deserializedStreamingPolicyContentKey.label = reader.getString();
                } else if ("policyName".equals(fieldName)) {
                    deserializedStreamingPolicyContentKey.policyName = reader.getString();
                } else if ("tracks".equals(fieldName)) {
                    List<TrackSelection> tracks = reader.readArray(reader1 -> TrackSelection.fromJson(reader1));
                    deserializedStreamingPolicyContentKey.tracks = tracks;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStreamingPolicyContentKey;
        });
    }
}
