// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The EdgeUsageDataEventHub model.
 */
@Fluent
public final class EdgeUsageDataEventHub implements JsonSerializable<EdgeUsageDataEventHub> {
    /*
     * Name of the Event Hub where usage will be reported.
     */
    private String name;

    /*
     * Namespace of the Event Hub where usage will be reported.
     */
    private String namespace;

    /*
     * SAS token needed to interact with Event Hub.
     */
    private String token;

    /**
     * Creates an instance of EdgeUsageDataEventHub class.
     */
    public EdgeUsageDataEventHub() {
    }

    /**
     * Get the name property: Name of the Event Hub where usage will be reported.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the Event Hub where usage will be reported.
     * 
     * @param name the name value to set.
     * @return the EdgeUsageDataEventHub object itself.
     */
    public EdgeUsageDataEventHub withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the namespace property: Namespace of the Event Hub where usage will be reported.
     * 
     * @return the namespace value.
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: Namespace of the Event Hub where usage will be reported.
     * 
     * @param namespace the namespace value to set.
     * @return the EdgeUsageDataEventHub object itself.
     */
    public EdgeUsageDataEventHub withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Get the token property: SAS token needed to interact with Event Hub.
     * 
     * @return the token value.
     */
    public String token() {
        return this.token;
    }

    /**
     * Set the token property: SAS token needed to interact with Event Hub.
     * 
     * @param token the token value to set.
     * @return the EdgeUsageDataEventHub object itself.
     */
    public EdgeUsageDataEventHub withToken(String token) {
        this.token = token;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("namespace", this.namespace);
        jsonWriter.writeStringField("token", this.token);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EdgeUsageDataEventHub from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EdgeUsageDataEventHub if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EdgeUsageDataEventHub.
     */
    public static EdgeUsageDataEventHub fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EdgeUsageDataEventHub deserializedEdgeUsageDataEventHub = new EdgeUsageDataEventHub();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedEdgeUsageDataEventHub.name = reader.getString();
                } else if ("namespace".equals(fieldName)) {
                    deserializedEdgeUsageDataEventHub.namespace = reader.getString();
                } else if ("token".equals(fieldName)) {
                    deserializedEdgeUsageDataEventHub.token = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEdgeUsageDataEventHub;
        });
    }
}
