// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mediaservices.models.FilterTrackSelection;
import com.azure.resourcemanager.mediaservices.models.FirstQuality;
import com.azure.resourcemanager.mediaservices.models.PresentationTimeRange;
import java.io.IOException;
import java.util.List;

/**
 * An Asset Filter.
 */
@Fluent
public final class AssetFilterInner extends ProxyResource {
    /*
     * The Media Filter properties.
     */
    private MediaFilterProperties innerProperties;

    /*
     * The system metadata relating to this resource.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AssetFilterInner class.
     */
    public AssetFilterInner() {
    }

    /**
     * Get the innerProperties property: The Media Filter properties.
     * 
     * @return the innerProperties value.
     */
    private MediaFilterProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: The system metadata relating to this resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the presentationTimeRange property: The presentation time range.
     * 
     * @return the presentationTimeRange value.
     */
    public PresentationTimeRange presentationTimeRange() {
        return this.innerProperties() == null ? null : this.innerProperties().presentationTimeRange();
    }

    /**
     * Set the presentationTimeRange property: The presentation time range.
     * 
     * @param presentationTimeRange the presentationTimeRange value to set.
     * @return the AssetFilterInner object itself.
     */
    public AssetFilterInner withPresentationTimeRange(PresentationTimeRange presentationTimeRange) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MediaFilterProperties();
        }
        this.innerProperties().withPresentationTimeRange(presentationTimeRange);
        return this;
    }

    /**
     * Get the firstQuality property: The first quality.
     * 
     * @return the firstQuality value.
     */
    public FirstQuality firstQuality() {
        return this.innerProperties() == null ? null : this.innerProperties().firstQuality();
    }

    /**
     * Set the firstQuality property: The first quality.
     * 
     * @param firstQuality the firstQuality value to set.
     * @return the AssetFilterInner object itself.
     */
    public AssetFilterInner withFirstQuality(FirstQuality firstQuality) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MediaFilterProperties();
        }
        this.innerProperties().withFirstQuality(firstQuality);
        return this;
    }

    /**
     * Get the tracks property: The tracks selection conditions.
     * 
     * @return the tracks value.
     */
    public List<FilterTrackSelection> tracks() {
        return this.innerProperties() == null ? null : this.innerProperties().tracks();
    }

    /**
     * Set the tracks property: The tracks selection conditions.
     * 
     * @param tracks the tracks value to set.
     * @return the AssetFilterInner object itself.
     */
    public AssetFilterInner withTracks(List<FilterTrackSelection> tracks) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MediaFilterProperties();
        }
        this.innerProperties().withTracks(tracks);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssetFilterInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssetFilterInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssetFilterInner.
     */
    public static AssetFilterInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssetFilterInner deserializedAssetFilterInner = new AssetFilterInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAssetFilterInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAssetFilterInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAssetFilterInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedAssetFilterInner.innerProperties = MediaFilterProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedAssetFilterInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssetFilterInner;
        });
    }
}
