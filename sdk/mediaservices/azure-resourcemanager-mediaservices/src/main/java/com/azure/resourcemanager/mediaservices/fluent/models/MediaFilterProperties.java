// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mediaservices.models.FilterTrackSelection;
import com.azure.resourcemanager.mediaservices.models.FirstQuality;
import com.azure.resourcemanager.mediaservices.models.PresentationTimeRange;
import java.io.IOException;
import java.util.List;

/**
 * The Media Filter properties.
 */
@Fluent
public final class MediaFilterProperties implements JsonSerializable<MediaFilterProperties> {
    /*
     * The presentation time range.
     */
    private PresentationTimeRange presentationTimeRange;

    /*
     * The first quality.
     */
    private FirstQuality firstQuality;

    /*
     * The tracks selection conditions.
     */
    private List<FilterTrackSelection> tracks;

    /**
     * Creates an instance of MediaFilterProperties class.
     */
    public MediaFilterProperties() {
    }

    /**
     * Get the presentationTimeRange property: The presentation time range.
     * 
     * @return the presentationTimeRange value.
     */
    public PresentationTimeRange presentationTimeRange() {
        return this.presentationTimeRange;
    }

    /**
     * Set the presentationTimeRange property: The presentation time range.
     * 
     * @param presentationTimeRange the presentationTimeRange value to set.
     * @return the MediaFilterProperties object itself.
     */
    public MediaFilterProperties withPresentationTimeRange(PresentationTimeRange presentationTimeRange) {
        this.presentationTimeRange = presentationTimeRange;
        return this;
    }

    /**
     * Get the firstQuality property: The first quality.
     * 
     * @return the firstQuality value.
     */
    public FirstQuality firstQuality() {
        return this.firstQuality;
    }

    /**
     * Set the firstQuality property: The first quality.
     * 
     * @param firstQuality the firstQuality value to set.
     * @return the MediaFilterProperties object itself.
     */
    public MediaFilterProperties withFirstQuality(FirstQuality firstQuality) {
        this.firstQuality = firstQuality;
        return this;
    }

    /**
     * Get the tracks property: The tracks selection conditions.
     * 
     * @return the tracks value.
     */
    public List<FilterTrackSelection> tracks() {
        return this.tracks;
    }

    /**
     * Set the tracks property: The tracks selection conditions.
     * 
     * @param tracks the tracks value to set.
     * @return the MediaFilterProperties object itself.
     */
    public MediaFilterProperties withTracks(List<FilterTrackSelection> tracks) {
        this.tracks = tracks;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (presentationTimeRange() != null) {
            presentationTimeRange().validate();
        }
        if (firstQuality() != null) {
            firstQuality().validate();
        }
        if (tracks() != null) {
            tracks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("presentationTimeRange", this.presentationTimeRange);
        jsonWriter.writeJsonField("firstQuality", this.firstQuality);
        jsonWriter.writeArrayField("tracks", this.tracks, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MediaFilterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MediaFilterProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MediaFilterProperties.
     */
    public static MediaFilterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MediaFilterProperties deserializedMediaFilterProperties = new MediaFilterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("presentationTimeRange".equals(fieldName)) {
                    deserializedMediaFilterProperties.presentationTimeRange = PresentationTimeRange.fromJson(reader);
                } else if ("firstQuality".equals(fieldName)) {
                    deserializedMediaFilterProperties.firstQuality = FirstQuality.fromJson(reader);
                } else if ("tracks".equals(fieldName)) {
                    List<FilterTrackSelection> tracks
                        = reader.readArray(reader1 -> FilterTrackSelection.fromJson(reader1));
                    deserializedMediaFilterProperties.tracks = tracks;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMediaFilterProperties;
        });
    }
}
