// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.StreamingPolicyInner;
import com.azure.resourcemanager.mediaservices.models.CommonEncryptionCbcs;
import com.azure.resourcemanager.mediaservices.models.CommonEncryptionCenc;
import com.azure.resourcemanager.mediaservices.models.EnvelopeEncryption;
import com.azure.resourcemanager.mediaservices.models.NoEncryption;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class StreamingPolicyInnerTests {
    @Test
    public void testDeserialize() {
        StreamingPolicyInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"created\":\"2021-02-13T14:15:12Z\",\"defaultContentKeyPolicyName\":\"hrfou\",\"envelopeEncryption\":{\"clearTracks\":[],\"customKeyAcquisitionUrlTemplate\":\"pwiyzvqtm\"},\"commonEncryptionCenc\":{\"clearTracks\":[]},\"commonEncryptionCbcs\":{\"clearTracks\":[]},\"noEncryption\":{}},\"id\":\"quxvypomgkop\",\"name\":\"whojvp\",\"type\":\"jqg\"}")
                .toObject(StreamingPolicyInner.class);
        Assertions.assertEquals("hrfou", model.defaultContentKeyPolicyName());
        Assertions.assertEquals("pwiyzvqtm", model.envelopeEncryption().customKeyAcquisitionUrlTemplate());
    }

    @Test
    public void testSerialize() {
        StreamingPolicyInner model =
            new StreamingPolicyInner()
                .withDefaultContentKeyPolicyName("hrfou")
                .withEnvelopeEncryption(
                    new EnvelopeEncryption()
                        .withClearTracks(Arrays.asList())
                        .withCustomKeyAcquisitionUrlTemplate("pwiyzvqtm"))
                .withCommonEncryptionCenc(new CommonEncryptionCenc().withClearTracks(Arrays.asList()))
                .withCommonEncryptionCbcs(new CommonEncryptionCbcs().withClearTracks(Arrays.asList()))
                .withNoEncryption(new NoEncryption());
        model = BinaryData.fromObject(model).toObject(StreamingPolicyInner.class);
        Assertions.assertEquals("hrfou", model.defaultContentKeyPolicyName());
        Assertions.assertEquals("pwiyzvqtm", model.envelopeEncryption().customKeyAcquisitionUrlTemplate());
    }
}
