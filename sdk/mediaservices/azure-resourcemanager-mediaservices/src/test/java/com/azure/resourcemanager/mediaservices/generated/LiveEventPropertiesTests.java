// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.LiveEventProperties;
import com.azure.resourcemanager.mediaservices.models.CrossSiteAccessPolicies;
import com.azure.resourcemanager.mediaservices.models.LiveEventEncoding;
import com.azure.resourcemanager.mediaservices.models.LiveEventEncodingType;
import com.azure.resourcemanager.mediaservices.models.LiveEventEndpoint;
import com.azure.resourcemanager.mediaservices.models.LiveEventInput;
import com.azure.resourcemanager.mediaservices.models.LiveEventInputAccessControl;
import com.azure.resourcemanager.mediaservices.models.LiveEventInputProtocol;
import com.azure.resourcemanager.mediaservices.models.LiveEventOutputTranscriptionTrack;
import com.azure.resourcemanager.mediaservices.models.LiveEventPreview;
import com.azure.resourcemanager.mediaservices.models.LiveEventPreviewAccessControl;
import com.azure.resourcemanager.mediaservices.models.LiveEventTranscription;
import com.azure.resourcemanager.mediaservices.models.StreamOptionsFlag;
import com.azure.resourcemanager.mediaservices.models.StretchMode;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class LiveEventPropertiesTests {
    @Test
    public void testDeserialize() {
        LiveEventProperties model =
            BinaryData
                .fromString(
                    "{\"description\":\"ss\",\"input\":{\"streamingProtocol\":\"RTMP\",\"accessControl\":{},\"keyFrameIntervalDuration\":\"bdsrez\",\"accessToken\":\"rhneuyowq\",\"endpoints\":[{\"protocol\":\"t\",\"url\":\"ib\"}]},\"preview\":{\"endpoints\":[{\"protocol\":\"ikpzimejza\",\"url\":\"fzxiavrmb\"},{\"protocol\":\"nokixrjqcirgz\",\"url\":\"rlazszrnw\"},{\"protocol\":\"indfpwpjyl\",\"url\":\"tlhflsjcdhszf\"}],\"accessControl\":{},\"previewLocator\":\"gofel\",\"streamingPolicyName\":\"grqmqhldvrii\",\"alternativeMediaId\":\"jnalghf\"},\"encoding\":{\"encodingType\":\"None\",\"presetName\":\"ex\",\"stretchMode\":\"AutoFit\",\"keyFrameInterval\":\"PT63H20M12S\"},\"transcriptions\":[{\"language\":\"hhahhxvrhmzkwpjg\",\"inputTrackSelection\":[],\"outputTranscriptionTrack\":{\"trackName\":\"ughftqsx\"}},{\"language\":\"xujxuknd\",\"inputTrackSelection\":[],\"outputTranscriptionTrack\":{\"trackName\":\"rjguufzdmsyqtf\"}},{\"language\":\"whbotzingamv\",\"inputTrackSelection\":[],\"outputTranscriptionTrack\":{\"trackName\":\"szqzudphqamv\"}}],\"provisioningState\":\"fwynwcvtbvkay\",\"resourceState\":\"Stopping\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"yqiatkzwp\",\"crossDomainPolicy\":\"p\"},\"useStaticHostname\":true,\"hostnamePrefix\":\"a\",\"streamOptions\":[\"Default\"],\"created\":\"2021-09-14T12:47:05Z\",\"lastModified\":\"2021-07-14T16:40:38Z\"}")
                .toObject(LiveEventProperties.class);
        Assertions.assertEquals("ss", model.description());
        Assertions.assertEquals(LiveEventInputProtocol.RTMP, model.input().streamingProtocol());
        Assertions.assertEquals("bdsrez", model.input().keyFrameIntervalDuration());
        Assertions.assertEquals("rhneuyowq", model.input().accessToken());
        Assertions.assertEquals("t", model.input().endpoints().get(0).protocol());
        Assertions.assertEquals("ib", model.input().endpoints().get(0).url());
        Assertions.assertEquals("ikpzimejza", model.preview().endpoints().get(0).protocol());
        Assertions.assertEquals("fzxiavrmb", model.preview().endpoints().get(0).url());
        Assertions.assertEquals("gofel", model.preview().previewLocator());
        Assertions.assertEquals("grqmqhldvrii", model.preview().streamingPolicyName());
        Assertions.assertEquals("jnalghf", model.preview().alternativeMediaId());
        Assertions.assertEquals(LiveEventEncodingType.NONE, model.encoding().encodingType());
        Assertions.assertEquals("ex", model.encoding().presetName());
        Assertions.assertEquals(StretchMode.AUTO_FIT, model.encoding().stretchMode());
        Assertions.assertEquals(Duration.parse("PT63H20M12S"), model.encoding().keyFrameInterval());
        Assertions.assertEquals("hhahhxvrhmzkwpjg", model.transcriptions().get(0).language());
        Assertions.assertEquals("ughftqsx", model.transcriptions().get(0).outputTranscriptionTrack().trackName());
        Assertions.assertEquals("yqiatkzwp", model.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("p", model.crossSiteAccessPolicies().crossDomainPolicy());
        Assertions.assertEquals(true, model.useStaticHostname());
        Assertions.assertEquals("a", model.hostnamePrefix());
        Assertions.assertEquals(StreamOptionsFlag.DEFAULT, model.streamOptions().get(0));
    }

    @Test
    public void testSerialize() {
        LiveEventProperties model =
            new LiveEventProperties()
                .withDescription("ss")
                .withInput(
                    new LiveEventInput()
                        .withStreamingProtocol(LiveEventInputProtocol.RTMP)
                        .withAccessControl(new LiveEventInputAccessControl())
                        .withKeyFrameIntervalDuration("bdsrez")
                        .withAccessToken("rhneuyowq")
                        .withEndpoints(Arrays.asList(new LiveEventEndpoint().withProtocol("t").withUrl("ib"))))
                .withPreview(
                    new LiveEventPreview()
                        .withEndpoints(
                            Arrays
                                .asList(
                                    new LiveEventEndpoint().withProtocol("ikpzimejza").withUrl("fzxiavrmb"),
                                    new LiveEventEndpoint().withProtocol("nokixrjqcirgz").withUrl("rlazszrnw"),
                                    new LiveEventEndpoint().withProtocol("indfpwpjyl").withUrl("tlhflsjcdhszf")))
                        .withAccessControl(new LiveEventPreviewAccessControl())
                        .withPreviewLocator("gofel")
                        .withStreamingPolicyName("grqmqhldvrii")
                        .withAlternativeMediaId("jnalghf"))
                .withEncoding(
                    new LiveEventEncoding()
                        .withEncodingType(LiveEventEncodingType.NONE)
                        .withPresetName("ex")
                        .withStretchMode(StretchMode.AUTO_FIT)
                        .withKeyFrameInterval(Duration.parse("PT63H20M12S")))
                .withTranscriptions(
                    Arrays
                        .asList(
                            new LiveEventTranscription()
                                .withLanguage("hhahhxvrhmzkwpjg")
                                .withInputTrackSelection(Arrays.asList())
                                .withOutputTranscriptionTrack(
                                    new LiveEventOutputTranscriptionTrack().withTrackName("ughftqsx")),
                            new LiveEventTranscription()
                                .withLanguage("xujxuknd")
                                .withInputTrackSelection(Arrays.asList())
                                .withOutputTranscriptionTrack(
                                    new LiveEventOutputTranscriptionTrack().withTrackName("rjguufzdmsyqtf")),
                            new LiveEventTranscription()
                                .withLanguage("whbotzingamv")
                                .withInputTrackSelection(Arrays.asList())
                                .withOutputTranscriptionTrack(
                                    new LiveEventOutputTranscriptionTrack().withTrackName("szqzudphqamv"))))
                .withCrossSiteAccessPolicies(
                    new CrossSiteAccessPolicies().withClientAccessPolicy("yqiatkzwp").withCrossDomainPolicy("p"))
                .withUseStaticHostname(true)
                .withHostnamePrefix("a")
                .withStreamOptions(Arrays.asList(StreamOptionsFlag.DEFAULT));
        model = BinaryData.fromObject(model).toObject(LiveEventProperties.class);
        Assertions.assertEquals("ss", model.description());
        Assertions.assertEquals(LiveEventInputProtocol.RTMP, model.input().streamingProtocol());
        Assertions.assertEquals("bdsrez", model.input().keyFrameIntervalDuration());
        Assertions.assertEquals("rhneuyowq", model.input().accessToken());
        Assertions.assertEquals("t", model.input().endpoints().get(0).protocol());
        Assertions.assertEquals("ib", model.input().endpoints().get(0).url());
        Assertions.assertEquals("ikpzimejza", model.preview().endpoints().get(0).protocol());
        Assertions.assertEquals("fzxiavrmb", model.preview().endpoints().get(0).url());
        Assertions.assertEquals("gofel", model.preview().previewLocator());
        Assertions.assertEquals("grqmqhldvrii", model.preview().streamingPolicyName());
        Assertions.assertEquals("jnalghf", model.preview().alternativeMediaId());
        Assertions.assertEquals(LiveEventEncodingType.NONE, model.encoding().encodingType());
        Assertions.assertEquals("ex", model.encoding().presetName());
        Assertions.assertEquals(StretchMode.AUTO_FIT, model.encoding().stretchMode());
        Assertions.assertEquals(Duration.parse("PT63H20M12S"), model.encoding().keyFrameInterval());
        Assertions.assertEquals("hhahhxvrhmzkwpjg", model.transcriptions().get(0).language());
        Assertions.assertEquals("ughftqsx", model.transcriptions().get(0).outputTranscriptionTrack().trackName());
        Assertions.assertEquals("yqiatkzwp", model.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("p", model.crossSiteAccessPolicies().crossDomainPolicy());
        Assertions.assertEquals(true, model.useStaticHostname());
        Assertions.assertEquals("a", model.hostnamePrefix());
        Assertions.assertEquals(StreamOptionsFlag.DEFAULT, model.streamOptions().get(0));
    }
}
