// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.StreamingLocatorInner;
import com.azure.resourcemanager.mediaservices.models.StreamingLocatorCollection;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class StreamingLocatorCollectionTests {
    @Test
    public void testDeserialize() {
        StreamingLocatorCollection model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"assetName\":\"kgymareqnajxqug\",\"created\":\"2020-12-30T20:00:15Z\",\"startTime\":\"2021-03-29T06:53:32Z\",\"endTime\":\"2020-12-25T16:19:20Z\",\"streamingPolicyName\":\"ddg\",\"defaultContentKeyPolicyName\":\"ofwq\",\"contentKeys\":[],\"alternativeMediaId\":\"alkrmn\",\"filters\":[]},\"id\":\"pxacqqudfn\",\"name\":\"yxbaaabjyvayf\",\"type\":\"imrzrtuzqog\"},{\"properties\":{\"assetName\":\"xnevfdnwn\",\"created\":\"2021-11-23T01:14:46Z\",\"startTime\":\"2021-07-23T17:12:42Z\",\"endTime\":\"2021-02-11T18:35:50Z\",\"streamingPolicyName\":\"ceuzsoibjudpfr\",\"defaultContentKeyPolicyName\":\"rthzvaytdwkqbrqu\",\"contentKeys\":[],\"alternativeMediaId\":\"xhexiilivpdti\",\"filters\":[]},\"id\":\"tdqoaxoruzfgsq\",\"name\":\"yfxrx\",\"type\":\"l\"},{\"properties\":{\"assetName\":\"tramxjez\",\"created\":\"2021-11-14T21:34:49Z\",\"startTime\":\"2021-07-30T12:05:38Z\",\"endTime\":\"2021-09-16T02:47:22Z\",\"streamingPolicyName\":\"cvydypatdoo\",\"defaultContentKeyPolicyName\":\"jkniodko\",\"contentKeys\":[],\"alternativeMediaId\":\"wnujhemmsbvdk\",\"filters\":[]},\"id\":\"dtjinfw\",\"name\":\"lfltka\",\"type\":\"jvefkdlfoakggkfp\"}],\"@odata.nextLink\":\"ao\"}")
                .toObject(StreamingLocatorCollection.class);
        Assertions.assertEquals("kgymareqnajxqug", model.value().get(0).assetName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-29T06:53:32Z"), model.value().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-25T16:19:20Z"), model.value().get(0).endTime());
        Assertions.assertEquals("ddg", model.value().get(0).streamingPolicyName());
        Assertions.assertEquals("ofwq", model.value().get(0).defaultContentKeyPolicyName());
        Assertions.assertEquals("alkrmn", model.value().get(0).alternativeMediaId());
    }

    @Test
    public void testSerialize() {
        StreamingLocatorCollection model =
            new StreamingLocatorCollection()
                .withValue(
                    Arrays
                        .asList(
                            new StreamingLocatorInner()
                                .withAssetName("kgymareqnajxqug")
                                .withStartTime(OffsetDateTime.parse("2021-03-29T06:53:32Z"))
                                .withEndTime(OffsetDateTime.parse("2020-12-25T16:19:20Z"))
                                .withStreamingPolicyName("ddg")
                                .withDefaultContentKeyPolicyName("ofwq")
                                .withContentKeys(Arrays.asList())
                                .withAlternativeMediaId("alkrmn")
                                .withFilters(Arrays.asList()),
                            new StreamingLocatorInner()
                                .withAssetName("xnevfdnwn")
                                .withStartTime(OffsetDateTime.parse("2021-07-23T17:12:42Z"))
                                .withEndTime(OffsetDateTime.parse("2021-02-11T18:35:50Z"))
                                .withStreamingPolicyName("ceuzsoibjudpfr")
                                .withDefaultContentKeyPolicyName("rthzvaytdwkqbrqu")
                                .withContentKeys(Arrays.asList())
                                .withAlternativeMediaId("xhexiilivpdti")
                                .withFilters(Arrays.asList()),
                            new StreamingLocatorInner()
                                .withAssetName("tramxjez")
                                .withStartTime(OffsetDateTime.parse("2021-07-30T12:05:38Z"))
                                .withEndTime(OffsetDateTime.parse("2021-09-16T02:47:22Z"))
                                .withStreamingPolicyName("cvydypatdoo")
                                .withDefaultContentKeyPolicyName("jkniodko")
                                .withContentKeys(Arrays.asList())
                                .withAlternativeMediaId("wnujhemmsbvdk")
                                .withFilters(Arrays.asList())));
        model = BinaryData.fromObject(model).toObject(StreamingLocatorCollection.class);
        Assertions.assertEquals("kgymareqnajxqug", model.value().get(0).assetName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-29T06:53:32Z"), model.value().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-25T16:19:20Z"), model.value().get(0).endTime());
        Assertions.assertEquals("ddg", model.value().get(0).streamingPolicyName());
        Assertions.assertEquals("ofwq", model.value().get(0).defaultContentKeyPolicyName());
        Assertions.assertEquals("alkrmn", model.value().get(0).alternativeMediaId());
    }
}
