// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.fluent.models.StreamingEndpointInner;
import com.azure.resourcemanager.mediaservices.models.ArmStreamingEndpointCurrentSku;
import com.azure.resourcemanager.mediaservices.models.CrossSiteAccessPolicies;
import com.azure.resourcemanager.mediaservices.models.StreamingEndpointAccessControl;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class StreamingEndpointsClientCreateTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"description\":\"hnl\",\"scaleUnits\":1862630746,\"availabilitySetName\":\"bldxeaclgscho\",\"accessControl\":{},\"maxCacheAge\":3947758974496733605,\"customHostNames\":[\"oucs\",\"fldpuviyfc\",\"abeolhbhlvbm\",\"uqibsxtkcu\"],\"hostName\":\"b\",\"cdnEnabled\":false,\"cdnProvider\":\"fs\",\"cdnProfile\":\"wlkjxn\",\"provisioningState\":\"Succeeded\",\"resourceState\":\"Stopping\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"ykizmdksaoaf\",\"crossDomainPolicy\":\"uqvoxmycjimryv\"},\"freeTrialEndTime\":\"2021-05-13T21:52:08Z\",\"created\":\"2021-04-28T08:25:10Z\",\"lastModified\":\"2020-12-22T05:57:37Z\"},\"sku\":{\"name\":\"w\",\"capacity\":886481009},\"location\":\"dsxwefoh\",\"tags\":{\"mtkhlowkxxpvbr\":\"vopwndyqleallk\",\"lhikcyychunsj\":\"fjmzsyzfho\",\"hv\":\"pjrtws\"},\"id\":\"uic\",\"name\":\"hvtrrmhwrbfdpyf\",\"type\":\"ubhvj\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        StreamingEndpointInner response =
            manager
                .serviceClient()
                .getStreamingEndpoints()
                .create(
                    "ngnbdxxew",
                    "ninvudbchaqdt",
                    "qecrqctmxx",
                    new StreamingEndpointInner()
                        .withLocation("uicdhzbdybwwg")
                        .withTags(
                            mapOf(
                                "fmuvapckccr",
                                "ibidmhmwffp",
                                "oxoyyukp",
                                "vwe",
                                "shbraga",
                                "aimmoiroqb",
                                "vbopfppdbwnu",
                                "yyrmfsvbp"))
                        .withSku(new ArmStreamingEndpointCurrentSku().withCapacity(271719590))
                        .withDescription("dmflhuytx")
                        .withScaleUnits(822969002)
                        .withAvailabilitySetName("zna")
                        .withAccessControl(new StreamingEndpointAccessControl())
                        .withMaxCacheAge(3918820326691317186L)
                        .withCustomHostNames(Arrays.asList("oxczytp", "wnwvroevytlyokr", "rouuxvnsasbcry"))
                        .withCdnEnabled(false)
                        .withCdnProvider("bdxnaz")
                        .withCdnProfile("kml")
                        .withCrossSiteAccessPolicies(
                            new CrossSiteAccessPolicies().withClientAccessPolicy("fg").withCrossDomainPolicy("ba")),
                    false,
                    Context.NONE);

        Assertions.assertEquals("dsxwefoh", response.location());
        Assertions.assertEquals("vopwndyqleallk", response.tags().get("mtkhlowkxxpvbr"));
        Assertions.assertEquals(886481009, response.sku().capacity());
        Assertions.assertEquals("hnl", response.description());
        Assertions.assertEquals(1862630746, response.scaleUnits());
        Assertions.assertEquals("bldxeaclgscho", response.availabilitySetName());
        Assertions.assertEquals(3947758974496733605L, response.maxCacheAge());
        Assertions.assertEquals("oucs", response.customHostNames().get(0));
        Assertions.assertEquals(false, response.cdnEnabled());
        Assertions.assertEquals("fs", response.cdnProvider());
        Assertions.assertEquals("wlkjxn", response.cdnProfile());
        Assertions.assertEquals("ykizmdksaoaf", response.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("uqvoxmycjimryv", response.crossSiteAccessPolicies().crossDomainPolicy());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
