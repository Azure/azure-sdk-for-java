// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.fluent.models.MediaServiceInner;
import com.azure.resourcemanager.mediaservices.models.AccountEncryption;
import com.azure.resourcemanager.mediaservices.models.AccountEncryptionKeyType;
import com.azure.resourcemanager.mediaservices.models.KeyDelivery;
import com.azure.resourcemanager.mediaservices.models.MediaServiceIdentity;
import com.azure.resourcemanager.mediaservices.models.PublicNetworkAccess;
import com.azure.resourcemanager.mediaservices.models.StorageAuthentication;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MediaservicesClientCreateOrUpdateTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"storageAccounts\":[],\"storageAuthentication\":\"System\",\"encryption\":{\"type\":\"SystemKey\",\"status\":\"hu\"},\"keyDelivery\":{},\"publicNetworkAccess\":\"Enabled\",\"provisioningState\":\"Succeeded\",\"privateEndpointConnections\":[]},\"identity\":{\"type\":\"bmftpmdt\",\"userAssignedIdentities\":{}},\"location\":\"fvnz\",\"tags\":{\"tpvopvpbdb\":\"t\",\"ibcysihsgqc\":\"qgqqihedsvqwthmk\",\"ohdxbzlmcmu\":\"dhohsdtmcdzsuf\"},\"id\":\"pcvhdbevwqqxeys\",\"name\":\"onqzinkfkbgbzbow\",\"type\":\"eqocljmygvk\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        MediaServiceInner response =
            manager
                .serviceClient()
                .getMediaservices()
                .createOrUpdate(
                    "lajrnwxacevehj",
                    "uyxoaf",
                    new MediaServiceInner()
                        .withLocation("h")
                        .withTags(mapOf("tdfuxt", "rlpyznuciqdsmexi", "nlj", "asiibmiybnnust"))
                        .withIdentity(new MediaServiceIdentity().withType("ypoq").withUserAssignedIdentities(mapOf()))
                        .withStorageAccounts(Arrays.asList())
                        .withStorageAuthentication(StorageAuthentication.SYSTEM)
                        .withEncryption(new AccountEncryption().withType(AccountEncryptionKeyType.SYSTEM_KEY))
                        .withKeyDelivery(new KeyDelivery())
                        .withPublicNetworkAccess(PublicNetworkAccess.DISABLED),
                    Context.NONE);

        Assertions.assertEquals("fvnz", response.location());
        Assertions.assertEquals("t", response.tags().get("tpvopvpbdb"));
        Assertions.assertEquals("bmftpmdt", response.identity().type());
        Assertions.assertEquals(StorageAuthentication.SYSTEM, response.storageAuthentication());
        Assertions.assertEquals(AccountEncryptionKeyType.SYSTEM_KEY, response.encryption().type());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.publicNetworkAccess());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
