// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.EdgeUsageDataCollectionPolicy;
import com.azure.resourcemanager.mediaservices.models.EdgeUsageDataEventHub;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class EdgeUsageDataCollectionPolicyTests {
    @Test
    public void testDeserialize() {
        EdgeUsageDataCollectionPolicy model =
            BinaryData
                .fromString(
                    "{\"dataCollectionFrequency\":\"dobpxjmflbvvn\",\"dataReportingFrequency\":\"rkcciwwzjuqk\",\"maxAllowedUnreportedUsageDuration\":\"sa\",\"eventHubDetails\":{\"name\":\"ku\",\"namespace\":\"oskg\",\"token\":\"auu\"}}")
                .toObject(EdgeUsageDataCollectionPolicy.class);
        Assertions.assertEquals("dobpxjmflbvvn", model.dataCollectionFrequency());
        Assertions.assertEquals("rkcciwwzjuqk", model.dataReportingFrequency());
        Assertions.assertEquals("sa", model.maxAllowedUnreportedUsageDuration());
        Assertions.assertEquals("ku", model.eventHubDetails().name());
        Assertions.assertEquals("oskg", model.eventHubDetails().namespace());
        Assertions.assertEquals("auu", model.eventHubDetails().token());
    }

    @Test
    public void testSerialize() {
        EdgeUsageDataCollectionPolicy model =
            new EdgeUsageDataCollectionPolicy()
                .withDataCollectionFrequency("dobpxjmflbvvn")
                .withDataReportingFrequency("rkcciwwzjuqk")
                .withMaxAllowedUnreportedUsageDuration("sa")
                .withEventHubDetails(new EdgeUsageDataEventHub().withName("ku").withNamespace("oskg").withToken("auu"));
        model = BinaryData.fromObject(model).toObject(EdgeUsageDataCollectionPolicy.class);
        Assertions.assertEquals("dobpxjmflbvvn", model.dataCollectionFrequency());
        Assertions.assertEquals("rkcciwwzjuqk", model.dataReportingFrequency());
        Assertions.assertEquals("sa", model.maxAllowedUnreportedUsageDuration());
        Assertions.assertEquals("ku", model.eventHubDetails().name());
        Assertions.assertEquals("oskg", model.eventHubDetails().namespace());
        Assertions.assertEquals("auu", model.eventHubDetails().token());
    }
}
