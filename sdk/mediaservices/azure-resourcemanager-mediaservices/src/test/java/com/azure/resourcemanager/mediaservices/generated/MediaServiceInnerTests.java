// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.MediaServiceInner;
import com.azure.resourcemanager.mediaservices.models.AccountEncryption;
import com.azure.resourcemanager.mediaservices.models.AccountEncryptionKeyType;
import com.azure.resourcemanager.mediaservices.models.KeyDelivery;
import com.azure.resourcemanager.mediaservices.models.MediaServiceIdentity;
import com.azure.resourcemanager.mediaservices.models.PublicNetworkAccess;
import com.azure.resourcemanager.mediaservices.models.StorageAccount;
import com.azure.resourcemanager.mediaservices.models.StorageAccountType;
import com.azure.resourcemanager.mediaservices.models.StorageAuthentication;
import com.azure.resourcemanager.mediaservices.models.UserAssignedManagedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class MediaServiceInnerTests {
    @Test
    public void testDeserialize() {
        MediaServiceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"storageAccounts\":[{\"id\":\"a\",\"type\":\"Primary\",\"status\":\"dtqajzyulpkudj\"},{\"id\":\"lkhbz\",\"type\":\"Primary\",\"status\":\"gzgqexzlo\"}],\"storageAuthentication\":\"System\",\"encryption\":{\"type\":\"SystemKey\",\"status\":\"rhhbcs\"},\"keyDelivery\":{},\"publicNetworkAccess\":\"Enabled\",\"provisioningState\":\"Succeeded\",\"privateEndpointConnections\":[{\"id\":\"odxobnbdxkqpxok\",\"name\":\"jionpimexgstxgc\",\"type\":\"odgmaajrmvdjwz\"}]},\"identity\":{\"type\":\"vmclw\",\"userAssignedIdentities\":{\"ctbzaq\":{},\"y\":{},\"bfkgukdkex\":{},\"ofmx\":{}}},\"location\":\"x\",\"tags\":{\"dtocj\":\"pg\"},\"id\":\"xhvpmoue\",\"name\":\"hd\",\"type\":\"xibqeojnx\"}")
                .toObject(MediaServiceInner.class);
        Assertions.assertEquals("x", model.location());
        Assertions.assertEquals("pg", model.tags().get("dtocj"));
        Assertions.assertEquals("vmclw", model.identity().type());
        Assertions.assertEquals("a", model.storageAccounts().get(0).id());
        Assertions.assertEquals(StorageAccountType.PRIMARY, model.storageAccounts().get(0).type());
        Assertions.assertEquals(StorageAuthentication.SYSTEM, model.storageAuthentication());
        Assertions.assertEquals(AccountEncryptionKeyType.SYSTEM_KEY, model.encryption().type());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
    }

    @Test
    public void testSerialize() {
        MediaServiceInner model =
            new MediaServiceInner()
                .withLocation("x")
                .withTags(mapOf("dtocj", "pg"))
                .withIdentity(
                    new MediaServiceIdentity()
                        .withType("vmclw")
                        .withUserAssignedIdentities(
                            mapOf(
                                "ctbzaq",
                                new UserAssignedManagedIdentity(),
                                "y",
                                new UserAssignedManagedIdentity(),
                                "bfkgukdkex",
                                new UserAssignedManagedIdentity(),
                                "ofmx",
                                new UserAssignedManagedIdentity())))
                .withStorageAccounts(
                    Arrays
                        .asList(
                            new StorageAccount().withId("a").withType(StorageAccountType.PRIMARY),
                            new StorageAccount().withId("lkhbz").withType(StorageAccountType.PRIMARY)))
                .withStorageAuthentication(StorageAuthentication.SYSTEM)
                .withEncryption(new AccountEncryption().withType(AccountEncryptionKeyType.SYSTEM_KEY))
                .withKeyDelivery(new KeyDelivery())
                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED);
        model = BinaryData.fromObject(model).toObject(MediaServiceInner.class);
        Assertions.assertEquals("x", model.location());
        Assertions.assertEquals("pg", model.tags().get("dtocj"));
        Assertions.assertEquals("vmclw", model.identity().type());
        Assertions.assertEquals("a", model.storageAccounts().get(0).id());
        Assertions.assertEquals(StorageAccountType.PRIMARY, model.storageAccounts().get(0).type());
        Assertions.assertEquals(StorageAuthentication.SYSTEM, model.storageAuthentication());
        Assertions.assertEquals(AccountEncryptionKeyType.SYSTEM_KEY, model.encryption().type());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
