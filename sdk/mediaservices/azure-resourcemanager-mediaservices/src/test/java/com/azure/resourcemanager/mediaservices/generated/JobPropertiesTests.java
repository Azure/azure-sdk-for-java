// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.JobProperties;
import com.azure.resourcemanager.mediaservices.models.JobInput;
import com.azure.resourcemanager.mediaservices.models.JobOutput;
import com.azure.resourcemanager.mediaservices.models.Preset;
import com.azure.resourcemanager.mediaservices.models.Priority;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobPropertiesTests {
    @Test
    public void testDeserialize() {
        JobProperties model =
            BinaryData
                .fromString(
                    "{\"created\":\"2021-10-08T09:31:49Z\",\"state\":\"Processing\",\"description\":\"pehindoygm\",\"input\":{\"@odata.type\":\"JobInput\"},\"lastModified\":\"2021-04-11T14:37:21Z\",\"outputs\":[{\"@odata.type\":\"JobOutput\",\"error\":{\"code\":\"DownloadNotAccessible\",\"message\":\"dslgnayqigynduh\",\"category\":\"Content\",\"retry\":\"DoNotRetry\",\"details\":[]},\"presetOverride\":{\"@odata.type\":\"Preset\"},\"state\":\"Queued\",\"progress\":1615397265,\"label\":\"olbgycduiertgccy\",\"startTime\":\"2021-01-19T22:33:55Z\",\"endTime\":\"2021-01-23T19:50:46Z\"},{\"@odata.type\":\"JobOutput\",\"error\":{\"code\":\"ServiceError\",\"message\":\"qlfmmdnbb\",\"category\":\"Service\",\"retry\":\"MayRetry\",\"details\":[]},\"presetOverride\":{\"@odata.type\":\"Preset\"},\"state\":\"Scheduled\",\"progress\":287355588,\"label\":\"yhz\",\"startTime\":\"2021-07-22T13:49:27Z\",\"endTime\":\"2021-03-28T04:38:02Z\"},{\"@odata.type\":\"JobOutput\",\"error\":{\"code\":\"ContentMalformed\",\"message\":\"nvdfznuda\",\"category\":\"Configuration\",\"retry\":\"DoNotRetry\",\"details\":[]},\"presetOverride\":{\"@odata.type\":\"Preset\"},\"state\":\"Canceling\",\"progress\":1795882398,\"label\":\"pstdbhhxsrzd\",\"startTime\":\"2021-07-30T17:00:54Z\",\"endTime\":\"2021-03-02T12:53:08Z\"},{\"@odata.type\":\"JobOutput\",\"error\":{\"code\":\"UploadTransientError\",\"message\":\"t\",\"category\":\"Configuration\",\"retry\":\"MayRetry\",\"details\":[]},\"presetOverride\":{\"@odata.type\":\"Preset\"},\"state\":\"Finished\",\"progress\":868551021,\"label\":\"sslswtmweriof\",\"startTime\":\"2021-03-20T05:47:35Z\",\"endTime\":\"2021-11-27T22:56:12Z\"}],\"priority\":\"Normal\",\"correlationData\":{\"zhedplvwiw\":\"bnetshh\",\"tppjflcx\":\"bmwmbesldnkw\"},\"startTime\":\"2021-06-10T22:36:54Z\",\"endTime\":\"2021-06-12T02:17:30Z\"}")
                .toObject(JobProperties.class);
        Assertions.assertEquals("pehindoygm", model.description());
        Assertions.assertEquals("olbgycduiertgccy", model.outputs().get(0).label());
        Assertions.assertEquals(Priority.NORMAL, model.priority());
        Assertions.assertEquals("bnetshh", model.correlationData().get("zhedplvwiw"));
    }

    @Test
    public void testSerialize() {
        JobProperties model =
            new JobProperties()
                .withDescription("pehindoygm")
                .withInput(new JobInput())
                .withOutputs(
                    Arrays
                        .asList(
                            new JobOutput().withPresetOverride(new Preset()).withLabel("olbgycduiertgccy"),
                            new JobOutput().withPresetOverride(new Preset()).withLabel("yhz"),
                            new JobOutput().withPresetOverride(new Preset()).withLabel("pstdbhhxsrzd"),
                            new JobOutput().withPresetOverride(new Preset()).withLabel("sslswtmweriof")))
                .withPriority(Priority.NORMAL)
                .withCorrelationData(mapOf("zhedplvwiw", "bnetshh", "tppjflcx", "bmwmbesldnkw"));
        model = BinaryData.fromObject(model).toObject(JobProperties.class);
        Assertions.assertEquals("pehindoygm", model.description());
        Assertions.assertEquals("olbgycduiertgccy", model.outputs().get(0).label());
        Assertions.assertEquals(Priority.NORMAL, model.priority());
        Assertions.assertEquals("bnetshh", model.correlationData().get("zhedplvwiw"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
