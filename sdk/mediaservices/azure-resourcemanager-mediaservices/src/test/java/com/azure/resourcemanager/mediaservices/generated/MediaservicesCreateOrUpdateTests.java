// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.models.AccountEncryption;
import com.azure.resourcemanager.mediaservices.models.AccountEncryptionKeyType;
import com.azure.resourcemanager.mediaservices.models.KeyDelivery;
import com.azure.resourcemanager.mediaservices.models.MediaService;
import com.azure.resourcemanager.mediaservices.models.MediaServiceIdentity;
import com.azure.resourcemanager.mediaservices.models.PublicNetworkAccess;
import com.azure.resourcemanager.mediaservices.models.StorageAuthentication;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MediaservicesCreateOrUpdateTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"storageAccounts\":[],\"storageAuthentication\":\"ManagedIdentity\",\"encryption\":{\"type\":\"SystemKey\",\"status\":\"xijj\"},\"keyDelivery\":{},\"publicNetworkAccess\":\"Enabled\",\"provisioningState\":\"Succeeded\",\"privateEndpointConnections\":[]},\"identity\":{\"type\":\"mcjn\",\"userAssignedIdentities\":{}},\"location\":\"xtbjwgnyfusfzsv\",\"tags\":{\"rqryxynqn\":\"kzhajqglcfhm\",\"sovwxznptgoeiyb\":\"rd\",\"kvntjlrigjkskyri\":\"abpfhvfs\",\"aabzmif\":\"ovzidsx\"},\"id\":\"ygznmmaxrizk\",\"name\":\"obgop\",\"type\":\"lhslnelxieixyn\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        MediaService response =
            manager
                .mediaservices()
                .define("dlat")
                .withRegion("pbzpcpiljhahz")
                .withExistingResourceGroup("sbostzel")
                .withTags(mapOf("dbn", "h", "ubwefqs", "ieholewjwi", "qtferrqwexjkmf", "ap"))
                .withIdentity(new MediaServiceIdentity().withType("snmokayzej").withUserAssignedIdentities(mapOf()))
                .withStorageAccounts(Arrays.asList())
                .withStorageAuthentication(StorageAuthentication.MANAGED_IDENTITY)
                .withEncryption(new AccountEncryption().withType(AccountEncryptionKeyType.CUSTOMER_KEY))
                .withKeyDelivery(new KeyDelivery())
                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                .create();

        Assertions.assertEquals("xtbjwgnyfusfzsv", response.location());
        Assertions.assertEquals("kzhajqglcfhm", response.tags().get("rqryxynqn"));
        Assertions.assertEquals("mcjn", response.identity().type());
        Assertions.assertEquals(StorageAuthentication.MANAGED_IDENTITY, response.storageAuthentication());
        Assertions.assertEquals(AccountEncryptionKeyType.SYSTEM_KEY, response.encryption().type());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.publicNetworkAccess());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
