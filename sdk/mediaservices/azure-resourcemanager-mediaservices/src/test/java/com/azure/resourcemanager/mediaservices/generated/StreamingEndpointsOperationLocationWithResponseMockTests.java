// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.models.StreamingEndpoint;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class StreamingEndpointsOperationLocationWithResponseMockTests {
    @Test
    public void testOperationLocationWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"description\":\"hkpigqfusuckzmkw\",\"scaleUnits\":1504624884,\"availabilitySetName\":\"noxaxmqeqal\",\"accessControl\":{},\"maxCacheAge\":6242383697045005544,\"customHostNames\":[\"yynfsvkhgbv\",\"ta\",\"arfdlpukhpyrnei\"],\"hostName\":\"cpeogkhnmgbrou\",\"cdnEnabled\":false,\"cdnProvider\":\"hfhpfp\",\"cdnProfile\":\"jzoywjxhp\",\"provisioningState\":\"lontacnpq\",\"resourceState\":\"Scaling\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"uevrhrljyoogwxhn\",\"crossDomainPolicy\":\"uug\"},\"freeTrialEndTime\":\"2021-05-31T07:09:21Z\",\"created\":\"2021-07-09T02:41:49Z\",\"lastModified\":\"2021-10-19T15:43:20Z\"},\"sku\":{\"name\":\"fuarenlvhht\",\"capacity\":1178854738},\"location\":\"vnafvvkyfedevjbo\",\"tags\":{\"ymc\":\"qxypokkhminq\",\"ninvudbchaqdt\":\"ngnbdxxew\",\"tddmf\":\"qecrqctmxx\",\"pxbannovvoxc\":\"huytxzvtzn\"},\"id\":\"ytprwnwvroev\",\"name\":\"tlyo\",\"type\":\"rrrouuxvnsa\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        StreamingEndpoint response =
            manager
                .streamingEndpoints()
                .operationLocationWithResponse("g", "lnlg", "trwahzj", "ucftbyrp", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("vnafvvkyfedevjbo", response.location());
        Assertions.assertEquals("qxypokkhminq", response.tags().get("ymc"));
        Assertions.assertEquals(1178854738, response.sku().capacity());
        Assertions.assertEquals("hkpigqfusuckzmkw", response.description());
        Assertions.assertEquals(1504624884, response.scaleUnits());
        Assertions.assertEquals("noxaxmqeqal", response.availabilitySetName());
        Assertions.assertEquals(6242383697045005544L, response.maxCacheAge());
        Assertions.assertEquals("yynfsvkhgbv", response.customHostNames().get(0));
        Assertions.assertEquals(false, response.cdnEnabled());
        Assertions.assertEquals("hfhpfp", response.cdnProvider());
        Assertions.assertEquals("jzoywjxhp", response.cdnProfile());
        Assertions.assertEquals("uevrhrljyoogwxhn", response.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("uug", response.crossSiteAccessPolicies().crossDomainPolicy());
    }
}
