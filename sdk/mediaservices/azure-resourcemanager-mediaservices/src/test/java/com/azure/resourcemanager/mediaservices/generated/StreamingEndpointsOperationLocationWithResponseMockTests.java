// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.models.StreamingEndpoint;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class StreamingEndpointsOperationLocationWithResponseMockTests {
    @Test
    public void testOperationLocationWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"description\":\"agnepzwaklsb\",\"scaleUnits\":716318057,\"availabilitySetName\":\"qqagwwr\",\"accessControl\":{},\"maxCacheAge\":6946414066223431148,\"customHostNames\":[\"rrczezkhhltnj\",\"dhqoawj\"],\"hostName\":\"yueayfbpcmsp\",\"cdnEnabled\":false,\"cdnProvider\":\"rueqthwm\",\"cdnProfile\":\"mbscbbx\",\"provisioningState\":\"dhxiidlopedbwd\",\"resourceState\":\"Stopped\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"bxubmdna\",\"crossDomainPolicy\":\"bqwremjela\"},\"freeTrialEndTime\":\"2021-08-31T06:52:26Z\",\"created\":\"2021-03-24T08:52Z\",\"lastModified\":\"2021-06-02T17:16:27Z\"},\"sku\":{\"name\":\"bvqvwzkjopwbeo\",\"capacity\":2010643139},\"location\":\"kwzdqybxcea\",\"tags\":{\"chkrttzr\":\"ptsoqfyiase\",\"zohmnrxxbs\":\"zisgykiuemvanb\",\"dptysprqs\":\"jklinh\"},\"id\":\"nzxojpslsvjgpli\",\"name\":\"fiqwoy\",\"type\":\"qvapcohhoucq\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        StreamingEndpoint response =
            manager
                .streamingEndpoints()
                .operationLocationWithResponse(
                    "bfihw", "hvcta", "s", "bxrblmliowxihspn", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("kwzdqybxcea", response.location());
        Assertions.assertEquals("ptsoqfyiase", response.tags().get("chkrttzr"));
        Assertions.assertEquals(2010643139, response.sku().capacity());
        Assertions.assertEquals("agnepzwaklsb", response.description());
        Assertions.assertEquals(716318057, response.scaleUnits());
        Assertions.assertEquals("qqagwwr", response.availabilitySetName());
        Assertions.assertEquals(6946414066223431148L, response.maxCacheAge());
        Assertions.assertEquals("rrczezkhhltnj", response.customHostNames().get(0));
        Assertions.assertEquals(false, response.cdnEnabled());
        Assertions.assertEquals("rueqthwm", response.cdnProvider());
        Assertions.assertEquals("mbscbbx", response.cdnProfile());
        Assertions.assertEquals("bxubmdna", response.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("bqwremjela", response.crossSiteAccessPolicies().crossDomainPolicy());
    }
}
