// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.CencDrmConfiguration;
import com.azure.resourcemanager.mediaservices.models.CommonEncryptionCenc;
import com.azure.resourcemanager.mediaservices.models.DefaultKey;
import com.azure.resourcemanager.mediaservices.models.EnabledProtocols;
import com.azure.resourcemanager.mediaservices.models.StreamingPolicyContentKey;
import com.azure.resourcemanager.mediaservices.models.StreamingPolicyContentKeys;
import com.azure.resourcemanager.mediaservices.models.StreamingPolicyPlayReadyConfiguration;
import com.azure.resourcemanager.mediaservices.models.StreamingPolicyWidevineConfiguration;
import com.azure.resourcemanager.mediaservices.models.TrackSelection;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class CommonEncryptionCencTests {
    @Test
    public void testDeserialize() {
        CommonEncryptionCenc model =
            BinaryData
                .fromString(
                    "{\"enabledProtocols\":{\"download\":false,\"dash\":true,\"hls\":true,\"smoothStreaming\":false},\"clearTracks\":[{\"trackSelections\":[]}],\"contentKeys\":{\"defaultKey\":{\"label\":\"yhqmibzyhwi\",\"policyName\":\"mypyynpcdpu\"},\"keyToTrackMappings\":[{\"label\":\"mwzn\",\"policyName\":\"biknsorgjhxbld\",\"tracks\":[]},{\"label\":\"wrlkdmtn\",\"policyName\":\"ok\",\"tracks\":[]},{\"label\":\"lxdy\",\"policyName\":\"syocogjltdtbnnha\",\"tracks\":[]},{\"label\":\"crkvcikhnv\",\"policyName\":\"mqg\",\"tracks\":[]}]},\"drm\":{\"playReady\":{\"customLicenseAcquisitionUrlTemplate\":\"zikywgg\",\"playReadyCustomAttributes\":\"allatmelwuipic\"},\"widevine\":{\"customLicenseAcquisitionUrlTemplate\":\"kzivgvvcnayrh\"}}}")
                .toObject(CommonEncryptionCenc.class);
        Assertions.assertEquals(false, model.enabledProtocols().download());
        Assertions.assertEquals(true, model.enabledProtocols().dash());
        Assertions.assertEquals(true, model.enabledProtocols().hls());
        Assertions.assertEquals(false, model.enabledProtocols().smoothStreaming());
        Assertions.assertEquals("yhqmibzyhwi", model.contentKeys().defaultKey().label());
        Assertions.assertEquals("mypyynpcdpu", model.contentKeys().defaultKey().policyName());
        Assertions.assertEquals("mwzn", model.contentKeys().keyToTrackMappings().get(0).label());
        Assertions.assertEquals("biknsorgjhxbld", model.contentKeys().keyToTrackMappings().get(0).policyName());
        Assertions.assertEquals("zikywgg", model.drm().playReady().customLicenseAcquisitionUrlTemplate());
        Assertions.assertEquals("allatmelwuipic", model.drm().playReady().playReadyCustomAttributes());
        Assertions.assertEquals("kzivgvvcnayrh", model.drm().widevine().customLicenseAcquisitionUrlTemplate());
    }

    @Test
    public void testSerialize() {
        CommonEncryptionCenc model =
            new CommonEncryptionCenc()
                .withEnabledProtocols(
                    new EnabledProtocols().withDownload(false).withDash(true).withHls(true).withSmoothStreaming(false))
                .withClearTracks(Arrays.asList(new TrackSelection().withTrackSelections(Arrays.asList())))
                .withContentKeys(
                    new StreamingPolicyContentKeys()
                        .withDefaultKey(new DefaultKey().withLabel("yhqmibzyhwi").withPolicyName("mypyynpcdpu"))
                        .withKeyToTrackMappings(
                            Arrays
                                .asList(
                                    new StreamingPolicyContentKey()
                                        .withLabel("mwzn")
                                        .withPolicyName("biknsorgjhxbld")
                                        .withTracks(Arrays.asList()),
                                    new StreamingPolicyContentKey()
                                        .withLabel("wrlkdmtn")
                                        .withPolicyName("ok")
                                        .withTracks(Arrays.asList()),
                                    new StreamingPolicyContentKey()
                                        .withLabel("lxdy")
                                        .withPolicyName("syocogjltdtbnnha")
                                        .withTracks(Arrays.asList()),
                                    new StreamingPolicyContentKey()
                                        .withLabel("crkvcikhnv")
                                        .withPolicyName("mqg")
                                        .withTracks(Arrays.asList()))))
                .withDrm(
                    new CencDrmConfiguration()
                        .withPlayReady(
                            new StreamingPolicyPlayReadyConfiguration()
                                .withCustomLicenseAcquisitionUrlTemplate("zikywgg")
                                .withPlayReadyCustomAttributes("allatmelwuipic"))
                        .withWidevine(
                            new StreamingPolicyWidevineConfiguration()
                                .withCustomLicenseAcquisitionUrlTemplate("kzivgvvcnayrh")));
        model = BinaryData.fromObject(model).toObject(CommonEncryptionCenc.class);
        Assertions.assertEquals(false, model.enabledProtocols().download());
        Assertions.assertEquals(true, model.enabledProtocols().dash());
        Assertions.assertEquals(true, model.enabledProtocols().hls());
        Assertions.assertEquals(false, model.enabledProtocols().smoothStreaming());
        Assertions.assertEquals("yhqmibzyhwi", model.contentKeys().defaultKey().label());
        Assertions.assertEquals("mypyynpcdpu", model.contentKeys().defaultKey().policyName());
        Assertions.assertEquals("mwzn", model.contentKeys().keyToTrackMappings().get(0).label());
        Assertions.assertEquals("biknsorgjhxbld", model.contentKeys().keyToTrackMappings().get(0).policyName());
        Assertions.assertEquals("zikywgg", model.drm().playReady().customLicenseAcquisitionUrlTemplate());
        Assertions.assertEquals("allatmelwuipic", model.drm().playReady().playReadyCustomAttributes());
        Assertions.assertEquals("kzivgvvcnayrh", model.drm().widevine().customLicenseAcquisitionUrlTemplate());
    }
}
