// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.models.StorageEncryptedAssetDecryptionData;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AssetsGetEncryptionKeyWithResponseMockTests {
    @Test
    public void testGetEncryptionKeyWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"assetFileEncryptionMetadata\":[{\"initializationVector\":\"mewip\",\"assetFileName\":\"ekdxuku\",\"assetFileId\":\"4e83c05d-0074-4599-bd4e-ea0491ee5964\"},{\"initializationVector\":\"sjjxundxgketw\",\"assetFileName\":\"hzjhf\",\"assetFileId\":\"961bb070-d515-4d04-b543-6cb68c30b0e3\"},{\"initializationVector\":\"hvvmuvgpmun\",\"assetFileName\":\"sx\",\"assetFileId\":\"0a8760b4-8632-49aa-90fb-ef7a7bcf9d1d\"},{\"initializationVector\":\"hfbuzjyihsasbhud\",\"assetFileName\":\"ohyuemslynsq\",\"assetFileId\":\"d3a02dc3-63b4-4c10-aa12-9038cb1c7539\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        StorageEncryptedAssetDecryptionData response =
            manager
                .assets()
                .getEncryptionKeyWithResponse("aqvlgafcqusr", "vetnwsdtutn", "lduycv", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("mewip", response.assetFileEncryptionMetadata().get(0).initializationVector());
        Assertions.assertEquals("ekdxuku", response.assetFileEncryptionMetadata().get(0).assetFileName());
        Assertions
            .assertEquals(
                UUID.fromString("4e83c05d-0074-4599-bd4e-ea0491ee5964"),
                response.assetFileEncryptionMetadata().get(0).assetFileId());
    }
}
