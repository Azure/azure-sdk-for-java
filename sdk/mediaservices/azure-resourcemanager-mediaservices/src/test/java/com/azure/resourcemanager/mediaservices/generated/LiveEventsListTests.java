// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.models.LiveEvent;
import com.azure.resourcemanager.mediaservices.models.LiveEventEncodingType;
import com.azure.resourcemanager.mediaservices.models.LiveEventInputProtocol;
import com.azure.resourcemanager.mediaservices.models.StreamOptionsFlag;
import com.azure.resourcemanager.mediaservices.models.StretchMode;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LiveEventsListTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"description\":\"bhjmznnb\",\"input\":{\"streamingProtocol\":\"FragmentedMP4\",\"keyFrameIntervalDuration\":\"qalarvlagunbtg\",\"accessToken\":\"bwln\",\"endpoints\":[]},\"preview\":{\"endpoints\":[],\"previewLocator\":\"eudzqavbpd\",\"streamingPolicyName\":\"jxlyyzglgouwtlm\",\"alternativeMediaId\":\"yuojqtobaxk\"},\"encoding\":{\"encodingType\":\"Premium1080p\",\"presetName\":\"nlb\",\"stretchMode\":\"None\",\"keyFrameInterval\":\"PT146H32M8S\"},\"transcriptions\":[],\"provisioningState\":\"kqbh\",\"resourceState\":\"Deleting\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"njqhdenxa\",\"crossDomainPolicy\":\"kpak\"},\"useStaticHostname\":false,\"hostnamePrefix\":\"mjnnawtq\",\"streamOptions\":[\"LowLatency\",\"LowLatencyV2\",\"Default\"],\"created\":\"2021-11-12T20:32Z\",\"lastModified\":\"2021-07-09T07:05:44Z\"},\"location\":\"oweyirdhlis\",\"tags\":{\"qmp\":\"fl\"},\"id\":\"zruwn\",\"name\":\"qxpxiwfcngjsaa\",\"type\":\"iixtmkzj\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<LiveEvent> response = manager.liveEvents().list("xqdlyrtltlapr", "tz", Context.NONE);

        Assertions.assertEquals("oweyirdhlis", response.iterator().next().location());
        Assertions.assertEquals("fl", response.iterator().next().tags().get("qmp"));
        Assertions.assertEquals("bhjmznnb", response.iterator().next().description());
        Assertions
            .assertEquals(
                LiveEventInputProtocol.FRAGMENTED_MP4, response.iterator().next().input().streamingProtocol());
        Assertions.assertEquals("qalarvlagunbtg", response.iterator().next().input().keyFrameIntervalDuration());
        Assertions.assertEquals("bwln", response.iterator().next().input().accessToken());
        Assertions.assertEquals("eudzqavbpd", response.iterator().next().preview().previewLocator());
        Assertions.assertEquals("jxlyyzglgouwtlm", response.iterator().next().preview().streamingPolicyName());
        Assertions.assertEquals("yuojqtobaxk", response.iterator().next().preview().alternativeMediaId());
        Assertions
            .assertEquals(LiveEventEncodingType.PREMIUM1080P, response.iterator().next().encoding().encodingType());
        Assertions.assertEquals("nlb", response.iterator().next().encoding().presetName());
        Assertions.assertEquals(StretchMode.NONE, response.iterator().next().encoding().stretchMode());
        Assertions
            .assertEquals(Duration.parse("PT146H32M8S"), response.iterator().next().encoding().keyFrameInterval());
        Assertions.assertEquals("njqhdenxa", response.iterator().next().crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("kpak", response.iterator().next().crossSiteAccessPolicies().crossDomainPolicy());
        Assertions.assertEquals(false, response.iterator().next().useStaticHostname());
        Assertions.assertEquals("mjnnawtq", response.iterator().next().hostnamePrefix());
        Assertions.assertEquals(StreamOptionsFlag.LOW_LATENCY, response.iterator().next().streamOptions().get(0));
    }
}
