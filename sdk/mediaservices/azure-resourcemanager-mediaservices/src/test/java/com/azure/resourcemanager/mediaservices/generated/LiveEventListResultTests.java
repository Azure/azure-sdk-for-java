// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.LiveEventInner;
import com.azure.resourcemanager.mediaservices.models.LiveEventListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class LiveEventListResultTests {
    @Test
    public void testDeserialize() {
        LiveEventListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"description\":\"whccs\",\"transcriptions\":[],\"provisioningState\":\"vwitqscyw\",\"resourceState\":\"Deleting\",\"useStaticHostname\":false,\"hostnamePrefix\":\"h\",\"streamOptions\":[],\"created\":\"2021-09-19T07:40:53Z\",\"lastModified\":\"2021-07-16T15:54:52Z\"},\"location\":\"ai\",\"tags\":{\"w\":\"rgzdwmsweyp\"},\"id\":\"xggicccnxqhuexmk\",\"name\":\"tlstvlzywem\",\"type\":\"zrncsdt\"},{\"properties\":{\"description\":\"siypbs\",\"transcriptions\":[],\"provisioningState\":\"uslfead\",\"resourceState\":\"Deleting\",\"useStaticHostname\":true,\"hostnamePrefix\":\"hejhzisx\",\"streamOptions\":[],\"created\":\"2021-08-04T06:20:25Z\",\"lastModified\":\"2021-10-29T03:21:25Z\"},\"location\":\"p\",\"tags\":{\"vu\":\"srp\",\"r\":\"zraehtwd\"},\"id\":\"tswiby\",\"name\":\"cdl\",\"type\":\"h\"}],\"@odata.count\":523065183,\"@odata.nextLink\":\"p\"}")
                .toObject(LiveEventListResult.class);
        Assertions.assertEquals("ai", model.value().get(0).location());
        Assertions.assertEquals("rgzdwmsweyp", model.value().get(0).tags().get("w"));
        Assertions.assertEquals("whccs", model.value().get(0).description());
        Assertions.assertEquals(false, model.value().get(0).useStaticHostname());
        Assertions.assertEquals("h", model.value().get(0).hostnamePrefix());
    }

    @Test
    public void testSerialize() {
        LiveEventListResult model =
            new LiveEventListResult()
                .withValue(
                    Arrays
                        .asList(
                            new LiveEventInner()
                                .withLocation("ai")
                                .withTags(mapOf("w", "rgzdwmsweyp"))
                                .withDescription("whccs")
                                .withTranscriptions(Arrays.asList())
                                .withUseStaticHostname(false)
                                .withHostnamePrefix("h")
                                .withStreamOptions(Arrays.asList()),
                            new LiveEventInner()
                                .withLocation("p")
                                .withTags(mapOf("vu", "srp", "r", "zraehtwd"))
                                .withDescription("siypbs")
                                .withTranscriptions(Arrays.asList())
                                .withUseStaticHostname(true)
                                .withHostnamePrefix("hejhzisx")
                                .withStreamOptions(Arrays.asList())));
        model = BinaryData.fromObject(model).toObject(LiveEventListResult.class);
        Assertions.assertEquals("ai", model.value().get(0).location());
        Assertions.assertEquals("rgzdwmsweyp", model.value().get(0).tags().get("w"));
        Assertions.assertEquals("whccs", model.value().get(0).description());
        Assertions.assertEquals(false, model.value().get(0).useStaticHostname());
        Assertions.assertEquals("h", model.value().get(0).hostnamePrefix());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
