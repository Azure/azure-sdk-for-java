// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.fluent.models.LiveEventInner;
import com.azure.resourcemanager.mediaservices.models.CrossSiteAccessPolicies;
import com.azure.resourcemanager.mediaservices.models.LiveEventEncoding;
import com.azure.resourcemanager.mediaservices.models.LiveEventEncodingType;
import com.azure.resourcemanager.mediaservices.models.LiveEventInput;
import com.azure.resourcemanager.mediaservices.models.LiveEventInputProtocol;
import com.azure.resourcemanager.mediaservices.models.LiveEventPreview;
import com.azure.resourcemanager.mediaservices.models.StreamOptionsFlag;
import com.azure.resourcemanager.mediaservices.models.StretchMode;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LiveEventsClientCreateTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"description\":\"n\",\"input\":{\"streamingProtocol\":\"FragmentedMP4\",\"keyFrameIntervalDuration\":\"munjdxvglnkvx\",\"accessToken\":\"paglqivbgk\",\"endpoints\":[]},\"preview\":{\"endpoints\":[],\"previewLocator\":\"vuqd\",\"streamingPolicyName\":\"voniypfp\",\"alternativeMediaId\":\"cpzgpxtiv\"},\"encoding\":{\"encodingType\":\"PassthroughBasic\",\"presetName\":\"dibgqjxgpnrhgov\",\"stretchMode\":\"None\",\"keyFrameInterval\":\"PT208H55M10S\"},\"transcriptions\":[],\"provisioningState\":\"Succeeded\",\"resourceState\":\"Deleting\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"porqzdfu\",\"crossDomainPolicy\":\"zvkfv\"},\"useStaticHostname\":false,\"hostnamePrefix\":\"mx\",\"streamOptions\":[\"Default\",\"Default\"],\"created\":\"2021-11-24T17:00:30Z\",\"lastModified\":\"2021-05-14T05:05:59Z\"},\"location\":\"lgg\",\"tags\":{\"qkzszuwiwtglxxh\":\"em\",\"hr\":\"jfpgpicrmn\",\"bfrmbodthsqqgvri\":\"mqgjsxvpq\"},\"id\":\"bakclacjfrnxous\",\"name\":\"au\",\"type\":\"lwvsgm\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        LiveEventInner response =
            manager
                .serviceClient()
                .getLiveEvents()
                .create(
                    "hlisngw",
                    "lqqmpiz",
                    "uwnpqxpxiwfcng",
                    new LiveEventInner()
                        .withLocation("unfprnjletlxs")
                        .withTags(
                            mapOf(
                                "amowaziynknlqwzd",
                                "ddoui",
                                "dtmaa",
                                "piwhxqs",
                                "m",
                                "quhuxylrj",
                                "kfkyjp",
                                "ygjbmzyospspsh"))
                        .withDescription("asi")
                        .withInput(
                            new LiveEventInput()
                                .withStreamingProtocol(LiveEventInputProtocol.RTMP)
                                .withKeyFrameIntervalDuration("kzjv")
                                .withAccessToken("iirhgfgrwsd")
                                .withEndpoints(Arrays.asList()))
                        .withPreview(
                            new LiveEventPreview()
                                .withEndpoints(Arrays.asList())
                                .withPreviewLocator("vzbglbyvi")
                                .withStreamingPolicyName("ctbrxkjzwrgxffm")
                                .withAlternativeMediaId("kwfbkgo"))
                        .withEncoding(
                            new LiveEventEncoding()
                                .withEncodingType(LiveEventEncodingType.PASSTHROUGH_BASIC)
                                .withPresetName("dby")
                                .withStretchMode(StretchMode.AUTO_FIT)
                                .withKeyFrameInterval(Duration.parse("PT227H42M51S")))
                        .withTranscriptions(Arrays.asList())
                        .withCrossSiteAccessPolicies(
                            new CrossSiteAccessPolicies()
                                .withClientAccessPolicy("mfcttux")
                                .withCrossDomainPolicy("yilflqoiquvrehmr"))
                        .withUseStaticHostname(false)
                        .withHostnamePrefix("sujz")
                        .withStreamOptions(
                            Arrays
                                .asList(
                                    StreamOptionsFlag.LOW_LATENCY_V2,
                                    StreamOptionsFlag.LOW_LATENCY,
                                    StreamOptionsFlag.DEFAULT,
                                    StreamOptionsFlag.LOW_LATENCY)),
                    false,
                    Context.NONE);

        Assertions.assertEquals("lgg", response.location());
        Assertions.assertEquals("em", response.tags().get("qkzszuwiwtglxxh"));
        Assertions.assertEquals("n", response.description());
        Assertions.assertEquals(LiveEventInputProtocol.FRAGMENTED_MP4, response.input().streamingProtocol());
        Assertions.assertEquals("munjdxvglnkvx", response.input().keyFrameIntervalDuration());
        Assertions.assertEquals("paglqivbgk", response.input().accessToken());
        Assertions.assertEquals("vuqd", response.preview().previewLocator());
        Assertions.assertEquals("voniypfp", response.preview().streamingPolicyName());
        Assertions.assertEquals("cpzgpxtiv", response.preview().alternativeMediaId());
        Assertions.assertEquals(LiveEventEncodingType.PASSTHROUGH_BASIC, response.encoding().encodingType());
        Assertions.assertEquals("dibgqjxgpnrhgov", response.encoding().presetName());
        Assertions.assertEquals(StretchMode.NONE, response.encoding().stretchMode());
        Assertions.assertEquals(Duration.parse("PT208H55M10S"), response.encoding().keyFrameInterval());
        Assertions.assertEquals("porqzdfu", response.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("zvkfv", response.crossSiteAccessPolicies().crossDomainPolicy());
        Assertions.assertEquals(false, response.useStaticHostname());
        Assertions.assertEquals("mx", response.hostnamePrefix());
        Assertions.assertEquals(StreamOptionsFlag.DEFAULT, response.streamOptions().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
