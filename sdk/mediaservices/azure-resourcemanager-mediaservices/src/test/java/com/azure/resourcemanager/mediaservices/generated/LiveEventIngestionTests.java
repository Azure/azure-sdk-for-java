// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.LiveEventIngestInterruption;
import com.azure.resourcemanager.mediaservices.models.LiveEventIngestion;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class LiveEventIngestionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LiveEventIngestion model = BinaryData.fromString(
            "{\"streamName\":\"dcqvpn\",\"begin\":\"2021-09-04T22:25:46Z\",\"end\":\"2021-07-28T02:37:45Z\",\"endReason\":\"ylwdshfssn\",\"ingestInterruptions\":[{\"begin\":\"2021-08-09T21:16:26Z\",\"end\":\"2021-02-17T11:04:17Z\",\"duration\":\"PT236H36M36S\",\"reason\":\"gaojf\"}]}")
            .toObject(LiveEventIngestion.class);
        Assertions.assertEquals("dcqvpn", model.streamName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-04T22:25:46Z"), model.begin());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-28T02:37:45Z"), model.end());
        Assertions.assertEquals("ylwdshfssn", model.endReason());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-09T21:16:26Z"),
            model.ingestInterruptions().get(0).begin());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-17T11:04:17Z"), model.ingestInterruptions().get(0).end());
        Assertions.assertEquals(Duration.parse("PT236H36M36S"), model.ingestInterruptions().get(0).duration());
        Assertions.assertEquals("gaojf", model.ingestInterruptions().get(0).reason());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LiveEventIngestion model
            = new LiveEventIngestion().withStreamName("dcqvpn")
                .withBegin(OffsetDateTime.parse("2021-09-04T22:25:46Z"))
                .withEnd(OffsetDateTime.parse("2021-07-28T02:37:45Z"))
                .withEndReason("ylwdshfssn")
                .withIngestInterruptions(Arrays
                    .asList(new LiveEventIngestInterruption().withBegin(OffsetDateTime.parse("2021-08-09T21:16:26Z"))
                        .withEnd(OffsetDateTime.parse("2021-02-17T11:04:17Z"))
                        .withDuration(Duration.parse("PT236H36M36S"))
                        .withReason("gaojf")));
        model = BinaryData.fromObject(model).toObject(LiveEventIngestion.class);
        Assertions.assertEquals("dcqvpn", model.streamName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-04T22:25:46Z"), model.begin());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-28T02:37:45Z"), model.end());
        Assertions.assertEquals("ylwdshfssn", model.endReason());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-09T21:16:26Z"),
            model.ingestInterruptions().get(0).begin());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-17T11:04:17Z"), model.ingestInterruptions().get(0).end());
        Assertions.assertEquals(Duration.parse("PT236H36M36S"), model.ingestInterruptions().get(0).duration());
        Assertions.assertEquals("gaojf", model.ingestInterruptions().get(0).reason());
    }
}
