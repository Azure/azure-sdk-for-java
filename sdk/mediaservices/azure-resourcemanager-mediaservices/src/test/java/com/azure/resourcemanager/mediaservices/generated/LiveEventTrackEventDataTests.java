// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.LiveEventTrackEventData;
import com.azure.resourcemanager.mediaservices.models.LiveEventTrackType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class LiveEventTrackEventDataTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LiveEventTrackEventData model = BinaryData.fromString(
            "{\"trackName\":\"xggdufi\",\"trackType\":\"video\",\"bitrate\":5828391548888381928,\"incomingBitrate\":1458148723053789844,\"lastTimestamp\":\"jchvcyy\",\"timescale\":\"fgdo\",\"overlapCount\":7467577489537815272,\"discontinuityCount\":1284290883473857221,\"nonincreasingCount\":5632513146595394956,\"unexpectedBitrate\":false,\"state\":\"onmacjekniz\",\"healthy\":false,\"lastFragmentArrivalTime\":\"2021-08-10T17:52:09Z\",\"ingestDriftValue\":\"m\",\"transcriptionState\":\"vfgmblrrilby\",\"transcriptionLanguage\":\"xsmiccwrwfscjf\"}")
            .toObject(LiveEventTrackEventData.class);
        Assertions.assertEquals("xggdufi", model.trackName());
        Assertions.assertEquals(LiveEventTrackType.VIDEO, model.trackType());
        Assertions.assertEquals(5828391548888381928L, model.bitrate());
        Assertions.assertEquals(1458148723053789844L, model.incomingBitrate());
        Assertions.assertEquals("jchvcyy", model.lastTimestamp());
        Assertions.assertEquals("fgdo", model.timescale());
        Assertions.assertEquals(7467577489537815272L, model.overlapCount());
        Assertions.assertEquals(1284290883473857221L, model.discontinuityCount());
        Assertions.assertEquals(5632513146595394956L, model.nonincreasingCount());
        Assertions.assertEquals(false, model.unexpectedBitrate());
        Assertions.assertEquals("onmacjekniz", model.state());
        Assertions.assertEquals(false, model.healthy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-10T17:52:09Z"), model.lastFragmentArrivalTime());
        Assertions.assertEquals("m", model.ingestDriftValue());
        Assertions.assertEquals("vfgmblrrilby", model.transcriptionState());
        Assertions.assertEquals("xsmiccwrwfscjf", model.transcriptionLanguage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LiveEventTrackEventData model = new LiveEventTrackEventData().withTrackName("xggdufi")
            .withTrackType(LiveEventTrackType.VIDEO)
            .withBitrate(5828391548888381928L)
            .withIncomingBitrate(1458148723053789844L)
            .withLastTimestamp("jchvcyy")
            .withTimescale("fgdo")
            .withOverlapCount(7467577489537815272L)
            .withDiscontinuityCount(1284290883473857221L)
            .withNonincreasingCount(5632513146595394956L)
            .withUnexpectedBitrate(false)
            .withState("onmacjekniz")
            .withHealthy(false)
            .withLastFragmentArrivalTime(OffsetDateTime.parse("2021-08-10T17:52:09Z"))
            .withIngestDriftValue("m")
            .withTranscriptionState("vfgmblrrilby")
            .withTranscriptionLanguage("xsmiccwrwfscjf");
        model = BinaryData.fromObject(model).toObject(LiveEventTrackEventData.class);
        Assertions.assertEquals("xggdufi", model.trackName());
        Assertions.assertEquals(LiveEventTrackType.VIDEO, model.trackType());
        Assertions.assertEquals(5828391548888381928L, model.bitrate());
        Assertions.assertEquals(1458148723053789844L, model.incomingBitrate());
        Assertions.assertEquals("jchvcyy", model.lastTimestamp());
        Assertions.assertEquals("fgdo", model.timescale());
        Assertions.assertEquals(7467577489537815272L, model.overlapCount());
        Assertions.assertEquals(1284290883473857221L, model.discontinuityCount());
        Assertions.assertEquals(5632513146595394956L, model.nonincreasingCount());
        Assertions.assertEquals(false, model.unexpectedBitrate());
        Assertions.assertEquals("onmacjekniz", model.state());
        Assertions.assertEquals(false, model.healthy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-10T17:52:09Z"), model.lastFragmentArrivalTime());
        Assertions.assertEquals("m", model.ingestDriftValue());
        Assertions.assertEquals("vfgmblrrilby", model.transcriptionState());
        Assertions.assertEquals("xsmiccwrwfscjf", model.transcriptionLanguage());
    }
}
