// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.IpAccessControl;
import com.azure.resourcemanager.mediaservices.models.LiveEventEndpoint;
import com.azure.resourcemanager.mediaservices.models.LiveEventPreview;
import com.azure.resourcemanager.mediaservices.models.LiveEventPreviewAccessControl;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class LiveEventPreviewTests {
    @Test
    public void testDeserialize() {
        LiveEventPreview model =
            BinaryData
                .fromString(
                    "{\"endpoints\":[{\"protocol\":\"veg\",\"url\":\"bpnaixexccbdre\"},{\"protocol\":\"hcexdrrvqa\",\"url\":\"kghtpwijnh\"},{\"protocol\":\"svfycxzbfv\",\"url\":\"wvrvmtg\"},{\"protocol\":\"ppyostronzmyhgf\",\"url\":\"nsxkmcwaekrrjr\"}],\"accessControl\":{\"ip\":{\"allow\":[]}},\"previewLocator\":\"gumhjglikkxws\",\"streamingPolicyName\":\"lbqpvuzlmvfelf\",\"alternativeMediaId\":\"gplcrpwjxeznoigb\"}")
                .toObject(LiveEventPreview.class);
        Assertions.assertEquals("veg", model.endpoints().get(0).protocol());
        Assertions.assertEquals("bpnaixexccbdre", model.endpoints().get(0).url());
        Assertions.assertEquals("gumhjglikkxws", model.previewLocator());
        Assertions.assertEquals("lbqpvuzlmvfelf", model.streamingPolicyName());
        Assertions.assertEquals("gplcrpwjxeznoigb", model.alternativeMediaId());
    }

    @Test
    public void testSerialize() {
        LiveEventPreview model =
            new LiveEventPreview()
                .withEndpoints(
                    Arrays
                        .asList(
                            new LiveEventEndpoint().withProtocol("veg").withUrl("bpnaixexccbdre"),
                            new LiveEventEndpoint().withProtocol("hcexdrrvqa").withUrl("kghtpwijnh"),
                            new LiveEventEndpoint().withProtocol("svfycxzbfv").withUrl("wvrvmtg"),
                            new LiveEventEndpoint().withProtocol("ppyostronzmyhgf").withUrl("nsxkmcwaekrrjr")))
                .withAccessControl(
                    new LiveEventPreviewAccessControl().withIp(new IpAccessControl().withAllow(Arrays.asList())))
                .withPreviewLocator("gumhjglikkxws")
                .withStreamingPolicyName("lbqpvuzlmvfelf")
                .withAlternativeMediaId("gplcrpwjxeznoigb");
        model = BinaryData.fromObject(model).toObject(LiveEventPreview.class);
        Assertions.assertEquals("veg", model.endpoints().get(0).protocol());
        Assertions.assertEquals("bpnaixexccbdre", model.endpoints().get(0).url());
        Assertions.assertEquals("gumhjglikkxws", model.previewLocator());
        Assertions.assertEquals("lbqpvuzlmvfelf", model.streamingPolicyName());
        Assertions.assertEquals("gplcrpwjxeznoigb", model.alternativeMediaId());
    }
}
