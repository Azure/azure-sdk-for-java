// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.ArmStreamingEndpointCapacity;
import com.azure.resourcemanager.mediaservices.models.ArmStreamingEndpointSku;
import com.azure.resourcemanager.mediaservices.models.ArmStreamingEndpointSkuInfo;
import org.junit.jupiter.api.Assertions;

public final class ArmStreamingEndpointSkuInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ArmStreamingEndpointSkuInfo model = BinaryData.fromString(
            "{\"resourceType\":\"zzp\",\"capacity\":{\"scaleType\":\"zysdzh\",\"default\":1413339279,\"minimum\":39322733,\"maximum\":1899705757},\"sku\":{\"name\":\"uvvfonkp\"}}")
            .toObject(ArmStreamingEndpointSkuInfo.class);
        Assertions.assertEquals("zzp", model.resourceType());
        Assertions.assertEquals(1413339279, model.capacity().defaultProperty());
        Assertions.assertEquals(39322733, model.capacity().minimum());
        Assertions.assertEquals(1899705757, model.capacity().maximum());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ArmStreamingEndpointSkuInfo model = new ArmStreamingEndpointSkuInfo().withResourceType("zzp")
            .withCapacity(new ArmStreamingEndpointCapacity().withDefaultProperty(1413339279)
                .withMinimum(39322733)
                .withMaximum(1899705757))
            .withSku(new ArmStreamingEndpointSku());
        model = BinaryData.fromObject(model).toObject(ArmStreamingEndpointSkuInfo.class);
        Assertions.assertEquals("zzp", model.resourceType());
        Assertions.assertEquals(1413339279, model.capacity().defaultProperty());
        Assertions.assertEquals(39322733, model.capacity().minimum());
        Assertions.assertEquals(1899705757, model.capacity().maximum());
    }
}
