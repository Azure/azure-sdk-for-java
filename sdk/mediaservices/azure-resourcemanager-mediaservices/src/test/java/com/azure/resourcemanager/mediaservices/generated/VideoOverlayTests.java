// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.Rectangle;
import com.azure.resourcemanager.mediaservices.models.VideoOverlay;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class VideoOverlayTests {
    @Test
    public void testDeserialize() {
        VideoOverlay model =
            BinaryData
                .fromString(
                    "{\"@odata.type\":\"#Microsoft.Media.VideoOverlay\",\"position\":{\"left\":\"rpiqywncv\",\"top\":\"szcofizeht\",\"width\":\"gbjkvreljeamur\",\"height\":\"mlovuanashcxl\"},\"opacity\":94.65708177447932,\"cropRectangle\":{\"left\":\"dk\",\"top\":\"vidizozsdb\",\"width\":\"xjmonf\",\"height\":\"nwncypuuw\"},\"inputLabel\":\"ltv\",\"start\":\"PT198H33M56S\",\"end\":\"PT198H23M20S\",\"fadeInDuration\":\"PT62H49M39S\",\"fadeOutDuration\":\"PT220H30M49S\",\"audioGainLevel\":8.541397125723272}")
                .toObject(VideoOverlay.class);
        Assertions.assertEquals("ltv", model.inputLabel());
        Assertions.assertEquals(Duration.parse("PT198H33M56S"), model.start());
        Assertions.assertEquals(Duration.parse("PT198H23M20S"), model.end());
        Assertions.assertEquals(Duration.parse("PT62H49M39S"), model.fadeInDuration());
        Assertions.assertEquals(Duration.parse("PT220H30M49S"), model.fadeOutDuration());
        Assertions.assertEquals(8.541397125723272, model.audioGainLevel());
        Assertions.assertEquals("rpiqywncv", model.position().left());
        Assertions.assertEquals("szcofizeht", model.position().top());
        Assertions.assertEquals("gbjkvreljeamur", model.position().width());
        Assertions.assertEquals("mlovuanashcxl", model.position().height());
        Assertions.assertEquals(94.65708177447932, model.opacity());
        Assertions.assertEquals("dk", model.cropRectangle().left());
        Assertions.assertEquals("vidizozsdb", model.cropRectangle().top());
        Assertions.assertEquals("xjmonf", model.cropRectangle().width());
        Assertions.assertEquals("nwncypuuw", model.cropRectangle().height());
    }

    @Test
    public void testSerialize() {
        VideoOverlay model =
            new VideoOverlay()
                .withInputLabel("ltv")
                .withStart(Duration.parse("PT198H33M56S"))
                .withEnd(Duration.parse("PT198H23M20S"))
                .withFadeInDuration(Duration.parse("PT62H49M39S"))
                .withFadeOutDuration(Duration.parse("PT220H30M49S"))
                .withAudioGainLevel(8.541397125723272)
                .withPosition(
                    new Rectangle()
                        .withLeft("rpiqywncv")
                        .withTop("szcofizeht")
                        .withWidth("gbjkvreljeamur")
                        .withHeight("mlovuanashcxl"))
                .withOpacity(94.65708177447932)
                .withCropRectangle(
                    new Rectangle().withLeft("dk").withTop("vidizozsdb").withWidth("xjmonf").withHeight("nwncypuuw"));
        model = BinaryData.fromObject(model).toObject(VideoOverlay.class);
        Assertions.assertEquals("ltv", model.inputLabel());
        Assertions.assertEquals(Duration.parse("PT198H33M56S"), model.start());
        Assertions.assertEquals(Duration.parse("PT198H23M20S"), model.end());
        Assertions.assertEquals(Duration.parse("PT62H49M39S"), model.fadeInDuration());
        Assertions.assertEquals(Duration.parse("PT220H30M49S"), model.fadeOutDuration());
        Assertions.assertEquals(8.541397125723272, model.audioGainLevel());
        Assertions.assertEquals("rpiqywncv", model.position().left());
        Assertions.assertEquals("szcofizeht", model.position().top());
        Assertions.assertEquals("gbjkvreljeamur", model.position().width());
        Assertions.assertEquals("mlovuanashcxl", model.position().height());
        Assertions.assertEquals(94.65708177447932, model.opacity());
        Assertions.assertEquals("dk", model.cropRectangle().left());
        Assertions.assertEquals("vidizozsdb", model.cropRectangle().top());
        Assertions.assertEquals("xjmonf", model.cropRectangle().width());
        Assertions.assertEquals("nwncypuuw", model.cropRectangle().height());
    }
}
