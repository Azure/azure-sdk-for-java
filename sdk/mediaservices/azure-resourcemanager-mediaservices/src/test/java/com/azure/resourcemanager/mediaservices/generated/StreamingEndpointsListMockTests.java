// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.models.StreamingEndpoint;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class StreamingEndpointsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"description\":\"qirwrweoox\",\"scaleUnits\":641060199,\"availabilitySetName\":\"fhxwrsne\",\"accessControl\":{},\"maxCacheAge\":630933293330161814,\"customHostNames\":[\"qmamhsycxhxzga\",\"ttaboidvmfqh\",\"pubowsepdfg\",\"mtdherngb\"],\"hostName\":\"juahokqto\",\"cdnEnabled\":true,\"cdnProvider\":\"xof\",\"cdnProfile\":\"fphwpnu\",\"provisioningState\":\"iywzejy\",\"resourceState\":\"Scaling\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"koj\",\"crossDomainPolicy\":\"l\"},\"freeTrialEndTime\":\"2021-06-06T09:19:13Z\",\"created\":\"2021-01-16T09:54:43Z\",\"lastModified\":\"2021-01-09T14:38:38Z\"},\"sku\":{\"name\":\"fgf\",\"capacity\":975113921},\"location\":\"nnfhyetefypo\",\"tags\":{\"xrjvzuyturmlm\":\"tfjgt\",\"opionszon\":\"owolbaui\",\"ixjawrtm\":\"pngajin\"},\"id\":\"fjmyccxlzhco\",\"name\":\"ovne\",\"type\":\"henlusfnr\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<StreamingEndpoint> response =
            manager.streamingEndpoints().list("tvt", "ukyefchnmnahmnxh", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("nnfhyetefypo", response.iterator().next().location());
        Assertions.assertEquals("tfjgt", response.iterator().next().tags().get("xrjvzuyturmlm"));
        Assertions.assertEquals(975113921, response.iterator().next().sku().capacity());
        Assertions.assertEquals("qirwrweoox", response.iterator().next().description());
        Assertions.assertEquals(641060199, response.iterator().next().scaleUnits());
        Assertions.assertEquals("fhxwrsne", response.iterator().next().availabilitySetName());
        Assertions.assertEquals(630933293330161814L, response.iterator().next().maxCacheAge());
        Assertions.assertEquals("qmamhsycxhxzga", response.iterator().next().customHostNames().get(0));
        Assertions.assertEquals(true, response.iterator().next().cdnEnabled());
        Assertions.assertEquals("xof", response.iterator().next().cdnProvider());
        Assertions.assertEquals("fphwpnu", response.iterator().next().cdnProfile());
        Assertions.assertEquals("koj", response.iterator().next().crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("l", response.iterator().next().crossSiteAccessPolicies().crossDomainPolicy());
    }
}
