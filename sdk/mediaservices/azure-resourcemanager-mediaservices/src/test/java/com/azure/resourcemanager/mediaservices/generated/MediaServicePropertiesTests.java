// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.MediaServiceProperties;
import com.azure.resourcemanager.mediaservices.models.AccessControl;
import com.azure.resourcemanager.mediaservices.models.AccountEncryption;
import com.azure.resourcemanager.mediaservices.models.AccountEncryptionKeyType;
import com.azure.resourcemanager.mediaservices.models.DefaultAction;
import com.azure.resourcemanager.mediaservices.models.KeyDelivery;
import com.azure.resourcemanager.mediaservices.models.KeyVaultProperties;
import com.azure.resourcemanager.mediaservices.models.PublicNetworkAccess;
import com.azure.resourcemanager.mediaservices.models.ResourceIdentity;
import com.azure.resourcemanager.mediaservices.models.StorageAccount;
import com.azure.resourcemanager.mediaservices.models.StorageAccountType;
import com.azure.resourcemanager.mediaservices.models.StorageAuthentication;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class MediaServicePropertiesTests {
    @Test
    public void testDeserialize() {
        MediaServiceProperties model =
            BinaryData
                .fromString(
                    "{\"storageAccounts\":[{\"id\":\"dntwndeicbtw\",\"type\":\"Secondary\",\"identity\":{\"userAssignedIdentity\":\"oqvuhr\",\"useSystemAssignedIdentity\":true},\"status\":\"fcyddg\"},{\"id\":\"jthjqkwpyei\",\"type\":\"Primary\",\"identity\":{\"userAssignedIdentity\":\"ciwqvhk\",\"useSystemAssignedIdentity\":true},\"status\":\"uigdtopbobjog\"}],\"storageAuthentication\":\"System\",\"encryption\":{\"type\":\"SystemKey\",\"keyVaultProperties\":{\"keyIdentifier\":\"a\",\"currentKeyIdentifier\":\"rzayv\"},\"identity\":{\"userAssignedIdentity\":\"gvdfgiotkftutq\",\"useSystemAssignedIdentity\":false},\"status\":\"gxlefgugnxkrxd\"},\"keyDelivery\":{\"accessControl\":{\"defaultAction\":\"Allow\",\"ipAllowList\":[\"zrvqdr\",\"bhj\"]}},\"publicNetworkAccess\":\"Enabled\",\"provisioningState\":\"Failed\",\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Deleting\"},\"id\":\"wska\",\"name\":\"yktz\",\"type\":\"cuiywgqyw\"},{\"properties\":{\"provisioningState\":\"Deleting\"},\"id\":\"ynhz\",\"name\":\"pphrcgynco\",\"type\":\"pec\"},{\"properties\":{\"provisioningState\":\"Deleting\"},\"id\":\"oo\",\"name\":\"sxlzevgbmqj\",\"type\":\"abcypmivk\"}]}")
                .toObject(MediaServiceProperties.class);
        Assertions.assertEquals("dntwndeicbtw", model.storageAccounts().get(0).id());
        Assertions.assertEquals(StorageAccountType.SECONDARY, model.storageAccounts().get(0).type());
        Assertions.assertEquals("oqvuhr", model.storageAccounts().get(0).identity().userAssignedIdentity());
        Assertions.assertEquals(true, model.storageAccounts().get(0).identity().useSystemAssignedIdentity());
        Assertions.assertEquals(StorageAuthentication.SYSTEM, model.storageAuthentication());
        Assertions.assertEquals(AccountEncryptionKeyType.SYSTEM_KEY, model.encryption().type());
        Assertions.assertEquals("a", model.encryption().keyVaultProperties().keyIdentifier());
        Assertions.assertEquals("gvdfgiotkftutq", model.encryption().identity().userAssignedIdentity());
        Assertions.assertEquals(false, model.encryption().identity().useSystemAssignedIdentity());
        Assertions.assertEquals(DefaultAction.ALLOW, model.keyDelivery().accessControl().defaultAction());
        Assertions.assertEquals("zrvqdr", model.keyDelivery().accessControl().ipAllowList().get(0));
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
    }

    @Test
    public void testSerialize() {
        MediaServiceProperties model =
            new MediaServiceProperties()
                .withStorageAccounts(
                    Arrays
                        .asList(
                            new StorageAccount()
                                .withId("dntwndeicbtw")
                                .withType(StorageAccountType.SECONDARY)
                                .withIdentity(
                                    new ResourceIdentity()
                                        .withUserAssignedIdentity("oqvuhr")
                                        .withUseSystemAssignedIdentity(true)),
                            new StorageAccount()
                                .withId("jthjqkwpyei")
                                .withType(StorageAccountType.PRIMARY)
                                .withIdentity(
                                    new ResourceIdentity()
                                        .withUserAssignedIdentity("ciwqvhk")
                                        .withUseSystemAssignedIdentity(true))))
                .withStorageAuthentication(StorageAuthentication.SYSTEM)
                .withEncryption(
                    new AccountEncryption()
                        .withType(AccountEncryptionKeyType.SYSTEM_KEY)
                        .withKeyVaultProperties(new KeyVaultProperties().withKeyIdentifier("a"))
                        .withIdentity(
                            new ResourceIdentity()
                                .withUserAssignedIdentity("gvdfgiotkftutq")
                                .withUseSystemAssignedIdentity(false)))
                .withKeyDelivery(
                    new KeyDelivery()
                        .withAccessControl(
                            new AccessControl()
                                .withDefaultAction(DefaultAction.ALLOW)
                                .withIpAllowList(Arrays.asList("zrvqdr", "bhj"))))
                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED);
        model = BinaryData.fromObject(model).toObject(MediaServiceProperties.class);
        Assertions.assertEquals("dntwndeicbtw", model.storageAccounts().get(0).id());
        Assertions.assertEquals(StorageAccountType.SECONDARY, model.storageAccounts().get(0).type());
        Assertions.assertEquals("oqvuhr", model.storageAccounts().get(0).identity().userAssignedIdentity());
        Assertions.assertEquals(true, model.storageAccounts().get(0).identity().useSystemAssignedIdentity());
        Assertions.assertEquals(StorageAuthentication.SYSTEM, model.storageAuthentication());
        Assertions.assertEquals(AccountEncryptionKeyType.SYSTEM_KEY, model.encryption().type());
        Assertions.assertEquals("a", model.encryption().keyVaultProperties().keyIdentifier());
        Assertions.assertEquals("gvdfgiotkftutq", model.encryption().identity().userAssignedIdentity());
        Assertions.assertEquals(false, model.encryption().identity().useSystemAssignedIdentity());
        Assertions.assertEquals(DefaultAction.ALLOW, model.keyDelivery().accessControl().defaultAction());
        Assertions.assertEquals("zrvqdr", model.keyDelivery().accessControl().ipAllowList().get(0));
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
    }
}
