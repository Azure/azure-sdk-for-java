// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.StreamingEndpointInner;
import com.azure.resourcemanager.mediaservices.models.ArmStreamingEndpointCurrentSku;
import com.azure.resourcemanager.mediaservices.models.StreamingEndpointListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class StreamingEndpointListResultTests {
    @Test
    public void testDeserialize() {
        StreamingEndpointListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"description\":\"c\",\"scaleUnits\":427675177,\"availabilitySetName\":\"niyujv\",\"maxCacheAge\":4558783476830824181,\"customHostNames\":[],\"hostName\":\"fssnrbgyefrymsga\",\"cdnEnabled\":true,\"cdnProvider\":\"wncot\",\"cdnProfile\":\"fhir\",\"provisioningState\":\"ymoxoftpipiwyczu\",\"resourceState\":\"Stopping\",\"freeTrialEndTime\":\"2021-11-29T08:27:09Z\",\"created\":\"2021-01-05T07:46:41Z\",\"lastModified\":\"2021-11-09T18:27:16Z\"},\"sku\":{\"name\":\"spskasdvlmfwdgz\",\"capacity\":1853767280},\"location\":\"ucvpamrs\",\"tags\":{\"xifqjzgxm\":\"zvxurisjnhny\"},\"id\":\"hu\",\"name\":\"lw\",\"type\":\"cesutrgjupauut\"},{\"properties\":{\"description\":\"qhih\",\"scaleUnits\":1429268993,\"availabilitySetName\":\"g\",\"maxCacheAge\":4031354256714886930,\"customHostNames\":[],\"hostName\":\"tcypsxjvfoim\",\"cdnEnabled\":false,\"cdnProvider\":\"ircizjxvy\",\"cdnProfile\":\"ceacvlhvygdy\",\"provisioningState\":\"umrtwnawjsl\",\"resourceState\":\"Deleting\",\"freeTrialEndTime\":\"2021-05-26T01:46:18Z\",\"created\":\"2021-07-19T05:46:16Z\",\"lastModified\":\"2021-09-14T02:22:36Z\"},\"sku\":{\"name\":\"mznbaeqphch\",\"capacity\":325411087},\"location\":\"nrpxehuw\",\"tags\":{\"hbejdznxcvdsrhnj\":\"qgaifmviklbydv\"},\"id\":\"volvtn\",\"name\":\"v\",\"type\":\"fzg\"},{\"properties\":{\"description\":\"dftuljltduce\",\"scaleUnits\":10785400,\"availabilitySetName\":\"mczuo\",\"maxCacheAge\":3152262055981737836,\"customHostNames\":[],\"hostName\":\"qioknssxmojm\",\"cdnEnabled\":false,\"cdnProvider\":\"jpr\",\"cdnProfile\":\"wcfzqljyxgt\",\"provisioningState\":\"heyd\",\"resourceState\":\"Running\",\"freeTrialEndTime\":\"2021-07-18T11:40:45Z\",\"created\":\"2021-10-15T01:25:58Z\",\"lastModified\":\"2021-02-20T22:28:30Z\"},\"sku\":{\"name\":\"bbxuripl\",\"capacity\":102090310},\"location\":\"htba\",\"tags\":{\"kpyklyhp\":\"xywr\"},\"id\":\"uodpv\",\"name\":\"uudl\",\"type\":\"zibt\"},{\"properties\":{\"description\":\"tgk\",\"scaleUnits\":161330222,\"availabilitySetName\":\"vdxec\",\"maxCacheAge\":5414304113527690910,\"customHostNames\":[],\"hostName\":\"vh\",\"cdnEnabled\":false,\"cdnProvider\":\"lodqkdlwwqfbu\",\"cdnProfile\":\"kxtrq\",\"provisioningState\":\"smlmbtxhwgfwsrta\",\"resourceState\":\"Deleting\",\"freeTrialEndTime\":\"2021-07-17T15:33:43Z\",\"created\":\"2021-03-17T08:50:45Z\",\"lastModified\":\"2021-02-21T07:03:26Z\"},\"sku\":{\"name\":\"udygooo\",\"capacity\":1039197688},\"location\":\"fqjbvleo\",\"tags\":{\"bar\":\"luiqtqzfavyvnqq\"},\"id\":\"euayjkqabqgzsles\",\"name\":\"cbhernntiewdj\",\"type\":\"vbquwr\"}],\"@odata.count\":1619568012,\"@odata.nextLink\":\"agohbuff\"}")
                .toObject(StreamingEndpointListResult.class);
        Assertions.assertEquals("ucvpamrs", model.value().get(0).location());
        Assertions.assertEquals("zvxurisjnhny", model.value().get(0).tags().get("xifqjzgxm"));
        Assertions.assertEquals(1853767280, model.value().get(0).sku().capacity());
        Assertions.assertEquals("c", model.value().get(0).description());
        Assertions.assertEquals(427675177, model.value().get(0).scaleUnits());
        Assertions.assertEquals("niyujv", model.value().get(0).availabilitySetName());
        Assertions.assertEquals(4558783476830824181L, model.value().get(0).maxCacheAge());
        Assertions.assertEquals(true, model.value().get(0).cdnEnabled());
        Assertions.assertEquals("wncot", model.value().get(0).cdnProvider());
        Assertions.assertEquals("fhir", model.value().get(0).cdnProfile());
    }

    @Test
    public void testSerialize() {
        StreamingEndpointListResult model =
            new StreamingEndpointListResult()
                .withValue(
                    Arrays
                        .asList(
                            new StreamingEndpointInner()
                                .withLocation("ucvpamrs")
                                .withTags(mapOf("xifqjzgxm", "zvxurisjnhny"))
                                .withSku(new ArmStreamingEndpointCurrentSku().withCapacity(1853767280))
                                .withDescription("c")
                                .withScaleUnits(427675177)
                                .withAvailabilitySetName("niyujv")
                                .withMaxCacheAge(4558783476830824181L)
                                .withCustomHostNames(Arrays.asList())
                                .withCdnEnabled(true)
                                .withCdnProvider("wncot")
                                .withCdnProfile("fhir"),
                            new StreamingEndpointInner()
                                .withLocation("nrpxehuw")
                                .withTags(mapOf("hbejdznxcvdsrhnj", "qgaifmviklbydv"))
                                .withSku(new ArmStreamingEndpointCurrentSku().withCapacity(325411087))
                                .withDescription("qhih")
                                .withScaleUnits(1429268993)
                                .withAvailabilitySetName("g")
                                .withMaxCacheAge(4031354256714886930L)
                                .withCustomHostNames(Arrays.asList())
                                .withCdnEnabled(false)
                                .withCdnProvider("ircizjxvy")
                                .withCdnProfile("ceacvlhvygdy"),
                            new StreamingEndpointInner()
                                .withLocation("htba")
                                .withTags(mapOf("kpyklyhp", "xywr"))
                                .withSku(new ArmStreamingEndpointCurrentSku().withCapacity(102090310))
                                .withDescription("dftuljltduce")
                                .withScaleUnits(10785400)
                                .withAvailabilitySetName("mczuo")
                                .withMaxCacheAge(3152262055981737836L)
                                .withCustomHostNames(Arrays.asList())
                                .withCdnEnabled(false)
                                .withCdnProvider("jpr")
                                .withCdnProfile("wcfzqljyxgt"),
                            new StreamingEndpointInner()
                                .withLocation("fqjbvleo")
                                .withTags(mapOf("bar", "luiqtqzfavyvnqq"))
                                .withSku(new ArmStreamingEndpointCurrentSku().withCapacity(1039197688))
                                .withDescription("tgk")
                                .withScaleUnits(161330222)
                                .withAvailabilitySetName("vdxec")
                                .withMaxCacheAge(5414304113527690910L)
                                .withCustomHostNames(Arrays.asList())
                                .withCdnEnabled(false)
                                .withCdnProvider("lodqkdlwwqfbu")
                                .withCdnProfile("kxtrq")));
        model = BinaryData.fromObject(model).toObject(StreamingEndpointListResult.class);
        Assertions.assertEquals("ucvpamrs", model.value().get(0).location());
        Assertions.assertEquals("zvxurisjnhny", model.value().get(0).tags().get("xifqjzgxm"));
        Assertions.assertEquals(1853767280, model.value().get(0).sku().capacity());
        Assertions.assertEquals("c", model.value().get(0).description());
        Assertions.assertEquals(427675177, model.value().get(0).scaleUnits());
        Assertions.assertEquals("niyujv", model.value().get(0).availabilitySetName());
        Assertions.assertEquals(4558783476830824181L, model.value().get(0).maxCacheAge());
        Assertions.assertEquals(true, model.value().get(0).cdnEnabled());
        Assertions.assertEquals("wncot", model.value().get(0).cdnProvider());
        Assertions.assertEquals("fhir", model.value().get(0).cdnProfile());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
