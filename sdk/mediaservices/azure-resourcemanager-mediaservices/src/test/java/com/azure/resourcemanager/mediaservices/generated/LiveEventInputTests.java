// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.IpAccessControl;
import com.azure.resourcemanager.mediaservices.models.LiveEventEndpoint;
import com.azure.resourcemanager.mediaservices.models.LiveEventInput;
import com.azure.resourcemanager.mediaservices.models.LiveEventInputAccessControl;
import com.azure.resourcemanager.mediaservices.models.LiveEventInputProtocol;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class LiveEventInputTests {
    @Test
    public void testDeserialize() {
        LiveEventInput model =
            BinaryData
                .fromString(
                    "{\"streamingProtocol\":\"RTMP\",\"accessControl\":{\"ip\":{\"allow\":[]}},\"keyFrameIntervalDuration\":\"fhwygzlvdnkfxus\",\"accessToken\":\"dwzrmuh\",\"endpoints\":[{\"protocol\":\"qdpsqxqvpsvu\",\"url\":\"mgccelvezrypq\"},{\"protocol\":\"feo\",\"url\":\"rqwky\"}]}")
                .toObject(LiveEventInput.class);
        Assertions.assertEquals(LiveEventInputProtocol.RTMP, model.streamingProtocol());
        Assertions.assertEquals("fhwygzlvdnkfxus", model.keyFrameIntervalDuration());
        Assertions.assertEquals("dwzrmuh", model.accessToken());
        Assertions.assertEquals("qdpsqxqvpsvu", model.endpoints().get(0).protocol());
        Assertions.assertEquals("mgccelvezrypq", model.endpoints().get(0).url());
    }

    @Test
    public void testSerialize() {
        LiveEventInput model =
            new LiveEventInput()
                .withStreamingProtocol(LiveEventInputProtocol.RTMP)
                .withAccessControl(
                    new LiveEventInputAccessControl().withIp(new IpAccessControl().withAllow(Arrays.asList())))
                .withKeyFrameIntervalDuration("fhwygzlvdnkfxus")
                .withAccessToken("dwzrmuh")
                .withEndpoints(
                    Arrays
                        .asList(
                            new LiveEventEndpoint().withProtocol("qdpsqxqvpsvu").withUrl("mgccelvezrypq"),
                            new LiveEventEndpoint().withProtocol("feo").withUrl("rqwky")));
        model = BinaryData.fromObject(model).toObject(LiveEventInput.class);
        Assertions.assertEquals(LiveEventInputProtocol.RTMP, model.streamingProtocol());
        Assertions.assertEquals("fhwygzlvdnkfxus", model.keyFrameIntervalDuration());
        Assertions.assertEquals("dwzrmuh", model.accessToken());
        Assertions.assertEquals("qdpsqxqvpsvu", model.endpoints().get(0).protocol());
        Assertions.assertEquals("mgccelvezrypq", model.endpoints().get(0).url());
    }
}
