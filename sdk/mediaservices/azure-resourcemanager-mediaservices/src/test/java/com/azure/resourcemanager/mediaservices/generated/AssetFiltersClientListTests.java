// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.fluent.models.AssetFilterInner;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AssetFiltersClientListTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"presentationTimeRange\":{\"startTimestamp\":1472225226718696941,\"endTimestamp\":6249985858118905531,\"presentationWindowDuration\":767486201426523354,\"liveBackoffDuration\":3711176566749226600,\"timescale\":7267482395817324073,\"forceEndTimestamp\":true},\"firstQuality\":{\"bitrate\":1272146098},\"tracks\":[]},\"id\":\"eickpz\",\"name\":\"cpopmxel\",\"type\":\"wcltyjede\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AssetFilterInner> response =
            manager.serviceClient().getAssetFilters().list("llxecwc", "ojphslhc", "wjutifdwfmv", Context.NONE);

        Assertions
            .assertEquals(1472225226718696941L, response.iterator().next().presentationTimeRange().startTimestamp());
        Assertions
            .assertEquals(6249985858118905531L, response.iterator().next().presentationTimeRange().endTimestamp());
        Assertions
            .assertEquals(
                767486201426523354L, response.iterator().next().presentationTimeRange().presentationWindowDuration());
        Assertions
            .assertEquals(
                3711176566749226600L, response.iterator().next().presentationTimeRange().liveBackoffDuration());
        Assertions.assertEquals(7267482395817324073L, response.iterator().next().presentationTimeRange().timescale());
        Assertions.assertEquals(true, response.iterator().next().presentationTimeRange().forceEndTimestamp());
        Assertions.assertEquals(1272146098, response.iterator().next().firstQuality().bitrate());
    }
}
