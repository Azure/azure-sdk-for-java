// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.CbcsDrmConfiguration;
import com.azure.resourcemanager.mediaservices.models.CommonEncryptionCbcs;
import com.azure.resourcemanager.mediaservices.models.DefaultKey;
import com.azure.resourcemanager.mediaservices.models.EnabledProtocols;
import com.azure.resourcemanager.mediaservices.models.StreamingPolicyContentKey;
import com.azure.resourcemanager.mediaservices.models.StreamingPolicyContentKeys;
import com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration;
import com.azure.resourcemanager.mediaservices.models.StreamingPolicyPlayReadyConfiguration;
import com.azure.resourcemanager.mediaservices.models.StreamingPolicyWidevineConfiguration;
import com.azure.resourcemanager.mediaservices.models.TrackSelection;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class CommonEncryptionCbcsTests {
    @Test
    public void testDeserialize() {
        CommonEncryptionCbcs model =
            BinaryData
                .fromString(
                    "{\"enabledProtocols\":{\"download\":true,\"dash\":false,\"hls\":true,\"smoothStreaming\":true},\"clearTracks\":[{\"trackSelections\":[]},{\"trackSelections\":[]},{\"trackSelections\":[]},{\"trackSelections\":[]}],\"contentKeys\":{\"defaultKey\":{\"label\":\"lxgwimfnjhf\",\"policyName\":\"wmszkk\"},\"keyToTrackMappings\":[{\"label\":\"eyfkzikfja\",\"policyName\":\"eaivxwczel\",\"tracks\":[]},{\"label\":\"r\",\"policyName\":\"sfeaenwabfat\",\"tracks\":[]}]},\"drm\":{\"fairPlay\":{\"customLicenseAcquisitionUrlTemplate\":\"bjhwuaan\",\"allowPersistentLicense\":false},\"playReady\":{\"customLicenseAcquisitionUrlTemplate\":\"sphyoulpjrvxa\",\"playReadyCustomAttributes\":\"rvimjwosytxitcsk\"},\"widevine\":{\"customLicenseAcquisitionUrlTemplate\":\"tq\"}}}")
                .toObject(CommonEncryptionCbcs.class);
        Assertions.assertEquals(true, model.enabledProtocols().download());
        Assertions.assertEquals(false, model.enabledProtocols().dash());
        Assertions.assertEquals(true, model.enabledProtocols().hls());
        Assertions.assertEquals(true, model.enabledProtocols().smoothStreaming());
        Assertions.assertEquals("lxgwimfnjhf", model.contentKeys().defaultKey().label());
        Assertions.assertEquals("wmszkk", model.contentKeys().defaultKey().policyName());
        Assertions.assertEquals("eyfkzikfja", model.contentKeys().keyToTrackMappings().get(0).label());
        Assertions.assertEquals("eaivxwczel", model.contentKeys().keyToTrackMappings().get(0).policyName());
        Assertions.assertEquals("bjhwuaan", model.drm().fairPlay().customLicenseAcquisitionUrlTemplate());
        Assertions.assertEquals(false, model.drm().fairPlay().allowPersistentLicense());
        Assertions.assertEquals("sphyoulpjrvxa", model.drm().playReady().customLicenseAcquisitionUrlTemplate());
        Assertions.assertEquals("rvimjwosytxitcsk", model.drm().playReady().playReadyCustomAttributes());
        Assertions.assertEquals("tq", model.drm().widevine().customLicenseAcquisitionUrlTemplate());
    }

    @Test
    public void testSerialize() {
        CommonEncryptionCbcs model =
            new CommonEncryptionCbcs()
                .withEnabledProtocols(
                    new EnabledProtocols().withDownload(true).withDash(false).withHls(true).withSmoothStreaming(true))
                .withClearTracks(
                    Arrays
                        .asList(
                            new TrackSelection().withTrackSelections(Arrays.asList()),
                            new TrackSelection().withTrackSelections(Arrays.asList()),
                            new TrackSelection().withTrackSelections(Arrays.asList()),
                            new TrackSelection().withTrackSelections(Arrays.asList())))
                .withContentKeys(
                    new StreamingPolicyContentKeys()
                        .withDefaultKey(new DefaultKey().withLabel("lxgwimfnjhf").withPolicyName("wmszkk"))
                        .withKeyToTrackMappings(
                            Arrays
                                .asList(
                                    new StreamingPolicyContentKey()
                                        .withLabel("eyfkzikfja")
                                        .withPolicyName("eaivxwczel")
                                        .withTracks(Arrays.asList()),
                                    new StreamingPolicyContentKey()
                                        .withLabel("r")
                                        .withPolicyName("sfeaenwabfat")
                                        .withTracks(Arrays.asList()))))
                .withDrm(
                    new CbcsDrmConfiguration()
                        .withFairPlay(
                            new StreamingPolicyFairPlayConfiguration()
                                .withCustomLicenseAcquisitionUrlTemplate("bjhwuaan")
                                .withAllowPersistentLicense(false))
                        .withPlayReady(
                            new StreamingPolicyPlayReadyConfiguration()
                                .withCustomLicenseAcquisitionUrlTemplate("sphyoulpjrvxa")
                                .withPlayReadyCustomAttributes("rvimjwosytxitcsk"))
                        .withWidevine(
                            new StreamingPolicyWidevineConfiguration().withCustomLicenseAcquisitionUrlTemplate("tq")));
        model = BinaryData.fromObject(model).toObject(CommonEncryptionCbcs.class);
        Assertions.assertEquals(true, model.enabledProtocols().download());
        Assertions.assertEquals(false, model.enabledProtocols().dash());
        Assertions.assertEquals(true, model.enabledProtocols().hls());
        Assertions.assertEquals(true, model.enabledProtocols().smoothStreaming());
        Assertions.assertEquals("lxgwimfnjhf", model.contentKeys().defaultKey().label());
        Assertions.assertEquals("wmszkk", model.contentKeys().defaultKey().policyName());
        Assertions.assertEquals("eyfkzikfja", model.contentKeys().keyToTrackMappings().get(0).label());
        Assertions.assertEquals("eaivxwczel", model.contentKeys().keyToTrackMappings().get(0).policyName());
        Assertions.assertEquals("bjhwuaan", model.drm().fairPlay().customLicenseAcquisitionUrlTemplate());
        Assertions.assertEquals(false, model.drm().fairPlay().allowPersistentLicense());
        Assertions.assertEquals("sphyoulpjrvxa", model.drm().playReady().customLicenseAcquisitionUrlTemplate());
        Assertions.assertEquals("rvimjwosytxitcsk", model.drm().playReady().playReadyCustomAttributes());
        Assertions.assertEquals("tq", model.drm().widevine().customLicenseAcquisitionUrlTemplate());
    }
}
