// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.H265VideoLayer;
import org.junit.jupiter.api.Assertions;

public final class H265VideoLayerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        H265VideoLayer model = BinaryData.fromString(
            "{\"bitrate\":852372521,\"maxBitrate\":1592470818,\"bFrames\":1233183309,\"frameRate\":\"txmwoteyow\",\"slices\":1671078862,\"adaptiveBFrame\":true,\"width\":\"ekqvgqouwif\",\"height\":\"pjwyiv\",\"label\":\"kfxcvhrfs\"}")
            .toObject(H265VideoLayer.class);
        Assertions.assertEquals("ekqvgqouwif", model.width());
        Assertions.assertEquals("pjwyiv", model.height());
        Assertions.assertEquals("kfxcvhrfs", model.label());
        Assertions.assertEquals(852372521, model.bitrate());
        Assertions.assertEquals(1592470818, model.maxBitrate());
        Assertions.assertEquals(1233183309, model.bFrames());
        Assertions.assertEquals("txmwoteyow", model.frameRate());
        Assertions.assertEquals(1671078862, model.slices());
        Assertions.assertEquals(true, model.adaptiveBFrame());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        H265VideoLayer model = new H265VideoLayer().withWidth("ekqvgqouwif")
            .withHeight("pjwyiv")
            .withLabel("kfxcvhrfs")
            .withBitrate(852372521)
            .withMaxBitrate(1592470818)
            .withBFrames(1233183309)
            .withFrameRate("txmwoteyow")
            .withSlices(1671078862)
            .withAdaptiveBFrame(true);
        model = BinaryData.fromObject(model).toObject(H265VideoLayer.class);
        Assertions.assertEquals("ekqvgqouwif", model.width());
        Assertions.assertEquals("pjwyiv", model.height());
        Assertions.assertEquals("kfxcvhrfs", model.label());
        Assertions.assertEquals(852372521, model.bitrate());
        Assertions.assertEquals(1592470818, model.maxBitrate());
        Assertions.assertEquals(1233183309, model.bFrames());
        Assertions.assertEquals("txmwoteyow", model.frameRate());
        Assertions.assertEquals(1671078862, model.slices());
        Assertions.assertEquals(true, model.adaptiveBFrame());
    }
}
