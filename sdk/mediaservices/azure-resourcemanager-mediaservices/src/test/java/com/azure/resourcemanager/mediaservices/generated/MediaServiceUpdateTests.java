// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.AccountEncryption;
import com.azure.resourcemanager.mediaservices.models.AccountEncryptionKeyType;
import com.azure.resourcemanager.mediaservices.models.KeyDelivery;
import com.azure.resourcemanager.mediaservices.models.MediaServiceIdentity;
import com.azure.resourcemanager.mediaservices.models.MediaServiceUpdate;
import com.azure.resourcemanager.mediaservices.models.PublicNetworkAccess;
import com.azure.resourcemanager.mediaservices.models.StorageAccount;
import com.azure.resourcemanager.mediaservices.models.StorageAccountType;
import com.azure.resourcemanager.mediaservices.models.StorageAuthentication;
import com.azure.resourcemanager.mediaservices.models.UserAssignedManagedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class MediaServiceUpdateTests {
    @Test
    public void testDeserialize() {
        MediaServiceUpdate model =
            BinaryData
                .fromString(
                    "{\"tags\":{\"kqsleyyvxy\":\"gqhcjrefovg\",\"cr\":\"jpkcattpng\",\"ajvnysounqe\":\"czsqpjhvm\"},\"properties\":{\"storageAccounts\":[{\"id\":\"upfh\",\"type\":\"Secondary\",\"status\":\"rpmopjmc\"}],\"storageAuthentication\":\"System\",\"encryption\":{\"type\":\"SystemKey\",\"status\":\"fu\"},\"keyDelivery\":{},\"publicNetworkAccess\":\"Disabled\",\"provisioningState\":\"Succeeded\",\"privateEndpointConnections\":[{\"id\":\"vxodpu\",\"name\":\"zmyzydagf\",\"type\":\"axbezyiuo\"}]},\"identity\":{\"type\":\"twhrdxwzywqsm\",\"userAssignedIdentities\":{\"moryocfsfksym\":{}}}}")
                .toObject(MediaServiceUpdate.class);
        Assertions.assertEquals("gqhcjrefovg", model.tags().get("kqsleyyvxy"));
        Assertions.assertEquals("twhrdxwzywqsm", model.identity().type());
        Assertions.assertEquals("upfh", model.storageAccounts().get(0).id());
        Assertions.assertEquals(StorageAccountType.SECONDARY, model.storageAccounts().get(0).type());
        Assertions.assertEquals(StorageAuthentication.SYSTEM, model.storageAuthentication());
        Assertions.assertEquals(AccountEncryptionKeyType.SYSTEM_KEY, model.encryption().type());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
    }

    @Test
    public void testSerialize() {
        MediaServiceUpdate model =
            new MediaServiceUpdate()
                .withTags(mapOf("kqsleyyvxy", "gqhcjrefovg", "cr", "jpkcattpng", "ajvnysounqe", "czsqpjhvm"))
                .withIdentity(
                    new MediaServiceIdentity()
                        .withType("twhrdxwzywqsm")
                        .withUserAssignedIdentities(mapOf("moryocfsfksym", new UserAssignedManagedIdentity())))
                .withStorageAccounts(
                    Arrays.asList(new StorageAccount().withId("upfh").withType(StorageAccountType.SECONDARY)))
                .withStorageAuthentication(StorageAuthentication.SYSTEM)
                .withEncryption(new AccountEncryption().withType(AccountEncryptionKeyType.SYSTEM_KEY))
                .withKeyDelivery(new KeyDelivery())
                .withPublicNetworkAccess(PublicNetworkAccess.DISABLED);
        model = BinaryData.fromObject(model).toObject(MediaServiceUpdate.class);
        Assertions.assertEquals("gqhcjrefovg", model.tags().get("kqsleyyvxy"));
        Assertions.assertEquals("twhrdxwzywqsm", model.identity().type());
        Assertions.assertEquals("upfh", model.storageAccounts().get(0).id());
        Assertions.assertEquals(StorageAccountType.SECONDARY, model.storageAccounts().get(0).type());
        Assertions.assertEquals(StorageAuthentication.SYSTEM, model.storageAuthentication());
        Assertions.assertEquals(AccountEncryptionKeyType.SYSTEM_KEY, model.encryption().type());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
