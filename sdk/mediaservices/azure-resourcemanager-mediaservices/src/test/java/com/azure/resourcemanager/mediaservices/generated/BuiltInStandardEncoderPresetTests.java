// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.BuiltInStandardEncoderPreset;
import com.azure.resourcemanager.mediaservices.models.Complexity;
import com.azure.resourcemanager.mediaservices.models.EncoderNamedPreset;
import com.azure.resourcemanager.mediaservices.models.InterleaveOutput;
import com.azure.resourcemanager.mediaservices.models.PresetConfigurations;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class BuiltInStandardEncoderPresetTests {
    @Test
    public void testDeserialize() {
        BuiltInStandardEncoderPreset model =
            BinaryData
                .fromString(
                    "{\"@odata.type\":\"#Microsoft.Media.BuiltInStandardEncoderPreset\",\"configurations\":{\"complexity\":\"Speed\",\"interleaveOutput\":\"InterleavedOutput\",\"keyFrameIntervalInSeconds\":56.52645,\"maxBitrateBps\":2086555538,\"maxHeight\":1656639409,\"maxLayers\":1467633348,\"minBitrateBps\":2010820897,\"minHeight\":1454570926},\"presetName\":\"ContentAwareEncoding\"}")
                .toObject(BuiltInStandardEncoderPreset.class);
        Assertions.assertEquals(Complexity.SPEED, model.configurations().complexity());
        Assertions.assertEquals(InterleaveOutput.INTERLEAVED_OUTPUT, model.configurations().interleaveOutput());
        Assertions.assertEquals(56.52645f, model.configurations().keyFrameIntervalInSeconds());
        Assertions.assertEquals(2086555538, model.configurations().maxBitrateBps());
        Assertions.assertEquals(1656639409, model.configurations().maxHeight());
        Assertions.assertEquals(1467633348, model.configurations().maxLayers());
        Assertions.assertEquals(2010820897, model.configurations().minBitrateBps());
        Assertions.assertEquals(1454570926, model.configurations().minHeight());
        Assertions.assertEquals(EncoderNamedPreset.CONTENT_AWARE_ENCODING, model.presetName());
    }

    @Test
    public void testSerialize() {
        BuiltInStandardEncoderPreset model =
            new BuiltInStandardEncoderPreset()
                .withConfigurations(
                    new PresetConfigurations()
                        .withComplexity(Complexity.SPEED)
                        .withInterleaveOutput(InterleaveOutput.INTERLEAVED_OUTPUT)
                        .withKeyFrameIntervalInSeconds(56.52645f)
                        .withMaxBitrateBps(2086555538)
                        .withMaxHeight(1656639409)
                        .withMaxLayers(1467633348)
                        .withMinBitrateBps(2010820897)
                        .withMinHeight(1454570926))
                .withPresetName(EncoderNamedPreset.CONTENT_AWARE_ENCODING);
        model = BinaryData.fromObject(model).toObject(BuiltInStandardEncoderPreset.class);
        Assertions.assertEquals(Complexity.SPEED, model.configurations().complexity());
        Assertions.assertEquals(InterleaveOutput.INTERLEAVED_OUTPUT, model.configurations().interleaveOutput());
        Assertions.assertEquals(56.52645f, model.configurations().keyFrameIntervalInSeconds());
        Assertions.assertEquals(2086555538, model.configurations().maxBitrateBps());
        Assertions.assertEquals(1656639409, model.configurations().maxHeight());
        Assertions.assertEquals(1467633348, model.configurations().maxLayers());
        Assertions.assertEquals(2010820897, model.configurations().minBitrateBps());
        Assertions.assertEquals(1454570926, model.configurations().minHeight());
        Assertions.assertEquals(EncoderNamedPreset.CONTENT_AWARE_ENCODING, model.presetName());
    }
}
