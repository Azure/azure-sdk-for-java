// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.StreamingLocatorProperties;
import com.azure.resourcemanager.mediaservices.models.StreamingLocatorContentKey;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class StreamingLocatorPropertiesTests {
    @Test
    public void testDeserialize() {
        StreamingLocatorProperties model =
            BinaryData
                .fromString(
                    "{\"assetName\":\"mr\",\"created\":\"2020-12-29T19:37:29Z\",\"startTime\":\"2021-09-20T19:31:37Z\",\"endTime\":\"2021-01-18T20:12:16Z\",\"streamingPolicyName\":\"udflvkgjubgdknn\",\"defaultContentKeyPolicyName\":\"saznqntoruds\",\"contentKeys\":[{\"type\":\"CommonEncryptionCenc\",\"labelReferenceInStreamingPolicy\":\"yc\",\"value\":\"auwjuetaebu\",\"policyName\":\"vdmovsmzlxwabm\",\"tracks\":[]}],\"alternativeMediaId\":\"kif\",\"filters\":[\"puqujmqlgkfbtn\",\"oaongbjc\"]}")
                .toObject(StreamingLocatorProperties.class);
        Assertions.assertEquals("mr", model.assetName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-20T19:31:37Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-18T20:12:16Z"), model.endTime());
        Assertions.assertEquals("udflvkgjubgdknn", model.streamingPolicyName());
        Assertions.assertEquals("saznqntoruds", model.defaultContentKeyPolicyName());
        Assertions.assertEquals("yc", model.contentKeys().get(0).labelReferenceInStreamingPolicy());
        Assertions.assertEquals("auwjuetaebu", model.contentKeys().get(0).value());
        Assertions.assertEquals("kif", model.alternativeMediaId());
        Assertions.assertEquals("puqujmqlgkfbtn", model.filters().get(0));
    }

    @Test
    public void testSerialize() {
        StreamingLocatorProperties model =
            new StreamingLocatorProperties()
                .withAssetName("mr")
                .withStartTime(OffsetDateTime.parse("2021-09-20T19:31:37Z"))
                .withEndTime(OffsetDateTime.parse("2021-01-18T20:12:16Z"))
                .withStreamingPolicyName("udflvkgjubgdknn")
                .withDefaultContentKeyPolicyName("saznqntoruds")
                .withContentKeys(
                    Arrays
                        .asList(
                            new StreamingLocatorContentKey()
                                .withLabelReferenceInStreamingPolicy("yc")
                                .withValue("auwjuetaebu")))
                .withAlternativeMediaId("kif")
                .withFilters(Arrays.asList("puqujmqlgkfbtn", "oaongbjc"));
        model = BinaryData.fromObject(model).toObject(StreamingLocatorProperties.class);
        Assertions.assertEquals("mr", model.assetName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-20T19:31:37Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-18T20:12:16Z"), model.endTime());
        Assertions.assertEquals("udflvkgjubgdknn", model.streamingPolicyName());
        Assertions.assertEquals("saznqntoruds", model.defaultContentKeyPolicyName());
        Assertions.assertEquals("yc", model.contentKeys().get(0).labelReferenceInStreamingPolicy());
        Assertions.assertEquals("auwjuetaebu", model.contentKeys().get(0).value());
        Assertions.assertEquals("kif", model.alternativeMediaId());
        Assertions.assertEquals("puqujmqlgkfbtn", model.filters().get(0));
    }
}
