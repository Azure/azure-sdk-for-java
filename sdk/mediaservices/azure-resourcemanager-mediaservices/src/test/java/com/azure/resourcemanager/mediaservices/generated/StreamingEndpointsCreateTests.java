// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.models.ArmStreamingEndpointCurrentSku;
import com.azure.resourcemanager.mediaservices.models.CrossSiteAccessPolicies;
import com.azure.resourcemanager.mediaservices.models.StreamingEndpoint;
import com.azure.resourcemanager.mediaservices.models.StreamingEndpointAccessControl;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class StreamingEndpointsCreateTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"description\":\"xh\",\"scaleUnits\":529591375,\"availabilitySetName\":\"uug\",\"accessControl\":{},\"maxCacheAge\":1942292497864642353,\"customHostNames\":[\"kfuarenlv\"],\"hostName\":\"tklnvnafvvkyfed\",\"cdnEnabled\":true,\"cdnProvider\":\"oslc\",\"cdnProfile\":\"y\",\"provisioningState\":\"Succeeded\",\"resourceState\":\"Starting\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"wuninv\",\"crossDomainPolicy\":\"bchaqd\"},\"freeTrialEndTime\":\"2021-06-19T09:08:45Z\",\"created\":\"2021-09-29T03:58:04Z\",\"lastModified\":\"2021-11-13T04:03:11Z\"},\"sku\":{\"name\":\"xxdtddmflh\",\"capacity\":334709748},\"location\":\"xzvtzna\",\"tags\":{\"nwvroevytlyokrr\":\"annovvoxczytpr\",\"uxvnsasbcrymodi\":\"o\",\"lmv\":\"rxklobdxnazpmk\",\"zxlioh\":\"vfxzopjh\"},\"id\":\"d\",\"name\":\"dtfgxqbawpcbb\",\"type\":\"zqcyknap\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        StreamingEndpoint response =
            manager
                .streamingEndpoints()
                .define("penuy")
                .withRegion("suckzm")
                .withExistingMediaservice("fzyjqt", "vwkpqh")
                .withTags(
                    mapOf(
                        "jnhgwydyyn",
                        "lsnoxaxmqeqalh",
                        "ta",
                        "svkhgbv",
                        "jcpeogkhnmg",
                        "arfdlpukhpyrnei",
                        "xddbhfhpfpaz",
                        "ro"))
                .withSku(new ArmStreamingEndpointCurrentSku().withCapacity(1379666899))
                .withDescription("eqqe")
                .withScaleUnits(583877472)
                .withAvailabilitySetName("vnqvcd")
                .withAccessControl(new StreamingEndpointAccessControl())
                .withMaxCacheAge(1583021266402651237L)
                .withCustomHostNames(Arrays.asList("jwnlax", "un", "qikczvvita", "gx"))
                .withCdnEnabled(false)
                .withCdnProvider("hlwntsjgq")
                .withCdnProfile("xypruuuy")
                .withCrossSiteAccessPolicies(
                    new CrossSiteAccessPolicies()
                        .withClientAccessPolicy("lyetndnbfqygg")
                        .withCrossDomainPolicy("flnlgmtr"))
                .withAutoStart(true)
                .create();

        Assertions.assertEquals("xzvtzna", response.location());
        Assertions.assertEquals("annovvoxczytpr", response.tags().get("nwvroevytlyokrr"));
        Assertions.assertEquals(334709748, response.sku().capacity());
        Assertions.assertEquals("xh", response.description());
        Assertions.assertEquals(529591375, response.scaleUnits());
        Assertions.assertEquals("uug", response.availabilitySetName());
        Assertions.assertEquals(1942292497864642353L, response.maxCacheAge());
        Assertions.assertEquals("kfuarenlv", response.customHostNames().get(0));
        Assertions.assertEquals(true, response.cdnEnabled());
        Assertions.assertEquals("oslc", response.cdnProvider());
        Assertions.assertEquals("y", response.cdnProfile());
        Assertions.assertEquals("wuninv", response.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("bchaqd", response.crossSiteAccessPolicies().crossDomainPolicy());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
