// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.Codec;
import com.azure.resourcemanager.mediaservices.models.Deinterlace;
import com.azure.resourcemanager.mediaservices.models.DeinterlaceMode;
import com.azure.resourcemanager.mediaservices.models.DeinterlaceParity;
import com.azure.resourcemanager.mediaservices.models.Filters;
import com.azure.resourcemanager.mediaservices.models.Format;
import com.azure.resourcemanager.mediaservices.models.Overlay;
import com.azure.resourcemanager.mediaservices.models.Rectangle;
import com.azure.resourcemanager.mediaservices.models.Rotation;
import com.azure.resourcemanager.mediaservices.models.StandardEncoderPreset;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class StandardEncoderPresetTests {
    @Test
    public void testDeserialize() {
        StandardEncoderPreset model =
            BinaryData
                .fromString(
                    "{\"@odata.type\":\"#Microsoft.Media.StandardEncoderPreset\",\"filters\":{\"deinterlace\":{\"parity\":\"TopFieldFirst\",\"mode\":\"AutoPixelAdaptive\"},\"rotation\":\"Rotate180\",\"crop\":{\"left\":\"zakakankjpdn\",\"top\":\"ha\",\"width\":\"ylhjlm\",\"height\":\"y\"},\"overlays\":[{\"@odata.type\":\"Overlay\",\"inputLabel\":\"imrsopteecjmei\",\"start\":\"PT83H33M45S\",\"end\":\"PT61H20M5S\",\"fadeInDuration\":\"PT215H19M24S\",\"fadeOutDuration\":\"PT1H21M14S\",\"audioGainLevel\":20.93211201780282},{\"@odata.type\":\"Overlay\",\"inputLabel\":\"zaum\",\"start\":\"PT129H30M20S\",\"end\":\"PT215H23M4S\",\"fadeInDuration\":\"PT235H41M42S\",\"fadeOutDuration\":\"PT26H54M18S\",\"audioGainLevel\":60.65704304674413}]},\"codecs\":[{\"@odata.type\":\"Codec\",\"label\":\"jathwtzo\"},{\"@odata.type\":\"Codec\",\"label\":\"a\"},{\"@odata.type\":\"Codec\",\"label\":\"wm\"}],\"formats\":[{\"@odata.type\":\"Format\",\"filenamePattern\":\"mebwjscjpah\"}]}")
                .toObject(StandardEncoderPreset.class);
        Assertions.assertEquals(DeinterlaceParity.TOP_FIELD_FIRST, model.filters().deinterlace().parity());
        Assertions.assertEquals(DeinterlaceMode.AUTO_PIXEL_ADAPTIVE, model.filters().deinterlace().mode());
        Assertions.assertEquals(Rotation.ROTATE180, model.filters().rotation());
        Assertions.assertEquals("zakakankjpdn", model.filters().crop().left());
        Assertions.assertEquals("ha", model.filters().crop().top());
        Assertions.assertEquals("ylhjlm", model.filters().crop().width());
        Assertions.assertEquals("y", model.filters().crop().height());
        Assertions.assertEquals("imrsopteecjmei", model.filters().overlays().get(0).inputLabel());
        Assertions.assertEquals(Duration.parse("PT83H33M45S"), model.filters().overlays().get(0).start());
        Assertions.assertEquals(Duration.parse("PT61H20M5S"), model.filters().overlays().get(0).end());
        Assertions.assertEquals(Duration.parse("PT215H19M24S"), model.filters().overlays().get(0).fadeInDuration());
        Assertions.assertEquals(Duration.parse("PT1H21M14S"), model.filters().overlays().get(0).fadeOutDuration());
        Assertions.assertEquals(20.93211201780282, model.filters().overlays().get(0).audioGainLevel());
        Assertions.assertEquals("jathwtzo", model.codecs().get(0).label());
        Assertions.assertEquals("mebwjscjpah", model.formats().get(0).filenamePattern());
    }

    @Test
    public void testSerialize() {
        StandardEncoderPreset model =
            new StandardEncoderPreset()
                .withFilters(
                    new Filters()
                        .withDeinterlace(
                            new Deinterlace()
                                .withParity(DeinterlaceParity.TOP_FIELD_FIRST)
                                .withMode(DeinterlaceMode.AUTO_PIXEL_ADAPTIVE))
                        .withRotation(Rotation.ROTATE180)
                        .withCrop(
                            new Rectangle().withLeft("zakakankjpdn").withTop("ha").withWidth("ylhjlm").withHeight("y"))
                        .withOverlays(
                            Arrays
                                .asList(
                                    new Overlay()
                                        .withInputLabel("imrsopteecjmei")
                                        .withStart(Duration.parse("PT83H33M45S"))
                                        .withEnd(Duration.parse("PT61H20M5S"))
                                        .withFadeInDuration(Duration.parse("PT215H19M24S"))
                                        .withFadeOutDuration(Duration.parse("PT1H21M14S"))
                                        .withAudioGainLevel(20.93211201780282),
                                    new Overlay()
                                        .withInputLabel("zaum")
                                        .withStart(Duration.parse("PT129H30M20S"))
                                        .withEnd(Duration.parse("PT215H23M4S"))
                                        .withFadeInDuration(Duration.parse("PT235H41M42S"))
                                        .withFadeOutDuration(Duration.parse("PT26H54M18S"))
                                        .withAudioGainLevel(60.65704304674413))))
                .withCodecs(
                    Arrays
                        .asList(
                            new Codec().withLabel("jathwtzo"), new Codec().withLabel("a"), new Codec().withLabel("wm")))
                .withFormats(Arrays.asList(new Format().withFilenamePattern("mebwjscjpah")));
        model = BinaryData.fromObject(model).toObject(StandardEncoderPreset.class);
        Assertions.assertEquals(DeinterlaceParity.TOP_FIELD_FIRST, model.filters().deinterlace().parity());
        Assertions.assertEquals(DeinterlaceMode.AUTO_PIXEL_ADAPTIVE, model.filters().deinterlace().mode());
        Assertions.assertEquals(Rotation.ROTATE180, model.filters().rotation());
        Assertions.assertEquals("zakakankjpdn", model.filters().crop().left());
        Assertions.assertEquals("ha", model.filters().crop().top());
        Assertions.assertEquals("ylhjlm", model.filters().crop().width());
        Assertions.assertEquals("y", model.filters().crop().height());
        Assertions.assertEquals("imrsopteecjmei", model.filters().overlays().get(0).inputLabel());
        Assertions.assertEquals(Duration.parse("PT83H33M45S"), model.filters().overlays().get(0).start());
        Assertions.assertEquals(Duration.parse("PT61H20M5S"), model.filters().overlays().get(0).end());
        Assertions.assertEquals(Duration.parse("PT215H19M24S"), model.filters().overlays().get(0).fadeInDuration());
        Assertions.assertEquals(Duration.parse("PT1H21M14S"), model.filters().overlays().get(0).fadeOutDuration());
        Assertions.assertEquals(20.93211201780282, model.filters().overlays().get(0).audioGainLevel());
        Assertions.assertEquals("jathwtzo", model.codecs().get(0).label());
        Assertions.assertEquals("mebwjscjpah", model.formats().get(0).filenamePattern());
    }
}
