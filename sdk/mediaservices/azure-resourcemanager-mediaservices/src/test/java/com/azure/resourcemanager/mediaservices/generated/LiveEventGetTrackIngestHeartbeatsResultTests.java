// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.LiveEventTrackEventInner;
import com.azure.resourcemanager.mediaservices.models.LiveEventGetTrackIngestHeartbeatsResult;
import com.azure.resourcemanager.mediaservices.models.LiveEventTrackEventData;
import com.azure.resourcemanager.mediaservices.models.LiveEventTrackEventType;
import com.azure.resourcemanager.mediaservices.models.LiveEventTrackType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class LiveEventGetTrackIngestHeartbeatsResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LiveEventGetTrackIngestHeartbeatsResult model = BinaryData.fromString(
            "{\"value\":[{\"eventType\":\"TrackEvent/IngestHeartbeat\",\"eventTime\":\"2021-03-20T11:07:14Z\",\"data\":{\"trackName\":\"mvvhmxtdrjfuta\",\"trackType\":\"video\",\"bitrate\":5288556587713663943,\"incomingBitrate\":6725568164832621369,\"lastTimestamp\":\"jznmwcpmguaa\",\"timescale\":\"aufactkahzovajjz\",\"overlapCount\":1494527488794352511,\"discontinuityCount\":488183709893117176,\"nonincreasingCount\":7816879352665514868,\"unexpectedBitrate\":false,\"state\":\"fgslqubkwdl\",\"healthy\":false,\"lastFragmentArrivalTime\":\"2021-02-18T06:07:47Z\",\"ingestDriftValue\":\"tujbazpju\",\"transcriptionState\":\"minyflnorwm\",\"transcriptionLanguage\":\"vwpklvxwmygdxp\"}}]}")
            .toObject(LiveEventGetTrackIngestHeartbeatsResult.class);
        Assertions.assertEquals(LiveEventTrackEventType.TRACK_EVENT_INGEST_HEARTBEAT, model.value().get(0).eventType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-20T11:07:14Z"), model.value().get(0).eventTime());
        Assertions.assertEquals("mvvhmxtdrjfuta", model.value().get(0).data().trackName());
        Assertions.assertEquals(LiveEventTrackType.VIDEO, model.value().get(0).data().trackType());
        Assertions.assertEquals(5288556587713663943L, model.value().get(0).data().bitrate());
        Assertions.assertEquals(6725568164832621369L, model.value().get(0).data().incomingBitrate());
        Assertions.assertEquals("jznmwcpmguaa", model.value().get(0).data().lastTimestamp());
        Assertions.assertEquals("aufactkahzovajjz", model.value().get(0).data().timescale());
        Assertions.assertEquals(1494527488794352511L, model.value().get(0).data().overlapCount());
        Assertions.assertEquals(488183709893117176L, model.value().get(0).data().discontinuityCount());
        Assertions.assertEquals(7816879352665514868L, model.value().get(0).data().nonincreasingCount());
        Assertions.assertEquals(false, model.value().get(0).data().unexpectedBitrate());
        Assertions.assertEquals("fgslqubkwdl", model.value().get(0).data().state());
        Assertions.assertEquals(false, model.value().get(0).data().healthy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-18T06:07:47Z"),
            model.value().get(0).data().lastFragmentArrivalTime());
        Assertions.assertEquals("tujbazpju", model.value().get(0).data().ingestDriftValue());
        Assertions.assertEquals("minyflnorwm", model.value().get(0).data().transcriptionState());
        Assertions.assertEquals("vwpklvxwmygdxp", model.value().get(0).data().transcriptionLanguage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LiveEventGetTrackIngestHeartbeatsResult model = new LiveEventGetTrackIngestHeartbeatsResult().withValue(Arrays
            .asList(new LiveEventTrackEventInner().withEventType(LiveEventTrackEventType.TRACK_EVENT_INGEST_HEARTBEAT)
                .withEventTime(OffsetDateTime.parse("2021-03-20T11:07:14Z"))
                .withData(new LiveEventTrackEventData().withTrackName("mvvhmxtdrjfuta")
                    .withTrackType(LiveEventTrackType.VIDEO)
                    .withBitrate(5288556587713663943L)
                    .withIncomingBitrate(6725568164832621369L)
                    .withLastTimestamp("jznmwcpmguaa")
                    .withTimescale("aufactkahzovajjz")
                    .withOverlapCount(1494527488794352511L)
                    .withDiscontinuityCount(488183709893117176L)
                    .withNonincreasingCount(7816879352665514868L)
                    .withUnexpectedBitrate(false)
                    .withState("fgslqubkwdl")
                    .withHealthy(false)
                    .withLastFragmentArrivalTime(OffsetDateTime.parse("2021-02-18T06:07:47Z"))
                    .withIngestDriftValue("tujbazpju")
                    .withTranscriptionState("minyflnorwm")
                    .withTranscriptionLanguage("vwpklvxwmygdxp"))));
        model = BinaryData.fromObject(model).toObject(LiveEventGetTrackIngestHeartbeatsResult.class);
        Assertions.assertEquals(LiveEventTrackEventType.TRACK_EVENT_INGEST_HEARTBEAT, model.value().get(0).eventType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-20T11:07:14Z"), model.value().get(0).eventTime());
        Assertions.assertEquals("mvvhmxtdrjfuta", model.value().get(0).data().trackName());
        Assertions.assertEquals(LiveEventTrackType.VIDEO, model.value().get(0).data().trackType());
        Assertions.assertEquals(5288556587713663943L, model.value().get(0).data().bitrate());
        Assertions.assertEquals(6725568164832621369L, model.value().get(0).data().incomingBitrate());
        Assertions.assertEquals("jznmwcpmguaa", model.value().get(0).data().lastTimestamp());
        Assertions.assertEquals("aufactkahzovajjz", model.value().get(0).data().timescale());
        Assertions.assertEquals(1494527488794352511L, model.value().get(0).data().overlapCount());
        Assertions.assertEquals(488183709893117176L, model.value().get(0).data().discontinuityCount());
        Assertions.assertEquals(7816879352665514868L, model.value().get(0).data().nonincreasingCount());
        Assertions.assertEquals(false, model.value().get(0).data().unexpectedBitrate());
        Assertions.assertEquals("fgslqubkwdl", model.value().get(0).data().state());
        Assertions.assertEquals(false, model.value().get(0).data().healthy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-18T06:07:47Z"),
            model.value().get(0).data().lastFragmentArrivalTime());
        Assertions.assertEquals("tujbazpju", model.value().get(0).data().ingestDriftValue());
        Assertions.assertEquals("minyflnorwm", model.value().get(0).data().transcriptionState());
        Assertions.assertEquals("vwpklvxwmygdxp", model.value().get(0).data().transcriptionLanguage());
    }
}
