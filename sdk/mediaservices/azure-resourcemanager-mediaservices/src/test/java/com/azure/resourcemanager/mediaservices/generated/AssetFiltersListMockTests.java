// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.models.AssetFilter;
import com.azure.resourcemanager.mediaservices.models.FilterTrackPropertyCompareOperation;
import com.azure.resourcemanager.mediaservices.models.FilterTrackPropertyType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AssetFiltersListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"presentationTimeRange\":{\"startTimestamp\":41375191452971631,\"endTimestamp\":1396768650771014756,\"presentationWindowDuration\":8770644881184441492,\"liveBackoffDuration\":8259010476237708124,\"timescale\":1410639763704832237,\"forceEndTimestamp\":false},\"firstQuality\":{\"bitrate\":1138832682},\"tracks\":[{\"trackSelections\":[{\"property\":\"Language\",\"value\":\"wuninv\",\"operation\":\"Equal\"}]},{\"trackSelections\":[{\"property\":\"Type\",\"value\":\"h\",\"operation\":\"NotEqual\"},{\"property\":\"FourCC\",\"value\":\"tvq\",\"operation\":\"NotEqual\"}]}]},\"id\":\"qct\",\"name\":\"xxdtddmflh\",\"type\":\"ytxzvtznapxbanno\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MediaServicesManager manager = MediaServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AssetFilter> response = manager.assetFilters()
            .list("ugwbsreurfqkf", "arenlvhhtklnvnaf", "vkyfedevjbosl", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(41375191452971631L,
            response.iterator().next().presentationTimeRange().startTimestamp());
        Assertions.assertEquals(1396768650771014756L,
            response.iterator().next().presentationTimeRange().endTimestamp());
        Assertions.assertEquals(8770644881184441492L,
            response.iterator().next().presentationTimeRange().presentationWindowDuration());
        Assertions.assertEquals(8259010476237708124L,
            response.iterator().next().presentationTimeRange().liveBackoffDuration());
        Assertions.assertEquals(1410639763704832237L, response.iterator().next().presentationTimeRange().timescale());
        Assertions.assertEquals(false, response.iterator().next().presentationTimeRange().forceEndTimestamp());
        Assertions.assertEquals(1138832682, response.iterator().next().firstQuality().bitrate());
        Assertions.assertEquals(FilterTrackPropertyType.LANGUAGE,
            response.iterator().next().tracks().get(0).trackSelections().get(0).property());
        Assertions.assertEquals("wuninv", response.iterator().next().tracks().get(0).trackSelections().get(0).value());
        Assertions.assertEquals(FilterTrackPropertyCompareOperation.EQUAL,
            response.iterator().next().tracks().get(0).trackSelections().get(0).operation());
    }
}
