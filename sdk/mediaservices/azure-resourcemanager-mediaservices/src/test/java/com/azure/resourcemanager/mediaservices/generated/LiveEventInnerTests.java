// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.LiveEventInner;
import com.azure.resourcemanager.mediaservices.models.CrossSiteAccessPolicies;
import com.azure.resourcemanager.mediaservices.models.LiveEventEncoding;
import com.azure.resourcemanager.mediaservices.models.LiveEventEncodingType;
import com.azure.resourcemanager.mediaservices.models.LiveEventInput;
import com.azure.resourcemanager.mediaservices.models.LiveEventInputProtocol;
import com.azure.resourcemanager.mediaservices.models.LiveEventPreview;
import com.azure.resourcemanager.mediaservices.models.LiveEventTranscription;
import com.azure.resourcemanager.mediaservices.models.StreamOptionsFlag;
import com.azure.resourcemanager.mediaservices.models.StretchMode;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class LiveEventInnerTests {
    @Test
    public void testDeserialize() {
        LiveEventInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"description\":\"stwit\",\"input\":{\"streamingProtocol\":\"RTMP\",\"keyFrameIntervalDuration\":\"vxccedcp\",\"accessToken\":\"dyodnwzxltj\",\"endpoints\":[]},\"preview\":{\"endpoints\":[],\"previewLocator\":\"gcxn\",\"streamingPolicyName\":\"vwxqibyqunyo\",\"alternativeMediaId\":\"wlmdjrkv\"},\"encoding\":{\"encodingType\":\"Premium1080p\",\"presetName\":\"vpdbodaciz\",\"stretchMode\":\"AutoSize\",\"keyFrameInterval\":\"PT195H48M3S\"},\"transcriptions\":[{\"language\":\"ibdeibq\",\"inputTrackSelection\":[]},{\"language\":\"ghvxndzwmkrefa\",\"inputTrackSelection\":[]}],\"provisioningState\":\"rwkq\",\"resourceState\":\"Stopped\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"ij\",\"crossDomainPolicy\":\"ivfxzsjabibsyst\"},\"useStaticHostname\":true,\"hostnamePrefix\":\"djpvkvpbjxbkz\",\"streamOptions\":[\"LowLatency\"],\"created\":\"2021-03-09T04:47:51Z\",\"lastModified\":\"2021-08-21T01:20:08Z\"},\"location\":\"budurgkakmo\",\"tags\":{\"mouwqlgzrfzeey\":\"jjklff\",\"bjbsybb\":\"bizikayuhq\"},\"id\":\"wrv\",\"name\":\"ldgmfpgvmpip\",\"type\":\"slthaq\"}")
                .toObject(LiveEventInner.class);
        Assertions.assertEquals("budurgkakmo", model.location());
        Assertions.assertEquals("jjklff", model.tags().get("mouwqlgzrfzeey"));
        Assertions.assertEquals("stwit", model.description());
        Assertions.assertEquals(LiveEventInputProtocol.RTMP, model.input().streamingProtocol());
        Assertions.assertEquals("vxccedcp", model.input().keyFrameIntervalDuration());
        Assertions.assertEquals("dyodnwzxltj", model.input().accessToken());
        Assertions.assertEquals("gcxn", model.preview().previewLocator());
        Assertions.assertEquals("vwxqibyqunyo", model.preview().streamingPolicyName());
        Assertions.assertEquals("wlmdjrkv", model.preview().alternativeMediaId());
        Assertions.assertEquals(LiveEventEncodingType.PREMIUM1080P, model.encoding().encodingType());
        Assertions.assertEquals("vpdbodaciz", model.encoding().presetName());
        Assertions.assertEquals(StretchMode.AUTO_SIZE, model.encoding().stretchMode());
        Assertions.assertEquals(Duration.parse("PT195H48M3S"), model.encoding().keyFrameInterval());
        Assertions.assertEquals("ibdeibq", model.transcriptions().get(0).language());
        Assertions.assertEquals("ij", model.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("ivfxzsjabibsyst", model.crossSiteAccessPolicies().crossDomainPolicy());
        Assertions.assertEquals(true, model.useStaticHostname());
        Assertions.assertEquals("djpvkvpbjxbkz", model.hostnamePrefix());
        Assertions.assertEquals(StreamOptionsFlag.LOW_LATENCY, model.streamOptions().get(0));
    }

    @Test
    public void testSerialize() {
        LiveEventInner model =
            new LiveEventInner()
                .withLocation("budurgkakmo")
                .withTags(mapOf("mouwqlgzrfzeey", "jjklff", "bjbsybb", "bizikayuhq"))
                .withDescription("stwit")
                .withInput(
                    new LiveEventInput()
                        .withStreamingProtocol(LiveEventInputProtocol.RTMP)
                        .withKeyFrameIntervalDuration("vxccedcp")
                        .withAccessToken("dyodnwzxltj")
                        .withEndpoints(Arrays.asList()))
                .withPreview(
                    new LiveEventPreview()
                        .withEndpoints(Arrays.asList())
                        .withPreviewLocator("gcxn")
                        .withStreamingPolicyName("vwxqibyqunyo")
                        .withAlternativeMediaId("wlmdjrkv"))
                .withEncoding(
                    new LiveEventEncoding()
                        .withEncodingType(LiveEventEncodingType.PREMIUM1080P)
                        .withPresetName("vpdbodaciz")
                        .withStretchMode(StretchMode.AUTO_SIZE)
                        .withKeyFrameInterval(Duration.parse("PT195H48M3S")))
                .withTranscriptions(
                    Arrays
                        .asList(
                            new LiveEventTranscription()
                                .withLanguage("ibdeibq")
                                .withInputTrackSelection(Arrays.asList()),
                            new LiveEventTranscription()
                                .withLanguage("ghvxndzwmkrefa")
                                .withInputTrackSelection(Arrays.asList())))
                .withCrossSiteAccessPolicies(
                    new CrossSiteAccessPolicies().withClientAccessPolicy("ij").withCrossDomainPolicy("ivfxzsjabibsyst"))
                .withUseStaticHostname(true)
                .withHostnamePrefix("djpvkvpbjxbkz")
                .withStreamOptions(Arrays.asList(StreamOptionsFlag.LOW_LATENCY));
        model = BinaryData.fromObject(model).toObject(LiveEventInner.class);
        Assertions.assertEquals("budurgkakmo", model.location());
        Assertions.assertEquals("jjklff", model.tags().get("mouwqlgzrfzeey"));
        Assertions.assertEquals("stwit", model.description());
        Assertions.assertEquals(LiveEventInputProtocol.RTMP, model.input().streamingProtocol());
        Assertions.assertEquals("vxccedcp", model.input().keyFrameIntervalDuration());
        Assertions.assertEquals("dyodnwzxltj", model.input().accessToken());
        Assertions.assertEquals("gcxn", model.preview().previewLocator());
        Assertions.assertEquals("vwxqibyqunyo", model.preview().streamingPolicyName());
        Assertions.assertEquals("wlmdjrkv", model.preview().alternativeMediaId());
        Assertions.assertEquals(LiveEventEncodingType.PREMIUM1080P, model.encoding().encodingType());
        Assertions.assertEquals("vpdbodaciz", model.encoding().presetName());
        Assertions.assertEquals(StretchMode.AUTO_SIZE, model.encoding().stretchMode());
        Assertions.assertEquals(Duration.parse("PT195H48M3S"), model.encoding().keyFrameInterval());
        Assertions.assertEquals("ibdeibq", model.transcriptions().get(0).language());
        Assertions.assertEquals("ij", model.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("ivfxzsjabibsyst", model.crossSiteAccessPolicies().crossDomainPolicy());
        Assertions.assertEquals(true, model.useStaticHostname());
        Assertions.assertEquals("djpvkvpbjxbkz", model.hostnamePrefix());
        Assertions.assertEquals(StreamOptionsFlag.LOW_LATENCY, model.streamOptions().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
