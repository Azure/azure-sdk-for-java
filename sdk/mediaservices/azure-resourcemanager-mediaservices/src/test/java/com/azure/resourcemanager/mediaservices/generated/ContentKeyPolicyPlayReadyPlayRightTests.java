// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyPlayRight;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyUnknownOutputPassingOption;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;

public final class ContentKeyPolicyPlayReadyPlayRightTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ContentKeyPolicyPlayReadyPlayRight model = BinaryData.fromString(
            "{\"firstPlayExpiration\":\"PT146H13M51S\",\"scmsRestriction\":2043504503,\"agcAndColorStripeRestriction\":1867951005,\"explicitAnalogTelevisionOutputRestriction\":{\"bestEffort\":false,\"configurationData\":599707965},\"digitalVideoOnlyContentRestriction\":false,\"imageConstraintForAnalogComponentVideoRestriction\":true,\"imageConstraintForAnalogComputerMonitorRestriction\":true,\"allowPassingVideoContentToUnknownOutput\":\"NotAllowed\",\"uncompressedDigitalVideoOpl\":1995074524,\"compressedDigitalVideoOpl\":718092493,\"analogVideoOpl\":214541271,\"compressedDigitalAudioOpl\":1016215887,\"uncompressedDigitalAudioOpl\":757386773}")
            .toObject(ContentKeyPolicyPlayReadyPlayRight.class);
        Assertions.assertEquals(Duration.parse("PT146H13M51S"), model.firstPlayExpiration());
        Assertions.assertEquals(2043504503, model.scmsRestriction());
        Assertions.assertEquals(1867951005, model.agcAndColorStripeRestriction());
        Assertions.assertEquals(false, model.explicitAnalogTelevisionOutputRestriction().bestEffort());
        Assertions.assertEquals(599707965, model.explicitAnalogTelevisionOutputRestriction().configurationData());
        Assertions.assertEquals(false, model.digitalVideoOnlyContentRestriction());
        Assertions.assertEquals(true, model.imageConstraintForAnalogComponentVideoRestriction());
        Assertions.assertEquals(true, model.imageConstraintForAnalogComputerMonitorRestriction());
        Assertions.assertEquals(ContentKeyPolicyPlayReadyUnknownOutputPassingOption.NOT_ALLOWED,
            model.allowPassingVideoContentToUnknownOutput());
        Assertions.assertEquals(1995074524, model.uncompressedDigitalVideoOpl());
        Assertions.assertEquals(718092493, model.compressedDigitalVideoOpl());
        Assertions.assertEquals(214541271, model.analogVideoOpl());
        Assertions.assertEquals(1016215887, model.compressedDigitalAudioOpl());
        Assertions.assertEquals(757386773, model.uncompressedDigitalAudioOpl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ContentKeyPolicyPlayReadyPlayRight model
            = new ContentKeyPolicyPlayReadyPlayRight().withFirstPlayExpiration(Duration.parse("PT146H13M51S"))
                .withScmsRestriction(2043504503)
                .withAgcAndColorStripeRestriction(1867951005)
                .withExplicitAnalogTelevisionOutputRestriction(
                    new ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction().withBestEffort(false)
                        .withConfigurationData(599707965))
                .withDigitalVideoOnlyContentRestriction(false)
                .withImageConstraintForAnalogComponentVideoRestriction(true)
                .withImageConstraintForAnalogComputerMonitorRestriction(true)
                .withAllowPassingVideoContentToUnknownOutput(
                    ContentKeyPolicyPlayReadyUnknownOutputPassingOption.NOT_ALLOWED)
                .withUncompressedDigitalVideoOpl(1995074524)
                .withCompressedDigitalVideoOpl(718092493)
                .withAnalogVideoOpl(214541271)
                .withCompressedDigitalAudioOpl(1016215887)
                .withUncompressedDigitalAudioOpl(757386773);
        model = BinaryData.fromObject(model).toObject(ContentKeyPolicyPlayReadyPlayRight.class);
        Assertions.assertEquals(Duration.parse("PT146H13M51S"), model.firstPlayExpiration());
        Assertions.assertEquals(2043504503, model.scmsRestriction());
        Assertions.assertEquals(1867951005, model.agcAndColorStripeRestriction());
        Assertions.assertEquals(false, model.explicitAnalogTelevisionOutputRestriction().bestEffort());
        Assertions.assertEquals(599707965, model.explicitAnalogTelevisionOutputRestriction().configurationData());
        Assertions.assertEquals(false, model.digitalVideoOnlyContentRestriction());
        Assertions.assertEquals(true, model.imageConstraintForAnalogComponentVideoRestriction());
        Assertions.assertEquals(true, model.imageConstraintForAnalogComputerMonitorRestriction());
        Assertions.assertEquals(ContentKeyPolicyPlayReadyUnknownOutputPassingOption.NOT_ALLOWED,
            model.allowPassingVideoContentToUnknownOutput());
        Assertions.assertEquals(1995074524, model.uncompressedDigitalVideoOpl());
        Assertions.assertEquals(718092493, model.compressedDigitalVideoOpl());
        Assertions.assertEquals(214541271, model.analogVideoOpl());
        Assertions.assertEquals(1016215887, model.compressedDigitalAudioOpl());
        Assertions.assertEquals(757386773, model.uncompressedDigitalAudioOpl());
    }
}
