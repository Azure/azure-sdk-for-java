// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyPlayRight;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyUnknownOutputPassingOption;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ContentKeyPolicyPlayReadyPlayRightTests {
    @Test
    public void testDeserialize() {
        ContentKeyPolicyPlayReadyPlayRight model =
            BinaryData
                .fromString(
                    "{\"firstPlayExpiration\":\"PT185H42M46S\",\"scmsRestriction\":1891378309,\"agcAndColorStripeRestriction\":1830284483,\"explicitAnalogTelevisionOutputRestriction\":{\"bestEffort\":false,\"configurationData\":1014216003},\"digitalVideoOnlyContentRestriction\":false,\"imageConstraintForAnalogComponentVideoRestriction\":true,\"imageConstraintForAnalogComputerMonitorRestriction\":false,\"allowPassingVideoContentToUnknownOutput\":\"Unknown\",\"uncompressedDigitalVideoOpl\":1867309112,\"compressedDigitalVideoOpl\":2067421779,\"analogVideoOpl\":309058376,\"compressedDigitalAudioOpl\":1351999302,\"uncompressedDigitalAudioOpl\":1321194567}")
                .toObject(ContentKeyPolicyPlayReadyPlayRight.class);
        Assertions.assertEquals(Duration.parse("PT185H42M46S"), model.firstPlayExpiration());
        Assertions.assertEquals(1891378309, model.scmsRestriction());
        Assertions.assertEquals(1830284483, model.agcAndColorStripeRestriction());
        Assertions.assertEquals(false, model.explicitAnalogTelevisionOutputRestriction().bestEffort());
        Assertions.assertEquals(1014216003, model.explicitAnalogTelevisionOutputRestriction().configurationData());
        Assertions.assertEquals(false, model.digitalVideoOnlyContentRestriction());
        Assertions.assertEquals(true, model.imageConstraintForAnalogComponentVideoRestriction());
        Assertions.assertEquals(false, model.imageConstraintForAnalogComputerMonitorRestriction());
        Assertions
            .assertEquals(
                ContentKeyPolicyPlayReadyUnknownOutputPassingOption.UNKNOWN,
                model.allowPassingVideoContentToUnknownOutput());
        Assertions.assertEquals(1867309112, model.uncompressedDigitalVideoOpl());
        Assertions.assertEquals(2067421779, model.compressedDigitalVideoOpl());
        Assertions.assertEquals(309058376, model.analogVideoOpl());
        Assertions.assertEquals(1351999302, model.compressedDigitalAudioOpl());
        Assertions.assertEquals(1321194567, model.uncompressedDigitalAudioOpl());
    }

    @Test
    public void testSerialize() {
        ContentKeyPolicyPlayReadyPlayRight model =
            new ContentKeyPolicyPlayReadyPlayRight()
                .withFirstPlayExpiration(Duration.parse("PT185H42M46S"))
                .withScmsRestriction(1891378309)
                .withAgcAndColorStripeRestriction(1830284483)
                .withExplicitAnalogTelevisionOutputRestriction(
                    new ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction()
                        .withBestEffort(false)
                        .withConfigurationData(1014216003))
                .withDigitalVideoOnlyContentRestriction(false)
                .withImageConstraintForAnalogComponentVideoRestriction(true)
                .withImageConstraintForAnalogComputerMonitorRestriction(false)
                .withAllowPassingVideoContentToUnknownOutput(
                    ContentKeyPolicyPlayReadyUnknownOutputPassingOption.UNKNOWN)
                .withUncompressedDigitalVideoOpl(1867309112)
                .withCompressedDigitalVideoOpl(2067421779)
                .withAnalogVideoOpl(309058376)
                .withCompressedDigitalAudioOpl(1351999302)
                .withUncompressedDigitalAudioOpl(1321194567);
        model = BinaryData.fromObject(model).toObject(ContentKeyPolicyPlayReadyPlayRight.class);
        Assertions.assertEquals(Duration.parse("PT185H42M46S"), model.firstPlayExpiration());
        Assertions.assertEquals(1891378309, model.scmsRestriction());
        Assertions.assertEquals(1830284483, model.agcAndColorStripeRestriction());
        Assertions.assertEquals(false, model.explicitAnalogTelevisionOutputRestriction().bestEffort());
        Assertions.assertEquals(1014216003, model.explicitAnalogTelevisionOutputRestriction().configurationData());
        Assertions.assertEquals(false, model.digitalVideoOnlyContentRestriction());
        Assertions.assertEquals(true, model.imageConstraintForAnalogComponentVideoRestriction());
        Assertions.assertEquals(false, model.imageConstraintForAnalogComputerMonitorRestriction());
        Assertions
            .assertEquals(
                ContentKeyPolicyPlayReadyUnknownOutputPassingOption.UNKNOWN,
                model.allowPassingVideoContentToUnknownOutput());
        Assertions.assertEquals(1867309112, model.uncompressedDigitalVideoOpl());
        Assertions.assertEquals(2067421779, model.compressedDigitalVideoOpl());
        Assertions.assertEquals(309058376, model.analogVideoOpl());
        Assertions.assertEquals(1351999302, model.compressedDigitalAudioOpl());
        Assertions.assertEquals(1321194567, model.uncompressedDigitalAudioOpl());
    }
}
