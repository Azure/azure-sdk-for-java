// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyPlayRight;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyUnknownOutputPassingOption;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;

public final class ContentKeyPolicyPlayReadyPlayRightTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ContentKeyPolicyPlayReadyPlayRight model =
            BinaryData
                .fromString(
                    "{\"firstPlayExpiration\":\"PT162H10M15S\",\"scmsRestriction\":1597087074,\"agcAndColorStripeRestriction\":396051915,\"explicitAnalogTelevisionOutputRestriction\":{\"bestEffort\":true,\"configurationData\":567336942},\"digitalVideoOnlyContentRestriction\":true,\"imageConstraintForAnalogComponentVideoRestriction\":true,\"imageConstraintForAnalogComputerMonitorRestriction\":false,\"allowPassingVideoContentToUnknownOutput\":\"Allowed\",\"uncompressedDigitalVideoOpl\":544140289,\"compressedDigitalVideoOpl\":237896817,\"analogVideoOpl\":2102044737,\"compressedDigitalAudioOpl\":1151770828,\"uncompressedDigitalAudioOpl\":133724472}")
                .toObject(ContentKeyPolicyPlayReadyPlayRight.class);
        Assertions.assertEquals(Duration.parse("PT162H10M15S"), model.firstPlayExpiration());
        Assertions.assertEquals(1597087074, model.scmsRestriction());
        Assertions.assertEquals(396051915, model.agcAndColorStripeRestriction());
        Assertions.assertEquals(true, model.explicitAnalogTelevisionOutputRestriction().bestEffort());
        Assertions.assertEquals(567336942, model.explicitAnalogTelevisionOutputRestriction().configurationData());
        Assertions.assertEquals(true, model.digitalVideoOnlyContentRestriction());
        Assertions.assertEquals(true, model.imageConstraintForAnalogComponentVideoRestriction());
        Assertions.assertEquals(false, model.imageConstraintForAnalogComputerMonitorRestriction());
        Assertions
            .assertEquals(
                ContentKeyPolicyPlayReadyUnknownOutputPassingOption.ALLOWED,
                model.allowPassingVideoContentToUnknownOutput());
        Assertions.assertEquals(544140289, model.uncompressedDigitalVideoOpl());
        Assertions.assertEquals(237896817, model.compressedDigitalVideoOpl());
        Assertions.assertEquals(2102044737, model.analogVideoOpl());
        Assertions.assertEquals(1151770828, model.compressedDigitalAudioOpl());
        Assertions.assertEquals(133724472, model.uncompressedDigitalAudioOpl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ContentKeyPolicyPlayReadyPlayRight model =
            new ContentKeyPolicyPlayReadyPlayRight()
                .withFirstPlayExpiration(Duration.parse("PT162H10M15S"))
                .withScmsRestriction(1597087074)
                .withAgcAndColorStripeRestriction(396051915)
                .withExplicitAnalogTelevisionOutputRestriction(
                    new ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction()
                        .withBestEffort(true)
                        .withConfigurationData(567336942))
                .withDigitalVideoOnlyContentRestriction(true)
                .withImageConstraintForAnalogComponentVideoRestriction(true)
                .withImageConstraintForAnalogComputerMonitorRestriction(false)
                .withAllowPassingVideoContentToUnknownOutput(
                    ContentKeyPolicyPlayReadyUnknownOutputPassingOption.ALLOWED)
                .withUncompressedDigitalVideoOpl(544140289)
                .withCompressedDigitalVideoOpl(237896817)
                .withAnalogVideoOpl(2102044737)
                .withCompressedDigitalAudioOpl(1151770828)
                .withUncompressedDigitalAudioOpl(133724472);
        model = BinaryData.fromObject(model).toObject(ContentKeyPolicyPlayReadyPlayRight.class);
        Assertions.assertEquals(Duration.parse("PT162H10M15S"), model.firstPlayExpiration());
        Assertions.assertEquals(1597087074, model.scmsRestriction());
        Assertions.assertEquals(396051915, model.agcAndColorStripeRestriction());
        Assertions.assertEquals(true, model.explicitAnalogTelevisionOutputRestriction().bestEffort());
        Assertions.assertEquals(567336942, model.explicitAnalogTelevisionOutputRestriction().configurationData());
        Assertions.assertEquals(true, model.digitalVideoOnlyContentRestriction());
        Assertions.assertEquals(true, model.imageConstraintForAnalogComponentVideoRestriction());
        Assertions.assertEquals(false, model.imageConstraintForAnalogComputerMonitorRestriction());
        Assertions
            .assertEquals(
                ContentKeyPolicyPlayReadyUnknownOutputPassingOption.ALLOWED,
                model.allowPassingVideoContentToUnknownOutput());
        Assertions.assertEquals(544140289, model.uncompressedDigitalVideoOpl());
        Assertions.assertEquals(237896817, model.compressedDigitalVideoOpl());
        Assertions.assertEquals(2102044737, model.analogVideoOpl());
        Assertions.assertEquals(1151770828, model.compressedDigitalAudioOpl());
        Assertions.assertEquals(133724472, model.uncompressedDigitalAudioOpl());
    }
}
