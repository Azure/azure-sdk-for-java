// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.AnalysisResolution;
import com.azure.resourcemanager.mediaservices.models.BlurType;
import com.azure.resourcemanager.mediaservices.models.FaceDetectorPreset;
import com.azure.resourcemanager.mediaservices.models.FaceRedactorMode;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class FaceDetectorPresetTests {
    @Test
    public void testDeserialize() {
        FaceDetectorPreset model =
            BinaryData
                .fromString(
                    "{\"@odata.type\":\"#Microsoft.Media.FaceDetectorPreset\",\"resolution\":\"StandardDefinition\",\"mode\":\"Analyze\",\"blurType\":\"Black\",\"experimentalOptions\":{\"kvyklxubyjaffmm\":\"uagrttikteusqc\",\"qcuubgqibrta\":\"bl\",\"lqxihhrmooiz\":\"metttwgd\",\"y\":\"seypxiutcxapz\"}}")
                .toObject(FaceDetectorPreset.class);
        Assertions.assertEquals(AnalysisResolution.STANDARD_DEFINITION, model.resolution());
        Assertions.assertEquals(FaceRedactorMode.ANALYZE, model.mode());
        Assertions.assertEquals(BlurType.BLACK, model.blurType());
        Assertions.assertEquals("uagrttikteusqc", model.experimentalOptions().get("kvyklxubyjaffmm"));
    }

    @Test
    public void testSerialize() {
        FaceDetectorPreset model =
            new FaceDetectorPreset()
                .withResolution(AnalysisResolution.STANDARD_DEFINITION)
                .withMode(FaceRedactorMode.ANALYZE)
                .withBlurType(BlurType.BLACK)
                .withExperimentalOptions(
                    mapOf(
                        "kvyklxubyjaffmm",
                        "uagrttikteusqc",
                        "qcuubgqibrta",
                        "bl",
                        "lqxihhrmooiz",
                        "metttwgd",
                        "y",
                        "seypxiutcxapz"));
        model = BinaryData.fromObject(model).toObject(FaceDetectorPreset.class);
        Assertions.assertEquals(AnalysisResolution.STANDARD_DEFINITION, model.resolution());
        Assertions.assertEquals(FaceRedactorMode.ANALYZE, model.mode());
        Assertions.assertEquals(BlurType.BLACK, model.blurType());
        Assertions.assertEquals("uagrttikteusqc", model.experimentalOptions().get("kvyklxubyjaffmm"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
