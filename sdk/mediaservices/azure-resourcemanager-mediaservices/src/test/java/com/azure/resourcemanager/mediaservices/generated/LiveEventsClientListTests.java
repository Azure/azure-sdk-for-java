// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.fluent.models.LiveEventInner;
import com.azure.resourcemanager.mediaservices.models.LiveEventEncodingType;
import com.azure.resourcemanager.mediaservices.models.LiveEventInputProtocol;
import com.azure.resourcemanager.mediaservices.models.StreamOptionsFlag;
import com.azure.resourcemanager.mediaservices.models.StretchMode;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LiveEventsClientListTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"description\":\"gnoxuztrksx\",\"input\":{\"streamingProtocol\":\"RTMP\",\"keyFrameIntervalDuration\":\"fcpfnznth\",\"accessToken\":\"wkjaos\",\"endpoints\":[]},\"preview\":{\"endpoints\":[],\"previewLocator\":\"amktcqiosmgbzah\",\"streamingPolicyName\":\"qdlyrtl\",\"alternativeMediaId\":\"ap\"},\"encoding\":{\"encodingType\":\"PassthroughStandard\",\"presetName\":\"atbhjmznn\",\"stretchMode\":\"AutoSize\",\"keyFrameInterval\":\"PT8H33M54S\"},\"transcriptions\":[],\"provisioningState\":\"arvlagunbt\",\"resourceState\":\"StandBy\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"l\",\"crossDomainPolicy\":\"mhyreeudz\"},\"useStaticHostname\":true,\"hostnamePrefix\":\"pdqmjxlyyzglgouw\",\"streamOptions\":[\"LowLatencyV2\",\"LowLatency\"],\"created\":\"2021-07-23T23:28:22Z\",\"lastModified\":\"2021-10-26T12:22:32Z\"},\"location\":\"tob\",\"tags\":{\"ytunlbfjkwr\":\"j\",\"hsyrqunj\":\"snkq\"},\"id\":\"hdenxaulk\",\"name\":\"akdkifmjnnawtqab\",\"type\":\"xuckpggqoweyir\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<LiveEventInner> response =
            manager.serviceClient().getLiveEvents().list("cxcjxgry", "fmpcycilrmca", Context.NONE);

        Assertions.assertEquals("tob", response.iterator().next().location());
        Assertions.assertEquals("j", response.iterator().next().tags().get("ytunlbfjkwr"));
        Assertions.assertEquals("gnoxuztrksx", response.iterator().next().description());
        Assertions.assertEquals(LiveEventInputProtocol.RTMP, response.iterator().next().input().streamingProtocol());
        Assertions.assertEquals("fcpfnznth", response.iterator().next().input().keyFrameIntervalDuration());
        Assertions.assertEquals("wkjaos", response.iterator().next().input().accessToken());
        Assertions.assertEquals("amktcqiosmgbzah", response.iterator().next().preview().previewLocator());
        Assertions.assertEquals("qdlyrtl", response.iterator().next().preview().streamingPolicyName());
        Assertions.assertEquals("ap", response.iterator().next().preview().alternativeMediaId());
        Assertions
            .assertEquals(
                LiveEventEncodingType.PASSTHROUGH_STANDARD, response.iterator().next().encoding().encodingType());
        Assertions.assertEquals("atbhjmznn", response.iterator().next().encoding().presetName());
        Assertions.assertEquals(StretchMode.AUTO_SIZE, response.iterator().next().encoding().stretchMode());
        Assertions.assertEquals(Duration.parse("PT8H33M54S"), response.iterator().next().encoding().keyFrameInterval());
        Assertions.assertEquals("l", response.iterator().next().crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("mhyreeudz", response.iterator().next().crossSiteAccessPolicies().crossDomainPolicy());
        Assertions.assertEquals(true, response.iterator().next().useStaticHostname());
        Assertions.assertEquals("pdqmjxlyyzglgouw", response.iterator().next().hostnamePrefix());
        Assertions.assertEquals(StreamOptionsFlag.LOW_LATENCY_V2, response.iterator().next().streamOptions().get(0));
    }
}
