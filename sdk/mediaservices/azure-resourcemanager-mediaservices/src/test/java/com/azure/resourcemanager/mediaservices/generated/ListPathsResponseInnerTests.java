// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.ListPathsResponseInner;
import com.azure.resourcemanager.mediaservices.models.EncryptionScheme;
import com.azure.resourcemanager.mediaservices.models.StreamingPath;
import com.azure.resourcemanager.mediaservices.models.StreamingPolicyStreamingProtocol;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ListPathsResponseInnerTests {
    @Test
    public void testDeserialize() {
        ListPathsResponseInner model =
            BinaryData
                .fromString(
                    "{\"streamingPaths\":[{\"streamingProtocol\":\"SmoothStreaming\",\"encryptionScheme\":\"CommonEncryptionCbcs\",\"paths\":[\"aw\",\"aldsy\",\"uximerqfobw\",\"znkbykutwpfhpagm\"]},{\"streamingProtocol\":\"Hls\",\"encryptionScheme\":\"CommonEncryptionCbcs\",\"paths\":[\"snfdsdoakgtdl\",\"kkze\",\"dlhewp\",\"sdsttwvog\"]},{\"streamingProtocol\":\"SmoothStreaming\",\"encryptionScheme\":\"EnvelopeEncryption\",\"paths\":[\"dcngqqmoakufgmj\",\"rwr\"]},{\"streamingProtocol\":\"Dash\",\"encryptionScheme\":\"CommonEncryptionCenc\",\"paths\":[\"aenuuz\"]}],\"downloadPaths\":[\"bminrfdwoyuhhzi\",\"iefozbhdmsml\"]}")
                .toObject(ListPathsResponseInner.class);
        Assertions
            .assertEquals(
                StreamingPolicyStreamingProtocol.SMOOTH_STREAMING, model.streamingPaths().get(0).streamingProtocol());
        Assertions
            .assertEquals(EncryptionScheme.COMMON_ENCRYPTION_CBCS, model.streamingPaths().get(0).encryptionScheme());
        Assertions.assertEquals("aw", model.streamingPaths().get(0).paths().get(0));
        Assertions.assertEquals("bminrfdwoyuhhzi", model.downloadPaths().get(0));
    }

    @Test
    public void testSerialize() {
        ListPathsResponseInner model =
            new ListPathsResponseInner()
                .withStreamingPaths(
                    Arrays
                        .asList(
                            new StreamingPath()
                                .withStreamingProtocol(StreamingPolicyStreamingProtocol.SMOOTH_STREAMING)
                                .withEncryptionScheme(EncryptionScheme.COMMON_ENCRYPTION_CBCS)
                                .withPaths(Arrays.asList("aw", "aldsy", "uximerqfobw", "znkbykutwpfhpagm")),
                            new StreamingPath()
                                .withStreamingProtocol(StreamingPolicyStreamingProtocol.HLS)
                                .withEncryptionScheme(EncryptionScheme.COMMON_ENCRYPTION_CBCS)
                                .withPaths(Arrays.asList("snfdsdoakgtdl", "kkze", "dlhewp", "sdsttwvog")),
                            new StreamingPath()
                                .withStreamingProtocol(StreamingPolicyStreamingProtocol.SMOOTH_STREAMING)
                                .withEncryptionScheme(EncryptionScheme.ENVELOPE_ENCRYPTION)
                                .withPaths(Arrays.asList("dcngqqmoakufgmj", "rwr")),
                            new StreamingPath()
                                .withStreamingProtocol(StreamingPolicyStreamingProtocol.DASH)
                                .withEncryptionScheme(EncryptionScheme.COMMON_ENCRYPTION_CENC)
                                .withPaths(Arrays.asList("aenuuz"))))
                .withDownloadPaths(Arrays.asList("bminrfdwoyuhhzi", "iefozbhdmsml"));
        model = BinaryData.fromObject(model).toObject(ListPathsResponseInner.class);
        Assertions
            .assertEquals(
                StreamingPolicyStreamingProtocol.SMOOTH_STREAMING, model.streamingPaths().get(0).streamingProtocol());
        Assertions
            .assertEquals(EncryptionScheme.COMMON_ENCRYPTION_CBCS, model.streamingPaths().get(0).encryptionScheme());
        Assertions.assertEquals("aw", model.streamingPaths().get(0).paths().get(0));
        Assertions.assertEquals("bminrfdwoyuhhzi", model.downloadPaths().get(0));
    }
}
