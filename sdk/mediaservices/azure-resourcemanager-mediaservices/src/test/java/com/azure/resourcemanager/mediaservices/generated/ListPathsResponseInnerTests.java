// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.ListPathsResponseInner;
import com.azure.resourcemanager.mediaservices.models.EncryptionScheme;
import com.azure.resourcemanager.mediaservices.models.StreamingPath;
import com.azure.resourcemanager.mediaservices.models.StreamingPolicyStreamingProtocol;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ListPathsResponseInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ListPathsResponseInner model = BinaryData.fromString(
            "{\"streamingPaths\":[{\"streamingProtocol\":\"Download\",\"encryptionScheme\":\"EnvelopeEncryption\",\"paths\":[\"wae\",\"u\",\"zkopb\"]},{\"streamingProtocol\":\"SmoothStreaming\",\"encryptionScheme\":\"EnvelopeEncryption\",\"paths\":[\"dwoyuhhziuiefoz\",\"hdmsmlmzqhoftrm\"]}],\"downloadPaths\":[\"u\"]}")
            .toObject(ListPathsResponseInner.class);
        Assertions.assertEquals(StreamingPolicyStreamingProtocol.DOWNLOAD,
            model.streamingPaths().get(0).streamingProtocol());
        Assertions.assertEquals(EncryptionScheme.ENVELOPE_ENCRYPTION, model.streamingPaths().get(0).encryptionScheme());
        Assertions.assertEquals("wae", model.streamingPaths().get(0).paths().get(0));
        Assertions.assertEquals("u", model.downloadPaths().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ListPathsResponseInner model = new ListPathsResponseInner()
            .withStreamingPaths(Arrays.asList(
                new StreamingPath().withStreamingProtocol(StreamingPolicyStreamingProtocol.DOWNLOAD)
                    .withEncryptionScheme(EncryptionScheme.ENVELOPE_ENCRYPTION)
                    .withPaths(Arrays.asList("wae", "u", "zkopb")),
                new StreamingPath().withStreamingProtocol(StreamingPolicyStreamingProtocol.SMOOTH_STREAMING)
                    .withEncryptionScheme(EncryptionScheme.ENVELOPE_ENCRYPTION)
                    .withPaths(Arrays.asList("dwoyuhhziuiefoz", "hdmsmlmzqhoftrm"))))
            .withDownloadPaths(Arrays.asList("u"));
        model = BinaryData.fromObject(model).toObject(ListPathsResponseInner.class);
        Assertions.assertEquals(StreamingPolicyStreamingProtocol.DOWNLOAD,
            model.streamingPaths().get(0).streamingProtocol());
        Assertions.assertEquals(EncryptionScheme.ENVELOPE_ENCRYPTION, model.streamingPaths().get(0).encryptionScheme());
        Assertions.assertEquals("wae", model.streamingPaths().get(0).paths().get(0));
        Assertions.assertEquals("u", model.downloadPaths().get(0));
    }
}
