// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.fluent.models.LiveEventInner;
import com.azure.resourcemanager.mediaservices.models.CrossSiteAccessPolicies;
import com.azure.resourcemanager.mediaservices.models.LiveEventEncoding;
import com.azure.resourcemanager.mediaservices.models.LiveEventEncodingType;
import com.azure.resourcemanager.mediaservices.models.LiveEventInput;
import com.azure.resourcemanager.mediaservices.models.LiveEventInputProtocol;
import com.azure.resourcemanager.mediaservices.models.LiveEventPreview;
import com.azure.resourcemanager.mediaservices.models.StreamOptionsFlag;
import com.azure.resourcemanager.mediaservices.models.StretchMode;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LiveEventsClientUpdateTests {
    @Test
    public void testUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"description\":\"efchn\",\"input\":{\"streamingProtocol\":\"FragmentedMP4\",\"keyFrameIntervalDuration\":\"mnxhkxjqirwrweo\",\"accessToken\":\"ffifhx\",\"endpoints\":[]},\"preview\":{\"endpoints\":[],\"previewLocator\":\"mozqv\",\"streamingPolicyName\":\"bqmamhsycxhxzgaz\",\"alternativeMediaId\":\"abo\"},\"encoding\":{\"encodingType\":\"PassthroughBasic\",\"presetName\":\"qhppubowsepdfgk\",\"stretchMode\":\"AutoSize\",\"keyFrameInterval\":\"PT191H2M7S\"},\"transcriptions\":[],\"provisioningState\":\"Succeeded\",\"resourceState\":\"Stopping\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"bkau\",\"crossDomainPolicy\":\"fshfph\"},\"useStaticHostname\":true,\"hostnamePrefix\":\"lai\",\"streamOptions\":[\"LowLatency\",\"LowLatencyV2\",\"LowLatencyV2\"],\"created\":\"2021-06-04T19:00:06Z\",\"lastModified\":\"2021-06-24T13:04:54Z\"},\"location\":\"koj\",\"tags\":{\"nnfhyetefypo\":\"ndnpdwrpqafgfug\"},\"id\":\"octfjgtixrjvzuyt\",\"name\":\"rmlmuowo\",\"type\":\"bauiropi\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        LiveEventInner response =
            manager
                .serviceClient()
                .getLiveEvents()
                .update(
                    "ohqfzizv",
                    "xmmkjs",
                    "thnwpzte",
                    new LiveEventInner()
                        .withLocation("nwjfu")
                        .withTags(mapOf("hpzpo", "afcba", "yjwpfilkmkkh", "o"))
                        .withDescription("mribiat")
                        .withInput(
                            new LiveEventInput()
                                .withStreamingProtocol(LiveEventInputProtocol.RTMP)
                                .withKeyFrameIntervalDuration("ucfotangcf")
                                .withAccessToken("ykzcugswvxwl")
                                .withEndpoints(Arrays.asList()))
                        .withPreview(
                            new LiveEventPreview()
                                .withEndpoints(Arrays.asList())
                                .withPreviewLocator("tx")
                                .withStreamingPolicyName("mxmcuqudtcvclxy")
                                .withAlternativeMediaId("dkvgfabuiyjibuzp"))
                        .withEncoding(
                            new LiveEventEncoding()
                                .withEncodingType(LiveEventEncodingType.PASSTHROUGH_STANDARD)
                                .withPresetName("eiknpgo")
                                .withStretchMode(StretchMode.AUTO_FIT)
                                .withKeyFrameInterval(Duration.parse("PT72H4M16S")))
                        .withTranscriptions(Arrays.asList())
                        .withCrossSiteAccessPolicies(
                            new CrossSiteAccessPolicies()
                                .withClientAccessPolicy("xxgewpk")
                                .withCrossDomainPolicy("qylkmqpzoyhlf"))
                        .withUseStaticHostname(false)
                        .withHostnamePrefix("gcl")
                        .withStreamOptions(
                            Arrays
                                .asList(
                                    StreamOptionsFlag.DEFAULT,
                                    StreamOptionsFlag.DEFAULT,
                                    StreamOptionsFlag.LOW_LATENCY_V2)),
                    Context.NONE);

        Assertions.assertEquals("koj", response.location());
        Assertions.assertEquals("ndnpdwrpqafgfug", response.tags().get("nnfhyetefypo"));
        Assertions.assertEquals("efchn", response.description());
        Assertions.assertEquals(LiveEventInputProtocol.FRAGMENTED_MP4, response.input().streamingProtocol());
        Assertions.assertEquals("mnxhkxjqirwrweo", response.input().keyFrameIntervalDuration());
        Assertions.assertEquals("ffifhx", response.input().accessToken());
        Assertions.assertEquals("mozqv", response.preview().previewLocator());
        Assertions.assertEquals("bqmamhsycxhxzgaz", response.preview().streamingPolicyName());
        Assertions.assertEquals("abo", response.preview().alternativeMediaId());
        Assertions.assertEquals(LiveEventEncodingType.PASSTHROUGH_BASIC, response.encoding().encodingType());
        Assertions.assertEquals("qhppubowsepdfgk", response.encoding().presetName());
        Assertions.assertEquals(StretchMode.AUTO_SIZE, response.encoding().stretchMode());
        Assertions.assertEquals(Duration.parse("PT191H2M7S"), response.encoding().keyFrameInterval());
        Assertions.assertEquals("bkau", response.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("fshfph", response.crossSiteAccessPolicies().crossDomainPolicy());
        Assertions.assertEquals(true, response.useStaticHostname());
        Assertions.assertEquals("lai", response.hostnamePrefix());
        Assertions.assertEquals(StreamOptionsFlag.LOW_LATENCY, response.streamOptions().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
