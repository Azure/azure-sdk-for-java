// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyContentKeyLocation;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyContentType;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyLicense;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyLicenseType;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyPlayRight;
import com.azure.resourcemanager.mediaservices.models.ContentKeyPolicyPlayReadyUnknownOutputPassingOption;
import java.time.Duration;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ContentKeyPolicyPlayReadyLicenseTests {
    @Test
    public void testDeserialize() {
        ContentKeyPolicyPlayReadyLicense model =
            BinaryData
                .fromString(
                    "{\"allowTestDevices\":false,\"beginDate\":\"2021-02-27T12:44:06Z\",\"expirationDate\":\"2021-02-11T13:19:40Z\",\"relativeBeginDate\":\"PT125H19M50S\",\"relativeExpirationDate\":\"PT109H21M18S\",\"gracePeriod\":\"PT54H42M43S\",\"playRight\":{\"firstPlayExpiration\":\"PT24H2M5S\",\"scmsRestriction\":1418036822,\"agcAndColorStripeRestriction\":1690186599,\"explicitAnalogTelevisionOutputRestriction\":{\"bestEffort\":false,\"configurationData\":350588347},\"digitalVideoOnlyContentRestriction\":true,\"imageConstraintForAnalogComponentVideoRestriction\":false,\"imageConstraintForAnalogComputerMonitorRestriction\":false,\"allowPassingVideoContentToUnknownOutput\":\"AllowedWithVideoConstriction\",\"uncompressedDigitalVideoOpl\":2059665337,\"compressedDigitalVideoOpl\":15755117,\"analogVideoOpl\":1622388222,\"compressedDigitalAudioOpl\":350819792,\"uncompressedDigitalAudioOpl\":1152319383},\"licenseType\":\"NonPersistent\",\"contentKeyLocation\":{\"@odata.type\":\"ContentKeyPolicyPlayReadyContentKeyLocation\"},\"contentType\":\"Unspecified\"}")
                .toObject(ContentKeyPolicyPlayReadyLicense.class);
        Assertions.assertEquals(false, model.allowTestDevices());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-27T12:44:06Z"), model.beginDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-11T13:19:40Z"), model.expirationDate());
        Assertions.assertEquals(Duration.parse("PT125H19M50S"), model.relativeBeginDate());
        Assertions.assertEquals(Duration.parse("PT109H21M18S"), model.relativeExpirationDate());
        Assertions.assertEquals(Duration.parse("PT54H42M43S"), model.gracePeriod());
        Assertions.assertEquals(Duration.parse("PT24H2M5S"), model.playRight().firstPlayExpiration());
        Assertions.assertEquals(1418036822, model.playRight().scmsRestriction());
        Assertions.assertEquals(1690186599, model.playRight().agcAndColorStripeRestriction());
        Assertions.assertEquals(false, model.playRight().explicitAnalogTelevisionOutputRestriction().bestEffort());
        Assertions
            .assertEquals(350588347, model.playRight().explicitAnalogTelevisionOutputRestriction().configurationData());
        Assertions.assertEquals(true, model.playRight().digitalVideoOnlyContentRestriction());
        Assertions.assertEquals(false, model.playRight().imageConstraintForAnalogComponentVideoRestriction());
        Assertions.assertEquals(false, model.playRight().imageConstraintForAnalogComputerMonitorRestriction());
        Assertions
            .assertEquals(
                ContentKeyPolicyPlayReadyUnknownOutputPassingOption.ALLOWED_WITH_VIDEO_CONSTRICTION,
                model.playRight().allowPassingVideoContentToUnknownOutput());
        Assertions.assertEquals(2059665337, model.playRight().uncompressedDigitalVideoOpl());
        Assertions.assertEquals(15755117, model.playRight().compressedDigitalVideoOpl());
        Assertions.assertEquals(1622388222, model.playRight().analogVideoOpl());
        Assertions.assertEquals(350819792, model.playRight().compressedDigitalAudioOpl());
        Assertions.assertEquals(1152319383, model.playRight().uncompressedDigitalAudioOpl());
        Assertions.assertEquals(ContentKeyPolicyPlayReadyLicenseType.NON_PERSISTENT, model.licenseType());
        Assertions.assertEquals(ContentKeyPolicyPlayReadyContentType.UNSPECIFIED, model.contentType());
    }

    @Test
    public void testSerialize() {
        ContentKeyPolicyPlayReadyLicense model =
            new ContentKeyPolicyPlayReadyLicense()
                .withAllowTestDevices(false)
                .withBeginDate(OffsetDateTime.parse("2021-02-27T12:44:06Z"))
                .withExpirationDate(OffsetDateTime.parse("2021-02-11T13:19:40Z"))
                .withRelativeBeginDate(Duration.parse("PT125H19M50S"))
                .withRelativeExpirationDate(Duration.parse("PT109H21M18S"))
                .withGracePeriod(Duration.parse("PT54H42M43S"))
                .withPlayRight(
                    new ContentKeyPolicyPlayReadyPlayRight()
                        .withFirstPlayExpiration(Duration.parse("PT24H2M5S"))
                        .withScmsRestriction(1418036822)
                        .withAgcAndColorStripeRestriction(1690186599)
                        .withExplicitAnalogTelevisionOutputRestriction(
                            new ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction()
                                .withBestEffort(false)
                                .withConfigurationData(350588347))
                        .withDigitalVideoOnlyContentRestriction(true)
                        .withImageConstraintForAnalogComponentVideoRestriction(false)
                        .withImageConstraintForAnalogComputerMonitorRestriction(false)
                        .withAllowPassingVideoContentToUnknownOutput(
                            ContentKeyPolicyPlayReadyUnknownOutputPassingOption.ALLOWED_WITH_VIDEO_CONSTRICTION)
                        .withUncompressedDigitalVideoOpl(2059665337)
                        .withCompressedDigitalVideoOpl(15755117)
                        .withAnalogVideoOpl(1622388222)
                        .withCompressedDigitalAudioOpl(350819792)
                        .withUncompressedDigitalAudioOpl(1152319383))
                .withLicenseType(ContentKeyPolicyPlayReadyLicenseType.NON_PERSISTENT)
                .withContentKeyLocation(new ContentKeyPolicyPlayReadyContentKeyLocation())
                .withContentType(ContentKeyPolicyPlayReadyContentType.UNSPECIFIED);
        model = BinaryData.fromObject(model).toObject(ContentKeyPolicyPlayReadyLicense.class);
        Assertions.assertEquals(false, model.allowTestDevices());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-27T12:44:06Z"), model.beginDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-11T13:19:40Z"), model.expirationDate());
        Assertions.assertEquals(Duration.parse("PT125H19M50S"), model.relativeBeginDate());
        Assertions.assertEquals(Duration.parse("PT109H21M18S"), model.relativeExpirationDate());
        Assertions.assertEquals(Duration.parse("PT54H42M43S"), model.gracePeriod());
        Assertions.assertEquals(Duration.parse("PT24H2M5S"), model.playRight().firstPlayExpiration());
        Assertions.assertEquals(1418036822, model.playRight().scmsRestriction());
        Assertions.assertEquals(1690186599, model.playRight().agcAndColorStripeRestriction());
        Assertions.assertEquals(false, model.playRight().explicitAnalogTelevisionOutputRestriction().bestEffort());
        Assertions
            .assertEquals(350588347, model.playRight().explicitAnalogTelevisionOutputRestriction().configurationData());
        Assertions.assertEquals(true, model.playRight().digitalVideoOnlyContentRestriction());
        Assertions.assertEquals(false, model.playRight().imageConstraintForAnalogComponentVideoRestriction());
        Assertions.assertEquals(false, model.playRight().imageConstraintForAnalogComputerMonitorRestriction());
        Assertions
            .assertEquals(
                ContentKeyPolicyPlayReadyUnknownOutputPassingOption.ALLOWED_WITH_VIDEO_CONSTRICTION,
                model.playRight().allowPassingVideoContentToUnknownOutput());
        Assertions.assertEquals(2059665337, model.playRight().uncompressedDigitalVideoOpl());
        Assertions.assertEquals(15755117, model.playRight().compressedDigitalVideoOpl());
        Assertions.assertEquals(1622388222, model.playRight().analogVideoOpl());
        Assertions.assertEquals(350819792, model.playRight().compressedDigitalAudioOpl());
        Assertions.assertEquals(1152319383, model.playRight().uncompressedDigitalAudioOpl());
        Assertions.assertEquals(ContentKeyPolicyPlayReadyLicenseType.NON_PERSISTENT, model.licenseType());
        Assertions.assertEquals(ContentKeyPolicyPlayReadyContentType.UNSPECIFIED, model.contentType());
    }
}
