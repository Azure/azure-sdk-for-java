// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.LiveEventEncoding;
import com.azure.resourcemanager.mediaservices.models.LiveEventEncodingType;
import com.azure.resourcemanager.mediaservices.models.StretchMode;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class LiveEventEncodingTests {
    @Test
    public void testDeserialize() {
        LiveEventEncoding model =
            BinaryData
                .fromString(
                    "{\"encodingType\":\"Premium1080p\",\"presetName\":\"nfaazpxdtnkdmkq\",\"stretchMode\":\"None\",\"keyFrameInterval\":\"PT141H2M8S\"}")
                .toObject(LiveEventEncoding.class);
        Assertions.assertEquals(LiveEventEncodingType.PREMIUM1080P, model.encodingType());
        Assertions.assertEquals("nfaazpxdtnkdmkq", model.presetName());
        Assertions.assertEquals(StretchMode.NONE, model.stretchMode());
        Assertions.assertEquals(Duration.parse("PT141H2M8S"), model.keyFrameInterval());
    }

    @Test
    public void testSerialize() {
        LiveEventEncoding model =
            new LiveEventEncoding()
                .withEncodingType(LiveEventEncodingType.PREMIUM1080P)
                .withPresetName("nfaazpxdtnkdmkq")
                .withStretchMode(StretchMode.NONE)
                .withKeyFrameInterval(Duration.parse("PT141H2M8S"));
        model = BinaryData.fromObject(model).toObject(LiveEventEncoding.class);
        Assertions.assertEquals(LiveEventEncodingType.PREMIUM1080P, model.encodingType());
        Assertions.assertEquals("nfaazpxdtnkdmkq", model.presetName());
        Assertions.assertEquals(StretchMode.NONE, model.stretchMode());
        Assertions.assertEquals(Duration.parse("PT141H2M8S"), model.keyFrameInterval());
    }
}
