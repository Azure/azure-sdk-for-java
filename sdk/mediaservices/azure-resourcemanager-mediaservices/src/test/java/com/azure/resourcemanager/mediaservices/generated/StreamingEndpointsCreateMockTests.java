// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.models.ArmStreamingEndpointCurrentSku;
import com.azure.resourcemanager.mediaservices.models.CrossSiteAccessPolicies;
import com.azure.resourcemanager.mediaservices.models.StreamingEndpoint;
import com.azure.resourcemanager.mediaservices.models.StreamingEndpointAccessControl;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class StreamingEndpointsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"description\":\"tkcudfbsfarfsiow\",\"scaleUnits\":1864601179,\"availabilitySetName\":\"xnq\",\"accessControl\":{},\"maxCacheAge\":3359638448641780645,\"customHostNames\":[\"qyki\",\"mdksaoa\",\"cluqvo\"],\"hostName\":\"ycjimryvwgcwwpbm\",\"cdnEnabled\":false,\"cdnProvider\":\"sydsxwefohe\",\"cdnProfile\":\"vopwndyqleallk\",\"provisioningState\":\"Succeeded\",\"resourceState\":\"Starting\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"syzfhotlhikcyych\",\"crossDomainPolicy\":\"sjlpjrtwszhv\"},\"freeTrialEndTime\":\"2021-09-06T01:44:02Z\",\"created\":\"2021-03-26T17:24:30Z\",\"lastModified\":\"2021-07-19T03:46:29Z\"},\"sku\":{\"name\":\"mhwrb\",\"capacity\":691294611},\"location\":\"yflubhvjglroc\",\"tags\":{\"hmem\":\"lw\",\"memczjkmmyk\":\"ooclutnp\",\"rye\":\"ujxsglhsr\",\"rfih\":\"ylmbkzudni\"},\"id\":\"tjewlpxuzzj\",\"name\":\"nrefqyh\",\"type\":\"otoihiqa\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        StreamingEndpoint response =
            manager
                .streamingEndpoints()
                .define("pmkmlmvevfx")
                .withRegion("upgahxkum")
                .withExistingMediaservice("bcrymodizrx", "lobdxna")
                .withTags(mapOf("dmmcpugmehqep", "caac", "hbzehewho", "u", "qnbldxe", "hnl", "orim", "clgsc"))
                .withSku(new ArmStreamingEndpointCurrentSku().withCapacity(267572624))
                .withDescription("jhbzxliohrdddtf")
                .withScaleUnits(1812415709)
                .withAvailabilitySetName("ba")
                .withAccessControl(new StreamingEndpointAccessControl())
                .withMaxCacheAge(5076219594353318386L)
                .withCustomHostNames(Arrays.asList("yknapqofyuicdh", "bd", "bwwg", "d"))
                .withCdnEnabled(false)
                .withCdnProvider("ffplfmuvapckcc")
                .withCdnProfile("vwe")
                .withCrossSiteAccessPolicies(
                    new CrossSiteAccessPolicies()
                        .withClientAccessPolicy("aimmoiroqb")
                        .withCrossDomainPolicy("hbragapyyr"))
                .withAutoStart(true)
                .create();

        Assertions.assertEquals("yflubhvjglroc", response.location());
        Assertions.assertEquals("lw", response.tags().get("hmem"));
        Assertions.assertEquals(691294611, response.sku().capacity());
        Assertions.assertEquals("tkcudfbsfarfsiow", response.description());
        Assertions.assertEquals(1864601179, response.scaleUnits());
        Assertions.assertEquals("xnq", response.availabilitySetName());
        Assertions.assertEquals(3359638448641780645L, response.maxCacheAge());
        Assertions.assertEquals("qyki", response.customHostNames().get(0));
        Assertions.assertEquals(false, response.cdnEnabled());
        Assertions.assertEquals("sydsxwefohe", response.cdnProvider());
        Assertions.assertEquals("vopwndyqleallk", response.cdnProfile());
        Assertions.assertEquals("syzfhotlhikcyych", response.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("sjlpjrtwszhv", response.crossSiteAccessPolicies().crossDomainPolicy());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
