// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.models.AccountFilter;
import com.azure.resourcemanager.mediaservices.models.FilterTrackPropertyCompareOperation;
import com.azure.resourcemanager.mediaservices.models.FilterTrackPropertyType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AccountFiltersListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"presentationTimeRange\":{\"startTimestamp\":5166688916611629516,\"endTimestamp\":67365176386180245,\"presentationWindowDuration\":1443366390043074832,\"liveBackoffDuration\":1277763232876171845,\"timescale\":239960260681292608,\"forceEndTimestamp\":true},\"firstQuality\":{\"bitrate\":991710429},\"tracks\":[{\"trackSelections\":[{\"property\":\"Name\",\"value\":\"z\",\"operation\":\"NotEqual\"},{\"property\":\"Unknown\",\"value\":\"xeqoc\",\"operation\":\"Equal\"},{\"property\":\"Language\",\"value\":\"ygvkzqkjj\",\"operation\":\"Equal\"}]},{\"trackSelections\":[{\"property\":\"Unknown\",\"value\":\"zefezrxcczurtl\",\"operation\":\"NotEqual\"},{\"property\":\"Name\",\"value\":\"q\",\"operation\":\"Equal\"},{\"property\":\"Type\",\"value\":\"wvz\",\"operation\":\"NotEqual\"},{\"property\":\"Bitrate\",\"value\":\"v\",\"operation\":\"NotEqual\"}]},{\"trackSelections\":[{\"property\":\"Bitrate\",\"value\":\"d\",\"operation\":\"NotEqual\"},{\"property\":\"Bitrate\",\"value\":\"mqpnoda\",\"operation\":\"NotEqual\"}]},{\"trackSelections\":[{\"property\":\"Language\",\"value\":\"hewjptmcgsbost\",\"operation\":\"Equal\"}]}]},\"id\":\"ndlatutmzlbi\",\"name\":\"jlvfhrbbpneqv\",\"type\":\"wwyyurmoch\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MediaServicesManager manager = MediaServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AccountFilter> response
            = manager.accountFilters().list("mcdzsufcohdxbz", "mcmuapc", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(5166688916611629516L,
            response.iterator().next().presentationTimeRange().startTimestamp());
        Assertions.assertEquals(67365176386180245L, response.iterator().next().presentationTimeRange().endTimestamp());
        Assertions.assertEquals(1443366390043074832L,
            response.iterator().next().presentationTimeRange().presentationWindowDuration());
        Assertions.assertEquals(1277763232876171845L,
            response.iterator().next().presentationTimeRange().liveBackoffDuration());
        Assertions.assertEquals(239960260681292608L, response.iterator().next().presentationTimeRange().timescale());
        Assertions.assertEquals(true, response.iterator().next().presentationTimeRange().forceEndTimestamp());
        Assertions.assertEquals(991710429, response.iterator().next().firstQuality().bitrate());
        Assertions.assertEquals(FilterTrackPropertyType.NAME,
            response.iterator().next().tracks().get(0).trackSelections().get(0).property());
        Assertions.assertEquals("z", response.iterator().next().tracks().get(0).trackSelections().get(0).value());
        Assertions.assertEquals(FilterTrackPropertyCompareOperation.NOT_EQUAL,
            response.iterator().next().tracks().get(0).trackSelections().get(0).operation());
    }
}
