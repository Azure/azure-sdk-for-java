// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.MediaServiceInner;
import com.azure.resourcemanager.mediaservices.models.MediaServiceCollection;
import com.azure.resourcemanager.mediaservices.models.MediaServiceIdentity;
import com.azure.resourcemanager.mediaservices.models.PublicNetworkAccess;
import com.azure.resourcemanager.mediaservices.models.StorageAuthentication;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MediaServiceCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MediaServiceCollection model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"mediaServiceId\":\"335f8b95-f915-4c7a-b4f7-5ca162af4a34\",\"storageAccounts\":[],\"storageAuthentication\":\"ManagedIdentity\",\"publicNetworkAccess\":\"Enabled\",\"provisioningState\":\"Succeeded\",\"privateEndpointConnections\":[]},\"identity\":{\"type\":\"osfqpteehzzv\",\"principalId\":\"ec5229bb-770c-4a5d-bf76-fbd9f5be41d3\",\"tenantId\":\"0dbbee1b-90ec-4390-a793-489c7ea977d5\",\"userAssignedIdentities\":{}},\"location\":\"rimz\",\"tags\":{\"rsoodqxhcrmnoh\":\"vswjdk\",\"kwh\":\"t\",\"gr\":\"soifiyipjxsqw\"},\"id\":\"bznorcjxvsnby\",\"name\":\"qabnmoc\",\"type\":\"cyshurzafbljjgp\"}],\"@odata.nextLink\":\"oq\"}")
                .toObject(MediaServiceCollection.class);
        Assertions.assertEquals("rimz", model.value().get(0).location());
        Assertions.assertEquals("vswjdk", model.value().get(0).tags().get("rsoodqxhcrmnoh"));
        Assertions.assertEquals("osfqpteehzzv", model.value().get(0).identity().type());
        Assertions.assertEquals(StorageAuthentication.MANAGED_IDENTITY, model.value().get(0).storageAuthentication());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MediaServiceCollection model =
            new MediaServiceCollection()
                .withValue(
                    Arrays
                        .asList(
                            new MediaServiceInner()
                                .withLocation("rimz")
                                .withTags(mapOf("rsoodqxhcrmnoh", "vswjdk", "kwh", "t", "gr", "soifiyipjxsqw"))
                                .withIdentity(
                                    new MediaServiceIdentity()
                                        .withType("osfqpteehzzv")
                                        .withUserAssignedIdentities(mapOf()))
                                .withStorageAccounts(Arrays.asList())
                                .withStorageAuthentication(StorageAuthentication.MANAGED_IDENTITY)
                                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)));
        model = BinaryData.fromObject(model).toObject(MediaServiceCollection.class);
        Assertions.assertEquals("rimz", model.value().get(0).location());
        Assertions.assertEquals("vswjdk", model.value().get(0).tags().get("rsoodqxhcrmnoh"));
        Assertions.assertEquals("osfqpteehzzv", model.value().get(0).identity().type());
        Assertions.assertEquals(StorageAuthentication.MANAGED_IDENTITY, model.value().get(0).storageAuthentication());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
