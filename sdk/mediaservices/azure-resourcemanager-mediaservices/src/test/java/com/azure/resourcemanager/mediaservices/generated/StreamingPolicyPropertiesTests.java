// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.StreamingPolicyProperties;
import com.azure.resourcemanager.mediaservices.models.CbcsDrmConfiguration;
import com.azure.resourcemanager.mediaservices.models.CencDrmConfiguration;
import com.azure.resourcemanager.mediaservices.models.CommonEncryptionCbcs;
import com.azure.resourcemanager.mediaservices.models.CommonEncryptionCenc;
import com.azure.resourcemanager.mediaservices.models.EnabledProtocols;
import com.azure.resourcemanager.mediaservices.models.EnvelopeEncryption;
import com.azure.resourcemanager.mediaservices.models.NoEncryption;
import com.azure.resourcemanager.mediaservices.models.StreamingPolicyContentKeys;
import com.azure.resourcemanager.mediaservices.models.TrackSelection;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class StreamingPolicyPropertiesTests {
    @Test
    public void testDeserialize() {
        StreamingPolicyProperties model =
            BinaryData
                .fromString(
                    "{\"created\":\"2021-09-22T17:15:32Z\",\"defaultContentKeyPolicyName\":\"ocmbqfqvmkcxoza\",\"envelopeEncryption\":{\"enabledProtocols\":{\"download\":true,\"dash\":true,\"hls\":true,\"smoothStreaming\":false},\"clearTracks\":[{\"trackSelections\":[]},{\"trackSelections\":[]},{\"trackSelections\":[]},{\"trackSelections\":[]}],\"contentKeys\":{\"keyToTrackMappings\":[]},\"customKeyAcquisitionUrlTemplate\":\"bcuejrjxgci\"},\"commonEncryptionCenc\":{\"enabledProtocols\":{\"download\":false,\"dash\":false,\"hls\":false,\"smoothStreaming\":true},\"clearTracks\":[{\"trackSelections\":[]},{\"trackSelections\":[]},{\"trackSelections\":[]},{\"trackSelections\":[]}],\"contentKeys\":{\"keyToTrackMappings\":[]},\"drm\":{}},\"commonEncryptionCbcs\":{\"enabledProtocols\":{\"download\":false,\"dash\":true,\"hls\":false,\"smoothStreaming\":true},\"clearTracks\":[{\"trackSelections\":[]},{\"trackSelections\":[]}],\"contentKeys\":{\"keyToTrackMappings\":[]},\"drm\":{}},\"noEncryption\":{\"enabledProtocols\":{\"download\":true,\"dash\":false,\"hls\":false,\"smoothStreaming\":false}}}")
                .toObject(StreamingPolicyProperties.class);
        Assertions.assertEquals("ocmbqfqvmkcxoza", model.defaultContentKeyPolicyName());
        Assertions.assertEquals(true, model.envelopeEncryption().enabledProtocols().download());
        Assertions.assertEquals(true, model.envelopeEncryption().enabledProtocols().dash());
        Assertions.assertEquals(true, model.envelopeEncryption().enabledProtocols().hls());
        Assertions.assertEquals(false, model.envelopeEncryption().enabledProtocols().smoothStreaming());
        Assertions.assertEquals("bcuejrjxgci", model.envelopeEncryption().customKeyAcquisitionUrlTemplate());
        Assertions.assertEquals(false, model.commonEncryptionCenc().enabledProtocols().download());
        Assertions.assertEquals(false, model.commonEncryptionCenc().enabledProtocols().dash());
        Assertions.assertEquals(false, model.commonEncryptionCenc().enabledProtocols().hls());
        Assertions.assertEquals(true, model.commonEncryptionCenc().enabledProtocols().smoothStreaming());
        Assertions.assertEquals(false, model.commonEncryptionCbcs().enabledProtocols().download());
        Assertions.assertEquals(true, model.commonEncryptionCbcs().enabledProtocols().dash());
        Assertions.assertEquals(false, model.commonEncryptionCbcs().enabledProtocols().hls());
        Assertions.assertEquals(true, model.commonEncryptionCbcs().enabledProtocols().smoothStreaming());
        Assertions.assertEquals(true, model.noEncryption().enabledProtocols().download());
        Assertions.assertEquals(false, model.noEncryption().enabledProtocols().dash());
        Assertions.assertEquals(false, model.noEncryption().enabledProtocols().hls());
        Assertions.assertEquals(false, model.noEncryption().enabledProtocols().smoothStreaming());
    }

    @Test
    public void testSerialize() {
        StreamingPolicyProperties model =
            new StreamingPolicyProperties()
                .withDefaultContentKeyPolicyName("ocmbqfqvmkcxoza")
                .withEnvelopeEncryption(
                    new EnvelopeEncryption()
                        .withEnabledProtocols(
                            new EnabledProtocols()
                                .withDownload(true)
                                .withDash(true)
                                .withHls(true)
                                .withSmoothStreaming(false))
                        .withClearTracks(
                            Arrays
                                .asList(
                                    new TrackSelection().withTrackSelections(Arrays.asList()),
                                    new TrackSelection().withTrackSelections(Arrays.asList()),
                                    new TrackSelection().withTrackSelections(Arrays.asList()),
                                    new TrackSelection().withTrackSelections(Arrays.asList())))
                        .withContentKeys(new StreamingPolicyContentKeys().withKeyToTrackMappings(Arrays.asList()))
                        .withCustomKeyAcquisitionUrlTemplate("bcuejrjxgci"))
                .withCommonEncryptionCenc(
                    new CommonEncryptionCenc()
                        .withEnabledProtocols(
                            new EnabledProtocols()
                                .withDownload(false)
                                .withDash(false)
                                .withHls(false)
                                .withSmoothStreaming(true))
                        .withClearTracks(
                            Arrays
                                .asList(
                                    new TrackSelection().withTrackSelections(Arrays.asList()),
                                    new TrackSelection().withTrackSelections(Arrays.asList()),
                                    new TrackSelection().withTrackSelections(Arrays.asList()),
                                    new TrackSelection().withTrackSelections(Arrays.asList())))
                        .withContentKeys(new StreamingPolicyContentKeys().withKeyToTrackMappings(Arrays.asList()))
                        .withDrm(new CencDrmConfiguration()))
                .withCommonEncryptionCbcs(
                    new CommonEncryptionCbcs()
                        .withEnabledProtocols(
                            new EnabledProtocols()
                                .withDownload(false)
                                .withDash(true)
                                .withHls(false)
                                .withSmoothStreaming(true))
                        .withClearTracks(
                            Arrays
                                .asList(
                                    new TrackSelection().withTrackSelections(Arrays.asList()),
                                    new TrackSelection().withTrackSelections(Arrays.asList())))
                        .withContentKeys(new StreamingPolicyContentKeys().withKeyToTrackMappings(Arrays.asList()))
                        .withDrm(new CbcsDrmConfiguration()))
                .withNoEncryption(
                    new NoEncryption()
                        .withEnabledProtocols(
                            new EnabledProtocols()
                                .withDownload(true)
                                .withDash(false)
                                .withHls(false)
                                .withSmoothStreaming(false)));
        model = BinaryData.fromObject(model).toObject(StreamingPolicyProperties.class);
        Assertions.assertEquals("ocmbqfqvmkcxoza", model.defaultContentKeyPolicyName());
        Assertions.assertEquals(true, model.envelopeEncryption().enabledProtocols().download());
        Assertions.assertEquals(true, model.envelopeEncryption().enabledProtocols().dash());
        Assertions.assertEquals(true, model.envelopeEncryption().enabledProtocols().hls());
        Assertions.assertEquals(false, model.envelopeEncryption().enabledProtocols().smoothStreaming());
        Assertions.assertEquals("bcuejrjxgci", model.envelopeEncryption().customKeyAcquisitionUrlTemplate());
        Assertions.assertEquals(false, model.commonEncryptionCenc().enabledProtocols().download());
        Assertions.assertEquals(false, model.commonEncryptionCenc().enabledProtocols().dash());
        Assertions.assertEquals(false, model.commonEncryptionCenc().enabledProtocols().hls());
        Assertions.assertEquals(true, model.commonEncryptionCenc().enabledProtocols().smoothStreaming());
        Assertions.assertEquals(false, model.commonEncryptionCbcs().enabledProtocols().download());
        Assertions.assertEquals(true, model.commonEncryptionCbcs().enabledProtocols().dash());
        Assertions.assertEquals(false, model.commonEncryptionCbcs().enabledProtocols().hls());
        Assertions.assertEquals(true, model.commonEncryptionCbcs().enabledProtocols().smoothStreaming());
        Assertions.assertEquals(true, model.noEncryption().enabledProtocols().download());
        Assertions.assertEquals(false, model.noEncryption().enabledProtocols().dash());
        Assertions.assertEquals(false, model.noEncryption().enabledProtocols().hls());
        Assertions.assertEquals(false, model.noEncryption().enabledProtocols().smoothStreaming());
    }
}
