// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.AudioAnalysisMode;
import com.azure.resourcemanager.mediaservices.models.AudioAnalyzerPreset;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AudioAnalyzerPresetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AudioAnalyzerPreset model =
            BinaryData
                .fromString(
                    "{\"@odata.type\":\"#Microsoft.Media.AudioAnalyzerPreset\",\"audioLanguage\":\"udtjuewbc\",\"mode\":\"Standard\",\"experimentalOptions\":{\"bvpa\":\"whcjyxcc\",\"px\":\"akkud\",\"stcyohpfkyrkdbd\":\"wjplma\"}}")
                .toObject(AudioAnalyzerPreset.class);
        Assertions.assertEquals("udtjuewbc", model.audioLanguage());
        Assertions.assertEquals(AudioAnalysisMode.STANDARD, model.mode());
        Assertions.assertEquals("whcjyxcc", model.experimentalOptions().get("bvpa"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AudioAnalyzerPreset model =
            new AudioAnalyzerPreset()
                .withAudioLanguage("udtjuewbc")
                .withMode(AudioAnalysisMode.STANDARD)
                .withExperimentalOptions(mapOf("bvpa", "whcjyxcc", "px", "akkud", "stcyohpfkyrkdbd", "wjplma"));
        model = BinaryData.fromObject(model).toObject(AudioAnalyzerPreset.class);
        Assertions.assertEquals("udtjuewbc", model.audioLanguage());
        Assertions.assertEquals(AudioAnalysisMode.STANDARD, model.mode());
        Assertions.assertEquals("whcjyxcc", model.experimentalOptions().get("bvpa"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
