// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.AudioAnalysisMode;
import com.azure.resourcemanager.mediaservices.models.AudioAnalyzerPreset;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AudioAnalyzerPresetTests {
    @Test
    public void testDeserialize() {
        AudioAnalyzerPreset model =
            BinaryData
                .fromString(
                    "{\"@odata.type\":\"#Microsoft.Media.AudioAnalyzerPreset\",\"audioLanguage\":\"etoge\",\"mode\":\"Standard\",\"experimentalOptions\":{\"q\":\"lhvnhlab\",\"hvv\":\"kkzjcjbtrga\",\"beitpkx\":\"brxjjsto\"}}")
                .toObject(AudioAnalyzerPreset.class);
        Assertions.assertEquals("etoge", model.audioLanguage());
        Assertions.assertEquals(AudioAnalysisMode.STANDARD, model.mode());
        Assertions.assertEquals("lhvnhlab", model.experimentalOptions().get("q"));
    }

    @Test
    public void testSerialize() {
        AudioAnalyzerPreset model =
            new AudioAnalyzerPreset()
                .withAudioLanguage("etoge")
                .withMode(AudioAnalysisMode.STANDARD)
                .withExperimentalOptions(mapOf("q", "lhvnhlab", "hvv", "kkzjcjbtrga", "beitpkx", "brxjjsto"));
        model = BinaryData.fromObject(model).toObject(AudioAnalyzerPreset.class);
        Assertions.assertEquals("etoge", model.audioLanguage());
        Assertions.assertEquals(AudioAnalysisMode.STANDARD, model.mode());
        Assertions.assertEquals("lhvnhlab", model.experimentalOptions().get("q"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
