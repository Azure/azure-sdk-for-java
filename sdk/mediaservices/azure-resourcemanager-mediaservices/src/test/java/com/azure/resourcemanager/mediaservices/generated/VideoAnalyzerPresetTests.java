// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.AudioAnalysisMode;
import com.azure.resourcemanager.mediaservices.models.InsightsType;
import com.azure.resourcemanager.mediaservices.models.VideoAnalyzerPreset;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class VideoAnalyzerPresetTests {
    @Test
    public void testDeserialize() {
        VideoAnalyzerPreset model =
            BinaryData
                .fromString(
                    "{\"@odata.type\":\"#Microsoft.Media.VideoAnalyzerPreset\",\"insightsToExtract\":\"AllInsights\",\"audioLanguage\":\"a\",\"mode\":\"Standard\",\"experimentalOptions\":{\"ijddtvqc\":\"mwmqtibx\",\"jaeukmrsieekpn\":\"tad\",\"pibudqwyxebeybpm\":\"zaapmudqmeqwi\"}}")
                .toObject(VideoAnalyzerPreset.class);
        Assertions.assertEquals("a", model.audioLanguage());
        Assertions.assertEquals(AudioAnalysisMode.STANDARD, model.mode());
        Assertions.assertEquals("mwmqtibx", model.experimentalOptions().get("ijddtvqc"));
        Assertions.assertEquals(InsightsType.ALL_INSIGHTS, model.insightsToExtract());
    }

    @Test
    public void testSerialize() {
        VideoAnalyzerPreset model =
            new VideoAnalyzerPreset()
                .withAudioLanguage("a")
                .withMode(AudioAnalysisMode.STANDARD)
                .withExperimentalOptions(
                    mapOf("ijddtvqc", "mwmqtibx", "jaeukmrsieekpn", "tad", "pibudqwyxebeybpm", "zaapmudqmeqwi"))
                .withInsightsToExtract(InsightsType.ALL_INSIGHTS);
        model = BinaryData.fromObject(model).toObject(VideoAnalyzerPreset.class);
        Assertions.assertEquals("a", model.audioLanguage());
        Assertions.assertEquals(AudioAnalysisMode.STANDARD, model.mode());
        Assertions.assertEquals("mwmqtibx", model.experimentalOptions().get("ijddtvqc"));
        Assertions.assertEquals(InsightsType.ALL_INSIGHTS, model.insightsToExtract());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
