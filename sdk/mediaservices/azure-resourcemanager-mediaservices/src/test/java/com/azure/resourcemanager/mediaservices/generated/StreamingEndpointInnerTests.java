// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.StreamingEndpointInner;
import com.azure.resourcemanager.mediaservices.models.ArmStreamingEndpointCurrentSku;
import com.azure.resourcemanager.mediaservices.models.CrossSiteAccessPolicies;
import com.azure.resourcemanager.mediaservices.models.StreamingEndpointAccessControl;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class StreamingEndpointInnerTests {
    @Test
    public void testDeserialize() {
        StreamingEndpointInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"description\":\"qem\",\"scaleUnits\":295447223,\"availabilitySetName\":\"mxtd\",\"accessControl\":{},\"maxCacheAge\":6646451916229099217,\"customHostNames\":[\"bj\",\"ewzcjznmwcp\",\"guaadraufactkahz\"],\"hostName\":\"ajjziuxxpshne\",\"cdnEnabled\":false,\"cdnProvider\":\"fgslqubkwdl\",\"cdnProfile\":\"rds\",\"provisioningState\":\"ujbazpjuohminyfl\",\"resourceState\":\"Running\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"duvwpklvxwmygd\",\"crossDomainPolicy\":\"gpqch\"},\"freeTrialEndTime\":\"2021-12-04T12:22:10Z\",\"created\":\"2021-05-26T11:43:30Z\",\"lastModified\":\"2021-04-10T21:01:23Z\"},\"sku\":{\"name\":\"rxgibbd\",\"capacity\":748250954},\"location\":\"onfo\",\"tags\":{\"hlvnuuepzlr\":\"orsukokwbqp\"},\"id\":\"hw\",\"name\":\"soldweyuqdunv\",\"type\":\"nnrwrbiork\"}")
                .toObject(StreamingEndpointInner.class);
        Assertions.assertEquals("onfo", model.location());
        Assertions.assertEquals("orsukokwbqp", model.tags().get("hlvnuuepzlr"));
        Assertions.assertEquals(748250954, model.sku().capacity());
        Assertions.assertEquals("qem", model.description());
        Assertions.assertEquals(295447223, model.scaleUnits());
        Assertions.assertEquals("mxtd", model.availabilitySetName());
        Assertions.assertEquals(6646451916229099217L, model.maxCacheAge());
        Assertions.assertEquals("bj", model.customHostNames().get(0));
        Assertions.assertEquals(false, model.cdnEnabled());
        Assertions.assertEquals("fgslqubkwdl", model.cdnProvider());
        Assertions.assertEquals("rds", model.cdnProfile());
        Assertions.assertEquals("duvwpklvxwmygd", model.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("gpqch", model.crossSiteAccessPolicies().crossDomainPolicy());
    }

    @Test
    public void testSerialize() {
        StreamingEndpointInner model =
            new StreamingEndpointInner()
                .withLocation("onfo")
                .withTags(mapOf("hlvnuuepzlr", "orsukokwbqp"))
                .withSku(new ArmStreamingEndpointCurrentSku().withCapacity(748250954))
                .withDescription("qem")
                .withScaleUnits(295447223)
                .withAvailabilitySetName("mxtd")
                .withAccessControl(new StreamingEndpointAccessControl())
                .withMaxCacheAge(6646451916229099217L)
                .withCustomHostNames(Arrays.asList("bj", "ewzcjznmwcp", "guaadraufactkahz"))
                .withCdnEnabled(false)
                .withCdnProvider("fgslqubkwdl")
                .withCdnProfile("rds")
                .withCrossSiteAccessPolicies(
                    new CrossSiteAccessPolicies()
                        .withClientAccessPolicy("duvwpklvxwmygd")
                        .withCrossDomainPolicy("gpqch"));
        model = BinaryData.fromObject(model).toObject(StreamingEndpointInner.class);
        Assertions.assertEquals("onfo", model.location());
        Assertions.assertEquals("orsukokwbqp", model.tags().get("hlvnuuepzlr"));
        Assertions.assertEquals(748250954, model.sku().capacity());
        Assertions.assertEquals("qem", model.description());
        Assertions.assertEquals(295447223, model.scaleUnits());
        Assertions.assertEquals("mxtd", model.availabilitySetName());
        Assertions.assertEquals(6646451916229099217L, model.maxCacheAge());
        Assertions.assertEquals("bj", model.customHostNames().get(0));
        Assertions.assertEquals(false, model.cdnEnabled());
        Assertions.assertEquals("fgslqubkwdl", model.cdnProvider());
        Assertions.assertEquals("rds", model.cdnProfile());
        Assertions.assertEquals("duvwpklvxwmygd", model.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("gpqch", model.crossSiteAccessPolicies().crossDomainPolicy());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
