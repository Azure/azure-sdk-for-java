// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.fluent.models.StreamingEndpointInner;
import com.azure.resourcemanager.mediaservices.models.ArmStreamingEndpointCurrentSku;
import com.azure.resourcemanager.mediaservices.models.CrossSiteAccessPolicies;
import com.azure.resourcemanager.mediaservices.models.StreamingEndpointAccessControl;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StreamingEndpointInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StreamingEndpointInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"description\":\"ongbjcnt\",\"scaleUnits\":1376846032,\"availabilitySetName\":\"tcje\",\"accessControl\":{},\"maxCacheAge\":1961213753419982705,\"customHostNames\":[\"ojvdcpzfoqo\",\"i\"],\"hostName\":\"bxarzgszufoxci\",\"cdnEnabled\":false,\"cdnProvider\":\"doamciodhkha\",\"cdnProfile\":\"khnzbonlw\",\"provisioningState\":\"oegokdwbwh\",\"resourceState\":\"Stopped\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"mrv\",\"crossDomainPolicy\":\"ztvbtqgsfr\"},\"freeTrialEndTime\":\"2021-01-05T13:13:02Z\",\"created\":\"2021-07-15T09:51:15Z\",\"lastModified\":\"2021-02-13T11:43:40Z\"},\"sku\":{\"name\":\"mnguxawqaldsyu\",\"capacity\":1074129183},\"location\":\"merqfobwyznkb\",\"tags\":{\"pfhpagmhrskdsnfd\":\"t\",\"ewpusdsttwvogvb\":\"doakgtdlmkkzevdl\"},\"id\":\"ejdcngqqmoakuf\",\"name\":\"m\",\"type\":\"zr\"}")
                .toObject(StreamingEndpointInner.class);
        Assertions.assertEquals("merqfobwyznkb", model.location());
        Assertions.assertEquals("t", model.tags().get("pfhpagmhrskdsnfd"));
        Assertions.assertEquals(1074129183, model.sku().capacity());
        Assertions.assertEquals("ongbjcnt", model.description());
        Assertions.assertEquals(1376846032, model.scaleUnits());
        Assertions.assertEquals("tcje", model.availabilitySetName());
        Assertions.assertEquals(1961213753419982705L, model.maxCacheAge());
        Assertions.assertEquals("ojvdcpzfoqo", model.customHostNames().get(0));
        Assertions.assertEquals(false, model.cdnEnabled());
        Assertions.assertEquals("doamciodhkha", model.cdnProvider());
        Assertions.assertEquals("khnzbonlw", model.cdnProfile());
        Assertions.assertEquals("mrv", model.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("ztvbtqgsfr", model.crossSiteAccessPolicies().crossDomainPolicy());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StreamingEndpointInner model =
            new StreamingEndpointInner()
                .withLocation("merqfobwyznkb")
                .withTags(mapOf("pfhpagmhrskdsnfd", "t", "ewpusdsttwvogvb", "doakgtdlmkkzevdl"))
                .withSku(new ArmStreamingEndpointCurrentSku().withCapacity(1074129183))
                .withDescription("ongbjcnt")
                .withScaleUnits(1376846032)
                .withAvailabilitySetName("tcje")
                .withAccessControl(new StreamingEndpointAccessControl())
                .withMaxCacheAge(1961213753419982705L)
                .withCustomHostNames(Arrays.asList("ojvdcpzfoqo", "i"))
                .withCdnEnabled(false)
                .withCdnProvider("doamciodhkha")
                .withCdnProfile("khnzbonlw")
                .withCrossSiteAccessPolicies(
                    new CrossSiteAccessPolicies().withClientAccessPolicy("mrv").withCrossDomainPolicy("ztvbtqgsfr"));
        model = BinaryData.fromObject(model).toObject(StreamingEndpointInner.class);
        Assertions.assertEquals("merqfobwyznkb", model.location());
        Assertions.assertEquals("t", model.tags().get("pfhpagmhrskdsnfd"));
        Assertions.assertEquals(1074129183, model.sku().capacity());
        Assertions.assertEquals("ongbjcnt", model.description());
        Assertions.assertEquals(1376846032, model.scaleUnits());
        Assertions.assertEquals("tcje", model.availabilitySetName());
        Assertions.assertEquals(1961213753419982705L, model.maxCacheAge());
        Assertions.assertEquals("ojvdcpzfoqo", model.customHostNames().get(0));
        Assertions.assertEquals(false, model.cdnEnabled());
        Assertions.assertEquals("doamciodhkha", model.cdnProvider());
        Assertions.assertEquals("khnzbonlw", model.cdnProfile());
        Assertions.assertEquals("mrv", model.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("ztvbtqgsfr", model.crossSiteAccessPolicies().crossDomainPolicy());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
