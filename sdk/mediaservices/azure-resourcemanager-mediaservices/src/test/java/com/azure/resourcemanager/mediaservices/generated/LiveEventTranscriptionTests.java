// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.LiveEventInputTrackSelection;
import com.azure.resourcemanager.mediaservices.models.LiveEventOutputTranscriptionTrack;
import com.azure.resourcemanager.mediaservices.models.LiveEventTranscription;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class LiveEventTranscriptionTests {
    @Test
    public void testDeserialize() {
        LiveEventTranscription model =
            BinaryData
                .fromString(
                    "{\"language\":\"nvrk\",\"inputTrackSelection\":[{\"property\":\"aibrebqaaysjkixq\",\"operation\":\"qttezlwfffiakpjp\",\"value\":\"m\"}],\"outputTranscriptionTrack\":{\"trackName\":\"d\"}}")
                .toObject(LiveEventTranscription.class);
        Assertions.assertEquals("nvrk", model.language());
        Assertions.assertEquals("aibrebqaaysjkixq", model.inputTrackSelection().get(0).property());
        Assertions.assertEquals("qttezlwfffiakpjp", model.inputTrackSelection().get(0).operation());
        Assertions.assertEquals("m", model.inputTrackSelection().get(0).value());
        Assertions.assertEquals("d", model.outputTranscriptionTrack().trackName());
    }

    @Test
    public void testSerialize() {
        LiveEventTranscription model =
            new LiveEventTranscription()
                .withLanguage("nvrk")
                .withInputTrackSelection(
                    Arrays
                        .asList(
                            new LiveEventInputTrackSelection()
                                .withProperty("aibrebqaaysjkixq")
                                .withOperation("qttezlwfffiakpjp")
                                .withValue("m")))
                .withOutputTranscriptionTrack(new LiveEventOutputTranscriptionTrack().withTrackName("d"));
        model = BinaryData.fromObject(model).toObject(LiveEventTranscription.class);
        Assertions.assertEquals("nvrk", model.language());
        Assertions.assertEquals("aibrebqaaysjkixq", model.inputTrackSelection().get(0).property());
        Assertions.assertEquals("qttezlwfffiakpjp", model.inputTrackSelection().get(0).operation());
        Assertions.assertEquals("m", model.inputTrackSelection().get(0).value());
        Assertions.assertEquals("d", model.outputTranscriptionTrack().trackName());
    }
}
