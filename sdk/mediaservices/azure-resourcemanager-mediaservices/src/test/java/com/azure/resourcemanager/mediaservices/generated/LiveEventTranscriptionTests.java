// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.LiveEventInputTrackSelection;
import com.azure.resourcemanager.mediaservices.models.LiveEventOutputTranscriptionTrack;
import com.azure.resourcemanager.mediaservices.models.LiveEventTranscription;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class LiveEventTranscriptionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LiveEventTranscription model =
            BinaryData
                .fromString(
                    "{\"language\":\"tkwqqtchealm\",\"inputTrackSelection\":[{\"property\":\"aayg\",\"operation\":\"wvgpiohg\",\"value\":\"rtfudxepxg\"},{\"property\":\"agvrvmnpkuk\",\"operation\":\"i\",\"value\":\"blxgwimf\"},{\"property\":\"hfjx\",\"operation\":\"szkkfoqre\",\"value\":\"kzikfjawneaivxwc\"}],\"outputTranscriptionTrack\":{\"trackName\":\"lpcirelsf\"}}")
                .toObject(LiveEventTranscription.class);
        Assertions.assertEquals("tkwqqtchealm", model.language());
        Assertions.assertEquals("aayg", model.inputTrackSelection().get(0).property());
        Assertions.assertEquals("wvgpiohg", model.inputTrackSelection().get(0).operation());
        Assertions.assertEquals("rtfudxepxg", model.inputTrackSelection().get(0).value());
        Assertions.assertEquals("lpcirelsf", model.outputTranscriptionTrack().trackName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LiveEventTranscription model =
            new LiveEventTranscription()
                .withLanguage("tkwqqtchealm")
                .withInputTrackSelection(
                    Arrays
                        .asList(
                            new LiveEventInputTrackSelection()
                                .withProperty("aayg")
                                .withOperation("wvgpiohg")
                                .withValue("rtfudxepxg"),
                            new LiveEventInputTrackSelection()
                                .withProperty("agvrvmnpkuk")
                                .withOperation("i")
                                .withValue("blxgwimf"),
                            new LiveEventInputTrackSelection()
                                .withProperty("hfjx")
                                .withOperation("szkkfoqre")
                                .withValue("kzikfjawneaivxwc")))
                .withOutputTranscriptionTrack(new LiveEventOutputTranscriptionTrack().withTrackName("lpcirelsf"));
        model = BinaryData.fromObject(model).toObject(LiveEventTranscription.class);
        Assertions.assertEquals("tkwqqtchealm", model.language());
        Assertions.assertEquals("aayg", model.inputTrackSelection().get(0).property());
        Assertions.assertEquals("wvgpiohg", model.inputTrackSelection().get(0).operation());
        Assertions.assertEquals("rtfudxepxg", model.inputTrackSelection().get(0).value());
        Assertions.assertEquals("lpcirelsf", model.outputTranscriptionTrack().trackName());
    }
}
