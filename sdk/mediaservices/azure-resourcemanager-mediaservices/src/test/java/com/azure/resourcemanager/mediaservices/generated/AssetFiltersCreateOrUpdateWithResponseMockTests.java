// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.models.AssetFilter;
import com.azure.resourcemanager.mediaservices.models.FirstQuality;
import com.azure.resourcemanager.mediaservices.models.PresentationTimeRange;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AssetFiltersCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"presentationTimeRange\":{\"startTimestamp\":5605265911389940437,\"endTimestamp\":8828570443204442415,\"presentationWindowDuration\":6948814692957888145,\"liveBackoffDuration\":1732138551751569521,\"timescale\":3640297226126313490,\"forceEndTimestamp\":true},\"firstQuality\":{\"bitrate\":1233756756},\"tracks\":[]},\"id\":\"lxqzvn\",\"name\":\"rsbycucrwn\",\"type\":\"mikzeb\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        AssetFilter response =
            manager
                .assetFilters()
                .define("zzjgehkfki")
                .withExistingAsset("gjxsnptfu", "gicgaaoepttaq", "tdewemxswvruu")
                .withPresentationTimeRange(
                    new PresentationTimeRange()
                        .withStartTimestamp(546537594847028022L)
                        .withEndTimestamp(8667135923506770358L)
                        .withPresentationWindowDuration(6932449090517620100L)
                        .withLiveBackoffDuration(6126117628175450487L)
                        .withTimescale(4213065429281369117L)
                        .withForceEndTimestamp(true))
                .withFirstQuality(new FirstQuality().withBitrate(1195081046))
                .withTracks(Arrays.asList())
                .create();

        Assertions.assertEquals(5605265911389940437L, response.presentationTimeRange().startTimestamp());
        Assertions.assertEquals(8828570443204442415L, response.presentationTimeRange().endTimestamp());
        Assertions.assertEquals(6948814692957888145L, response.presentationTimeRange().presentationWindowDuration());
        Assertions.assertEquals(1732138551751569521L, response.presentationTimeRange().liveBackoffDuration());
        Assertions.assertEquals(3640297226126313490L, response.presentationTimeRange().timescale());
        Assertions.assertEquals(true, response.presentationTimeRange().forceEndTimestamp());
        Assertions.assertEquals(1233756756, response.firstQuality().bitrate());
    }
}
