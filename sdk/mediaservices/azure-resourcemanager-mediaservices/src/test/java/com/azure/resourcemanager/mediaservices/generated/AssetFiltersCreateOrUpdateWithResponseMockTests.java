// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.models.AssetFilter;
import com.azure.resourcemanager.mediaservices.models.FilterTrackPropertyCompareOperation;
import com.azure.resourcemanager.mediaservices.models.FilterTrackPropertyCondition;
import com.azure.resourcemanager.mediaservices.models.FilterTrackPropertyType;
import com.azure.resourcemanager.mediaservices.models.FilterTrackSelection;
import com.azure.resourcemanager.mediaservices.models.FirstQuality;
import com.azure.resourcemanager.mediaservices.models.PresentationTimeRange;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AssetFiltersCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"presentationTimeRange\":{\"startTimestamp\":53736383096316604,\"endTimestamp\":9052954868996953096,\"presentationWindowDuration\":8518864851562915437,\"liveBackoffDuration\":2542785653818117107,\"timescale\":6478817283379006699,\"forceEndTimestamp\":true},\"firstQuality\":{\"bitrate\":1091959996},\"tracks\":[{\"trackSelections\":[{\"property\":\"Language\",\"value\":\"icphvtrrmhw\",\"operation\":\"NotEqual\"},{\"property\":\"Bitrate\",\"value\":\"dpyflubhv\",\"operation\":\"Equal\"}]}]},\"id\":\"r\",\"name\":\"cuyzlwhhmemhoocl\",\"type\":\"tnpqmemczjk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MediaServicesManager manager = MediaServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AssetFilter response = manager.assetFilters()
            .define("aabeolhbhlvbmxuq")
            .withExistingAsset("eaclgschorimk", "srrm", "ucsofldpuviyf")
            .withPresentationTimeRange(new PresentationTimeRange().withStartTimestamp(8287172275490149291L)
                .withEndTimestamp(899091342187786717L)
                .withPresentationWindowDuration(847917078700733715L)
                .withLiveBackoffDuration(5074292881257418173L)
                .withTimescale(4241731821624600668L)
                .withForceEndTimestamp(false))
            .withFirstQuality(new FirstQuality().withBitrate(1864601179))
            .withTracks(Arrays.asList(new FilterTrackSelection().withTrackSelections(Arrays.asList(
                new FilterTrackPropertyCondition().withProperty(FilterTrackPropertyType.BITRATE)
                    .withValue("pvwgfstmhqykizmd")
                    .withOperation(FilterTrackPropertyCompareOperation.NOT_EQUAL),
                new FilterTrackPropertyCondition().withProperty(FilterTrackPropertyType.NAME)
                    .withValue("oafcluqvox")
                    .withOperation(FilterTrackPropertyCompareOperation.NOT_EQUAL),
                new FilterTrackPropertyCondition().withProperty(FilterTrackPropertyType.UNKNOWN)
                    .withValue("jimryvwgcwwpbmz")
                    .withOperation(FilterTrackPropertyCompareOperation.EQUAL),
                new FilterTrackPropertyCondition().withProperty(FilterTrackPropertyType.NAME)
                    .withValue("sydsxwefohe")
                    .withOperation(FilterTrackPropertyCompareOperation.NOT_EQUAL)))))
            .create();

        Assertions.assertEquals(53736383096316604L, response.presentationTimeRange().startTimestamp());
        Assertions.assertEquals(9052954868996953096L, response.presentationTimeRange().endTimestamp());
        Assertions.assertEquals(8518864851562915437L, response.presentationTimeRange().presentationWindowDuration());
        Assertions.assertEquals(2542785653818117107L, response.presentationTimeRange().liveBackoffDuration());
        Assertions.assertEquals(6478817283379006699L, response.presentationTimeRange().timescale());
        Assertions.assertEquals(true, response.presentationTimeRange().forceEndTimestamp());
        Assertions.assertEquals(1091959996, response.firstQuality().bitrate());
        Assertions.assertEquals(FilterTrackPropertyType.LANGUAGE,
            response.tracks().get(0).trackSelections().get(0).property());
        Assertions.assertEquals("icphvtrrmhw", response.tracks().get(0).trackSelections().get(0).value());
        Assertions.assertEquals(FilterTrackPropertyCompareOperation.NOT_EQUAL,
            response.tracks().get(0).trackSelections().get(0).operation());
    }
}
