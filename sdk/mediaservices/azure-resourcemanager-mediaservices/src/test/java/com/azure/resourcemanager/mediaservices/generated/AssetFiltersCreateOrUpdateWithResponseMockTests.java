// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.models.AssetFilter;
import com.azure.resourcemanager.mediaservices.models.FirstQuality;
import com.azure.resourcemanager.mediaservices.models.PresentationTimeRange;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AssetFiltersCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"presentationTimeRange\":{\"startTimestamp\":4701652628680745733,\"endTimestamp\":8813063868718248905,\"presentationWindowDuration\":349526303477712226,\"liveBackoffDuration\":7156119288556744534,\"timescale\":3380493363726104663,\"forceEndTimestamp\":false},\"firstQuality\":{\"bitrate\":756426109},\"tracks\":[]},\"id\":\"t\",\"name\":\"c\",\"type\":\"xgccknfnw\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        AssetFilter response =
            manager
                .assetFilters()
                .define("nac")
                .withExistingAsset("kdlpa", "zrcxfailcfxwmdbo", "dfgsftufqobrj")
                .withPresentationTimeRange(
                    new PresentationTimeRange()
                        .withStartTimestamp(2929730010981080157L)
                        .withEndTimestamp(5989208742098135571L)
                        .withPresentationWindowDuration(9128547594412210827L)
                        .withLiveBackoffDuration(1883092830157221903L)
                        .withTimescale(4659584360901220943L)
                        .withForceEndTimestamp(false))
                .withFirstQuality(new FirstQuality().withBitrate(34895139))
                .withTracks(Arrays.asList())
                .create();

        Assertions.assertEquals(4701652628680745733L, response.presentationTimeRange().startTimestamp());
        Assertions.assertEquals(8813063868718248905L, response.presentationTimeRange().endTimestamp());
        Assertions.assertEquals(349526303477712226L, response.presentationTimeRange().presentationWindowDuration());
        Assertions.assertEquals(7156119288556744534L, response.presentationTimeRange().liveBackoffDuration());
        Assertions.assertEquals(3380493363726104663L, response.presentationTimeRange().timescale());
        Assertions.assertEquals(false, response.presentationTimeRange().forceEndTimestamp());
        Assertions.assertEquals(756426109, response.firstQuality().bitrate());
    }
}
