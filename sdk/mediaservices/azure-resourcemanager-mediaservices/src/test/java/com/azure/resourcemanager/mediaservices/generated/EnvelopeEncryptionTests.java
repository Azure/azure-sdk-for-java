// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mediaservices.models.DefaultKey;
import com.azure.resourcemanager.mediaservices.models.EnabledProtocols;
import com.azure.resourcemanager.mediaservices.models.EnvelopeEncryption;
import com.azure.resourcemanager.mediaservices.models.StreamingPolicyContentKey;
import com.azure.resourcemanager.mediaservices.models.StreamingPolicyContentKeys;
import com.azure.resourcemanager.mediaservices.models.TrackSelection;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class EnvelopeEncryptionTests {
    @Test
    public void testDeserialize() {
        EnvelopeEncryption model =
            BinaryData
                .fromString(
                    "{\"enabledProtocols\":{\"download\":false,\"dash\":false,\"hls\":false,\"smoothStreaming\":false},\"clearTracks\":[{\"trackSelections\":[]},{\"trackSelections\":[]},{\"trackSelections\":[]}],\"contentKeys\":{\"defaultKey\":{\"label\":\"wo\",\"policyName\":\"washr\"},\"keyToTrackMappings\":[{\"label\":\"cnqxwbpokulpi\",\"policyName\":\"waasip\",\"tracks\":[]},{\"label\":\"obyu\",\"policyName\":\"rpqlp\",\"tracks\":[]}]},\"customKeyAcquisitionUrlTemplate\":\"ciuqgbdb\"}")
                .toObject(EnvelopeEncryption.class);
        Assertions.assertEquals(false, model.enabledProtocols().download());
        Assertions.assertEquals(false, model.enabledProtocols().dash());
        Assertions.assertEquals(false, model.enabledProtocols().hls());
        Assertions.assertEquals(false, model.enabledProtocols().smoothStreaming());
        Assertions.assertEquals("wo", model.contentKeys().defaultKey().label());
        Assertions.assertEquals("washr", model.contentKeys().defaultKey().policyName());
        Assertions.assertEquals("cnqxwbpokulpi", model.contentKeys().keyToTrackMappings().get(0).label());
        Assertions.assertEquals("waasip", model.contentKeys().keyToTrackMappings().get(0).policyName());
        Assertions.assertEquals("ciuqgbdb", model.customKeyAcquisitionUrlTemplate());
    }

    @Test
    public void testSerialize() {
        EnvelopeEncryption model =
            new EnvelopeEncryption()
                .withEnabledProtocols(
                    new EnabledProtocols()
                        .withDownload(false)
                        .withDash(false)
                        .withHls(false)
                        .withSmoothStreaming(false))
                .withClearTracks(
                    Arrays
                        .asList(
                            new TrackSelection().withTrackSelections(Arrays.asList()),
                            new TrackSelection().withTrackSelections(Arrays.asList()),
                            new TrackSelection().withTrackSelections(Arrays.asList())))
                .withContentKeys(
                    new StreamingPolicyContentKeys()
                        .withDefaultKey(new DefaultKey().withLabel("wo").withPolicyName("washr"))
                        .withKeyToTrackMappings(
                            Arrays
                                .asList(
                                    new StreamingPolicyContentKey()
                                        .withLabel("cnqxwbpokulpi")
                                        .withPolicyName("waasip")
                                        .withTracks(Arrays.asList()),
                                    new StreamingPolicyContentKey()
                                        .withLabel("obyu")
                                        .withPolicyName("rpqlp")
                                        .withTracks(Arrays.asList()))))
                .withCustomKeyAcquisitionUrlTemplate("ciuqgbdb");
        model = BinaryData.fromObject(model).toObject(EnvelopeEncryption.class);
        Assertions.assertEquals(false, model.enabledProtocols().download());
        Assertions.assertEquals(false, model.enabledProtocols().dash());
        Assertions.assertEquals(false, model.enabledProtocols().hls());
        Assertions.assertEquals(false, model.enabledProtocols().smoothStreaming());
        Assertions.assertEquals("wo", model.contentKeys().defaultKey().label());
        Assertions.assertEquals("washr", model.contentKeys().defaultKey().policyName());
        Assertions.assertEquals("cnqxwbpokulpi", model.contentKeys().keyToTrackMappings().get(0).label());
        Assertions.assertEquals("waasip", model.contentKeys().keyToTrackMappings().get(0).policyName());
        Assertions.assertEquals("ciuqgbdb", model.customKeyAcquisitionUrlTemplate());
    }
}
