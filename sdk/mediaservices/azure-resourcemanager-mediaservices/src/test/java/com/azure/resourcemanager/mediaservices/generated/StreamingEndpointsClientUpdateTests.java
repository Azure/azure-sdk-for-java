// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.fluent.models.StreamingEndpointInner;
import com.azure.resourcemanager.mediaservices.models.ArmStreamingEndpointCurrentSku;
import com.azure.resourcemanager.mediaservices.models.CrossSiteAccessPolicies;
import com.azure.resourcemanager.mediaservices.models.StreamingEndpointAccessControl;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class StreamingEndpointsClientUpdateTests {
    @Test
    public void testUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"description\":\"qvbubqmamhs\",\"scaleUnits\":411873796,\"availabilitySetName\":\"hxzga\",\"accessControl\":{},\"maxCacheAge\":792314735002365352,\"customHostNames\":[\"mfqhppubowse\",\"dfgkmtdh\",\"rngbtcjuahokqtob\"],\"hostName\":\"uxofshfphwpnulai\",\"cdnEnabled\":true,\"cdnProvider\":\"jy\",\"cdnProfile\":\"slwkojpl\",\"provisioningState\":\"Succeeded\",\"resourceState\":\"Starting\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"nnfhyetefypo\",\"crossDomainPolicy\":\"ctfjgtixr\"},\"freeTrialEndTime\":\"2021-02-02T08:04:55Z\",\"created\":\"2021-06-13T22:05:20Z\",\"lastModified\":\"2021-06-11T18:18:31Z\"},\"sku\":{\"name\":\"muowolbauiro\",\"capacity\":713536788},\"location\":\"nszonwpngaj\",\"tags\":{\"fjmyccxlzhco\":\"ixjawrtm\",\"henlusfnr\":\"ovne\",\"cq\":\"tjxtxr\",\"uslvyjtcvuwkasi\":\"jvidttge\"},\"id\":\"iesfuug\",\"name\":\"tuqfecjxeygtu\",\"type\":\"xu\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        StreamingEndpointInner response =
            manager
                .serviceClient()
                .getStreamingEndpoints()
                .update(
                    "vmribiat",
                    "gplucfotangcfhny",
                    "zcugswvxwlmzqw",
                    new StreamingEndpointInner()
                        .withLocation("lafcbahh")
                        .withTags(mapOf("w", "ofoiy", "ndviauogphuartvt", "filkmkkholv"))
                        .withSku(new ArmStreamingEndpointCurrentSku().withCapacity(2010031498))
                        .withDescription("xnjmxm")
                        .withScaleUnits(1005746333)
                        .withAvailabilitySetName("udtc")
                        .withAccessControl(new StreamingEndpointAccessControl())
                        .withMaxCacheAge(4792041905462044883L)
                        .withCustomHostNames(Arrays.asList("vgfab"))
                        .withCdnEnabled(false)
                        .withCdnProvider("gox")
                        .withCdnProfile("iuqhibtozipqwj")
                        .withCrossSiteAccessPolicies(
                            new CrossSiteAccessPolicies()
                                .withClientAccessPolicy("wpktvqylkmqpzoyh")
                                .withCrossDomainPolicy("bcg")),
                    Context.NONE);

        Assertions.assertEquals("nszonwpngaj", response.location());
        Assertions.assertEquals("ixjawrtm", response.tags().get("fjmyccxlzhco"));
        Assertions.assertEquals(713536788, response.sku().capacity());
        Assertions.assertEquals("qvbubqmamhs", response.description());
        Assertions.assertEquals(411873796, response.scaleUnits());
        Assertions.assertEquals("hxzga", response.availabilitySetName());
        Assertions.assertEquals(792314735002365352L, response.maxCacheAge());
        Assertions.assertEquals("mfqhppubowse", response.customHostNames().get(0));
        Assertions.assertEquals(true, response.cdnEnabled());
        Assertions.assertEquals("jy", response.cdnProvider());
        Assertions.assertEquals("slwkojpl", response.cdnProfile());
        Assertions.assertEquals("nnfhyetefypo", response.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("ctfjgtixr", response.crossSiteAccessPolicies().crossDomainPolicy());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
