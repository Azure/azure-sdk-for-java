// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mediaservices.MediaServicesManager;
import com.azure.resourcemanager.mediaservices.models.CrossSiteAccessPolicies;
import com.azure.resourcemanager.mediaservices.models.LiveEvent;
import com.azure.resourcemanager.mediaservices.models.LiveEventEncoding;
import com.azure.resourcemanager.mediaservices.models.LiveEventEncodingType;
import com.azure.resourcemanager.mediaservices.models.LiveEventInput;
import com.azure.resourcemanager.mediaservices.models.LiveEventInputProtocol;
import com.azure.resourcemanager.mediaservices.models.LiveEventPreview;
import com.azure.resourcemanager.mediaservices.models.StreamOptionsFlag;
import com.azure.resourcemanager.mediaservices.models.StretchMode;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LiveEventsCreateTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"description\":\"swokm\",\"input\":{\"streamingProtocol\":\"FragmentedMP4\",\"keyFrameIntervalDuration\":\"ggdhbemzqkzszuw\",\"accessToken\":\"tglxx\",\"endpoints\":[]},\"preview\":{\"endpoints\":[],\"previewLocator\":\"picrmnzhrgmqgjsx\",\"streamingPolicyName\":\"qcbfrmbodths\",\"alternativeMediaId\":\"gvriibakclac\"},\"encoding\":{\"encodingType\":\"Premium1080p\",\"presetName\":\"ousxauzlwvsgmw\",\"stretchMode\":\"AutoFit\",\"keyFrameInterval\":\"PT41H4M3S\"},\"transcriptions\":[],\"provisioningState\":\"Succeeded\",\"resourceState\":\"Allocating\",\"crossSiteAccessPolicies\":{\"clientAccessPolicy\":\"vmribiat\",\"crossDomainPolicy\":\"plucfotangcfhnyk\"},\"useStaticHostname\":false,\"hostnamePrefix\":\"swvxwlmzqwmv\",\"streamOptions\":[\"LowLatency\",\"LowLatency\",\"LowLatency\",\"LowLatencyV2\"],\"created\":\"2021-03-21T20:36:30Z\",\"lastModified\":\"2021-10-15T14:33Z\"},\"location\":\"tcvcl\",\"tags\":{\"abuiy\":\"pdkvg\",\"hdugneiknpg\":\"ibuz\"},\"id\":\"xgjiuqh\",\"name\":\"btozipqwje\",\"type\":\"mur\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MediaServicesManager manager =
            MediaServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        LiveEvent response =
            manager
                .liveEvents()
                .define("rpddouifamo")
                .withRegion("ubcpzgpxti")
                .withExistingMediaservice("fprnjl", "tlxs")
                .withTags(mapOf("qjxgpnrhgovfgp", "knidib"))
                .withDescription("iynknlq")
                .withInput(
                    new LiveEventInput()
                        .withStreamingProtocol(LiveEventInputProtocol.FRAGMENTED_MP4)
                        .withKeyFrameIntervalDuration("piwhxqs")
                        .withAccessToken("tmaaj")
                        .withEndpoints(Arrays.asList()))
                .withPreview(
                    new LiveEventPreview()
                        .withEndpoints(Arrays.asList())
                        .withPreviewLocator("lrjvmtyg")
                        .withStreamingPolicyName("mzyospspshck")
                        .withAlternativeMediaId("yjpmspbpssdfppyo"))
                .withEncoding(
                    new LiveEventEncoding()
                        .withEncodingType(LiveEventEncodingType.NONE)
                        .withPresetName("ujtv")
                        .withStretchMode(StretchMode.NONE)
                        .withKeyFrameInterval(Duration.parse("PT188H16M32S")))
                .withTranscriptions(Arrays.asList())
                .withCrossSiteAccessPolicies(
                    new CrossSiteAccessPolicies()
                        .withClientAccessPolicy("xvglnkvxlxp")
                        .withCrossDomainPolicy("lqivbgkcv"))
                .withUseStaticHostname(true)
                .withHostnamePrefix("vuqd")
                .withStreamOptions(Arrays.asList(StreamOptionsFlag.LOW_LATENCY_V2, StreamOptionsFlag.DEFAULT))
                .withAutoStart(false)
                .create();

        Assertions.assertEquals("tcvcl", response.location());
        Assertions.assertEquals("pdkvg", response.tags().get("abuiy"));
        Assertions.assertEquals("swokm", response.description());
        Assertions.assertEquals(LiveEventInputProtocol.FRAGMENTED_MP4, response.input().streamingProtocol());
        Assertions.assertEquals("ggdhbemzqkzszuw", response.input().keyFrameIntervalDuration());
        Assertions.assertEquals("tglxx", response.input().accessToken());
        Assertions.assertEquals("picrmnzhrgmqgjsx", response.preview().previewLocator());
        Assertions.assertEquals("qcbfrmbodths", response.preview().streamingPolicyName());
        Assertions.assertEquals("gvriibakclac", response.preview().alternativeMediaId());
        Assertions.assertEquals(LiveEventEncodingType.PREMIUM1080P, response.encoding().encodingType());
        Assertions.assertEquals("ousxauzlwvsgmw", response.encoding().presetName());
        Assertions.assertEquals(StretchMode.AUTO_FIT, response.encoding().stretchMode());
        Assertions.assertEquals(Duration.parse("PT41H4M3S"), response.encoding().keyFrameInterval());
        Assertions.assertEquals("vmribiat", response.crossSiteAccessPolicies().clientAccessPolicy());
        Assertions.assertEquals("plucfotangcfhnyk", response.crossSiteAccessPolicies().crossDomainPolicy());
        Assertions.assertEquals(false, response.useStaticHostname());
        Assertions.assertEquals("swvxwlmzqwmv", response.hostnamePrefix());
        Assertions.assertEquals(StreamOptionsFlag.LOW_LATENCY, response.streamOptions().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
