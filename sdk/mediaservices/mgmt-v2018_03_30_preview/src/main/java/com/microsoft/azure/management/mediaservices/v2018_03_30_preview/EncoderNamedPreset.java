/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices.v2018_03_30_preview;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Defines values for EncoderNamedPreset.
 */
public enum EncoderNamedPreset {
    /** Produces a set of GOP aligned MP4 files with H.264 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution and bitrate. The auto-generated preset will never exceed the input resolution and bitrate. For example, if the input is 720p at 3 Mbps, output will remain 720p at best, and will start at rates lower than 3 Mbps. The output will have video and audio in separate MP4 files, which is optimal for adaptive streaming. */
    ADAPTIVE_STREAMING("AdaptiveStreaming"),

    /** Produces a single MP4 file containing only stereo audio encoded at 192 kbps. */
    AACGOOD_QUALITY_AUDIO("AACGoodQualityAudio"),

    /** Produces a set of 8 GOP-aligned MP4 files, ranging from 6000 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 1080p and goes down to 360p. */
    H264MULTIPLE_BITRATE1080P("H264MultipleBitrate1080p"),

    /** Produces a set of 6 GOP-aligned MP4 files, ranging from 3400 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 720p and goes down to 360p. */
    H264MULTIPLE_BITRATE720P("H264MultipleBitrate720p"),

    /** Produces a set of 5 GOP-aligned MP4 files, ranging from 1600kbps to 400 kbps, and stereo AAC audio. Resolution starts at 480p and goes down to 360p. */
    H264MULTIPLE_BITRATE_SD("H264MultipleBitrateSD");

    /** The actual serialized value for a EncoderNamedPreset instance. */
    private String value;

    EncoderNamedPreset(String value) {
        this.value = value;
    }

    /**
     * Parses a serialized value to a EncoderNamedPreset instance.
     *
     * @param value the serialized value to parse.
     * @return the parsed EncoderNamedPreset object, or null if unable to parse.
     */
    @JsonCreator
    public static EncoderNamedPreset fromString(String value) {
        EncoderNamedPreset[] items = EncoderNamedPreset.values();
        for (EncoderNamedPreset item : items) {
            if (item.toString().equalsIgnoreCase(value)) {
                return item;
            }
        }
        return null;
    }

    @JsonValue
    @Override
    public String toString() {
        return this.value;
    }
}
