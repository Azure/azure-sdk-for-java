/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices.v2018_03_30_preview;

import com.microsoft.azure.arm.collection.SupportsCreating;
import rx.Completable;
import rx.Observable;
import com.microsoft.azure.management.mediaservices.v2018_03_30_preview.implementation.LiveEventsInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing LiveEvents.
 */
public interface LiveEvents extends SupportsCreating<LiveEvent.DefinitionStages.Blank>, HasInner<LiveEventsInner> {
    /**
     * Start Live Event.
     * Starts an existing Live Event.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the Live Event.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable startAsync(String resourceGroupName, String accountName, String liveEventName);

    /**
     * Stop Live Event.
     * Stops an existing Live Event.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the Live Event.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable stopAsync(String resourceGroupName, String accountName, String liveEventName);

    /**
     * Reset Live Event.
     * Resets an existing Live Event.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the Live Event.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable resetAsync(String resourceGroupName, String accountName, String liveEventName);

    /**
     * Get Live Event.
     * Gets a Live Event.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the Live Event.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<LiveEvent> getAsync(String resourceGroupName, String accountName, String liveEventName);

    /**
     * List Live Events.
     * Lists the Live Events in the account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<LiveEvent> listAsync(final String resourceGroupName, final String accountName);

    /**
     * Delete Live Event.
     * Deletes a Live Event.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the Live Event.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String resourceGroupName, String accountName, String liveEventName);

}
