/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices.v2020_05_01.implementation;

import com.microsoft.azure.management.mediaservices.v2020_05_01.ContentKeyPolicy;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.UUID;
import org.joda.time.DateTime;
import java.util.List;
import com.microsoft.azure.management.mediaservices.v2020_05_01.ContentKeyPolicyOption;

class ContentKeyPolicyImpl extends CreatableUpdatableImpl<ContentKeyPolicy, ContentKeyPolicyInner, ContentKeyPolicyImpl> implements ContentKeyPolicy, ContentKeyPolicy.Definition, ContentKeyPolicy.Update {
    private final MediaManager manager;
    private String resourceGroupName;
    private String accountName;
    private String contentKeyPolicyName;

    ContentKeyPolicyImpl(String name, MediaManager manager) {
        super(name, new ContentKeyPolicyInner());
        this.manager = manager;
        // Set resource name
        this.contentKeyPolicyName = name;
        //
    }

    ContentKeyPolicyImpl(ContentKeyPolicyInner inner, MediaManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.contentKeyPolicyName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "mediaServices");
        this.contentKeyPolicyName = IdParsingUtils.getValueFromIdByName(inner.id(), "contentKeyPolicies");
        //
    }

    @Override
    public MediaManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ContentKeyPolicy> createResourceAsync() {
        ContentKeyPoliciesInner client = this.manager().inner().contentKeyPolicies();
        return client.createOrUpdateAsync(this.resourceGroupName, this.accountName, this.contentKeyPolicyName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ContentKeyPolicy> updateResourceAsync() {
        ContentKeyPoliciesInner client = this.manager().inner().contentKeyPolicies();
        return client.updateAsync(this.resourceGroupName, this.accountName, this.contentKeyPolicyName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ContentKeyPolicyInner> getInnerAsync() {
        ContentKeyPoliciesInner client = this.manager().inner().contentKeyPolicies();
        return client.getAsync(this.resourceGroupName, this.accountName, this.contentKeyPolicyName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public DateTime created() {
        return this.inner().created();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public DateTime lastModified() {
        return this.inner().lastModified();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public List<ContentKeyPolicyOption> options() {
        return this.inner().options();
    }

    @Override
    public UUID policyId() {
        return this.inner().policyId();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ContentKeyPolicyImpl withExistingMediaservice(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    @Override
    public ContentKeyPolicyImpl withOptions(List<ContentKeyPolicyOption> options) {
        this.inner().withOptions(options);
        return this;
    }

    @Override
    public ContentKeyPolicyImpl withDescription(String description) {
        this.inner().withDescription(description);
        return this;
    }

}
