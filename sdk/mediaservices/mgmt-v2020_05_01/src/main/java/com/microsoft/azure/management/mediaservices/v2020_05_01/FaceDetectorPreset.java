/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices.v2020_05_01;

import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Describes all the settings to be used when analyzing a video in order to
 * detect all the faces present.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@odata\\.type", defaultImpl = FaceDetectorPreset.class)
@JsonTypeName("#Microsoft.Media.FaceDetectorPreset")
public class FaceDetectorPreset extends Preset {
    /**
     * Specifies the maximum resolution at which your video is analyzed. The
     * default behavior is "SourceResolution," which will keep the input video
     * at its original resolution when analyzed. Using "StandardDefinition"
     * will resize input videos to standard definition while preserving the
     * appropriate aspect ratio. It will only resize if the video is of higher
     * resolution. For example, a 1920x1080 input would be scaled to 640x360
     * before processing. Switching to "StandardDefinition" will reduce the
     * time it takes to process high resolution video. It may also reduce the
     * cost of using this component (see
     * https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics
     * for details). However, faces that end up being too small in the resized
     * video may not be detected. Possible values include: 'SourceResolution',
     * 'StandardDefinition'.
     */
    @JsonProperty(value = "resolution")
    private AnalysisResolution resolution;

    /**
     * Dictionary containing key value pairs for parameters not exposed in the
     * preset itself.
     */
    @JsonProperty(value = "experimentalOptions")
    private Map<String, String> experimentalOptions;

    /**
     * Get specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected. Possible values include: 'SourceResolution', 'StandardDefinition'.
     *
     * @return the resolution value
     */
    public AnalysisResolution resolution() {
        return this.resolution;
    }

    /**
     * Set specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected. Possible values include: 'SourceResolution', 'StandardDefinition'.
     *
     * @param resolution the resolution value to set
     * @return the FaceDetectorPreset object itself.
     */
    public FaceDetectorPreset withResolution(AnalysisResolution resolution) {
        this.resolution = resolution;
        return this;
    }

    /**
     * Get dictionary containing key value pairs for parameters not exposed in the preset itself.
     *
     * @return the experimentalOptions value
     */
    public Map<String, String> experimentalOptions() {
        return this.experimentalOptions;
    }

    /**
     * Set dictionary containing key value pairs for parameters not exposed in the preset itself.
     *
     * @param experimentalOptions the experimentalOptions value to set
     * @return the FaceDetectorPreset object itself.
     */
    public FaceDetectorPreset withExperimentalOptions(Map<String, String> experimentalOptions) {
        this.experimentalOptions = experimentalOptions;
        return this;
    }

}
