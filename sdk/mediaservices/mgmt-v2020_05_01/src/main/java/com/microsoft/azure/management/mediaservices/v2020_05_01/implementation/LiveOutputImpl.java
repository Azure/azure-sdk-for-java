/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices.v2020_05_01.implementation;

import com.microsoft.azure.management.mediaservices.v2020_05_01.LiveOutput;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import org.joda.time.Period;
import com.microsoft.azure.management.mediaservices.v2020_05_01.Hls;
import org.joda.time.DateTime;
import com.microsoft.azure.management.mediaservices.v2020_05_01.LiveOutputResourceState;

class LiveOutputImpl extends CreatableUpdatableImpl<LiveOutput, LiveOutputInner, LiveOutputImpl> implements LiveOutput, LiveOutput.Definition, LiveOutput.Update {
    private final MediaManager manager;
    private String resourceGroupName;
    private String accountName;
    private String liveEventName;
    private String liveOutputName;

    LiveOutputImpl(String name, MediaManager manager) {
        super(name, new LiveOutputInner());
        this.manager = manager;
        // Set resource name
        this.liveOutputName = name;
        //
    }

    LiveOutputImpl(LiveOutputInner inner, MediaManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.liveOutputName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "mediaservices");
        this.liveEventName = IdParsingUtils.getValueFromIdByName(inner.id(), "liveEvents");
        this.liveOutputName = IdParsingUtils.getValueFromIdByName(inner.id(), "liveOutputs");
        //
    }

    @Override
    public MediaManager manager() {
        return this.manager;
    }

    @Override
    public Observable<LiveOutput> createResourceAsync() {
        LiveOutputsInner client = this.manager().inner().liveOutputs();
        return client.createAsync(this.resourceGroupName, this.accountName, this.liveEventName, this.liveOutputName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<LiveOutput> updateResourceAsync() {
        LiveOutputsInner client = this.manager().inner().liveOutputs();
        return client.createAsync(this.resourceGroupName, this.accountName, this.liveEventName, this.liveOutputName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<LiveOutputInner> getInnerAsync() {
        LiveOutputsInner client = this.manager().inner().liveOutputs();
        return client.getAsync(this.resourceGroupName, this.accountName, this.liveEventName, this.liveOutputName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public Period archiveWindowLength() {
        return this.inner().archiveWindowLength();
    }

    @Override
    public String assetName() {
        return this.inner().assetName();
    }

    @Override
    public DateTime created() {
        return this.inner().created();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public Hls hls() {
        return this.inner().hls();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public DateTime lastModified() {
        return this.inner().lastModified();
    }

    @Override
    public String manifestName() {
        return this.inner().manifestName();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Long outputSnapTime() {
        return this.inner().outputSnapTime();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public LiveOutputResourceState resourceState() {
        return this.inner().resourceState();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public LiveOutputImpl withExistingLiveEvent(String resourceGroupName, String accountName, String liveEventName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.liveEventName = liveEventName;
        return this;
    }

    @Override
    public LiveOutputImpl withArchiveWindowLength(Period archiveWindowLength) {
        this.inner().withArchiveWindowLength(archiveWindowLength);
        return this;
    }

    @Override
    public LiveOutputImpl withAssetName(String assetName) {
        this.inner().withAssetName(assetName);
        return this;
    }

    @Override
    public LiveOutputImpl withDescription(String description) {
        this.inner().withDescription(description);
        return this;
    }

    @Override
    public LiveOutputImpl withHls(Hls hls) {
        this.inner().withHls(hls);
        return this;
    }

    @Override
    public LiveOutputImpl withManifestName(String manifestName) {
        this.inner().withManifestName(manifestName);
        return this;
    }

    @Override
    public LiveOutputImpl withOutputSnapTime(Long outputSnapTime) {
        this.inner().withOutputSnapTime(outputSnapTime);
        return this;
    }

}
