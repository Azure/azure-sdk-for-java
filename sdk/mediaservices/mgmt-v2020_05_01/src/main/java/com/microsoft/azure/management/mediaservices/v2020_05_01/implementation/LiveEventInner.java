/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices.v2020_05_01.implementation;

import com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput;
import com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventPreview;
import com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventEncoding;
import java.util.List;
import com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventTranscription;
import com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventResourceState;
import com.microsoft.azure.management.mediaservices.v2020_05_01.CrossSiteAccessPolicies;
import com.microsoft.azure.management.mediaservices.v2020_05_01.StreamOptionsFlag;
import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.Resource;

/**
 * The live event.
 */
@JsonFlatten
public class LiveEventInner extends Resource {
    /**
     * A description for the live event.
     */
    @JsonProperty(value = "properties.description")
    private String description;

    /**
     * Live event input settings. It defines how the live event receives input
     * from a contribution encoder.
     */
    @JsonProperty(value = "properties.input", required = true)
    private LiveEventInput input;

    /**
     * Live event preview settings. Preview allows live event producers to
     * preview the live streaming content without creating any live output.
     */
    @JsonProperty(value = "properties.preview")
    private LiveEventPreview preview;

    /**
     * Encoding settings for the live event. It configures whether a live
     * encoder is used for the live event and settings for the live encoder if
     * it is used.
     */
    @JsonProperty(value = "properties.encoding")
    private LiveEventEncoding encoding;

    /**
     * Live transcription settings for the live event. See
     * https://go.microsoft.com/fwlink/?linkid=2133742 for more information
     * about the live transcription feature.
     */
    @JsonProperty(value = "properties.transcriptions")
    private List<LiveEventTranscription> transcriptions;

    /**
     * The provisioning state of the live event.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /**
     * The resource state of the live event. See
     * https://go.microsoft.com/fwlink/?linkid=2139012 for more information.
     * Possible values include: 'Stopped', 'Allocating', 'StandBy', 'Starting',
     * 'Running', 'Stopping', 'Deleting'.
     */
    @JsonProperty(value = "properties.resourceState", access = JsonProperty.Access.WRITE_ONLY)
    private LiveEventResourceState resourceState;

    /**
     * Live event cross site access policies.
     */
    @JsonProperty(value = "properties.crossSiteAccessPolicies")
    private CrossSiteAccessPolicies crossSiteAccessPolicies;

    /**
     * Specifies whether a static hostname would be assigned to the live event
     * preview and ingest endpoints. This value can only be updated if the live
     * event is in Standby state.
     */
    @JsonProperty(value = "properties.useStaticHostname")
    private Boolean useStaticHostname;

    /**
     * When useStaticHostname is set to true, the hostnamePrefix specifies the
     * first part of the hostname assigned to the live event preview and ingest
     * endpoints. The final hostname would be a combination of this prefix, the
     * media service account name and a short code for the Azure Media Services
     * data center.
     */
    @JsonProperty(value = "properties.hostnamePrefix")
    private String hostnamePrefix;

    /**
     * The options to use for the LiveEvent. This value is specified at
     * creation time and cannot be updated. The valid values for the array
     * entry values are 'Default' and 'LowLatency'.
     */
    @JsonProperty(value = "properties.streamOptions")
    private List<StreamOptionsFlag> streamOptions;

    /**
     * The creation time for the live event.
     */
    @JsonProperty(value = "properties.created", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime created;

    /**
     * The last modified time of the live event.
     */
    @JsonProperty(value = "properties.lastModified", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastModified;

    /**
     * Get a description for the live event.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set a description for the live event.
     *
     * @param description the description value to set
     * @return the LiveEventInner object itself.
     */
    public LiveEventInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get live event input settings. It defines how the live event receives input from a contribution encoder.
     *
     * @return the input value
     */
    public LiveEventInput input() {
        return this.input;
    }

    /**
     * Set live event input settings. It defines how the live event receives input from a contribution encoder.
     *
     * @param input the input value to set
     * @return the LiveEventInner object itself.
     */
    public LiveEventInner withInput(LiveEventInput input) {
        this.input = input;
        return this;
    }

    /**
     * Get live event preview settings. Preview allows live event producers to preview the live streaming content without creating any live output.
     *
     * @return the preview value
     */
    public LiveEventPreview preview() {
        return this.preview;
    }

    /**
     * Set live event preview settings. Preview allows live event producers to preview the live streaming content without creating any live output.
     *
     * @param preview the preview value to set
     * @return the LiveEventInner object itself.
     */
    public LiveEventInner withPreview(LiveEventPreview preview) {
        this.preview = preview;
        return this;
    }

    /**
     * Get encoding settings for the live event. It configures whether a live encoder is used for the live event and settings for the live encoder if it is used.
     *
     * @return the encoding value
     */
    public LiveEventEncoding encoding() {
        return this.encoding;
    }

    /**
     * Set encoding settings for the live event. It configures whether a live encoder is used for the live event and settings for the live encoder if it is used.
     *
     * @param encoding the encoding value to set
     * @return the LiveEventInner object itself.
     */
    public LiveEventInner withEncoding(LiveEventEncoding encoding) {
        this.encoding = encoding;
        return this;
    }

    /**
     * Get live transcription settings for the live event. See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature.
     *
     * @return the transcriptions value
     */
    public List<LiveEventTranscription> transcriptions() {
        return this.transcriptions;
    }

    /**
     * Set live transcription settings for the live event. See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature.
     *
     * @param transcriptions the transcriptions value to set
     * @return the LiveEventInner object itself.
     */
    public LiveEventInner withTranscriptions(List<LiveEventTranscription> transcriptions) {
        this.transcriptions = transcriptions;
        return this;
    }

    /**
     * Get the provisioning state of the live event.
     *
     * @return the provisioningState value
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the resource state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information. Possible values include: 'Stopped', 'Allocating', 'StandBy', 'Starting', 'Running', 'Stopping', 'Deleting'.
     *
     * @return the resourceState value
     */
    public LiveEventResourceState resourceState() {
        return this.resourceState;
    }

    /**
     * Get live event cross site access policies.
     *
     * @return the crossSiteAccessPolicies value
     */
    public CrossSiteAccessPolicies crossSiteAccessPolicies() {
        return this.crossSiteAccessPolicies;
    }

    /**
     * Set live event cross site access policies.
     *
     * @param crossSiteAccessPolicies the crossSiteAccessPolicies value to set
     * @return the LiveEventInner object itself.
     */
    public LiveEventInner withCrossSiteAccessPolicies(CrossSiteAccessPolicies crossSiteAccessPolicies) {
        this.crossSiteAccessPolicies = crossSiteAccessPolicies;
        return this;
    }

    /**
     * Get specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. This value can only be updated if the live event is in Standby state.
     *
     * @return the useStaticHostname value
     */
    public Boolean useStaticHostname() {
        return this.useStaticHostname;
    }

    /**
     * Set specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. This value can only be updated if the live event is in Standby state.
     *
     * @param useStaticHostname the useStaticHostname value to set
     * @return the LiveEventInner object itself.
     */
    public LiveEventInner withUseStaticHostname(Boolean useStaticHostname) {
        this.useStaticHostname = useStaticHostname;
        return this;
    }

    /**
     * Get when useStaticHostname is set to true, the hostnamePrefix specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
     *
     * @return the hostnamePrefix value
     */
    public String hostnamePrefix() {
        return this.hostnamePrefix;
    }

    /**
     * Set when useStaticHostname is set to true, the hostnamePrefix specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
     *
     * @param hostnamePrefix the hostnamePrefix value to set
     * @return the LiveEventInner object itself.
     */
    public LiveEventInner withHostnamePrefix(String hostnamePrefix) {
        this.hostnamePrefix = hostnamePrefix;
        return this;
    }

    /**
     * Get the options to use for the LiveEvent. This value is specified at creation time and cannot be updated. The valid values for the array entry values are 'Default' and 'LowLatency'.
     *
     * @return the streamOptions value
     */
    public List<StreamOptionsFlag> streamOptions() {
        return this.streamOptions;
    }

    /**
     * Set the options to use for the LiveEvent. This value is specified at creation time and cannot be updated. The valid values for the array entry values are 'Default' and 'LowLatency'.
     *
     * @param streamOptions the streamOptions value to set
     * @return the LiveEventInner object itself.
     */
    public LiveEventInner withStreamOptions(List<StreamOptionsFlag> streamOptions) {
        this.streamOptions = streamOptions;
        return this;
    }

    /**
     * Get the creation time for the live event.
     *
     * @return the created value
     */
    public DateTime created() {
        return this.created;
    }

    /**
     * Get the last modified time of the live event.
     *
     * @return the lastModified value
     */
    public DateTime lastModified() {
        return this.lastModified;
    }

}
