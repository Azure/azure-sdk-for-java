/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices.v2020_05_01;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Specifies a configuration for FairPlay licenses.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@odata\\.type", defaultImpl = ContentKeyPolicyFairPlayConfiguration.class)
@JsonTypeName("#Microsoft.Media.ContentKeyPolicyFairPlayConfiguration")
public class ContentKeyPolicyFairPlayConfiguration extends ContentKeyPolicyConfiguration {
    /**
     * The key that must be used as FairPlay Application Secret key.
     */
    @JsonProperty(value = "ask", required = true)
    private byte[] ask;

    /**
     * The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
     */
    @JsonProperty(value = "fairPlayPfxPassword", required = true)
    private String fairPlayPfxPassword;

    /**
     * The Base64 representation of FairPlay certificate in PKCS 12 (pfx)
     * format (including private key).
     */
    @JsonProperty(value = "fairPlayPfx", required = true)
    private String fairPlayPfx;

    /**
     * The rental and lease key type. Possible values include: 'Unknown',
     * 'Undefined', 'DualExpiry', 'PersistentUnlimited', 'PersistentLimited'.
     */
    @JsonProperty(value = "rentalAndLeaseKeyType", required = true)
    private ContentKeyPolicyFairPlayRentalAndLeaseKeyType rentalAndLeaseKeyType;

    /**
     * The rental duration. Must be greater than or equal to 0.
     */
    @JsonProperty(value = "rentalDuration", required = true)
    private long rentalDuration;

    /**
     * Offline rental policy.
     */
    @JsonProperty(value = "offlineRentalConfiguration")
    private ContentKeyPolicyFairPlayOfflineRentalConfiguration offlineRentalConfiguration;

    /**
     * Get the key that must be used as FairPlay Application Secret key.
     *
     * @return the ask value
     */
    public byte[] ask() {
        return this.ask;
    }

    /**
     * Set the key that must be used as FairPlay Application Secret key.
     *
     * @param ask the ask value to set
     * @return the ContentKeyPolicyFairPlayConfiguration object itself.
     */
    public ContentKeyPolicyFairPlayConfiguration withAsk(byte[] ask) {
        this.ask = ask;
        return this;
    }

    /**
     * Get the password encrypting FairPlay certificate in PKCS 12 (pfx) format.
     *
     * @return the fairPlayPfxPassword value
     */
    public String fairPlayPfxPassword() {
        return this.fairPlayPfxPassword;
    }

    /**
     * Set the password encrypting FairPlay certificate in PKCS 12 (pfx) format.
     *
     * @param fairPlayPfxPassword the fairPlayPfxPassword value to set
     * @return the ContentKeyPolicyFairPlayConfiguration object itself.
     */
    public ContentKeyPolicyFairPlayConfiguration withFairPlayPfxPassword(String fairPlayPfxPassword) {
        this.fairPlayPfxPassword = fairPlayPfxPassword;
        return this;
    }

    /**
     * Get the Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
     *
     * @return the fairPlayPfx value
     */
    public String fairPlayPfx() {
        return this.fairPlayPfx;
    }

    /**
     * Set the Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
     *
     * @param fairPlayPfx the fairPlayPfx value to set
     * @return the ContentKeyPolicyFairPlayConfiguration object itself.
     */
    public ContentKeyPolicyFairPlayConfiguration withFairPlayPfx(String fairPlayPfx) {
        this.fairPlayPfx = fairPlayPfx;
        return this;
    }

    /**
     * Get the rental and lease key type. Possible values include: 'Unknown', 'Undefined', 'DualExpiry', 'PersistentUnlimited', 'PersistentLimited'.
     *
     * @return the rentalAndLeaseKeyType value
     */
    public ContentKeyPolicyFairPlayRentalAndLeaseKeyType rentalAndLeaseKeyType() {
        return this.rentalAndLeaseKeyType;
    }

    /**
     * Set the rental and lease key type. Possible values include: 'Unknown', 'Undefined', 'DualExpiry', 'PersistentUnlimited', 'PersistentLimited'.
     *
     * @param rentalAndLeaseKeyType the rentalAndLeaseKeyType value to set
     * @return the ContentKeyPolicyFairPlayConfiguration object itself.
     */
    public ContentKeyPolicyFairPlayConfiguration withRentalAndLeaseKeyType(ContentKeyPolicyFairPlayRentalAndLeaseKeyType rentalAndLeaseKeyType) {
        this.rentalAndLeaseKeyType = rentalAndLeaseKeyType;
        return this;
    }

    /**
     * Get the rental duration. Must be greater than or equal to 0.
     *
     * @return the rentalDuration value
     */
    public long rentalDuration() {
        return this.rentalDuration;
    }

    /**
     * Set the rental duration. Must be greater than or equal to 0.
     *
     * @param rentalDuration the rentalDuration value to set
     * @return the ContentKeyPolicyFairPlayConfiguration object itself.
     */
    public ContentKeyPolicyFairPlayConfiguration withRentalDuration(long rentalDuration) {
        this.rentalDuration = rentalDuration;
        return this;
    }

    /**
     * Get offline rental policy.
     *
     * @return the offlineRentalConfiguration value
     */
    public ContentKeyPolicyFairPlayOfflineRentalConfiguration offlineRentalConfiguration() {
        return this.offlineRentalConfiguration;
    }

    /**
     * Set offline rental policy.
     *
     * @param offlineRentalConfiguration the offlineRentalConfiguration value to set
     * @return the ContentKeyPolicyFairPlayConfiguration object itself.
     */
    public ContentKeyPolicyFairPlayConfiguration withOfflineRentalConfiguration(ContentKeyPolicyFairPlayOfflineRentalConfiguration offlineRentalConfiguration) {
        this.offlineRentalConfiguration = offlineRentalConfiguration;
        return this;
    }

}
