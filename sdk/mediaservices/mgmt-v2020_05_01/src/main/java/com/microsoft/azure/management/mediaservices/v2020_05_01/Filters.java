/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices.v2020_05_01;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Describes all the filtering operations, such as de-interlacing, rotation
 * etc. that are to be applied to the input media before encoding.
 */
public class Filters {
    /**
     * The de-interlacing settings.
     */
    @JsonProperty(value = "deinterlace")
    private Deinterlace deinterlace;

    /**
     * The rotation, if any, to be applied to the input video, before it is
     * encoded. Default is Auto. Possible values include: 'Auto', 'None',
     * 'Rotate0', 'Rotate90', 'Rotate180', 'Rotate270'.
     */
    @JsonProperty(value = "rotation")
    private Rotation rotation;

    /**
     * The parameters for the rectangular window with which to crop the input
     * video.
     */
    @JsonProperty(value = "crop")
    private Rectangle crop;

    /**
     * The properties of overlays to be applied to the input video. These could
     * be audio, image or video overlays.
     */
    @JsonProperty(value = "overlays")
    private List<Overlay> overlays;

    /**
     * Get the de-interlacing settings.
     *
     * @return the deinterlace value
     */
    public Deinterlace deinterlace() {
        return this.deinterlace;
    }

    /**
     * Set the de-interlacing settings.
     *
     * @param deinterlace the deinterlace value to set
     * @return the Filters object itself.
     */
    public Filters withDeinterlace(Deinterlace deinterlace) {
        this.deinterlace = deinterlace;
        return this;
    }

    /**
     * Get the rotation, if any, to be applied to the input video, before it is encoded. Default is Auto. Possible values include: 'Auto', 'None', 'Rotate0', 'Rotate90', 'Rotate180', 'Rotate270'.
     *
     * @return the rotation value
     */
    public Rotation rotation() {
        return this.rotation;
    }

    /**
     * Set the rotation, if any, to be applied to the input video, before it is encoded. Default is Auto. Possible values include: 'Auto', 'None', 'Rotate0', 'Rotate90', 'Rotate180', 'Rotate270'.
     *
     * @param rotation the rotation value to set
     * @return the Filters object itself.
     */
    public Filters withRotation(Rotation rotation) {
        this.rotation = rotation;
        return this;
    }

    /**
     * Get the parameters for the rectangular window with which to crop the input video.
     *
     * @return the crop value
     */
    public Rectangle crop() {
        return this.crop;
    }

    /**
     * Set the parameters for the rectangular window with which to crop the input video.
     *
     * @param crop the crop value to set
     * @return the Filters object itself.
     */
    public Filters withCrop(Rectangle crop) {
        this.crop = crop;
        return this;
    }

    /**
     * Get the properties of overlays to be applied to the input video. These could be audio, image or video overlays.
     *
     * @return the overlays value
     */
    public List<Overlay> overlays() {
        return this.overlays;
    }

    /**
     * Set the properties of overlays to be applied to the input video. These could be audio, image or video overlays.
     *
     * @param overlays the overlays value to set
     * @return the Filters object itself.
     */
    public Filters withOverlays(List<Overlay> overlays) {
        this.overlays = overlays;
        return this;
    }

}
