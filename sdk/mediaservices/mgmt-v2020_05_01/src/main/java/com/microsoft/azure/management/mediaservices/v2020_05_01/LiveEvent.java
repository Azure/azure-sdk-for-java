/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices.v2020_05_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.mediaservices.v2020_05_01.implementation.LiveEventInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.mediaservices.v2020_05_01.implementation.MediaManager;
import java.util.Map;
import java.util.List;
import org.joda.time.DateTime;

/**
 * Type representing LiveEvent.
 */
public interface LiveEvent extends HasInner<LiveEventInner>, Indexable, Refreshable<LiveEvent>, Updatable<LiveEvent.Update>, HasManager<MediaManager> {
    /**
     * @return the created value.
     */
    DateTime created();

    /**
     * @return the crossSiteAccessPolicies value.
     */
    CrossSiteAccessPolicies crossSiteAccessPolicies();

    /**
     * @return the description value.
     */
    String description();

    /**
     * @return the encoding value.
     */
    LiveEventEncoding encoding();

    /**
     * @return the hostnamePrefix value.
     */
    String hostnamePrefix();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the input value.
     */
    LiveEventInput input();

    /**
     * @return the lastModified value.
     */
    DateTime lastModified();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the preview value.
     */
    LiveEventPreview preview();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the resourceState value.
     */
    LiveEventResourceState resourceState();

    /**
     * @return the streamOptions value.
     */
    List<StreamOptionsFlag> streamOptions();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the transcriptions value.
     */
    List<LiveEventTranscription> transcriptions();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the useStaticHostname value.
     */
    Boolean useStaticHostname();

    /**
     * The entirety of the LiveEvent definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithMediaservice, DefinitionStages.WithAutoStart, DefinitionStages.WithInput, DefinitionStages.WithLocation, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of LiveEvent definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a LiveEvent definition.
         */
        interface Blank extends WithMediaservice {
        }

        /**
         * The stage of the liveevent definition allowing to specify Mediaservice.
         */
        interface WithMediaservice {
           /**
            * Specifies resourceGroupName, accountName.
            * @param resourceGroupName The name of the resource group within the Azure subscription
            * @param accountName The Media Services account name
            * @return the next definition stage
            */
            WithAutoStart withExistingMediaservice(String resourceGroupName, String accountName);
        }

        /**
         * The stage of the liveevent definition allowing to specify AutoStart.
         */
        interface WithAutoStart {
           /**
            * Specifies autoStart.
            * @param autoStart The flag indicates if the resource should be automatically started on creation
            * @return the next definition stage
            */
            WithInput withAutoStart(Boolean autoStart);
        }

        /**
         * The stage of the liveevent definition allowing to specify Input.
         */
        interface WithInput {
           /**
            * Specifies input.
            * @param input Live event input settings. It defines how the live event receives input from a contribution encoder
            * @return the next definition stage
            */
            WithLocation withInput(LiveEventInput input);
        }

        /**
         * The stage of the liveevent definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            * @param location The geo-location where the resource lives
            * @return the next definition stage
            */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the liveevent definition allowing to specify CrossSiteAccessPolicies.
         */
        interface WithCrossSiteAccessPolicies {
            /**
             * Specifies crossSiteAccessPolicies.
             * @param crossSiteAccessPolicies Live event cross site access policies
             * @return the next definition stage
             */
            WithCreate withCrossSiteAccessPolicies(CrossSiteAccessPolicies crossSiteAccessPolicies);
        }

        /**
         * The stage of the liveevent definition allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description A description for the live event
             * @return the next definition stage
             */
            WithCreate withDescription(String description);
        }

        /**
         * The stage of the liveevent definition allowing to specify Encoding.
         */
        interface WithEncoding {
            /**
             * Specifies encoding.
             * @param encoding Encoding settings for the live event. It configures whether a live encoder is used for the live event and settings for the live encoder if it is used
             * @return the next definition stage
             */
            WithCreate withEncoding(LiveEventEncoding encoding);
        }

        /**
         * The stage of the liveevent definition allowing to specify HostnamePrefix.
         */
        interface WithHostnamePrefix {
            /**
             * Specifies hostnamePrefix.
             * @param hostnamePrefix When useStaticHostname is set to true, the hostnamePrefix specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center
             * @return the next definition stage
             */
            WithCreate withHostnamePrefix(String hostnamePrefix);
        }

        /**
         * The stage of the liveevent definition allowing to specify Preview.
         */
        interface WithPreview {
            /**
             * Specifies preview.
             * @param preview Live event preview settings. Preview allows live event producers to preview the live streaming content without creating any live output
             * @return the next definition stage
             */
            WithCreate withPreview(LiveEventPreview preview);
        }

        /**
         * The stage of the liveevent definition allowing to specify StreamOptions.
         */
        interface WithStreamOptions {
            /**
             * Specifies streamOptions.
             * @param streamOptions The options to use for the LiveEvent. This value is specified at creation time and cannot be updated. The valid values for the array entry values are 'Default' and 'LowLatency'
             * @return the next definition stage
             */
            WithCreate withStreamOptions(List<StreamOptionsFlag> streamOptions);
        }

        /**
         * The stage of the liveevent definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next definition stage
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the liveevent definition allowing to specify Transcriptions.
         */
        interface WithTranscriptions {
            /**
             * Specifies transcriptions.
             * @param transcriptions Live transcription settings for the live event. See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature
             * @return the next definition stage
             */
            WithCreate withTranscriptions(List<LiveEventTranscription> transcriptions);
        }

        /**
         * The stage of the liveevent definition allowing to specify UseStaticHostname.
         */
        interface WithUseStaticHostname {
            /**
             * Specifies useStaticHostname.
             * @param useStaticHostname Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. This value can only be updated if the live event is in Standby state
             * @return the next definition stage
             */
            WithCreate withUseStaticHostname(Boolean useStaticHostname);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<LiveEvent>, DefinitionStages.WithCrossSiteAccessPolicies, DefinitionStages.WithDescription, DefinitionStages.WithEncoding, DefinitionStages.WithHostnamePrefix, DefinitionStages.WithPreview, DefinitionStages.WithStreamOptions, DefinitionStages.WithTags, DefinitionStages.WithTranscriptions, DefinitionStages.WithUseStaticHostname {
        }
    }
    /**
     * The template for a LiveEvent update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<LiveEvent>, UpdateStages.WithCrossSiteAccessPolicies, UpdateStages.WithDescription, UpdateStages.WithEncoding, UpdateStages.WithHostnamePrefix, UpdateStages.WithPreview, UpdateStages.WithStreamOptions, UpdateStages.WithTags, UpdateStages.WithTranscriptions, UpdateStages.WithUseStaticHostname {
    }

    /**
     * Grouping of LiveEvent update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the liveevent update allowing to specify CrossSiteAccessPolicies.
         */
        interface WithCrossSiteAccessPolicies {
            /**
             * Specifies crossSiteAccessPolicies.
             * @param crossSiteAccessPolicies Live event cross site access policies
             * @return the next update stage
             */
            Update withCrossSiteAccessPolicies(CrossSiteAccessPolicies crossSiteAccessPolicies);
        }

        /**
         * The stage of the liveevent update allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description A description for the live event
             * @return the next update stage
             */
            Update withDescription(String description);
        }

        /**
         * The stage of the liveevent update allowing to specify Encoding.
         */
        interface WithEncoding {
            /**
             * Specifies encoding.
             * @param encoding Encoding settings for the live event. It configures whether a live encoder is used for the live event and settings for the live encoder if it is used
             * @return the next update stage
             */
            Update withEncoding(LiveEventEncoding encoding);
        }

        /**
         * The stage of the liveevent update allowing to specify HostnamePrefix.
         */
        interface WithHostnamePrefix {
            /**
             * Specifies hostnamePrefix.
             * @param hostnamePrefix When useStaticHostname is set to true, the hostnamePrefix specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center
             * @return the next update stage
             */
            Update withHostnamePrefix(String hostnamePrefix);
        }

        /**
         * The stage of the liveevent update allowing to specify Preview.
         */
        interface WithPreview {
            /**
             * Specifies preview.
             * @param preview Live event preview settings. Preview allows live event producers to preview the live streaming content without creating any live output
             * @return the next update stage
             */
            Update withPreview(LiveEventPreview preview);
        }

        /**
         * The stage of the liveevent update allowing to specify StreamOptions.
         */
        interface WithStreamOptions {
            /**
             * Specifies streamOptions.
             * @param streamOptions The options to use for the LiveEvent. This value is specified at creation time and cannot be updated. The valid values for the array entry values are 'Default' and 'LowLatency'
             * @return the next update stage
             */
            Update withStreamOptions(List<StreamOptionsFlag> streamOptions);
        }

        /**
         * The stage of the liveevent update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the liveevent update allowing to specify Transcriptions.
         */
        interface WithTranscriptions {
            /**
             * Specifies transcriptions.
             * @param transcriptions Live transcription settings for the live event. See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature
             * @return the next update stage
             */
            Update withTranscriptions(List<LiveEventTranscription> transcriptions);
        }

        /**
         * The stage of the liveevent update allowing to specify UseStaticHostname.
         */
        interface WithUseStaticHostname {
            /**
             * Specifies useStaticHostname.
             * @param useStaticHostname Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. This value can only be updated if the live event is in Standby state
             * @return the next update stage
             */
            Update withUseStaticHostname(Boolean useStaticHostname);
        }

    }
}
