/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices.v2020_05_01;

import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonSubTypes;

/**
 * The Audio Analyzer preset applies a pre-defined set of AI-based analysis
 * operations, including speech transcription. Currently, the preset supports
 * processing of content with a single audio track.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@odata\\.type", defaultImpl = AudioAnalyzerPreset.class)
@JsonTypeName("#Microsoft.Media.AudioAnalyzerPreset")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "#Microsoft.Media.VideoAnalyzerPreset", value = VideoAnalyzerPreset.class)
})
public class AudioAnalyzerPreset extends Preset {
    /**
     * The language for the audio payload in the input using the BCP-47 format
     * of 'language tag-region' (e.g: 'en-US').  If you know the language of
     * your content, it is recommended that you specify it. The language must
     * be specified explicitly for AudioAnalysisMode::Basic, since automatic
     * language detection is not included in basic mode. If the language isn't
     * specified or set to null, automatic language detection will choose the
     * first language detected and process with the selected language for the
     * duration of the file. It does not currently support dynamically
     * switching between languages after the first language is detected. The
     * automatic detection works best with audio recordings with clearly
     * discernable speech. If automatic detection fails to find the language,
     * transcription would fallback to 'en-US'." The list of supported
     * languages is available here:
     * https://go.microsoft.com/fwlink/?linkid=2109463.
     */
    @JsonProperty(value = "audioLanguage")
    private String audioLanguage;

    /**
     * Determines the set of audio analysis operations to be performed. If
     * unspecified, the Standard AudioAnalysisMode would be chosen. Possible
     * values include: 'Standard', 'Basic'.
     */
    @JsonProperty(value = "mode")
    private AudioAnalysisMode mode;

    /**
     * Dictionary containing key value pairs for parameters not exposed in the
     * preset itself.
     */
    @JsonProperty(value = "experimentalOptions")
    private Map<String, String> experimentalOptions;

    /**
     * Get the language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US').  If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode::Basic, since automatic language detection is not included in basic mode. If the language isn't specified or set to null, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
     *
     * @return the audioLanguage value
     */
    public String audioLanguage() {
        return this.audioLanguage;
    }

    /**
     * Set the language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US').  If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode::Basic, since automatic language detection is not included in basic mode. If the language isn't specified or set to null, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
     *
     * @param audioLanguage the audioLanguage value to set
     * @return the AudioAnalyzerPreset object itself.
     */
    public AudioAnalyzerPreset withAudioLanguage(String audioLanguage) {
        this.audioLanguage = audioLanguage;
        return this;
    }

    /**
     * Get determines the set of audio analysis operations to be performed. If unspecified, the Standard AudioAnalysisMode would be chosen. Possible values include: 'Standard', 'Basic'.
     *
     * @return the mode value
     */
    public AudioAnalysisMode mode() {
        return this.mode;
    }

    /**
     * Set determines the set of audio analysis operations to be performed. If unspecified, the Standard AudioAnalysisMode would be chosen. Possible values include: 'Standard', 'Basic'.
     *
     * @param mode the mode value to set
     * @return the AudioAnalyzerPreset object itself.
     */
    public AudioAnalyzerPreset withMode(AudioAnalysisMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get dictionary containing key value pairs for parameters not exposed in the preset itself.
     *
     * @return the experimentalOptions value
     */
    public Map<String, String> experimentalOptions() {
        return this.experimentalOptions;
    }

    /**
     * Set dictionary containing key value pairs for parameters not exposed in the preset itself.
     *
     * @param experimentalOptions the experimentalOptions value to set
     * @return the AudioAnalyzerPreset object itself.
     */
    public AudioAnalyzerPreset withExperimentalOptions(Map<String, String> experimentalOptions) {
        this.experimentalOptions = experimentalOptions;
        return this;
    }

}
