/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices.v2020_05_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.mediaservices.v2020_05_01.ApiErrorException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ContentKeyPolicies.
 */
public class ContentKeyPoliciesInner {
    /** The Retrofit service to perform REST calls. */
    private ContentKeyPoliciesService service;
    /** The service client containing this operation class. */
    private AzureMediaServicesImpl client;

    /**
     * Initializes an instance of ContentKeyPoliciesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ContentKeyPoliciesInner(Retrofit retrofit, AzureMediaServicesImpl client) {
        this.service = retrofit.create(ContentKeyPoliciesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ContentKeyPolicies to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ContentKeyPoliciesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2020_05_01.ContentKeyPolicies list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$orderby") String orderby, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2020_05_01.ContentKeyPolicies get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("contentKeyPolicyName") String contentKeyPolicyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2020_05_01.ContentKeyPolicies createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("contentKeyPolicyName") String contentKeyPolicyName, @Body ContentKeyPolicyInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2020_05_01.ContentKeyPolicies delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("contentKeyPolicyName") String contentKeyPolicyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2020_05_01.ContentKeyPolicies update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("contentKeyPolicyName") String contentKeyPolicyName, @Body ContentKeyPolicyInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2020_05_01.ContentKeyPolicies getPolicyPropertiesWithSecrets" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}/getPolicyPropertiesWithSecrets")
        Observable<Response<ResponseBody>> getPolicyPropertiesWithSecrets(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("contentKeyPolicyName") String contentKeyPolicyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2020_05_01.ContentKeyPolicies listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List Content Key Policies.
     * Lists the Content Key Policies in the account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ContentKeyPolicyInner&gt; object if successful.
     */
    public PagedList<ContentKeyPolicyInner> list(final String resourceGroupName, final String accountName) {
        ServiceResponse<Page<ContentKeyPolicyInner>> response = listSinglePageAsync(resourceGroupName, accountName).toBlocking().single();
        return new PagedList<ContentKeyPolicyInner>(response.body()) {
            @Override
            public Page<ContentKeyPolicyInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List Content Key Policies.
     * Lists the Content Key Policies in the account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ContentKeyPolicyInner>> listAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<ContentKeyPolicyInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, accountName),
            new Func1<String, Observable<ServiceResponse<Page<ContentKeyPolicyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ContentKeyPolicyInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List Content Key Policies.
     * Lists the Content Key Policies in the account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ContentKeyPolicyInner&gt; object
     */
    public Observable<Page<ContentKeyPolicyInner>> listAsync(final String resourceGroupName, final String accountName) {
        return listWithServiceResponseAsync(resourceGroupName, accountName)
            .map(new Func1<ServiceResponse<Page<ContentKeyPolicyInner>>, Page<ContentKeyPolicyInner>>() {
                @Override
                public Page<ContentKeyPolicyInner> call(ServiceResponse<Page<ContentKeyPolicyInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List Content Key Policies.
     * Lists the Content Key Policies in the account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ContentKeyPolicyInner&gt; object
     */
    public Observable<ServiceResponse<Page<ContentKeyPolicyInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String accountName) {
        return listSinglePageAsync(resourceGroupName, accountName)
            .concatMap(new Func1<ServiceResponse<Page<ContentKeyPolicyInner>>, Observable<ServiceResponse<Page<ContentKeyPolicyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ContentKeyPolicyInner>>> call(ServiceResponse<Page<ContentKeyPolicyInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List Content Key Policies.
     * Lists the Content Key Policies in the account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ContentKeyPolicyInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ContentKeyPolicyInner>>> listSinglePageAsync(final String resourceGroupName, final String accountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        final String orderby = null;
        return service.list(this.client.subscriptionId(), resourceGroupName, accountName, this.client.apiVersion(), filter, top, orderby, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ContentKeyPolicyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ContentKeyPolicyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ContentKeyPolicyInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ContentKeyPolicyInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List Content Key Policies.
     * Lists the Content Key Policies in the account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filter Restricts the set of items returned.
     * @param top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
     * @param orderby Specifies the key by which the result collection should be ordered.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ContentKeyPolicyInner&gt; object if successful.
     */
    public PagedList<ContentKeyPolicyInner> list(final String resourceGroupName, final String accountName, final String filter, final Integer top, final String orderby) {
        ServiceResponse<Page<ContentKeyPolicyInner>> response = listSinglePageAsync(resourceGroupName, accountName, filter, top, orderby).toBlocking().single();
        return new PagedList<ContentKeyPolicyInner>(response.body()) {
            @Override
            public Page<ContentKeyPolicyInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List Content Key Policies.
     * Lists the Content Key Policies in the account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filter Restricts the set of items returned.
     * @param top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
     * @param orderby Specifies the key by which the result collection should be ordered.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ContentKeyPolicyInner>> listAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final String orderby, final ListOperationCallback<ContentKeyPolicyInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, accountName, filter, top, orderby),
            new Func1<String, Observable<ServiceResponse<Page<ContentKeyPolicyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ContentKeyPolicyInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List Content Key Policies.
     * Lists the Content Key Policies in the account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filter Restricts the set of items returned.
     * @param top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
     * @param orderby Specifies the key by which the result collection should be ordered.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ContentKeyPolicyInner&gt; object
     */
    public Observable<Page<ContentKeyPolicyInner>> listAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final String orderby) {
        return listWithServiceResponseAsync(resourceGroupName, accountName, filter, top, orderby)
            .map(new Func1<ServiceResponse<Page<ContentKeyPolicyInner>>, Page<ContentKeyPolicyInner>>() {
                @Override
                public Page<ContentKeyPolicyInner> call(ServiceResponse<Page<ContentKeyPolicyInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List Content Key Policies.
     * Lists the Content Key Policies in the account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filter Restricts the set of items returned.
     * @param top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
     * @param orderby Specifies the key by which the result collection should be ordered.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ContentKeyPolicyInner&gt; object
     */
    public Observable<ServiceResponse<Page<ContentKeyPolicyInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final String orderby) {
        return listSinglePageAsync(resourceGroupName, accountName, filter, top, orderby)
            .concatMap(new Func1<ServiceResponse<Page<ContentKeyPolicyInner>>, Observable<ServiceResponse<Page<ContentKeyPolicyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ContentKeyPolicyInner>>> call(ServiceResponse<Page<ContentKeyPolicyInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List Content Key Policies.
     * Lists the Content Key Policies in the account.
     *
    ServiceResponse<PageImpl<ContentKeyPolicyInner>> * @param resourceGroupName The name of the resource group within the Azure subscription.
    ServiceResponse<PageImpl<ContentKeyPolicyInner>> * @param accountName The Media Services account name.
    ServiceResponse<PageImpl<ContentKeyPolicyInner>> * @param filter Restricts the set of items returned.
    ServiceResponse<PageImpl<ContentKeyPolicyInner>> * @param top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
    ServiceResponse<PageImpl<ContentKeyPolicyInner>> * @param orderby Specifies the key by which the result collection should be ordered.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ContentKeyPolicyInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ContentKeyPolicyInner>>> listSinglePageAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final String orderby) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, accountName, this.client.apiVersion(), filter, top, orderby, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ContentKeyPolicyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ContentKeyPolicyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ContentKeyPolicyInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ContentKeyPolicyInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ContentKeyPolicyInner>> listDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ContentKeyPolicyInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ContentKeyPolicyInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Get a Content Key Policy.
     * Get the details of a Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentKeyPolicyInner object if successful.
     */
    public ContentKeyPolicyInner get(String resourceGroupName, String accountName, String contentKeyPolicyName) {
        return getWithServiceResponseAsync(resourceGroupName, accountName, contentKeyPolicyName).toBlocking().single().body();
    }

    /**
     * Get a Content Key Policy.
     * Get the details of a Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentKeyPolicyInner> getAsync(String resourceGroupName, String accountName, String contentKeyPolicyName, final ServiceCallback<ContentKeyPolicyInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, accountName, contentKeyPolicyName), serviceCallback);
    }

    /**
     * Get a Content Key Policy.
     * Get the details of a Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentKeyPolicyInner object
     */
    public Observable<ContentKeyPolicyInner> getAsync(String resourceGroupName, String accountName, String contentKeyPolicyName) {
        return getWithServiceResponseAsync(resourceGroupName, accountName, contentKeyPolicyName).map(new Func1<ServiceResponse<ContentKeyPolicyInner>, ContentKeyPolicyInner>() {
            @Override
            public ContentKeyPolicyInner call(ServiceResponse<ContentKeyPolicyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a Content Key Policy.
     * Get the details of a Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentKeyPolicyInner object
     */
    public Observable<ServiceResponse<ContentKeyPolicyInner>> getWithServiceResponseAsync(String resourceGroupName, String accountName, String contentKeyPolicyName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (contentKeyPolicyName == null) {
            throw new IllegalArgumentException("Parameter contentKeyPolicyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, accountName, contentKeyPolicyName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentKeyPolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<ContentKeyPolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentKeyPolicyInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ContentKeyPolicyInner> getDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ContentKeyPolicyInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ContentKeyPolicyInner>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Create or update an Content Key Policy.
     * Create or update a Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param parameters The request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentKeyPolicyInner object if successful.
     */
    public ContentKeyPolicyInner createOrUpdate(String resourceGroupName, String accountName, String contentKeyPolicyName, ContentKeyPolicyInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, accountName, contentKeyPolicyName, parameters).toBlocking().single().body();
    }

    /**
     * Create or update an Content Key Policy.
     * Create or update a Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param parameters The request parameters
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentKeyPolicyInner> createOrUpdateAsync(String resourceGroupName, String accountName, String contentKeyPolicyName, ContentKeyPolicyInner parameters, final ServiceCallback<ContentKeyPolicyInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, accountName, contentKeyPolicyName, parameters), serviceCallback);
    }

    /**
     * Create or update an Content Key Policy.
     * Create or update a Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param parameters The request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentKeyPolicyInner object
     */
    public Observable<ContentKeyPolicyInner> createOrUpdateAsync(String resourceGroupName, String accountName, String contentKeyPolicyName, ContentKeyPolicyInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, accountName, contentKeyPolicyName, parameters).map(new Func1<ServiceResponse<ContentKeyPolicyInner>, ContentKeyPolicyInner>() {
            @Override
            public ContentKeyPolicyInner call(ServiceResponse<ContentKeyPolicyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update an Content Key Policy.
     * Create or update a Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param parameters The request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentKeyPolicyInner object
     */
    public Observable<ServiceResponse<ContentKeyPolicyInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String contentKeyPolicyName, ContentKeyPolicyInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (contentKeyPolicyName == null) {
            throw new IllegalArgumentException("Parameter contentKeyPolicyName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, accountName, contentKeyPolicyName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentKeyPolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<ContentKeyPolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentKeyPolicyInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ContentKeyPolicyInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ContentKeyPolicyInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ContentKeyPolicyInner>() { }.getType())
                .register(201, new TypeToken<ContentKeyPolicyInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Delete a Content Key Policy.
     * Deletes a Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String accountName, String contentKeyPolicyName) {
        deleteWithServiceResponseAsync(resourceGroupName, accountName, contentKeyPolicyName).toBlocking().single().body();
    }

    /**
     * Delete a Content Key Policy.
     * Deletes a Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, String contentKeyPolicyName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, accountName, contentKeyPolicyName), serviceCallback);
    }

    /**
     * Delete a Content Key Policy.
     * Deletes a Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String accountName, String contentKeyPolicyName) {
        return deleteWithServiceResponseAsync(resourceGroupName, accountName, contentKeyPolicyName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a Content Key Policy.
     * Deletes a Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String contentKeyPolicyName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (contentKeyPolicyName == null) {
            throw new IllegalArgumentException("Parameter contentKeyPolicyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, accountName, contentKeyPolicyName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Update a Content Key Policy.
     * Updates an existing Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param parameters The request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentKeyPolicyInner object if successful.
     */
    public ContentKeyPolicyInner update(String resourceGroupName, String accountName, String contentKeyPolicyName, ContentKeyPolicyInner parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName, contentKeyPolicyName, parameters).toBlocking().single().body();
    }

    /**
     * Update a Content Key Policy.
     * Updates an existing Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param parameters The request parameters
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentKeyPolicyInner> updateAsync(String resourceGroupName, String accountName, String contentKeyPolicyName, ContentKeyPolicyInner parameters, final ServiceCallback<ContentKeyPolicyInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, accountName, contentKeyPolicyName, parameters), serviceCallback);
    }

    /**
     * Update a Content Key Policy.
     * Updates an existing Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param parameters The request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentKeyPolicyInner object
     */
    public Observable<ContentKeyPolicyInner> updateAsync(String resourceGroupName, String accountName, String contentKeyPolicyName, ContentKeyPolicyInner parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName, contentKeyPolicyName, parameters).map(new Func1<ServiceResponse<ContentKeyPolicyInner>, ContentKeyPolicyInner>() {
            @Override
            public ContentKeyPolicyInner call(ServiceResponse<ContentKeyPolicyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a Content Key Policy.
     * Updates an existing Content Key Policy in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param parameters The request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentKeyPolicyInner object
     */
    public Observable<ServiceResponse<ContentKeyPolicyInner>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String contentKeyPolicyName, ContentKeyPolicyInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (contentKeyPolicyName == null) {
            throw new IllegalArgumentException("Parameter contentKeyPolicyName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(this.client.subscriptionId(), resourceGroupName, accountName, contentKeyPolicyName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentKeyPolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<ContentKeyPolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentKeyPolicyInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ContentKeyPolicyInner> updateDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ContentKeyPolicyInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ContentKeyPolicyInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Get a Content Key Policy with secrets.
     * Get a Content Key Policy including secret values.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContentKeyPolicyPropertiesInner object if successful.
     */
    public ContentKeyPolicyPropertiesInner getPolicyPropertiesWithSecrets(String resourceGroupName, String accountName, String contentKeyPolicyName) {
        return getPolicyPropertiesWithSecretsWithServiceResponseAsync(resourceGroupName, accountName, contentKeyPolicyName).toBlocking().single().body();
    }

    /**
     * Get a Content Key Policy with secrets.
     * Get a Content Key Policy including secret values.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContentKeyPolicyPropertiesInner> getPolicyPropertiesWithSecretsAsync(String resourceGroupName, String accountName, String contentKeyPolicyName, final ServiceCallback<ContentKeyPolicyPropertiesInner> serviceCallback) {
        return ServiceFuture.fromResponse(getPolicyPropertiesWithSecretsWithServiceResponseAsync(resourceGroupName, accountName, contentKeyPolicyName), serviceCallback);
    }

    /**
     * Get a Content Key Policy with secrets.
     * Get a Content Key Policy including secret values.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentKeyPolicyPropertiesInner object
     */
    public Observable<ContentKeyPolicyPropertiesInner> getPolicyPropertiesWithSecretsAsync(String resourceGroupName, String accountName, String contentKeyPolicyName) {
        return getPolicyPropertiesWithSecretsWithServiceResponseAsync(resourceGroupName, accountName, contentKeyPolicyName).map(new Func1<ServiceResponse<ContentKeyPolicyPropertiesInner>, ContentKeyPolicyPropertiesInner>() {
            @Override
            public ContentKeyPolicyPropertiesInner call(ServiceResponse<ContentKeyPolicyPropertiesInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a Content Key Policy with secrets.
     * Get a Content Key Policy including secret values.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContentKeyPolicyPropertiesInner object
     */
    public Observable<ServiceResponse<ContentKeyPolicyPropertiesInner>> getPolicyPropertiesWithSecretsWithServiceResponseAsync(String resourceGroupName, String accountName, String contentKeyPolicyName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (contentKeyPolicyName == null) {
            throw new IllegalArgumentException("Parameter contentKeyPolicyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getPolicyPropertiesWithSecrets(this.client.subscriptionId(), resourceGroupName, accountName, contentKeyPolicyName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContentKeyPolicyPropertiesInner>>>() {
                @Override
                public Observable<ServiceResponse<ContentKeyPolicyPropertiesInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContentKeyPolicyPropertiesInner> clientResponse = getPolicyPropertiesWithSecretsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ContentKeyPolicyPropertiesInner> getPolicyPropertiesWithSecretsDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ContentKeyPolicyPropertiesInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ContentKeyPolicyPropertiesInner>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * List Content Key Policies.
     * Lists the Content Key Policies in the account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ContentKeyPolicyInner&gt; object if successful.
     */
    public PagedList<ContentKeyPolicyInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ContentKeyPolicyInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ContentKeyPolicyInner>(response.body()) {
            @Override
            public Page<ContentKeyPolicyInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List Content Key Policies.
     * Lists the Content Key Policies in the account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ContentKeyPolicyInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ContentKeyPolicyInner>> serviceFuture, final ListOperationCallback<ContentKeyPolicyInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ContentKeyPolicyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ContentKeyPolicyInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List Content Key Policies.
     * Lists the Content Key Policies in the account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ContentKeyPolicyInner&gt; object
     */
    public Observable<Page<ContentKeyPolicyInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ContentKeyPolicyInner>>, Page<ContentKeyPolicyInner>>() {
                @Override
                public Page<ContentKeyPolicyInner> call(ServiceResponse<Page<ContentKeyPolicyInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List Content Key Policies.
     * Lists the Content Key Policies in the account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ContentKeyPolicyInner&gt; object
     */
    public Observable<ServiceResponse<Page<ContentKeyPolicyInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ContentKeyPolicyInner>>, Observable<ServiceResponse<Page<ContentKeyPolicyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ContentKeyPolicyInner>>> call(ServiceResponse<Page<ContentKeyPolicyInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List Content Key Policies.
     * Lists the Content Key Policies in the account.
     *
    ServiceResponse<PageImpl<ContentKeyPolicyInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ContentKeyPolicyInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ContentKeyPolicyInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ContentKeyPolicyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ContentKeyPolicyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ContentKeyPolicyInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ContentKeyPolicyInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ContentKeyPolicyInner>> listNextDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ContentKeyPolicyInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ContentKeyPolicyInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

}
