// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer.administration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;

/** Properties related to data used to train the model. */
@Immutable
public final class PersonalizerLogProperties implements JsonSerializable<PersonalizerLogProperties> {
    /*
     * Date range.
     */
    private PersonalizerLogPropertiesDateRange dateRange;

    /**
     * Creates a new instance of {@link PersonalizerLogProperties}.
     */
    public PersonalizerLogProperties() {
    }

    /**
     * Get the dateRange property: Date range.
     *
     * @return the dateRange value.
     */
    public PersonalizerDateRange getDateRange() {
        PersonalizerLogPropertiesDateRange returnValue = this.dateRange;
        return returnValue;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeEndObject();
    }

    /**
     * Deserializes an instance of {@link PersonalizerLogProperties} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link PersonalizerLogProperties}, or null if {@link JsonReader} was pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static PersonalizerLogProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PersonalizerLogProperties personalizerLogProperties = new PersonalizerLogProperties();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dateRange".equals(fieldName)) {
                    personalizerLogProperties.dateRange = PersonalizerLogPropertiesDateRange.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return personalizerLogProperties;
        });
    }
}
