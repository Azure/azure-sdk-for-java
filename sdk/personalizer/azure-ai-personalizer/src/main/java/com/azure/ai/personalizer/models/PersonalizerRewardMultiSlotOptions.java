// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.List;

/** Reward given to a list of slots. */
@Fluent
public final class PersonalizerRewardMultiSlotOptions implements JsonSerializable<PersonalizerRewardMultiSlotOptions> {
    /*
     * List of SlotRewards
     */
    private List<PersonalizerSlotReward> reward;

    /**
     * Get the reward property: List of SlotRewards.
     *
     * @return the reward value.
     */
    public List<PersonalizerSlotReward> getReward() {
        return this.reward;
    }

    /**
     * Creates a new instance of {@link PersonalizerRewardMultiSlotOptions}.
     */
    public PersonalizerRewardMultiSlotOptions() {
    }

    /**
     * Set the reward property: List of SlotRewards.
     *
     * @param reward the reward value to set.
     * @return the PersonalizerRewardMultiSlotOptions object itself.
     */
    public PersonalizerRewardMultiSlotOptions setReward(List<PersonalizerSlotReward> reward) {
        this.reward = reward;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject().writeArrayField("reward", reward, JsonWriter::writeJson).writeEndObject();
    }

    /**
     * Deserializes an instance of {@link PersonalizerRewardMultiSlotOptions} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link PersonalizerRewardMultiSlotOptions}, or null if {@link JsonReader} is pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static PersonalizerRewardMultiSlotOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PersonalizerRewardMultiSlotOptions personalizerRewardMultiSlotOptions
                = new PersonalizerRewardMultiSlotOptions();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reward".equals(fieldName)) {
                    personalizerRewardMultiSlotOptions.reward = reader.readArray(PersonalizerSlotReward::fromJson);
                } else {
                    reader.skipChildren();
                }
            }

            return personalizerRewardMultiSlotOptions;
        });
    }
}
