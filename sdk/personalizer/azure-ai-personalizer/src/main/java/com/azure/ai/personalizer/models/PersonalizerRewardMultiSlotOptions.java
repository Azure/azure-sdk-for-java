// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Reward given to a list of slots.
 */
@Fluent
public final class PersonalizerRewardMultiSlotOptions implements JsonSerializable<PersonalizerRewardMultiSlotOptions> {
    /*
     * List of SlotRewards
     */
    private List<PersonalizerSlotReward> reward;

    /**
     * Creates an instance of PersonalizerRewardMultiSlotOptions class.
     */
    public PersonalizerRewardMultiSlotOptions() {
    }

    /**
     * Get the reward property: List of SlotRewards.
     * 
     * @return the reward value.
     */
    public List<PersonalizerSlotReward> getReward() {
        return this.reward;
    }

    /**
     * Set the reward property: List of SlotRewards.
     * 
     * @param reward the reward value to set.
     * @return the PersonalizerRewardMultiSlotOptions object itself.
     */
    public PersonalizerRewardMultiSlotOptions setReward(List<PersonalizerSlotReward> reward) {
        this.reward = reward;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("reward", this.reward, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PersonalizerRewardMultiSlotOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PersonalizerRewardMultiSlotOptions if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PersonalizerRewardMultiSlotOptions.
     */
    public static PersonalizerRewardMultiSlotOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PersonalizerRewardMultiSlotOptions deserializedPersonalizerRewardMultiSlotOptions
                = new PersonalizerRewardMultiSlotOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reward".equals(fieldName)) {
                    List<PersonalizerSlotReward> reward
                        = reader.readArray(reader1 -> PersonalizerSlotReward.fromJson(reader1));
                    deserializedPersonalizerRewardMultiSlotOptions.reward = reward;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPersonalizerRewardMultiSlotOptions;
        });
    }
}
