// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;

/** Reward given to a rank response. */
@Fluent
public final class PersonalizerRewardOptions implements JsonSerializable<PersonalizerRewardOptions> {
    /*
     * Reward to be assigned to an action. Value is a float calculated by your
     * application, typically between 0 and 1, and must be between -1 and 1.
     */
    private float value;

    /**
     * Creates a new instance of {@link PersonalizerRewardOptions}.
     */
    public PersonalizerRewardOptions() {
    }

    /**
     * Get the value property: Reward to be assigned to an action. Value is a float calculated by your application,
     * typically between 0 and 1, and must be between -1 and 1.
     *
     * @return the value value.
     */
    public float getValue() {
        return this.value;
    }

    /**
     * Set the value property: Reward to be assigned to an action. Value is a float calculated by your application,
     * typically between 0 and 1, and must be between -1 and 1.
     *
     * @param value the value value to set.
     * @return the PersonalizerRewardOptions object itself.
     */
    public PersonalizerRewardOptions setValue(float value) {
        this.value = value;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeFloatField("value", value)
            .writeEndObject();
    }

    /**
     * Deserializes an instance of {@link PersonalizerRewardOptions} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link PersonalizerRewardOptions}, or null if {@link JsonReader} is pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static PersonalizerRewardOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PersonalizerRewardOptions personalizerRewardOptions = new PersonalizerRewardOptions();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    personalizerRewardOptions.value = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return personalizerRewardOptions;
        });
    }
}
