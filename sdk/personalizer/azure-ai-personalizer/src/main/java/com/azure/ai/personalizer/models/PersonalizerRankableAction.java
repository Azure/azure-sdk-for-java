// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.List;

/** An action with its associated features used for ranking. */
@Fluent
public final class PersonalizerRankableAction implements JsonSerializable<PersonalizerRankableAction> {
    /*
     * Id of the action.
     */
    private String id;

    /*
     * List of dictionaries containing features.
     */
    private List<BinaryData> features;

    /**
     * Creates a new instance of {@link PersonalizerRankableAction}.
     */
    public PersonalizerRankableAction() {
    }

    /**
     * Get the id property: Id of the action.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: Id of the action.
     *
     * @param id the id value to set.
     * @return the PersonalizerRankableAction object itself.
     */
    public PersonalizerRankableAction setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the features property: List of dictionaries containing features.
     *
     * @return the features value.
     */
    public List<BinaryData> getFeatures() {
        return this.features;
    }

    /**
     * Set the features property: List of dictionaries containing features.
     *
     * @param features the features value to set.
     * @return the PersonalizerRankableAction object itself.
     */
    public PersonalizerRankableAction setFeatures(List<BinaryData> features) {
        this.features = features;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeStringField("id", id)
            .writeArrayField("features", features, (writer, data) -> writer.writeRawValue(data.toString()))
            .writeEndObject();
    }

    /**
     * Deserializes an instance of {@link PersonalizerRankableAction} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link PersonalizerRankableAction}, or null if {@link JsonReader} is pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static PersonalizerRankableAction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PersonalizerRankableAction personalizerRankableAction = new PersonalizerRankableAction();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    personalizerRankableAction.id = reader.getString();
                } else if ("features".equals(fieldName)) {
                    personalizerRankableAction.features = reader.readArray(
                        read -> BinaryData.fromObject(read.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }

            return personalizerRankableAction;
        });
    }
}
