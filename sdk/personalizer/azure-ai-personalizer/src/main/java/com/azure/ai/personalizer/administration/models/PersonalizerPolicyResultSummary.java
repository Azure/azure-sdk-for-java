// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer.administration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.time.Duration;
import java.time.OffsetDateTime;

/** This class contains the summary of evaluating a policy on a counterfactual evaluation. */
@Fluent
public class PersonalizerPolicyResultSummary implements JsonSerializable<PersonalizerPolicyResultSummary> {
    /*
     * Timestamp of the aggregation.
     */
    OffsetDateTime timeStamp;

    /*
     * Numerator for IPS estimator.
     */
    Float ipsEstimatorNumerator;

    /*
     * Denominator for IPS estimator.
     */
    Float ipsEstimatorDenominator;

    /*
     * Denominator for SNIPS estimator.
     */
    Float snipsEstimatorDenominator;

    /*
     * Time window for aggregation.
     * For example, PT5M (5 mins). For information about the time format,
     * see http://en.wikipedia.org/wiki/ISO_8601#Durations
     */
    Duration aggregateTimeWindow;

    /*
     * Probability of non-zero values for the Policy evaluation.
     */
    Float nonZeroProbability;

    /*
     * Sum of Squares for the Policy evaluation results.
     */
    Float sumOfSquares;

    /*
     * Gaussian confidence interval for the Policy evaluation.
     */
    Float confidenceInterval;

    /*
     * Average reward.
     */
    Float averageReward;

    /**
     * Creates a new instance of {@link PersonalizerPolicyResultSummary}.
     */
    public PersonalizerPolicyResultSummary() {
    }

    /**
     * Get the timeStamp property: Timestamp of the aggregation.
     *
     * @return the timeStamp value.
     */
    public OffsetDateTime getTimeStamp() {
        return this.timeStamp;
    }

    /**
     * Get the ipsEstimatorNumerator property: Numerator for IPS estimator.
     *
     * @return the ipsEstimatorNumerator value.
     */
    public Float getIpsEstimatorNumerator() {
        return this.ipsEstimatorNumerator;
    }

    /**
     * Get the ipsEstimatorDenominator property: Denominator for IPS estimator.
     *
     * @return the ipsEstimatorDenominator value.
     */
    public Float getIpsEstimatorDenominator() {
        return this.ipsEstimatorDenominator;
    }

    /**
     * Get the snipsEstimatorDenominator property: Denominator for SNIPS estimator.
     *
     * @return the snipsEstimatorDenominator value.
     */
    public Float getSnipsEstimatorDenominator() {
        return this.snipsEstimatorDenominator;
    }

    /**
     * Get the aggregateTimeWindow property: Time window for aggregation. For example, PT5M (5 mins). For information
     * about the time format, see http://en.wikipedia.org/wiki/ISO_8601#Durations.
     *
     * @return the aggregateTimeWindow value.
     */
    public Duration getAggregateTimeWindow() {
        return this.aggregateTimeWindow;
    }

    /**
     * Get the nonZeroProbability property: Probability of non-zero values for the Policy evaluation.
     *
     * @return the nonZeroProbability value.
     */
    public Float getNonZeroProbability() {
        return this.nonZeroProbability;
    }

    /**
     * Set the nonZeroProbability property: Probability of non-zero values for the Policy evaluation.
     *
     * @param nonZeroProbability the nonZeroProbability value to set.
     * @return the PersonalizerPolicyResultSummary object itself.
     */
    PersonalizerPolicyResultSummary setNonZeroProbability(Float nonZeroProbability) {
        this.nonZeroProbability = nonZeroProbability;
        return this;
    }

    /**
     * Get the sumOfSquares property: Sum of Squares for the Policy evaluation results.
     *
     * @return the sumOfSquares value.
     */
    public Float getSumOfSquares() {
        return this.sumOfSquares;
    }

    /**
     * Get the confidenceInterval property: Gaussian confidence interval for the Policy evaluation.
     *
     * @return the confidenceInterval value.
     */
    public Float getConfidenceInterval() {
        return this.confidenceInterval;
    }

    /**
     * Get the averageReward property: Average reward.
     *
     * @return the averageReward value.
     */
    public Float getAverageReward() {
        return this.averageReward;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeNumberField("nonZeroProbability", nonZeroProbability)
            .writeEndObject();
    }

    /**
     * Deserializes an instance of {@link PersonalizerPolicyResultSummary} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link PersonalizerPolicyResultSummary}, or null if {@link JsonReader} was pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static PersonalizerPolicyResultSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PersonalizerPolicyResultSummary personalizerPolicyResultSummary = new PersonalizerPolicyResultSummary();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timeStamp".equals(fieldName)) {
                    personalizerPolicyResultSummary.timeStamp = CoreUtils.parseBestOffsetDateTime(reader.getString());
                } else if ("ipsEstimatorNumerator".equals(fieldName)) {
                    personalizerPolicyResultSummary.ipsEstimatorNumerator = reader.getNullable(JsonReader::getFloat);
                } else if ("ipsEstimatorDenominator".equals(fieldName)) {
                    personalizerPolicyResultSummary.ipsEstimatorDenominator = reader.getNullable(JsonReader::getFloat);
                } else if ("snipsEstimatorDenominator".equals(fieldName)) {
                    personalizerPolicyResultSummary.snipsEstimatorDenominator = reader.getNullable(
                        JsonReader::getFloat);
                } else if ("aggregateTimeWindow".equals(fieldName)) {
                    personalizerPolicyResultSummary.aggregateTimeWindow = reader.getNullable(
                        nonNull -> Duration.parse(nonNull.getString()));
                } else if ("nonZeroProbability".equals(fieldName)) {
                    personalizerPolicyResultSummary.nonZeroProbability = reader.getNullable(JsonReader::getFloat);
                } else if ("sumOfSquares".equals(fieldName)) {
                    personalizerPolicyResultSummary.sumOfSquares = reader.getNullable(JsonReader::getFloat);
                } else if ("confidenceInterval".equals(fieldName)) {
                    personalizerPolicyResultSummary.confidenceInterval = reader.getNullable(JsonReader::getFloat);
                } else if ("averageReward".equals(fieldName)) {
                    personalizerPolicyResultSummary.averageReward = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return personalizerPolicyResultSummary;
        });
    }
}
