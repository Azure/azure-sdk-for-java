// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.List;

/** A slot with it's associated features and list of excluded actions. */
@Fluent
public final class PersonalizerSlotOptions implements JsonSerializable<PersonalizerSlotOptions> {
    /*
     * Slot ID
     */
    private String id;

    /*
     * List of dictionaries containing slot features.
     */
    private List<BinaryData> features;

    /*
     * List of excluded action Ids.
     */
    private List<String> excludedActions;

    /*
     * The 'baseline action' ID for the slot.
     * The BaselineAction is the Id of the Action your application would use in
     * that slot if Personalizer didn't exist.
     * BaselineAction must be defined for every slot.
     * BaselineAction should never be part of ExcludedActions.
     * Each slot must have a unique BaselineAction which corresponds to an an
     * action from the event's Actions list.
     */
    private String baselineAction;

    /**
     * Creates a new instance {@link PersonalizerSlotOptions}.
     */
    public PersonalizerSlotOptions() {
    }

    /**
     * Get the id property: Slot ID.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: Slot ID.
     *
     * @param id the id value to set.
     * @return the PersonalizerSlotOptions object itself.
     */
    public PersonalizerSlotOptions setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the features property: List of dictionaries containing slot features.
     *
     * @return the features value.
     */
    public List<BinaryData> getFeatures() {
        return this.features;
    }

    /**
     * Set the features property: List of dictionaries containing slot features.
     *
     * @param features the features value to set.
     * @return the PersonalizerSlotOptions object itself.
     */
    public PersonalizerSlotOptions setFeatures(List<BinaryData> features) {
        this.features = features;
        return this;
    }

    /**
     * Get the excludedActions property: List of excluded action Ids.
     *
     * @return the excludedActions value.
     */
    public List<String> getExcludedActions() {
        return this.excludedActions;
    }

    /**
     * Set the excludedActions property: List of excluded action Ids.
     *
     * @param excludedActions the excludedActions value to set.
     * @return the PersonalizerSlotOptions object itself.
     */
    public PersonalizerSlotOptions setExcludedActions(List<String> excludedActions) {
        this.excludedActions = excludedActions;
        return this;
    }

    /**
     * Get the baselineAction property: The 'baseline action' ID for the slot. The BaselineAction is the Id of the
     * Action your application would use in that slot if Personalizer didn't exist. BaselineAction must be defined for
     * every slot. BaselineAction should never be part of ExcludedActions. Each slot must have a unique BaselineAction
     * which corresponds to an an action from the event's Actions list.
     *
     * @return the baselineAction value.
     */
    public String getBaselineAction() {
        return this.baselineAction;
    }

    /**
     * Set the baselineAction property: The 'baseline action' ID for the slot. The BaselineAction is the Id of the
     * Action your application would use in that slot if Personalizer didn't exist. BaselineAction must be defined for
     * every slot. BaselineAction should never be part of ExcludedActions. Each slot must have a unique BaselineAction
     * which corresponds to an an action from the event's Actions list.
     *
     * @param baselineAction the baselineAction value to set.
     * @return the PersonalizerSlotOptions object itself.
     */
    public PersonalizerSlotOptions setBaselineAction(String baselineAction) {
        this.baselineAction = baselineAction;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeStringField("id", id)
            .writeArrayField("features", features, (writer, data) -> writer.writeRawValue(data.toString()))
            .writeArrayField("excludedActions", excludedActions, JsonWriter::writeString)
            .writeStringField("baselineAction", baselineAction)
            .writeEndObject();
    }

    /**
     * Deserializes an instance of {@link PersonalizerSlotOptions} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link PersonalizerSlotOptions}, or null if {@link JsonReader} is pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static PersonalizerSlotOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PersonalizerSlotOptions personalizerSlotOptions = new PersonalizerSlotOptions();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    personalizerSlotOptions.id = reader.getString();
                } else if ("features".equals(fieldName)) {
                    personalizerSlotOptions.features = reader.readArray(
                        read -> BinaryData.fromObject(read.readUntyped()));
                } else if ("excludedActions".equals(fieldName)) {
                    personalizerSlotOptions.excludedActions = reader.readArray(JsonReader::getString);
                } else if ("baselineAction".equals(fieldName)) {
                    personalizerSlotOptions.baselineAction = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return personalizerSlotOptions;
        });
    }
}
