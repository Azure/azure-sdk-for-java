// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.List;

/** The PersonalizerRankMultiSlotResult model. */
@Immutable
public final class PersonalizerRankMultiSlotResult implements JsonSerializable<PersonalizerRankMultiSlotResult> {
    /*
     * Each slot has a corresponding rewardActionID which is the action ID
     * recommended by Personalizer.
     */
    private List<PersonalizerSlotResult> slots;

    /*
     * The eventId for the round trip from request to response.
     */
    private String eventId;

    /**
     * Creates a new instance of {@link PersonalizerRankMultiSlotResult}.
     */
    public PersonalizerRankMultiSlotResult() {
    }

    /**
     * Get the slots property: Each slot has a corresponding rewardActionID which is the action ID recommended by
     * Personalizer.
     *
     * @return the slots value.
     */
    public List<PersonalizerSlotResult> getSlots() {
        return this.slots;
    }

    /**
     * Get the eventId property: The eventId for the round trip from request to response.
     *
     * @return the eventId value.
     */
    public String getEventId() {
        return this.eventId;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeEndObject();
    }

    /**
     * Deserializes an instance of {@link PersonalizerRankMultiSlotResult} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link PersonalizerRankMultiSlotResult}, or null if {@link JsonReader} is pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static PersonalizerRankMultiSlotResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PersonalizerRankMultiSlotResult personalizerRankMultiSlotResult = new PersonalizerRankMultiSlotResult();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("slots".equals(fieldName)) {
                    personalizerRankMultiSlotResult.slots = reader.readArray(PersonalizerSlotResult::fromJson);
                } else if ("eventId".equals(fieldName)) {
                    personalizerRankMultiSlotResult.eventId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return personalizerRankMultiSlotResult;
        });
    }
}
