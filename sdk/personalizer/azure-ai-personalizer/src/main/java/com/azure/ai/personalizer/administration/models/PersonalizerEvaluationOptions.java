// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer.administration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * A counterfactual evaluation.
 */
@Fluent
public final class PersonalizerEvaluationOptions implements JsonSerializable<PersonalizerEvaluationOptions> {
    /*
     * True if the evaluation should explore for a more optimal learning settings.
     */
    private Boolean offlineExperimentationEnabled;

    /*
     * The name of the evaluation.
     */
    private String name;

    /*
     * The start time of the evaluation.
     */
    private OffsetDateTime startTime;

    /*
     * The end time of the evaluation.
     */
    private OffsetDateTime endTime;

    /*
     * Additional learning settings to evaluate.
     */
    private List<PersonalizerPolicy> policies;

    /**
     * Creates an instance of PersonalizerEvaluationOptions class.
     */
    public PersonalizerEvaluationOptions() {
    }

    /**
     * Get the offlineExperimentationEnabled property: True if the evaluation should explore for a more optimal learning
     * settings.
     * 
     * @return the offlineExperimentationEnabled value.
     */
    public Boolean isOfflineExperimentationEnabled() {
        return this.offlineExperimentationEnabled;
    }

    /**
     * Set the offlineExperimentationEnabled property: True if the evaluation should explore for a more optimal learning
     * settings.
     * 
     * @param offlineExperimentationEnabled the offlineExperimentationEnabled value to set.
     * @return the PersonalizerEvaluationOptions object itself.
     */
    public PersonalizerEvaluationOptions setOfflineExperimentationEnabled(Boolean offlineExperimentationEnabled) {
        this.offlineExperimentationEnabled = offlineExperimentationEnabled;
        return this;
    }

    /**
     * Get the name property: The name of the evaluation.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name of the evaluation.
     * 
     * @param name the name value to set.
     * @return the PersonalizerEvaluationOptions object itself.
     */
    public PersonalizerEvaluationOptions setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the startTime property: The start time of the evaluation.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time of the evaluation.
     * 
     * @param startTime the startTime value to set.
     * @return the PersonalizerEvaluationOptions object itself.
     */
    public PersonalizerEvaluationOptions setStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The end time of the evaluation.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end time of the evaluation.
     * 
     * @param endTime the endTime value to set.
     * @return the PersonalizerEvaluationOptions object itself.
     */
    public PersonalizerEvaluationOptions setEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the policies property: Additional learning settings to evaluate.
     * 
     * @return the policies value.
     */
    public List<PersonalizerPolicy> getPolicies() {
        return this.policies;
    }

    /**
     * Set the policies property: Additional learning settings to evaluate.
     * 
     * @param policies the policies value to set.
     * @return the PersonalizerEvaluationOptions object itself.
     */
    public PersonalizerEvaluationOptions setPolicies(List<PersonalizerPolicy> policies) {
        this.policies = policies;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeArrayField("policies", this.policies, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("enableOfflineExperimentation", this.offlineExperimentationEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PersonalizerEvaluationOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PersonalizerEvaluationOptions if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PersonalizerEvaluationOptions.
     */
    public static PersonalizerEvaluationOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PersonalizerEvaluationOptions deserializedPersonalizerEvaluationOptions
                = new PersonalizerEvaluationOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedPersonalizerEvaluationOptions.name = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedPersonalizerEvaluationOptions.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedPersonalizerEvaluationOptions.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("policies".equals(fieldName)) {
                    List<PersonalizerPolicy> policies
                        = reader.readArray(reader1 -> PersonalizerPolicy.fromJson(reader1));
                    deserializedPersonalizerEvaluationOptions.policies = policies;
                } else if ("enableOfflineExperimentation".equals(fieldName)) {
                    deserializedPersonalizerEvaluationOptions.offlineExperimentationEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPersonalizerEvaluationOptions;
        });
    }
}
