// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer.administration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;

/** A counterfactual evaluation. */
@Fluent
public final class PersonalizerEvaluationOptions implements JsonSerializable<PersonalizerEvaluationOptions> {
    /*
     * True if the evaluation should explore for a more optimal learning
     * settings.
     */
    private Boolean enableOfflineExperimentation;

    /*
     * The name of the evaluation.
     */
    private String name;

    /*
     * The start time of the evaluation.
     */
    private OffsetDateTime startTime;

    /*
     * The end time of the evaluation.
     */
    private OffsetDateTime endTime;

    /*
     * Additional learning settings to evaluate.
     */
    private List<PersonalizerPolicy> policies;

    /**
     * Creates a new instance of {@link PersonalizerEvaluationOptions}.
     */
    public PersonalizerEvaluationOptions() {
    }

    /**
     * Get the enableOfflineExperimentation property: True if the evaluation should explore for a more optimal learning
     * settings.
     *
     * @return the enableOfflineExperimentation value.
     */
    public Boolean isOfflineExperimentationEnabled() {
        return this.enableOfflineExperimentation;
    }

    /**
     * Set the enableOfflineExperimentation property: True if the evaluation should explore for a more optimal learning
     * settings.
     *
     * @param enableOfflineExperimentation the enableOfflineExperimentation value to set.
     * @return the PersonalizerEvaluationOptions object itself.
     */
    public PersonalizerEvaluationOptions setOfflineExperimentationEnabled(Boolean enableOfflineExperimentation) {
        this.enableOfflineExperimentation = enableOfflineExperimentation;
        return this;
    }

    /**
     * Get the name property: The name of the evaluation.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name of the evaluation.
     *
     * @param name the name value to set.
     * @return the PersonalizerEvaluationOptions object itself.
     */
    public PersonalizerEvaluationOptions setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the startTime property: The start time of the evaluation.
     *
     * @return the startTime value.
     */
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time of the evaluation.
     *
     * @param startTime the startTime value to set.
     * @return the PersonalizerEvaluationOptions object itself.
     */
    public PersonalizerEvaluationOptions setStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The end time of the evaluation.
     *
     * @return the endTime value.
     */
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end time of the evaluation.
     *
     * @param endTime the endTime value to set.
     * @return the PersonalizerEvaluationOptions object itself.
     */
    public PersonalizerEvaluationOptions setEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the policies property: Additional learning settings to evaluate.
     *
     * @return the policies value.
     */
    public List<PersonalizerPolicy> getPolicies() {
        return this.policies;
    }

    /**
     * Set the policies property: Additional learning settings to evaluate.
     *
     * @param policies the policies value to set.
     * @return the PersonalizerEvaluationOptions object itself.
     */
    public PersonalizerEvaluationOptions setPolicies(List<PersonalizerPolicy> policies) {
        this.policies = policies;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeBooleanField("enableOfflineExperimentation", enableOfflineExperimentation)
            .writeStringField("name", name)
            .writeStringField("startTime", Objects.toString(startTime, null))
            .writeStringField("endTime", Objects.toString(endTime, null))
            .writeArrayField("policies", policies, JsonWriter::writeJson)
            .writeEndObject();
    }

    /**
     * Deserializes an instance of {@link PersonalizerEvaluationOptions} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link PersonalizerEvaluationOptions}, or null if {@link JsonReader} was pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static PersonalizerEvaluationOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PersonalizerEvaluationOptions personalizerEvaluationOptions = new PersonalizerEvaluationOptions();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableOfflineExperimentation".equals(fieldName)) {
                    personalizerEvaluationOptions.enableOfflineExperimentation
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("name".equals(fieldName)) {
                    personalizerEvaluationOptions.name = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    personalizerEvaluationOptions.startTime = CoreUtils.parseBestOffsetDateTime(reader.getString());
                } else if ("endTime".equals(fieldName)) {
                    personalizerEvaluationOptions.endTime = CoreUtils.parseBestOffsetDateTime(reader.getString());
                } else if ("policies".equals(fieldName)) {
                    personalizerEvaluationOptions.policies = reader.readArray(PersonalizerPolicy::fromJson);
                } else {
                    reader.skipChildren();
                }
            }

            return personalizerEvaluationOptions;
        });
    }
}
