// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer.administration.models;

import com.azure.ai.personalizer.models.EvaluationJobStatus;
import com.azure.ai.personalizer.models.EvaluationType;
import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;

/** A counterfactual evaluation. */
@Fluent
public final class PersonalizerEvaluation implements JsonSerializable<PersonalizerEvaluation> {
    /*
     * The ID of the evaluation.
     */
    private String id;

    /*
     * The name of the evaluation.
     */
    private String name;

    /*
     * The start time of the evaluation.
     */
    private OffsetDateTime startTime;

    /*
     * The end time of the evaluation.
     */
    private OffsetDateTime endTime;

    /*
     * The ID of the job processing the evaluation.
     */
    private String jobId;

    /*
     * The status of the job processing the evaluation.
     */
    private EvaluationJobStatus status;

    /*
     * The results of the evaluation.
     */
    private List<PersonalizerPolicyResult> policyResults;

    /*
     * Feature Importance.
     */
    private List<List<String>> featureImportance;

    /*
     * Evaluation type (manual or through Automatic Optimization).
     */
    private EvaluationType evaluationType;

    /*
     * Thr optimal policy.
     */
    private String optimalPolicy;

    /*
     * Creation time.
     */
    private OffsetDateTime creationTime;

    /**
     * Creates a new instance of {@link PersonalizerEvaluation}.
     */
    public PersonalizerEvaluation() {
    }

    /**
     * Get the id property: The ID of the evaluation.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: The name of the evaluation.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Get the startTime property: The start time of the evaluation.
     *
     * @return the startTime value.
     */
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: The end time of the evaluation.
     *
     * @return the endTime value.
     */
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Get the jobId property: The ID of the job processing the evaluation.
     *
     * @return the jobId value.
     */
    String getJobId() {
        return this.jobId;
    }

    /**
     * Get the status property: The status of the job processing the evaluation.
     *
     * @return the status value.
     */
    public EvaluationJobStatus getStatus() {
        return this.status;
    }

    /**
     * Get the policyResults property: The results of the evaluation.
     *
     * @return the policyResults value.
     */
    public List<PersonalizerPolicyResult> getPolicyResults() {
        return this.policyResults;
    }

    /**
     * Set the policyResults property: The results of the evaluation.
     *
     * @param policyResults the policyResults value to set.
     * @return the PersonalizerEvaluation object itself.
     */
    PersonalizerEvaluation setPolicyResults(List<PersonalizerPolicyResult> policyResults) {
        this.policyResults = policyResults;
        return this;
    }

    /**
     * Get the featureImportance property: Feature Importance.
     *
     * @return the featureImportance value.
     */
    public List<List<String>> getFeatureImportance() {
        return this.featureImportance;
    }

    /**
     * Set the featureImportance property: Feature Importance.
     *
     * @param featureImportance the featureImportance value to set.
     * @return the PersonalizerEvaluation object itself.
     */
    PersonalizerEvaluation setFeatureImportance(List<List<String>> featureImportance) {
        this.featureImportance = featureImportance;
        return this;
    }

    /**
     * Get the evaluationType property: Evaluation type (manual or through Automatic Optimization).
     *
     * @return the evaluationType value.
     */
    public EvaluationType getEvaluationType() {
        return this.evaluationType;
    }

    /**
     * Set the evaluationType property: Evaluation type (manual or through Automatic Optimization).
     *
     * @param evaluationType the evaluationType value to set.
     * @return the PersonalizerEvaluation object itself.
     */
    PersonalizerEvaluation setEvaluationType(EvaluationType evaluationType) {
        this.evaluationType = evaluationType;
        return this;
    }

    /**
     * Get the optimalPolicy property: Thr optimal policy.
     *
     * @return the optimalPolicy value.
     */
    public String getOptimalPolicy() {
        return this.optimalPolicy;
    }

    /**
     * Set the optimalPolicy property: Thr optimal policy.
     *
     * @param optimalPolicy the optimalPolicy value to set.
     * @return the PersonalizerEvaluation object itself.
     */
    PersonalizerEvaluation setOptimalPolicy(String optimalPolicy) {
        this.optimalPolicy = optimalPolicy;
        return this;
    }

    /**
     * Get the creationTime property: Creation time.
     *
     * @return the creationTime value.
     */
    public OffsetDateTime getCreationTime() {
        return this.creationTime;
    }

    /**
     * Set the creationTime property: Creation time.
     *
     * @param creationTime the creationTime value to set.
     * @return the PersonalizerEvaluation object itself.
     */
    PersonalizerEvaluation setCreationTime(OffsetDateTime creationTime) {
        this.creationTime = creationTime;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeArrayField("policyResults", policyResults, JsonWriter::writeJson)
            .writeArrayField("featureImportance", featureImportance,
                (writer, array) -> writer.writeArray(array, JsonWriter::writeString))
            .writeStringField("evaluationType", Objects.toString(evaluationType, null))
            .writeStringField("optimalPolicy", optimalPolicy)
            .writeStringField("creationTime", Objects.toString(creationTime, null))
            .writeEndObject();
    }

    /**
     * Deserializes an instance of {@link PersonalizerEvaluation} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link PersonalizerEvaluation}, or null if {@link JsonReader} was pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static PersonalizerEvaluation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PersonalizerEvaluation personalizerEvaluation = new PersonalizerEvaluation();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    personalizerEvaluation.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    personalizerEvaluation.name = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    personalizerEvaluation.startTime = CoreUtils.parseBestOffsetDateTime(reader.getString());
                } else if ("endTime".equals(fieldName)) {
                    personalizerEvaluation.endTime = CoreUtils.parseBestOffsetDateTime(reader.getString());
                } else if ("jobId".equals(fieldName)) {
                    personalizerEvaluation.jobId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    personalizerEvaluation.status = EvaluationJobStatus.fromString(reader.getString());
                } else if ("policyResults".equals(fieldName)) {
                    personalizerEvaluation.policyResults = reader.readArray(PersonalizerPolicyResult::fromJson);
                } else if ("featureImportance".equals(fieldName)) {
                    personalizerEvaluation.featureImportance = reader.readArray(arrayReader ->
                        arrayReader.readArray(JsonReader::getString));
                } else if ("evaluationType".equals(fieldName)) {
                    personalizerEvaluation.evaluationType = EvaluationType.fromString(reader.getString());
                } else if ("optimalPolicy".equals(fieldName)) {
                    personalizerEvaluation.optimalPolicy = reader.getString();
                } else if ("creationTime".equals(fieldName)) {
                    personalizerEvaluation.creationTime = CoreUtils.parseBestOffsetDateTime(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return personalizerEvaluation;
        });
    }
}
