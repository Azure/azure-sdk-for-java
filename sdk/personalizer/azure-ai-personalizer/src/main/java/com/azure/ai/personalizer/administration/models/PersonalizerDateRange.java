// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer.administration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;

/** A date range starting at From and ending at To. */
@Immutable
public class PersonalizerDateRange implements JsonSerializable<PersonalizerDateRange> {
    /*
     * Start date for the range.
     */
    OffsetDateTime from;

    /*
     * End date for the range.
     */
    OffsetDateTime to;

    /**
     * Creates a new instance of {@link PersonalizerDateRange}.
     */
    public PersonalizerDateRange() {
    }

    /**
     * Get the from property: Start date for the range.
     *
     * @return the from value.
     */
    public OffsetDateTime getFrom() {
        return this.from;
    }

    /**
     * Get the to property: End date for the range.
     *
     * @return the to value.
     */
    public OffsetDateTime getTo() {
        return this.to;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeEndObject();
    }

    /**
     * Deserializes an instance of {@link PersonalizerDateRange} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link PersonalizerDateRange}, or null if {@link JsonReader} was pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static PersonalizerDateRange fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PersonalizerDateRange personalizerDateRange = new PersonalizerDateRange();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("from".equals(fieldName)) {
                    personalizerDateRange.from = CoreUtils.parseBestOffsetDateTime(reader.getString());
                } else if ("to".equals(fieldName)) {
                    personalizerDateRange.to = CoreUtils.parseBestOffsetDateTime(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return personalizerDateRange;
        });
    }
}
