// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.resourcemanager.hybridnetwork.models.ArmResourceDefinitionResourceElementTemplate;
import com.azure.resourcemanager.hybridnetwork.models.ArmResourceDefinitionResourceElementTemplateDetails;
import com.azure.resourcemanager.hybridnetwork.models.DependsOnProfile;
import com.azure.resourcemanager.hybridnetwork.models.NetworkServiceDesignVersionPropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.NsdArtifactProfile;
import com.azure.resourcemanager.hybridnetwork.models.ReferencedResource;
import com.azure.resourcemanager.hybridnetwork.models.TemplateType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for NetworkServiceDesignVersions CreateOrUpdate.
 */
public final class NetworkServiceDesignVersionsCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2023-09-01/examples/
     * NetworkServiceDesignVersionCreate.json
     */
    /**
     * Sample code: Create or update a network service design version resource.
     * 
     * @param manager Entry point to HybridNetworkManager.
     */
    public static void createOrUpdateANetworkServiceDesignVersionResource(
        com.azure.resourcemanager.hybridnetwork.HybridNetworkManager manager) {
        manager.networkServiceDesignVersions().define("1.0.0").withRegion("eastus")
            .withExistingNetworkServiceDesignGroup("rg", "TestPublisher", "TestNetworkServiceDesignGroupName")
            .withProperties(new NetworkServiceDesignVersionPropertiesFormat()
                .withConfigurationGroupSchemaReferences(mapOf("MyVM_Configuration", new ReferencedResource().withId(
                    "/subscriptions/subid/resourcegroups/contosorg1/providers/microsoft.hybridnetwork/publishers/contosoGroup/networkServiceDesignGroups/NSD_contoso/configurationGroupSchemas/MyVM_Configuration_Schema")))
                .withResourceElementTemplates(Arrays.asList(new ArmResourceDefinitionResourceElementTemplateDetails()
                    .withName("MyVM").withDependsOnProfile(new DependsOnProfile().withInstallDependsOn(Arrays.asList()))
                    .withConfiguration(new ArmResourceDefinitionResourceElementTemplate()
                        .withTemplateType(TemplateType.ARM_TEMPLATE)
                        .withParameterValues(
                            "{\"publisherName\":\"{configurationparameters('MyVM_Configuration').publisherName}\",\"skuGroupName\":\"{configurationparameters('MyVM_Configuration').skuGroupName}\",\"skuVersion\":\"{configurationparameters('MyVM_Configuration').skuVersion}\",\"skuOfferingLocation\":\"{configurationparameters('MyVM_Configuration').skuOfferingLocation}\",\"nfviType\":\"{nfvis().nfvisFromSitePerNfviType.AzureCore.nfviAlias1.nfviType}\",\"nfviId\":\"{nfvis().nfvisFromSitePerNfviType.AzureCore.nfviAlias1.nfviId}\",\"allowSoftwareUpdates\":\"{configurationparameters('MyVM_Configuration').allowSoftwareUpdates}\",\"virtualNetworkName\":\"{configurationparameters('MyVM_Configuration').vnetName}\",\"subnetName\":\"{configurationparameters('MyVM_Configuration').subnetName}\",\"subnetAddressPrefix\":\"{configurationparameters('MyVM_Configuration').subnetAddressPrefix}\",\"managedResourceGroup\":\"{configurationparameters('SNSSelf').managedResourceGroupName}\",\"adminPassword\":\"{secretparameters('MyVM_Configuration').adminPassword}\"}")
                        .withArtifactProfile(new NsdArtifactProfile()
                            .withArtifactStoreReference(new ReferencedResource().withId(
                                "/subscriptions/subid/providers/Microsoft.HybridNetwork/publishers/contosoGroup/artifactStoreReference/store1"))
                            .withArtifactName("MyVMArmTemplate").withArtifactVersion("1.0.0"))))))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
