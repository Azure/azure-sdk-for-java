// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridnetwork.fluent.NetworkServiceDesignVersionsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.models.NetworkServiceDesignVersionInner;
import com.azure.resourcemanager.hybridnetwork.fluent.models.NetworkServiceDesignVersionUpdateStateInner;
import com.azure.resourcemanager.hybridnetwork.models.NetworkServiceDesignVersion;
import com.azure.resourcemanager.hybridnetwork.models.NetworkServiceDesignVersionUpdateState;
import com.azure.resourcemanager.hybridnetwork.models.NetworkServiceDesignVersions;

public final class NetworkServiceDesignVersionsImpl implements NetworkServiceDesignVersions {
    private static final ClientLogger LOGGER = new ClientLogger(NetworkServiceDesignVersionsImpl.class);

    private final NetworkServiceDesignVersionsClient innerClient;

    private final com.azure.resourcemanager.hybridnetwork.HybridNetworkManager serviceManager;

    public NetworkServiceDesignVersionsImpl(NetworkServiceDesignVersionsClient innerClient,
        com.azure.resourcemanager.hybridnetwork.HybridNetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String publisherName, String networkServiceDesignGroupName,
        String networkServiceDesignVersionName) {
        this.serviceClient().delete(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName);
    }

    public void delete(String resourceGroupName, String publisherName, String networkServiceDesignGroupName,
        String networkServiceDesignVersionName, Context context) {
        this.serviceClient().delete(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, context);
    }

    public Response<NetworkServiceDesignVersion> getWithResponse(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName, Context context) {
        Response<NetworkServiceDesignVersionInner> inner = this.serviceClient().getWithResponse(resourceGroupName,
            publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new NetworkServiceDesignVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NetworkServiceDesignVersion get(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName) {
        NetworkServiceDesignVersionInner inner = this.serviceClient().get(resourceGroupName, publisherName,
            networkServiceDesignGroupName, networkServiceDesignVersionName);
        if (inner != null) {
            return new NetworkServiceDesignVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<NetworkServiceDesignVersion> listByNetworkServiceDesignGroup(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName) {
        PagedIterable<NetworkServiceDesignVersionInner> inner = this.serviceClient()
            .listByNetworkServiceDesignGroup(resourceGroupName, publisherName, networkServiceDesignGroupName);
        return Utils.mapPage(inner, inner1 -> new NetworkServiceDesignVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkServiceDesignVersion> listByNetworkServiceDesignGroup(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName, Context context) {
        PagedIterable<NetworkServiceDesignVersionInner> inner = this.serviceClient()
            .listByNetworkServiceDesignGroup(resourceGroupName, publisherName, networkServiceDesignGroupName, context);
        return Utils.mapPage(inner, inner1 -> new NetworkServiceDesignVersionImpl(inner1, this.manager()));
    }

    public NetworkServiceDesignVersionUpdateState updateState(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        NetworkServiceDesignVersionUpdateStateInner parameters) {
        NetworkServiceDesignVersionUpdateStateInner inner = this.serviceClient().updateState(resourceGroupName,
            publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName, parameters);
        if (inner != null) {
            return new NetworkServiceDesignVersionUpdateStateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public NetworkServiceDesignVersionUpdateState updateState(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        NetworkServiceDesignVersionUpdateStateInner parameters, Context context) {
        NetworkServiceDesignVersionUpdateStateInner inner = this.serviceClient().updateState(resourceGroupName,
            publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName, parameters, context);
        if (inner != null) {
            return new NetworkServiceDesignVersionUpdateStateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public NetworkServiceDesignVersion getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String publisherName = Utils.getValueFromIdByName(id, "publishers");
        if (publisherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publishers'.", id)));
        }
        String networkServiceDesignGroupName = Utils.getValueFromIdByName(id, "networkServiceDesignGroups");
        if (networkServiceDesignGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkServiceDesignGroups'.", id)));
        }
        String networkServiceDesignVersionName = Utils.getValueFromIdByName(id, "networkServiceDesignVersions");
        if (networkServiceDesignVersionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'networkServiceDesignVersions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, Context.NONE).getValue();
    }

    public Response<NetworkServiceDesignVersion> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String publisherName = Utils.getValueFromIdByName(id, "publishers");
        if (publisherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publishers'.", id)));
        }
        String networkServiceDesignGroupName = Utils.getValueFromIdByName(id, "networkServiceDesignGroups");
        if (networkServiceDesignGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkServiceDesignGroups'.", id)));
        }
        String networkServiceDesignVersionName = Utils.getValueFromIdByName(id, "networkServiceDesignVersions");
        if (networkServiceDesignVersionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'networkServiceDesignVersions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String publisherName = Utils.getValueFromIdByName(id, "publishers");
        if (publisherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publishers'.", id)));
        }
        String networkServiceDesignGroupName = Utils.getValueFromIdByName(id, "networkServiceDesignGroups");
        if (networkServiceDesignGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkServiceDesignGroups'.", id)));
        }
        String networkServiceDesignVersionName = Utils.getValueFromIdByName(id, "networkServiceDesignVersions");
        if (networkServiceDesignVersionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'networkServiceDesignVersions'.", id)));
        }
        this.delete(resourceGroupName, publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName,
            Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String publisherName = Utils.getValueFromIdByName(id, "publishers");
        if (publisherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publishers'.", id)));
        }
        String networkServiceDesignGroupName = Utils.getValueFromIdByName(id, "networkServiceDesignGroups");
        if (networkServiceDesignGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'networkServiceDesignGroups'.", id)));
        }
        String networkServiceDesignVersionName = Utils.getValueFromIdByName(id, "networkServiceDesignVersions");
        if (networkServiceDesignVersionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'networkServiceDesignVersions'.", id)));
        }
        this.delete(resourceGroupName, publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName,
            context);
    }

    private NetworkServiceDesignVersionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridnetwork.HybridNetworkManager manager() {
        return this.serviceManager;
    }

    public NetworkServiceDesignVersionImpl define(String name) {
        return new NetworkServiceDesignVersionImpl(name, this.manager());
    }
}
