// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Helm Pod status properties.
 */
@Fluent
public final class Pod {
    /*
     * The name of the Pod.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * The namespace of the Pod.
     */
    @JsonProperty(value = "namespace")
    private String namespace;

    /*
     * Desired number of containers
     */
    @JsonProperty(value = "desired")
    private Integer desired;

    /*
     * Number of ready containers.
     */
    @JsonProperty(value = "ready")
    private Integer ready;

    /*
     * The status of a pod.
     */
    @JsonProperty(value = "status")
    private PodStatus status;

    /*
     * Creation Time of Pod.
     */
    @JsonProperty(value = "creationTime")
    private OffsetDateTime creationTime;

    /*
     * Last 5 Pod events.
     */
    @JsonProperty(value = "events")
    private List<PodEvent> events;

    /**
     * Creates an instance of Pod class.
     */
    public Pod() {
    }

    /**
     * Get the name property: The name of the Pod.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the Pod.
     * 
     * @param name the name value to set.
     * @return the Pod object itself.
     */
    public Pod withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the namespace property: The namespace of the Pod.
     * 
     * @return the namespace value.
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: The namespace of the Pod.
     * 
     * @param namespace the namespace value to set.
     * @return the Pod object itself.
     */
    public Pod withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Get the desired property: Desired number of containers.
     * 
     * @return the desired value.
     */
    public Integer desired() {
        return this.desired;
    }

    /**
     * Set the desired property: Desired number of containers.
     * 
     * @param desired the desired value to set.
     * @return the Pod object itself.
     */
    public Pod withDesired(Integer desired) {
        this.desired = desired;
        return this;
    }

    /**
     * Get the ready property: Number of ready containers.
     * 
     * @return the ready value.
     */
    public Integer ready() {
        return this.ready;
    }

    /**
     * Set the ready property: Number of ready containers.
     * 
     * @param ready the ready value to set.
     * @return the Pod object itself.
     */
    public Pod withReady(Integer ready) {
        this.ready = ready;
        return this;
    }

    /**
     * Get the status property: The status of a pod.
     * 
     * @return the status value.
     */
    public PodStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The status of a pod.
     * 
     * @param status the status value to set.
     * @return the Pod object itself.
     */
    public Pod withStatus(PodStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the creationTime property: Creation Time of Pod.
     * 
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /**
     * Set the creationTime property: Creation Time of Pod.
     * 
     * @param creationTime the creationTime value to set.
     * @return the Pod object itself.
     */
    public Pod withCreationTime(OffsetDateTime creationTime) {
        this.creationTime = creationTime;
        return this;
    }

    /**
     * Get the events property: Last 5 Pod events.
     * 
     * @return the events value.
     */
    public List<PodEvent> events() {
        return this.events;
    }

    /**
     * Set the events property: Last 5 Pod events.
     * 
     * @param events the events value to set.
     * @return the Pod object itself.
     */
    public Pod withEvents(List<PodEvent> events) {
        this.events = events;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (events() != null) {
            events().forEach(e -> e.validate());
        }
    }
}
