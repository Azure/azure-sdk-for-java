// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Helm mapping rule profile.
 */
@Fluent
public final class HelmMappingRuleProfile implements JsonSerializable<HelmMappingRuleProfile> {
    /*
     * Helm release namespace.
     */
    private String releaseNamespace;

    /*
     * Helm release name.
     */
    private String releaseName;

    /*
     * Helm package version.
     */
    private String helmPackageVersion;

    /*
     * Helm release values.
     */
    private String values;

    /*
     * The helm deployment options
     */
    private HelmMappingRuleProfileOptions options;

    /**
     * Creates an instance of HelmMappingRuleProfile class.
     */
    public HelmMappingRuleProfile() {
    }

    /**
     * Get the releaseNamespace property: Helm release namespace.
     * 
     * @return the releaseNamespace value.
     */
    public String releaseNamespace() {
        return this.releaseNamespace;
    }

    /**
     * Set the releaseNamespace property: Helm release namespace.
     * 
     * @param releaseNamespace the releaseNamespace value to set.
     * @return the HelmMappingRuleProfile object itself.
     */
    public HelmMappingRuleProfile withReleaseNamespace(String releaseNamespace) {
        this.releaseNamespace = releaseNamespace;
        return this;
    }

    /**
     * Get the releaseName property: Helm release name.
     * 
     * @return the releaseName value.
     */
    public String releaseName() {
        return this.releaseName;
    }

    /**
     * Set the releaseName property: Helm release name.
     * 
     * @param releaseName the releaseName value to set.
     * @return the HelmMappingRuleProfile object itself.
     */
    public HelmMappingRuleProfile withReleaseName(String releaseName) {
        this.releaseName = releaseName;
        return this;
    }

    /**
     * Get the helmPackageVersion property: Helm package version.
     * 
     * @return the helmPackageVersion value.
     */
    public String helmPackageVersion() {
        return this.helmPackageVersion;
    }

    /**
     * Set the helmPackageVersion property: Helm package version.
     * 
     * @param helmPackageVersion the helmPackageVersion value to set.
     * @return the HelmMappingRuleProfile object itself.
     */
    public HelmMappingRuleProfile withHelmPackageVersion(String helmPackageVersion) {
        this.helmPackageVersion = helmPackageVersion;
        return this;
    }

    /**
     * Get the values property: Helm release values.
     * 
     * @return the values value.
     */
    public String values() {
        return this.values;
    }

    /**
     * Set the values property: Helm release values.
     * 
     * @param values the values value to set.
     * @return the HelmMappingRuleProfile object itself.
     */
    public HelmMappingRuleProfile withValues(String values) {
        this.values = values;
        return this;
    }

    /**
     * Get the options property: The helm deployment options.
     * 
     * @return the options value.
     */
    public HelmMappingRuleProfileOptions options() {
        return this.options;
    }

    /**
     * Set the options property: The helm deployment options.
     * 
     * @param options the options value to set.
     * @return the HelmMappingRuleProfile object itself.
     */
    public HelmMappingRuleProfile withOptions(HelmMappingRuleProfileOptions options) {
        this.options = options;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (options() != null) {
            options().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("releaseNamespace", this.releaseNamespace);
        jsonWriter.writeStringField("releaseName", this.releaseName);
        jsonWriter.writeStringField("helmPackageVersion", this.helmPackageVersion);
        jsonWriter.writeStringField("values", this.values);
        jsonWriter.writeJsonField("options", this.options);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HelmMappingRuleProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HelmMappingRuleProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HelmMappingRuleProfile.
     */
    public static HelmMappingRuleProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HelmMappingRuleProfile deserializedHelmMappingRuleProfile = new HelmMappingRuleProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("releaseNamespace".equals(fieldName)) {
                    deserializedHelmMappingRuleProfile.releaseNamespace = reader.getString();
                } else if ("releaseName".equals(fieldName)) {
                    deserializedHelmMappingRuleProfile.releaseName = reader.getString();
                } else if ("helmPackageVersion".equals(fieldName)) {
                    deserializedHelmMappingRuleProfile.helmPackageVersion = reader.getString();
                } else if ("values".equals(fieldName)) {
                    deserializedHelmMappingRuleProfile.values = reader.getString();
                } else if ("options".equals(fieldName)) {
                    deserializedHelmMappingRuleProfile.options = HelmMappingRuleProfileOptions.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHelmMappingRuleProfile;
        });
    }
}
