// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ArtifactAccessCredentialInner;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The azure storage account credential definition.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "credentialType")
@JsonTypeName("AzureStorageAccountToken")
@Fluent
public final class AzureStorageAccountCredential extends ArtifactAccessCredentialInner {
    /*
     * The storage account Id
     */
    @JsonProperty(value = "storageAccountId")
    private String storageAccountId;

    /*
     * The containers that could be accessed using the current credential.
     */
    @JsonProperty(value = "containerCredentials")
    private List<AzureStorageAccountContainerCredential> containerCredentials;

    /*
     * The UTC time when credential will expire.
     */
    @JsonProperty(value = "expiry")
    private OffsetDateTime expiry;

    /**
     * Creates an instance of AzureStorageAccountCredential class.
     */
    public AzureStorageAccountCredential() {
    }

    /**
     * Get the storageAccountId property: The storage account Id.
     * 
     * @return the storageAccountId value.
     */
    public String storageAccountId() {
        return this.storageAccountId;
    }

    /**
     * Set the storageAccountId property: The storage account Id.
     * 
     * @param storageAccountId the storageAccountId value to set.
     * @return the AzureStorageAccountCredential object itself.
     */
    public AzureStorageAccountCredential withStorageAccountId(String storageAccountId) {
        this.storageAccountId = storageAccountId;
        return this;
    }

    /**
     * Get the containerCredentials property: The containers that could be accessed using the current credential.
     * 
     * @return the containerCredentials value.
     */
    public List<AzureStorageAccountContainerCredential> containerCredentials() {
        return this.containerCredentials;
    }

    /**
     * Set the containerCredentials property: The containers that could be accessed using the current credential.
     * 
     * @param containerCredentials the containerCredentials value to set.
     * @return the AzureStorageAccountCredential object itself.
     */
    public AzureStorageAccountCredential
        withContainerCredentials(List<AzureStorageAccountContainerCredential> containerCredentials) {
        this.containerCredentials = containerCredentials;
        return this;
    }

    /**
     * Get the expiry property: The UTC time when credential will expire.
     * 
     * @return the expiry value.
     */
    public OffsetDateTime expiry() {
        return this.expiry;
    }

    /**
     * Set the expiry property: The UTC time when credential will expire.
     * 
     * @param expiry the expiry value to set.
     * @return the AzureStorageAccountCredential object itself.
     */
    public AzureStorageAccountCredential withExpiry(OffsetDateTime expiry) {
        this.expiry = expiry;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (containerCredentials() != null) {
            containerCredentials().forEach(e -> e.validate());
        }
    }
}
