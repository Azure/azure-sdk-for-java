// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.management.Region;
import com.azure.core.management.SubResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridnetwork.fluent.models.NetworkFunctionInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of NetworkFunction. */
public interface NetworkFunction {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the systemData property: The system meta data relating to this resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: The provisioning state of the network function resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the device property: The reference to the device resource. Once set, it cannot be updated.
     *
     * @return the device value.
     */
    SubResource device();

    /**
     * Gets the skuName property: The sku name for the network function. Once set, it cannot be updated.
     *
     * @return the skuName value.
     */
    String skuName();

    /**
     * Gets the skuType property: The sku type for the network function.
     *
     * @return the skuType value.
     */
    SkuType skuType();

    /**
     * Gets the vendorName property: The vendor name for the network function. Once set, it cannot be updated.
     *
     * @return the vendorName value.
     */
    String vendorName();

    /**
     * Gets the serviceKey property: The service key for the network function resource.
     *
     * @return the serviceKey value.
     */
    String serviceKey();

    /**
     * Gets the vendorProvisioningState property: The vendor provisioning state for the network function resource.
     *
     * @return the vendorProvisioningState value.
     */
    VendorProvisioningState vendorProvisioningState();

    /**
     * Gets the managedApplication property: The resource URI of the managed application.
     *
     * @return the managedApplication value.
     */
    SubResource managedApplication();

    /**
     * Gets the managedApplicationParameters property: The parameters for the managed application.
     *
     * @return the managedApplicationParameters value.
     */
    Object managedApplicationParameters();

    /**
     * Gets the networkFunctionContainerConfigurations property: The network function container configurations from the
     * user.
     *
     * @return the networkFunctionContainerConfigurations value.
     */
    Object networkFunctionContainerConfigurations();

    /**
     * Gets the networkFunctionUserConfigurations property: The network function configurations from the user.
     *
     * @return the networkFunctionUserConfigurations value.
     */
    List<NetworkFunctionUserConfiguration> networkFunctionUserConfigurations();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.hybridnetwork.fluent.models.NetworkFunctionInner object.
     *
     * @return the inner object.
     */
    NetworkFunctionInner innerModel();

    /** The entirety of the NetworkFunction definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The NetworkFunction definition stages. */
    interface DefinitionStages {
        /** The first stage of the NetworkFunction definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the NetworkFunction definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the NetworkFunction definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the NetworkFunction definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithEtag,
                DefinitionStages.WithDevice,
                DefinitionStages.WithSkuName,
                DefinitionStages.WithVendorName,
                DefinitionStages.WithManagedApplicationParameters,
                DefinitionStages.WithNetworkFunctionContainerConfigurations,
                DefinitionStages.WithNetworkFunctionUserConfigurations {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            NetworkFunction create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            NetworkFunction create(Context context);
        }
        /** The stage of the NetworkFunction definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the NetworkFunction definition allowing to specify etag. */
        interface WithEtag {
            /**
             * Specifies the etag property: A unique read-only string that changes whenever the resource is updated..
             *
             * @param etag A unique read-only string that changes whenever the resource is updated.
             * @return the next definition stage.
             */
            WithCreate withEtag(String etag);
        }
        /** The stage of the NetworkFunction definition allowing to specify device. */
        interface WithDevice {
            /**
             * Specifies the device property: The reference to the device resource. Once set, it cannot be updated..
             *
             * @param device The reference to the device resource. Once set, it cannot be updated.
             * @return the next definition stage.
             */
            WithCreate withDevice(SubResource device);
        }
        /** The stage of the NetworkFunction definition allowing to specify skuName. */
        interface WithSkuName {
            /**
             * Specifies the skuName property: The sku name for the network function. Once set, it cannot be updated..
             *
             * @param skuName The sku name for the network function. Once set, it cannot be updated.
             * @return the next definition stage.
             */
            WithCreate withSkuName(String skuName);
        }
        /** The stage of the NetworkFunction definition allowing to specify vendorName. */
        interface WithVendorName {
            /**
             * Specifies the vendorName property: The vendor name for the network function. Once set, it cannot be
             * updated..
             *
             * @param vendorName The vendor name for the network function. Once set, it cannot be updated.
             * @return the next definition stage.
             */
            WithCreate withVendorName(String vendorName);
        }
        /** The stage of the NetworkFunction definition allowing to specify managedApplicationParameters. */
        interface WithManagedApplicationParameters {
            /**
             * Specifies the managedApplicationParameters property: The parameters for the managed application..
             *
             * @param managedApplicationParameters The parameters for the managed application.
             * @return the next definition stage.
             */
            WithCreate withManagedApplicationParameters(Object managedApplicationParameters);
        }
        /** The stage of the NetworkFunction definition allowing to specify networkFunctionContainerConfigurations. */
        interface WithNetworkFunctionContainerConfigurations {
            /**
             * Specifies the networkFunctionContainerConfigurations property: The network function container
             * configurations from the user..
             *
             * @param networkFunctionContainerConfigurations The network function container configurations from the
             *     user.
             * @return the next definition stage.
             */
            WithCreate withNetworkFunctionContainerConfigurations(Object networkFunctionContainerConfigurations);
        }
        /** The stage of the NetworkFunction definition allowing to specify networkFunctionUserConfigurations. */
        interface WithNetworkFunctionUserConfigurations {
            /**
             * Specifies the networkFunctionUserConfigurations property: The network function configurations from the
             * user..
             *
             * @param networkFunctionUserConfigurations The network function configurations from the user.
             * @return the next definition stage.
             */
            WithCreate withNetworkFunctionUserConfigurations(
                List<NetworkFunctionUserConfiguration> networkFunctionUserConfigurations);
        }
    }
    /**
     * Begins update for the NetworkFunction resource.
     *
     * @return the stage of resource update.
     */
    NetworkFunction.Update update();

    /** The template for NetworkFunction update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        NetworkFunction apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        NetworkFunction apply(Context context);
    }
    /** The NetworkFunction update stages. */
    interface UpdateStages {
        /** The stage of the NetworkFunction update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    NetworkFunction refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    NetworkFunction refresh(Context context);
}
