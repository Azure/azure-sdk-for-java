// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridnetwork.fluent.ConfigurationGroupValuesClient;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ConfigurationGroupValueInner;
import com.azure.resourcemanager.hybridnetwork.models.ConfigurationGroupValue;
import com.azure.resourcemanager.hybridnetwork.models.ConfigurationGroupValues;

public final class ConfigurationGroupValuesImpl implements ConfigurationGroupValues {
    private static final ClientLogger LOGGER = new ClientLogger(ConfigurationGroupValuesImpl.class);

    private final ConfigurationGroupValuesClient innerClient;

    private final com.azure.resourcemanager.hybridnetwork.HybridNetworkManager serviceManager;

    public ConfigurationGroupValuesImpl(ConfigurationGroupValuesClient innerClient,
        com.azure.resourcemanager.hybridnetwork.HybridNetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void deleteByResourceGroup(String resourceGroupName, String configurationGroupValueName) {
        this.serviceClient().delete(resourceGroupName, configurationGroupValueName);
    }

    public void delete(String resourceGroupName, String configurationGroupValueName, Context context) {
        this.serviceClient().delete(resourceGroupName, configurationGroupValueName, context);
    }

    public Response<ConfigurationGroupValue> getByResourceGroupWithResponse(String resourceGroupName,
        String configurationGroupValueName, Context context) {
        Response<ConfigurationGroupValueInner> inner = this.serviceClient()
            .getByResourceGroupWithResponse(resourceGroupName, configurationGroupValueName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ConfigurationGroupValueImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConfigurationGroupValue getByResourceGroup(String resourceGroupName, String configurationGroupValueName) {
        ConfigurationGroupValueInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, configurationGroupValueName);
        if (inner != null) {
            return new ConfigurationGroupValueImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<ConfigurationGroupValue> list() {
        PagedIterable<ConfigurationGroupValueInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new ConfigurationGroupValueImpl(inner1, this.manager()));
    }

    public PagedIterable<ConfigurationGroupValue> list(Context context) {
        PagedIterable<ConfigurationGroupValueInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new ConfigurationGroupValueImpl(inner1, this.manager()));
    }

    public PagedIterable<ConfigurationGroupValue> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ConfigurationGroupValueInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new ConfigurationGroupValueImpl(inner1, this.manager()));
    }

    public PagedIterable<ConfigurationGroupValue> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<ConfigurationGroupValueInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new ConfigurationGroupValueImpl(inner1, this.manager()));
    }

    public ConfigurationGroupValue getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String configurationGroupValueName = Utils.getValueFromIdByName(id, "configurationGroupValues");
        if (configurationGroupValueName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'configurationGroupValues'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, configurationGroupValueName, Context.NONE)
            .getValue();
    }

    public Response<ConfigurationGroupValue> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String configurationGroupValueName = Utils.getValueFromIdByName(id, "configurationGroupValues");
        if (configurationGroupValueName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'configurationGroupValues'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, configurationGroupValueName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String configurationGroupValueName = Utils.getValueFromIdByName(id, "configurationGroupValues");
        if (configurationGroupValueName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'configurationGroupValues'.", id)));
        }
        this.delete(resourceGroupName, configurationGroupValueName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String configurationGroupValueName = Utils.getValueFromIdByName(id, "configurationGroupValues");
        if (configurationGroupValueName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'configurationGroupValues'.", id)));
        }
        this.delete(resourceGroupName, configurationGroupValueName, context);
    }

    private ConfigurationGroupValuesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridnetwork.HybridNetworkManager manager() {
        return this.serviceManager;
    }

    public ConfigurationGroupValueImpl define(String name) {
        return new ConfigurationGroupValueImpl(name, this.manager());
    }
}
