// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Network function definition version properties.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "networkFunctionType",
    defaultImpl = NetworkFunctionDefinitionVersionPropertiesFormat.class)
@JsonTypeName("NetworkFunctionDefinitionVersionPropertiesFormat")
@JsonSubTypes({
    @JsonSubTypes.Type(
        name = "ContainerizedNetworkFunction",
        value = ContainerizedNetworkFunctionDefinitionVersion.class),
    @JsonSubTypes.Type(name = "VirtualNetworkFunction", value = VirtualNetworkFunctionDefinitionVersion.class) })
@Fluent
public class NetworkFunctionDefinitionVersionPropertiesFormat {
    /*
     * The provisioning state of the network function definition version resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The network function definition version state.
     */
    @JsonProperty(value = "versionState", access = JsonProperty.Access.WRITE_ONLY)
    private VersionState versionState;

    /*
     * The network function definition version description.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * The deployment parameters of the network function definition version.
     */
    @JsonProperty(value = "deployParameters")
    private String deployParameters;

    /**
     * Creates an instance of NetworkFunctionDefinitionVersionPropertiesFormat class.
     */
    public NetworkFunctionDefinitionVersionPropertiesFormat() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the network function definition version resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the versionState property: The network function definition version state.
     * 
     * @return the versionState value.
     */
    public VersionState versionState() {
        return this.versionState;
    }

    /**
     * Get the description property: The network function definition version description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The network function definition version description.
     * 
     * @param description the description value to set.
     * @return the NetworkFunctionDefinitionVersionPropertiesFormat object itself.
     */
    public NetworkFunctionDefinitionVersionPropertiesFormat withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the deployParameters property: The deployment parameters of the network function definition version.
     * 
     * @return the deployParameters value.
     */
    public String deployParameters() {
        return this.deployParameters;
    }

    /**
     * Set the deployParameters property: The deployment parameters of the network function definition version.
     * 
     * @param deployParameters the deployParameters value to set.
     * @return the NetworkFunctionDefinitionVersionPropertiesFormat object itself.
     */
    public NetworkFunctionDefinitionVersionPropertiesFormat withDeployParameters(String deployParameters) {
        this.deployParameters = deployParameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
