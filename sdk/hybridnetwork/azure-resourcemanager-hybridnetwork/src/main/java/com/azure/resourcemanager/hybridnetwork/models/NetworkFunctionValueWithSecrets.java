// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * NetworkFunction with secrets.
 */
@Fluent
public final class NetworkFunctionValueWithSecrets extends NetworkFunctionPropertiesFormat {
    /*
     * The value which indicates if NF values are secrets
     */
    private NetworkFunctionConfigurationType configurationType = NetworkFunctionConfigurationType.SECRET;

    /*
     * The JSON-serialized secret deployment values from the user. This contains secrets like passwords,keys etc
     */
    private String secretDeploymentValues;

    /**
     * Creates an instance of NetworkFunctionValueWithSecrets class.
     */
    public NetworkFunctionValueWithSecrets() {
    }

    /**
     * Get the configurationType property: The value which indicates if NF values are secrets.
     * 
     * @return the configurationType value.
     */
    @Override
    public NetworkFunctionConfigurationType configurationType() {
        return this.configurationType;
    }

    /**
     * Get the secretDeploymentValues property: The JSON-serialized secret deployment values from the user. This
     * contains secrets like passwords,keys etc.
     * 
     * @return the secretDeploymentValues value.
     */
    public String secretDeploymentValues() {
        return this.secretDeploymentValues;
    }

    /**
     * Set the secretDeploymentValues property: The JSON-serialized secret deployment values from the user. This
     * contains secrets like passwords,keys etc.
     * 
     * @param secretDeploymentValues the secretDeploymentValues value to set.
     * @return the NetworkFunctionValueWithSecrets object itself.
     */
    public NetworkFunctionValueWithSecrets withSecretDeploymentValues(String secretDeploymentValues) {
        this.secretDeploymentValues = secretDeploymentValues;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkFunctionValueWithSecrets withNetworkFunctionDefinitionVersionResourceReference(
        DeploymentResourceIdReference networkFunctionDefinitionVersionResourceReference) {
        super.withNetworkFunctionDefinitionVersionResourceReference(networkFunctionDefinitionVersionResourceReference);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkFunctionValueWithSecrets withNfviType(NfviType nfviType) {
        super.withNfviType(nfviType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkFunctionValueWithSecrets withNfviId(String nfviId) {
        super.withNfviId(nfviId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkFunctionValueWithSecrets withAllowSoftwareUpdate(Boolean allowSoftwareUpdate) {
        super.withAllowSoftwareUpdate(allowSoftwareUpdate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkFunctionValueWithSecrets withRoleOverrideValues(List<String> roleOverrideValues) {
        super.withRoleOverrideValues(roleOverrideValues);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (networkFunctionDefinitionVersionResourceReference() != null) {
            networkFunctionDefinitionVersionResourceReference().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("networkFunctionDefinitionVersionResourceReference",
            networkFunctionDefinitionVersionResourceReference());
        jsonWriter.writeStringField("nfviType", nfviType() == null ? null : nfviType().toString());
        jsonWriter.writeStringField("nfviId", nfviId());
        jsonWriter.writeBooleanField("allowSoftwareUpdate", allowSoftwareUpdate());
        jsonWriter.writeArrayField("roleOverrideValues", roleOverrideValues(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("configurationType",
            this.configurationType == null ? null : this.configurationType.toString());
        jsonWriter.writeStringField("secretDeploymentValues", this.secretDeploymentValues);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkFunctionValueWithSecrets from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkFunctionValueWithSecrets if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkFunctionValueWithSecrets.
     */
    public static NetworkFunctionValueWithSecrets fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkFunctionValueWithSecrets deserializedNetworkFunctionValueWithSecrets
                = new NetworkFunctionValueWithSecrets();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedNetworkFunctionValueWithSecrets
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("publisherName".equals(fieldName)) {
                    deserializedNetworkFunctionValueWithSecrets.withPublisherName(reader.getString());
                } else if ("publisherScope".equals(fieldName)) {
                    deserializedNetworkFunctionValueWithSecrets
                        .withPublisherScope(PublisherScope.fromString(reader.getString()));
                } else if ("networkFunctionDefinitionGroupName".equals(fieldName)) {
                    deserializedNetworkFunctionValueWithSecrets
                        .withNetworkFunctionDefinitionGroupName(reader.getString());
                } else if ("networkFunctionDefinitionVersion".equals(fieldName)) {
                    deserializedNetworkFunctionValueWithSecrets
                        .withNetworkFunctionDefinitionVersion(reader.getString());
                } else if ("networkFunctionDefinitionOfferingLocation".equals(fieldName)) {
                    deserializedNetworkFunctionValueWithSecrets
                        .withNetworkFunctionDefinitionOfferingLocation(reader.getString());
                } else if ("networkFunctionDefinitionVersionResourceReference".equals(fieldName)) {
                    deserializedNetworkFunctionValueWithSecrets.withNetworkFunctionDefinitionVersionResourceReference(
                        DeploymentResourceIdReference.fromJson(reader));
                } else if ("nfviType".equals(fieldName)) {
                    deserializedNetworkFunctionValueWithSecrets.withNfviType(NfviType.fromString(reader.getString()));
                } else if ("nfviId".equals(fieldName)) {
                    deserializedNetworkFunctionValueWithSecrets.withNfviId(reader.getString());
                } else if ("allowSoftwareUpdate".equals(fieldName)) {
                    deserializedNetworkFunctionValueWithSecrets
                        .withAllowSoftwareUpdate(reader.getNullable(JsonReader::getBoolean));
                } else if ("roleOverrideValues".equals(fieldName)) {
                    List<String> roleOverrideValues = reader.readArray(reader1 -> reader1.getString());
                    deserializedNetworkFunctionValueWithSecrets.withRoleOverrideValues(roleOverrideValues);
                } else if ("configurationType".equals(fieldName)) {
                    deserializedNetworkFunctionValueWithSecrets.configurationType
                        = NetworkFunctionConfigurationType.fromString(reader.getString());
                } else if ("secretDeploymentValues".equals(fieldName)) {
                    deserializedNetworkFunctionValueWithSecrets.secretDeploymentValues = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkFunctionValueWithSecrets;
        });
    }
}
