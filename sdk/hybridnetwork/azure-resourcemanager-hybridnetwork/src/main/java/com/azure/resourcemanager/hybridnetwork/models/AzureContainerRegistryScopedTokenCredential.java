// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ArtifactAccessCredentialInner;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The azure container registry scoped token credential definition.
 */
@Fluent
public final class AzureContainerRegistryScopedTokenCredential extends ArtifactAccessCredentialInner {
    /*
     * The credential type.
     */
    private CredentialType credentialType = CredentialType.AZURE_CONTAINER_REGISTRY_SCOPED_TOKEN;

    /*
     * The username of the credential.
     */
    private String username;

    /*
     * The credential value.
     */
    private String acrToken;

    /*
     * The Acr server url
     */
    private String acrServerUrl;

    /*
     * The repositories that could be accessed using the current credential.
     */
    private List<String> repositories;

    /*
     * The UTC time when credential will expire.
     */
    private OffsetDateTime expiry;

    /**
     * Creates an instance of AzureContainerRegistryScopedTokenCredential class.
     */
    public AzureContainerRegistryScopedTokenCredential() {
    }

    /**
     * Get the credentialType property: The credential type.
     * 
     * @return the credentialType value.
     */
    @Override
    public CredentialType credentialType() {
        return this.credentialType;
    }

    /**
     * Get the username property: The username of the credential.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: The username of the credential.
     * 
     * @param username the username value to set.
     * @return the AzureContainerRegistryScopedTokenCredential object itself.
     */
    public AzureContainerRegistryScopedTokenCredential withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the acrToken property: The credential value.
     * 
     * @return the acrToken value.
     */
    public String acrToken() {
        return this.acrToken;
    }

    /**
     * Set the acrToken property: The credential value.
     * 
     * @param acrToken the acrToken value to set.
     * @return the AzureContainerRegistryScopedTokenCredential object itself.
     */
    public AzureContainerRegistryScopedTokenCredential withAcrToken(String acrToken) {
        this.acrToken = acrToken;
        return this;
    }

    /**
     * Get the acrServerUrl property: The Acr server url.
     * 
     * @return the acrServerUrl value.
     */
    public String acrServerUrl() {
        return this.acrServerUrl;
    }

    /**
     * Set the acrServerUrl property: The Acr server url.
     * 
     * @param acrServerUrl the acrServerUrl value to set.
     * @return the AzureContainerRegistryScopedTokenCredential object itself.
     */
    public AzureContainerRegistryScopedTokenCredential withAcrServerUrl(String acrServerUrl) {
        this.acrServerUrl = acrServerUrl;
        return this;
    }

    /**
     * Get the repositories property: The repositories that could be accessed using the current credential.
     * 
     * @return the repositories value.
     */
    public List<String> repositories() {
        return this.repositories;
    }

    /**
     * Set the repositories property: The repositories that could be accessed using the current credential.
     * 
     * @param repositories the repositories value to set.
     * @return the AzureContainerRegistryScopedTokenCredential object itself.
     */
    public AzureContainerRegistryScopedTokenCredential withRepositories(List<String> repositories) {
        this.repositories = repositories;
        return this;
    }

    /**
     * Get the expiry property: The UTC time when credential will expire.
     * 
     * @return the expiry value.
     */
    public OffsetDateTime expiry() {
        return this.expiry;
    }

    /**
     * Set the expiry property: The UTC time when credential will expire.
     * 
     * @param expiry the expiry value to set.
     * @return the AzureContainerRegistryScopedTokenCredential object itself.
     */
    public AzureContainerRegistryScopedTokenCredential withExpiry(OffsetDateTime expiry) {
        this.expiry = expiry;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("credentialType",
            this.credentialType == null ? null : this.credentialType.toString());
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeStringField("acrToken", this.acrToken);
        jsonWriter.writeStringField("acrServerUrl", this.acrServerUrl);
        jsonWriter.writeArrayField("repositories", this.repositories, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("expiry",
            this.expiry == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiry));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureContainerRegistryScopedTokenCredential from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureContainerRegistryScopedTokenCredential if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureContainerRegistryScopedTokenCredential.
     */
    public static AzureContainerRegistryScopedTokenCredential fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureContainerRegistryScopedTokenCredential deserializedAzureContainerRegistryScopedTokenCredential
                = new AzureContainerRegistryScopedTokenCredential();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("credentialType".equals(fieldName)) {
                    deserializedAzureContainerRegistryScopedTokenCredential.credentialType
                        = CredentialType.fromString(reader.getString());
                } else if ("username".equals(fieldName)) {
                    deserializedAzureContainerRegistryScopedTokenCredential.username = reader.getString();
                } else if ("acrToken".equals(fieldName)) {
                    deserializedAzureContainerRegistryScopedTokenCredential.acrToken = reader.getString();
                } else if ("acrServerUrl".equals(fieldName)) {
                    deserializedAzureContainerRegistryScopedTokenCredential.acrServerUrl = reader.getString();
                } else if ("repositories".equals(fieldName)) {
                    List<String> repositories = reader.readArray(reader1 -> reader1.getString());
                    deserializedAzureContainerRegistryScopedTokenCredential.repositories = repositories;
                } else if ("expiry".equals(fieldName)) {
                    deserializedAzureContainerRegistryScopedTokenCredential.expiry = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureContainerRegistryScopedTokenCredential;
        });
    }
}
