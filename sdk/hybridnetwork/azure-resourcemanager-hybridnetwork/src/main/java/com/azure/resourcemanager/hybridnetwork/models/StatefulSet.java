// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Helm StatefulSet status properties.
 */
@Fluent
public final class StatefulSet implements JsonSerializable<StatefulSet> {
    /*
     * The name of the statefulset.
     */
    private String name;

    /*
     * The namespace of the statefulset.
     */
    private String namespace;

    /*
     * Desired number of pods
     */
    private Integer desired;

    /*
     * Number of ready pods.
     */
    private Integer ready;

    /*
     * Creation Time of statefulset.
     */
    private OffsetDateTime creationTime;

    /**
     * Creates an instance of StatefulSet class.
     */
    public StatefulSet() {
    }

    /**
     * Get the name property: The name of the statefulset.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the statefulset.
     * 
     * @param name the name value to set.
     * @return the StatefulSet object itself.
     */
    public StatefulSet withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the namespace property: The namespace of the statefulset.
     * 
     * @return the namespace value.
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: The namespace of the statefulset.
     * 
     * @param namespace the namespace value to set.
     * @return the StatefulSet object itself.
     */
    public StatefulSet withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Get the desired property: Desired number of pods.
     * 
     * @return the desired value.
     */
    public Integer desired() {
        return this.desired;
    }

    /**
     * Set the desired property: Desired number of pods.
     * 
     * @param desired the desired value to set.
     * @return the StatefulSet object itself.
     */
    public StatefulSet withDesired(Integer desired) {
        this.desired = desired;
        return this;
    }

    /**
     * Get the ready property: Number of ready pods.
     * 
     * @return the ready value.
     */
    public Integer ready() {
        return this.ready;
    }

    /**
     * Set the ready property: Number of ready pods.
     * 
     * @param ready the ready value to set.
     * @return the StatefulSet object itself.
     */
    public StatefulSet withReady(Integer ready) {
        this.ready = ready;
        return this;
    }

    /**
     * Get the creationTime property: Creation Time of statefulset.
     * 
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /**
     * Set the creationTime property: Creation Time of statefulset.
     * 
     * @param creationTime the creationTime value to set.
     * @return the StatefulSet object itself.
     */
    public StatefulSet withCreationTime(OffsetDateTime creationTime) {
        this.creationTime = creationTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("namespace", this.namespace);
        jsonWriter.writeNumberField("desired", this.desired);
        jsonWriter.writeNumberField("ready", this.ready);
        jsonWriter.writeStringField("creationTime",
            this.creationTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.creationTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StatefulSet from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StatefulSet if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StatefulSet.
     */
    public static StatefulSet fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StatefulSet deserializedStatefulSet = new StatefulSet();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedStatefulSet.name = reader.getString();
                } else if ("namespace".equals(fieldName)) {
                    deserializedStatefulSet.namespace = reader.getString();
                } else if ("desired".equals(fieldName)) {
                    deserializedStatefulSet.desired = reader.getNullable(JsonReader::getInt);
                } else if ("ready".equals(fieldName)) {
                    deserializedStatefulSet.ready = reader.getNullable(JsonReader::getInt);
                } else if ("creationTime".equals(fieldName)) {
                    deserializedStatefulSet.creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStatefulSet;
        });
    }
}
