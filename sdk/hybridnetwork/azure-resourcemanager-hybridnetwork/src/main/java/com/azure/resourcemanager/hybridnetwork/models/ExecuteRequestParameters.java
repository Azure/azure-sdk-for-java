// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Payload for execute request post call.
 */
@Fluent
public final class ExecuteRequestParameters implements JsonSerializable<ExecuteRequestParameters> {
    /*
     * The endpoint of service to call.
     */
    private String serviceEndpoint;

    /*
     * The request metadata.
     */
    private RequestMetadata requestMetadata;

    /**
     * Creates an instance of ExecuteRequestParameters class.
     */
    public ExecuteRequestParameters() {
    }

    /**
     * Get the serviceEndpoint property: The endpoint of service to call.
     * 
     * @return the serviceEndpoint value.
     */
    public String serviceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * Set the serviceEndpoint property: The endpoint of service to call.
     * 
     * @param serviceEndpoint the serviceEndpoint value to set.
     * @return the ExecuteRequestParameters object itself.
     */
    public ExecuteRequestParameters withServiceEndpoint(String serviceEndpoint) {
        this.serviceEndpoint = serviceEndpoint;
        return this;
    }

    /**
     * Get the requestMetadata property: The request metadata.
     * 
     * @return the requestMetadata value.
     */
    public RequestMetadata requestMetadata() {
        return this.requestMetadata;
    }

    /**
     * Set the requestMetadata property: The request metadata.
     * 
     * @param requestMetadata the requestMetadata value to set.
     * @return the ExecuteRequestParameters object itself.
     */
    public ExecuteRequestParameters withRequestMetadata(RequestMetadata requestMetadata) {
        this.requestMetadata = requestMetadata;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serviceEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property serviceEndpoint in model ExecuteRequestParameters"));
        }
        if (requestMetadata() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property requestMetadata in model ExecuteRequestParameters"));
        } else {
            requestMetadata().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExecuteRequestParameters.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceEndpoint", this.serviceEndpoint);
        jsonWriter.writeJsonField("requestMetadata", this.requestMetadata);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExecuteRequestParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExecuteRequestParameters if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExecuteRequestParameters.
     */
    public static ExecuteRequestParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExecuteRequestParameters deserializedExecuteRequestParameters = new ExecuteRequestParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceEndpoint".equals(fieldName)) {
                    deserializedExecuteRequestParameters.serviceEndpoint = reader.getString();
                } else if ("requestMetadata".equals(fieldName)) {
                    deserializedExecuteRequestParameters.requestMetadata = RequestMetadata.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExecuteRequestParameters;
        });
    }
}
