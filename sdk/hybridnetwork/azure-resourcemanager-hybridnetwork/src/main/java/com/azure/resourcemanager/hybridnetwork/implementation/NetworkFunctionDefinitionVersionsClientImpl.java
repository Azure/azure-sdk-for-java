// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hybridnetwork.fluent.NetworkFunctionDefinitionVersionsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.models.NetworkFunctionDefinitionVersionInner;
import com.azure.resourcemanager.hybridnetwork.fluent.models.NetworkFunctionDefinitionVersionUpdateStateInner;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunctionDefinitionVersionListResult;
import com.azure.resourcemanager.hybridnetwork.models.TagsObject;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in NetworkFunctionDefinitionVersionsClient.
 */
public final class NetworkFunctionDefinitionVersionsClientImpl implements NetworkFunctionDefinitionVersionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final NetworkFunctionDefinitionVersionsService service;

    /**
     * The service client containing this operation class.
     */
    private final HybridNetworkManagementClientImpl client;

    /**
     * Initializes an instance of NetworkFunctionDefinitionVersionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    NetworkFunctionDefinitionVersionsClientImpl(HybridNetworkManagementClientImpl client) {
        this.service = RestProxy.create(NetworkFunctionDefinitionVersionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HybridNetworkManagementClientNetworkFunctionDefinitionVersions to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HybridNetworkManagem")
    public interface NetworkFunctionDefinitionVersionsService {
        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkFunctionDefinitionGroups/{networkFunctionDefinitionGroupName}/networkFunctionDefinitionVersions/{networkFunctionDefinitionVersionName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("networkFunctionDefinitionGroupName") String networkFunctionDefinitionGroupName,
            @PathParam("networkFunctionDefinitionVersionName") String networkFunctionDefinitionVersionName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkFunctionDefinitionGroups/{networkFunctionDefinitionGroupName}/networkFunctionDefinitionVersions/{networkFunctionDefinitionVersionName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("networkFunctionDefinitionGroupName") String networkFunctionDefinitionGroupName,
            @PathParam("networkFunctionDefinitionVersionName") String networkFunctionDefinitionVersionName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") NetworkFunctionDefinitionVersionInner parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkFunctionDefinitionGroups/{networkFunctionDefinitionGroupName}/networkFunctionDefinitionVersions/{networkFunctionDefinitionVersionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NetworkFunctionDefinitionVersionInner>> get(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("networkFunctionDefinitionGroupName") String networkFunctionDefinitionGroupName,
            @PathParam("networkFunctionDefinitionVersionName") String networkFunctionDefinitionVersionName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkFunctionDefinitionGroups/{networkFunctionDefinitionGroupName}/networkFunctionDefinitionVersions/{networkFunctionDefinitionVersionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NetworkFunctionDefinitionVersionInner>> update(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("networkFunctionDefinitionGroupName") String networkFunctionDefinitionGroupName,
            @PathParam("networkFunctionDefinitionVersionName") String networkFunctionDefinitionVersionName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") TagsObject parameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkFunctionDefinitionGroups/{networkFunctionDefinitionGroupName}/networkFunctionDefinitionVersions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NetworkFunctionDefinitionVersionListResult>> listByNetworkFunctionDefinitionGroup(
            @HostParam("$host") String endpoint, @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("publisherName") String publisherName,
            @PathParam("networkFunctionDefinitionGroupName") String networkFunctionDefinitionGroupName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkFunctionDefinitionGroups/{networkFunctionDefinitionGroupName}/networkFunctionDefinitionVersions/{networkFunctionDefinitionVersionName}/updateState")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updateState(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("networkFunctionDefinitionGroupName") String networkFunctionDefinitionGroupName,
            @PathParam("networkFunctionDefinitionVersionName") String networkFunctionDefinitionVersionName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") NetworkFunctionDefinitionVersionUpdateStateInner parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NetworkFunctionDefinitionVersionListResult>> listByNetworkFunctionDefinitionGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Deletes the specified network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkFunctionDefinitionGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionGroupName is required and cannot be null."));
        }
        if (networkFunctionDefinitionVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionVersionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), resourceGroupName, publisherName,
                networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName, this.client.getApiVersion(),
                this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the specified network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkFunctionDefinitionGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionGroupName is required and cannot be null."));
        }
        if (networkFunctionDefinitionVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionVersionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), resourceGroupName, publisherName,
            networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName, this.client.getApiVersion(),
            this.client.getSubscriptionId(), accept, context);
    }

    /**
     * Deletes the specified network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, publisherName,
            networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the specified network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, publisherName,
            networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes the specified network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName) {
        return this.beginDeleteAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName).getSyncPoller();
    }

    /**
     * Deletes the specified network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, context).getSyncPoller();
    }

    /**
     * Deletes the specified network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName) {
        return beginDeleteAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName, Context context) {
        return beginDeleteAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String publisherName, String networkFunctionDefinitionGroupName,
        String networkFunctionDefinitionVersionName) {
        deleteAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName).block();
    }

    /**
     * Deletes the specified network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String publisherName, String networkFunctionDefinitionGroupName,
        String networkFunctionDefinitionVersionName, Context context) {
        deleteAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, context).block();
    }

    /**
     * Creates or updates a network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network function definition version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network function definition version along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String publisherName, String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        NetworkFunctionDefinitionVersionInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkFunctionDefinitionGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionGroupName is required and cannot be null."));
        }
        if (networkFunctionDefinitionVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionVersionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), resourceGroupName, publisherName,
                networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName, this.client.getApiVersion(),
                this.client.getSubscriptionId(), parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network function definition version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network function definition version along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String publisherName, String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        NetworkFunctionDefinitionVersionInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkFunctionDefinitionGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionGroupName is required and cannot be null."));
        }
        if (networkFunctionDefinitionVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionVersionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), resourceGroupName, publisherName,
            networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName, this.client.getApiVersion(),
            this.client.getSubscriptionId(), parameters, accept, context);
    }

    /**
     * Creates or updates a network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network function definition version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of network function definition version.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<NetworkFunctionDefinitionVersionInner>, NetworkFunctionDefinitionVersionInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String publisherName,
            String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
            NetworkFunctionDefinitionVersionInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, publisherName,
            networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName, parameters);
        return this.client.<NetworkFunctionDefinitionVersionInner, NetworkFunctionDefinitionVersionInner>getLroResult(
            mono, this.client.getHttpPipeline(), NetworkFunctionDefinitionVersionInner.class,
            NetworkFunctionDefinitionVersionInner.class, this.client.getContext());
    }

    /**
     * Creates or updates a network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network function definition version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of network function definition version.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<NetworkFunctionDefinitionVersionInner>, NetworkFunctionDefinitionVersionInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String publisherName,
            String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
            NetworkFunctionDefinitionVersionInner parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, publisherName,
            networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName, parameters, context);
        return this.client.<NetworkFunctionDefinitionVersionInner, NetworkFunctionDefinitionVersionInner>getLroResult(
            mono, this.client.getHttpPipeline(), NetworkFunctionDefinitionVersionInner.class,
            NetworkFunctionDefinitionVersionInner.class, context);
    }

    /**
     * Creates or updates a network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network function definition version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of network function definition version.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NetworkFunctionDefinitionVersionInner>, NetworkFunctionDefinitionVersionInner>
        beginCreateOrUpdate(String resourceGroupName, String publisherName, String networkFunctionDefinitionGroupName,
            String networkFunctionDefinitionVersionName, NetworkFunctionDefinitionVersionInner parameters) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, parameters).getSyncPoller();
    }

    /**
     * Creates or updates a network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network function definition version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of network function definition version.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NetworkFunctionDefinitionVersionInner>, NetworkFunctionDefinitionVersionInner>
        beginCreateOrUpdate(String resourceGroupName, String publisherName, String networkFunctionDefinitionGroupName,
            String networkFunctionDefinitionVersionName, NetworkFunctionDefinitionVersionInner parameters,
            Context context) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, parameters, context).getSyncPoller();
    }

    /**
     * Creates or updates a network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network function definition version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network function definition version on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkFunctionDefinitionVersionInner> createOrUpdateAsync(String resourceGroupName,
        String publisherName, String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        NetworkFunctionDefinitionVersionInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, parameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network function definition version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network function definition version on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkFunctionDefinitionVersionInner> createOrUpdateAsync(String resourceGroupName,
        String publisherName, String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        NetworkFunctionDefinitionVersionInner parameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, parameters, context).last()
                .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network function definition version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network function definition version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkFunctionDefinitionVersionInner createOrUpdate(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        NetworkFunctionDefinitionVersionInner parameters) {
        return createOrUpdateAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, parameters).block();
    }

    /**
     * Creates or updates a network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network function definition version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network function definition version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkFunctionDefinitionVersionInner createOrUpdate(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        NetworkFunctionDefinitionVersionInner parameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, parameters, context).block();
    }

    /**
     * Gets information about a network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a network function definition version along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NetworkFunctionDefinitionVersionInner>> getWithResponseAsync(String resourceGroupName,
        String publisherName, String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkFunctionDefinitionGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionGroupName is required and cannot be null."));
        }
        if (networkFunctionDefinitionVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionVersionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), resourceGroupName, publisherName,
                networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName, this.client.getApiVersion(),
                this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets information about a network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a network function definition version along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NetworkFunctionDefinitionVersionInner>> getWithResponseAsync(String resourceGroupName,
        String publisherName, String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkFunctionDefinitionGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionGroupName is required and cannot be null."));
        }
        if (networkFunctionDefinitionVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionVersionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), resourceGroupName, publisherName,
            networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName, this.client.getApiVersion(),
            this.client.getSubscriptionId(), accept, context);
    }

    /**
     * Gets information about a network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a network function definition version on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkFunctionDefinitionVersionInner> getAsync(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName) {
        return getWithResponseAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets information about a network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a network function definition version along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<NetworkFunctionDefinitionVersionInner> getWithResponse(String resourceGroupName,
        String publisherName, String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        Context context) {
        return getWithResponseAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, context).block();
    }

    /**
     * Gets information about a network function definition version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a network function definition version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkFunctionDefinitionVersionInner get(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName) {
        return getWithResponse(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, Context.NONE).getValue();
    }

    /**
     * Updates a network function definition version resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network function definition version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network function definition version along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NetworkFunctionDefinitionVersionInner>> updateWithResponseAsync(String resourceGroupName,
        String publisherName, String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        TagsObject parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkFunctionDefinitionGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionGroupName is required and cannot be null."));
        }
        if (networkFunctionDefinitionVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionVersionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), resourceGroupName, publisherName,
                networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName, this.client.getApiVersion(),
                this.client.getSubscriptionId(), parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates a network function definition version resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network function definition version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network function definition version along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NetworkFunctionDefinitionVersionInner>> updateWithResponseAsync(String resourceGroupName,
        String publisherName, String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        TagsObject parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkFunctionDefinitionGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionGroupName is required and cannot be null."));
        }
        if (networkFunctionDefinitionVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionVersionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), resourceGroupName, publisherName,
            networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName, this.client.getApiVersion(),
            this.client.getSubscriptionId(), parameters, accept, context);
    }

    /**
     * Updates a network function definition version resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network function definition version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network function definition version on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkFunctionDefinitionVersionInner> updateAsync(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName, TagsObject parameters) {
        return updateWithResponseAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, parameters).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates a network function definition version resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network function definition version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network function definition version along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<NetworkFunctionDefinitionVersionInner> updateWithResponse(String resourceGroupName,
        String publisherName, String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        TagsObject parameters, Context context) {
        return updateWithResponseAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, parameters, context).block();
    }

    /**
     * Updates a network function definition version resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network function definition version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network function definition version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkFunctionDefinitionVersionInner update(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName, TagsObject parameters) {
        return updateWithResponse(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, parameters, Context.NONE).getValue();
    }

    /**
     * Gets information about a list of network function definition versions under a network function definition group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a list of network function definition versions under a network function definition
     * group along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NetworkFunctionDefinitionVersionInner>>
        listByNetworkFunctionDefinitionGroupSinglePageAsync(String resourceGroupName, String publisherName,
            String networkFunctionDefinitionGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkFunctionDefinitionGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByNetworkFunctionDefinitionGroup(this.client.getEndpoint(),
                resourceGroupName, publisherName, networkFunctionDefinitionGroupName, this.client.getApiVersion(),
                this.client.getSubscriptionId(), accept, context))
            .<PagedResponse<NetworkFunctionDefinitionVersionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets information about a list of network function definition versions under a network function definition group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a list of network function definition versions under a network function definition
     * group along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NetworkFunctionDefinitionVersionInner>>
        listByNetworkFunctionDefinitionGroupSinglePageAsync(String resourceGroupName, String publisherName,
            String networkFunctionDefinitionGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkFunctionDefinitionGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByNetworkFunctionDefinitionGroup(this.client.getEndpoint(), resourceGroupName, publisherName,
                networkFunctionDefinitionGroupName, this.client.getApiVersion(), this.client.getSubscriptionId(),
                accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Gets information about a list of network function definition versions under a network function definition group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a list of network function definition versions under a network function definition
     * group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<NetworkFunctionDefinitionVersionInner> listByNetworkFunctionDefinitionGroupAsync(
        String resourceGroupName, String publisherName, String networkFunctionDefinitionGroupName) {
        return new PagedFlux<>(
            () -> listByNetworkFunctionDefinitionGroupSinglePageAsync(resourceGroupName, publisherName,
                networkFunctionDefinitionGroupName),
            nextLink -> listByNetworkFunctionDefinitionGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Gets information about a list of network function definition versions under a network function definition group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a list of network function definition versions under a network function definition
     * group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<NetworkFunctionDefinitionVersionInner> listByNetworkFunctionDefinitionGroupAsync(
        String resourceGroupName, String publisherName, String networkFunctionDefinitionGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByNetworkFunctionDefinitionGroupSinglePageAsync(resourceGroupName, publisherName,
                networkFunctionDefinitionGroupName, context),
            nextLink -> listByNetworkFunctionDefinitionGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets information about a list of network function definition versions under a network function definition group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a list of network function definition versions under a network function definition
     * group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NetworkFunctionDefinitionVersionInner> listByNetworkFunctionDefinitionGroup(
        String resourceGroupName, String publisherName, String networkFunctionDefinitionGroupName) {
        return new PagedIterable<>(listByNetworkFunctionDefinitionGroupAsync(resourceGroupName, publisherName,
            networkFunctionDefinitionGroupName));
    }

    /**
     * Gets information about a list of network function definition versions under a network function definition group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a list of network function definition versions under a network function definition
     * group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NetworkFunctionDefinitionVersionInner> listByNetworkFunctionDefinitionGroup(
        String resourceGroupName, String publisherName, String networkFunctionDefinitionGroupName, Context context) {
        return new PagedIterable<>(listByNetworkFunctionDefinitionGroupAsync(resourceGroupName, publisherName,
            networkFunctionDefinitionGroupName, context));
    }

    /**
     * Update network function definition version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network function definition version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher network function definition version update request definition along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateStateWithResponseAsync(String resourceGroupName,
        String publisherName, String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        NetworkFunctionDefinitionVersionUpdateStateInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkFunctionDefinitionGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionGroupName is required and cannot be null."));
        }
        if (networkFunctionDefinitionVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionVersionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.updateState(this.client.getEndpoint(), resourceGroupName, publisherName,
                networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName, this.client.getApiVersion(),
                this.client.getSubscriptionId(), parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update network function definition version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network function definition version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher network function definition version update request definition along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateStateWithResponseAsync(String resourceGroupName,
        String publisherName, String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        NetworkFunctionDefinitionVersionUpdateStateInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkFunctionDefinitionGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionGroupName is required and cannot be null."));
        }
        if (networkFunctionDefinitionVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkFunctionDefinitionVersionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.updateState(this.client.getEndpoint(), resourceGroupName, publisherName,
            networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName, this.client.getApiVersion(),
            this.client.getSubscriptionId(), parameters, accept, context);
    }

    /**
     * Update network function definition version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network function definition version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of publisher network function definition version update request
     * definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<NetworkFunctionDefinitionVersionUpdateStateInner>, NetworkFunctionDefinitionVersionUpdateStateInner>
        beginUpdateStateAsync(String resourceGroupName, String publisherName, String networkFunctionDefinitionGroupName,
            String networkFunctionDefinitionVersionName, NetworkFunctionDefinitionVersionUpdateStateInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateStateWithResponseAsync(resourceGroupName, publisherName,
            networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName, parameters);
        return this.client
            .<NetworkFunctionDefinitionVersionUpdateStateInner, NetworkFunctionDefinitionVersionUpdateStateInner>getLroResult(
                mono, this.client.getHttpPipeline(), NetworkFunctionDefinitionVersionUpdateStateInner.class,
                NetworkFunctionDefinitionVersionUpdateStateInner.class, this.client.getContext());
    }

    /**
     * Update network function definition version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network function definition version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of publisher network function definition version update request
     * definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<NetworkFunctionDefinitionVersionUpdateStateInner>, NetworkFunctionDefinitionVersionUpdateStateInner>
        beginUpdateStateAsync(String resourceGroupName, String publisherName, String networkFunctionDefinitionGroupName,
            String networkFunctionDefinitionVersionName, NetworkFunctionDefinitionVersionUpdateStateInner parameters,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateStateWithResponseAsync(resourceGroupName, publisherName,
            networkFunctionDefinitionGroupName, networkFunctionDefinitionVersionName, parameters, context);
        return this.client
            .<NetworkFunctionDefinitionVersionUpdateStateInner, NetworkFunctionDefinitionVersionUpdateStateInner>getLroResult(
                mono, this.client.getHttpPipeline(), NetworkFunctionDefinitionVersionUpdateStateInner.class,
                NetworkFunctionDefinitionVersionUpdateStateInner.class, context);
    }

    /**
     * Update network function definition version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network function definition version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of publisher network function definition version update request
     * definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<NetworkFunctionDefinitionVersionUpdateStateInner>, NetworkFunctionDefinitionVersionUpdateStateInner>
        beginUpdateState(String resourceGroupName, String publisherName, String networkFunctionDefinitionGroupName,
            String networkFunctionDefinitionVersionName, NetworkFunctionDefinitionVersionUpdateStateInner parameters) {
        return this.beginUpdateStateAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, parameters).getSyncPoller();
    }

    /**
     * Update network function definition version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network function definition version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of publisher network function definition version update request
     * definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<NetworkFunctionDefinitionVersionUpdateStateInner>, NetworkFunctionDefinitionVersionUpdateStateInner>
        beginUpdateState(String resourceGroupName, String publisherName, String networkFunctionDefinitionGroupName,
            String networkFunctionDefinitionVersionName, NetworkFunctionDefinitionVersionUpdateStateInner parameters,
            Context context) {
        return this.beginUpdateStateAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, parameters, context).getSyncPoller();
    }

    /**
     * Update network function definition version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network function definition version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher network function definition version update request definition on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkFunctionDefinitionVersionUpdateStateInner> updateStateAsync(String resourceGroupName,
        String publisherName, String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        NetworkFunctionDefinitionVersionUpdateStateInner parameters) {
        return beginUpdateStateAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, parameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update network function definition version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network function definition version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher network function definition version update request definition on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkFunctionDefinitionVersionUpdateStateInner> updateStateAsync(String resourceGroupName,
        String publisherName, String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        NetworkFunctionDefinitionVersionUpdateStateInner parameters, Context context) {
        return beginUpdateStateAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, parameters, context).last()
                .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update network function definition version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network function definition version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher network function definition version update request definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkFunctionDefinitionVersionUpdateStateInner updateState(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        NetworkFunctionDefinitionVersionUpdateStateInner parameters) {
        return updateStateAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, parameters).block();
    }

    /**
     * Update network function definition version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkFunctionDefinitionGroupName The name of the network function definition group.
     * @param networkFunctionDefinitionVersionName The name of the network function definition version. The name should
     * conform to the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network function definition version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher network function definition version update request definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkFunctionDefinitionVersionUpdateStateInner updateState(String resourceGroupName, String publisherName,
        String networkFunctionDefinitionGroupName, String networkFunctionDefinitionVersionName,
        NetworkFunctionDefinitionVersionUpdateStateInner parameters, Context context) {
        return updateStateAsync(resourceGroupName, publisherName, networkFunctionDefinitionGroupName,
            networkFunctionDefinitionVersionName, parameters, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of network function definition versions along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NetworkFunctionDefinitionVersionInner>>
        listByNetworkFunctionDefinitionGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByNetworkFunctionDefinitionGroupNext(nextLink,
                this.client.getEndpoint(), accept, context))
            .<PagedResponse<NetworkFunctionDefinitionVersionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of network function definition versions along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NetworkFunctionDefinitionVersionInner>>
        listByNetworkFunctionDefinitionGroupNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByNetworkFunctionDefinitionGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
