// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The helm deployment install options.
 */
@Fluent
public final class HelmUpgradeOptions implements JsonSerializable<HelmUpgradeOptions> {
    /*
     * The helm deployment atomic options
     */
    private String atomic;

    /*
     * The helm deployment wait options
     */
    private String waitOption;

    /*
     * The helm deployment timeout options
     */
    private String timeout;

    /**
     * Creates an instance of HelmUpgradeOptions class.
     */
    public HelmUpgradeOptions() {
    }

    /**
     * Get the atomic property: The helm deployment atomic options.
     * 
     * @return the atomic value.
     */
    public String atomic() {
        return this.atomic;
    }

    /**
     * Set the atomic property: The helm deployment atomic options.
     * 
     * @param atomic the atomic value to set.
     * @return the HelmUpgradeOptions object itself.
     */
    public HelmUpgradeOptions withAtomic(String atomic) {
        this.atomic = atomic;
        return this;
    }

    /**
     * Get the waitOption property: The helm deployment wait options.
     * 
     * @return the waitOption value.
     */
    public String waitOption() {
        return this.waitOption;
    }

    /**
     * Set the waitOption property: The helm deployment wait options.
     * 
     * @param waitOption the waitOption value to set.
     * @return the HelmUpgradeOptions object itself.
     */
    public HelmUpgradeOptions withWaitOption(String waitOption) {
        this.waitOption = waitOption;
        return this;
    }

    /**
     * Get the timeout property: The helm deployment timeout options.
     * 
     * @return the timeout value.
     */
    public String timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: The helm deployment timeout options.
     * 
     * @param timeout the timeout value to set.
     * @return the HelmUpgradeOptions object itself.
     */
    public HelmUpgradeOptions withTimeout(String timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("atomic", this.atomic);
        jsonWriter.writeStringField("wait", this.waitOption);
        jsonWriter.writeStringField("timeout", this.timeout);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HelmUpgradeOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HelmUpgradeOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HelmUpgradeOptions.
     */
    public static HelmUpgradeOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HelmUpgradeOptions deserializedHelmUpgradeOptions = new HelmUpgradeOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("atomic".equals(fieldName)) {
                    deserializedHelmUpgradeOptions.atomic = reader.getString();
                } else if ("wait".equals(fieldName)) {
                    deserializedHelmUpgradeOptions.waitOption = reader.getString();
                } else if ("timeout".equals(fieldName)) {
                    deserializedHelmUpgradeOptions.timeout = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHelmUpgradeOptions;
        });
    }
}
