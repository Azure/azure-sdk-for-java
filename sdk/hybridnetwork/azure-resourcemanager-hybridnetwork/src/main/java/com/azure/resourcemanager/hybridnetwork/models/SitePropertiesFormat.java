// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Site properties.
 */
@Fluent
public final class SitePropertiesFormat {
    /*
     * The provisioning state of the site resource. **TODO**: Confirm if this is needed.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * List of NFVIs
     */
    @JsonProperty(value = "nfvis")
    private List<NfvIs> nfvis;

    /*
     * The list of site network services on the site.
     */
    @JsonProperty(value = "siteNetworkServiceReferences", access = JsonProperty.Access.WRITE_ONLY)
    private List<ReferencedResource> siteNetworkServiceReferences;

    /**
     * Creates an instance of SitePropertiesFormat class.
     */
    public SitePropertiesFormat() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the site resource. **TODO**: Confirm if this is
     * needed.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the nfvis property: List of NFVIs.
     * 
     * @return the nfvis value.
     */
    public List<NfvIs> nfvis() {
        return this.nfvis;
    }

    /**
     * Set the nfvis property: List of NFVIs.
     * 
     * @param nfvis the nfvis value to set.
     * @return the SitePropertiesFormat object itself.
     */
    public SitePropertiesFormat withNfvis(List<NfvIs> nfvis) {
        this.nfvis = nfvis;
        return this;
    }

    /**
     * Get the siteNetworkServiceReferences property: The list of site network services on the site.
     * 
     * @return the siteNetworkServiceReferences value.
     */
    public List<ReferencedResource> siteNetworkServiceReferences() {
        return this.siteNetworkServiceReferences;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nfvis() != null) {
            nfvis().forEach(e -> e.validate());
        }
        if (siteNetworkServiceReferences() != null) {
            siteNetworkServiceReferences().forEach(e -> e.validate());
        }
    }
}
