// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Artifact manifest properties.
 */
@Fluent
public final class ArtifactManifestPropertiesFormat implements JsonSerializable<ArtifactManifestPropertiesFormat> {
    /*
     * The provisioning state of the ArtifactManifest resource.
     */
    private ProvisioningState provisioningState;

    /*
     * The artifact manifest state.
     */
    private ArtifactManifestState artifactManifestState;

    /*
     * The artifacts list.
     */
    private List<ManifestArtifactFormat> artifacts;

    /**
     * Creates an instance of ArtifactManifestPropertiesFormat class.
     */
    public ArtifactManifestPropertiesFormat() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the ArtifactManifest resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the artifactManifestState property: The artifact manifest state.
     * 
     * @return the artifactManifestState value.
     */
    public ArtifactManifestState artifactManifestState() {
        return this.artifactManifestState;
    }

    /**
     * Get the artifacts property: The artifacts list.
     * 
     * @return the artifacts value.
     */
    public List<ManifestArtifactFormat> artifacts() {
        return this.artifacts;
    }

    /**
     * Set the artifacts property: The artifacts list.
     * 
     * @param artifacts the artifacts value to set.
     * @return the ArtifactManifestPropertiesFormat object itself.
     */
    public ArtifactManifestPropertiesFormat withArtifacts(List<ManifestArtifactFormat> artifacts) {
        this.artifacts = artifacts;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (artifacts() != null) {
            artifacts().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("artifacts", this.artifacts, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArtifactManifestPropertiesFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArtifactManifestPropertiesFormat if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ArtifactManifestPropertiesFormat.
     */
    public static ArtifactManifestPropertiesFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArtifactManifestPropertiesFormat deserializedArtifactManifestPropertiesFormat
                = new ArtifactManifestPropertiesFormat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedArtifactManifestPropertiesFormat.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("artifactManifestState".equals(fieldName)) {
                    deserializedArtifactManifestPropertiesFormat.artifactManifestState
                        = ArtifactManifestState.fromString(reader.getString());
                } else if ("artifacts".equals(fieldName)) {
                    List<ManifestArtifactFormat> artifacts
                        = reader.readArray(reader1 -> ManifestArtifactFormat.fromJson(reader1));
                    deserializedArtifactManifestPropertiesFormat.artifacts = artifacts;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArtifactManifestPropertiesFormat;
        });
    }
}
