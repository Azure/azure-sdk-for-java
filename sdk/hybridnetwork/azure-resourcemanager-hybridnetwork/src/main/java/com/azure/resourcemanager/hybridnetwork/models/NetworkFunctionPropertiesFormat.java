// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Network function properties.
 */
@Fluent
public class NetworkFunctionPropertiesFormat implements JsonSerializable<NetworkFunctionPropertiesFormat> {
    /*
     * The value which indicates if NF values are secrets
     */
    private NetworkFunctionConfigurationType configurationType
        = NetworkFunctionConfigurationType.fromString("NetworkFunctionPropertiesFormat");

    /*
     * The provisioning state of the network function resource.
     */
    private ProvisioningState provisioningState;

    /*
     * The publisher name for the network function.
     */
    private String publisherName;

    /*
     * The scope of the publisher.
     */
    private PublisherScope publisherScope;

    /*
     * The network function definition group name for the network function.
     */
    private String networkFunctionDefinitionGroupName;

    /*
     * The network function definition version for the network function.
     */
    private String networkFunctionDefinitionVersion;

    /*
     * The location of the network function definition offering.
     */
    private String networkFunctionDefinitionOfferingLocation;

    /*
     * The network function definition version resource reference.
     */
    private DeploymentResourceIdReference networkFunctionDefinitionVersionResourceReference;

    /*
     * The nfvi type for the network function.
     */
    private NfviType nfviType;

    /*
     * The nfviId for the network function.
     */
    private String nfviId;

    /*
     * Indicates if software updates are allowed during deployment.
     */
    private Boolean allowSoftwareUpdate;

    /*
     * The role configuration override values from the user.
     */
    private List<String> roleOverrideValues;

    /**
     * Creates an instance of NetworkFunctionPropertiesFormat class.
     */
    public NetworkFunctionPropertiesFormat() {
    }

    /**
     * Get the configurationType property: The value which indicates if NF values are secrets.
     * 
     * @return the configurationType value.
     */
    public NetworkFunctionConfigurationType configurationType() {
        return this.configurationType;
    }

    /**
     * Get the provisioningState property: The provisioning state of the network function resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The provisioning state of the network function resource.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the NetworkFunctionPropertiesFormat object itself.
     */
    NetworkFunctionPropertiesFormat withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the publisherName property: The publisher name for the network function.
     * 
     * @return the publisherName value.
     */
    public String publisherName() {
        return this.publisherName;
    }

    /**
     * Set the publisherName property: The publisher name for the network function.
     * 
     * @param publisherName the publisherName value to set.
     * @return the NetworkFunctionPropertiesFormat object itself.
     */
    NetworkFunctionPropertiesFormat withPublisherName(String publisherName) {
        this.publisherName = publisherName;
        return this;
    }

    /**
     * Get the publisherScope property: The scope of the publisher.
     * 
     * @return the publisherScope value.
     */
    public PublisherScope publisherScope() {
        return this.publisherScope;
    }

    /**
     * Set the publisherScope property: The scope of the publisher.
     * 
     * @param publisherScope the publisherScope value to set.
     * @return the NetworkFunctionPropertiesFormat object itself.
     */
    NetworkFunctionPropertiesFormat withPublisherScope(PublisherScope publisherScope) {
        this.publisherScope = publisherScope;
        return this;
    }

    /**
     * Get the networkFunctionDefinitionGroupName property: The network function definition group name for the network
     * function.
     * 
     * @return the networkFunctionDefinitionGroupName value.
     */
    public String networkFunctionDefinitionGroupName() {
        return this.networkFunctionDefinitionGroupName;
    }

    /**
     * Set the networkFunctionDefinitionGroupName property: The network function definition group name for the network
     * function.
     * 
     * @param networkFunctionDefinitionGroupName the networkFunctionDefinitionGroupName value to set.
     * @return the NetworkFunctionPropertiesFormat object itself.
     */
    NetworkFunctionPropertiesFormat withNetworkFunctionDefinitionGroupName(String networkFunctionDefinitionGroupName) {
        this.networkFunctionDefinitionGroupName = networkFunctionDefinitionGroupName;
        return this;
    }

    /**
     * Get the networkFunctionDefinitionVersion property: The network function definition version for the network
     * function.
     * 
     * @return the networkFunctionDefinitionVersion value.
     */
    public String networkFunctionDefinitionVersion() {
        return this.networkFunctionDefinitionVersion;
    }

    /**
     * Set the networkFunctionDefinitionVersion property: The network function definition version for the network
     * function.
     * 
     * @param networkFunctionDefinitionVersion the networkFunctionDefinitionVersion value to set.
     * @return the NetworkFunctionPropertiesFormat object itself.
     */
    NetworkFunctionPropertiesFormat withNetworkFunctionDefinitionVersion(String networkFunctionDefinitionVersion) {
        this.networkFunctionDefinitionVersion = networkFunctionDefinitionVersion;
        return this;
    }

    /**
     * Get the networkFunctionDefinitionOfferingLocation property: The location of the network function definition
     * offering.
     * 
     * @return the networkFunctionDefinitionOfferingLocation value.
     */
    public String networkFunctionDefinitionOfferingLocation() {
        return this.networkFunctionDefinitionOfferingLocation;
    }

    /**
     * Set the networkFunctionDefinitionOfferingLocation property: The location of the network function definition
     * offering.
     * 
     * @param networkFunctionDefinitionOfferingLocation the networkFunctionDefinitionOfferingLocation value to set.
     * @return the NetworkFunctionPropertiesFormat object itself.
     */
    NetworkFunctionPropertiesFormat
        withNetworkFunctionDefinitionOfferingLocation(String networkFunctionDefinitionOfferingLocation) {
        this.networkFunctionDefinitionOfferingLocation = networkFunctionDefinitionOfferingLocation;
        return this;
    }

    /**
     * Get the networkFunctionDefinitionVersionResourceReference property: The network function definition version
     * resource reference.
     * 
     * @return the networkFunctionDefinitionVersionResourceReference value.
     */
    public DeploymentResourceIdReference networkFunctionDefinitionVersionResourceReference() {
        return this.networkFunctionDefinitionVersionResourceReference;
    }

    /**
     * Set the networkFunctionDefinitionVersionResourceReference property: The network function definition version
     * resource reference.
     * 
     * @param networkFunctionDefinitionVersionResourceReference the networkFunctionDefinitionVersionResourceReference
     * value to set.
     * @return the NetworkFunctionPropertiesFormat object itself.
     */
    public NetworkFunctionPropertiesFormat withNetworkFunctionDefinitionVersionResourceReference(
        DeploymentResourceIdReference networkFunctionDefinitionVersionResourceReference) {
        this.networkFunctionDefinitionVersionResourceReference = networkFunctionDefinitionVersionResourceReference;
        return this;
    }

    /**
     * Get the nfviType property: The nfvi type for the network function.
     * 
     * @return the nfviType value.
     */
    public NfviType nfviType() {
        return this.nfviType;
    }

    /**
     * Set the nfviType property: The nfvi type for the network function.
     * 
     * @param nfviType the nfviType value to set.
     * @return the NetworkFunctionPropertiesFormat object itself.
     */
    public NetworkFunctionPropertiesFormat withNfviType(NfviType nfviType) {
        this.nfviType = nfviType;
        return this;
    }

    /**
     * Get the nfviId property: The nfviId for the network function.
     * 
     * @return the nfviId value.
     */
    public String nfviId() {
        return this.nfviId;
    }

    /**
     * Set the nfviId property: The nfviId for the network function.
     * 
     * @param nfviId the nfviId value to set.
     * @return the NetworkFunctionPropertiesFormat object itself.
     */
    public NetworkFunctionPropertiesFormat withNfviId(String nfviId) {
        this.nfviId = nfviId;
        return this;
    }

    /**
     * Get the allowSoftwareUpdate property: Indicates if software updates are allowed during deployment.
     * 
     * @return the allowSoftwareUpdate value.
     */
    public Boolean allowSoftwareUpdate() {
        return this.allowSoftwareUpdate;
    }

    /**
     * Set the allowSoftwareUpdate property: Indicates if software updates are allowed during deployment.
     * 
     * @param allowSoftwareUpdate the allowSoftwareUpdate value to set.
     * @return the NetworkFunctionPropertiesFormat object itself.
     */
    public NetworkFunctionPropertiesFormat withAllowSoftwareUpdate(Boolean allowSoftwareUpdate) {
        this.allowSoftwareUpdate = allowSoftwareUpdate;
        return this;
    }

    /**
     * Get the roleOverrideValues property: The role configuration override values from the user.
     * 
     * @return the roleOverrideValues value.
     */
    public List<String> roleOverrideValues() {
        return this.roleOverrideValues;
    }

    /**
     * Set the roleOverrideValues property: The role configuration override values from the user.
     * 
     * @param roleOverrideValues the roleOverrideValues value to set.
     * @return the NetworkFunctionPropertiesFormat object itself.
     */
    public NetworkFunctionPropertiesFormat withRoleOverrideValues(List<String> roleOverrideValues) {
        this.roleOverrideValues = roleOverrideValues;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (networkFunctionDefinitionVersionResourceReference() != null) {
            networkFunctionDefinitionVersionResourceReference().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("configurationType",
            this.configurationType == null ? null : this.configurationType.toString());
        jsonWriter.writeJsonField("networkFunctionDefinitionVersionResourceReference",
            this.networkFunctionDefinitionVersionResourceReference);
        jsonWriter.writeStringField("nfviType", this.nfviType == null ? null : this.nfviType.toString());
        jsonWriter.writeStringField("nfviId", this.nfviId);
        jsonWriter.writeBooleanField("allowSoftwareUpdate", this.allowSoftwareUpdate);
        jsonWriter.writeArrayField("roleOverrideValues", this.roleOverrideValues,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkFunctionPropertiesFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkFunctionPropertiesFormat if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkFunctionPropertiesFormat.
     */
    public static NetworkFunctionPropertiesFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("configurationType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Secret".equals(discriminatorValue)) {
                    return NetworkFunctionValueWithSecrets.fromJson(readerToUse.reset());
                } else if ("Open".equals(discriminatorValue)) {
                    return NetworkFunctionValueWithoutSecrets.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static NetworkFunctionPropertiesFormat fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkFunctionPropertiesFormat deserializedNetworkFunctionPropertiesFormat
                = new NetworkFunctionPropertiesFormat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configurationType".equals(fieldName)) {
                    deserializedNetworkFunctionPropertiesFormat.configurationType
                        = NetworkFunctionConfigurationType.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNetworkFunctionPropertiesFormat.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("publisherName".equals(fieldName)) {
                    deserializedNetworkFunctionPropertiesFormat.publisherName = reader.getString();
                } else if ("publisherScope".equals(fieldName)) {
                    deserializedNetworkFunctionPropertiesFormat.publisherScope
                        = PublisherScope.fromString(reader.getString());
                } else if ("networkFunctionDefinitionGroupName".equals(fieldName)) {
                    deserializedNetworkFunctionPropertiesFormat.networkFunctionDefinitionGroupName = reader.getString();
                } else if ("networkFunctionDefinitionVersion".equals(fieldName)) {
                    deserializedNetworkFunctionPropertiesFormat.networkFunctionDefinitionVersion = reader.getString();
                } else if ("networkFunctionDefinitionOfferingLocation".equals(fieldName)) {
                    deserializedNetworkFunctionPropertiesFormat.networkFunctionDefinitionOfferingLocation
                        = reader.getString();
                } else if ("networkFunctionDefinitionVersionResourceReference".equals(fieldName)) {
                    deserializedNetworkFunctionPropertiesFormat.networkFunctionDefinitionVersionResourceReference
                        = DeploymentResourceIdReference.fromJson(reader);
                } else if ("nfviType".equals(fieldName)) {
                    deserializedNetworkFunctionPropertiesFormat.nfviType = NfviType.fromString(reader.getString());
                } else if ("nfviId".equals(fieldName)) {
                    deserializedNetworkFunctionPropertiesFormat.nfviId = reader.getString();
                } else if ("allowSoftwareUpdate".equals(fieldName)) {
                    deserializedNetworkFunctionPropertiesFormat.allowSoftwareUpdate
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("roleOverrideValues".equals(fieldName)) {
                    List<String> roleOverrideValues = reader.readArray(reader1 -> reader1.getString());
                    deserializedNetworkFunctionPropertiesFormat.roleOverrideValues = roleOverrideValues;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkFunctionPropertiesFormat;
        });
    }
}
