// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridnetwork.fluent.ProxyArtifactsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ProxyArtifactListOverviewInner;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ProxyArtifactVersionsListOverviewInner;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactChangeState;
import com.azure.resourcemanager.hybridnetwork.models.ProxyArtifactListOverview;
import com.azure.resourcemanager.hybridnetwork.models.ProxyArtifactVersionsListOverview;
import com.azure.resourcemanager.hybridnetwork.models.ProxyArtifacts;

public final class ProxyArtifactsImpl implements ProxyArtifacts {
    private static final ClientLogger LOGGER = new ClientLogger(ProxyArtifactsImpl.class);

    private final ProxyArtifactsClient innerClient;

    private final com.azure.resourcemanager.hybridnetwork.HybridNetworkManager serviceManager;

    public ProxyArtifactsImpl(ProxyArtifactsClient innerClient,
        com.azure.resourcemanager.hybridnetwork.HybridNetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ProxyArtifactListOverview> list(String resourceGroupName, String publisherName,
        String artifactStoreName) {
        PagedIterable<ProxyArtifactListOverviewInner> inner
            = this.serviceClient().list(resourceGroupName, publisherName, artifactStoreName);
        return Utils.mapPage(inner, inner1 -> new ProxyArtifactListOverviewImpl(inner1, this.manager()));
    }

    public PagedIterable<ProxyArtifactListOverview> list(String resourceGroupName, String publisherName,
        String artifactStoreName, Context context) {
        PagedIterable<ProxyArtifactListOverviewInner> inner
            = this.serviceClient().list(resourceGroupName, publisherName, artifactStoreName, context);
        return Utils.mapPage(inner, inner1 -> new ProxyArtifactListOverviewImpl(inner1, this.manager()));
    }

    public PagedIterable<ProxyArtifactVersionsListOverview> get(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactName) {
        PagedIterable<ProxyArtifactVersionsListOverviewInner> inner
            = this.serviceClient().get(resourceGroupName, publisherName, artifactStoreName, artifactName);
        return Utils.mapPage(inner, inner1 -> new ProxyArtifactVersionsListOverviewImpl(inner1, this.manager()));
    }

    public PagedIterable<ProxyArtifactVersionsListOverview> get(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactName, Context context) {
        PagedIterable<ProxyArtifactVersionsListOverviewInner> inner
            = this.serviceClient().get(resourceGroupName, publisherName, artifactStoreName, artifactName, context);
        return Utils.mapPage(inner, inner1 -> new ProxyArtifactVersionsListOverviewImpl(inner1, this.manager()));
    }

    public ProxyArtifactVersionsListOverview updateState(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactName, String artifactVersionName, ArtifactChangeState parameters) {
        ProxyArtifactVersionsListOverviewInner inner = this.serviceClient().updateState(resourceGroupName,
            publisherName, artifactStoreName, artifactName, artifactVersionName, parameters);
        if (inner != null) {
            return new ProxyArtifactVersionsListOverviewImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ProxyArtifactVersionsListOverview updateState(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactName, String artifactVersionName, ArtifactChangeState parameters,
        Context context) {
        ProxyArtifactVersionsListOverviewInner inner = this.serviceClient().updateState(resourceGroupName,
            publisherName, artifactStoreName, artifactName, artifactVersionName, parameters, context);
        if (inner != null) {
            return new ProxyArtifactVersionsListOverviewImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private ProxyArtifactsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridnetwork.HybridNetworkManager manager() {
        return this.serviceManager;
    }
}
