// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridnetwork.fluent.SiteNetworkServicesClient;
import com.azure.resourcemanager.hybridnetwork.fluent.models.SiteNetworkServiceInner;
import com.azure.resourcemanager.hybridnetwork.models.SiteNetworkService;
import com.azure.resourcemanager.hybridnetwork.models.SiteNetworkServices;

public final class SiteNetworkServicesImpl implements SiteNetworkServices {
    private static final ClientLogger LOGGER = new ClientLogger(SiteNetworkServicesImpl.class);

    private final SiteNetworkServicesClient innerClient;

    private final com.azure.resourcemanager.hybridnetwork.HybridNetworkManager serviceManager;

    public SiteNetworkServicesImpl(SiteNetworkServicesClient innerClient,
        com.azure.resourcemanager.hybridnetwork.HybridNetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void deleteByResourceGroup(String resourceGroupName, String siteNetworkServiceName) {
        this.serviceClient().delete(resourceGroupName, siteNetworkServiceName);
    }

    public void delete(String resourceGroupName, String siteNetworkServiceName, Context context) {
        this.serviceClient().delete(resourceGroupName, siteNetworkServiceName, context);
    }

    public Response<SiteNetworkService> getByResourceGroupWithResponse(String resourceGroupName,
        String siteNetworkServiceName, Context context) {
        Response<SiteNetworkServiceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, siteNetworkServiceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SiteNetworkServiceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteNetworkService getByResourceGroup(String resourceGroupName, String siteNetworkServiceName) {
        SiteNetworkServiceInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, siteNetworkServiceName);
        if (inner != null) {
            return new SiteNetworkServiceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<SiteNetworkService> list() {
        PagedIterable<SiteNetworkServiceInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new SiteNetworkServiceImpl(inner1, this.manager()));
    }

    public PagedIterable<SiteNetworkService> list(Context context) {
        PagedIterable<SiteNetworkServiceInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new SiteNetworkServiceImpl(inner1, this.manager()));
    }

    public PagedIterable<SiteNetworkService> listByResourceGroup(String resourceGroupName) {
        PagedIterable<SiteNetworkServiceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new SiteNetworkServiceImpl(inner1, this.manager()));
    }

    public PagedIterable<SiteNetworkService> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<SiteNetworkServiceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new SiteNetworkServiceImpl(inner1, this.manager()));
    }

    public SiteNetworkService getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String siteNetworkServiceName = Utils.getValueFromIdByName(id, "siteNetworkServices");
        if (siteNetworkServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'siteNetworkServices'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, siteNetworkServiceName, Context.NONE).getValue();
    }

    public Response<SiteNetworkService> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String siteNetworkServiceName = Utils.getValueFromIdByName(id, "siteNetworkServices");
        if (siteNetworkServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'siteNetworkServices'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, siteNetworkServiceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String siteNetworkServiceName = Utils.getValueFromIdByName(id, "siteNetworkServices");
        if (siteNetworkServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'siteNetworkServices'.", id)));
        }
        this.delete(resourceGroupName, siteNetworkServiceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String siteNetworkServiceName = Utils.getValueFromIdByName(id, "siteNetworkServices");
        if (siteNetworkServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'siteNetworkServices'.", id)));
        }
        this.delete(resourceGroupName, siteNetworkServiceName, context);
    }

    private SiteNetworkServicesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridnetwork.HybridNetworkManager manager() {
        return this.serviceManager;
    }

    public SiteNetworkServiceImpl define(String name) {
        return new SiteNetworkServiceImpl(name, this.manager());
    }
}
