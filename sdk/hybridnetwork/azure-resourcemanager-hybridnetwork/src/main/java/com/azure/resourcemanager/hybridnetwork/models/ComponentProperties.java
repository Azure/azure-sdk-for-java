// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The component properties of the network function.
 */
@Immutable
public final class ComponentProperties implements JsonSerializable<ComponentProperties> {
    /*
     * The provisioning state of the component resource.
     */
    private ProvisioningState provisioningState;

    /*
     * The JSON-serialized deployment profile of the component resource.
     */
    private String deploymentProfile;

    /*
     * The deployment status of the component resource.
     */
    private DeploymentStatusProperties deploymentStatus;

    /**
     * Creates an instance of ComponentProperties class.
     */
    public ComponentProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the component resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the deploymentProfile property: The JSON-serialized deployment profile of the component resource.
     * 
     * @return the deploymentProfile value.
     */
    public String deploymentProfile() {
        return this.deploymentProfile;
    }

    /**
     * Get the deploymentStatus property: The deployment status of the component resource.
     * 
     * @return the deploymentStatus value.
     */
    public DeploymentStatusProperties deploymentStatus() {
        return this.deploymentStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deploymentStatus() != null) {
            deploymentStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComponentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComponentProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComponentProperties.
     */
    public static ComponentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComponentProperties deserializedComponentProperties = new ComponentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedComponentProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("deploymentProfile".equals(fieldName)) {
                    deserializedComponentProperties.deploymentProfile = reader.getString();
                } else if ("deploymentStatus".equals(fieldName)) {
                    deserializedComponentProperties.deploymentStatus = DeploymentStatusProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComponentProperties;
        });
    }
}
