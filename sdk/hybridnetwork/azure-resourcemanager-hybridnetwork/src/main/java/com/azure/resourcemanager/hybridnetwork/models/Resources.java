// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The resources of the network function component.
 */
@Fluent
public final class Resources {
    /*
     * Deployments that are related to component resource.
     */
    @JsonProperty(value = "deployments")
    private List<Deployment> deployments;

    /*
     * Pods related to component resource.
     */
    @JsonProperty(value = "pods")
    private List<Pod> pods;

    /*
     * Replica sets related to component resource.
     */
    @JsonProperty(value = "replicaSets")
    private List<ReplicaSet> replicaSets;

    /*
     * Stateful sets related to component resource.
     */
    @JsonProperty(value = "statefulSets")
    private List<StatefulSet> statefulSets;

    /*
     * Daemonsets related to component resource.
     */
    @JsonProperty(value = "daemonSets")
    private List<DaemonSet> daemonSets;

    /**
     * Creates an instance of Resources class.
     */
    public Resources() {
    }

    /**
     * Get the deployments property: Deployments that are related to component resource.
     * 
     * @return the deployments value.
     */
    public List<Deployment> deployments() {
        return this.deployments;
    }

    /**
     * Set the deployments property: Deployments that are related to component resource.
     * 
     * @param deployments the deployments value to set.
     * @return the Resources object itself.
     */
    public Resources withDeployments(List<Deployment> deployments) {
        this.deployments = deployments;
        return this;
    }

    /**
     * Get the pods property: Pods related to component resource.
     * 
     * @return the pods value.
     */
    public List<Pod> pods() {
        return this.pods;
    }

    /**
     * Set the pods property: Pods related to component resource.
     * 
     * @param pods the pods value to set.
     * @return the Resources object itself.
     */
    public Resources withPods(List<Pod> pods) {
        this.pods = pods;
        return this;
    }

    /**
     * Get the replicaSets property: Replica sets related to component resource.
     * 
     * @return the replicaSets value.
     */
    public List<ReplicaSet> replicaSets() {
        return this.replicaSets;
    }

    /**
     * Set the replicaSets property: Replica sets related to component resource.
     * 
     * @param replicaSets the replicaSets value to set.
     * @return the Resources object itself.
     */
    public Resources withReplicaSets(List<ReplicaSet> replicaSets) {
        this.replicaSets = replicaSets;
        return this;
    }

    /**
     * Get the statefulSets property: Stateful sets related to component resource.
     * 
     * @return the statefulSets value.
     */
    public List<StatefulSet> statefulSets() {
        return this.statefulSets;
    }

    /**
     * Set the statefulSets property: Stateful sets related to component resource.
     * 
     * @param statefulSets the statefulSets value to set.
     * @return the Resources object itself.
     */
    public Resources withStatefulSets(List<StatefulSet> statefulSets) {
        this.statefulSets = statefulSets;
        return this;
    }

    /**
     * Get the daemonSets property: Daemonsets related to component resource.
     * 
     * @return the daemonSets value.
     */
    public List<DaemonSet> daemonSets() {
        return this.daemonSets;
    }

    /**
     * Set the daemonSets property: Daemonsets related to component resource.
     * 
     * @param daemonSets the daemonSets value to set.
     * @return the Resources object itself.
     */
    public Resources withDaemonSets(List<DaemonSet> daemonSets) {
        this.daemonSets = daemonSets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deployments() != null) {
            deployments().forEach(e -> e.validate());
        }
        if (pods() != null) {
            pods().forEach(e -> e.validate());
        }
        if (replicaSets() != null) {
            replicaSets().forEach(e -> e.validate());
        }
        if (statefulSets() != null) {
            statefulSets().forEach(e -> e.validate());
        }
        if (daemonSets() != null) {
            daemonSets().forEach(e -> e.validate());
        }
    }
}
