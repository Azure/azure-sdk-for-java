// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The deployment status properties of the network function component.
 */
@Fluent
public final class DeploymentStatusProperties implements JsonSerializable<DeploymentStatusProperties> {
    /*
     * The status of the component resource.
     */
    private Status status;

    /*
     * The resource related to the component resource.
     */
    private Resources resources;

    /*
     * The next expected update of deployment status.
     */
    private OffsetDateTime nextExpectedUpdateAt;

    /**
     * Creates an instance of DeploymentStatusProperties class.
     */
    public DeploymentStatusProperties() {
    }

    /**
     * Get the status property: The status of the component resource.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the component resource.
     * 
     * @param status the status value to set.
     * @return the DeploymentStatusProperties object itself.
     */
    public DeploymentStatusProperties withStatus(Status status) {
        this.status = status;
        return this;
    }

    /**
     * Get the resources property: The resource related to the component resource.
     * 
     * @return the resources value.
     */
    public Resources resources() {
        return this.resources;
    }

    /**
     * Set the resources property: The resource related to the component resource.
     * 
     * @param resources the resources value to set.
     * @return the DeploymentStatusProperties object itself.
     */
    public DeploymentStatusProperties withResources(Resources resources) {
        this.resources = resources;
        return this;
    }

    /**
     * Get the nextExpectedUpdateAt property: The next expected update of deployment status.
     * 
     * @return the nextExpectedUpdateAt value.
     */
    public OffsetDateTime nextExpectedUpdateAt() {
        return this.nextExpectedUpdateAt;
    }

    /**
     * Set the nextExpectedUpdateAt property: The next expected update of deployment status.
     * 
     * @param nextExpectedUpdateAt the nextExpectedUpdateAt value to set.
     * @return the DeploymentStatusProperties object itself.
     */
    public DeploymentStatusProperties withNextExpectedUpdateAt(OffsetDateTime nextExpectedUpdateAt) {
        this.nextExpectedUpdateAt = nextExpectedUpdateAt;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resources() != null) {
            resources().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeJsonField("resources", this.resources);
        jsonWriter.writeStringField("nextExpectedUpdateAt",
            this.nextExpectedUpdateAt == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.nextExpectedUpdateAt));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentStatusProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentStatusProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeploymentStatusProperties.
     */
    public static DeploymentStatusProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentStatusProperties deserializedDeploymentStatusProperties = new DeploymentStatusProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedDeploymentStatusProperties.status = Status.fromString(reader.getString());
                } else if ("resources".equals(fieldName)) {
                    deserializedDeploymentStatusProperties.resources = Resources.fromJson(reader);
                } else if ("nextExpectedUpdateAt".equals(fieldName)) {
                    deserializedDeploymentStatusProperties.nextExpectedUpdateAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentStatusProperties;
        });
    }
}
