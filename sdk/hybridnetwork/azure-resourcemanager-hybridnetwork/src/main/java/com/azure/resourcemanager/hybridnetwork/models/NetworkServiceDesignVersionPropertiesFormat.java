// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * network service design version properties.
 */
@Fluent
public final class NetworkServiceDesignVersionPropertiesFormat {
    /*
     * The provisioning state of the network service design version resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The network service design version state.
     */
    @JsonProperty(value = "versionState", access = JsonProperty.Access.WRITE_ONLY)
    private VersionState versionState;

    /*
     * The network service design version description.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * The configuration schemas to used to define the values.
     */
    @JsonProperty(value = "configurationGroupSchemaReferences")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, ReferencedResource> configurationGroupSchemaReferences;

    /*
     * The nfvis from the site.
     */
    @JsonProperty(value = "nfvisFromSite")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, NfviDetails> nfvisFromSite;

    /*
     * List of resource element template
     */
    @JsonProperty(value = "resourceElementTemplates")
    private List<ResourceElementTemplate> resourceElementTemplates;

    /**
     * Creates an instance of NetworkServiceDesignVersionPropertiesFormat class.
     */
    public NetworkServiceDesignVersionPropertiesFormat() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the network service design version resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the versionState property: The network service design version state.
     * 
     * @return the versionState value.
     */
    public VersionState versionState() {
        return this.versionState;
    }

    /**
     * Get the description property: The network service design version description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The network service design version description.
     * 
     * @param description the description value to set.
     * @return the NetworkServiceDesignVersionPropertiesFormat object itself.
     */
    public NetworkServiceDesignVersionPropertiesFormat withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the configurationGroupSchemaReferences property: The configuration schemas to used to define the values.
     * 
     * @return the configurationGroupSchemaReferences value.
     */
    public Map<String, ReferencedResource> configurationGroupSchemaReferences() {
        return this.configurationGroupSchemaReferences;
    }

    /**
     * Set the configurationGroupSchemaReferences property: The configuration schemas to used to define the values.
     * 
     * @param configurationGroupSchemaReferences the configurationGroupSchemaReferences value to set.
     * @return the NetworkServiceDesignVersionPropertiesFormat object itself.
     */
    public NetworkServiceDesignVersionPropertiesFormat
        withConfigurationGroupSchemaReferences(Map<String, ReferencedResource> configurationGroupSchemaReferences) {
        this.configurationGroupSchemaReferences = configurationGroupSchemaReferences;
        return this;
    }

    /**
     * Get the nfvisFromSite property: The nfvis from the site.
     * 
     * @return the nfvisFromSite value.
     */
    public Map<String, NfviDetails> nfvisFromSite() {
        return this.nfvisFromSite;
    }

    /**
     * Set the nfvisFromSite property: The nfvis from the site.
     * 
     * @param nfvisFromSite the nfvisFromSite value to set.
     * @return the NetworkServiceDesignVersionPropertiesFormat object itself.
     */
    public NetworkServiceDesignVersionPropertiesFormat withNfvisFromSite(Map<String, NfviDetails> nfvisFromSite) {
        this.nfvisFromSite = nfvisFromSite;
        return this;
    }

    /**
     * Get the resourceElementTemplates property: List of resource element template.
     * 
     * @return the resourceElementTemplates value.
     */
    public List<ResourceElementTemplate> resourceElementTemplates() {
        return this.resourceElementTemplates;
    }

    /**
     * Set the resourceElementTemplates property: List of resource element template.
     * 
     * @param resourceElementTemplates the resourceElementTemplates value to set.
     * @return the NetworkServiceDesignVersionPropertiesFormat object itself.
     */
    public NetworkServiceDesignVersionPropertiesFormat
        withResourceElementTemplates(List<ResourceElementTemplate> resourceElementTemplates) {
        this.resourceElementTemplates = resourceElementTemplates;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (configurationGroupSchemaReferences() != null) {
            configurationGroupSchemaReferences().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (nfvisFromSite() != null) {
            nfvisFromSite().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (resourceElementTemplates() != null) {
            resourceElementTemplates().forEach(e -> e.validate());
        }
    }
}
