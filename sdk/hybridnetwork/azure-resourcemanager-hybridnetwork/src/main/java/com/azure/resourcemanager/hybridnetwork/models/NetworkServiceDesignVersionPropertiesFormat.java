// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * network service design version properties.
 */
@Fluent
public final class NetworkServiceDesignVersionPropertiesFormat
    implements JsonSerializable<NetworkServiceDesignVersionPropertiesFormat> {
    /*
     * The provisioning state of the network service design version resource.
     */
    private ProvisioningState provisioningState;

    /*
     * The network service design version state.
     */
    private VersionState versionState;

    /*
     * The network service design version description.
     */
    private String description;

    /*
     * The configuration schemas to used to define the values.
     */
    private Map<String, ReferencedResource> configurationGroupSchemaReferences;

    /*
     * The nfvis from the site.
     */
    private Map<String, NfviDetails> nfvisFromSite;

    /*
     * List of resource element template
     */
    private List<ResourceElementTemplate> resourceElementTemplates;

    /**
     * Creates an instance of NetworkServiceDesignVersionPropertiesFormat class.
     */
    public NetworkServiceDesignVersionPropertiesFormat() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the network service design version resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the versionState property: The network service design version state.
     * 
     * @return the versionState value.
     */
    public VersionState versionState() {
        return this.versionState;
    }

    /**
     * Get the description property: The network service design version description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The network service design version description.
     * 
     * @param description the description value to set.
     * @return the NetworkServiceDesignVersionPropertiesFormat object itself.
     */
    public NetworkServiceDesignVersionPropertiesFormat withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the configurationGroupSchemaReferences property: The configuration schemas to used to define the values.
     * 
     * @return the configurationGroupSchemaReferences value.
     */
    public Map<String, ReferencedResource> configurationGroupSchemaReferences() {
        return this.configurationGroupSchemaReferences;
    }

    /**
     * Set the configurationGroupSchemaReferences property: The configuration schemas to used to define the values.
     * 
     * @param configurationGroupSchemaReferences the configurationGroupSchemaReferences value to set.
     * @return the NetworkServiceDesignVersionPropertiesFormat object itself.
     */
    public NetworkServiceDesignVersionPropertiesFormat
        withConfigurationGroupSchemaReferences(Map<String, ReferencedResource> configurationGroupSchemaReferences) {
        this.configurationGroupSchemaReferences = configurationGroupSchemaReferences;
        return this;
    }

    /**
     * Get the nfvisFromSite property: The nfvis from the site.
     * 
     * @return the nfvisFromSite value.
     */
    public Map<String, NfviDetails> nfvisFromSite() {
        return this.nfvisFromSite;
    }

    /**
     * Set the nfvisFromSite property: The nfvis from the site.
     * 
     * @param nfvisFromSite the nfvisFromSite value to set.
     * @return the NetworkServiceDesignVersionPropertiesFormat object itself.
     */
    public NetworkServiceDesignVersionPropertiesFormat withNfvisFromSite(Map<String, NfviDetails> nfvisFromSite) {
        this.nfvisFromSite = nfvisFromSite;
        return this;
    }

    /**
     * Get the resourceElementTemplates property: List of resource element template.
     * 
     * @return the resourceElementTemplates value.
     */
    public List<ResourceElementTemplate> resourceElementTemplates() {
        return this.resourceElementTemplates;
    }

    /**
     * Set the resourceElementTemplates property: List of resource element template.
     * 
     * @param resourceElementTemplates the resourceElementTemplates value to set.
     * @return the NetworkServiceDesignVersionPropertiesFormat object itself.
     */
    public NetworkServiceDesignVersionPropertiesFormat
        withResourceElementTemplates(List<ResourceElementTemplate> resourceElementTemplates) {
        this.resourceElementTemplates = resourceElementTemplates;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (configurationGroupSchemaReferences() != null) {
            configurationGroupSchemaReferences().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (nfvisFromSite() != null) {
            nfvisFromSite().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (resourceElementTemplates() != null) {
            resourceElementTemplates().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeMapField("configurationGroupSchemaReferences", this.configurationGroupSchemaReferences,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("nfvisFromSite", this.nfvisFromSite, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("resourceElementTemplates", this.resourceElementTemplates,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkServiceDesignVersionPropertiesFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkServiceDesignVersionPropertiesFormat if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkServiceDesignVersionPropertiesFormat.
     */
    public static NetworkServiceDesignVersionPropertiesFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkServiceDesignVersionPropertiesFormat deserializedNetworkServiceDesignVersionPropertiesFormat
                = new NetworkServiceDesignVersionPropertiesFormat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedNetworkServiceDesignVersionPropertiesFormat.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("versionState".equals(fieldName)) {
                    deserializedNetworkServiceDesignVersionPropertiesFormat.versionState
                        = VersionState.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedNetworkServiceDesignVersionPropertiesFormat.description = reader.getString();
                } else if ("configurationGroupSchemaReferences".equals(fieldName)) {
                    Map<String, ReferencedResource> configurationGroupSchemaReferences
                        = reader.readMap(reader1 -> ReferencedResource.fromJson(reader1));
                    deserializedNetworkServiceDesignVersionPropertiesFormat.configurationGroupSchemaReferences
                        = configurationGroupSchemaReferences;
                } else if ("nfvisFromSite".equals(fieldName)) {
                    Map<String, NfviDetails> nfvisFromSite = reader.readMap(reader1 -> NfviDetails.fromJson(reader1));
                    deserializedNetworkServiceDesignVersionPropertiesFormat.nfvisFromSite = nfvisFromSite;
                } else if ("resourceElementTemplates".equals(fieldName)) {
                    List<ResourceElementTemplate> resourceElementTemplates
                        = reader.readArray(reader1 -> ResourceElementTemplate.fromJson(reader1));
                    deserializedNetworkServiceDesignVersionPropertiesFormat.resourceElementTemplates
                        = resourceElementTemplates;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkServiceDesignVersionPropertiesFormat;
        });
    }
}
