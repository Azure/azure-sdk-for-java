// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Pod Event properties.
 */
@Fluent
public final class PodEvent implements JsonSerializable<PodEvent> {
    /*
     * The type of pod event.
     */
    private PodEventType type;

    /*
     * Event reason.
     */
    private String reason;

    /*
     * Event message.
     */
    private String message;

    /*
     * Event Last seen.
     */
    private OffsetDateTime lastSeenTime;

    /**
     * Creates an instance of PodEvent class.
     */
    public PodEvent() {
    }

    /**
     * Get the type property: The type of pod event.
     * 
     * @return the type value.
     */
    public PodEventType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of pod event.
     * 
     * @param type the type value to set.
     * @return the PodEvent object itself.
     */
    public PodEvent withType(PodEventType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the reason property: Event reason.
     * 
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Set the reason property: Event reason.
     * 
     * @param reason the reason value to set.
     * @return the PodEvent object itself.
     */
    public PodEvent withReason(String reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Get the message property: Event message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: Event message.
     * 
     * @param message the message value to set.
     * @return the PodEvent object itself.
     */
    public PodEvent withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the lastSeenTime property: Event Last seen.
     * 
     * @return the lastSeenTime value.
     */
    public OffsetDateTime lastSeenTime() {
        return this.lastSeenTime;
    }

    /**
     * Set the lastSeenTime property: Event Last seen.
     * 
     * @param lastSeenTime the lastSeenTime value to set.
     * @return the PodEvent object itself.
     */
    public PodEvent withLastSeenTime(OffsetDateTime lastSeenTime) {
        this.lastSeenTime = lastSeenTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("reason", this.reason);
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("lastSeenTime",
            this.lastSeenTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSeenTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PodEvent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PodEvent if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the PodEvent.
     */
    public static PodEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PodEvent deserializedPodEvent = new PodEvent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedPodEvent.type = PodEventType.fromString(reader.getString());
                } else if ("reason".equals(fieldName)) {
                    deserializedPodEvent.reason = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedPodEvent.message = reader.getString();
                } else if ("lastSeenTime".equals(fieldName)) {
                    deserializedPodEvent.lastSeenTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPodEvent;
        });
    }
}
