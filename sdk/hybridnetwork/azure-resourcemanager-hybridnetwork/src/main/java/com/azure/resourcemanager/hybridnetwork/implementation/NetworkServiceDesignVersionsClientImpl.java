// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hybridnetwork.fluent.NetworkServiceDesignVersionsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.models.NetworkServiceDesignVersionInner;
import com.azure.resourcemanager.hybridnetwork.fluent.models.NetworkServiceDesignVersionUpdateStateInner;
import com.azure.resourcemanager.hybridnetwork.models.NetworkServiceDesignVersionListResult;
import com.azure.resourcemanager.hybridnetwork.models.TagsObject;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in NetworkServiceDesignVersionsClient.
 */
public final class NetworkServiceDesignVersionsClientImpl implements NetworkServiceDesignVersionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final NetworkServiceDesignVersionsService service;

    /**
     * The service client containing this operation class.
     */
    private final HybridNetworkManagementClientImpl client;

    /**
     * Initializes an instance of NetworkServiceDesignVersionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    NetworkServiceDesignVersionsClientImpl(HybridNetworkManagementClientImpl client) {
        this.service = RestProxy.create(NetworkServiceDesignVersionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HybridNetworkManagementClientNetworkServiceDesignVersions to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HybridNetworkManagem")
    public interface NetworkServiceDesignVersionsService {
        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkServiceDesignGroups/{networkServiceDesignGroupName}/networkServiceDesignVersions/{networkServiceDesignVersionName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("networkServiceDesignGroupName") String networkServiceDesignGroupName,
            @PathParam("networkServiceDesignVersionName") String networkServiceDesignVersionName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkServiceDesignGroups/{networkServiceDesignGroupName}/networkServiceDesignVersions/{networkServiceDesignVersionName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("networkServiceDesignGroupName") String networkServiceDesignGroupName,
            @PathParam("networkServiceDesignVersionName") String networkServiceDesignVersionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") NetworkServiceDesignVersionInner parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkServiceDesignGroups/{networkServiceDesignGroupName}/networkServiceDesignVersions/{networkServiceDesignVersionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NetworkServiceDesignVersionInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("networkServiceDesignGroupName") String networkServiceDesignGroupName,
            @PathParam("networkServiceDesignVersionName") String networkServiceDesignVersionName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkServiceDesignGroups/{networkServiceDesignGroupName}/networkServiceDesignVersions/{networkServiceDesignVersionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NetworkServiceDesignVersionInner>> update(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("networkServiceDesignGroupName") String networkServiceDesignGroupName,
            @PathParam("networkServiceDesignVersionName") String networkServiceDesignVersionName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") TagsObject parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkServiceDesignGroups/{networkServiceDesignGroupName}/networkServiceDesignVersions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NetworkServiceDesignVersionListResult>> listByNetworkServiceDesignGroup(
            @HostParam("$host") String endpoint, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("networkServiceDesignGroupName") String networkServiceDesignGroupName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkServiceDesignGroups/{networkServiceDesignGroupName}/networkServiceDesignVersions/{networkServiceDesignVersionName}/updateState")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updateState(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("networkServiceDesignGroupName") String networkServiceDesignGroupName,
            @PathParam("networkServiceDesignVersionName") String networkServiceDesignVersionName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") NetworkServiceDesignVersionUpdateStateInner parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NetworkServiceDesignVersionListResult>> listByNetworkServiceDesignGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Deletes the specified network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkServiceDesignGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignGroupName is required and cannot be null."));
        }
        if (networkServiceDesignVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignVersionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the specified network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkServiceDesignGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignGroupName is required and cannot be null."));
        }
        if (networkServiceDesignVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignVersionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName, this.client.getApiVersion(),
            accept, context);
    }

    /**
     * Deletes the specified network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, publisherName,
            networkServiceDesignGroupName, networkServiceDesignVersionName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the specified network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, publisherName,
            networkServiceDesignGroupName, networkServiceDesignVersionName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes the specified network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName) {
        return this.beginDeleteAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName).getSyncPoller();
    }

    /**
     * Deletes the specified network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, context).getSyncPoller();
    }

    /**
     * Deletes the specified network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String publisherName, String networkServiceDesignGroupName,
        String networkServiceDesignVersionName) {
        return beginDeleteAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String publisherName, String networkServiceDesignGroupName,
        String networkServiceDesignVersionName, Context context) {
        return beginDeleteAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String publisherName, String networkServiceDesignGroupName,
        String networkServiceDesignVersionName) {
        deleteAsync(resourceGroupName, publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName)
            .block();
    }

    /**
     * Deletes the specified network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String publisherName, String networkServiceDesignGroupName,
        String networkServiceDesignVersionName, Context context) {
        deleteAsync(resourceGroupName, publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName,
            context).block();
    }

    /**
     * Creates or updates a network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network service design version along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        NetworkServiceDesignVersionInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkServiceDesignGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignGroupName is required and cannot be null."));
        }
        if (networkServiceDesignVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignVersionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName,
                this.client.getApiVersion(), parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network service design version along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        NetworkServiceDesignVersionInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkServiceDesignGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignGroupName is required and cannot be null."));
        }
        if (networkServiceDesignVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignVersionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName, this.client.getApiVersion(),
            parameters, accept, context);
    }

    /**
     * Creates or updates a network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of network service design version.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<NetworkServiceDesignVersionInner>, NetworkServiceDesignVersionInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String publisherName, String networkServiceDesignGroupName,
            String networkServiceDesignVersionName, NetworkServiceDesignVersionInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, publisherName,
            networkServiceDesignGroupName, networkServiceDesignVersionName, parameters);
        return this.client.<NetworkServiceDesignVersionInner, NetworkServiceDesignVersionInner>getLroResult(mono,
            this.client.getHttpPipeline(), NetworkServiceDesignVersionInner.class,
            NetworkServiceDesignVersionInner.class, this.client.getContext());
    }

    /**
     * Creates or updates a network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of network service design version.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<NetworkServiceDesignVersionInner>, NetworkServiceDesignVersionInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String publisherName, String networkServiceDesignGroupName,
            String networkServiceDesignVersionName, NetworkServiceDesignVersionInner parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, publisherName,
            networkServiceDesignGroupName, networkServiceDesignVersionName, parameters, context);
        return this.client.<NetworkServiceDesignVersionInner, NetworkServiceDesignVersionInner>getLroResult(mono,
            this.client.getHttpPipeline(), NetworkServiceDesignVersionInner.class,
            NetworkServiceDesignVersionInner.class, context);
    }

    /**
     * Creates or updates a network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of network service design version.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NetworkServiceDesignVersionInner>, NetworkServiceDesignVersionInner>
        beginCreateOrUpdate(String resourceGroupName, String publisherName, String networkServiceDesignGroupName,
            String networkServiceDesignVersionName, NetworkServiceDesignVersionInner parameters) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, parameters).getSyncPoller();
    }

    /**
     * Creates or updates a network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of network service design version.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NetworkServiceDesignVersionInner>, NetworkServiceDesignVersionInner>
        beginCreateOrUpdate(String resourceGroupName, String publisherName, String networkServiceDesignGroupName,
            String networkServiceDesignVersionName, NetworkServiceDesignVersionInner parameters, Context context) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, parameters, context).getSyncPoller();
    }

    /**
     * Creates or updates a network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network service design version on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkServiceDesignVersionInner> createOrUpdateAsync(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        NetworkServiceDesignVersionInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, parameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network service design version on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkServiceDesignVersionInner> createOrUpdateAsync(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        NetworkServiceDesignVersionInner parameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, parameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network service design version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkServiceDesignVersionInner createOrUpdate(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        NetworkServiceDesignVersionInner parameters) {
        return createOrUpdateAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, parameters).block();
    }

    /**
     * Creates or updates a network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network service design version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkServiceDesignVersionInner createOrUpdate(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        NetworkServiceDesignVersionInner parameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, parameters, context).block();
    }

    /**
     * Gets information about a network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a network service design version along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NetworkServiceDesignVersionInner>> getWithResponseAsync(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName, String networkServiceDesignVersionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkServiceDesignGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignGroupName is required and cannot be null."));
        }
        if (networkServiceDesignVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignVersionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets information about a network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a network service design version along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NetworkServiceDesignVersionInner>> getWithResponseAsync(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkServiceDesignGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignGroupName is required and cannot be null."));
        }
        if (networkServiceDesignVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignVersionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, publisherName,
            networkServiceDesignGroupName, networkServiceDesignVersionName, this.client.getApiVersion(), accept,
            context);
    }

    /**
     * Gets information about a network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a network service design version on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkServiceDesignVersionInner> getAsync(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName) {
        return getWithResponseAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets information about a network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a network service design version along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<NetworkServiceDesignVersionInner> getWithResponse(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName, Context context) {
        return getWithResponseAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, context).block();
    }

    /**
     * Gets information about a network service design version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a network service design version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkServiceDesignVersionInner get(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName) {
        return getWithResponse(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, Context.NONE).getValue();
    }

    /**
     * Updates a network service design version resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network service design version along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NetworkServiceDesignVersionInner>> updateWithResponseAsync(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        TagsObject parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkServiceDesignGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignGroupName is required and cannot be null."));
        }
        if (networkServiceDesignVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignVersionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName,
                this.client.getApiVersion(), parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates a network service design version resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network service design version along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NetworkServiceDesignVersionInner>> updateWithResponseAsync(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        TagsObject parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkServiceDesignGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignGroupName is required and cannot be null."));
        }
        if (networkServiceDesignVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignVersionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName, this.client.getApiVersion(),
            parameters, accept, context);
    }

    /**
     * Updates a network service design version resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network service design version on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkServiceDesignVersionInner> updateAsync(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName, TagsObject parameters) {
        return updateWithResponseAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, parameters).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates a network service design version resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network service design version along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<NetworkServiceDesignVersionInner> updateWithResponse(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName, TagsObject parameters,
        Context context) {
        return updateWithResponseAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, parameters, context).block();
    }

    /**
     * Updates a network service design version resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network service design version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkServiceDesignVersionInner update(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName, TagsObject parameters) {
        return updateWithResponse(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, parameters, Context.NONE).getValue();
    }

    /**
     * Gets information about a list of network service design versions under a network service design group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a list of network service design versions under a network service design group along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NetworkServiceDesignVersionInner>> listByNetworkServiceDesignGroupSinglePageAsync(
        String resourceGroupName, String publisherName, String networkServiceDesignGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkServiceDesignGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByNetworkServiceDesignGroup(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, publisherName, networkServiceDesignGroupName,
                this.client.getApiVersion(), accept, context))
            .<PagedResponse<NetworkServiceDesignVersionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets information about a list of network service design versions under a network service design group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a list of network service design versions under a network service design group along
     * with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NetworkServiceDesignVersionInner>> listByNetworkServiceDesignGroupSinglePageAsync(
        String resourceGroupName, String publisherName, String networkServiceDesignGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkServiceDesignGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByNetworkServiceDesignGroup(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, publisherName, networkServiceDesignGroupName, this.client.getApiVersion(), accept,
                context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Gets information about a list of network service design versions under a network service design group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a list of network service design versions under a network service design group as
     * paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<NetworkServiceDesignVersionInner> listByNetworkServiceDesignGroupAsync(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName) {
        return new PagedFlux<>(
            () -> listByNetworkServiceDesignGroupSinglePageAsync(resourceGroupName, publisherName,
                networkServiceDesignGroupName),
            nextLink -> listByNetworkServiceDesignGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Gets information about a list of network service design versions under a network service design group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a list of network service design versions under a network service design group as
     * paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<NetworkServiceDesignVersionInner> listByNetworkServiceDesignGroupAsync(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByNetworkServiceDesignGroupSinglePageAsync(resourceGroupName, publisherName,
                networkServiceDesignGroupName, context),
            nextLink -> listByNetworkServiceDesignGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets information about a list of network service design versions under a network service design group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a list of network service design versions under a network service design group as
     * paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NetworkServiceDesignVersionInner> listByNetworkServiceDesignGroup(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName) {
        return new PagedIterable<>(
            listByNetworkServiceDesignGroupAsync(resourceGroupName, publisherName, networkServiceDesignGroupName));
    }

    /**
     * Gets information about a list of network service design versions under a network service design group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a list of network service design versions under a network service design group as
     * paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NetworkServiceDesignVersionInner> listByNetworkServiceDesignGroup(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName, Context context) {
        return new PagedIterable<>(listByNetworkServiceDesignGroupAsync(resourceGroupName, publisherName,
            networkServiceDesignGroupName, context));
    }

    /**
     * Update network service design version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network service design version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher network service design version update request definition along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateStateWithResponseAsync(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        NetworkServiceDesignVersionUpdateStateInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkServiceDesignGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignGroupName is required and cannot be null."));
        }
        if (networkServiceDesignVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignVersionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.updateState(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName,
                this.client.getApiVersion(), parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update network service design version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network service design version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher network service design version update request definition along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateStateWithResponseAsync(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        NetworkServiceDesignVersionUpdateStateInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (networkServiceDesignGroupName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignGroupName is required and cannot be null."));
        }
        if (networkServiceDesignVersionName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter networkServiceDesignVersionName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.updateState(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            publisherName, networkServiceDesignGroupName, networkServiceDesignVersionName, this.client.getApiVersion(),
            parameters, accept, context);
    }

    /**
     * Update network service design version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network service design version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of publisher network service design version update request definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<NetworkServiceDesignVersionUpdateStateInner>, NetworkServiceDesignVersionUpdateStateInner>
        beginUpdateStateAsync(String resourceGroupName, String publisherName, String networkServiceDesignGroupName,
            String networkServiceDesignVersionName, NetworkServiceDesignVersionUpdateStateInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateStateWithResponseAsync(resourceGroupName, publisherName,
            networkServiceDesignGroupName, networkServiceDesignVersionName, parameters);
        return this.client
            .<NetworkServiceDesignVersionUpdateStateInner, NetworkServiceDesignVersionUpdateStateInner>getLroResult(
                mono, this.client.getHttpPipeline(), NetworkServiceDesignVersionUpdateStateInner.class,
                NetworkServiceDesignVersionUpdateStateInner.class, this.client.getContext());
    }

    /**
     * Update network service design version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network service design version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of publisher network service design version update request definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<NetworkServiceDesignVersionUpdateStateInner>, NetworkServiceDesignVersionUpdateStateInner>
        beginUpdateStateAsync(String resourceGroupName, String publisherName, String networkServiceDesignGroupName,
            String networkServiceDesignVersionName, NetworkServiceDesignVersionUpdateStateInner parameters,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateStateWithResponseAsync(resourceGroupName, publisherName,
            networkServiceDesignGroupName, networkServiceDesignVersionName, parameters, context);
        return this.client
            .<NetworkServiceDesignVersionUpdateStateInner, NetworkServiceDesignVersionUpdateStateInner>getLroResult(
                mono, this.client.getHttpPipeline(), NetworkServiceDesignVersionUpdateStateInner.class,
                NetworkServiceDesignVersionUpdateStateInner.class, context);
    }

    /**
     * Update network service design version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network service design version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of publisher network service design version update request definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<NetworkServiceDesignVersionUpdateStateInner>, NetworkServiceDesignVersionUpdateStateInner>
        beginUpdateState(String resourceGroupName, String publisherName, String networkServiceDesignGroupName,
            String networkServiceDesignVersionName, NetworkServiceDesignVersionUpdateStateInner parameters) {
        return this.beginUpdateStateAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, parameters).getSyncPoller();
    }

    /**
     * Update network service design version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network service design version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of publisher network service design version update request definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<NetworkServiceDesignVersionUpdateStateInner>, NetworkServiceDesignVersionUpdateStateInner>
        beginUpdateState(String resourceGroupName, String publisherName, String networkServiceDesignGroupName,
            String networkServiceDesignVersionName, NetworkServiceDesignVersionUpdateStateInner parameters,
            Context context) {
        return this.beginUpdateStateAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, parameters, context).getSyncPoller();
    }

    /**
     * Update network service design version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network service design version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher network service design version update request definition on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkServiceDesignVersionUpdateStateInner> updateStateAsync(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        NetworkServiceDesignVersionUpdateStateInner parameters) {
        return beginUpdateStateAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, parameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update network service design version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network service design version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher network service design version update request definition on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkServiceDesignVersionUpdateStateInner> updateStateAsync(String resourceGroupName,
        String publisherName, String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        NetworkServiceDesignVersionUpdateStateInner parameters, Context context) {
        return beginUpdateStateAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, parameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update network service design version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network service design version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher network service design version update request definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkServiceDesignVersionUpdateStateInner updateState(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        NetworkServiceDesignVersionUpdateStateInner parameters) {
        return updateStateAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, parameters).block();
    }

    /**
     * Update network service design version state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param networkServiceDesignGroupName The name of the network service design group.
     * @param networkServiceDesignVersionName The name of the network service design version. The name should conform to
     * the SemVer 2.0.0 specification: https://semver.org/spec/v2.0.0.html.
     * @param parameters Parameters supplied to update the state of network service design version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher network service design version update request definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkServiceDesignVersionUpdateStateInner updateState(String resourceGroupName, String publisherName,
        String networkServiceDesignGroupName, String networkServiceDesignVersionName,
        NetworkServiceDesignVersionUpdateStateInner parameters, Context context) {
        return updateStateAsync(resourceGroupName, publisherName, networkServiceDesignGroupName,
            networkServiceDesignVersionName, parameters, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of network service design versions along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NetworkServiceDesignVersionInner>>
        listByNetworkServiceDesignGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByNetworkServiceDesignGroupNext(nextLink, this.client.getEndpoint(),
                accept, context))
            .<PagedResponse<NetworkServiceDesignVersionInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of network service design versions along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NetworkServiceDesignVersionInner>>
        listByNetworkServiceDesignGroupNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByNetworkServiceDesignGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
