// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hybridnetwork.fluent.ProxyArtifactsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ProxyArtifactListOverviewInner;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ProxyArtifactVersionsListOverviewInner;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactChangeState;
import com.azure.resourcemanager.hybridnetwork.models.ProxyArtifactOverviewListResult;
import com.azure.resourcemanager.hybridnetwork.models.ProxyArtifactVersionsOverviewListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ProxyArtifactsClient.
 */
public final class ProxyArtifactsClientImpl implements ProxyArtifactsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ProxyArtifactsService service;

    /**
     * The service client containing this operation class.
     */
    private final HybridNetworkManagementClientImpl client;

    /**
     * Initializes an instance of ProxyArtifactsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ProxyArtifactsClientImpl(HybridNetworkManagementClientImpl client) {
        this.service
            = RestProxy.create(ProxyArtifactsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HybridNetworkManagementClientProxyArtifacts to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HybridNetworkManagem")
    public interface ProxyArtifactsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/artifactStores/{artifactStoreName}/artifacts")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProxyArtifactOverviewListResult>> list(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("artifactStoreName") String artifactStoreName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/artifactStores/{artifactStoreName}/artifactVersions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProxyArtifactVersionsOverviewListResult>> get(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("artifactStoreName") String artifactStoreName, @QueryParam("artifactName") String artifactName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/artifactStores/{artifactStoreName}/artifactVersions/{artifactVersionName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updateState(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("artifactStoreName") String artifactStoreName, @QueryParam("artifactName") String artifactName,
            @PathParam("artifactVersionName") String artifactVersionName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") ArtifactChangeState parameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProxyArtifactOverviewListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProxyArtifactVersionsOverviewListResult>> getNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Lists all the available artifacts in the parent Artifact Store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact list result along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProxyArtifactListOverviewInner>> listSinglePageAsync(String resourceGroupName,
        String publisherName, String artifactStoreName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), resourceGroupName, publisherName,
                artifactStoreName, this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context))
            .<PagedResponse<ProxyArtifactListOverviewInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all the available artifacts in the parent Artifact Store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact list result along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProxyArtifactListOverviewInner>> listSinglePageAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), resourceGroupName, publisherName, artifactStoreName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists all the available artifacts in the parent Artifact Store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact list result as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ProxyArtifactListOverviewInner> listAsync(String resourceGroupName, String publisherName,
        String artifactStoreName) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, publisherName, artifactStoreName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all the available artifacts in the parent Artifact Store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact list result as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ProxyArtifactListOverviewInner> listAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, publisherName, artifactStoreName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all the available artifacts in the parent Artifact Store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact list result as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProxyArtifactListOverviewInner> list(String resourceGroupName, String publisherName,
        String artifactStoreName) {
        return new PagedIterable<>(listAsync(resourceGroupName, publisherName, artifactStoreName));
    }

    /**
     * Lists all the available artifacts in the parent Artifact Store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact list result as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProxyArtifactListOverviewInner> list(String resourceGroupName, String publisherName,
        String artifactStoreName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, publisherName, artifactStoreName, context));
    }

    /**
     * Get a Artifact overview information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Artifact overview information along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProxyArtifactVersionsListOverviewInner>> getSinglePageAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, String artifactName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactName == null) {
            return Mono.error(new IllegalArgumentException("Parameter artifactName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getEndpoint(), resourceGroupName, publisherName, artifactStoreName,
                    artifactName, this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context))
            .<PagedResponse<ProxyArtifactVersionsListOverviewInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a Artifact overview information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Artifact overview information along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProxyArtifactVersionsListOverviewInner>> getSinglePageAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, String artifactName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactName == null) {
            return Mono.error(new IllegalArgumentException("Parameter artifactName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(this.client.getEndpoint(), resourceGroupName, publisherName, artifactStoreName, artifactName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get a Artifact overview information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Artifact overview information as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ProxyArtifactVersionsListOverviewInner> getAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactName) {
        return new PagedFlux<>(
            () -> getSinglePageAsync(resourceGroupName, publisherName, artifactStoreName, artifactName),
            nextLink -> getNextSinglePageAsync(nextLink));
    }

    /**
     * Get a Artifact overview information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Artifact overview information as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ProxyArtifactVersionsListOverviewInner> getAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactName, Context context) {
        return new PagedFlux<>(
            () -> getSinglePageAsync(resourceGroupName, publisherName, artifactStoreName, artifactName, context),
            nextLink -> getNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get a Artifact overview information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Artifact overview information as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProxyArtifactVersionsListOverviewInner> get(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactName) {
        return new PagedIterable<>(getAsync(resourceGroupName, publisherName, artifactStoreName, artifactName));
    }

    /**
     * Get a Artifact overview information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Artifact overview information as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProxyArtifactVersionsListOverviewInner> get(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactName, Context context) {
        return new PagedIterable<>(
            getAsync(resourceGroupName, publisherName, artifactStoreName, artifactName, context));
    }

    /**
     * Change artifact state defined in artifact store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @param artifactVersionName The name of the artifact version.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact overview along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateStateWithResponseAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, String artifactName, String artifactVersionName,
        ArtifactChangeState parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactName == null) {
            return Mono.error(new IllegalArgumentException("Parameter artifactName is required and cannot be null."));
        }
        if (artifactVersionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactVersionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.updateState(this.client.getEndpoint(), resourceGroupName, publisherName,
                artifactStoreName, artifactName, artifactVersionName, this.client.getApiVersion(),
                this.client.getSubscriptionId(), parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Change artifact state defined in artifact store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @param artifactVersionName The name of the artifact version.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact overview along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateStateWithResponseAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, String artifactName, String artifactVersionName,
        ArtifactChangeState parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactName == null) {
            return Mono.error(new IllegalArgumentException("Parameter artifactName is required and cannot be null."));
        }
        if (artifactVersionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactVersionName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.updateState(this.client.getEndpoint(), resourceGroupName, publisherName, artifactStoreName,
            artifactName, artifactVersionName, this.client.getApiVersion(), this.client.getSubscriptionId(), parameters,
            accept, context);
    }

    /**
     * Change artifact state defined in artifact store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @param artifactVersionName The name of the artifact version.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the proxy artifact overview.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProxyArtifactVersionsListOverviewInner>, ProxyArtifactVersionsListOverviewInner>
        beginUpdateStateAsync(String resourceGroupName, String publisherName, String artifactStoreName,
            String artifactName, String artifactVersionName, ArtifactChangeState parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateStateWithResponseAsync(resourceGroupName, publisherName,
            artifactStoreName, artifactName, artifactVersionName, parameters);
        return this.client.<ProxyArtifactVersionsListOverviewInner, ProxyArtifactVersionsListOverviewInner>getLroResult(
            mono, this.client.getHttpPipeline(), ProxyArtifactVersionsListOverviewInner.class,
            ProxyArtifactVersionsListOverviewInner.class, this.client.getContext());
    }

    /**
     * Change artifact state defined in artifact store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @param artifactVersionName The name of the artifact version.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the proxy artifact overview.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProxyArtifactVersionsListOverviewInner>, ProxyArtifactVersionsListOverviewInner>
        beginUpdateStateAsync(String resourceGroupName, String publisherName, String artifactStoreName,
            String artifactName, String artifactVersionName, ArtifactChangeState parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateStateWithResponseAsync(resourceGroupName, publisherName,
            artifactStoreName, artifactName, artifactVersionName, parameters, context);
        return this.client.<ProxyArtifactVersionsListOverviewInner, ProxyArtifactVersionsListOverviewInner>getLroResult(
            mono, this.client.getHttpPipeline(), ProxyArtifactVersionsListOverviewInner.class,
            ProxyArtifactVersionsListOverviewInner.class, context);
    }

    /**
     * Change artifact state defined in artifact store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @param artifactVersionName The name of the artifact version.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the proxy artifact overview.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProxyArtifactVersionsListOverviewInner>, ProxyArtifactVersionsListOverviewInner>
        beginUpdateState(String resourceGroupName, String publisherName, String artifactStoreName, String artifactName,
            String artifactVersionName, ArtifactChangeState parameters) {
        return this.beginUpdateStateAsync(resourceGroupName, publisherName, artifactStoreName, artifactName,
            artifactVersionName, parameters).getSyncPoller();
    }

    /**
     * Change artifact state defined in artifact store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @param artifactVersionName The name of the artifact version.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the proxy artifact overview.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProxyArtifactVersionsListOverviewInner>, ProxyArtifactVersionsListOverviewInner>
        beginUpdateState(String resourceGroupName, String publisherName, String artifactStoreName, String artifactName,
            String artifactVersionName, ArtifactChangeState parameters, Context context) {
        return this.beginUpdateStateAsync(resourceGroupName, publisherName, artifactStoreName, artifactName,
            artifactVersionName, parameters, context).getSyncPoller();
    }

    /**
     * Change artifact state defined in artifact store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @param artifactVersionName The name of the artifact version.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact overview on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProxyArtifactVersionsListOverviewInner> updateStateAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, String artifactName, String artifactVersionName,
        ArtifactChangeState parameters) {
        return beginUpdateStateAsync(resourceGroupName, publisherName, artifactStoreName, artifactName,
            artifactVersionName, parameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Change artifact state defined in artifact store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @param artifactVersionName The name of the artifact version.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact overview on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProxyArtifactVersionsListOverviewInner> updateStateAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, String artifactName, String artifactVersionName,
        ArtifactChangeState parameters, Context context) {
        return beginUpdateStateAsync(resourceGroupName, publisherName, artifactStoreName, artifactName,
            artifactVersionName, parameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Change artifact state defined in artifact store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @param artifactVersionName The name of the artifact version.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact overview.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProxyArtifactVersionsListOverviewInner updateState(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactName, String artifactVersionName, ArtifactChangeState parameters) {
        return updateStateAsync(resourceGroupName, publisherName, artifactStoreName, artifactName, artifactVersionName,
            parameters).block();
    }

    /**
     * Change artifact state defined in artifact store.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactName The name of the artifact.
     * @param artifactVersionName The name of the artifact version.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact overview.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProxyArtifactVersionsListOverviewInner updateState(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactName, String artifactVersionName, ArtifactChangeState parameters,
        Context context) {
        return updateStateAsync(resourceGroupName, publisherName, artifactStoreName, artifactName, artifactVersionName,
            parameters, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact list result along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProxyArtifactListOverviewInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ProxyArtifactListOverviewInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact list result along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProxyArtifactListOverviewInner>> listNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact list result along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProxyArtifactVersionsListOverviewInner>> getNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ProxyArtifactVersionsListOverviewInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proxy artifact list result along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ProxyArtifactVersionsListOverviewInner>> getNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
