// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Artifact profile properties.
 */
@Fluent
public class ArtifactProfile implements JsonSerializable<ArtifactProfile> {
    /*
     * The reference to artifact store.
     */
    private ReferencedResource artifactStore;

    /**
     * Creates an instance of ArtifactProfile class.
     */
    public ArtifactProfile() {
    }

    /**
     * Get the artifactStore property: The reference to artifact store.
     * 
     * @return the artifactStore value.
     */
    public ReferencedResource artifactStore() {
        return this.artifactStore;
    }

    /**
     * Set the artifactStore property: The reference to artifact store.
     * 
     * @param artifactStore the artifactStore value to set.
     * @return the ArtifactProfile object itself.
     */
    public ArtifactProfile withArtifactStore(ReferencedResource artifactStore) {
        this.artifactStore = artifactStore;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (artifactStore() != null) {
            artifactStore().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("artifactStore", this.artifactStore);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArtifactProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArtifactProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ArtifactProfile.
     */
    public static ArtifactProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArtifactProfile deserializedArtifactProfile = new ArtifactProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("artifactStore".equals(fieldName)) {
                    deserializedArtifactProfile.artifactStore = ReferencedResource.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArtifactProfile;
        });
    }
}
