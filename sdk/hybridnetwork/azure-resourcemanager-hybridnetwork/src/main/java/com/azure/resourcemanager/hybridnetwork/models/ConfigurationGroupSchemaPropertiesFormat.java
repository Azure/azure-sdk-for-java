// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration group schema properties.
 */
@Fluent
public final class ConfigurationGroupSchemaPropertiesFormat
    implements JsonSerializable<ConfigurationGroupSchemaPropertiesFormat> {
    /*
     * The provisioning state of the Configuration group schema resource.
     */
    private ProvisioningState provisioningState;

    /*
     * The configuration group schema version state.
     */
    private VersionState versionState;

    /*
     * Description of what schema can contain.
     */
    private String description;

    /*
     * Name and value pairs that define the configuration value. It can be a well formed escaped JSON string.
     */
    private String schemaDefinition;

    /**
     * Creates an instance of ConfigurationGroupSchemaPropertiesFormat class.
     */
    public ConfigurationGroupSchemaPropertiesFormat() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the Configuration group schema resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the versionState property: The configuration group schema version state.
     * 
     * @return the versionState value.
     */
    public VersionState versionState() {
        return this.versionState;
    }

    /**
     * Get the description property: Description of what schema can contain.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of what schema can contain.
     * 
     * @param description the description value to set.
     * @return the ConfigurationGroupSchemaPropertiesFormat object itself.
     */
    public ConfigurationGroupSchemaPropertiesFormat withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the schemaDefinition property: Name and value pairs that define the configuration value. It can be a well
     * formed escaped JSON string.
     * 
     * @return the schemaDefinition value.
     */
    public String schemaDefinition() {
        return this.schemaDefinition;
    }

    /**
     * Set the schemaDefinition property: Name and value pairs that define the configuration value. It can be a well
     * formed escaped JSON string.
     * 
     * @param schemaDefinition the schemaDefinition value to set.
     * @return the ConfigurationGroupSchemaPropertiesFormat object itself.
     */
    public ConfigurationGroupSchemaPropertiesFormat withSchemaDefinition(String schemaDefinition) {
        this.schemaDefinition = schemaDefinition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("schemaDefinition", this.schemaDefinition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigurationGroupSchemaPropertiesFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigurationGroupSchemaPropertiesFormat if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConfigurationGroupSchemaPropertiesFormat.
     */
    public static ConfigurationGroupSchemaPropertiesFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigurationGroupSchemaPropertiesFormat deserializedConfigurationGroupSchemaPropertiesFormat
                = new ConfigurationGroupSchemaPropertiesFormat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedConfigurationGroupSchemaPropertiesFormat.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("versionState".equals(fieldName)) {
                    deserializedConfigurationGroupSchemaPropertiesFormat.versionState
                        = VersionState.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedConfigurationGroupSchemaPropertiesFormat.description = reader.getString();
                } else if ("schemaDefinition".equals(fieldName)) {
                    deserializedConfigurationGroupSchemaPropertiesFormat.schemaDefinition = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigurationGroupSchemaPropertiesFormat;
        });
    }
}
