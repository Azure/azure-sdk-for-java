// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Network function application definition.
 */
@Fluent
public class NetworkFunctionApplication {
    /*
     * The name of the network function application.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Depends on profile definition.
     */
    @JsonProperty(value = "dependsOnProfile")
    private DependsOnProfile dependsOnProfile;

    /**
     * Creates an instance of NetworkFunctionApplication class.
     */
    public NetworkFunctionApplication() {
    }

    /**
     * Get the name property: The name of the network function application.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the network function application.
     * 
     * @param name the name value to set.
     * @return the NetworkFunctionApplication object itself.
     */
    public NetworkFunctionApplication withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the dependsOnProfile property: Depends on profile definition.
     * 
     * @return the dependsOnProfile value.
     */
    public DependsOnProfile dependsOnProfile() {
        return this.dependsOnProfile;
    }

    /**
     * Set the dependsOnProfile property: Depends on profile definition.
     * 
     * @param dependsOnProfile the dependsOnProfile value to set.
     * @return the NetworkFunctionApplication object itself.
     */
    public NetworkFunctionApplication withDependsOnProfile(DependsOnProfile dependsOnProfile) {
        this.dependsOnProfile = dependsOnProfile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dependsOnProfile() != null) {
            dependsOnProfile().validate();
        }
    }
}
