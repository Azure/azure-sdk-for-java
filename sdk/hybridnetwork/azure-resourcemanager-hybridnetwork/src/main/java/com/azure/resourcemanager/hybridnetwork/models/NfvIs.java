// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The NFVI object.
 */
@Fluent
public class NfvIs implements JsonSerializable<NfvIs> {
    /*
     * The NFVI type.
     */
    private NfviType nfviType = NfviType.fromString("NfvIs");

    /*
     * Name of the nfvi.
     */
    private String name;

    /**
     * Creates an instance of NfvIs class.
     */
    public NfvIs() {
    }

    /**
     * Get the nfviType property: The NFVI type.
     * 
     * @return the nfviType value.
     */
    public NfviType nfviType() {
        return this.nfviType;
    }

    /**
     * Get the name property: Name of the nfvi.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the nfvi.
     * 
     * @param name the name value to set.
     * @return the NfvIs object itself.
     */
    public NfvIs withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("nfviType", this.nfviType == null ? null : this.nfviType.toString());
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NfvIs from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NfvIs if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the NfvIs.
     */
    public static NfvIs fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("nfviType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("AzureCore".equals(discriminatorValue)) {
                    return AzureCoreNfviDetails.fromJson(readerToUse.reset());
                } else if ("AzureArcKubernetes".equals(discriminatorValue)) {
                    return AzureArcK8SClusterNfviDetails.fromJson(readerToUse.reset());
                } else if ("AzureOperatorNexus".equals(discriminatorValue)) {
                    return AzureOperatorNexusClusterNfviDetails.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static NfvIs fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NfvIs deserializedNfvIs = new NfvIs();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nfviType".equals(fieldName)) {
                    deserializedNfvIs.nfviType = NfviType.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedNfvIs.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNfvIs;
        });
    }
}
