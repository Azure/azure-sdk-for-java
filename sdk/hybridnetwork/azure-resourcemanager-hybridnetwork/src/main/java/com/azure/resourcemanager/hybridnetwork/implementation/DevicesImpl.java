// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridnetwork.fluent.DevicesClient;
import com.azure.resourcemanager.hybridnetwork.fluent.models.DeviceInner;
import com.azure.resourcemanager.hybridnetwork.fluent.models.DeviceRegistrationKeyInner;
import com.azure.resourcemanager.hybridnetwork.models.Device;
import com.azure.resourcemanager.hybridnetwork.models.DeviceRegistrationKey;
import com.azure.resourcemanager.hybridnetwork.models.Devices;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class DevicesImpl implements Devices {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DevicesImpl.class);

    private final DevicesClient innerClient;

    private final com.azure.resourcemanager.hybridnetwork.HybridNetworkManager serviceManager;

    public DevicesImpl(
        DevicesClient innerClient, com.azure.resourcemanager.hybridnetwork.HybridNetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void deleteByResourceGroup(String resourceGroupName, String deviceName) {
        this.serviceClient().delete(resourceGroupName, deviceName);
    }

    public void delete(String resourceGroupName, String deviceName, Context context) {
        this.serviceClient().delete(resourceGroupName, deviceName, context);
    }

    public Device getByResourceGroup(String resourceGroupName, String deviceName) {
        DeviceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, deviceName);
        if (inner != null) {
            return new DeviceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Device> getByResourceGroupWithResponse(
        String resourceGroupName, String deviceName, Context context) {
        Response<DeviceInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, deviceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeviceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<Device> list() {
        PagedIterable<DeviceInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new DeviceImpl(inner1, this.manager()));
    }

    public PagedIterable<Device> list(Context context) {
        PagedIterable<DeviceInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new DeviceImpl(inner1, this.manager()));
    }

    public PagedIterable<Device> listByResourceGroup(String resourceGroupName) {
        PagedIterable<DeviceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new DeviceImpl(inner1, this.manager()));
    }

    public PagedIterable<Device> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<DeviceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new DeviceImpl(inner1, this.manager()));
    }

    public DeviceRegistrationKey listRegistrationKey(String resourceGroupName, String deviceName) {
        DeviceRegistrationKeyInner inner = this.serviceClient().listRegistrationKey(resourceGroupName, deviceName);
        if (inner != null) {
            return new DeviceRegistrationKeyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeviceRegistrationKey> listRegistrationKeyWithResponse(
        String resourceGroupName, String deviceName, Context context) {
        Response<DeviceRegistrationKeyInner> inner =
            this.serviceClient().listRegistrationKeyWithResponse(resourceGroupName, deviceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeviceRegistrationKeyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Device getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String deviceName = Utils.getValueFromIdByName(id, "devices");
        if (deviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'devices'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, deviceName, Context.NONE).getValue();
    }

    public Response<Device> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String deviceName = Utils.getValueFromIdByName(id, "devices");
        if (deviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'devices'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, deviceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String deviceName = Utils.getValueFromIdByName(id, "devices");
        if (deviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'devices'.", id)));
        }
        this.delete(resourceGroupName, deviceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String deviceName = Utils.getValueFromIdByName(id, "devices");
        if (deviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'devices'.", id)));
        }
        this.delete(resourceGroupName, deviceName, context);
    }

    private DevicesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridnetwork.HybridNetworkManager manager() {
        return this.serviceManager;
    }

    public DeviceImpl define(String name) {
        return new DeviceImpl(name, this.manager());
    }
}
