// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridnetwork.fluent.ArtifactManifestsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ArtifactAccessCredentialInner;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ArtifactManifestInner;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ArtifactManifestUpdateStateInner;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactAccessCredential;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactManifest;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactManifestUpdateState;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactManifests;

public final class ArtifactManifestsImpl implements ArtifactManifests {
    private static final ClientLogger LOGGER = new ClientLogger(ArtifactManifestsImpl.class);

    private final ArtifactManifestsClient innerClient;

    private final com.azure.resourcemanager.hybridnetwork.HybridNetworkManager serviceManager;

    public ArtifactManifestsImpl(ArtifactManifestsClient innerClient,
        com.azure.resourcemanager.hybridnetwork.HybridNetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ArtifactManifest> listByArtifactStore(String resourceGroupName, String publisherName,
        String artifactStoreName) {
        PagedIterable<ArtifactManifestInner> inner
            = this.serviceClient().listByArtifactStore(resourceGroupName, publisherName, artifactStoreName);
        return Utils.mapPage(inner, inner1 -> new ArtifactManifestImpl(inner1, this.manager()));
    }

    public PagedIterable<ArtifactManifest> listByArtifactStore(String resourceGroupName, String publisherName,
        String artifactStoreName, Context context) {
        PagedIterable<ArtifactManifestInner> inner
            = this.serviceClient().listByArtifactStore(resourceGroupName, publisherName, artifactStoreName, context);
        return Utils.mapPage(inner, inner1 -> new ArtifactManifestImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String publisherName, String artifactStoreName,
        String artifactManifestName) {
        this.serviceClient().delete(resourceGroupName, publisherName, artifactStoreName, artifactManifestName);
    }

    public void delete(String resourceGroupName, String publisherName, String artifactStoreName,
        String artifactManifestName, Context context) {
        this.serviceClient().delete(resourceGroupName, publisherName, artifactStoreName, artifactManifestName, context);
    }

    public Response<ArtifactManifest> getWithResponse(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, Context context) {
        Response<ArtifactManifestInner> inner = this.serviceClient().getWithResponse(resourceGroupName, publisherName,
            artifactStoreName, artifactManifestName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ArtifactManifestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ArtifactManifest get(String resourceGroupName, String publisherName, String artifactStoreName,
        String artifactManifestName) {
        ArtifactManifestInner inner
            = this.serviceClient().get(resourceGroupName, publisherName, artifactStoreName, artifactManifestName);
        if (inner != null) {
            return new ArtifactManifestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ArtifactAccessCredential> listCredentialWithResponse(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, Context context) {
        Response<ArtifactAccessCredentialInner> inner = this.serviceClient().listCredentialWithResponse(
            resourceGroupName, publisherName, artifactStoreName, artifactManifestName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ArtifactAccessCredentialImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ArtifactAccessCredential listCredential(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName) {
        ArtifactAccessCredentialInner inner = this.serviceClient().listCredential(resourceGroupName, publisherName,
            artifactStoreName, artifactManifestName);
        if (inner != null) {
            return new ArtifactAccessCredentialImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ArtifactManifestUpdateState updateState(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, ArtifactManifestUpdateStateInner parameters) {
        ArtifactManifestUpdateStateInner inner = this.serviceClient().updateState(resourceGroupName, publisherName,
            artifactStoreName, artifactManifestName, parameters);
        if (inner != null) {
            return new ArtifactManifestUpdateStateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ArtifactManifestUpdateState updateState(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, ArtifactManifestUpdateStateInner parameters,
        Context context) {
        ArtifactManifestUpdateStateInner inner = this.serviceClient().updateState(resourceGroupName, publisherName,
            artifactStoreName, artifactManifestName, parameters, context);
        if (inner != null) {
            return new ArtifactManifestUpdateStateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ArtifactManifest getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String publisherName = Utils.getValueFromIdByName(id, "publishers");
        if (publisherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publishers'.", id)));
        }
        String artifactStoreName = Utils.getValueFromIdByName(id, "artifactStores");
        if (artifactStoreName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'artifactStores'.", id)));
        }
        String artifactManifestName = Utils.getValueFromIdByName(id, "artifactManifests");
        if (artifactManifestName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'artifactManifests'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, publisherName, artifactStoreName, artifactManifestName, Context.NONE)
            .getValue();
    }

    public Response<ArtifactManifest> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String publisherName = Utils.getValueFromIdByName(id, "publishers");
        if (publisherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publishers'.", id)));
        }
        String artifactStoreName = Utils.getValueFromIdByName(id, "artifactStores");
        if (artifactStoreName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'artifactStores'.", id)));
        }
        String artifactManifestName = Utils.getValueFromIdByName(id, "artifactManifests");
        if (artifactManifestName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'artifactManifests'.", id)));
        }
        return this.getWithResponse(resourceGroupName, publisherName, artifactStoreName, artifactManifestName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String publisherName = Utils.getValueFromIdByName(id, "publishers");
        if (publisherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publishers'.", id)));
        }
        String artifactStoreName = Utils.getValueFromIdByName(id, "artifactStores");
        if (artifactStoreName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'artifactStores'.", id)));
        }
        String artifactManifestName = Utils.getValueFromIdByName(id, "artifactManifests");
        if (artifactManifestName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'artifactManifests'.", id)));
        }
        this.delete(resourceGroupName, publisherName, artifactStoreName, artifactManifestName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String publisherName = Utils.getValueFromIdByName(id, "publishers");
        if (publisherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publishers'.", id)));
        }
        String artifactStoreName = Utils.getValueFromIdByName(id, "artifactStores");
        if (artifactStoreName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'artifactStores'.", id)));
        }
        String artifactManifestName = Utils.getValueFromIdByName(id, "artifactManifests");
        if (artifactManifestName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'artifactManifests'.", id)));
        }
        this.delete(resourceGroupName, publisherName, artifactStoreName, artifactManifestName, context);
    }

    private ArtifactManifestsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridnetwork.HybridNetworkManager manager() {
        return this.serviceManager;
    }

    public ArtifactManifestImpl define(String name) {
        return new ArtifactManifestImpl(name, this.manager());
    }
}
