// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request metadata of execute request post call payload.
 */
@Fluent
public final class RequestMetadata implements JsonSerializable<RequestMetadata> {
    /*
     * The relative path of the request.
     */
    private String relativePath;

    /*
     * The http method of the request.
     */
    private HttpMethod httpMethod;

    /*
     * The serialized body of the request.
     */
    private String serializedBody;

    /*
     * The api version of the request.
     */
    private String apiVersion;

    /**
     * Creates an instance of RequestMetadata class.
     */
    public RequestMetadata() {
    }

    /**
     * Get the relativePath property: The relative path of the request.
     * 
     * @return the relativePath value.
     */
    public String relativePath() {
        return this.relativePath;
    }

    /**
     * Set the relativePath property: The relative path of the request.
     * 
     * @param relativePath the relativePath value to set.
     * @return the RequestMetadata object itself.
     */
    public RequestMetadata withRelativePath(String relativePath) {
        this.relativePath = relativePath;
        return this;
    }

    /**
     * Get the httpMethod property: The http method of the request.
     * 
     * @return the httpMethod value.
     */
    public HttpMethod httpMethod() {
        return this.httpMethod;
    }

    /**
     * Set the httpMethod property: The http method of the request.
     * 
     * @param httpMethod the httpMethod value to set.
     * @return the RequestMetadata object itself.
     */
    public RequestMetadata withHttpMethod(HttpMethod httpMethod) {
        this.httpMethod = httpMethod;
        return this;
    }

    /**
     * Get the serializedBody property: The serialized body of the request.
     * 
     * @return the serializedBody value.
     */
    public String serializedBody() {
        return this.serializedBody;
    }

    /**
     * Set the serializedBody property: The serialized body of the request.
     * 
     * @param serializedBody the serializedBody value to set.
     * @return the RequestMetadata object itself.
     */
    public RequestMetadata withSerializedBody(String serializedBody) {
        this.serializedBody = serializedBody;
        return this;
    }

    /**
     * Get the apiVersion property: The api version of the request.
     * 
     * @return the apiVersion value.
     */
    public String apiVersion() {
        return this.apiVersion;
    }

    /**
     * Set the apiVersion property: The api version of the request.
     * 
     * @param apiVersion the apiVersion value to set.
     * @return the RequestMetadata object itself.
     */
    public RequestMetadata withApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (relativePath() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property relativePath in model RequestMetadata"));
        }
        if (httpMethod() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property httpMethod in model RequestMetadata"));
        }
        if (serializedBody() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property serializedBody in model RequestMetadata"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RequestMetadata.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("relativePath", this.relativePath);
        jsonWriter.writeStringField("httpMethod", this.httpMethod == null ? null : this.httpMethod.toString());
        jsonWriter.writeStringField("serializedBody", this.serializedBody);
        jsonWriter.writeStringField("apiVersion", this.apiVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RequestMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RequestMetadata if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RequestMetadata.
     */
    public static RequestMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RequestMetadata deserializedRequestMetadata = new RequestMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("relativePath".equals(fieldName)) {
                    deserializedRequestMetadata.relativePath = reader.getString();
                } else if ("httpMethod".equals(fieldName)) {
                    deserializedRequestMetadata.httpMethod = HttpMethod.fromString(reader.getString());
                } else if ("serializedBody".equals(fieldName)) {
                    deserializedRequestMetadata.serializedBody = reader.getString();
                } else if ("apiVersion".equals(fieldName)) {
                    deserializedRequestMetadata.apiVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRequestMetadata;
        });
    }
}
