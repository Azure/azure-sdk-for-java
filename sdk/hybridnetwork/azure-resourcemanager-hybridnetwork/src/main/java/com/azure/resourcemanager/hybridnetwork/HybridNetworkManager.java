// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridnetwork.fluent.HybridNetworkManagementClient;
import com.azure.resourcemanager.hybridnetwork.implementation.DevicesImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.HybridNetworkManagementClientBuilder;
import com.azure.resourcemanager.hybridnetwork.implementation.NetworkFunctionVendorSkusImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.NetworkFunctionVendorsImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.NetworkFunctionsImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.OperationsImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.RoleInstancesImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.VendorNetworkFunctionsImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.VendorSkuPreviewsImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.VendorSkusImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.VendorsImpl;
import com.azure.resourcemanager.hybridnetwork.models.Devices;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunctionVendorSkus;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunctionVendors;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunctions;
import com.azure.resourcemanager.hybridnetwork.models.Operations;
import com.azure.resourcemanager.hybridnetwork.models.RoleInstances;
import com.azure.resourcemanager.hybridnetwork.models.VendorNetworkFunctions;
import com.azure.resourcemanager.hybridnetwork.models.VendorSkuPreviews;
import com.azure.resourcemanager.hybridnetwork.models.VendorSkus;
import com.azure.resourcemanager.hybridnetwork.models.Vendors;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Entry point to HybridNetworkManager. The definitions in this swagger specification will be used to manage the Hybrid
 * Network resources.
 */
public final class HybridNetworkManager {
    private NetworkFunctions networkFunctions;

    private Devices devices;

    private Operations operations;

    private Vendors vendors;

    private VendorSkus vendorSkus;

    private VendorSkuPreviews vendorSkuPreviews;

    private NetworkFunctionVendors networkFunctionVendors;

    private NetworkFunctionVendorSkus networkFunctionVendorSkus;

    private VendorNetworkFunctions vendorNetworkFunctions;

    private RoleInstances roleInstances;

    private final HybridNetworkManagementClient clientObject;

    private HybridNetworkManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new HybridNetworkManagementClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of HybridNetwork service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the HybridNetwork service API instance.
     */
    public static HybridNetworkManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Gets a Configurable instance that can be used to create HybridNetworkManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new HybridNetworkManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private final ClientLogger logger = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval = Objects.requireNonNull(defaultPollInterval, "'retryPolicy' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw logger.logExceptionAsError(new IllegalArgumentException("'httpPipeline' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of HybridNetwork service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the HybridNetwork service API instance.
         */
        public HybridNetworkManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.hybridnetwork")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new RequestIdPolicy());
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies.addAll(this.policies);
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new HybridNetworkManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /** @return Resource collection API of NetworkFunctions. */
    public NetworkFunctions networkFunctions() {
        if (this.networkFunctions == null) {
            this.networkFunctions = new NetworkFunctionsImpl(clientObject.getNetworkFunctions(), this);
        }
        return networkFunctions;
    }

    /** @return Resource collection API of Devices. */
    public Devices devices() {
        if (this.devices == null) {
            this.devices = new DevicesImpl(clientObject.getDevices(), this);
        }
        return devices;
    }

    /** @return Resource collection API of Operations. */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /** @return Resource collection API of Vendors. */
    public Vendors vendors() {
        if (this.vendors == null) {
            this.vendors = new VendorsImpl(clientObject.getVendors(), this);
        }
        return vendors;
    }

    /** @return Resource collection API of VendorSkus. */
    public VendorSkus vendorSkus() {
        if (this.vendorSkus == null) {
            this.vendorSkus = new VendorSkusImpl(clientObject.getVendorSkus(), this);
        }
        return vendorSkus;
    }

    /** @return Resource collection API of VendorSkuPreviews. */
    public VendorSkuPreviews vendorSkuPreviews() {
        if (this.vendorSkuPreviews == null) {
            this.vendorSkuPreviews = new VendorSkuPreviewsImpl(clientObject.getVendorSkuPreviews(), this);
        }
        return vendorSkuPreviews;
    }

    /** @return Resource collection API of NetworkFunctionVendors. */
    public NetworkFunctionVendors networkFunctionVendors() {
        if (this.networkFunctionVendors == null) {
            this.networkFunctionVendors =
                new NetworkFunctionVendorsImpl(clientObject.getNetworkFunctionVendors(), this);
        }
        return networkFunctionVendors;
    }

    /** @return Resource collection API of NetworkFunctionVendorSkus. */
    public NetworkFunctionVendorSkus networkFunctionVendorSkus() {
        if (this.networkFunctionVendorSkus == null) {
            this.networkFunctionVendorSkus =
                new NetworkFunctionVendorSkusImpl(clientObject.getNetworkFunctionVendorSkus(), this);
        }
        return networkFunctionVendorSkus;
    }

    /** @return Resource collection API of VendorNetworkFunctions. */
    public VendorNetworkFunctions vendorNetworkFunctions() {
        if (this.vendorNetworkFunctions == null) {
            this.vendorNetworkFunctions =
                new VendorNetworkFunctionsImpl(clientObject.getVendorNetworkFunctions(), this);
        }
        return vendorNetworkFunctions;
    }

    /** @return Resource collection API of RoleInstances. */
    public RoleInstances roleInstances() {
        if (this.roleInstances == null) {
            this.roleInstances = new RoleInstancesImpl(clientObject.getRoleInstances(), this);
        }
        return roleInstances;
    }

    /**
     * @return Wrapped service client HybridNetworkManagementClient providing direct access to the underlying
     *     auto-generated API implementation, based on Azure REST API.
     */
    public HybridNetworkManagementClient serviceClient() {
        return this.clientObject;
    }
}
