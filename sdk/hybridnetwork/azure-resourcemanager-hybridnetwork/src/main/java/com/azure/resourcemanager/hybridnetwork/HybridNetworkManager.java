// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridnetwork.fluent.HybridNetworkManagementClient;
import com.azure.resourcemanager.hybridnetwork.implementation.ArtifactManifestsImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.ArtifactStoresImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.ComponentsImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.ConfigurationGroupSchemasImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.ConfigurationGroupValuesImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.HybridNetworkManagementClientBuilder;
import com.azure.resourcemanager.hybridnetwork.implementation.NetworkFunctionDefinitionGroupsImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.NetworkFunctionDefinitionVersionsImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.NetworkFunctionsImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.NetworkServiceDesignGroupsImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.NetworkServiceDesignVersionsImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.OperationsImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.ProxyArtifactsImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.PublishersImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.SiteNetworkServicesImpl;
import com.azure.resourcemanager.hybridnetwork.implementation.SitesImpl;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactManifests;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactStores;
import com.azure.resourcemanager.hybridnetwork.models.Components;
import com.azure.resourcemanager.hybridnetwork.models.ConfigurationGroupSchemas;
import com.azure.resourcemanager.hybridnetwork.models.ConfigurationGroupValues;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunctionDefinitionGroups;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunctionDefinitionVersions;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunctions;
import com.azure.resourcemanager.hybridnetwork.models.NetworkServiceDesignGroups;
import com.azure.resourcemanager.hybridnetwork.models.NetworkServiceDesignVersions;
import com.azure.resourcemanager.hybridnetwork.models.Operations;
import com.azure.resourcemanager.hybridnetwork.models.ProxyArtifacts;
import com.azure.resourcemanager.hybridnetwork.models.Publishers;
import com.azure.resourcemanager.hybridnetwork.models.SiteNetworkServices;
import com.azure.resourcemanager.hybridnetwork.models.Sites;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Entry point to HybridNetworkManager.
 * The definitions in this swagger specification will be used to manage the Hybrid Network resources.
 */
public final class HybridNetworkManager {
    private ConfigurationGroupSchemas configurationGroupSchemas;

    private ConfigurationGroupValues configurationGroupValues;

    private NetworkFunctions networkFunctions;

    private Components components;

    private NetworkFunctionDefinitionGroups networkFunctionDefinitionGroups;

    private NetworkFunctionDefinitionVersions networkFunctionDefinitionVersions;

    private NetworkServiceDesignGroups networkServiceDesignGroups;

    private NetworkServiceDesignVersions networkServiceDesignVersions;

    private Operations operations;

    private Publishers publishers;

    private ArtifactStores artifactStores;

    private ArtifactManifests artifactManifests;

    private ProxyArtifacts proxyArtifacts;

    private Sites sites;

    private SiteNetworkServices siteNetworkServices;

    private final HybridNetworkManagementClient clientObject;

    private HybridNetworkManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject = new HybridNetworkManagementClientBuilder().pipeline(httpPipeline)
            .endpoint(profile.getEnvironment().getResourceManagerEndpoint()).subscriptionId(profile.getSubscriptionId())
            .defaultPollInterval(defaultPollInterval).buildClient();
    }

    /**
     * Creates an instance of HybridNetwork service API entry point.
     * 
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the HybridNetwork service API instance.
     */
    public static HybridNetworkManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of HybridNetwork service API entry point.
     * 
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the HybridNetwork service API instance.
     */
    public static HybridNetworkManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new HybridNetworkManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create HybridNetworkManager with optional configuration.
     * 
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new HybridNetworkManager.Configurable();
    }

    /**
     * The Configurable allowing configurations to be set.
     */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         * <p>
         * This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval
                = Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of HybridNetwork service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the HybridNetwork service API instance.
         */
        public HybridNetworkManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder.append("azsdk-java").append("-").append("com.azure.resourcemanager.hybridnetwork")
                .append("/").append("1.0.0");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder.append(" (").append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ").append(Configuration.getGlobalConfiguration().get("os.name")).append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version")).append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies.addAll(this.policies.stream().filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY).collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline = new HttpPipelineBuilder().httpClient(httpClient)
                .policies(policies.toArray(new HttpPipelinePolicy[0])).build();
            return new HybridNetworkManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of ConfigurationGroupSchemas. It manages ConfigurationGroupSchema.
     * 
     * @return Resource collection API of ConfigurationGroupSchemas.
     */
    public ConfigurationGroupSchemas configurationGroupSchemas() {
        if (this.configurationGroupSchemas == null) {
            this.configurationGroupSchemas
                = new ConfigurationGroupSchemasImpl(clientObject.getConfigurationGroupSchemas(), this);
        }
        return configurationGroupSchemas;
    }

    /**
     * Gets the resource collection API of ConfigurationGroupValues. It manages ConfigurationGroupValue.
     * 
     * @return Resource collection API of ConfigurationGroupValues.
     */
    public ConfigurationGroupValues configurationGroupValues() {
        if (this.configurationGroupValues == null) {
            this.configurationGroupValues
                = new ConfigurationGroupValuesImpl(clientObject.getConfigurationGroupValues(), this);
        }
        return configurationGroupValues;
    }

    /**
     * Gets the resource collection API of NetworkFunctions. It manages NetworkFunction.
     * 
     * @return Resource collection API of NetworkFunctions.
     */
    public NetworkFunctions networkFunctions() {
        if (this.networkFunctions == null) {
            this.networkFunctions = new NetworkFunctionsImpl(clientObject.getNetworkFunctions(), this);
        }
        return networkFunctions;
    }

    /**
     * Gets the resource collection API of Components.
     * 
     * @return Resource collection API of Components.
     */
    public Components components() {
        if (this.components == null) {
            this.components = new ComponentsImpl(clientObject.getComponents(), this);
        }
        return components;
    }

    /**
     * Gets the resource collection API of NetworkFunctionDefinitionGroups. It manages NetworkFunctionDefinitionGroup.
     * 
     * @return Resource collection API of NetworkFunctionDefinitionGroups.
     */
    public NetworkFunctionDefinitionGroups networkFunctionDefinitionGroups() {
        if (this.networkFunctionDefinitionGroups == null) {
            this.networkFunctionDefinitionGroups
                = new NetworkFunctionDefinitionGroupsImpl(clientObject.getNetworkFunctionDefinitionGroups(), this);
        }
        return networkFunctionDefinitionGroups;
    }

    /**
     * Gets the resource collection API of NetworkFunctionDefinitionVersions. It manages
     * NetworkFunctionDefinitionVersion.
     * 
     * @return Resource collection API of NetworkFunctionDefinitionVersions.
     */
    public NetworkFunctionDefinitionVersions networkFunctionDefinitionVersions() {
        if (this.networkFunctionDefinitionVersions == null) {
            this.networkFunctionDefinitionVersions
                = new NetworkFunctionDefinitionVersionsImpl(clientObject.getNetworkFunctionDefinitionVersions(), this);
        }
        return networkFunctionDefinitionVersions;
    }

    /**
     * Gets the resource collection API of NetworkServiceDesignGroups. It manages NetworkServiceDesignGroup.
     * 
     * @return Resource collection API of NetworkServiceDesignGroups.
     */
    public NetworkServiceDesignGroups networkServiceDesignGroups() {
        if (this.networkServiceDesignGroups == null) {
            this.networkServiceDesignGroups
                = new NetworkServiceDesignGroupsImpl(clientObject.getNetworkServiceDesignGroups(), this);
        }
        return networkServiceDesignGroups;
    }

    /**
     * Gets the resource collection API of NetworkServiceDesignVersions. It manages NetworkServiceDesignVersion.
     * 
     * @return Resource collection API of NetworkServiceDesignVersions.
     */
    public NetworkServiceDesignVersions networkServiceDesignVersions() {
        if (this.networkServiceDesignVersions == null) {
            this.networkServiceDesignVersions
                = new NetworkServiceDesignVersionsImpl(clientObject.getNetworkServiceDesignVersions(), this);
        }
        return networkServiceDesignVersions;
    }

    /**
     * Gets the resource collection API of Operations.
     * 
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of Publishers. It manages Publisher.
     * 
     * @return Resource collection API of Publishers.
     */
    public Publishers publishers() {
        if (this.publishers == null) {
            this.publishers = new PublishersImpl(clientObject.getPublishers(), this);
        }
        return publishers;
    }

    /**
     * Gets the resource collection API of ArtifactStores. It manages ArtifactStore.
     * 
     * @return Resource collection API of ArtifactStores.
     */
    public ArtifactStores artifactStores() {
        if (this.artifactStores == null) {
            this.artifactStores = new ArtifactStoresImpl(clientObject.getArtifactStores(), this);
        }
        return artifactStores;
    }

    /**
     * Gets the resource collection API of ArtifactManifests. It manages ArtifactManifest.
     * 
     * @return Resource collection API of ArtifactManifests.
     */
    public ArtifactManifests artifactManifests() {
        if (this.artifactManifests == null) {
            this.artifactManifests = new ArtifactManifestsImpl(clientObject.getArtifactManifests(), this);
        }
        return artifactManifests;
    }

    /**
     * Gets the resource collection API of ProxyArtifacts.
     * 
     * @return Resource collection API of ProxyArtifacts.
     */
    public ProxyArtifacts proxyArtifacts() {
        if (this.proxyArtifacts == null) {
            this.proxyArtifacts = new ProxyArtifactsImpl(clientObject.getProxyArtifacts(), this);
        }
        return proxyArtifacts;
    }

    /**
     * Gets the resource collection API of Sites. It manages Site.
     * 
     * @return Resource collection API of Sites.
     */
    public Sites sites() {
        if (this.sites == null) {
            this.sites = new SitesImpl(clientObject.getSites(), this);
        }
        return sites;
    }

    /**
     * Gets the resource collection API of SiteNetworkServices. It manages SiteNetworkService.
     * 
     * @return Resource collection API of SiteNetworkServices.
     */
    public SiteNetworkServices siteNetworkServices() {
        if (this.siteNetworkServices == null) {
            this.siteNetworkServices = new SiteNetworkServicesImpl(clientObject.getSiteNetworkServices(), this);
        }
        return siteNetworkServices;
    }

    /**
     * Gets wrapped service client HybridNetworkManagementClient providing direct access to the underlying
     * auto-generated API implementation, based on Azure REST API.
     * 
     * @return Wrapped service client HybridNetworkManagementClient.
     */
    public HybridNetworkManagementClient serviceClient() {
        return this.clientObject;
    }
}
