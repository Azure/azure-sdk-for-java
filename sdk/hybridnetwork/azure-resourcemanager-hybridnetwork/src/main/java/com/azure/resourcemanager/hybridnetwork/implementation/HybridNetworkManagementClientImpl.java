// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.implementation;

import com.azure.core.annotation.ServiceClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.management.polling.PollerFactory;
import com.azure.core.util.Context;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.core.util.polling.LongRunningOperationStatus;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.hybridnetwork.fluent.ArtifactManifestsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.ArtifactStoresClient;
import com.azure.resourcemanager.hybridnetwork.fluent.ComponentsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.ConfigurationGroupSchemasClient;
import com.azure.resourcemanager.hybridnetwork.fluent.ConfigurationGroupValuesClient;
import com.azure.resourcemanager.hybridnetwork.fluent.HybridNetworkManagementClient;
import com.azure.resourcemanager.hybridnetwork.fluent.NetworkFunctionDefinitionGroupsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.NetworkFunctionDefinitionVersionsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.NetworkFunctionsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.NetworkServiceDesignGroupsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.NetworkServiceDesignVersionsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.OperationsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.ProxyArtifactsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.PublishersClient;
import com.azure.resourcemanager.hybridnetwork.fluent.SiteNetworkServicesClient;
import com.azure.resourcemanager.hybridnetwork.fluent.SitesClient;
import java.io.IOException;
import java.lang.reflect.Type;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the HybridNetworkManagementClientImpl type.
 */
@ServiceClient(builder = HybridNetworkManagementClientBuilder.class)
public final class HybridNetworkManagementClientImpl implements HybridNetworkManagementClient {
    /**
     * The ID of the target subscription.
     */
    private final String subscriptionId;

    /**
     * Gets The ID of the target subscription.
     * 
     * @return the subscriptionId value.
     */
    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /**
     * server parameter.
     */
    private final String endpoint;

    /**
     * Gets server parameter.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Api Version.
     */
    private final String apiVersion;

    /**
     * Gets Api Version.
     * 
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * The default poll interval for long-running operation.
     */
    private final Duration defaultPollInterval;

    /**
     * Gets The default poll interval for long-running operation.
     * 
     * @return the defaultPollInterval value.
     */
    public Duration getDefaultPollInterval() {
        return this.defaultPollInterval;
    }

    /**
     * The ConfigurationGroupSchemasClient object to access its operations.
     */
    private final ConfigurationGroupSchemasClient configurationGroupSchemas;

    /**
     * Gets the ConfigurationGroupSchemasClient object to access its operations.
     * 
     * @return the ConfigurationGroupSchemasClient object.
     */
    public ConfigurationGroupSchemasClient getConfigurationGroupSchemas() {
        return this.configurationGroupSchemas;
    }

    /**
     * The ConfigurationGroupValuesClient object to access its operations.
     */
    private final ConfigurationGroupValuesClient configurationGroupValues;

    /**
     * Gets the ConfigurationGroupValuesClient object to access its operations.
     * 
     * @return the ConfigurationGroupValuesClient object.
     */
    public ConfigurationGroupValuesClient getConfigurationGroupValues() {
        return this.configurationGroupValues;
    }

    /**
     * The NetworkFunctionsClient object to access its operations.
     */
    private final NetworkFunctionsClient networkFunctions;

    /**
     * Gets the NetworkFunctionsClient object to access its operations.
     * 
     * @return the NetworkFunctionsClient object.
     */
    public NetworkFunctionsClient getNetworkFunctions() {
        return this.networkFunctions;
    }

    /**
     * The ComponentsClient object to access its operations.
     */
    private final ComponentsClient components;

    /**
     * Gets the ComponentsClient object to access its operations.
     * 
     * @return the ComponentsClient object.
     */
    public ComponentsClient getComponents() {
        return this.components;
    }

    /**
     * The NetworkFunctionDefinitionGroupsClient object to access its operations.
     */
    private final NetworkFunctionDefinitionGroupsClient networkFunctionDefinitionGroups;

    /**
     * Gets the NetworkFunctionDefinitionGroupsClient object to access its operations.
     * 
     * @return the NetworkFunctionDefinitionGroupsClient object.
     */
    public NetworkFunctionDefinitionGroupsClient getNetworkFunctionDefinitionGroups() {
        return this.networkFunctionDefinitionGroups;
    }

    /**
     * The NetworkFunctionDefinitionVersionsClient object to access its operations.
     */
    private final NetworkFunctionDefinitionVersionsClient networkFunctionDefinitionVersions;

    /**
     * Gets the NetworkFunctionDefinitionVersionsClient object to access its operations.
     * 
     * @return the NetworkFunctionDefinitionVersionsClient object.
     */
    public NetworkFunctionDefinitionVersionsClient getNetworkFunctionDefinitionVersions() {
        return this.networkFunctionDefinitionVersions;
    }

    /**
     * The NetworkServiceDesignGroupsClient object to access its operations.
     */
    private final NetworkServiceDesignGroupsClient networkServiceDesignGroups;

    /**
     * Gets the NetworkServiceDesignGroupsClient object to access its operations.
     * 
     * @return the NetworkServiceDesignGroupsClient object.
     */
    public NetworkServiceDesignGroupsClient getNetworkServiceDesignGroups() {
        return this.networkServiceDesignGroups;
    }

    /**
     * The NetworkServiceDesignVersionsClient object to access its operations.
     */
    private final NetworkServiceDesignVersionsClient networkServiceDesignVersions;

    /**
     * Gets the NetworkServiceDesignVersionsClient object to access its operations.
     * 
     * @return the NetworkServiceDesignVersionsClient object.
     */
    public NetworkServiceDesignVersionsClient getNetworkServiceDesignVersions() {
        return this.networkServiceDesignVersions;
    }

    /**
     * The OperationsClient object to access its operations.
     */
    private final OperationsClient operations;

    /**
     * Gets the OperationsClient object to access its operations.
     * 
     * @return the OperationsClient object.
     */
    public OperationsClient getOperations() {
        return this.operations;
    }

    /**
     * The PublishersClient object to access its operations.
     */
    private final PublishersClient publishers;

    /**
     * Gets the PublishersClient object to access its operations.
     * 
     * @return the PublishersClient object.
     */
    public PublishersClient getPublishers() {
        return this.publishers;
    }

    /**
     * The ArtifactStoresClient object to access its operations.
     */
    private final ArtifactStoresClient artifactStores;

    /**
     * Gets the ArtifactStoresClient object to access its operations.
     * 
     * @return the ArtifactStoresClient object.
     */
    public ArtifactStoresClient getArtifactStores() {
        return this.artifactStores;
    }

    /**
     * The ArtifactManifestsClient object to access its operations.
     */
    private final ArtifactManifestsClient artifactManifests;

    /**
     * Gets the ArtifactManifestsClient object to access its operations.
     * 
     * @return the ArtifactManifestsClient object.
     */
    public ArtifactManifestsClient getArtifactManifests() {
        return this.artifactManifests;
    }

    /**
     * The ProxyArtifactsClient object to access its operations.
     */
    private final ProxyArtifactsClient proxyArtifacts;

    /**
     * Gets the ProxyArtifactsClient object to access its operations.
     * 
     * @return the ProxyArtifactsClient object.
     */
    public ProxyArtifactsClient getProxyArtifacts() {
        return this.proxyArtifacts;
    }

    /**
     * The SitesClient object to access its operations.
     */
    private final SitesClient sites;

    /**
     * Gets the SitesClient object to access its operations.
     * 
     * @return the SitesClient object.
     */
    public SitesClient getSites() {
        return this.sites;
    }

    /**
     * The SiteNetworkServicesClient object to access its operations.
     */
    private final SiteNetworkServicesClient siteNetworkServices;

    /**
     * Gets the SiteNetworkServicesClient object to access its operations.
     * 
     * @return the SiteNetworkServicesClient object.
     */
    public SiteNetworkServicesClient getSiteNetworkServices() {
        return this.siteNetworkServices;
    }

    /**
     * Initializes an instance of HybridNetworkManagementClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param defaultPollInterval The default poll interval for long-running operation.
     * @param environment The Azure environment.
     * @param subscriptionId The ID of the target subscription.
     * @param endpoint server parameter.
     */
    HybridNetworkManagementClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter,
        Duration defaultPollInterval, AzureEnvironment environment, String subscriptionId, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.defaultPollInterval = defaultPollInterval;
        this.subscriptionId = subscriptionId;
        this.endpoint = endpoint;
        this.apiVersion = "2023-09-01";
        this.configurationGroupSchemas = new ConfigurationGroupSchemasClientImpl(this);
        this.configurationGroupValues = new ConfigurationGroupValuesClientImpl(this);
        this.networkFunctions = new NetworkFunctionsClientImpl(this);
        this.components = new ComponentsClientImpl(this);
        this.networkFunctionDefinitionGroups = new NetworkFunctionDefinitionGroupsClientImpl(this);
        this.networkFunctionDefinitionVersions = new NetworkFunctionDefinitionVersionsClientImpl(this);
        this.networkServiceDesignGroups = new NetworkServiceDesignGroupsClientImpl(this);
        this.networkServiceDesignVersions = new NetworkServiceDesignVersionsClientImpl(this);
        this.operations = new OperationsClientImpl(this);
        this.publishers = new PublishersClientImpl(this);
        this.artifactStores = new ArtifactStoresClientImpl(this);
        this.artifactManifests = new ArtifactManifestsClientImpl(this);
        this.proxyArtifacts = new ProxyArtifactsClientImpl(this);
        this.sites = new SitesClientImpl(this);
        this.siteNetworkServices = new SiteNetworkServicesClientImpl(this);
    }

    /**
     * Gets default client context.
     * 
     * @return the default client context.
     */
    public Context getContext() {
        return Context.NONE;
    }

    /**
     * Merges default client context with provided context.
     * 
     * @param context the context to be merged with default client context.
     * @return the merged context.
     */
    public Context mergeContext(Context context) {
        return CoreUtils.mergeContexts(this.getContext(), context);
    }

    /**
     * Gets long running operation result.
     * 
     * @param activationResponse the response of activation operation.
     * @param httpPipeline the http pipeline.
     * @param pollResultType type of poll result.
     * @param finalResultType type of final result.
     * @param context the context shared by all requests.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return poller flux for poll result and final result.
     */
    public <T, U> PollerFlux<PollResult<T>, U> getLroResult(Mono<Response<Flux<ByteBuffer>>> activationResponse,
        HttpPipeline httpPipeline, Type pollResultType, Type finalResultType, Context context) {
        return PollerFactory.create(serializerAdapter, httpPipeline, pollResultType, finalResultType,
            defaultPollInterval, activationResponse, context);
    }

    /**
     * Gets the final result, or an error, based on last async poll response.
     * 
     * @param response the last async poll response.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return the final result, or an error.
     */
    public <T, U> Mono<U> getLroFinalResultOrError(AsyncPollResponse<PollResult<T>, U> response) {
        if (response.getStatus() != LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {
            String errorMessage;
            ManagementError managementError = null;
            HttpResponse errorResponse = null;
            PollResult.Error lroError = response.getValue().getError();
            if (lroError != null) {
                errorResponse = new HttpResponseImpl(lroError.getResponseStatusCode(), lroError.getResponseHeaders(),
                    lroError.getResponseBody());

                errorMessage = response.getValue().getError().getMessage();
                String errorBody = response.getValue().getError().getResponseBody();
                if (errorBody != null) {
                    // try to deserialize error body to ManagementError
                    try {
                        managementError = this.getSerializerAdapter().deserialize(errorBody, ManagementError.class,
                            SerializerEncoding.JSON);
                        if (managementError.getCode() == null || managementError.getMessage() == null) {
                            managementError = null;
                        }
                    } catch (IOException | RuntimeException ioe) {
                        LOGGER.logThrowableAsWarning(ioe);
                    }
                }
            } else {
                // fallback to default error message
                errorMessage = "Long running operation failed.";
            }
            if (managementError == null) {
                // fallback to default ManagementError
                managementError = new ManagementError(response.getStatus().toString(), errorMessage);
            }
            return Mono.error(new ManagementException(errorMessage, errorResponse, managementError));
        } else {
            return response.getFinalResult();
        }
    }

    private static final class HttpResponseImpl extends HttpResponse {
        private final int statusCode;

        private final byte[] responseBody;

        private final HttpHeaders httpHeaders;

        HttpResponseImpl(int statusCode, HttpHeaders httpHeaders, String responseBody) {
            super(null);
            this.statusCode = statusCode;
            this.httpHeaders = httpHeaders;
            this.responseBody = responseBody == null ? null : responseBody.getBytes(StandardCharsets.UTF_8);
        }

        public int getStatusCode() {
            return statusCode;
        }

        public String getHeaderValue(String s) {
            return httpHeaders.getValue(s);
        }

        public HttpHeaders getHeaders() {
            return httpHeaders;
        }

        public Flux<ByteBuffer> getBody() {
            return Flux.just(ByteBuffer.wrap(responseBody));
        }

        public Mono<byte[]> getBodyAsByteArray() {
            return Mono.just(responseBody);
        }

        public Mono<String> getBodyAsString() {
            return Mono.just(new String(responseBody, StandardCharsets.UTF_8));
        }

        public Mono<String> getBodyAsString(Charset charset) {
            return Mono.just(new String(responseBody, charset));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HybridNetworkManagementClientImpl.class);
}
