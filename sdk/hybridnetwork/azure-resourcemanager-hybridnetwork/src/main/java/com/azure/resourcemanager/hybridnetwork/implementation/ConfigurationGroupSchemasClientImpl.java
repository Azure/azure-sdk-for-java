// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hybridnetwork.fluent.ConfigurationGroupSchemasClient;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ConfigurationGroupSchemaInner;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ConfigurationGroupSchemaVersionUpdateStateInner;
import com.azure.resourcemanager.hybridnetwork.models.ConfigurationGroupSchemaListResult;
import com.azure.resourcemanager.hybridnetwork.models.TagsObject;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ConfigurationGroupSchemasClient.
 */
public final class ConfigurationGroupSchemasClientImpl implements ConfigurationGroupSchemasClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ConfigurationGroupSchemasService service;

    /**
     * The service client containing this operation class.
     */
    private final HybridNetworkManagementClientImpl client;

    /**
     * Initializes an instance of ConfigurationGroupSchemasClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ConfigurationGroupSchemasClientImpl(HybridNetworkManagementClientImpl client) {
        this.service = RestProxy.create(ConfigurationGroupSchemasService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HybridNetworkManagementClientConfigurationGroupSchemas to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HybridNetworkManagem")
    public interface ConfigurationGroupSchemasService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/configurationGroupSchemas")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigurationGroupSchemaListResult>> listByPublisher(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/configurationGroupSchemas/{configurationGroupSchemaName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("configurationGroupSchemaName") String configurationGroupSchemaName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/configurationGroupSchemas/{configurationGroupSchemaName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("configurationGroupSchemaName") String configurationGroupSchemaName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") ConfigurationGroupSchemaInner parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/configurationGroupSchemas/{configurationGroupSchemaName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigurationGroupSchemaInner>> get(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("configurationGroupSchemaName") String configurationGroupSchemaName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/configurationGroupSchemas/{configurationGroupSchemaName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigurationGroupSchemaInner>> update(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("configurationGroupSchemaName") String configurationGroupSchemaName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") TagsObject parameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/configurationGroupSchemas/{configurationGroupSchemaName}/updateState")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updateState(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("configurationGroupSchemaName") String configurationGroupSchemaName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ConfigurationGroupSchemaVersionUpdateStateInner parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfigurationGroupSchemaListResult>> listByPublisherNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets information of the configuration group schemas under a publisher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of the configuration group schemas under a publisher along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfigurationGroupSchemaInner>> listByPublisherSinglePageAsync(String resourceGroupName,
        String publisherName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByPublisher(this.client.getEndpoint(), resourceGroupName, publisherName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context))
            .<PagedResponse<ConfigurationGroupSchemaInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets information of the configuration group schemas under a publisher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of the configuration group schemas under a publisher along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfigurationGroupSchemaInner>> listByPublisherSinglePageAsync(String resourceGroupName,
        String publisherName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByPublisher(this.client.getEndpoint(), resourceGroupName, publisherName, this.client.getApiVersion(),
                this.client.getSubscriptionId(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Gets information of the configuration group schemas under a publisher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of the configuration group schemas under a publisher as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConfigurationGroupSchemaInner> listByPublisherAsync(String resourceGroupName,
        String publisherName) {
        return new PagedFlux<>(() -> listByPublisherSinglePageAsync(resourceGroupName, publisherName),
            nextLink -> listByPublisherNextSinglePageAsync(nextLink));
    }

    /**
     * Gets information of the configuration group schemas under a publisher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of the configuration group schemas under a publisher as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConfigurationGroupSchemaInner> listByPublisherAsync(String resourceGroupName,
        String publisherName, Context context) {
        return new PagedFlux<>(() -> listByPublisherSinglePageAsync(resourceGroupName, publisherName, context),
            nextLink -> listByPublisherNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets information of the configuration group schemas under a publisher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of the configuration group schemas under a publisher as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfigurationGroupSchemaInner> listByPublisher(String resourceGroupName,
        String publisherName) {
        return new PagedIterable<>(listByPublisherAsync(resourceGroupName, publisherName));
    }

    /**
     * Gets information of the configuration group schemas under a publisher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of the configuration group schemas under a publisher as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfigurationGroupSchemaInner> listByPublisher(String resourceGroupName, String publisherName,
        Context context) {
        return new PagedIterable<>(listByPublisherAsync(resourceGroupName, publisherName, context));
    }

    /**
     * Deletes a specified configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (configurationGroupSchemaName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationGroupSchemaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), resourceGroupName, publisherName,
                configurationGroupSchemaName, this.client.getApiVersion(), this.client.getSubscriptionId(), accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a specified configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (configurationGroupSchemaName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationGroupSchemaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), resourceGroupName, publisherName, configurationGroupSchemaName,
            this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context);
    }

    /**
     * Deletes a specified configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, publisherName, configurationGroupSchemaName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes a specified configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, publisherName, configurationGroupSchemaName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes a specified configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName) {
        return this.beginDeleteAsync(resourceGroupName, publisherName, configurationGroupSchemaName).getSyncPoller();
    }

    /**
     * Deletes a specified configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, publisherName, configurationGroupSchemaName, context)
            .getSyncPoller();
    }

    /**
     * Deletes a specified configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName) {
        return beginDeleteAsync(resourceGroupName, publisherName, configurationGroupSchemaName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a specified configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String publisherName, String configurationGroupSchemaName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, publisherName, configurationGroupSchemaName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a specified configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String publisherName, String configurationGroupSchemaName) {
        deleteAsync(resourceGroupName, publisherName, configurationGroupSchemaName).block();
    }

    /**
     * Deletes a specified configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String publisherName, String configurationGroupSchemaName,
        Context context) {
        deleteAsync(resourceGroupName, publisherName, configurationGroupSchemaName, context).block();
    }

    /**
     * Creates or updates a configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to the create or update configuration group schema resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration group schema resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String publisherName, String configurationGroupSchemaName, ConfigurationGroupSchemaInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (configurationGroupSchemaName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationGroupSchemaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), resourceGroupName, publisherName,
                configurationGroupSchemaName, this.client.getApiVersion(), this.client.getSubscriptionId(), parameters,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to the create or update configuration group schema resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration group schema resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String publisherName, String configurationGroupSchemaName, ConfigurationGroupSchemaInner parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (configurationGroupSchemaName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationGroupSchemaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), resourceGroupName, publisherName,
            configurationGroupSchemaName, this.client.getApiVersion(), this.client.getSubscriptionId(), parameters,
            accept, context);
    }

    /**
     * Creates or updates a configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to the create or update configuration group schema resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of configuration group schema resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ConfigurationGroupSchemaInner>, ConfigurationGroupSchemaInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String publisherName, String configurationGroupSchemaName,
            ConfigurationGroupSchemaInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, publisherName,
            configurationGroupSchemaName, parameters);
        return this.client.<ConfigurationGroupSchemaInner, ConfigurationGroupSchemaInner>getLroResult(mono,
            this.client.getHttpPipeline(), ConfigurationGroupSchemaInner.class, ConfigurationGroupSchemaInner.class,
            this.client.getContext());
    }

    /**
     * Creates or updates a configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to the create or update configuration group schema resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of configuration group schema resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ConfigurationGroupSchemaInner>, ConfigurationGroupSchemaInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String publisherName, String configurationGroupSchemaName,
            ConfigurationGroupSchemaInner parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, publisherName,
            configurationGroupSchemaName, parameters, context);
        return this.client.<ConfigurationGroupSchemaInner, ConfigurationGroupSchemaInner>getLroResult(mono,
            this.client.getHttpPipeline(), ConfigurationGroupSchemaInner.class, ConfigurationGroupSchemaInner.class,
            context);
    }

    /**
     * Creates or updates a configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to the create or update configuration group schema resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of configuration group schema resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ConfigurationGroupSchemaInner>, ConfigurationGroupSchemaInner> beginCreateOrUpdate(
        String resourceGroupName, String publisherName, String configurationGroupSchemaName,
        ConfigurationGroupSchemaInner parameters) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, publisherName, configurationGroupSchemaName, parameters)
            .getSyncPoller();
    }

    /**
     * Creates or updates a configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to the create or update configuration group schema resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of configuration group schema resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ConfigurationGroupSchemaInner>, ConfigurationGroupSchemaInner> beginCreateOrUpdate(
        String resourceGroupName, String publisherName, String configurationGroupSchemaName,
        ConfigurationGroupSchemaInner parameters, Context context) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, publisherName, configurationGroupSchemaName, parameters,
            context).getSyncPoller();
    }

    /**
     * Creates or updates a configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to the create or update configuration group schema resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration group schema resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationGroupSchemaInner> createOrUpdateAsync(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName, ConfigurationGroupSchemaInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, publisherName, configurationGroupSchemaName, parameters)
            .last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to the create or update configuration group schema resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration group schema resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationGroupSchemaInner> createOrUpdateAsync(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName, ConfigurationGroupSchemaInner parameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, publisherName, configurationGroupSchemaName, parameters,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to the create or update configuration group schema resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration group schema resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationGroupSchemaInner createOrUpdate(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName, ConfigurationGroupSchemaInner parameters) {
        return createOrUpdateAsync(resourceGroupName, publisherName, configurationGroupSchemaName, parameters).block();
    }

    /**
     * Creates or updates a configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to the create or update configuration group schema resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration group schema resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationGroupSchemaInner createOrUpdate(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName, ConfigurationGroupSchemaInner parameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, publisherName, configurationGroupSchemaName, parameters, context)
            .block();
    }

    /**
     * Gets information about the specified configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified configuration group schema along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationGroupSchemaInner>> getWithResponseAsync(String resourceGroupName,
        String publisherName, String configurationGroupSchemaName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (configurationGroupSchemaName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationGroupSchemaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), resourceGroupName, publisherName,
                configurationGroupSchemaName, this.client.getApiVersion(), this.client.getSubscriptionId(), accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets information about the specified configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified configuration group schema along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationGroupSchemaInner>> getWithResponseAsync(String resourceGroupName,
        String publisherName, String configurationGroupSchemaName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (configurationGroupSchemaName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationGroupSchemaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), resourceGroupName, publisherName, configurationGroupSchemaName,
            this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context);
    }

    /**
     * Gets information about the specified configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified configuration group schema on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationGroupSchemaInner> getAsync(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName) {
        return getWithResponseAsync(resourceGroupName, publisherName, configurationGroupSchemaName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets information about the specified configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified configuration group schema along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationGroupSchemaInner> getWithResponse(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName, Context context) {
        return getWithResponseAsync(resourceGroupName, publisherName, configurationGroupSchemaName, context).block();
    }

    /**
     * Gets information about the specified configuration group schema.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified configuration group schema.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationGroupSchemaInner get(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName) {
        return getWithResponse(resourceGroupName, publisherName, configurationGroupSchemaName, Context.NONE).getValue();
    }

    /**
     * Updates a configuration group schema resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration group schema resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationGroupSchemaInner>> updateWithResponseAsync(String resourceGroupName,
        String publisherName, String configurationGroupSchemaName, TagsObject parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (configurationGroupSchemaName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationGroupSchemaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), resourceGroupName, publisherName,
                configurationGroupSchemaName, this.client.getApiVersion(), this.client.getSubscriptionId(), parameters,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates a configuration group schema resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration group schema resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfigurationGroupSchemaInner>> updateWithResponseAsync(String resourceGroupName,
        String publisherName, String configurationGroupSchemaName, TagsObject parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (configurationGroupSchemaName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationGroupSchemaName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), resourceGroupName, publisherName, configurationGroupSchemaName,
            this.client.getApiVersion(), this.client.getSubscriptionId(), parameters, accept, context);
    }

    /**
     * Updates a configuration group schema resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration group schema resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationGroupSchemaInner> updateAsync(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName, TagsObject parameters) {
        return updateWithResponseAsync(resourceGroupName, publisherName, configurationGroupSchemaName, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates a configuration group schema resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration group schema resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationGroupSchemaInner> updateWithResponse(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName, TagsObject parameters, Context context) {
        return updateWithResponseAsync(resourceGroupName, publisherName, configurationGroupSchemaName, parameters,
            context).block();
    }

    /**
     * Updates a configuration group schema resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to the create or update network service design version operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return configuration group schema resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationGroupSchemaInner update(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName, TagsObject parameters) {
        return updateWithResponse(resourceGroupName, publisherName, configurationGroupSchemaName, parameters,
            Context.NONE).getValue();
    }

    /**
     * Update configuration group schema state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to update the state of configuration group schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher configuration group schema update request definition along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateStateWithResponseAsync(String resourceGroupName,
        String publisherName, String configurationGroupSchemaName,
        ConfigurationGroupSchemaVersionUpdateStateInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (configurationGroupSchemaName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationGroupSchemaName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.updateState(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, publisherName, configurationGroupSchemaName, this.client.getApiVersion(), parameters,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update configuration group schema state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to update the state of configuration group schema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher configuration group schema update request definition along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateStateWithResponseAsync(String resourceGroupName,
        String publisherName, String configurationGroupSchemaName,
        ConfigurationGroupSchemaVersionUpdateStateInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (configurationGroupSchemaName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter configurationGroupSchemaName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.updateState(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            publisherName, configurationGroupSchemaName, this.client.getApiVersion(), parameters, accept, context);
    }

    /**
     * Update configuration group schema state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to update the state of configuration group schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of publisher configuration group schema update request definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<ConfigurationGroupSchemaVersionUpdateStateInner>, ConfigurationGroupSchemaVersionUpdateStateInner>
        beginUpdateStateAsync(String resourceGroupName, String publisherName, String configurationGroupSchemaName,
            ConfigurationGroupSchemaVersionUpdateStateInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateStateWithResponseAsync(resourceGroupName, publisherName, configurationGroupSchemaName, parameters);
        return this.client
            .<ConfigurationGroupSchemaVersionUpdateStateInner, ConfigurationGroupSchemaVersionUpdateStateInner>getLroResult(
                mono, this.client.getHttpPipeline(), ConfigurationGroupSchemaVersionUpdateStateInner.class,
                ConfigurationGroupSchemaVersionUpdateStateInner.class, this.client.getContext());
    }

    /**
     * Update configuration group schema state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to update the state of configuration group schema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of publisher configuration group schema update request definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<ConfigurationGroupSchemaVersionUpdateStateInner>, ConfigurationGroupSchemaVersionUpdateStateInner>
        beginUpdateStateAsync(String resourceGroupName, String publisherName, String configurationGroupSchemaName,
            ConfigurationGroupSchemaVersionUpdateStateInner parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateStateWithResponseAsync(resourceGroupName, publisherName,
            configurationGroupSchemaName, parameters, context);
        return this.client
            .<ConfigurationGroupSchemaVersionUpdateStateInner, ConfigurationGroupSchemaVersionUpdateStateInner>getLroResult(
                mono, this.client.getHttpPipeline(), ConfigurationGroupSchemaVersionUpdateStateInner.class,
                ConfigurationGroupSchemaVersionUpdateStateInner.class, context);
    }

    /**
     * Update configuration group schema state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to update the state of configuration group schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of publisher configuration group schema update request definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<ConfigurationGroupSchemaVersionUpdateStateInner>, ConfigurationGroupSchemaVersionUpdateStateInner>
        beginUpdateState(String resourceGroupName, String publisherName, String configurationGroupSchemaName,
            ConfigurationGroupSchemaVersionUpdateStateInner parameters) {
        return this.beginUpdateStateAsync(resourceGroupName, publisherName, configurationGroupSchemaName, parameters)
            .getSyncPoller();
    }

    /**
     * Update configuration group schema state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to update the state of configuration group schema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of publisher configuration group schema update request definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<ConfigurationGroupSchemaVersionUpdateStateInner>, ConfigurationGroupSchemaVersionUpdateStateInner>
        beginUpdateState(String resourceGroupName, String publisherName, String configurationGroupSchemaName,
            ConfigurationGroupSchemaVersionUpdateStateInner parameters, Context context) {
        return this
            .beginUpdateStateAsync(resourceGroupName, publisherName, configurationGroupSchemaName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Update configuration group schema state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to update the state of configuration group schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher configuration group schema update request definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationGroupSchemaVersionUpdateStateInner> updateStateAsync(String resourceGroupName,
        String publisherName, String configurationGroupSchemaName,
        ConfigurationGroupSchemaVersionUpdateStateInner parameters) {
        return beginUpdateStateAsync(resourceGroupName, publisherName, configurationGroupSchemaName, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update configuration group schema state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to update the state of configuration group schema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher configuration group schema update request definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfigurationGroupSchemaVersionUpdateStateInner> updateStateAsync(String resourceGroupName,
        String publisherName, String configurationGroupSchemaName,
        ConfigurationGroupSchemaVersionUpdateStateInner parameters, Context context) {
        return beginUpdateStateAsync(resourceGroupName, publisherName, configurationGroupSchemaName, parameters,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update configuration group schema state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to update the state of configuration group schema.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher configuration group schema update request definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationGroupSchemaVersionUpdateStateInner updateState(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName, ConfigurationGroupSchemaVersionUpdateStateInner parameters) {
        return updateStateAsync(resourceGroupName, publisherName, configurationGroupSchemaName, parameters).block();
    }

    /**
     * Update configuration group schema state.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param configurationGroupSchemaName The name of the configuration group schema.
     * @param parameters Parameters supplied to update the state of configuration group schema.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return publisher configuration group schema update request definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationGroupSchemaVersionUpdateStateInner updateState(String resourceGroupName, String publisherName,
        String configurationGroupSchemaName, ConfigurationGroupSchemaVersionUpdateStateInner parameters,
        Context context) {
        return updateStateAsync(resourceGroupName, publisherName, configurationGroupSchemaName, parameters, context)
            .block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of configuration group schema resources along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfigurationGroupSchemaInner>> listByPublisherNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByPublisherNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ConfigurationGroupSchemaInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of configuration group schema resources along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfigurationGroupSchemaInner>> listByPublisherNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByPublisherNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
