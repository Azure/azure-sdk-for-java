// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hybridnetwork.fluent.ArtifactManifestsClient;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ArtifactAccessCredentialInner;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ArtifactManifestInner;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ArtifactManifestUpdateStateInner;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactManifestListResult;
import com.azure.resourcemanager.hybridnetwork.models.TagsObject;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ArtifactManifestsClient.
 */
public final class ArtifactManifestsClientImpl implements ArtifactManifestsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ArtifactManifestsService service;

    /**
     * The service client containing this operation class.
     */
    private final HybridNetworkManagementClientImpl client;

    /**
     * Initializes an instance of ArtifactManifestsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ArtifactManifestsClientImpl(HybridNetworkManagementClientImpl client) {
        this.service
            = RestProxy.create(ArtifactManifestsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HybridNetworkManagementClientArtifactManifests to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HybridNetworkManagem")
    public interface ArtifactManifestsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/artifactStores/{artifactStoreName}/artifactManifests")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ArtifactManifestListResult>> listByArtifactStore(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("artifactStoreName") String artifactStoreName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/artifactStores/{artifactStoreName}/artifactManifests/{artifactManifestName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("artifactStoreName") String artifactStoreName,
            @PathParam("artifactManifestName") String artifactManifestName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/artifactStores/{artifactStoreName}/artifactManifests/{artifactManifestName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("artifactStoreName") String artifactStoreName,
            @PathParam("artifactManifestName") String artifactManifestName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") ArtifactManifestInner parameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/artifactStores/{artifactStoreName}/artifactManifests/{artifactManifestName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ArtifactManifestInner>> get(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("artifactStoreName") String artifactStoreName,
            @PathParam("artifactManifestName") String artifactManifestName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/artifactStores/{artifactStoreName}/artifactManifests/{artifactManifestName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ArtifactManifestInner>> update(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("artifactStoreName") String artifactStoreName,
            @PathParam("artifactManifestName") String artifactManifestName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") TagsObject parameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/artifactStores/{artifactStoreName}/artifactManifests/{artifactManifestName}/listCredential")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ArtifactAccessCredentialInner>> listCredential(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("artifactStoreName") String artifactStoreName,
            @PathParam("artifactManifestName") String artifactManifestName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/artifactStores/{artifactStoreName}/artifactManifests/{artifactManifestName}/updateState")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updateState(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("publisherName") String publisherName,
            @PathParam("artifactStoreName") String artifactStoreName,
            @PathParam("artifactManifestName") String artifactManifestName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") ArtifactManifestUpdateStateInner parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ArtifactManifestListResult>> listByArtifactStoreNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets information about the artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the artifact manifest along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ArtifactManifestInner>> listByArtifactStoreSinglePageAsync(String resourceGroupName,
        String publisherName, String artifactStoreName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByArtifactStore(this.client.getEndpoint(), resourceGroupName, publisherName,
                    artifactStoreName, this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context))
            .<PagedResponse<ArtifactManifestInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets information about the artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the artifact manifest along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ArtifactManifestInner>> listByArtifactStoreSinglePageAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByArtifactStore(this.client.getEndpoint(), resourceGroupName, publisherName, artifactStoreName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Gets information about the artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the artifact manifest as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ArtifactManifestInner> listByArtifactStoreAsync(String resourceGroupName, String publisherName,
        String artifactStoreName) {
        return new PagedFlux<>(
            () -> listByArtifactStoreSinglePageAsync(resourceGroupName, publisherName, artifactStoreName),
            nextLink -> listByArtifactStoreNextSinglePageAsync(nextLink));
    }

    /**
     * Gets information about the artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the artifact manifest as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ArtifactManifestInner> listByArtifactStoreAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, Context context) {
        return new PagedFlux<>(
            () -> listByArtifactStoreSinglePageAsync(resourceGroupName, publisherName, artifactStoreName, context),
            nextLink -> listByArtifactStoreNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets information about the artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the artifact manifest as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ArtifactManifestInner> listByArtifactStore(String resourceGroupName, String publisherName,
        String artifactStoreName) {
        return new PagedIterable<>(listByArtifactStoreAsync(resourceGroupName, publisherName, artifactStoreName));
    }

    /**
     * Gets information about the artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the artifact manifest as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ArtifactManifestInner> listByArtifactStore(String resourceGroupName, String publisherName,
        String artifactStoreName, Context context) {
        return new PagedIterable<>(
            listByArtifactStoreAsync(resourceGroupName, publisherName, artifactStoreName, context));
    }

    /**
     * Deletes the specified artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactManifestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactManifestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), resourceGroupName, publisherName,
                artifactStoreName, artifactManifestName, this.client.getApiVersion(), this.client.getSubscriptionId(),
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the specified artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactManifestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactManifestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), resourceGroupName, publisherName, artifactStoreName,
            artifactManifestName, this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context);
    }

    /**
     * Deletes the specified artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the specified artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, publisherName,
            artifactStoreName, artifactManifestName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes the specified artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName) {
        return this.beginDeleteAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName)
            .getSyncPoller();
    }

    /**
     * Deletes the specified artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName, context)
            .getSyncPoller();
    }

    /**
     * Deletes the specified artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String publisherName, String artifactStoreName,
        String artifactManifestName) {
        return beginDeleteAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String publisherName, String artifactStoreName,
        String artifactManifestName, Context context) {
        return beginDeleteAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName, context)
            .last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String publisherName, String artifactStoreName,
        String artifactManifestName) {
        deleteAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName).block();
    }

    /**
     * Deletes the specified artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String publisherName, String artifactStoreName,
        String artifactManifestName, Context context) {
        deleteAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName, context).block();
    }

    /**
     * Creates or updates a artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to the create or update artifact manifest operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return artifact manifest properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, String artifactManifestName, ArtifactManifestInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactManifestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactManifestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), resourceGroupName, publisherName,
                artifactStoreName, artifactManifestName, this.client.getApiVersion(), this.client.getSubscriptionId(),
                parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to the create or update artifact manifest operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return artifact manifest properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, String artifactManifestName, ArtifactManifestInner parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactManifestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactManifestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), resourceGroupName, publisherName, artifactStoreName,
            artifactManifestName, this.client.getApiVersion(), this.client.getSubscriptionId(), parameters, accept,
            context);
    }

    /**
     * Creates or updates a artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to the create or update artifact manifest operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of artifact manifest properties.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ArtifactManifestInner>, ArtifactManifestInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String publisherName, String artifactStoreName, String artifactManifestName,
        ArtifactManifestInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, publisherName,
            artifactStoreName, artifactManifestName, parameters);
        return this.client.<ArtifactManifestInner, ArtifactManifestInner>getLroResult(mono,
            this.client.getHttpPipeline(), ArtifactManifestInner.class, ArtifactManifestInner.class,
            this.client.getContext());
    }

    /**
     * Creates or updates a artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to the create or update artifact manifest operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of artifact manifest properties.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ArtifactManifestInner>, ArtifactManifestInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String publisherName, String artifactStoreName, String artifactManifestName,
        ArtifactManifestInner parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, publisherName,
            artifactStoreName, artifactManifestName, parameters, context);
        return this.client.<ArtifactManifestInner, ArtifactManifestInner>getLroResult(mono,
            this.client.getHttpPipeline(), ArtifactManifestInner.class, ArtifactManifestInner.class, context);
    }

    /**
     * Creates or updates a artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to the create or update artifact manifest operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of artifact manifest properties.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ArtifactManifestInner>, ArtifactManifestInner> beginCreateOrUpdate(
        String resourceGroupName, String publisherName, String artifactStoreName, String artifactManifestName,
        ArtifactManifestInner parameters) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName,
            parameters).getSyncPoller();
    }

    /**
     * Creates or updates a artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to the create or update artifact manifest operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of artifact manifest properties.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ArtifactManifestInner>, ArtifactManifestInner> beginCreateOrUpdate(
        String resourceGroupName, String publisherName, String artifactStoreName, String artifactManifestName,
        ArtifactManifestInner parameters, Context context) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName,
            parameters, context).getSyncPoller();
    }

    /**
     * Creates or updates a artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to the create or update artifact manifest operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return artifact manifest properties on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ArtifactManifestInner> createOrUpdateAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, ArtifactManifestInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName,
            parameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to the create or update artifact manifest operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return artifact manifest properties on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ArtifactManifestInner> createOrUpdateAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, ArtifactManifestInner parameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName,
            parameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to the create or update artifact manifest operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return artifact manifest properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ArtifactManifestInner createOrUpdate(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, ArtifactManifestInner parameters) {
        return createOrUpdateAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName,
            parameters).block();
    }

    /**
     * Creates or updates a artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to the create or update artifact manifest operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return artifact manifest properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ArtifactManifestInner createOrUpdate(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, ArtifactManifestInner parameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName,
            parameters, context).block();
    }

    /**
     * Gets information about a artifact manifest resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a artifact manifest resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ArtifactManifestInner>> getWithResponseAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactManifestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactManifestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), resourceGroupName, publisherName,
                artifactStoreName, artifactManifestName, this.client.getApiVersion(), this.client.getSubscriptionId(),
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets information about a artifact manifest resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a artifact manifest resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ArtifactManifestInner>> getWithResponseAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactManifestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactManifestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), resourceGroupName, publisherName, artifactStoreName,
            artifactManifestName, this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context);
    }

    /**
     * Gets information about a artifact manifest resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a artifact manifest resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ArtifactManifestInner> getAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName) {
        return getWithResponseAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets information about a artifact manifest resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a artifact manifest resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ArtifactManifestInner> getWithResponse(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, Context context) {
        return getWithResponseAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName, context)
            .block();
    }

    /**
     * Gets information about a artifact manifest resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a artifact manifest resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ArtifactManifestInner get(String resourceGroupName, String publisherName, String artifactStoreName,
        String artifactManifestName) {
        return getWithResponse(resourceGroupName, publisherName, artifactStoreName, artifactManifestName, Context.NONE)
            .getValue();
    }

    /**
     * Updates a artifact manifest resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to the create or update artifact manifest operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return artifact manifest properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ArtifactManifestInner>> updateWithResponseAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, String artifactManifestName, TagsObject parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactManifestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactManifestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), resourceGroupName, publisherName,
                artifactStoreName, artifactManifestName, this.client.getApiVersion(), this.client.getSubscriptionId(),
                parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates a artifact manifest resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to the create or update artifact manifest operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return artifact manifest properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ArtifactManifestInner>> updateWithResponseAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, String artifactManifestName, TagsObject parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactManifestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactManifestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), resourceGroupName, publisherName, artifactStoreName,
            artifactManifestName, this.client.getApiVersion(), this.client.getSubscriptionId(), parameters, accept,
            context);
    }

    /**
     * Updates a artifact manifest resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to the create or update artifact manifest operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return artifact manifest properties on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ArtifactManifestInner> updateAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, TagsObject parameters) {
        return updateWithResponseAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName,
            parameters).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates a artifact manifest resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to the create or update artifact manifest operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return artifact manifest properties along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ArtifactManifestInner> updateWithResponse(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, TagsObject parameters, Context context) {
        return updateWithResponseAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName,
            parameters, context).block();
    }

    /**
     * Updates a artifact manifest resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to the create or update artifact manifest operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return artifact manifest properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ArtifactManifestInner update(String resourceGroupName, String publisherName, String artifactStoreName,
        String artifactManifestName, TagsObject parameters) {
        return updateWithResponse(resourceGroupName, publisherName, artifactStoreName, artifactManifestName, parameters,
            Context.NONE).getValue();
    }

    /**
     * List credential for publishing artifacts defined in artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the artifact manifest credential definition along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ArtifactAccessCredentialInner>> listCredentialWithResponseAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, String artifactManifestName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactManifestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactManifestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listCredential(this.client.getEndpoint(), resourceGroupName, publisherName,
                artifactStoreName, artifactManifestName, this.client.getApiVersion(), this.client.getSubscriptionId(),
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List credential for publishing artifacts defined in artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the artifact manifest credential definition along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ArtifactAccessCredentialInner>> listCredentialWithResponseAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, String artifactManifestName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactManifestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactManifestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listCredential(this.client.getEndpoint(), resourceGroupName, publisherName, artifactStoreName,
            artifactManifestName, this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context);
    }

    /**
     * List credential for publishing artifacts defined in artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the artifact manifest credential definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ArtifactAccessCredentialInner> listCredentialAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName) {
        return listCredentialWithResponseAsync(resourceGroupName, publisherName, artifactStoreName,
            artifactManifestName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * List credential for publishing artifacts defined in artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the artifact manifest credential definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ArtifactAccessCredentialInner> listCredentialWithResponse(String resourceGroupName,
        String publisherName, String artifactStoreName, String artifactManifestName, Context context) {
        return listCredentialWithResponseAsync(resourceGroupName, publisherName, artifactStoreName,
            artifactManifestName, context).block();
    }

    /**
     * List credential for publishing artifacts defined in artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the artifact manifest credential definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ArtifactAccessCredentialInner listCredential(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName) {
        return listCredentialWithResponse(resourceGroupName, publisherName, artifactStoreName, artifactManifestName,
            Context.NONE).getValue();
    }

    /**
     * Update state for artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the artifact manifest updating request payload along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateStateWithResponseAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, String artifactManifestName,
        ArtifactManifestUpdateStateInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactManifestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactManifestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.updateState(this.client.getEndpoint(), resourceGroupName, publisherName,
                artifactStoreName, artifactManifestName, this.client.getApiVersion(), this.client.getSubscriptionId(),
                parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update state for artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the artifact manifest updating request payload along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateStateWithResponseAsync(String resourceGroupName,
        String publisherName, String artifactStoreName, String artifactManifestName,
        ArtifactManifestUpdateStateInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (artifactStoreName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactStoreName is required and cannot be null."));
        }
        if (artifactManifestName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter artifactManifestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.updateState(this.client.getEndpoint(), resourceGroupName, publisherName, artifactStoreName,
            artifactManifestName, this.client.getApiVersion(), this.client.getSubscriptionId(), parameters, accept,
            context);
    }

    /**
     * Update state for artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the artifact manifest updating request payload.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ArtifactManifestUpdateStateInner>, ArtifactManifestUpdateStateInner>
        beginUpdateStateAsync(String resourceGroupName, String publisherName, String artifactStoreName,
            String artifactManifestName, ArtifactManifestUpdateStateInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateStateWithResponseAsync(resourceGroupName, publisherName,
            artifactStoreName, artifactManifestName, parameters);
        return this.client.<ArtifactManifestUpdateStateInner, ArtifactManifestUpdateStateInner>getLroResult(mono,
            this.client.getHttpPipeline(), ArtifactManifestUpdateStateInner.class,
            ArtifactManifestUpdateStateInner.class, this.client.getContext());
    }

    /**
     * Update state for artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the artifact manifest updating request payload.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ArtifactManifestUpdateStateInner>, ArtifactManifestUpdateStateInner>
        beginUpdateStateAsync(String resourceGroupName, String publisherName, String artifactStoreName,
            String artifactManifestName, ArtifactManifestUpdateStateInner parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateStateWithResponseAsync(resourceGroupName, publisherName,
            artifactStoreName, artifactManifestName, parameters, context);
        return this.client.<ArtifactManifestUpdateStateInner, ArtifactManifestUpdateStateInner>getLroResult(mono,
            this.client.getHttpPipeline(), ArtifactManifestUpdateStateInner.class,
            ArtifactManifestUpdateStateInner.class, context);
    }

    /**
     * Update state for artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the artifact manifest updating request payload.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ArtifactManifestUpdateStateInner>, ArtifactManifestUpdateStateInner> beginUpdateState(
        String resourceGroupName, String publisherName, String artifactStoreName, String artifactManifestName,
        ArtifactManifestUpdateStateInner parameters) {
        return this.beginUpdateStateAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName,
            parameters).getSyncPoller();
    }

    /**
     * Update state for artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the artifact manifest updating request payload.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ArtifactManifestUpdateStateInner>, ArtifactManifestUpdateStateInner> beginUpdateState(
        String resourceGroupName, String publisherName, String artifactStoreName, String artifactManifestName,
        ArtifactManifestUpdateStateInner parameters, Context context) {
        return this.beginUpdateStateAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName,
            parameters, context).getSyncPoller();
    }

    /**
     * Update state for artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the artifact manifest updating request payload on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ArtifactManifestUpdateStateInner> updateStateAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, ArtifactManifestUpdateStateInner parameters) {
        return beginUpdateStateAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName,
            parameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update state for artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the artifact manifest updating request payload on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ArtifactManifestUpdateStateInner> updateStateAsync(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, ArtifactManifestUpdateStateInner parameters,
        Context context) {
        return beginUpdateStateAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName,
            parameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update state for artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the artifact manifest updating request payload.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ArtifactManifestUpdateStateInner updateState(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, ArtifactManifestUpdateStateInner parameters) {
        return updateStateAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName, parameters)
            .block();
    }

    /**
     * Update state for artifact manifest.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param publisherName The name of the publisher.
     * @param artifactStoreName The name of the artifact store.
     * @param artifactManifestName The name of the artifact manifest.
     * @param parameters Parameters supplied to update the state of artifact manifest.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the artifact manifest updating request payload.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ArtifactManifestUpdateStateInner updateState(String resourceGroupName, String publisherName,
        String artifactStoreName, String artifactManifestName, ArtifactManifestUpdateStateInner parameters,
        Context context) {
        return updateStateAsync(resourceGroupName, publisherName, artifactStoreName, artifactManifestName, parameters,
            context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of artifact manifests along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ArtifactManifestInner>> listByArtifactStoreNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByArtifactStoreNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ArtifactManifestInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of artifact manifests along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ArtifactManifestInner>> listByArtifactStoreNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByArtifactStoreNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
