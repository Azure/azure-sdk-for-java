// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Mapping rule profile properties.
 */
@Fluent
public class MappingRuleProfile implements JsonSerializable<MappingRuleProfile> {
    /*
     * The application enablement.
     */
    private ApplicationEnablement applicationEnablement;

    /**
     * Creates an instance of MappingRuleProfile class.
     */
    public MappingRuleProfile() {
    }

    /**
     * Get the applicationEnablement property: The application enablement.
     * 
     * @return the applicationEnablement value.
     */
    public ApplicationEnablement applicationEnablement() {
        return this.applicationEnablement;
    }

    /**
     * Set the applicationEnablement property: The application enablement.
     * 
     * @param applicationEnablement the applicationEnablement value to set.
     * @return the MappingRuleProfile object itself.
     */
    public MappingRuleProfile withApplicationEnablement(ApplicationEnablement applicationEnablement) {
        this.applicationEnablement = applicationEnablement;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("applicationEnablement",
            this.applicationEnablement == null ? null : this.applicationEnablement.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MappingRuleProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MappingRuleProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MappingRuleProfile.
     */
    public static MappingRuleProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MappingRuleProfile deserializedMappingRuleProfile = new MappingRuleProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("applicationEnablement".equals(fieldName)) {
                    deserializedMappingRuleProfile.applicationEnablement
                        = ApplicationEnablement.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMappingRuleProfile;
        });
    }
}
