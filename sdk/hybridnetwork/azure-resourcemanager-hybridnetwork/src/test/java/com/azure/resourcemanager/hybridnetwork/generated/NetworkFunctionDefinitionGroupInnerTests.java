// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.NetworkFunctionDefinitionGroupInner;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunctionDefinitionGroupPropertiesFormat;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkFunctionDefinitionGroupInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkFunctionDefinitionGroupInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"description\":\"kbogqxndlkzgx\"},\"location\":\"ripl\",\"tags\":{\"wlrbqtkoievseo\":\"dxunkbebxmubyyn\",\"wzizxbmpgcjefuzm\":\"gqrlltmuwla\"},\"id\":\"vpbttd\",\"name\":\"morppxebmnzbtbh\",\"type\":\"pglkf\"}")
            .toObject(NetworkFunctionDefinitionGroupInner.class);
        Assertions.assertEquals("ripl", model.location());
        Assertions.assertEquals("dxunkbebxmubyyn", model.tags().get("wlrbqtkoievseo"));
        Assertions.assertEquals("kbogqxndlkzgx", model.properties().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkFunctionDefinitionGroupInner model = new NetworkFunctionDefinitionGroupInner().withLocation("ripl")
            .withTags(mapOf("wlrbqtkoievseo", "dxunkbebxmubyyn", "wzizxbmpgcjefuzm", "gqrlltmuwla"))
            .withProperties(new NetworkFunctionDefinitionGroupPropertiesFormat().withDescription("kbogqxndlkzgx"));
        model = BinaryData.fromObject(model).toObject(NetworkFunctionDefinitionGroupInner.class);
        Assertions.assertEquals("ripl", model.location());
        Assertions.assertEquals("dxunkbebxmubyyn", model.tags().get("wlrbqtkoievseo"));
        Assertions.assertEquals("kbogqxndlkzgx", model.properties().description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
