// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.models.DependsOnProfile;
import com.azure.resourcemanager.hybridnetwork.models.NetworkServiceDesignVersionPropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.NfviDetails;
import com.azure.resourcemanager.hybridnetwork.models.ReferencedResource;
import com.azure.resourcemanager.hybridnetwork.models.ResourceElementTemplate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkServiceDesignVersionPropertiesFormatTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkServiceDesignVersionPropertiesFormat model = BinaryData.fromString(
            "{\"provisioningState\":\"Converging\",\"versionState\":\"ValidationFailed\",\"description\":\"dooaojkniodko\",\"configurationGroupSchemaReferences\":{\"emmsbvdkc\":{\"id\":\"nuj\"}},\"nfvisFromSite\":{\"f\":{\"name\":\"jinfw\",\"type\":\"fltkacjv\"},\"blylsyxkqjnsj\":{\"name\":\"lfoakg\",\"type\":\"fpagaowpulp\"}},\"resourceElementTemplates\":[{\"type\":\"ResourceElementTemplate\",\"name\":\"iagxsdszuempsbz\",\"dependsOnProfile\":{\"installDependsOn\":[\"eyvpnqicvinvkj\",\"xdxr\",\"uukzclewyhmlw\",\"aztz\"],\"uninstallDependsOn\":[\"ncckw\"],\"updateDependsOn\":[\"qwhxxbuyqaxzfeqz\",\"ppriol\",\"or\",\"altol\"]}}]}")
            .toObject(NetworkServiceDesignVersionPropertiesFormat.class);
        Assertions.assertEquals("dooaojkniodko", model.description());
        Assertions.assertEquals("nuj", model.configurationGroupSchemaReferences().get("emmsbvdkc").id());
        Assertions.assertEquals("jinfw", model.nfvisFromSite().get("f").name());
        Assertions.assertEquals("fltkacjv", model.nfvisFromSite().get("f").type());
        Assertions.assertEquals("iagxsdszuempsbz", model.resourceElementTemplates().get(0).name());
        Assertions.assertEquals("eyvpnqicvinvkj",
            model.resourceElementTemplates().get(0).dependsOnProfile().installDependsOn().get(0));
        Assertions.assertEquals("ncckw",
            model.resourceElementTemplates().get(0).dependsOnProfile().uninstallDependsOn().get(0));
        Assertions.assertEquals("qwhxxbuyqaxzfeqz",
            model.resourceElementTemplates().get(0).dependsOnProfile().updateDependsOn().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkServiceDesignVersionPropertiesFormat model
            = new NetworkServiceDesignVersionPropertiesFormat().withDescription("dooaojkniodko")
                .withConfigurationGroupSchemaReferences(mapOf("emmsbvdkc", new ReferencedResource().withId("nuj")))
                .withNfvisFromSite(mapOf("f", new NfviDetails().withName("jinfw").withType("fltkacjv"), "blylsyxkqjnsj",
                    new NfviDetails().withName("lfoakg").withType("fpagaowpulp")))
                .withResourceElementTemplates(Arrays.asList(new ResourceElementTemplate().withName("iagxsdszuempsbz")
                    .withDependsOnProfile(new DependsOnProfile()
                        .withInstallDependsOn(Arrays.asList("eyvpnqicvinvkj", "xdxr", "uukzclewyhmlw", "aztz"))
                        .withUninstallDependsOn(Arrays.asList("ncckw"))
                        .withUpdateDependsOn(Arrays.asList("qwhxxbuyqaxzfeqz", "ppriol", "or", "altol")))));
        model = BinaryData.fromObject(model).toObject(NetworkServiceDesignVersionPropertiesFormat.class);
        Assertions.assertEquals("dooaojkniodko", model.description());
        Assertions.assertEquals("nuj", model.configurationGroupSchemaReferences().get("emmsbvdkc").id());
        Assertions.assertEquals("jinfw", model.nfvisFromSite().get("f").name());
        Assertions.assertEquals("fltkacjv", model.nfvisFromSite().get("f").type());
        Assertions.assertEquals("iagxsdszuempsbz", model.resourceElementTemplates().get(0).name());
        Assertions.assertEquals("eyvpnqicvinvkj",
            model.resourceElementTemplates().get(0).dependsOnProfile().installDependsOn().get(0));
        Assertions.assertEquals("ncckw",
            model.resourceElementTemplates().get(0).dependsOnProfile().uninstallDependsOn().get(0));
        Assertions.assertEquals("qwhxxbuyqaxzfeqz",
            model.resourceElementTemplates().get(0).dependsOnProfile().updateDependsOn().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
