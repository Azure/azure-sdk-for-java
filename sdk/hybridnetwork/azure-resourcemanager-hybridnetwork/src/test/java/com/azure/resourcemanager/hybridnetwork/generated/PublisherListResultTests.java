// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.PublisherInner;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentity;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hybridnetwork.models.PublisherListResult;
import com.azure.resourcemanager.hybridnetwork.models.PublisherPropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.PublisherScope;
import com.azure.resourcemanager.hybridnetwork.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PublisherListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PublisherListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"scope\":\"Private\"},\"identity\":{\"principalId\":\"92405517-08c0-4f6a-b7ff-f810565b8b32\",\"tenantId\":\"662fe536-27a3-48d6-9bb4-2502ef3aad53\",\"type\":\"None\",\"userAssignedIdentities\":{\"gzrf\":{\"principalId\":\"e7470221-769c-4a76-941a-0d2cef4a407d\",\"clientId\":\"f44a8f8a-2395-46f6-b44f-d4483031220b\"},\"yebizikayuh\":{\"principalId\":\"7a2e263a-f556-4557-9c59-1c9b55ccbfdd\",\"clientId\":\"f7f4097e-4f0c-4e83-80c0-cb9cf0489c22\"}}},\"location\":\"bjbsybb\",\"tags\":{\"slthaq\":\"vtldgmfpgvmpip\"},\"id\":\"x\",\"name\":\"smwutwbdsrezpd\",\"type\":\"hneuyowqkd\"},{\"properties\":{\"provisioningState\":\"Unknown\",\"scope\":\"Unknown\"},\"identity\":{\"principalId\":\"9369c588-548b-4d59-b352-b7cdac75d572\",\"tenantId\":\"193ec92d-7c10-496c-956e-7323efbb972e\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"pzimejzanlfzxi\":{\"principalId\":\"eaa372c3-71d4-4dac-8eae-e96ee26d0364\",\"clientId\":\"06d1419f-bff9-4b0f-b879-2d6d0b4a3e37\"},\"mbzonokix\":{\"principalId\":\"f5e57742-c4e5-46a9-8c2f-93bc5f58b81e\",\"clientId\":\"d68568fd-dcaf-484a-9361-1541d8f4ad87\"}}},\"location\":\"q\",\"tags\":{\"szrnwo\":\"gzpfrla\"},\"id\":\"indfpwpjyl\",\"name\":\"bt\",\"type\":\"h\"}],\"nextLink\":\"sj\"}")
            .toObject(PublisherListResult.class);
        Assertions.assertEquals("bjbsybb", model.value().get(0).location());
        Assertions.assertEquals("vtldgmfpgvmpip", model.value().get(0).tags().get("slthaq"));
        Assertions.assertEquals(PublisherScope.PRIVATE, model.value().get(0).properties().scope());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.value().get(0).identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PublisherListResult model
            = new PublisherListResult()
                .withValue(
                    Arrays
                        .asList(
                            new PublisherInner()
                                .withLocation("bjbsybb").withTags(mapOf("slthaq", "vtldgmfpgvmpip"))
                                .withProperties(new PublisherPropertiesFormat().withScope(PublisherScope.PRIVATE))
                                .withIdentity(new ManagedServiceIdentity()
                                    .withType(ManagedServiceIdentityType.NONE)
                                    .withUserAssignedIdentities(mapOf("gzrf", new UserAssignedIdentity(), "yebizikayuh",
                                        new UserAssignedIdentity()))),
                            new PublisherInner().withLocation("q").withTags(mapOf("szrnwo", "gzpfrla"))
                                .withProperties(new PublisherPropertiesFormat().withScope(PublisherScope.UNKNOWN))
                                .withIdentity(
                                    new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf("pzimejzanlfzxi", new UserAssignedIdentity(),
                                            "mbzonokix", new UserAssignedIdentity())))));
        model = BinaryData.fromObject(model).toObject(PublisherListResult.class);
        Assertions.assertEquals("bjbsybb", model.value().get(0).location());
        Assertions.assertEquals("vtldgmfpgvmpip", model.value().get(0).tags().get("slthaq"));
        Assertions.assertEquals(PublisherScope.PRIVATE, model.value().get(0).properties().scope());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.value().get(0).identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
