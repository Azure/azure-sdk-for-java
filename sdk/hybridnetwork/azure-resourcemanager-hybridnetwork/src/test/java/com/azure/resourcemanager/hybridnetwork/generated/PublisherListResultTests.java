// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.PublisherInner;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentity;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hybridnetwork.models.PublisherListResult;
import com.azure.resourcemanager.hybridnetwork.models.PublisherPropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.PublisherScope;
import com.azure.resourcemanager.hybridnetwork.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PublisherListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PublisherListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"scope\":\"Private\"},\"identity\":{\"principalId\":\"bd2ff1ad-c668-4b66-b31c-a0bb0279cd56\",\"tenantId\":\"e25d6c0e-7044-4f4a-a446-50e5c4396c56\",\"type\":\"None\",\"userAssignedIdentities\":{\"gzrf\":{\"principalId\":\"074de492-5e5a-47de-b8f0-b9c74f326cb3\",\"clientId\":\"3844497d-15a3-4554-bec2-293885441144\"},\"yebizikayuh\":{\"principalId\":\"6f2ca066-1413-4042-83fc-2dd2b17c3f62\",\"clientId\":\"0915e709-882d-4f90-bc1d-a9a6765721be\"}}},\"location\":\"bjbsybb\",\"tags\":{\"slthaq\":\"vtldgmfpgvmpip\"},\"id\":\"x\",\"name\":\"smwutwbdsrezpd\",\"type\":\"hneuyowqkd\"},{\"properties\":{\"provisioningState\":\"Unknown\",\"scope\":\"Unknown\"},\"identity\":{\"principalId\":\"76310df3-4630-4ca9-9034-7e3af57b3aab\",\"tenantId\":\"13e44b44-0843-4eaa-9e74-559cc45c1632\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"pzimejzanlfzxi\":{\"principalId\":\"3e54362b-9160-4daa-b6ee-af47f81ed06c\",\"clientId\":\"482f9406-76c0-49cf-9019-fb1f33d3974b\"},\"mbzonokix\":{\"principalId\":\"e7b3d289-7221-43f0-b84c-d0c51c6689fe\",\"clientId\":\"c077b19d-aff0-49f5-99ad-e7524fb1b913\"}}},\"location\":\"q\",\"tags\":{\"szrnwo\":\"gzpfrla\"},\"id\":\"indfpwpjyl\",\"name\":\"bt\",\"type\":\"h\"}],\"nextLink\":\"sj\"}")
            .toObject(PublisherListResult.class);
        Assertions.assertEquals("bjbsybb", model.value().get(0).location());
        Assertions.assertEquals("vtldgmfpgvmpip", model.value().get(0).tags().get("slthaq"));
        Assertions.assertEquals(PublisherScope.PRIVATE, model.value().get(0).properties().scope());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.value().get(0).identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PublisherListResult model
            = new PublisherListResult()
                .withValue(
                    Arrays.asList(
                        new PublisherInner().withLocation("bjbsybb")
                            .withTags(mapOf("slthaq", "vtldgmfpgvmpip"))
                            .withProperties(new PublisherPropertiesFormat().withScope(PublisherScope.PRIVATE))
                            .withIdentity(new ManagedServiceIdentity()
                                .withType(ManagedServiceIdentityType.NONE)
                                .withUserAssignedIdentities(mapOf("gzrf", new UserAssignedIdentity(), "yebizikayuh",
                                    new UserAssignedIdentity()))),
                        new PublisherInner().withLocation("q")
                            .withTags(mapOf("szrnwo", "gzpfrla"))
                            .withProperties(new PublisherPropertiesFormat().withScope(PublisherScope.UNKNOWN))
                            .withIdentity(
                                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                                    .withUserAssignedIdentities(mapOf("pzimejzanlfzxi", new UserAssignedIdentity(),
                                        "mbzonokix", new UserAssignedIdentity())))));
        model = BinaryData.fromObject(model).toObject(PublisherListResult.class);
        Assertions.assertEquals("bjbsybb", model.value().get(0).location());
        Assertions.assertEquals("vtldgmfpgvmpip", model.value().get(0).tags().get("slthaq"));
        Assertions.assertEquals(PublisherScope.PRIVATE, model.value().get(0).properties().scope());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.value().get(0).identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
