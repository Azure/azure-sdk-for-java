// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridnetwork.HybridNetworkManager;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactManifest;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactManifestPropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactType;
import com.azure.resourcemanager.hybridnetwork.models.ManifestArtifactFormat;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ArtifactManifestsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"artifactManifestState\":\"Validating\",\"artifacts\":[{\"artifactName\":\"oknub\",\"artifactType\":\"OCIArtifact\",\"artifactVersion\":\"pkpztrg\"},{\"artifactName\":\"x\",\"artifactType\":\"OCIArtifact\",\"artifactVersion\":\"raswugyxpqit\"},{\"artifactName\":\"ialwv\",\"artifactType\":\"ImageFile\",\"artifactVersion\":\"hzacaqtyltco\"},{\"artifactName\":\"ujpdsxzak\",\"artifactType\":\"Unknown\",\"artifactVersion\":\"mvbi\"}]},\"location\":\"jofqcvovjufycs\",\"tags\":{\"iuxegth\":\"bemyeji\",\"erppt\":\"rtudawlpjfel\"},\"id\":\"bgqnz\",\"name\":\"nhii\",\"type\":\"ialwc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridNetworkManager manager = HybridNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ArtifactManifest response = manager.artifactManifests()
            .define("xhxknlc")
            .withRegion("kzuqnwsith")
            .withExistingArtifactStore("vx", "cwxhmpej", "lkexaonwivkcqh")
            .withTags(mapOf("hluqwquls", "ly", "zvqqugdrftbcvexr", "trjbhxykfhyq", "agk", "uquowtljvfwhr",
                "dgglmepjpfs", "yxvrqtvbczsul"))
            .withProperties(new ArtifactManifestPropertiesFormat().withArtifacts(Arrays.asList(
                new ManifestArtifactFormat().withArtifactName("jubyqjfkakfq")
                    .withArtifactType(ArtifactType.VHD_IMAGE_FILE)
                    .withArtifactVersion("myildudxjasc"),
                new ManifestArtifactFormat().withArtifactName("vfdjkpdxp")
                    .withArtifactType(ArtifactType.VHD_IMAGE_FILE)
                    .withArtifactVersion("snmgzvyfi"))))
            .create();

        Assertions.assertEquals("jofqcvovjufycs", response.location());
        Assertions.assertEquals("bemyeji", response.tags().get("iuxegth"));
        Assertions.assertEquals("oknub", response.properties().artifacts().get(0).artifactName());
        Assertions.assertEquals(ArtifactType.OCIARTIFACT, response.properties().artifacts().get(0).artifactType());
        Assertions.assertEquals("pkpztrg", response.properties().artifacts().get(0).artifactVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
