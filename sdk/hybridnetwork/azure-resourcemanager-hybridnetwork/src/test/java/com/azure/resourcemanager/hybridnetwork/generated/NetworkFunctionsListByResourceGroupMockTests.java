// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hybridnetwork.HybridNetworkManager;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunction;
import com.azure.resourcemanager.hybridnetwork.models.NfviType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class NetworkFunctionsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"configurationType\":\"NetworkFunctionPropertiesFormat\",\"provisioningState\":\"Succeeded\",\"publisherName\":\"idvmfqhppubo\",\"publisherScope\":\"Private\",\"networkFunctionDefinitionGroupName\":\"dfgkmtdh\",\"networkFunctionDefinitionVersion\":\"ngb\",\"networkFunctionDefinitionOfferingLocation\":\"juahokqto\",\"networkFunctionDefinitionVersionResourceReference\":{\"idType\":\"DeploymentResourceIdReference\"},\"nfviType\":\"AzureOperatorNexus\",\"nfviId\":\"ofshfphwpnulaiyw\",\"allowSoftwareUpdate\":false,\"roleOverrideValues\":[\"hs\",\"wkojpllndnpd\"]},\"etag\":\"pqafgfugsnnfhy\",\"identity\":{\"principalId\":\"6080c6aa-4d23-4ef3-89f1-95553e2d194b\",\"tenantId\":\"eaab8813-24b0-4933-b335-70f642bf714c\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"ctfjgtixr\":{\"principalId\":\"fa59d4c4-6f0e-4d85-8134-dffcfcb67743\",\"clientId\":\"4c08cd75-24f2-4953-b35c-450db4ce96f0\"}}},\"location\":\"zuyt\",\"tags\":{\"bauiropi\":\"lmuowo\",\"n\":\"nszonwpngaj\"},\"id\":\"ixjawrtm\",\"name\":\"fjmyccxlzhco\",\"type\":\"ovne\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HybridNetworkManager manager = HybridNetworkManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<NetworkFunction> response
            = manager.networkFunctions().listByResourceGroup("hsycxhxzgaz", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zuyt", response.iterator().next().location());
        Assertions.assertEquals("lmuowo", response.iterator().next().tags().get("bauiropi"));
        Assertions.assertEquals(NfviType.AZURE_OPERATOR_NEXUS, response.iterator().next().properties().nfviType());
        Assertions.assertEquals("ofshfphwpnulaiyw", response.iterator().next().properties().nfviId());
        Assertions.assertEquals(false, response.iterator().next().properties().allowSoftwareUpdate());
        Assertions.assertEquals("hs", response.iterator().next().properties().roleOverrideValues().get(0));
        Assertions.assertEquals("pqafgfugsnnfhy", response.iterator().next().etag());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
    }
}
