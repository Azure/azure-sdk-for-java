// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.NetworkServiceDesignGroupInner;
import com.azure.resourcemanager.hybridnetwork.models.NetworkServiceDesignGroupListResult;
import com.azure.resourcemanager.hybridnetwork.models.NetworkServiceDesignGroupPropertiesFormat;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkServiceDesignGroupListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkServiceDesignGroupListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"description\":\"dy\"},\"location\":\"rwyhqmibzyhwitsm\",\"tags\":{\"biknsorgjhxbld\":\"ynpcdpumnzgmwznm\",\"dmtnc\":\"lwwrl\",\"tllxdyhgsyocogj\":\"ok\",\"kvci\":\"tdtbnnhadooc\"},\"id\":\"hnvpamqgxq\",\"name\":\"u\",\"type\":\"zikywgg\"},{\"properties\":{\"provisioningState\":\"Succeeded\",\"description\":\"atmelwui\"},\"location\":\"ccjzkzivgvv\",\"tags\":{\"hyrnxxmu\":\"y\",\"v\":\"edndr\"},\"id\":\"tkwqqtchealm\",\"name\":\"mtdaa\",\"type\":\"gdv\"}],\"nextLink\":\"gpiohgwxrtfudxe\"}")
            .toObject(NetworkServiceDesignGroupListResult.class);
        Assertions.assertEquals("rwyhqmibzyhwitsm", model.value().get(0).location());
        Assertions.assertEquals("ynpcdpumnzgmwznm", model.value().get(0).tags().get("biknsorgjhxbld"));
        Assertions.assertEquals("dy", model.value().get(0).properties().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkServiceDesignGroupListResult model = new NetworkServiceDesignGroupListResult().withValue(Arrays.asList(
            new NetworkServiceDesignGroupInner().withLocation("rwyhqmibzyhwitsm")
                .withTags(mapOf("biknsorgjhxbld", "ynpcdpumnzgmwznm", "dmtnc", "lwwrl", "tllxdyhgsyocogj", "ok", "kvci",
                    "tdtbnnhadooc"))
                .withProperties(new NetworkServiceDesignGroupPropertiesFormat().withDescription("dy")),
            new NetworkServiceDesignGroupInner().withLocation("ccjzkzivgvv")
                .withTags(mapOf("hyrnxxmu", "y", "v", "edndr"))
                .withProperties(new NetworkServiceDesignGroupPropertiesFormat().withDescription("atmelwui"))));
        model = BinaryData.fromObject(model).toObject(NetworkServiceDesignGroupListResult.class);
        Assertions.assertEquals("rwyhqmibzyhwitsm", model.value().get(0).location());
        Assertions.assertEquals("ynpcdpumnzgmwznm", model.value().get(0).tags().get("biknsorgjhxbld"));
        Assertions.assertEquals("dy", model.value().get(0).properties().description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
