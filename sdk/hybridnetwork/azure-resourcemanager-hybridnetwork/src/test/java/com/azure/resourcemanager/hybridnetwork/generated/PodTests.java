// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.models.Pod;
import com.azure.resourcemanager.hybridnetwork.models.PodEvent;
import com.azure.resourcemanager.hybridnetwork.models.PodEventType;
import com.azure.resourcemanager.hybridnetwork.models.PodStatus;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PodTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Pod model = BinaryData.fromString(
            "{\"name\":\"hqjohxcrsbfova\",\"namespace\":\"ruvw\",\"desired\":1393923794,\"ready\":1495438524,\"status\":\"NotReady\",\"creationTime\":\"2021-05-02T16:44:33Z\",\"events\":[{\"type\":\"Normal\",\"reason\":\"xb\",\"message\":\"bsrfbj\",\"lastSeenTime\":\"2021-07-26T21:20:39Z\"}]}")
            .toObject(Pod.class);
        Assertions.assertEquals("hqjohxcrsbfova", model.name());
        Assertions.assertEquals("ruvw", model.namespace());
        Assertions.assertEquals(1393923794, model.desired());
        Assertions.assertEquals(1495438524, model.ready());
        Assertions.assertEquals(PodStatus.NOT_READY, model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-02T16:44:33Z"), model.creationTime());
        Assertions.assertEquals(PodEventType.NORMAL, model.events().get(0).type());
        Assertions.assertEquals("xb", model.events().get(0).reason());
        Assertions.assertEquals("bsrfbj", model.events().get(0).message());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-26T21:20:39Z"), model.events().get(0).lastSeenTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Pod model
            = new Pod().withName("hqjohxcrsbfova").withNamespace("ruvw").withDesired(1393923794).withReady(1495438524)
                .withStatus(PodStatus.NOT_READY).withCreationTime(OffsetDateTime.parse("2021-05-02T16:44:33Z"))
                .withEvents(Arrays.asList(new PodEvent().withType(PodEventType.NORMAL).withReason("xb")
                    .withMessage("bsrfbj").withLastSeenTime(OffsetDateTime.parse("2021-07-26T21:20:39Z"))));
        model = BinaryData.fromObject(model).toObject(Pod.class);
        Assertions.assertEquals("hqjohxcrsbfova", model.name());
        Assertions.assertEquals("ruvw", model.namespace());
        Assertions.assertEquals(1393923794, model.desired());
        Assertions.assertEquals(1495438524, model.ready());
        Assertions.assertEquals(PodStatus.NOT_READY, model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-02T16:44:33Z"), model.creationTime());
        Assertions.assertEquals(PodEventType.NORMAL, model.events().get(0).type());
        Assertions.assertEquals("xb", model.events().get(0).reason());
        Assertions.assertEquals("bsrfbj", model.events().get(0).message());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-26T21:20:39Z"), model.events().get(0).lastSeenTime());
    }
}
