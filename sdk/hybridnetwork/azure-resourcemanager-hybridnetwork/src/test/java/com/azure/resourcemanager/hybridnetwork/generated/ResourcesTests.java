// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.models.DaemonSet;
import com.azure.resourcemanager.hybridnetwork.models.Deployment;
import com.azure.resourcemanager.hybridnetwork.models.Pod;
import com.azure.resourcemanager.hybridnetwork.models.PodEvent;
import com.azure.resourcemanager.hybridnetwork.models.PodEventType;
import com.azure.resourcemanager.hybridnetwork.models.PodStatus;
import com.azure.resourcemanager.hybridnetwork.models.ReplicaSet;
import com.azure.resourcemanager.hybridnetwork.models.Resources;
import com.azure.resourcemanager.hybridnetwork.models.StatefulSet;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ResourcesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Resources model = BinaryData.fromString(
            "{\"deployments\":[{\"name\":\"thnnpr\",\"namespace\":\"i\",\"desired\":1381337865,\"ready\":1073043267,\"upToDate\":1819249918,\"available\":1074564233,\"creationTime\":\"2021-10-12T12:24:32Z\"},{\"name\":\"dultskz\",\"namespace\":\"tdzumveekgpw\",\"desired\":311434030,\"ready\":1290652027,\"upToDate\":102600378,\"available\":1718146302,\"creationTime\":\"2021-04-16T10:11:35Z\"}],\"pods\":[{\"name\":\"xl\",\"namespace\":\"sd\",\"desired\":1422945070,\"ready\":1252528512,\"status\":\"Pending\",\"creationTime\":\"2021-08-12T22:43:04Z\",\"events\":[{\"type\":\"Warning\",\"reason\":\"lns\",\"message\":\"bxwyjsflhhcaa\",\"lastSeenTime\":\"2021-08-06T05:51:03Z\"},{\"type\":\"Warning\",\"reason\":\"sxyawjoyaqcs\",\"message\":\"jpkiidzyexznelix\",\"lastSeenTime\":\"2021-06-05T01:05:11Z\"}]}],\"replicaSets\":[{\"name\":\"o\",\"namespace\":\"bnxknalaulppg\",\"desired\":1987785731,\"ready\":1767174247,\"current\":523387413,\"creationTime\":\"2021-05-09T23:44:35Z\"},{\"name\":\"ropuhpigv\",\"namespace\":\"ylgqgitxmedjvcsl\",\"desired\":1361907690,\"ready\":1519896216,\"current\":282783230,\"creationTime\":\"2021-02-16T11:10:06Z\"}],\"statefulSets\":[{\"name\":\"gktrmgucnapkte\",\"namespace\":\"llwptfdy\",\"desired\":622690283,\"ready\":190116972,\"creationTime\":\"2021-02-07T11:23:14Z\"}],\"daemonSets\":[{\"name\":\"pzfqrhhuaoppp\",\"namespace\":\"eqx\",\"desired\":72119187,\"current\":681425142,\"ready\":1917663918,\"upToDate\":1247520399,\"available\":792773086,\"creationTime\":\"2021-10-01T04:47:29Z\"},{\"name\":\"kdmoi\",\"namespace\":\"ostmgrcf\",\"desired\":159831897,\"current\":527212463,\"ready\":42269954,\"upToDate\":1576761958,\"available\":1357802643,\"creationTime\":\"2021-06-20T10:47:57Z\"},{\"name\":\"vjymjhxxjyngud\",\"namespace\":\"krtswbxqz\",\"desired\":668834645,\"current\":133351915,\"ready\":453874905,\"upToDate\":34322019,\"available\":1315854655,\"creationTime\":\"2021-07-10T04:00:45Z\"},{\"name\":\"vetvt\",\"namespace\":\"aqtdoqmcbx\",\"desired\":1289805860,\"current\":76309450,\"ready\":1380366817,\"upToDate\":1770504404,\"available\":1481756082,\"creationTime\":\"2021-02-23T20:11:15Z\"}]}")
            .toObject(Resources.class);
        Assertions.assertEquals("thnnpr", model.deployments().get(0).name());
        Assertions.assertEquals("i", model.deployments().get(0).namespace());
        Assertions.assertEquals(1381337865, model.deployments().get(0).desired());
        Assertions.assertEquals(1073043267, model.deployments().get(0).ready());
        Assertions.assertEquals(1819249918, model.deployments().get(0).upToDate());
        Assertions.assertEquals(1074564233, model.deployments().get(0).available());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-12T12:24:32Z"),
            model.deployments().get(0).creationTime());
        Assertions.assertEquals("xl", model.pods().get(0).name());
        Assertions.assertEquals("sd", model.pods().get(0).namespace());
        Assertions.assertEquals(1422945070, model.pods().get(0).desired());
        Assertions.assertEquals(1252528512, model.pods().get(0).ready());
        Assertions.assertEquals(PodStatus.PENDING, model.pods().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-12T22:43:04Z"), model.pods().get(0).creationTime());
        Assertions.assertEquals(PodEventType.WARNING, model.pods().get(0).events().get(0).type());
        Assertions.assertEquals("lns", model.pods().get(0).events().get(0).reason());
        Assertions.assertEquals("bxwyjsflhhcaa", model.pods().get(0).events().get(0).message());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-06T05:51:03Z"),
            model.pods().get(0).events().get(0).lastSeenTime());
        Assertions.assertEquals("o", model.replicaSets().get(0).name());
        Assertions.assertEquals("bnxknalaulppg", model.replicaSets().get(0).namespace());
        Assertions.assertEquals(1987785731, model.replicaSets().get(0).desired());
        Assertions.assertEquals(1767174247, model.replicaSets().get(0).ready());
        Assertions.assertEquals(523387413, model.replicaSets().get(0).current());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-09T23:44:35Z"),
            model.replicaSets().get(0).creationTime());
        Assertions.assertEquals("gktrmgucnapkte", model.statefulSets().get(0).name());
        Assertions.assertEquals("llwptfdy", model.statefulSets().get(0).namespace());
        Assertions.assertEquals(622690283, model.statefulSets().get(0).desired());
        Assertions.assertEquals(190116972, model.statefulSets().get(0).ready());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-07T11:23:14Z"),
            model.statefulSets().get(0).creationTime());
        Assertions.assertEquals("pzfqrhhuaoppp", model.daemonSets().get(0).name());
        Assertions.assertEquals("eqx", model.daemonSets().get(0).namespace());
        Assertions.assertEquals(72119187, model.daemonSets().get(0).desired());
        Assertions.assertEquals(681425142, model.daemonSets().get(0).current());
        Assertions.assertEquals(1917663918, model.daemonSets().get(0).ready());
        Assertions.assertEquals(1247520399, model.daemonSets().get(0).upToDate());
        Assertions.assertEquals(792773086, model.daemonSets().get(0).available());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-01T04:47:29Z"), model.daemonSets().get(0).creationTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Resources model = new Resources()
            .withDeployments(Arrays.asList(
                new Deployment().withName("thnnpr").withNamespace("i").withDesired(1381337865).withReady(1073043267)
                    .withUpToDate(1819249918).withAvailable(1074564233)
                    .withCreationTime(OffsetDateTime.parse("2021-10-12T12:24:32Z")),
                new Deployment().withName("dultskz").withNamespace("tdzumveekgpw").withDesired(311434030)
                    .withReady(1290652027).withUpToDate(102600378).withAvailable(1718146302)
                    .withCreationTime(OffsetDateTime.parse("2021-04-16T10:11:35Z"))))
            .withPods(
                Arrays.asList(new Pod().withName("xl").withNamespace("sd").withDesired(1422945070).withReady(1252528512)
                    .withStatus(PodStatus.PENDING).withCreationTime(OffsetDateTime.parse("2021-08-12T22:43:04Z"))
                    .withEvents(Arrays.asList(
                        new PodEvent().withType(PodEventType.WARNING).withReason("lns").withMessage("bxwyjsflhhcaa")
                            .withLastSeenTime(OffsetDateTime.parse("2021-08-06T05:51:03Z")),
                        new PodEvent().withType(PodEventType.WARNING).withReason("sxyawjoyaqcs")
                            .withMessage("jpkiidzyexznelix")
                            .withLastSeenTime(OffsetDateTime.parse("2021-06-05T01:05:11Z"))))))
            .withReplicaSets(Arrays.asList(
                new ReplicaSet().withName("o").withNamespace("bnxknalaulppg").withDesired(1987785731)
                    .withReady(1767174247).withCurrent(523387413)
                    .withCreationTime(OffsetDateTime.parse("2021-05-09T23:44:35Z")),
                new ReplicaSet().withName("ropuhpigv").withNamespace("ylgqgitxmedjvcsl").withDesired(1361907690)
                    .withReady(1519896216).withCurrent(282783230)
                    .withCreationTime(OffsetDateTime.parse("2021-02-16T11:10:06Z"))))
            .withStatefulSets(Arrays
                .asList(new StatefulSet().withName("gktrmgucnapkte").withNamespace("llwptfdy").withDesired(622690283)
                    .withReady(190116972).withCreationTime(OffsetDateTime.parse("2021-02-07T11:23:14Z"))))
            .withDaemonSets(Arrays.asList(
                new DaemonSet().withName("pzfqrhhuaoppp").withNamespace("eqx").withDesired(72119187)
                    .withCurrent(681425142).withReady(1917663918).withUpToDate(1247520399).withAvailable(792773086)
                    .withCreationTime(OffsetDateTime.parse("2021-10-01T04:47:29Z")),
                new DaemonSet().withName("kdmoi").withNamespace("ostmgrcf").withDesired(159831897)
                    .withCurrent(527212463).withReady(42269954).withUpToDate(1576761958).withAvailable(1357802643)
                    .withCreationTime(OffsetDateTime.parse("2021-06-20T10:47:57Z")),
                new DaemonSet().withName("vjymjhxxjyngud").withNamespace("krtswbxqz").withDesired(668834645)
                    .withCurrent(133351915).withReady(453874905).withUpToDate(34322019).withAvailable(1315854655)
                    .withCreationTime(OffsetDateTime.parse("2021-07-10T04:00:45Z")),
                new DaemonSet().withName("vetvt").withNamespace("aqtdoqmcbx").withDesired(1289805860)
                    .withCurrent(76309450).withReady(1380366817).withUpToDate(1770504404).withAvailable(1481756082)
                    .withCreationTime(OffsetDateTime.parse("2021-02-23T20:11:15Z"))));
        model = BinaryData.fromObject(model).toObject(Resources.class);
        Assertions.assertEquals("thnnpr", model.deployments().get(0).name());
        Assertions.assertEquals("i", model.deployments().get(0).namespace());
        Assertions.assertEquals(1381337865, model.deployments().get(0).desired());
        Assertions.assertEquals(1073043267, model.deployments().get(0).ready());
        Assertions.assertEquals(1819249918, model.deployments().get(0).upToDate());
        Assertions.assertEquals(1074564233, model.deployments().get(0).available());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-12T12:24:32Z"),
            model.deployments().get(0).creationTime());
        Assertions.assertEquals("xl", model.pods().get(0).name());
        Assertions.assertEquals("sd", model.pods().get(0).namespace());
        Assertions.assertEquals(1422945070, model.pods().get(0).desired());
        Assertions.assertEquals(1252528512, model.pods().get(0).ready());
        Assertions.assertEquals(PodStatus.PENDING, model.pods().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-12T22:43:04Z"), model.pods().get(0).creationTime());
        Assertions.assertEquals(PodEventType.WARNING, model.pods().get(0).events().get(0).type());
        Assertions.assertEquals("lns", model.pods().get(0).events().get(0).reason());
        Assertions.assertEquals("bxwyjsflhhcaa", model.pods().get(0).events().get(0).message());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-06T05:51:03Z"),
            model.pods().get(0).events().get(0).lastSeenTime());
        Assertions.assertEquals("o", model.replicaSets().get(0).name());
        Assertions.assertEquals("bnxknalaulppg", model.replicaSets().get(0).namespace());
        Assertions.assertEquals(1987785731, model.replicaSets().get(0).desired());
        Assertions.assertEquals(1767174247, model.replicaSets().get(0).ready());
        Assertions.assertEquals(523387413, model.replicaSets().get(0).current());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-09T23:44:35Z"),
            model.replicaSets().get(0).creationTime());
        Assertions.assertEquals("gktrmgucnapkte", model.statefulSets().get(0).name());
        Assertions.assertEquals("llwptfdy", model.statefulSets().get(0).namespace());
        Assertions.assertEquals(622690283, model.statefulSets().get(0).desired());
        Assertions.assertEquals(190116972, model.statefulSets().get(0).ready());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-07T11:23:14Z"),
            model.statefulSets().get(0).creationTime());
        Assertions.assertEquals("pzfqrhhuaoppp", model.daemonSets().get(0).name());
        Assertions.assertEquals("eqx", model.daemonSets().get(0).namespace());
        Assertions.assertEquals(72119187, model.daemonSets().get(0).desired());
        Assertions.assertEquals(681425142, model.daemonSets().get(0).current());
        Assertions.assertEquals(1917663918, model.daemonSets().get(0).ready());
        Assertions.assertEquals(1247520399, model.daemonSets().get(0).upToDate());
        Assertions.assertEquals(792773086, model.daemonSets().get(0).available());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-01T04:47:29Z"), model.daemonSets().get(0).creationTime());
    }
}
