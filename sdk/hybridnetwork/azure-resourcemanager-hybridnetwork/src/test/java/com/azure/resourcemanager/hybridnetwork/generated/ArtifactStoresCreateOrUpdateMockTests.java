// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridnetwork.HybridNetworkManager;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactReplicationStrategy;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactStore;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactStorePropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactStorePropertiesFormatManagedResourceGroupConfiguration;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactStoreType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ArtifactStoresCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"storeType\":\"AzureStorageAccount\",\"replicationStrategy\":\"Unknown\",\"managedResourceGroupConfiguration\":{\"name\":\"uuipldq\",\"location\":\"tekva\"},\"storageResourceId\":\"l\"},\"location\":\"jqvq\",\"tags\":{\"a\":\"eh\",\"ivzrrryveimipsk\":\"mxhzzysevus\",\"vvruxwi\":\"yzatvfuzkaft\"},\"id\":\"syeipqd\",\"name\":\"mjtgrqg\",\"type\":\"gkkileplkcsmkn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridNetworkManager manager = HybridNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ArtifactStore response = manager.artifactStores()
            .define("dwckygroe")
            .withRegion("wryshwd")
            .withExistingPublisher("oytehqpuvjm", "qm")
            .withTags(mapOf("w", "bxgkqusy", "ymtpo", "tdacarvvlfn", "r", "wenaz"))
            .withProperties(
                new ArtifactStorePropertiesFormat().withStoreType(ArtifactStoreType.AZURE_CONTAINER_REGISTRY)
                    .withReplicationStrategy(ArtifactReplicationStrategy.SINGLE_REPLICATION)
                    .withManagedResourceGroupConfiguration(
                        new ArtifactStorePropertiesFormatManagedResourceGroupConfiguration().withName("kb")
                            .withLocation("eqy")))
            .create();

        Assertions.assertEquals("jqvq", response.location());
        Assertions.assertEquals("eh", response.tags().get("a"));
        Assertions.assertEquals(ArtifactStoreType.AZURE_STORAGE_ACCOUNT, response.properties().storeType());
        Assertions.assertEquals(ArtifactReplicationStrategy.UNKNOWN, response.properties().replicationStrategy());
        Assertions.assertEquals("uuipldq", response.properties().managedResourceGroupConfiguration().name());
        Assertions.assertEquals("tekva", response.properties().managedResourceGroupConfiguration().location());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
