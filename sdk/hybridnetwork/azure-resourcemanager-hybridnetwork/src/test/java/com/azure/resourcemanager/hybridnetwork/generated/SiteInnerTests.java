// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.SiteInner;
import com.azure.resourcemanager.hybridnetwork.models.NfvIs;
import com.azure.resourcemanager.hybridnetwork.models.SitePropertiesFormat;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SiteInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SiteInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Converging\",\"nfvis\":[{\"nfviType\":\"NfvIs\",\"name\":\"uaadraufactkahzo\"},{\"nfviType\":\"NfvIs\",\"name\":\"jjziuxxpsh\"},{\"nfviType\":\"NfvIs\",\"name\":\"e\"}],\"siteNetworkServiceReferences\":[{\"id\":\"gs\"}]},\"location\":\"ubkwdle\",\"tags\":{\"pjuohminyfl\":\"sutujba\"},\"id\":\"orwmduvwpklv\",\"name\":\"w\",\"type\":\"ygdxpgpqchis\"}")
            .toObject(SiteInner.class);
        Assertions.assertEquals("ubkwdle", model.location());
        Assertions.assertEquals("sutujba", model.tags().get("pjuohminyfl"));
        Assertions.assertEquals("uaadraufactkahzo", model.properties().nfvis().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SiteInner model = new SiteInner().withLocation("ubkwdle").withTags(mapOf("pjuohminyfl", "sutujba"))
            .withProperties(new SitePropertiesFormat().withNfvis(Arrays.asList(new NfvIs().withName("uaadraufactkahzo"),
                new NfvIs().withName("jjziuxxpsh"), new NfvIs().withName("e"))));
        model = BinaryData.fromObject(model).toObject(SiteInner.class);
        Assertions.assertEquals("ubkwdle", model.location());
        Assertions.assertEquals("sutujba", model.tags().get("pjuohminyfl"));
        Assertions.assertEquals("uaadraufactkahzo", model.properties().nfvis().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
