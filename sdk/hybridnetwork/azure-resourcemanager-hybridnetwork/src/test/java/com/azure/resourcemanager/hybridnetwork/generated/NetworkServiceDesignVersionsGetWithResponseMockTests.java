// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hybridnetwork.HybridNetworkManager;
import com.azure.resourcemanager.hybridnetwork.models.NetworkServiceDesignVersion;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class NetworkServiceDesignVersionsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Failed\",\"versionState\":\"Unknown\",\"description\":\"xhikkflrmymyin\",\"configurationGroupSchemaReferences\":{\"gqcg\":{\"id\":\"riswslmiiio\"},\"ptjgwdt\":{\"id\":\"ugqkctotiowlxteq\"}},\"nfvisFromSite\":{\"wgniipr\":{\"name\":\"anblwphqlkccu\",\"type\":\"ygqwahoiu\"},\"phavpmhbrb\":{\"name\":\"vawuwzdufypivlsb\",\"type\":\"pmcubkmifoxxkub\"},\"qmrjg\":{\"name\":\"vgovpbbttefjokn\",\"type\":\"qyzqedikdfrdb\"},\"gt\":{\"name\":\"hfqlgg\",\"type\":\"iwzcxmjpbyeph\"}},\"resourceElementTemplates\":[{\"type\":\"ResourceElementTemplate\",\"name\":\"rc\",\"dependsOnProfile\":{\"installDependsOn\":[\"i\",\"gxhnpomyqwcabv\"],\"uninstallDependsOn\":[\"leeyaswl\"],\"updateDependsOn\":[\"gm\",\"mfj\"]}}]},\"location\":\"xwtoaukhfkvc\",\"tags\":{\"jwuive\":\"zmoaeds\",\"smgomguaml\":\"wcgyeewxeiqb\"},\"id\":\"dlrgms\",\"name\":\"lzgaufcshhvnew\",\"type\":\"nxkympqanxrjk\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HybridNetworkManager manager = HybridNetworkManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        NetworkServiceDesignVersion response = manager.networkServiceDesignVersions()
            .getWithResponse("ujdjltymkmvg", "ihywartspph", "ixkykxd", "sj", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("xwtoaukhfkvc", response.location());
        Assertions.assertEquals("zmoaeds", response.tags().get("jwuive"));
        Assertions.assertEquals("xhikkflrmymyin", response.properties().description());
        Assertions.assertEquals("riswslmiiio",
            response.properties().configurationGroupSchemaReferences().get("gqcg").id());
        Assertions.assertEquals("anblwphqlkccu", response.properties().nfvisFromSite().get("wgniipr").name());
        Assertions.assertEquals("ygqwahoiu", response.properties().nfvisFromSite().get("wgniipr").type());
        Assertions.assertEquals("rc", response.properties().resourceElementTemplates().get(0).name());
        Assertions.assertEquals("i",
            response.properties().resourceElementTemplates().get(0).dependsOnProfile().installDependsOn().get(0));
        Assertions.assertEquals("leeyaswl",
            response.properties().resourceElementTemplates().get(0).dependsOnProfile().uninstallDependsOn().get(0));
        Assertions.assertEquals("gm",
            response.properties().resourceElementTemplates().get(0).dependsOnProfile().updateDependsOn().get(0));
    }
}
