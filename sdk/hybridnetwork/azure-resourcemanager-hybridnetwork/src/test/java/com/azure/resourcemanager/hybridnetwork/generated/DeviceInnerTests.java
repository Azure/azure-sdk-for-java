// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.DeviceInner;
import com.azure.resourcemanager.hybridnetwork.models.DevicePropertiesFormat;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DeviceInnerTests {
    @Test
    public void testDeserialize() {
        DeviceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"deviceType\":\"DevicePropertiesFormat\",\"status\":\"Registered\",\"provisioningState\":\"Canceled\",\"networkFunctions\":[{\"id\":\"oxzjnchgejspod\"},{\"id\":\"ilzyd\"},{\"id\":\"o\"}]},\"location\":\"yahux\",\"tags\":{\"xj\":\"mqnjaqw\",\"atscmd\":\"prozvcputegjvwmf\"},\"id\":\"pjhulsuuvmkj\",\"name\":\"zkrwfn\",\"type\":\"iodjp\"}")
                .toObject(DeviceInner.class);
        Assertions.assertEquals("yahux", model.location());
        Assertions.assertEquals("mqnjaqw", model.tags().get("xj"));
    }

    @Test
    public void testSerialize() {
        DeviceInner model =
            new DeviceInner()
                .withLocation("yahux")
                .withTags(mapOf("xj", "mqnjaqw", "atscmd", "prozvcputegjvwmf"))
                .withProperties(new DevicePropertiesFormat());
        model = BinaryData.fromObject(model).toObject(DeviceInner.class);
        Assertions.assertEquals("yahux", model.location());
        Assertions.assertEquals("mqnjaqw", model.tags().get("xj"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
