// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridnetwork.HybridNetworkManager;
import com.azure.resourcemanager.hybridnetwork.models.DeploymentResourceIdReference;
import com.azure.resourcemanager.hybridnetwork.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentity;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hybridnetwork.models.ReferencedResource;
import com.azure.resourcemanager.hybridnetwork.models.SiteNetworkService;
import com.azure.resourcemanager.hybridnetwork.models.SiteNetworkServicePropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.Sku;
import com.azure.resourcemanager.hybridnetwork.models.SkuName;
import com.azure.resourcemanager.hybridnetwork.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SiteNetworkServicesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"managedResourceGroupConfiguration\":{\"name\":\"usuv\",\"location\":\"lczwci\"},\"siteReference\":{\"id\":\"sllfryvdmvxad\"},\"publisherName\":\"cfrgnawbabgfbkt\",\"publisherScope\":\"Unknown\",\"networkServiceDesignGroupName\":\"czlfsy\",\"networkServiceDesignVersionName\":\"frbzgowo\",\"networkServiceDesignVersionOfferingLocation\":\"mj\",\"networkServiceDesignVersionResourceReference\":{\"idType\":\"DeploymentResourceIdReference\"},\"desiredStateConfigurationGroupValueReferences\":{\"xhlusrvxis\":{\"id\":\"nyq\"}},\"lastStateNetworkServiceDesignVersionName\":\"jceagb\",\"lastStateConfigurationGroupValueReferences\":{\"qipubyz\":{\"id\":\"sumywzashxgonoyj\"}}},\"identity\":{\"principalId\":\"f85db881-55a4-4e03-aa25-b491a5c709c0\",\"tenantId\":\"f8b780f3-a0ef-466d-aa5f-ed50144822e2\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"gv\":{\"principalId\":\"ce6c262f-437d-4811-8e15-c7f34127cdff\",\"clientId\":\"74c13faf-6406-4937-b9c8-373977f74d2c\"},\"m\":{\"principalId\":\"abdb5d67-abe5-4783-9274-3323afcf1ac3\",\"clientId\":\"174c82e4-2395-45a9-9fac-bd827bedabaf\"},\"qujlyegqa\":{\"principalId\":\"c394ba34-ac3c-4531-92c6-92d78d974d74\",\"clientId\":\"81481ea8-0bcc-4972-ab40-c202cffe757a\"},\"gflqqbtnyjp\":{\"principalId\":\"668aa780-3cd2-4705-885e-91fe567fcb09\",\"clientId\":\"a8ba9bbe-eed2-46c4-8fff-d5df4c2136bb\"}}},\"sku\":{\"name\":\"Basic\",\"tier\":\"Basic\"},\"location\":\"vabm\",\"tags\":{\"lwuhvajmailfe\":\"xbaevwjcnkot\"},\"id\":\"jjzakzwjiqullqx\",\"name\":\"dmvr\",\"type\":\"cm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridNetworkManager manager = HybridNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SiteNetworkService response = manager.siteNetworkServices()
            .define("xpvelszerqzevxo")
            .withRegion("ka")
            .withExistingResourceGroup("y")
            .withTags(mapOf("lwfgziiu", "sxtlg", "lijjjrtvam", "ijjcea", "zknxkv", "a", "k", "cxetyvkunmignoh"))
            .withProperties(new SiteNetworkServicePropertiesFormat()
                .withManagedResourceGroupConfiguration(
                    new ManagedResourceGroupConfiguration().withName("waljglzoblqwaaf").withLocation("ulhmzyq"))
                .withSiteReference(new ReferencedResource().withId("vafjrqpjiyrqj"))
                .withNetworkServiceDesignVersionResourceReference(new DeploymentResourceIdReference())
                .withDesiredStateConfigurationGroupValueReferences(
                    mapOf("ucaifpaurwwgilf", new ReferencedResource().withId("edxn"), "iakeciqc",
                        new ReferencedResource().withId("qacdmkxwxdcvjwcy"))))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf("lamgglvlmfejdo", new UserAssignedIdentity(), "kgltyg", new UserAssignedIdentity())))
            .withSku(new Sku().withName(SkuName.STANDARD))
            .create();

        Assertions.assertEquals("vabm", response.location());
        Assertions.assertEquals("xbaevwjcnkot", response.tags().get("lwuhvajmailfe"));
        Assertions.assertEquals("usuv", response.properties().managedResourceGroupConfiguration().name());
        Assertions.assertEquals("lczwci", response.properties().managedResourceGroupConfiguration().location());
        Assertions.assertEquals("sllfryvdmvxad", response.properties().siteReference().id());
        Assertions.assertEquals("nyq",
            response.properties().desiredStateConfigurationGroupValueReferences().get("xhlusrvxis").id());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals(SkuName.BASIC, response.sku().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
