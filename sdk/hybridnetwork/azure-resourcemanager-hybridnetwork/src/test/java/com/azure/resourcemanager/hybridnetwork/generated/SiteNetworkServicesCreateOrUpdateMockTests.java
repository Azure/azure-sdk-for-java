// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hybridnetwork.HybridNetworkManager;
import com.azure.resourcemanager.hybridnetwork.models.DeploymentResourceIdReference;
import com.azure.resourcemanager.hybridnetwork.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentity;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hybridnetwork.models.ReferencedResource;
import com.azure.resourcemanager.hybridnetwork.models.SiteNetworkService;
import com.azure.resourcemanager.hybridnetwork.models.SiteNetworkServicePropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.Sku;
import com.azure.resourcemanager.hybridnetwork.models.SkuName;
import com.azure.resourcemanager.hybridnetwork.models.UserAssignedIdentity;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SiteNetworkServicesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"managedResourceGroupConfiguration\":{\"name\":\"usuv\",\"location\":\"lczwci\"},\"siteReference\":{\"id\":\"sllfryvdmvxad\"},\"publisherName\":\"cfrgnawbabgfbkt\",\"publisherScope\":\"Unknown\",\"networkServiceDesignGroupName\":\"czlfsy\",\"networkServiceDesignVersionName\":\"frbzgowo\",\"networkServiceDesignVersionOfferingLocation\":\"mj\",\"networkServiceDesignVersionResourceReference\":{\"idType\":\"DeploymentResourceIdReference\"},\"desiredStateConfigurationGroupValueReferences\":{\"xhlusrvxis\":{\"id\":\"nyq\"}},\"lastStateNetworkServiceDesignVersionName\":\"jceagb\",\"lastStateConfigurationGroupValueReferences\":{\"qipubyz\":{\"id\":\"sumywzashxgonoyj\"}}},\"identity\":{\"principalId\":\"1feb67f7-7d4a-496c-8edb-c220e1c747e3\",\"tenantId\":\"e4137c56-bb51-4b15-a241-82de4d9f03e1\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"gv\":{\"principalId\":\"5681f559-cef0-4a17-af9c-4efc4412ef88\",\"clientId\":\"361faa97-4133-4601-94ba-3c46f042db97\"},\"m\":{\"principalId\":\"ffe26eb5-706f-49f4-8e12-3c477f6c1592\",\"clientId\":\"86029674-c4e7-4c98-b18b-bf230c0fa183\"},\"qujlyegqa\":{\"principalId\":\"0f067247-3840-49f4-816a-f0c230db5706\",\"clientId\":\"80ef49a4-01ec-4d08-8303-9065e800a365\"},\"gflqqbtnyjp\":{\"principalId\":\"0d129ff8-a960-4e01-93f4-fd47cd314d1c\",\"clientId\":\"b73d7ad5-28d7-49da-8a91-c2b59903915b\"}}},\"sku\":{\"name\":\"Basic\",\"tier\":\"Basic\"},\"location\":\"vabm\",\"tags\":{\"lwuhvajmailfe\":\"xbaevwjcnkot\"},\"id\":\"jjzakzwjiqullqx\",\"name\":\"dmvr\",\"type\":\"cm\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HybridNetworkManager manager = HybridNetworkManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        SiteNetworkService response
            = manager.siteNetworkServices().define("xpvelszerqzevxo").withRegion("ka").withExistingResourceGroup("y")
                .withTags(mapOf("lwfgziiu", "sxtlg", "lijjjrtvam", "ijjcea", "zknxkv", "a", "k", "cxetyvkunmignoh"))
                .withProperties(new SiteNetworkServicePropertiesFormat()
                    .withManagedResourceGroupConfiguration(
                        new ManagedResourceGroupConfiguration().withName("waljglzoblqwaaf").withLocation("ulhmzyq"))
                    .withSiteReference(new ReferencedResource().withId("vafjrqpjiyrqj"))
                    .withNetworkServiceDesignVersionResourceReference(new DeploymentResourceIdReference())
                    .withDesiredStateConfigurationGroupValueReferences(
                        mapOf("ucaifpaurwwgilf", new ReferencedResource().withId("edxn"), "iakeciqc",
                            new ReferencedResource().withId("qacdmkxwxdcvjwcy"))))
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(
                        mapOf("lamgglvlmfejdo", new UserAssignedIdentity(), "kgltyg", new UserAssignedIdentity())))
                .withSku(new Sku().withName(SkuName.STANDARD)).create();

        Assertions.assertEquals("vabm", response.location());
        Assertions.assertEquals("xbaevwjcnkot", response.tags().get("lwuhvajmailfe"));
        Assertions.assertEquals("usuv", response.properties().managedResourceGroupConfiguration().name());
        Assertions.assertEquals("lczwci", response.properties().managedResourceGroupConfiguration().location());
        Assertions.assertEquals("sllfryvdmvxad", response.properties().siteReference().id());
        Assertions.assertEquals("nyq",
            response.properties().desiredStateConfigurationGroupValueReferences().get("xhlusrvxis").id());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals(SkuName.BASIC, response.sku().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
