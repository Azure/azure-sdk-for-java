// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.NetworkServiceDesignVersionInner;
import com.azure.resourcemanager.hybridnetwork.models.DependsOnProfile;
import com.azure.resourcemanager.hybridnetwork.models.NetworkServiceDesignVersionPropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.NfviDetails;
import com.azure.resourcemanager.hybridnetwork.models.ReferencedResource;
import com.azure.resourcemanager.hybridnetwork.models.ResourceElementTemplate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkServiceDesignVersionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkServiceDesignVersionInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"versionState\":\"Active\",\"description\":\"hyoulpjr\",\"configurationGroupSchemaReferences\":{\"vimjwos\":{\"id\":\"l\"}},\"nfvisFromSite\":{\"hlyfjhdgqgg\":{\"name\":\"tcs\",\"type\":\"cktqumiekkezzi\"}},\"resourceElementTemplates\":[{\"type\":\"ResourceElementTemplate\",\"name\":\"nyga\",\"dependsOnProfile\":{\"installDependsOn\":[\"bqfatpxllrxcyjmo\"],\"uninstallDependsOn\":[\"uvarmywdmjsjq\"],\"updateDependsOn\":[\"hyxxrwlycoduhpk\",\"kgymareqnajxqug\"]}},{\"type\":\"ResourceElementTemplate\",\"name\":\"ky\",\"dependsOnProfile\":{\"installDependsOn\":[\"ddg\",\"sofwqmzqalkrmnji\",\"pxacqqudfn\"],\"uninstallDependsOn\":[\"baaa\",\"jyvayffimrzrtuz\",\"ogs\"],\"updateDependsOn\":[\"evfdnwnwm\",\"wzsyyceuzs\"]}}]},\"location\":\"bjudpfrxtrthzv\",\"tags\":{\"bpaxhexiilivpdt\":\"dwkqbrq\",\"oruzfgsquyfxrxx\":\"irqtdqoa\"},\"id\":\"eptra\",\"name\":\"xje\",\"type\":\"wlwnwxuqlcv\"}")
            .toObject(NetworkServiceDesignVersionInner.class);
        Assertions.assertEquals("bjudpfrxtrthzv", model.location());
        Assertions.assertEquals("dwkqbrq", model.tags().get("bpaxhexiilivpdt"));
        Assertions.assertEquals("hyoulpjr", model.properties().description());
        Assertions.assertEquals("l", model.properties().configurationGroupSchemaReferences().get("vimjwos").id());
        Assertions.assertEquals("tcs", model.properties().nfvisFromSite().get("hlyfjhdgqgg").name());
        Assertions.assertEquals("cktqumiekkezzi", model.properties().nfvisFromSite().get("hlyfjhdgqgg").type());
        Assertions.assertEquals("nyga", model.properties().resourceElementTemplates().get(0).name());
        Assertions.assertEquals("bqfatpxllrxcyjmo",
            model.properties().resourceElementTemplates().get(0).dependsOnProfile().installDependsOn().get(0));
        Assertions.assertEquals("uvarmywdmjsjq",
            model.properties().resourceElementTemplates().get(0).dependsOnProfile().uninstallDependsOn().get(0));
        Assertions.assertEquals("hyxxrwlycoduhpk",
            model.properties().resourceElementTemplates().get(0).dependsOnProfile().updateDependsOn().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkServiceDesignVersionInner model = new NetworkServiceDesignVersionInner().withLocation("bjudpfrxtrthzv")
            .withTags(mapOf("bpaxhexiilivpdt", "dwkqbrq", "oruzfgsquyfxrxx", "irqtdqoa"))
            .withProperties(new NetworkServiceDesignVersionPropertiesFormat().withDescription("hyoulpjr")
                .withConfigurationGroupSchemaReferences(mapOf("vimjwos", new ReferencedResource().withId("l")))
                .withNfvisFromSite(mapOf("hlyfjhdgqgg", new NfviDetails().withName("tcs").withType("cktqumiekkezzi")))
                .withResourceElementTemplates(Arrays.asList(new ResourceElementTemplate().withName("nyga")
                    .withDependsOnProfile(new DependsOnProfile().withInstallDependsOn(Arrays.asList("bqfatpxllrxcyjmo"))
                        .withUninstallDependsOn(Arrays.asList("uvarmywdmjsjq"))
                        .withUpdateDependsOn(Arrays.asList("hyxxrwlycoduhpk", "kgymareqnajxqug"))),
                    new ResourceElementTemplate().withName("ky")
                        .withDependsOnProfile(new DependsOnProfile()
                            .withInstallDependsOn(Arrays.asList("ddg", "sofwqmzqalkrmnji", "pxacqqudfn"))
                            .withUninstallDependsOn(Arrays.asList("baaa", "jyvayffimrzrtuz", "ogs"))
                            .withUpdateDependsOn(Arrays.asList("evfdnwnwm", "wzsyyceuzs"))))));
        model = BinaryData.fromObject(model).toObject(NetworkServiceDesignVersionInner.class);
        Assertions.assertEquals("bjudpfrxtrthzv", model.location());
        Assertions.assertEquals("dwkqbrq", model.tags().get("bpaxhexiilivpdt"));
        Assertions.assertEquals("hyoulpjr", model.properties().description());
        Assertions.assertEquals("l", model.properties().configurationGroupSchemaReferences().get("vimjwos").id());
        Assertions.assertEquals("tcs", model.properties().nfvisFromSite().get("hlyfjhdgqgg").name());
        Assertions.assertEquals("cktqumiekkezzi", model.properties().nfvisFromSite().get("hlyfjhdgqgg").type());
        Assertions.assertEquals("nyga", model.properties().resourceElementTemplates().get(0).name());
        Assertions.assertEquals("bqfatpxllrxcyjmo",
            model.properties().resourceElementTemplates().get(0).dependsOnProfile().installDependsOn().get(0));
        Assertions.assertEquals("uvarmywdmjsjq",
            model.properties().resourceElementTemplates().get(0).dependsOnProfile().uninstallDependsOn().get(0));
        Assertions.assertEquals("hyxxrwlycoduhpk",
            model.properties().resourceElementTemplates().get(0).dependsOnProfile().updateDependsOn().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
