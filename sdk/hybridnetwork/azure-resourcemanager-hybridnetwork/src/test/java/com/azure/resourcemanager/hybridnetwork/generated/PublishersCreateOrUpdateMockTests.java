// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridnetwork.HybridNetworkManager;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentity;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hybridnetwork.models.Publisher;
import com.azure.resourcemanager.hybridnetwork.models.PublisherPropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.PublisherScope;
import com.azure.resourcemanager.hybridnetwork.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PublishersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"scope\":\"Unknown\"},\"identity\":{\"principalId\":\"582a6eff-3f4c-4795-987e-39f50875d883\",\"tenantId\":\"9a808891-0962-4820-a97d-330eef7eba17\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"bb\":{\"principalId\":\"85614d0c-7265-4ceb-823b-b0a5cf516881\",\"clientId\":\"1b8701b8-6bdc-4c56-ae30-a81068883fcb\"},\"tabenbbk\":{\"principalId\":\"ddadc329-afe9-4c06-bb32-e530b3af2fa7\",\"clientId\":\"6241f357-53b7-490e-b78d-5c39932818e5\"},\"xzu\":{\"principalId\":\"8aa00151-12e4-4fbb-92de-0c9f0ac64d19\",\"clientId\":\"50935cb1-814a-484e-b353-784a1f931c89\"}}},\"location\":\"feddwwnlza\",\"tags\":{\"gnhgook\":\"u\"},\"id\":\"talvnbwgp\",\"name\":\"emeluclv\",\"type\":\"jjukyrdnqodxah\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridNetworkManager manager = HybridNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Publisher response = manager.publishers()
            .define("jzcfyjzptwr")
            .withRegion("gcm")
            .withExistingResourceGroup("ot")
            .withTags(mapOf("yvca", "jhhhqxu", "sjsz", "oyvivbsiz", "lzijiufehgmvflnw", "bscm"))
            .withProperties(new PublisherPropertiesFormat().withScope(PublisherScope.PRIVATE))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf("lqdhmrjzr", new UserAssignedIdentity(), "xpjb", new UserAssignedIdentity(),
                        "sjoqcjenkyhfqzvs", new UserAssignedIdentity(), "xj", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("feddwwnlza", response.location());
        Assertions.assertEquals("u", response.tags().get("gnhgook"));
        Assertions.assertEquals(PublisherScope.UNKNOWN, response.properties().scope());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
