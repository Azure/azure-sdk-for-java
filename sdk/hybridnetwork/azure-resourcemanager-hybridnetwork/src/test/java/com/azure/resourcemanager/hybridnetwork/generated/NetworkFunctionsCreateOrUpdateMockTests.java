// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridnetwork.HybridNetworkManager;
import com.azure.resourcemanager.hybridnetwork.models.DeploymentResourceIdReference;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentity;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunction;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunctionPropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.NfviType;
import com.azure.resourcemanager.hybridnetwork.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NetworkFunctionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"configurationType\":\"NetworkFunctionPropertiesFormat\",\"provisioningState\":\"Succeeded\",\"publisherName\":\"ab\",\"publisherScope\":\"Private\",\"networkFunctionDefinitionGroupName\":\"tmvcop\",\"networkFunctionDefinitionVersion\":\"c\",\"networkFunctionDefinitionOfferingLocation\":\"urbuhhlkyqltq\",\"networkFunctionDefinitionVersionResourceReference\":{\"idType\":\"DeploymentResourceIdReference\"},\"nfviType\":\"AzureArcKubernetes\",\"nfviId\":\"uwkffdjktsysid\",\"allowSoftwareUpdate\":false,\"roleOverrideValues\":[\"lxnfuijtkbusqogs\"]},\"etag\":\"kayi\",\"identity\":{\"principalId\":\"d5271a30-cb58-4696-b6d2-6b7640e2d9a8\",\"tenantId\":\"a48722cf-37a6-400c-81db-719675b5ac48\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"ji\":{\"principalId\":\"aec9089a-c58b-4ab2-9e59-102f16a6f26c\",\"clientId\":\"86bb3466-6eeb-49f1-8692-56747f4692a4\"},\"zyjq\":{\"principalId\":\"93a2f8cc-0458-4216-a43c-31a369cc1c3b\",\"clientId\":\"2d79491a-168d-40b3-8012-33e48a39d827\"},\"wkpqhjpenuygbq\":{\"principalId\":\"f6a7f0a9-5241-4237-851e-48fd07181b79\",\"clientId\":\"8f53c30b-bb12-4306-9cc1-4b45433845f8\"}}},\"location\":\"qekewvnqvcd\",\"tags\":{\"cmfdjwnlax\":\"a\",\"qikczvvita\":\"un\"},\"id\":\"gx\",\"name\":\"fcsserxhtvsox\",\"type\":\"lwntsjgqrs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridNetworkManager manager = HybridNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        NetworkFunction response = manager.networkFunctions()
            .define("ic")
            .withRegion("eiookjbsah")
            .withExistingResourceGroup("qfecjxeygtuhx")
            .withTags(mapOf("slmot", "tpdelqa"))
            .withProperties(new NetworkFunctionPropertiesFormat()
                .withNetworkFunctionDefinitionVersionResourceReference(new DeploymentResourceIdReference())
                .withNfviType(NfviType.AZURE_CORE)
                .withNfviId("dlfgtdysnaq")
                .withAllowSoftwareUpdate(true)
                .withRoleOverrideValues(Arrays.asList("ctqhamzjrwdk", "zeqyjleziun", "xdfzantkw")))
            .withEtag("gyamlbnseqacjjv")
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("agmdit", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("qekewvnqvcd", response.location());
        Assertions.assertEquals("a", response.tags().get("cmfdjwnlax"));
        Assertions.assertEquals(NfviType.AZURE_ARC_KUBERNETES, response.properties().nfviType());
        Assertions.assertEquals("uwkffdjktsysid", response.properties().nfviId());
        Assertions.assertEquals(false, response.properties().allowSoftwareUpdate());
        Assertions.assertEquals("lxnfuijtkbusqogs", response.properties().roleOverrideValues().get(0));
        Assertions.assertEquals("kayi", response.etag());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
