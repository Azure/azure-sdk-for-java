// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hybridnetwork.HybridNetworkManager;
import com.azure.resourcemanager.hybridnetwork.models.DeploymentResourceIdReference;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentity;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunction;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunctionPropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.NfviType;
import com.azure.resourcemanager.hybridnetwork.models.UserAssignedIdentity;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class NetworkFunctionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"configurationType\":\"NetworkFunctionPropertiesFormat\",\"provisioningState\":\"Succeeded\",\"publisherName\":\"ab\",\"publisherScope\":\"Private\",\"networkFunctionDefinitionGroupName\":\"tmvcop\",\"networkFunctionDefinitionVersion\":\"c\",\"networkFunctionDefinitionOfferingLocation\":\"urbuhhlkyqltq\",\"networkFunctionDefinitionVersionResourceReference\":{\"idType\":\"DeploymentResourceIdReference\"},\"nfviType\":\"AzureArcKubernetes\",\"nfviId\":\"uwkffdjktsysid\",\"allowSoftwareUpdate\":false,\"roleOverrideValues\":[\"lxnfuijtkbusqogs\"]},\"etag\":\"kayi\",\"identity\":{\"principalId\":\"d2d46ca0-ef18-4463-b92c-b8eaf9b8d369\",\"tenantId\":\"589555a5-23c6-4b43-83cd-9210c63dac70\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"ji\":{\"principalId\":\"eaa4d8d6-7a66-478b-ab37-00605d29bdfb\",\"clientId\":\"443e5ff1-f9df-4d86-8ecd-70664cc36e17\"},\"zyjq\":{\"principalId\":\"302c399e-6132-4934-ad35-75157ed5b00f\",\"clientId\":\"e29615dd-07ee-4b78-88bb-b2b697fbbf40\"},\"wkpqhjpenuygbq\":{\"principalId\":\"66753bc8-00d8-41bd-ba72-331b24411413\",\"clientId\":\"8a2f71f4-103a-4bd4-a4e9-acb142a20000\"}}},\"location\":\"qekewvnqvcd\",\"tags\":{\"cmfdjwnlax\":\"a\",\"qikczvvita\":\"un\"},\"id\":\"gx\",\"name\":\"fcsserxhtvsox\",\"type\":\"lwntsjgqrs\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HybridNetworkManager manager = HybridNetworkManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        NetworkFunction response = manager.networkFunctions().define("ic").withRegion("eiookjbsah")
            .withExistingResourceGroup("qfecjxeygtuhx").withTags(mapOf("slmot", "tpdelqa"))
            .withProperties(new NetworkFunctionPropertiesFormat()
                .withNetworkFunctionDefinitionVersionResourceReference(new DeploymentResourceIdReference())
                .withNfviType(NfviType.AZURE_CORE).withNfviId("dlfgtdysnaq").withAllowSoftwareUpdate(true)
                .withRoleOverrideValues(Arrays.asList("ctqhamzjrwdk", "zeqyjleziun", "xdfzantkw")))
            .withEtag("gyamlbnseqacjjv")
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("agmdit", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("qekewvnqvcd", response.location());
        Assertions.assertEquals("a", response.tags().get("cmfdjwnlax"));
        Assertions.assertEquals(NfviType.AZURE_ARC_KUBERNETES, response.properties().nfviType());
        Assertions.assertEquals("uwkffdjktsysid", response.properties().nfviId());
        Assertions.assertEquals(false, response.properties().allowSoftwareUpdate());
        Assertions.assertEquals("lxnfuijtkbusqogs", response.properties().roleOverrideValues().get(0));
        Assertions.assertEquals("kayi", response.etag());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
