// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridnetwork.HybridNetworkManager;
import com.azure.resourcemanager.hybridnetwork.models.ConfigurationGroupSchema;
import com.azure.resourcemanager.hybridnetwork.models.ConfigurationGroupSchemaPropertiesFormat;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationGroupSchemasCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"versionState\":\"ValidationFailed\",\"description\":\"epqw\",\"schemaDefinition\":\"xmonstshi\"},\"location\":\"gvelfc\",\"tags\":{\"ds\":\"ccbi\",\"b\":\"uwc\",\"nghgshej\":\"egstmninwjizci\"},\"id\":\"tbxqmuluxlxq\",\"name\":\"vnersbycucrw\",\"type\":\"amikzebrqbsm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridNetworkManager manager = HybridNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ConfigurationGroupSchema response = manager.configurationGroupSchemas()
            .define("qwztcmwqkc")
            .withRegion("zjrgyww")
            .withExistingPublisher("fwlwxjwetnps", "hclafzvaylptrs")
            .withTags(mapOf("ptfujgicgaaoept", "xs"))
            .withProperties(new ConfigurationGroupSchemaPropertiesFormat().withDescription("ewzjkjexfd")
                .withSchemaDefinition("vhpsylkkshkbffmb"))
            .create();

        Assertions.assertEquals("gvelfc", response.location());
        Assertions.assertEquals("ccbi", response.tags().get("ds"));
        Assertions.assertEquals("epqw", response.properties().description());
        Assertions.assertEquals("xmonstshi", response.properties().schemaDefinition());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
