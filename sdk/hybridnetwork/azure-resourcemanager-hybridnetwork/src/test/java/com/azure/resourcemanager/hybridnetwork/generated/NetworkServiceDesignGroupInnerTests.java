// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.NetworkServiceDesignGroupInner;
import com.azure.resourcemanager.hybridnetwork.models.NetworkServiceDesignGroupPropertiesFormat;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkServiceDesignGroupInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkServiceDesignGroupInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Deleting\",\"description\":\"agvrvmnpkuk\"},\"location\":\"i\",\"tags\":{\"xw\":\"lxgwimfnjhf\",\"fkzikfj\":\"szkkfoqre\"},\"id\":\"wneaiv\",\"name\":\"wczelpci\",\"type\":\"elsfeaen\"}")
            .toObject(NetworkServiceDesignGroupInner.class);
        Assertions.assertEquals("i", model.location());
        Assertions.assertEquals("lxgwimfnjhf", model.tags().get("xw"));
        Assertions.assertEquals("agvrvmnpkuk", model.properties().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkServiceDesignGroupInner model = new NetworkServiceDesignGroupInner().withLocation("i")
            .withTags(mapOf("xw", "lxgwimfnjhf", "fkzikfj", "szkkfoqre"))
            .withProperties(new NetworkServiceDesignGroupPropertiesFormat().withDescription("agvrvmnpkuk"));
        model = BinaryData.fromObject(model).toObject(NetworkServiceDesignGroupInner.class);
        Assertions.assertEquals("i", model.location());
        Assertions.assertEquals("lxgwimfnjhf", model.tags().get("xw"));
        Assertions.assertEquals("agvrvmnpkuk", model.properties().description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
