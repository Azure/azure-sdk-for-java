// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.models.DaemonSet;
import com.azure.resourcemanager.hybridnetwork.models.Deployment;
import com.azure.resourcemanager.hybridnetwork.models.DeploymentStatusProperties;
import com.azure.resourcemanager.hybridnetwork.models.Pod;
import com.azure.resourcemanager.hybridnetwork.models.PodEvent;
import com.azure.resourcemanager.hybridnetwork.models.PodEventType;
import com.azure.resourcemanager.hybridnetwork.models.PodStatus;
import com.azure.resourcemanager.hybridnetwork.models.ReplicaSet;
import com.azure.resourcemanager.hybridnetwork.models.Resources;
import com.azure.resourcemanager.hybridnetwork.models.StatefulSet;
import com.azure.resourcemanager.hybridnetwork.models.Status;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DeploymentStatusPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeploymentStatusProperties model = BinaryData.fromString(
            "{\"status\":\"Pending-Install\",\"resources\":{\"deployments\":[{\"name\":\"ytlmoyrxvwfud\",\"namespace\":\"zntxhdz\",\"desired\":349337714,\"ready\":291050041,\"upToDate\":203364386,\"available\":723536665,\"creationTime\":\"2021-02-03T03:57:15Z\"}],\"pods\":[{\"name\":\"xsbkyvpyca\",\"namespace\":\"z\",\"desired\":729788311,\"ready\":1414672968,\"status\":\"Running\",\"creationTime\":\"2021-09-06T02:44:44Z\",\"events\":[{\"type\":\"Normal\",\"reason\":\"bmehh\",\"message\":\"yvjusrtslhsp\",\"lastSeenTime\":\"2021-01-25T12:50:37Z\"},{\"type\":\"Warning\",\"reason\":\"ofmxagkvtmelmqkr\",\"message\":\"hvljuahaquh\",\"lastSeenTime\":\"2021-04-17T12:34:25Z\"}]},{\"name\":\"duala\",\"namespace\":\"qpv\",\"desired\":1911566048,\"ready\":294636913,\"status\":\"Terminating\",\"creationTime\":\"2021-04-22T00:28:22Z\",\"events\":[{\"type\":\"Normal\",\"reason\":\"gomz\",\"message\":\"misgwbnb\",\"lastSeenTime\":\"2021-11-15T23:08:14Z\"},{\"type\":\"Normal\",\"reason\":\"k\",\"message\":\"ali\",\"lastSeenTime\":\"2021-01-29T13:20:28Z\"}]}],\"replicaSets\":[{\"name\":\"kauhashsfwxo\",\"namespace\":\"w\",\"desired\":38783234,\"ready\":585972520,\"current\":1879830205,\"creationTime\":\"2020-12-22T21:46:37Z\"},{\"name\":\"xdje\",\"namespace\":\"pucwwfvovbvme\",\"desired\":321338352,\"ready\":1542315989,\"current\":1560245881,\"creationTime\":\"2021-07-17T19:12:13Z\"},{\"name\":\"uojgj\",\"namespace\":\"jueiotwmcdytd\",\"desired\":384724385,\"ready\":838785311,\"current\":1070997174,\"creationTime\":\"2021-01-30T10:40:13Z\"}],\"statefulSets\":[{\"name\":\"wgxhn\",\"namespace\":\"kxfbkpycgklwndn\",\"desired\":1205583230,\"ready\":1922459268,\"creationTime\":\"2021-03-09T05:57:58Z\"},{\"name\":\"ylwz\",\"namespace\":\"dhxujznbmpo\",\"desired\":750344701,\"ready\":1662245915,\"creationTime\":\"2021-07-21T15:39:33Z\"},{\"name\":\"veual\",\"namespace\":\"j\",\"desired\":1318602789,\"ready\":396810634,\"creationTime\":\"2021-05-12T14:09:32Z\"},{\"name\":\"cswsrtjri\",\"namespace\":\"rbpbewtghfgblcg\",\"desired\":1261477123,\"ready\":1623747079,\"creationTime\":\"2021-02-14T18:33:33Z\"}],\"daemonSets\":[{\"name\":\"begibtnmxiebwwa\",\"namespace\":\"ayqcgw\",\"desired\":1999029226,\"current\":350152394,\"ready\":1115460475,\"upToDate\":580617744,\"available\":1773507503,\"creationTime\":\"2021-07-11T15:51:59Z\"},{\"name\":\"ongmtsa\",\"namespace\":\"cbpwxqpsrknft\",\"desired\":1256922904,\"current\":1607260782,\"ready\":2067966148,\"upToDate\":773993487,\"available\":835302956,\"creationTime\":\"2021-05-29T19:52:45Z\"},{\"name\":\"xqtayriwwro\",\"namespace\":\"bexrmcq\",\"desired\":1430552166,\"current\":865624949,\"ready\":934632065,\"upToDate\":988905675,\"available\":2121055666,\"creationTime\":\"2021-07-16T09:24:30Z\"},{\"name\":\"sgzvahapjyzhpv\",\"namespace\":\"zcjrvxdjzlmwlx\",\"desired\":413444138,\"current\":2069794521,\"ready\":2083539395,\"upToDate\":367747592,\"available\":977455104,\"creationTime\":\"2021-07-07T00:25:39Z\"}]},\"nextExpectedUpdateAt\":\"2021-05-25T09:22:07Z\"}")
            .toObject(DeploymentStatusProperties.class);
        Assertions.assertEquals(Status.PENDING_INSTALL, model.status());
        Assertions.assertEquals("ytlmoyrxvwfud", model.resources().deployments().get(0).name());
        Assertions.assertEquals("zntxhdz", model.resources().deployments().get(0).namespace());
        Assertions.assertEquals(349337714, model.resources().deployments().get(0).desired());
        Assertions.assertEquals(291050041, model.resources().deployments().get(0).ready());
        Assertions.assertEquals(203364386, model.resources().deployments().get(0).upToDate());
        Assertions.assertEquals(723536665, model.resources().deployments().get(0).available());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-03T03:57:15Z"),
            model.resources().deployments().get(0).creationTime());
        Assertions.assertEquals("xsbkyvpyca", model.resources().pods().get(0).name());
        Assertions.assertEquals("z", model.resources().pods().get(0).namespace());
        Assertions.assertEquals(729788311, model.resources().pods().get(0).desired());
        Assertions.assertEquals(1414672968, model.resources().pods().get(0).ready());
        Assertions.assertEquals(PodStatus.RUNNING, model.resources().pods().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-06T02:44:44Z"),
            model.resources().pods().get(0).creationTime());
        Assertions.assertEquals(PodEventType.NORMAL, model.resources().pods().get(0).events().get(0).type());
        Assertions.assertEquals("bmehh", model.resources().pods().get(0).events().get(0).reason());
        Assertions.assertEquals("yvjusrtslhsp", model.resources().pods().get(0).events().get(0).message());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-25T12:50:37Z"),
            model.resources().pods().get(0).events().get(0).lastSeenTime());
        Assertions.assertEquals("kauhashsfwxo", model.resources().replicaSets().get(0).name());
        Assertions.assertEquals("w", model.resources().replicaSets().get(0).namespace());
        Assertions.assertEquals(38783234, model.resources().replicaSets().get(0).desired());
        Assertions.assertEquals(585972520, model.resources().replicaSets().get(0).ready());
        Assertions.assertEquals(1879830205, model.resources().replicaSets().get(0).current());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-22T21:46:37Z"),
            model.resources().replicaSets().get(0).creationTime());
        Assertions.assertEquals("wgxhn", model.resources().statefulSets().get(0).name());
        Assertions.assertEquals("kxfbkpycgklwndn", model.resources().statefulSets().get(0).namespace());
        Assertions.assertEquals(1205583230, model.resources().statefulSets().get(0).desired());
        Assertions.assertEquals(1922459268, model.resources().statefulSets().get(0).ready());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-09T05:57:58Z"),
            model.resources().statefulSets().get(0).creationTime());
        Assertions.assertEquals("begibtnmxiebwwa", model.resources().daemonSets().get(0).name());
        Assertions.assertEquals("ayqcgw", model.resources().daemonSets().get(0).namespace());
        Assertions.assertEquals(1999029226, model.resources().daemonSets().get(0).desired());
        Assertions.assertEquals(350152394, model.resources().daemonSets().get(0).current());
        Assertions.assertEquals(1115460475, model.resources().daemonSets().get(0).ready());
        Assertions.assertEquals(580617744, model.resources().daemonSets().get(0).upToDate());
        Assertions.assertEquals(1773507503, model.resources().daemonSets().get(0).available());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-11T15:51:59Z"),
            model.resources().daemonSets().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-25T09:22:07Z"), model.nextExpectedUpdateAt());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeploymentStatusProperties model = new DeploymentStatusProperties().withStatus(Status.PENDING_INSTALL)
            .withResources(new Resources()
                .withDeployments(Arrays.asList(new Deployment().withName("ytlmoyrxvwfud").withNamespace("zntxhdz")
                    .withDesired(349337714).withReady(291050041).withUpToDate(203364386).withAvailable(723536665)
                    .withCreationTime(OffsetDateTime.parse("2021-02-03T03:57:15Z"))))
                .withPods(Arrays.asList(
                    new Pod().withName("xsbkyvpyca").withNamespace("z").withDesired(729788311).withReady(1414672968)
                        .withStatus(PodStatus.RUNNING).withCreationTime(OffsetDateTime.parse("2021-09-06T02:44:44Z"))
                        .withEvents(Arrays.asList(
                            new PodEvent().withType(PodEventType.NORMAL).withReason("bmehh").withMessage("yvjusrtslhsp")
                                .withLastSeenTime(OffsetDateTime.parse("2021-01-25T12:50:37Z")),
                            new PodEvent().withType(PodEventType.WARNING).withReason("ofmxagkvtmelmqkr")
                                .withMessage("hvljuahaquh")
                                .withLastSeenTime(OffsetDateTime.parse("2021-04-17T12:34:25Z")))),
                    new Pod().withName("duala").withNamespace("qpv").withDesired(1911566048).withReady(294636913)
                        .withStatus(PodStatus.TERMINATING)
                        .withCreationTime(OffsetDateTime.parse("2021-04-22T00:28:22Z"))
                        .withEvents(Arrays.asList(
                            new PodEvent().withType(PodEventType.NORMAL).withReason("gomz").withMessage("misgwbnb")
                                .withLastSeenTime(OffsetDateTime.parse("2021-11-15T23:08:14Z")),
                            new PodEvent().withType(PodEventType.NORMAL).withReason("k").withMessage("ali")
                                .withLastSeenTime(OffsetDateTime.parse("2021-01-29T13:20:28Z"))))))
                .withReplicaSets(Arrays.asList(
                    new ReplicaSet().withName("kauhashsfwxo").withNamespace("w").withDesired(38783234)
                        .withReady(585972520).withCurrent(1879830205)
                        .withCreationTime(OffsetDateTime.parse("2020-12-22T21:46:37Z")),
                    new ReplicaSet().withName("xdje").withNamespace("pucwwfvovbvme").withDesired(321338352)
                        .withReady(1542315989).withCurrent(1560245881)
                        .withCreationTime(OffsetDateTime.parse("2021-07-17T19:12:13Z")),
                    new ReplicaSet().withName("uojgj").withNamespace("jueiotwmcdytd").withDesired(384724385)
                        .withReady(838785311).withCurrent(1070997174)
                        .withCreationTime(OffsetDateTime.parse("2021-01-30T10:40:13Z"))))
                .withStatefulSets(Arrays.asList(
                    new StatefulSet().withName("wgxhn").withNamespace("kxfbkpycgklwndn").withDesired(1205583230)
                        .withReady(1922459268).withCreationTime(OffsetDateTime.parse("2021-03-09T05:57:58Z")),
                    new StatefulSet().withName("ylwz").withNamespace("dhxujznbmpo").withDesired(750344701)
                        .withReady(1662245915).withCreationTime(OffsetDateTime.parse("2021-07-21T15:39:33Z")),
                    new StatefulSet().withName("veual").withNamespace("j").withDesired(1318602789).withReady(396810634)
                        .withCreationTime(OffsetDateTime.parse("2021-05-12T14:09:32Z")),
                    new StatefulSet().withName("cswsrtjri").withNamespace("rbpbewtghfgblcg").withDesired(1261477123)
                        .withReady(1623747079).withCreationTime(OffsetDateTime.parse("2021-02-14T18:33:33Z"))))
                .withDaemonSets(Arrays.asList(
                    new DaemonSet().withName("begibtnmxiebwwa").withNamespace("ayqcgw").withDesired(1999029226)
                        .withCurrent(350152394).withReady(1115460475).withUpToDate(580617744).withAvailable(1773507503)
                        .withCreationTime(OffsetDateTime.parse("2021-07-11T15:51:59Z")),
                    new DaemonSet().withName("ongmtsa").withNamespace("cbpwxqpsrknft").withDesired(1256922904)
                        .withCurrent(1607260782).withReady(2067966148).withUpToDate(773993487).withAvailable(835302956)
                        .withCreationTime(OffsetDateTime.parse("2021-05-29T19:52:45Z")),
                    new DaemonSet().withName("xqtayriwwro").withNamespace("bexrmcq").withDesired(1430552166)
                        .withCurrent(865624949).withReady(934632065).withUpToDate(988905675).withAvailable(2121055666)
                        .withCreationTime(OffsetDateTime.parse("2021-07-16T09:24:30Z")),
                    new DaemonSet().withName("sgzvahapjyzhpv").withNamespace("zcjrvxdjzlmwlx").withDesired(413444138)
                        .withCurrent(2069794521).withReady(2083539395).withUpToDate(367747592).withAvailable(977455104)
                        .withCreationTime(OffsetDateTime.parse("2021-07-07T00:25:39Z")))))
            .withNextExpectedUpdateAt(OffsetDateTime.parse("2021-05-25T09:22:07Z"));
        model = BinaryData.fromObject(model).toObject(DeploymentStatusProperties.class);
        Assertions.assertEquals(Status.PENDING_INSTALL, model.status());
        Assertions.assertEquals("ytlmoyrxvwfud", model.resources().deployments().get(0).name());
        Assertions.assertEquals("zntxhdz", model.resources().deployments().get(0).namespace());
        Assertions.assertEquals(349337714, model.resources().deployments().get(0).desired());
        Assertions.assertEquals(291050041, model.resources().deployments().get(0).ready());
        Assertions.assertEquals(203364386, model.resources().deployments().get(0).upToDate());
        Assertions.assertEquals(723536665, model.resources().deployments().get(0).available());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-03T03:57:15Z"),
            model.resources().deployments().get(0).creationTime());
        Assertions.assertEquals("xsbkyvpyca", model.resources().pods().get(0).name());
        Assertions.assertEquals("z", model.resources().pods().get(0).namespace());
        Assertions.assertEquals(729788311, model.resources().pods().get(0).desired());
        Assertions.assertEquals(1414672968, model.resources().pods().get(0).ready());
        Assertions.assertEquals(PodStatus.RUNNING, model.resources().pods().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-06T02:44:44Z"),
            model.resources().pods().get(0).creationTime());
        Assertions.assertEquals(PodEventType.NORMAL, model.resources().pods().get(0).events().get(0).type());
        Assertions.assertEquals("bmehh", model.resources().pods().get(0).events().get(0).reason());
        Assertions.assertEquals("yvjusrtslhsp", model.resources().pods().get(0).events().get(0).message());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-25T12:50:37Z"),
            model.resources().pods().get(0).events().get(0).lastSeenTime());
        Assertions.assertEquals("kauhashsfwxo", model.resources().replicaSets().get(0).name());
        Assertions.assertEquals("w", model.resources().replicaSets().get(0).namespace());
        Assertions.assertEquals(38783234, model.resources().replicaSets().get(0).desired());
        Assertions.assertEquals(585972520, model.resources().replicaSets().get(0).ready());
        Assertions.assertEquals(1879830205, model.resources().replicaSets().get(0).current());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-22T21:46:37Z"),
            model.resources().replicaSets().get(0).creationTime());
        Assertions.assertEquals("wgxhn", model.resources().statefulSets().get(0).name());
        Assertions.assertEquals("kxfbkpycgklwndn", model.resources().statefulSets().get(0).namespace());
        Assertions.assertEquals(1205583230, model.resources().statefulSets().get(0).desired());
        Assertions.assertEquals(1922459268, model.resources().statefulSets().get(0).ready());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-09T05:57:58Z"),
            model.resources().statefulSets().get(0).creationTime());
        Assertions.assertEquals("begibtnmxiebwwa", model.resources().daemonSets().get(0).name());
        Assertions.assertEquals("ayqcgw", model.resources().daemonSets().get(0).namespace());
        Assertions.assertEquals(1999029226, model.resources().daemonSets().get(0).desired());
        Assertions.assertEquals(350152394, model.resources().daemonSets().get(0).current());
        Assertions.assertEquals(1115460475, model.resources().daemonSets().get(0).ready());
        Assertions.assertEquals(580617744, model.resources().daemonSets().get(0).upToDate());
        Assertions.assertEquals(1773507503, model.resources().daemonSets().get(0).available());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-11T15:51:59Z"),
            model.resources().daemonSets().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-25T09:22:07Z"), model.nextExpectedUpdateAt());
    }
}
