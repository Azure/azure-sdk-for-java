// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ArtifactManifestInner;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactManifestListResult;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactManifestPropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactType;
import com.azure.resourcemanager.hybridnetwork.models.ManifestArtifactFormat;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ArtifactManifestListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ArtifactManifestListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleting\",\"artifactManifestState\":\"Uploaded\",\"artifacts\":[{\"artifactName\":\"wubxc\",\"artifactType\":\"OCIArtifact\",\"artifactVersion\":\"qknfd\"},{\"artifactName\":\"wjchrdg\",\"artifactType\":\"ImageFile\",\"artifactVersion\":\"umwctondz\"},{\"artifactName\":\"uu\",\"artifactType\":\"ArmTemplate\",\"artifactVersion\":\"wggytsbwtovvt\"}]},\"location\":\"einqf\",\"tags\":{\"knpirgnepttwq\":\"x\",\"mqnrojlpijnkr\":\"sniffc\",\"zronasxift\":\"frddhcrati\",\"zh\":\"zq\"},\"id\":\"tw\",\"name\":\"sgogczhonnxk\",\"type\":\"lgnyhmo\"},{\"properties\":{\"provisioningState\":\"Accepted\",\"artifactManifestState\":\"Uploaded\",\"artifacts\":[{\"artifactName\":\"rghxjb\",\"artifactType\":\"ImageFile\",\"artifactVersion\":\"vcxgfrpdsofbshr\"}]},\"location\":\"vbuswd\",\"tags\":{\"rtkfawnopq\":\"ybycnunvj\",\"x\":\"ikyzirtxdy\"},\"id\":\"ejnt\",\"name\":\"sewgioilqukr\",\"type\":\"dxtqmieoxo\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"artifactManifestState\":\"Validating\",\"artifacts\":[{\"artifactName\":\"mtbghh\",\"artifactType\":\"VhdImageFile\",\"artifactVersion\":\"vkffovjzhpjb\"},{\"artifactName\":\"gjmfxumvfcl\",\"artifactType\":\"VhdImageFile\",\"artifactVersion\":\"wxnb\"},{\"artifactName\":\"ezzxscyhwzdgiruj\",\"artifactType\":\"Unknown\",\"artifactVersion\":\"mvzzbtdcqvp\"},{\"artifactName\":\"yujviylwdshfssn\",\"artifactType\":\"Unknown\",\"artifactVersion\":\"efr\"}]},\"location\":\"sgaojfmwncot\",\"tags\":{\"yczuhxacpq\":\"hirctymoxoftpipi\"},\"id\":\"lihhyuspskasdvlm\",\"name\":\"wdgzxulucv\",\"type\":\"amrsreuzv\"}],\"nextLink\":\"risjnhnytxifqjz\"}")
            .toObject(ArtifactManifestListResult.class);
        Assertions.assertEquals("einqf", model.value().get(0).location());
        Assertions.assertEquals("x", model.value().get(0).tags().get("knpirgnepttwq"));
        Assertions.assertEquals("wubxc", model.value().get(0).properties().artifacts().get(0).artifactName());
        Assertions.assertEquals(ArtifactType.OCIARTIFACT,
            model.value().get(0).properties().artifacts().get(0).artifactType());
        Assertions.assertEquals("qknfd", model.value().get(0).properties().artifacts().get(0).artifactVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ArtifactManifestListResult model = new ArtifactManifestListResult().withValue(Arrays.asList(
            new ArtifactManifestInner().withLocation("einqf")
                .withTags(
                    mapOf("knpirgnepttwq", "x", "mqnrojlpijnkr", "sniffc", "zronasxift", "frddhcrati", "zh", "zq"))
                .withProperties(new ArtifactManifestPropertiesFormat().withArtifacts(Arrays.asList(
                    new ManifestArtifactFormat().withArtifactName("wubxc").withArtifactType(ArtifactType.OCIARTIFACT)
                        .withArtifactVersion("qknfd"),
                    new ManifestArtifactFormat().withArtifactName("wjchrdg").withArtifactType(ArtifactType.IMAGE_FILE)
                        .withArtifactVersion("umwctondz"),
                    new ManifestArtifactFormat().withArtifactName("uu").withArtifactType(ArtifactType.ARM_TEMPLATE)
                        .withArtifactVersion("wggytsbwtovvt")))),
            new ArtifactManifestInner().withLocation("vbuswd")
                .withTags(mapOf("rtkfawnopq", "ybycnunvj", "x", "ikyzirtxdy"))
                .withProperties(new ArtifactManifestPropertiesFormat()
                    .withArtifacts(Arrays.asList(new ManifestArtifactFormat().withArtifactName("rghxjb")
                        .withArtifactType(ArtifactType.IMAGE_FILE).withArtifactVersion("vcxgfrpdsofbshr")))),
            new ArtifactManifestInner().withLocation("sgaojfmwncot").withTags(mapOf("yczuhxacpq", "hirctymoxoftpipi"))
                .withProperties(new ArtifactManifestPropertiesFormat().withArtifacts(Arrays.asList(
                    new ManifestArtifactFormat().withArtifactName("mtbghh")
                        .withArtifactType(ArtifactType.VHD_IMAGE_FILE).withArtifactVersion("vkffovjzhpjb"),
                    new ManifestArtifactFormat().withArtifactName("gjmfxumvfcl")
                        .withArtifactType(ArtifactType.VHD_IMAGE_FILE).withArtifactVersion("wxnb"),
                    new ManifestArtifactFormat().withArtifactName("ezzxscyhwzdgiruj")
                        .withArtifactType(ArtifactType.UNKNOWN).withArtifactVersion("mvzzbtdcqvp"),
                    new ManifestArtifactFormat().withArtifactName("yujviylwdshfssn")
                        .withArtifactType(ArtifactType.UNKNOWN).withArtifactVersion("efr"))))));
        model = BinaryData.fromObject(model).toObject(ArtifactManifestListResult.class);
        Assertions.assertEquals("einqf", model.value().get(0).location());
        Assertions.assertEquals("x", model.value().get(0).tags().get("knpirgnepttwq"));
        Assertions.assertEquals("wubxc", model.value().get(0).properties().artifacts().get(0).artifactName());
        Assertions.assertEquals(ArtifactType.OCIARTIFACT,
            model.value().get(0).properties().artifacts().get(0).artifactType());
        Assertions.assertEquals("qknfd", model.value().get(0).properties().artifacts().get(0).artifactVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
