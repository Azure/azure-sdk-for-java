// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.PublisherInner;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentity;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hybridnetwork.models.PublisherPropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.PublisherScope;
import com.azure.resourcemanager.hybridnetwork.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PublisherInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PublisherInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Deleted\",\"scope\":\"Private\"},\"identity\":{\"principalId\":\"c2cb2eaf-bc41-4519-a2d3-6e67f581cdac\",\"tenantId\":\"b1a7f716-75ff-42a7-9ffc-a462d7f5d07f\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ljagrqmqhl\":{\"principalId\":\"0a2fcf51-7983-443c-b384-5ec42203756f\",\"clientId\":\"d1e8f8e6-2a16-4433-872d-5f65f56e3b68\"}}},\"location\":\"riiiojnalghfkv\",\"tags\":{\"owueluqh\":\"ex\",\"zkw\":\"ahhxvrh\"},\"id\":\"jgwwspughftq\",\"name\":\"xhqxujxukndxdigr\",\"type\":\"guufzd\"}")
            .toObject(PublisherInner.class);
        Assertions.assertEquals("riiiojnalghfkv", model.location());
        Assertions.assertEquals("ex", model.tags().get("owueluqh"));
        Assertions.assertEquals(PublisherScope.PRIVATE, model.properties().scope());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PublisherInner model
            = new PublisherInner().withLocation("riiiojnalghfkv").withTags(mapOf("owueluqh", "ex", "zkw", "ahhxvrh"))
                .withProperties(new PublisherPropertiesFormat().withScope(PublisherScope.PRIVATE))
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("ljagrqmqhl", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(PublisherInner.class);
        Assertions.assertEquals("riiiojnalghfkv", model.location());
        Assertions.assertEquals("ex", model.tags().get("owueluqh"));
        Assertions.assertEquals(PublisherScope.PRIVATE, model.properties().scope());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
