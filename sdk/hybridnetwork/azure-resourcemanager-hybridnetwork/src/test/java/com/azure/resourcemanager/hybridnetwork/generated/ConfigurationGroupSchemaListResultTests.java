// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ConfigurationGroupSchemaInner;
import com.azure.resourcemanager.hybridnetwork.models.ConfigurationGroupSchemaListResult;
import com.azure.resourcemanager.hybridnetwork.models.ConfigurationGroupSchemaPropertiesFormat;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConfigurationGroupSchemaListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConfigurationGroupSchemaListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Unknown\",\"versionState\":\"Deprecated\",\"description\":\"xpyb\",\"schemaDefinition\":\"m\"},\"location\":\"mtz\",\"tags\":{\"bb\":\"sphrupidgs\",\"sx\":\"jhphoyc\",\"tbmufpo\":\"obhdxbmtqioqjze\",\"hwlrx\":\"noi\"},\"id\":\"bqsoqijg\",\"name\":\"dmbpazlobcufpdz\",\"type\":\"rbt\"},{\"properties\":{\"provisioningState\":\"Failed\",\"versionState\":\"Deprecated\",\"description\":\"lhqgnufooojy\",\"schemaDefinition\":\"fsqesaagdfmglzlh\"},\"location\":\"rifkwm\",\"tags\":{\"psqucmpoyf\":\"tsizntocipaoua\",\"knygjofjddeq\":\"kfo\",\"upewnwreitjzy\":\"rd\",\"ofcqhsm\":\"lusarh\"},\"id\":\"urkdtmlx\",\"name\":\"ekuksjtx\",\"type\":\"kc\"},{\"properties\":{\"provisioningState\":\"Converging\",\"versionState\":\"ValidationFailed\",\"description\":\"y\",\"schemaDefinition\":\"nzwuxzd\"},\"location\":\"a\",\"tags\":{\"mt\":\"hmwhfpmrqo\",\"tijbpzvgnwzsymgl\":\"kknryrtihf\",\"yzkohdbihanuf\":\"uf\",\"ifpikxwczby\":\"fcbjysagithxqha\"},\"id\":\"cnpqxuhivyqniwby\",\"name\":\"rkxvdum\",\"type\":\"grtfwvu\"}],\"nextLink\":\"gaudcc\"}")
            .toObject(ConfigurationGroupSchemaListResult.class);
        Assertions.assertEquals("mtz", model.value().get(0).location());
        Assertions.assertEquals("sphrupidgs", model.value().get(0).tags().get("bb"));
        Assertions.assertEquals("xpyb", model.value().get(0).properties().description());
        Assertions.assertEquals("m", model.value().get(0).properties().schemaDefinition());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConfigurationGroupSchemaListResult model
            = new ConfigurationGroupSchemaListResult()
                .withValue(
                    Arrays.asList(
                        new ConfigurationGroupSchemaInner().withLocation("mtz")
                            .withTags(mapOf("bb", "sphrupidgs", "sx", "jhphoyc", "tbmufpo", "obhdxbmtqioqjze", "hwlrx",
                                "noi"))
                            .withProperties(new ConfigurationGroupSchemaPropertiesFormat().withDescription("xpyb")
                                .withSchemaDefinition("m")),
                        new ConfigurationGroupSchemaInner().withLocation("rifkwm")
                            .withTags(mapOf("psqucmpoyf", "tsizntocipaoua", "knygjofjddeq", "kfo", "upewnwreitjzy",
                                "rd", "ofcqhsm", "lusarh"))
                            .withProperties(new ConfigurationGroupSchemaPropertiesFormat()
                                .withDescription("lhqgnufooojy").withSchemaDefinition("fsqesaagdfmglzlh")),
                        new ConfigurationGroupSchemaInner().withLocation("a")
                            .withTags(mapOf("mt", "hmwhfpmrqo", "tijbpzvgnwzsymgl", "kknryrtihf", "yzkohdbihanuf", "uf",
                                "ifpikxwczby", "fcbjysagithxqha"))
                            .withProperties(new ConfigurationGroupSchemaPropertiesFormat().withDescription("y")
                                .withSchemaDefinition("nzwuxzd"))));
        model = BinaryData.fromObject(model).toObject(ConfigurationGroupSchemaListResult.class);
        Assertions.assertEquals("mtz", model.value().get(0).location());
        Assertions.assertEquals("sphrupidgs", model.value().get(0).tags().get("bb"));
        Assertions.assertEquals("xpyb", model.value().get(0).properties().description());
        Assertions.assertEquals("m", model.value().get(0).properties().schemaDefinition());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
