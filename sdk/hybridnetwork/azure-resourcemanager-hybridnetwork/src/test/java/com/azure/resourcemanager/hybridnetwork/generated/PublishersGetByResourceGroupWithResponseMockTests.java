// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hybridnetwork.HybridNetworkManager;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hybridnetwork.models.Publisher;
import com.azure.resourcemanager.hybridnetwork.models.PublisherScope;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PublishersGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Failed\",\"scope\":\"Private\"},\"identity\":{\"principalId\":\"81c0a653-7c82-47bd-b609-71ee180a3d25\",\"tenantId\":\"3b440e8a-b384-4747-867d-ac78d5e575fc\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"cwkdtaaw\":{\"principalId\":\"82409e34-ae28-4a16-9b7d-d2db687a919a\",\"clientId\":\"dc09c13b-f6bd-405b-9fe1-83f4f8aac0dd\"},\"ekaum\":{\"principalId\":\"aa43d212-2477-4639-80fb-087107b6cc7d\",\"clientId\":\"ffc32d59-d8e3-414f-87a6-375a8b1ee0dd\"},\"mbzmqk\":{\"principalId\":\"87d07c0b-5043-4557-83c7-dc3bc718f0e7\",\"clientId\":\"03582585-125c-4d13-a75c-f03dd0d5d75e\"},\"bnxwbjsidbirkf\":{\"principalId\":\"a2968499-b235-4780-b9af-ce69c9aa0538\",\"clientId\":\"a913db0a-5392-41d0-98ca-e32c5090cff0\"}}},\"location\":\"sokdgoge\",\"tags\":{\"hbguzo\":\"ym\",\"mffjkutycyarn\":\"kyewnfnzhhhqo\"},\"id\":\"oohguabzoghkt\",\"name\":\"pyc\",\"type\":\"hcoeocnhzq\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HybridNetworkManager manager = HybridNetworkManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        Publisher response = manager.publishers()
            .getByResourceGroupWithResponse("vpinbmhwbj", "jkgqxnhmbkez", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("sokdgoge", response.location());
        Assertions.assertEquals("ym", response.tags().get("hbguzo"));
        Assertions.assertEquals(PublisherScope.PRIVATE, response.properties().scope());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
    }
}
