// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.NetworkFunctionInner;
import com.azure.resourcemanager.hybridnetwork.models.DeploymentResourceIdReference;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentity;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunctionPropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.NfviType;
import com.azure.resourcemanager.hybridnetwork.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkFunctionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkFunctionInner model = BinaryData.fromString(
            "{\"properties\":{\"configurationType\":\"NetworkFunctionPropertiesFormat\",\"provisioningState\":\"Accepted\",\"publisherName\":\"mdwzjeiachboo\",\"publisherScope\":\"Unknown\",\"networkFunctionDefinitionGroupName\":\"ro\",\"networkFunctionDefinitionVersion\":\"qpteeh\",\"networkFunctionDefinitionOfferingLocation\":\"vypyqrimzinpv\",\"networkFunctionDefinitionVersionResourceReference\":{\"idType\":\"DeploymentResourceIdReference\"},\"nfviType\":\"AzureOperatorNexus\",\"nfviId\":\"irsoodqxhcrmnohj\",\"allowSoftwareUpdate\":false,\"roleOverrideValues\":[\"dsoifiyipj\"]},\"etag\":\"qwpgrjbzn\",\"identity\":{\"principalId\":\"56b13c64-4957-44d1-995d-69d634993f4a\",\"tenantId\":\"407e068a-6677-4501-8f35-2935c90b761f\",\"type\":\"None\",\"userAssignedIdentities\":{\"yxqabnmocpcyshur\":{\"principalId\":\"fb21ff64-e0df-42e5-b6fb-f7056cfd2afc\",\"clientId\":\"572da560-3528-4fce-b781-061332f72e73\"}}},\"location\":\"fblj\",\"tags\":{\"qajzyulpkudjkr\":\"btoqcjmkljavbqid\",\"e\":\"khbzhfepgzg\",\"scpai\":\"zloc\"},\"id\":\"rhhbcs\",\"name\":\"l\",\"type\":\"mmajtjaodx\"}")
            .toObject(NetworkFunctionInner.class);
        Assertions.assertEquals("fblj", model.location());
        Assertions.assertEquals("btoqcjmkljavbqid", model.tags().get("qajzyulpkudjkr"));
        Assertions.assertEquals(NfviType.AZURE_OPERATOR_NEXUS, model.properties().nfviType());
        Assertions.assertEquals("irsoodqxhcrmnohj", model.properties().nfviId());
        Assertions.assertEquals(false, model.properties().allowSoftwareUpdate());
        Assertions.assertEquals("dsoifiyipj", model.properties().roleOverrideValues().get(0));
        Assertions.assertEquals("qwpgrjbzn", model.etag());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkFunctionInner model = new NetworkFunctionInner().withLocation("fblj")
            .withTags(mapOf("qajzyulpkudjkr", "btoqcjmkljavbqid", "e", "khbzhfepgzg", "scpai", "zloc"))
            .withProperties(new NetworkFunctionPropertiesFormat()
                .withNetworkFunctionDefinitionVersionResourceReference(new DeploymentResourceIdReference())
                .withNfviType(NfviType.AZURE_OPERATOR_NEXUS).withNfviId("irsoodqxhcrmnohj")
                .withAllowSoftwareUpdate(false).withRoleOverrideValues(Arrays.asList("dsoifiyipj")))
            .withEtag("qwpgrjbzn").withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("yxqabnmocpcyshur", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(NetworkFunctionInner.class);
        Assertions.assertEquals("fblj", model.location());
        Assertions.assertEquals("btoqcjmkljavbqid", model.tags().get("qajzyulpkudjkr"));
        Assertions.assertEquals(NfviType.AZURE_OPERATOR_NEXUS, model.properties().nfviType());
        Assertions.assertEquals("irsoodqxhcrmnohj", model.properties().nfviId());
        Assertions.assertEquals(false, model.properties().allowSoftwareUpdate());
        Assertions.assertEquals("dsoifiyipj", model.properties().roleOverrideValues().get(0));
        Assertions.assertEquals("qwpgrjbzn", model.etag());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
