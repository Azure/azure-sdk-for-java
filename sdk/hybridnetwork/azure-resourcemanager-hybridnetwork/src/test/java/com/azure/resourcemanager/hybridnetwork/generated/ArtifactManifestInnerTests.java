// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.ArtifactManifestInner;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactManifestPropertiesFormat;
import com.azure.resourcemanager.hybridnetwork.models.ArtifactType;
import com.azure.resourcemanager.hybridnetwork.models.ManifestArtifactFormat;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ArtifactManifestInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ArtifactManifestInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Deleted\",\"artifactManifestState\":\"Validating\",\"artifacts\":[{\"artifactName\":\"pcesutrg\",\"artifactType\":\"Unknown\",\"artifactVersion\":\"uutpwoqhih\"}]},\"location\":\"qg\",\"tags\":{\"cypsxjv\":\"nfqn\",\"zjxvydfcea\":\"oimwkslirc\",\"gdyftumrtwna\":\"vlhv\"},\"id\":\"jslb\",\"name\":\"wkojgcyztsfmzn\",\"type\":\"aeqphchqnr\"}")
            .toObject(ArtifactManifestInner.class);
        Assertions.assertEquals("qg", model.location());
        Assertions.assertEquals("nfqn", model.tags().get("cypsxjv"));
        Assertions.assertEquals("pcesutrg", model.properties().artifacts().get(0).artifactName());
        Assertions.assertEquals(ArtifactType.UNKNOWN, model.properties().artifacts().get(0).artifactType());
        Assertions.assertEquals("uutpwoqhih", model.properties().artifacts().get(0).artifactVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ArtifactManifestInner model = new ArtifactManifestInner().withLocation("qg")
            .withTags(mapOf("cypsxjv", "nfqn", "zjxvydfcea", "oimwkslirc", "gdyftumrtwna", "vlhv"))
            .withProperties(new ArtifactManifestPropertiesFormat()
                .withArtifacts(Arrays.asList(new ManifestArtifactFormat().withArtifactName("pcesutrg")
                    .withArtifactType(ArtifactType.UNKNOWN).withArtifactVersion("uutpwoqhih"))));
        model = BinaryData.fromObject(model).toObject(ArtifactManifestInner.class);
        Assertions.assertEquals("qg", model.location());
        Assertions.assertEquals("nfqn", model.tags().get("cypsxjv"));
        Assertions.assertEquals("pcesutrg", model.properties().artifacts().get(0).artifactName());
        Assertions.assertEquals(ArtifactType.UNKNOWN, model.properties().artifacts().get(0).artifactType());
        Assertions.assertEquals("uutpwoqhih", model.properties().artifacts().get(0).artifactVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
