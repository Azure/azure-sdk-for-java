// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hybridnetwork.HybridNetworkManager;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunction;
import com.azure.resourcemanager.hybridnetwork.models.NfviType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class NetworkFunctionsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"configurationType\":\"NetworkFunctionPropertiesFormat\",\"provisioningState\":\"Converging\",\"publisherName\":\"mzqwmvtxnjmxmcu\",\"publisherScope\":\"Unknown\",\"networkFunctionDefinitionGroupName\":\"cvclxynpdk\",\"networkFunctionDefinitionVersion\":\"fabuiyjibu\",\"networkFunctionDefinitionOfferingLocation\":\"hdugneiknpg\",\"networkFunctionDefinitionVersionResourceReference\":{\"idType\":\"DeploymentResourceIdReference\"},\"nfviType\":\"AzureCore\",\"nfviId\":\"uqh\",\"allowSoftwareUpdate\":false,\"roleOverrideValues\":[\"ipq\"]},\"etag\":\"edmurrxxge\",\"identity\":{\"principalId\":\"464100bd-526d-40b6-95ef-b2bb7d80e871\",\"tenantId\":\"e6cf0546-177d-4d35-bb2e-8a974a16abe9\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"mqpzoyhlfbcgw\":{\"principalId\":\"27da708c-9f85-47c7-8b19-f83ae81c52d9\",\"clientId\":\"eff27103-aeb8-407d-b136-627522b1f7e5\"},\"oxoebqi\":{\"principalId\":\"0c45e5c2-ee64-40c5-b94c-0436660d4240\",\"clientId\":\"747fa0d5-8c7d-47dc-bb21-bc514ab919fd\"}}},\"location\":\"ipnwj\",\"tags\":{\"jwpfilkm\":\"qlafcbahhpzpofoi\",\"dviauogp\":\"kholvd\",\"kyefchnmnahmnxhk\":\"uartvti\",\"ooxf\":\"jqirwrw\"},\"id\":\"i\",\"name\":\"hx\",\"type\":\"rsnewmozqvbubqma\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HybridNetworkManager manager = HybridNetworkManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<NetworkFunction> response = manager.networkFunctions().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ipnwj", response.iterator().next().location());
        Assertions.assertEquals("qlafcbahhpzpofoi", response.iterator().next().tags().get("jwpfilkm"));
        Assertions.assertEquals(NfviType.AZURE_CORE, response.iterator().next().properties().nfviType());
        Assertions.assertEquals("uqh", response.iterator().next().properties().nfviId());
        Assertions.assertEquals(false, response.iterator().next().properties().allowSoftwareUpdate());
        Assertions.assertEquals("ipq", response.iterator().next().properties().roleOverrideValues().get(0));
        Assertions.assertEquals("edmurrxxge", response.iterator().next().etag());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
    }
}
