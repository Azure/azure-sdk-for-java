// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.NetworkFunctionDefinitionVersionInner;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunctionDefinitionVersionPropertiesFormat;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkFunctionDefinitionVersionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkFunctionDefinitionVersionInner model = BinaryData.fromString(
            "{\"properties\":{\"networkFunctionType\":\"NetworkFunctionDefinitionVersionPropertiesFormat\",\"provisioningState\":\"Converging\",\"versionState\":\"Unknown\",\"description\":\"quuvxzxcl\",\"deployParameters\":\"thhqzonosggbh\"},\"location\":\"hfwdsjnkaljutiis\",\"tags\":{\"ewkfvhqcrai\":\"ffgdkz\",\"uflrwd\":\"vpnpp\",\"hgw\":\"hdlxyjrxsagafcn\"},\"id\":\"apnedgfbcvkc\",\"name\":\"q\",\"type\":\"pkeqdcvdrhvoo\"}")
            .toObject(NetworkFunctionDefinitionVersionInner.class);
        Assertions.assertEquals("hfwdsjnkaljutiis", model.location());
        Assertions.assertEquals("ffgdkz", model.tags().get("ewkfvhqcrai"));
        Assertions.assertEquals("quuvxzxcl", model.properties().description());
        Assertions.assertEquals("thhqzonosggbh", model.properties().deployParameters());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkFunctionDefinitionVersionInner model
            = new NetworkFunctionDefinitionVersionInner().withLocation("hfwdsjnkaljutiis")
                .withTags(mapOf("ewkfvhqcrai", "ffgdkz", "uflrwd", "vpnpp", "hgw", "hdlxyjrxsagafcn"))
                .withProperties(new NetworkFunctionDefinitionVersionPropertiesFormat().withDescription("quuvxzxcl")
                    .withDeployParameters("thhqzonosggbh"));
        model = BinaryData.fromObject(model).toObject(NetworkFunctionDefinitionVersionInner.class);
        Assertions.assertEquals("hfwdsjnkaljutiis", model.location());
        Assertions.assertEquals("ffgdkz", model.tags().get("ewkfvhqcrai"));
        Assertions.assertEquals("quuvxzxcl", model.properties().description());
        Assertions.assertEquals("thhqzonosggbh", model.properties().deployParameters());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
