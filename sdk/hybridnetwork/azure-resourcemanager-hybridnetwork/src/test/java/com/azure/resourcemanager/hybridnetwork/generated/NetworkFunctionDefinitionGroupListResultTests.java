// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.NetworkFunctionDefinitionGroupInner;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunctionDefinitionGroupListResult;
import com.azure.resourcemanager.hybridnetwork.models.NetworkFunctionDefinitionGroupPropertiesFormat;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkFunctionDefinitionGroupListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkFunctionDefinitionGroupListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"description\":\"iwjmygtdssls\"},\"location\":\"mweriofzpy\",\"tags\":{\"vwiwubmwmbesld\":\"mwabnetshhszhedp\",\"wtppjflcxogaoko\":\"k\"},\"id\":\"z\",\"name\":\"nsikvmkqzeqqkdl\",\"type\":\"fzxmhhvhgureodkw\"}],\"nextLink\":\"dagxtibqd\"}")
            .toObject(NetworkFunctionDefinitionGroupListResult.class);
        Assertions.assertEquals("mweriofzpy", model.value().get(0).location());
        Assertions.assertEquals("mwabnetshhszhedp", model.value().get(0).tags().get("vwiwubmwmbesld"));
        Assertions.assertEquals("iwjmygtdssls", model.value().get(0).properties().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkFunctionDefinitionGroupListResult model = new NetworkFunctionDefinitionGroupListResult()
            .withValue(Arrays.asList(new NetworkFunctionDefinitionGroupInner().withLocation("mweriofzpy")
                .withTags(mapOf("vwiwubmwmbesld", "mwabnetshhszhedp", "wtppjflcxogaoko", "k"))
                .withProperties(new NetworkFunctionDefinitionGroupPropertiesFormat().withDescription("iwjmygtdssls"))));
        model = BinaryData.fromObject(model).toObject(NetworkFunctionDefinitionGroupListResult.class);
        Assertions.assertEquals("mweriofzpy", model.value().get(0).location());
        Assertions.assertEquals("mwabnetshhszhedp", model.value().get(0).tags().get("vwiwubmwmbesld"));
        Assertions.assertEquals("iwjmygtdssls", model.value().get(0).properties().description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
