// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridnetwork.fluent.models.SiteInner;
import com.azure.resourcemanager.hybridnetwork.models.NfvIs;
import com.azure.resourcemanager.hybridnetwork.models.SiteListResult;
import com.azure.resourcemanager.hybridnetwork.models.SitePropertiesFormat;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SiteListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SiteListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Unknown\",\"nfvis\":[{\"nfviType\":\"NfvIs\",\"name\":\"yuqdu\"}],\"siteNetworkServiceReferences\":[{\"id\":\"nrwrbiork\"},{\"id\":\"lywjhh\"}]},\"location\":\"nhxmsi\",\"tags\":{\"zaofjchvcyy\":\"miloxggdufiqndie\"},\"id\":\"s\",\"name\":\"gdotcubiipuipwo\",\"type\":\"onmacjekniz\"},{\"properties\":{\"provisioningState\":\"Deleting\",\"nfvis\":[{\"nfviType\":\"NfvIs\",\"name\":\"pevf\"},{\"nfviType\":\"NfvIs\",\"name\":\"b\"}],\"siteNetworkServiceReferences\":[{\"id\":\"lbywdxsm\"},{\"id\":\"cwrwfs\"}]},\"location\":\"fnynszqujizdvoqy\",\"tags\":{\"bblgyavut\":\"yo\",\"ksbpimlqoljx\":\"thjoxoism\",\"fgcviz\":\"cgxxlxs\",\"jub\":\"zdwlvwlyoupfgfb\"},\"id\":\"yhgk\",\"name\":\"minsgowzf\",\"type\":\"tsttktlahbq\"}],\"nextLink\":\"tx\"}")
            .toObject(SiteListResult.class);
        Assertions.assertEquals("nhxmsi", model.value().get(0).location());
        Assertions.assertEquals("miloxggdufiqndie", model.value().get(0).tags().get("zaofjchvcyy"));
        Assertions.assertEquals("yuqdu", model.value().get(0).properties().nfvis().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SiteListResult model = new SiteListResult().withValue(Arrays.asList(
            new SiteInner().withLocation("nhxmsi").withTags(mapOf("zaofjchvcyy", "miloxggdufiqndie"))
                .withProperties(new SitePropertiesFormat().withNfvis(Arrays.asList(new NfvIs().withName("yuqdu")))),
            new SiteInner().withLocation("fnynszqujizdvoqy")
                .withTags(mapOf("bblgyavut", "yo", "ksbpimlqoljx", "thjoxoism", "fgcviz", "cgxxlxs", "jub",
                    "zdwlvwlyoupfgfb"))
                .withProperties(new SitePropertiesFormat()
                    .withNfvis(Arrays.asList(new NfvIs().withName("pevf"), new NfvIs().withName("b"))))));
        model = BinaryData.fromObject(model).toObject(SiteListResult.class);
        Assertions.assertEquals("nhxmsi", model.value().get(0).location());
        Assertions.assertEquals("miloxggdufiqndie", model.value().get(0).tags().get("zaofjchvcyy"));
        Assertions.assertEquals("yuqdu", model.value().get(0).properties().nfvis().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
