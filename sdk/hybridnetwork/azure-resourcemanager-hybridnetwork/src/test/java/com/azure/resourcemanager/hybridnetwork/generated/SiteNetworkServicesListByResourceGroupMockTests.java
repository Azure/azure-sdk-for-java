// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hybridnetwork.HybridNetworkManager;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hybridnetwork.models.SiteNetworkService;
import com.azure.resourcemanager.hybridnetwork.models.SkuName;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SiteNetworkServicesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Unknown\",\"managedResourceGroupConfiguration\":{\"name\":\"oikxkxhnegk\",\"location\":\"z\"},\"siteReference\":{\"id\":\"t\"},\"publisherName\":\"plvukaobrlbpg\",\"publisherScope\":\"Unknown\",\"networkServiceDesignGroupName\":\"gnc\",\"networkServiceDesignVersionName\":\"hg\",\"networkServiceDesignVersionOfferingLocation\":\"uowakyw\",\"networkServiceDesignVersionResourceReference\":{\"idType\":\"DeploymentResourceIdReference\"},\"desiredStateConfigurationGroupValueReferences\":{\"cgqtag\":{\"id\":\"m\"},\"lbvgjc\":{\"id\":\"clssoljomevtfyc\"}},\"lastStateNetworkServiceDesignVersionName\":\"kk\",\"lastStateConfigurationGroupValueReferences\":{\"cufqbvntnrgmqs\":{\"id\":\"ytssikiz\"}}},\"identity\":{\"principalId\":\"a16f9bc1-41ba-4ce9-8926-5f4d1da71fa2\",\"tenantId\":\"a0a76bb3-f523-470e-bc46-95627d8af144\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"lykmxcpwzvmdo\":{\"principalId\":\"dcd68a79-0687-4c22-9f1b-bfd295275854\",\"clientId\":\"e9fd9a82-6e8b-469a-95b4-2758984e54a8\"},\"dt\":{\"principalId\":\"73849710-ec6a-4606-967b-ee33388633dd\",\"clientId\":\"338d75ac-6ed1-463a-a7af-22c7c0cc19a8\"}}},\"sku\":{\"name\":\"Standard\",\"tier\":\"Basic\"},\"location\":\"boncqbazqic\",\"tags\":{\"pkxyqvgxi\":\"ygtvxbyjanepub\",\"tvo\":\"od\"},\"id\":\"kxdxuwsaifmcwn\",\"name\":\"s\",\"type\":\"zlehgcvkbcknjolg\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HybridNetworkManager manager = HybridNetworkManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SiteNetworkService> response
            = manager.siteNetworkServices().listByResourceGroup("xhmw", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("boncqbazqic", response.iterator().next().location());
        Assertions.assertEquals("ygtvxbyjanepub", response.iterator().next().tags().get("pkxyqvgxi"));
        Assertions.assertEquals("oikxkxhnegk",
            response.iterator().next().properties().managedResourceGroupConfiguration().name());
        Assertions.assertEquals("z",
            response.iterator().next().properties().managedResourceGroupConfiguration().location());
        Assertions.assertEquals("t", response.iterator().next().properties().siteReference().id());
        Assertions.assertEquals("m",
            response.iterator().next().properties().desiredStateConfigurationGroupValueReferences().get("cgqtag").id());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals(SkuName.STANDARD, response.iterator().next().sku().name());
    }
}
