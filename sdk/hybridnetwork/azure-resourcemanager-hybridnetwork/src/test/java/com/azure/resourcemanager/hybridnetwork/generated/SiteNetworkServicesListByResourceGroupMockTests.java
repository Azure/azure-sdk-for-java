// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridnetwork.HybridNetworkManager;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hybridnetwork.models.SiteNetworkService;
import com.azure.resourcemanager.hybridnetwork.models.SkuName;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SiteNetworkServicesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Unknown\",\"managedResourceGroupConfiguration\":{\"name\":\"oikxkxhnegk\",\"location\":\"z\"},\"siteReference\":{\"id\":\"t\"},\"publisherName\":\"plvukaobrlbpg\",\"publisherScope\":\"Unknown\",\"networkServiceDesignGroupName\":\"gnc\",\"networkServiceDesignVersionName\":\"hg\",\"networkServiceDesignVersionOfferingLocation\":\"uowakyw\",\"networkServiceDesignVersionResourceReference\":{\"idType\":\"DeploymentResourceIdReference\"},\"desiredStateConfigurationGroupValueReferences\":{\"cgqtag\":{\"id\":\"m\"},\"lbvgjc\":{\"id\":\"clssoljomevtfyc\"}},\"lastStateNetworkServiceDesignVersionName\":\"kk\",\"lastStateConfigurationGroupValueReferences\":{\"cufqbvntnrgmqs\":{\"id\":\"ytssikiz\"}}},\"identity\":{\"principalId\":\"5a391037-df41-4a93-b939-04a714f5e775\",\"tenantId\":\"0467c2a3-7194-4c28-905e-65770e2681a0\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"lykmxcpwzvmdo\":{\"principalId\":\"42c3fb7f-5b5a-47f5-9b2e-86e577f3fcf1\",\"clientId\":\"4972bafa-3a6d-42b7-82f1-b0af898a472f\"},\"dt\":{\"principalId\":\"4d42616e-9a8c-40ff-b413-0d203f6b2b37\",\"clientId\":\"c4b1ab78-4380-4e44-936d-e66f401b53df\"}}},\"sku\":{\"name\":\"Standard\",\"tier\":\"Basic\"},\"location\":\"boncqbazqic\",\"tags\":{\"pkxyqvgxi\":\"ygtvxbyjanepub\",\"tvo\":\"od\"},\"id\":\"kxdxuwsaifmcwn\",\"name\":\"s\",\"type\":\"zlehgcvkbcknjolg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridNetworkManager manager = HybridNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SiteNetworkService> response
            = manager.siteNetworkServices().listByResourceGroup("xhmw", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("boncqbazqic", response.iterator().next().location());
        Assertions.assertEquals("ygtvxbyjanepub", response.iterator().next().tags().get("pkxyqvgxi"));
        Assertions.assertEquals("oikxkxhnegk",
            response.iterator().next().properties().managedResourceGroupConfiguration().name());
        Assertions.assertEquals("z",
            response.iterator().next().properties().managedResourceGroupConfiguration().location());
        Assertions.assertEquals("t", response.iterator().next().properties().siteReference().id());
        Assertions.assertEquals("m",
            response.iterator().next().properties().desiredStateConfigurationGroupValueReferences().get("cgqtag").id());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals(SkuName.STANDARD, response.iterator().next().sku().name());
    }
}
