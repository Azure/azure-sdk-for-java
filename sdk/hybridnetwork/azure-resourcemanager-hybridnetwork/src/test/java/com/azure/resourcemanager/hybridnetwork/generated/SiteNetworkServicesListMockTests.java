// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridnetwork.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridnetwork.HybridNetworkManager;
import com.azure.resourcemanager.hybridnetwork.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hybridnetwork.models.SiteNetworkService;
import com.azure.resourcemanager.hybridnetwork.models.SkuName;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SiteNetworkServicesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"managedResourceGroupConfiguration\":{\"name\":\"bpdbollgr\",\"location\":\"qiuasigrows\"},\"siteReference\":{\"id\":\"equygdjboqgrmtq\"},\"publisherName\":\"qevadrmmw\",\"publisherScope\":\"Private\",\"networkServiceDesignGroupName\":\"vcmjzkxiidisczsk\",\"networkServiceDesignVersionName\":\"woqiqazugamxzkrr\",\"networkServiceDesignVersionOfferingLocation\":\"iisb\",\"networkServiceDesignVersionResourceReference\":{\"idType\":\"DeploymentResourceIdReference\"},\"desiredStateConfigurationGroupValueReferences\":{\"ztdsbeza\":{\"id\":\"ccek\"}},\"lastStateNetworkServiceDesignVersionName\":\"f\",\"lastStateConfigurationGroupValueReferences\":{\"hnepkpeti\":{\"id\":\"uizh\"},\"azvdhctmmkosz\":{\"id\":\"xqiubxdukecpx\"},\"ofkbtf\":{\"id\":\"blnsntrpcaqk\"},\"nldpvcbhhezyquwu\":{\"id\":\"kl\"}}},\"identity\":{\"principalId\":\"5609150d-c443-4ca3-8909-0dbd99ecc9a0\",\"tenantId\":\"f2b4e969-4bff-42c5-8aac-fef3b0adabe1\",\"type\":\"None\",\"userAssignedIdentities\":{\"r\":{\"principalId\":\"e8bd488a-06c3-4535-b6ba-fd23ddfd7305\",\"clientId\":\"6e545dda-ffc2-442a-8b03-84b604d0fba0\"},\"uatvlmbj\":{\"principalId\":\"35b102ef-ab51-4c9c-a295-6b95279741b3\",\"clientId\":\"6c9c8a15-2066-43c4-9091-bf495e9ed474\"}}},\"sku\":{\"name\":\"Basic\",\"tier\":\"Basic\"},\"location\":\"x\",\"tags\":{\"pcpahprzrvxhmtf\":\"w\",\"mj\":\"ocnxz\",\"rxtd\":\"ngxno\"},\"id\":\"sn\",\"name\":\"evhdlmydid\",\"type\":\"hepfwwtjfdoes\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridNetworkManager manager = HybridNetworkManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SiteNetworkService> response
            = manager.siteNetworkServices().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("x", response.iterator().next().location());
        Assertions.assertEquals("w", response.iterator().next().tags().get("pcpahprzrvxhmtf"));
        Assertions.assertEquals("bpdbollgr",
            response.iterator().next().properties().managedResourceGroupConfiguration().name());
        Assertions.assertEquals("qiuasigrows",
            response.iterator().next().properties().managedResourceGroupConfiguration().location());
        Assertions.assertEquals("equygdjboqgrmtq", response.iterator().next().properties().siteReference().id());
        Assertions.assertEquals("ccek",
            response.iterator()
                .next()
                .properties()
                .desiredStateConfigurationGroupValueReferences()
                .get("ztdsbeza")
                .id());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals(SkuName.BASIC, response.iterator().next().sku().name());
    }
}
