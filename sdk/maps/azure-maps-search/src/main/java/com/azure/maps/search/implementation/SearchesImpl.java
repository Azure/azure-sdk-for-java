// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.ResponseBase;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.maps.search.implementation.models.ErrorResponseException;
import com.azure.maps.search.implementation.models.ReverseGeocodingResultTypeEnum;
import com.azure.maps.search.implementation.models.SearchesGetGeocodingHeaders;
import com.azure.maps.search.models.Boundary;
import com.azure.maps.search.models.BoundaryResultTypeEnum;
import com.azure.maps.search.models.GeocodingBatchRequestBody;
import com.azure.maps.search.models.GeocodingBatchResponse;
import com.azure.maps.search.models.GeocodingResponse;
import com.azure.maps.search.models.ResolutionEnum;
import com.azure.maps.search.models.ReverseGeocodingBatchRequestBody;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Searches.
 */
public final class SearchesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SearchesService service;

    /**
     * The service client containing this operation class.
     */
    private final SearchClientImpl client;

    /**
     * Initializes an instance of SearchesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SearchesImpl(SearchClientImpl client) {
        this.service = RestProxy.create(SearchesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SearchClientSearches to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SearchClientSearches")
    public interface SearchesService {
        @Get("/geocode")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<ResponseBase<SearchesGetGeocodingHeaders, GeocodingResponse>> getGeocoding(@HostParam("$host") String host,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept-Language") String acceptLanguage,
            @QueryParam("top") Integer top, @QueryParam("query") String query,
            @QueryParam("addressLine") String addressLine, @QueryParam("countryRegion") String countryRegion,
            @QueryParam("bbox") String bbox, @QueryParam("view") String view,
            @QueryParam("coordinates") String coordinates, @QueryParam("adminDistrict") String adminDistrict,
            @QueryParam("adminDistrict2") String adminDistrict2, @QueryParam("adminDistrict3") String adminDistrict3,
            @QueryParam("locality") String locality, @QueryParam("postalCode") String postalCode,
            @HeaderParam("x-ms-client-id") String clientId, @HeaderParam("Accept") String accept, Context context);

        @Get("/geocode")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<GeocodingResponse>> getGeocodingNoCustomHeaders(@HostParam("$host") String host,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept-Language") String acceptLanguage,
            @QueryParam("top") Integer top, @QueryParam("query") String query,
            @QueryParam("addressLine") String addressLine, @QueryParam("countryRegion") String countryRegion,
            @QueryParam("bbox") String bbox, @QueryParam("view") String view,
            @QueryParam("coordinates") String coordinates, @QueryParam("adminDistrict") String adminDistrict,
            @QueryParam("adminDistrict2") String adminDistrict2, @QueryParam("adminDistrict3") String adminDistrict3,
            @QueryParam("locality") String locality, @QueryParam("postalCode") String postalCode,
            @HeaderParam("x-ms-client-id") String clientId, @HeaderParam("Accept") String accept, Context context);

        @Post("/geocode:batch")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<GeocodingBatchResponse>> getGeocodingBatch(@HostParam("$host") String host,
            @HeaderParam("x-ms-client-id") String clientId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept-Language") String acceptLanguage,
            @BodyParam("application/json") GeocodingBatchRequestBody geocodingBatchRequestBody,
            @HeaderParam("Accept") String accept, Context context);

        @Get("/search/polygon")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Boundary>> getPolygon(@HostParam("$host") String host,
            @HeaderParam("x-ms-client-id") String clientId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept-Language") String acceptLanguage, @QueryParam("coordinates") String coordinates,
            @QueryParam("view") String view, @QueryParam("resultType") BoundaryResultTypeEnum resultType,
            @QueryParam("resolution") ResolutionEnum resolution, @HeaderParam("Accept") String accept, Context context);

        @Get("/reverseGeocode")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<GeocodingResponse>> getReverseGeocoding(@HostParam("$host") String host,
            @HeaderParam("x-ms-client-id") String clientId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept-Language") String acceptLanguage, @QueryParam("coordinates") String coordinates,
            @QueryParam("resultTypes") String resultTypes, @QueryParam("view") String view,
            @HeaderParam("Accept") String accept, Context context);

        @Post("/reverseGeocode:batch")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<GeocodingBatchResponse>> getReverseGeocodingBatch(@HostParam("$host") String host,
            @HeaderParam("x-ms-client-id") String clientId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept-Language") String acceptLanguage,
            @BodyParam("application/json") ReverseGeocodingBatchRequestBody reverseGeocodingBatchRequestBody,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Use to get longitude and latitude coordinates of a street address or name of a place.
     * 
     * 
     * 
     * The `Get Geocoding` API is an HTTP `GET` request that returns the longitude and latitude coordinates of the
     * location being searched.
     * 
     * In many cases, the complete search service might be too much, for instance if you are only interested in
     * traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by
     * hitting the geocoding endpoint with just the address or partial address in question. The geocoding search index
     * will be queried for everything above the street level data. No Point of Interest (POIs) will be returned. Note
     * that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact
     * street addresses or street or intersections as well as higher level geographies such as city centers, counties
     * and states. The response also returns detailed address properties such as street, postal code, municipality, and
     * country/region information.
     * 
     * @param top Maximum number of responses that will be returned. Default: 5, minimum: 1 and maximum: 20.
     * @param query A string that contains information about a location, such as an address or landmark name.
     * @param addressLine The official street line of an address relative to the area, as specified by the locality, or
     * postalCode, properties. Typical use of this element would be to provide a street address or any official address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param countryRegion Signal for the geocoding result to an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) that is specified e.g. FR./
     * 
     * **If query is given, should not use this parameter.**.
     * @param bbox A rectangular area on the earth defined as a bounding box object. The sides of the rectangles are
     * defined by longitude and latitude values. When you specify this parameter, the geographical area is taken into
     * account when computing the results of a location query.
     * 
     * Example: lon1,lat1,lon2,lat2.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param coordinates A point on the earth specified as a longitude and latitude. When you specify this parameter,
     * the user’s location is taken into account and the results returned may be more relevant to the user. Example:
     * &amp;coordinates=lon,lat.
     * @param adminDistrict The country subdivision portion of an address, such as WA.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict2 The county for the structured address, such as King.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict3 The named area for the structured address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param locality The locality portion of an address, such as Seattle.
     * 
     * **If query is given, should not use this parameter.**.
     * @param postalCode The postal code portion of an address.
     * 
     * **If query is given, should not use this parameter.**.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding call along with {@link ResponseBase} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<SearchesGetGeocodingHeaders, GeocodingResponse>> getGeocodingWithResponseAsync(Integer top,
        String query, String addressLine, String countryRegion, List<Double> bbox, String view,
        List<Double> coordinates, String adminDistrict, String adminDistrict2, String adminDistrict3, String locality,
        String postalCode) {
        final String accept = "application/geo+json, application/json";
        String bboxConverted
            = JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(bbox, CollectionFormat.CSV);
        String coordinatesConverted
            = JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(coordinates, CollectionFormat.CSV);
        return FluxUtil.withContext(context -> service.getGeocoding(this.client.getHost(), this.client.getApiVersion(),
            this.client.getAcceptLanguage(), top, query, addressLine, countryRegion, bboxConverted, view,
            coordinatesConverted, adminDistrict, adminDistrict2, adminDistrict3, locality, postalCode,
            this.client.getClientId(), accept, context));
    }

    /**
     * Use to get longitude and latitude coordinates of a street address or name of a place.
     * 
     * 
     * 
     * The `Get Geocoding` API is an HTTP `GET` request that returns the longitude and latitude coordinates of the
     * location being searched.
     * 
     * In many cases, the complete search service might be too much, for instance if you are only interested in
     * traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by
     * hitting the geocoding endpoint with just the address or partial address in question. The geocoding search index
     * will be queried for everything above the street level data. No Point of Interest (POIs) will be returned. Note
     * that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact
     * street addresses or street or intersections as well as higher level geographies such as city centers, counties
     * and states. The response also returns detailed address properties such as street, postal code, municipality, and
     * country/region information.
     * 
     * @param top Maximum number of responses that will be returned. Default: 5, minimum: 1 and maximum: 20.
     * @param query A string that contains information about a location, such as an address or landmark name.
     * @param addressLine The official street line of an address relative to the area, as specified by the locality, or
     * postalCode, properties. Typical use of this element would be to provide a street address or any official address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param countryRegion Signal for the geocoding result to an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) that is specified e.g. FR./
     * 
     * **If query is given, should not use this parameter.**.
     * @param bbox A rectangular area on the earth defined as a bounding box object. The sides of the rectangles are
     * defined by longitude and latitude values. When you specify this parameter, the geographical area is taken into
     * account when computing the results of a location query.
     * 
     * Example: lon1,lat1,lon2,lat2.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param coordinates A point on the earth specified as a longitude and latitude. When you specify this parameter,
     * the user’s location is taken into account and the results returned may be more relevant to the user. Example:
     * &amp;coordinates=lon,lat.
     * @param adminDistrict The country subdivision portion of an address, such as WA.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict2 The county for the structured address, such as King.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict3 The named area for the structured address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param locality The locality portion of an address, such as Seattle.
     * 
     * **If query is given, should not use this parameter.**.
     * @param postalCode The postal code portion of an address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding call along with {@link ResponseBase} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<SearchesGetGeocodingHeaders, GeocodingResponse>> getGeocodingWithResponseAsync(Integer top,
        String query, String addressLine, String countryRegion, List<Double> bbox, String view,
        List<Double> coordinates, String adminDistrict, String adminDistrict2, String adminDistrict3, String locality,
        String postalCode, Context context) {
        final String accept = "application/geo+json, application/json";
        String bboxConverted
            = JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(bbox, CollectionFormat.CSV);
        String coordinatesConverted
            = JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(coordinates, CollectionFormat.CSV);
        return service.getGeocoding(this.client.getHost(), this.client.getApiVersion(), this.client.getAcceptLanguage(),
            top, query, addressLine, countryRegion, bboxConverted, view, coordinatesConverted, adminDistrict,
            adminDistrict2, adminDistrict3, locality, postalCode, this.client.getClientId(), accept, context);
    }

    /**
     * Use to get longitude and latitude coordinates of a street address or name of a place.
     * 
     * 
     * 
     * The `Get Geocoding` API is an HTTP `GET` request that returns the longitude and latitude coordinates of the
     * location being searched.
     * 
     * In many cases, the complete search service might be too much, for instance if you are only interested in
     * traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by
     * hitting the geocoding endpoint with just the address or partial address in question. The geocoding search index
     * will be queried for everything above the street level data. No Point of Interest (POIs) will be returned. Note
     * that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact
     * street addresses or street or intersections as well as higher level geographies such as city centers, counties
     * and states. The response also returns detailed address properties such as street, postal code, municipality, and
     * country/region information.
     * 
     * @param top Maximum number of responses that will be returned. Default: 5, minimum: 1 and maximum: 20.
     * @param query A string that contains information about a location, such as an address or landmark name.
     * @param addressLine The official street line of an address relative to the area, as specified by the locality, or
     * postalCode, properties. Typical use of this element would be to provide a street address or any official address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param countryRegion Signal for the geocoding result to an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) that is specified e.g. FR./
     * 
     * **If query is given, should not use this parameter.**.
     * @param bbox A rectangular area on the earth defined as a bounding box object. The sides of the rectangles are
     * defined by longitude and latitude values. When you specify this parameter, the geographical area is taken into
     * account when computing the results of a location query.
     * 
     * Example: lon1,lat1,lon2,lat2.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param coordinates A point on the earth specified as a longitude and latitude. When you specify this parameter,
     * the user’s location is taken into account and the results returned may be more relevant to the user. Example:
     * &amp;coordinates=lon,lat.
     * @param adminDistrict The country subdivision portion of an address, such as WA.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict2 The county for the structured address, such as King.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict3 The named area for the structured address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param locality The locality portion of an address, such as Seattle.
     * 
     * **If query is given, should not use this parameter.**.
     * @param postalCode The postal code portion of an address.
     * 
     * **If query is given, should not use this parameter.**.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding call on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeocodingResponse> getGeocodingAsync(Integer top, String query, String addressLine,
        String countryRegion, List<Double> bbox, String view, List<Double> coordinates, String adminDistrict,
        String adminDistrict2, String adminDistrict3, String locality, String postalCode) {
        return getGeocodingWithResponseAsync(top, query, addressLine, countryRegion, bbox, view, coordinates,
            adminDistrict, adminDistrict2, adminDistrict3, locality, postalCode)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Use to get longitude and latitude coordinates of a street address or name of a place.
     * 
     * 
     * 
     * The `Get Geocoding` API is an HTTP `GET` request that returns the longitude and latitude coordinates of the
     * location being searched.
     * 
     * In many cases, the complete search service might be too much, for instance if you are only interested in
     * traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by
     * hitting the geocoding endpoint with just the address or partial address in question. The geocoding search index
     * will be queried for everything above the street level data. No Point of Interest (POIs) will be returned. Note
     * that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact
     * street addresses or street or intersections as well as higher level geographies such as city centers, counties
     * and states. The response also returns detailed address properties such as street, postal code, municipality, and
     * country/region information.
     * 
     * @param top Maximum number of responses that will be returned. Default: 5, minimum: 1 and maximum: 20.
     * @param query A string that contains information about a location, such as an address or landmark name.
     * @param addressLine The official street line of an address relative to the area, as specified by the locality, or
     * postalCode, properties. Typical use of this element would be to provide a street address or any official address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param countryRegion Signal for the geocoding result to an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) that is specified e.g. FR./
     * 
     * **If query is given, should not use this parameter.**.
     * @param bbox A rectangular area on the earth defined as a bounding box object. The sides of the rectangles are
     * defined by longitude and latitude values. When you specify this parameter, the geographical area is taken into
     * account when computing the results of a location query.
     * 
     * Example: lon1,lat1,lon2,lat2.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param coordinates A point on the earth specified as a longitude and latitude. When you specify this parameter,
     * the user’s location is taken into account and the results returned may be more relevant to the user. Example:
     * &amp;coordinates=lon,lat.
     * @param adminDistrict The country subdivision portion of an address, such as WA.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict2 The county for the structured address, such as King.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict3 The named area for the structured address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param locality The locality portion of an address, such as Seattle.
     * 
     * **If query is given, should not use this parameter.**.
     * @param postalCode The postal code portion of an address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding call on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeocodingResponse> getGeocodingAsync(Integer top, String query, String addressLine,
        String countryRegion, List<Double> bbox, String view, List<Double> coordinates, String adminDistrict,
        String adminDistrict2, String adminDistrict3, String locality, String postalCode, Context context) {
        return getGeocodingWithResponseAsync(top, query, addressLine, countryRegion, bbox, view, coordinates,
            adminDistrict, adminDistrict2, adminDistrict3, locality, postalCode, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Use to get longitude and latitude coordinates of a street address or name of a place.
     * 
     * 
     * 
     * The `Get Geocoding` API is an HTTP `GET` request that returns the longitude and latitude coordinates of the
     * location being searched.
     * 
     * In many cases, the complete search service might be too much, for instance if you are only interested in
     * traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by
     * hitting the geocoding endpoint with just the address or partial address in question. The geocoding search index
     * will be queried for everything above the street level data. No Point of Interest (POIs) will be returned. Note
     * that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact
     * street addresses or street or intersections as well as higher level geographies such as city centers, counties
     * and states. The response also returns detailed address properties such as street, postal code, municipality, and
     * country/region information.
     * 
     * @param top Maximum number of responses that will be returned. Default: 5, minimum: 1 and maximum: 20.
     * @param query A string that contains information about a location, such as an address or landmark name.
     * @param addressLine The official street line of an address relative to the area, as specified by the locality, or
     * postalCode, properties. Typical use of this element would be to provide a street address or any official address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param countryRegion Signal for the geocoding result to an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) that is specified e.g. FR./
     * 
     * **If query is given, should not use this parameter.**.
     * @param bbox A rectangular area on the earth defined as a bounding box object. The sides of the rectangles are
     * defined by longitude and latitude values. When you specify this parameter, the geographical area is taken into
     * account when computing the results of a location query.
     * 
     * Example: lon1,lat1,lon2,lat2.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param coordinates A point on the earth specified as a longitude and latitude. When you specify this parameter,
     * the user’s location is taken into account and the results returned may be more relevant to the user. Example:
     * &amp;coordinates=lon,lat.
     * @param adminDistrict The country subdivision portion of an address, such as WA.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict2 The county for the structured address, such as King.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict3 The named area for the structured address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param locality The locality portion of an address, such as Seattle.
     * 
     * **If query is given, should not use this parameter.**.
     * @param postalCode The postal code portion of an address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding call along with {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<SearchesGetGeocodingHeaders, GeocodingResponse> getGeocodingWithResponse(Integer top,
        String query, String addressLine, String countryRegion, List<Double> bbox, String view,
        List<Double> coordinates, String adminDistrict, String adminDistrict2, String adminDistrict3, String locality,
        String postalCode, Context context) {
        return getGeocodingWithResponseAsync(top, query, addressLine, countryRegion, bbox, view, coordinates,
            adminDistrict, adminDistrict2, adminDistrict3, locality, postalCode, context).block();
    }

    /**
     * Use to get longitude and latitude coordinates of a street address or name of a place.
     * 
     * 
     * 
     * The `Get Geocoding` API is an HTTP `GET` request that returns the longitude and latitude coordinates of the
     * location being searched.
     * 
     * In many cases, the complete search service might be too much, for instance if you are only interested in
     * traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by
     * hitting the geocoding endpoint with just the address or partial address in question. The geocoding search index
     * will be queried for everything above the street level data. No Point of Interest (POIs) will be returned. Note
     * that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact
     * street addresses or street or intersections as well as higher level geographies such as city centers, counties
     * and states. The response also returns detailed address properties such as street, postal code, municipality, and
     * country/region information.
     * 
     * @param top Maximum number of responses that will be returned. Default: 5, minimum: 1 and maximum: 20.
     * @param query A string that contains information about a location, such as an address or landmark name.
     * @param addressLine The official street line of an address relative to the area, as specified by the locality, or
     * postalCode, properties. Typical use of this element would be to provide a street address or any official address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param countryRegion Signal for the geocoding result to an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) that is specified e.g. FR./
     * 
     * **If query is given, should not use this parameter.**.
     * @param bbox A rectangular area on the earth defined as a bounding box object. The sides of the rectangles are
     * defined by longitude and latitude values. When you specify this parameter, the geographical area is taken into
     * account when computing the results of a location query.
     * 
     * Example: lon1,lat1,lon2,lat2.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param coordinates A point on the earth specified as a longitude and latitude. When you specify this parameter,
     * the user’s location is taken into account and the results returned may be more relevant to the user. Example:
     * &amp;coordinates=lon,lat.
     * @param adminDistrict The country subdivision portion of an address, such as WA.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict2 The county for the structured address, such as King.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict3 The named area for the structured address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param locality The locality portion of an address, such as Seattle.
     * 
     * **If query is given, should not use this parameter.**.
     * @param postalCode The postal code portion of an address.
     * 
     * **If query is given, should not use this parameter.**.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GeocodingResponse getGeocoding(Integer top, String query, String addressLine, String countryRegion,
        List<Double> bbox, String view, List<Double> coordinates, String adminDistrict, String adminDistrict2,
        String adminDistrict3, String locality, String postalCode) {
        return getGeocodingWithResponse(top, query, addressLine, countryRegion, bbox, view, coordinates, adminDistrict,
            adminDistrict2, adminDistrict3, locality, postalCode, Context.NONE).getValue();
    }

    /**
     * Use to get longitude and latitude coordinates of a street address or name of a place.
     * 
     * 
     * 
     * The `Get Geocoding` API is an HTTP `GET` request that returns the longitude and latitude coordinates of the
     * location being searched.
     * 
     * In many cases, the complete search service might be too much, for instance if you are only interested in
     * traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by
     * hitting the geocoding endpoint with just the address or partial address in question. The geocoding search index
     * will be queried for everything above the street level data. No Point of Interest (POIs) will be returned. Note
     * that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact
     * street addresses or street or intersections as well as higher level geographies such as city centers, counties
     * and states. The response also returns detailed address properties such as street, postal code, municipality, and
     * country/region information.
     * 
     * @param top Maximum number of responses that will be returned. Default: 5, minimum: 1 and maximum: 20.
     * @param query A string that contains information about a location, such as an address or landmark name.
     * @param addressLine The official street line of an address relative to the area, as specified by the locality, or
     * postalCode, properties. Typical use of this element would be to provide a street address or any official address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param countryRegion Signal for the geocoding result to an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) that is specified e.g. FR./
     * 
     * **If query is given, should not use this parameter.**.
     * @param bbox A rectangular area on the earth defined as a bounding box object. The sides of the rectangles are
     * defined by longitude and latitude values. When you specify this parameter, the geographical area is taken into
     * account when computing the results of a location query.
     * 
     * Example: lon1,lat1,lon2,lat2.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param coordinates A point on the earth specified as a longitude and latitude. When you specify this parameter,
     * the user’s location is taken into account and the results returned may be more relevant to the user. Example:
     * &amp;coordinates=lon,lat.
     * @param adminDistrict The country subdivision portion of an address, such as WA.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict2 The county for the structured address, such as King.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict3 The named area for the structured address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param locality The locality portion of an address, such as Seattle.
     * 
     * **If query is given, should not use this parameter.**.
     * @param postalCode The postal code portion of an address.
     * 
     * **If query is given, should not use this parameter.**.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding call along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GeocodingResponse>> getGeocodingNoCustomHeadersWithResponseAsync(Integer top, String query,
        String addressLine, String countryRegion, List<Double> bbox, String view, List<Double> coordinates,
        String adminDistrict, String adminDistrict2, String adminDistrict3, String locality, String postalCode) {
        final String accept = "application/geo+json, application/json";
        String bboxConverted
            = JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(bbox, CollectionFormat.CSV);
        String coordinatesConverted
            = JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(coordinates, CollectionFormat.CSV);
        return FluxUtil.withContext(context -> service.getGeocodingNoCustomHeaders(this.client.getHost(),
            this.client.getApiVersion(), this.client.getAcceptLanguage(), top, query, addressLine, countryRegion,
            bboxConverted, view, coordinatesConverted, adminDistrict, adminDistrict2, adminDistrict3, locality,
            postalCode, this.client.getClientId(), accept, context));
    }

    /**
     * Use to get longitude and latitude coordinates of a street address or name of a place.
     * 
     * 
     * 
     * The `Get Geocoding` API is an HTTP `GET` request that returns the longitude and latitude coordinates of the
     * location being searched.
     * 
     * In many cases, the complete search service might be too much, for instance if you are only interested in
     * traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by
     * hitting the geocoding endpoint with just the address or partial address in question. The geocoding search index
     * will be queried for everything above the street level data. No Point of Interest (POIs) will be returned. Note
     * that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact
     * street addresses or street or intersections as well as higher level geographies such as city centers, counties
     * and states. The response also returns detailed address properties such as street, postal code, municipality, and
     * country/region information.
     * 
     * @param top Maximum number of responses that will be returned. Default: 5, minimum: 1 and maximum: 20.
     * @param query A string that contains information about a location, such as an address or landmark name.
     * @param addressLine The official street line of an address relative to the area, as specified by the locality, or
     * postalCode, properties. Typical use of this element would be to provide a street address or any official address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param countryRegion Signal for the geocoding result to an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) that is specified e.g. FR./
     * 
     * **If query is given, should not use this parameter.**.
     * @param bbox A rectangular area on the earth defined as a bounding box object. The sides of the rectangles are
     * defined by longitude and latitude values. When you specify this parameter, the geographical area is taken into
     * account when computing the results of a location query.
     * 
     * Example: lon1,lat1,lon2,lat2.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param coordinates A point on the earth specified as a longitude and latitude. When you specify this parameter,
     * the user’s location is taken into account and the results returned may be more relevant to the user. Example:
     * &amp;coordinates=lon,lat.
     * @param adminDistrict The country subdivision portion of an address, such as WA.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict2 The county for the structured address, such as King.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict3 The named area for the structured address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param locality The locality portion of an address, such as Seattle.
     * 
     * **If query is given, should not use this parameter.**.
     * @param postalCode The postal code portion of an address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding call along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GeocodingResponse>> getGeocodingNoCustomHeadersWithResponseAsync(Integer top, String query,
        String addressLine, String countryRegion, List<Double> bbox, String view, List<Double> coordinates,
        String adminDistrict, String adminDistrict2, String adminDistrict3, String locality, String postalCode,
        Context context) {
        final String accept = "application/geo+json, application/json";
        String bboxConverted
            = JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(bbox, CollectionFormat.CSV);
        String coordinatesConverted
            = JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(coordinates, CollectionFormat.CSV);
        return service.getGeocodingNoCustomHeaders(this.client.getHost(), this.client.getApiVersion(),
            this.client.getAcceptLanguage(), top, query, addressLine, countryRegion, bboxConverted, view,
            coordinatesConverted, adminDistrict, adminDistrict2, adminDistrict3, locality, postalCode,
            this.client.getClientId(), accept, context);
    }

    /**
     * Use to get longitude and latitude coordinates of a street address or name of a place.
     * 
     * 
     * 
     * The `Get Geocoding` API is an HTTP `GET` request that returns the longitude and latitude coordinates of the
     * location being searched.
     * 
     * In many cases, the complete search service might be too much, for instance if you are only interested in
     * traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by
     * hitting the geocoding endpoint with just the address or partial address in question. The geocoding search index
     * will be queried for everything above the street level data. No Point of Interest (POIs) will be returned. Note
     * that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact
     * street addresses or street or intersections as well as higher level geographies such as city centers, counties
     * and states. The response also returns detailed address properties such as street, postal code, municipality, and
     * country/region information.
     * 
     * @param top Maximum number of responses that will be returned. Default: 5, minimum: 1 and maximum: 20.
     * @param query A string that contains information about a location, such as an address or landmark name.
     * @param addressLine The official street line of an address relative to the area, as specified by the locality, or
     * postalCode, properties. Typical use of this element would be to provide a street address or any official address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param countryRegion Signal for the geocoding result to an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) that is specified e.g. FR./
     * 
     * **If query is given, should not use this parameter.**.
     * @param bbox A rectangular area on the earth defined as a bounding box object. The sides of the rectangles are
     * defined by longitude and latitude values. When you specify this parameter, the geographical area is taken into
     * account when computing the results of a location query.
     * 
     * Example: lon1,lat1,lon2,lat2.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param coordinates A point on the earth specified as a longitude and latitude. When you specify this parameter,
     * the user’s location is taken into account and the results returned may be more relevant to the user. Example:
     * &amp;coordinates=lon,lat.
     * @param adminDistrict The country subdivision portion of an address, such as WA.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict2 The county for the structured address, such as King.
     * 
     * **If query is given, should not use this parameter.**.
     * @param adminDistrict3 The named area for the structured address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param locality The locality portion of an address, such as Seattle.
     * 
     * **If query is given, should not use this parameter.**.
     * @param postalCode The postal code portion of an address.
     * 
     * **If query is given, should not use this parameter.**.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding call along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GeocodingResponse> getGeocodingNoCustomHeadersWithResponse(Integer top, String query,
        String addressLine, String countryRegion, List<Double> bbox, String view, List<Double> coordinates,
        String adminDistrict, String adminDistrict2, String adminDistrict3, String locality, String postalCode,
        Context context) {
        return getGeocodingNoCustomHeadersWithResponseAsync(top, query, addressLine, countryRegion, bbox, view,
            coordinates, adminDistrict, adminDistrict2, adminDistrict3, locality, postalCode, context).block();
    }

    /**
     * Use to send a batch of queries to the [Geocoding](/rest/api/maps/search/get-geocoding) API in a single request.
     * 
     * 
     * 
     * The `Get Geocoding Batch` API is an HTTP `POST` request that sends batches of up to **100** queries to the
     * [Geocoding](/rest/api/maps/search/get-geocoding) API in a single request.
     * 
     * ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API.
     * ```
     * POST https://atlas.microsoft.com/geocode:batch?api-version=2023-06-01
     * ```
     * ### POST Body for Batch Request
     * To send the _geocoding_ queries you will use a `POST` request where the request body will contain the
     * `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a
     * sample request body containing 2 _geocoding_ queries:
     * 
     * 
     * ```
     * {
     * "batchItems": [
     * {
     * "addressLine": "One, Microsoft Way, Redmond, WA 98052",
     * "top": 2
     * },
     * {
     * "addressLine": "Pike Pl",
     * "adminDistrict": "WA",
     * "locality": "Seattle",
     * "top": 3
     * }
     * ]
     * }
     * ```
     * 
     * A _geocoding_ batchItem object can accept any of the supported _geocoding_ [URI
     * parameters](/rest/api/maps/search/get-geocoding#uri-parameters).
     * 
     * 
     * The batch should contain at least **1** query.
     * 
     * 
     * ### Batch Response Model
     * The batch response contains a `summary` component that indicates the `totalRequests` that were part of the
     * original batch request and `successfulRequests` i.e. queries which were executed successfully. The batch response
     * also includes a `batchItems` array which contains a response for each and every query in the batch request. The
     * `batchItems` will contain the results in the exact same order the original queries were sent in the batch
     * request. Each item is of one of the following types:
     * 
     * - [`GeocodingResponse`](/rest/api/maps/search/get-geocoding#geocodingresponse) - If the query completed
     * successfully.
     * 
     * - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     * 
     * @param geocodingBatchRequestBody The list of address geocoding queries/requests to process. The list can contain
     * a max of 100 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding Batch service call along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GeocodingBatchResponse>>
        getGeocodingBatchWithResponseAsync(GeocodingBatchRequestBody geocodingBatchRequestBody) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getGeocodingBatch(this.client.getHost(),
            this.client.getClientId(), this.client.getApiVersion(), this.client.getAcceptLanguage(),
            geocodingBatchRequestBody, accept, context));
    }

    /**
     * Use to send a batch of queries to the [Geocoding](/rest/api/maps/search/get-geocoding) API in a single request.
     * 
     * 
     * 
     * The `Get Geocoding Batch` API is an HTTP `POST` request that sends batches of up to **100** queries to the
     * [Geocoding](/rest/api/maps/search/get-geocoding) API in a single request.
     * 
     * ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API.
     * ```
     * POST https://atlas.microsoft.com/geocode:batch?api-version=2023-06-01
     * ```
     * ### POST Body for Batch Request
     * To send the _geocoding_ queries you will use a `POST` request where the request body will contain the
     * `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a
     * sample request body containing 2 _geocoding_ queries:
     * 
     * 
     * ```
     * {
     * "batchItems": [
     * {
     * "addressLine": "One, Microsoft Way, Redmond, WA 98052",
     * "top": 2
     * },
     * {
     * "addressLine": "Pike Pl",
     * "adminDistrict": "WA",
     * "locality": "Seattle",
     * "top": 3
     * }
     * ]
     * }
     * ```
     * 
     * A _geocoding_ batchItem object can accept any of the supported _geocoding_ [URI
     * parameters](/rest/api/maps/search/get-geocoding#uri-parameters).
     * 
     * 
     * The batch should contain at least **1** query.
     * 
     * 
     * ### Batch Response Model
     * The batch response contains a `summary` component that indicates the `totalRequests` that were part of the
     * original batch request and `successfulRequests` i.e. queries which were executed successfully. The batch response
     * also includes a `batchItems` array which contains a response for each and every query in the batch request. The
     * `batchItems` will contain the results in the exact same order the original queries were sent in the batch
     * request. Each item is of one of the following types:
     * 
     * - [`GeocodingResponse`](/rest/api/maps/search/get-geocoding#geocodingresponse) - If the query completed
     * successfully.
     * 
     * - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     * 
     * @param geocodingBatchRequestBody The list of address geocoding queries/requests to process. The list can contain
     * a max of 100 queries and must contain at least 1 query.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding Batch service call along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GeocodingBatchResponse>>
        getGeocodingBatchWithResponseAsync(GeocodingBatchRequestBody geocodingBatchRequestBody, Context context) {
        final String accept = "application/json";
        return service.getGeocodingBatch(this.client.getHost(), this.client.getClientId(), this.client.getApiVersion(),
            this.client.getAcceptLanguage(), geocodingBatchRequestBody, accept, context);
    }

    /**
     * Use to send a batch of queries to the [Geocoding](/rest/api/maps/search/get-geocoding) API in a single request.
     * 
     * 
     * 
     * The `Get Geocoding Batch` API is an HTTP `POST` request that sends batches of up to **100** queries to the
     * [Geocoding](/rest/api/maps/search/get-geocoding) API in a single request.
     * 
     * ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API.
     * ```
     * POST https://atlas.microsoft.com/geocode:batch?api-version=2023-06-01
     * ```
     * ### POST Body for Batch Request
     * To send the _geocoding_ queries you will use a `POST` request where the request body will contain the
     * `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a
     * sample request body containing 2 _geocoding_ queries:
     * 
     * 
     * ```
     * {
     * "batchItems": [
     * {
     * "addressLine": "One, Microsoft Way, Redmond, WA 98052",
     * "top": 2
     * },
     * {
     * "addressLine": "Pike Pl",
     * "adminDistrict": "WA",
     * "locality": "Seattle",
     * "top": 3
     * }
     * ]
     * }
     * ```
     * 
     * A _geocoding_ batchItem object can accept any of the supported _geocoding_ [URI
     * parameters](/rest/api/maps/search/get-geocoding#uri-parameters).
     * 
     * 
     * The batch should contain at least **1** query.
     * 
     * 
     * ### Batch Response Model
     * The batch response contains a `summary` component that indicates the `totalRequests` that were part of the
     * original batch request and `successfulRequests` i.e. queries which were executed successfully. The batch response
     * also includes a `batchItems` array which contains a response for each and every query in the batch request. The
     * `batchItems` will contain the results in the exact same order the original queries were sent in the batch
     * request. Each item is of one of the following types:
     * 
     * - [`GeocodingResponse`](/rest/api/maps/search/get-geocoding#geocodingresponse) - If the query completed
     * successfully.
     * 
     * - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     * 
     * @param geocodingBatchRequestBody The list of address geocoding queries/requests to process. The list can contain
     * a max of 100 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding Batch service call on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeocodingBatchResponse> getGeocodingBatchAsync(GeocodingBatchRequestBody geocodingBatchRequestBody) {
        return getGeocodingBatchWithResponseAsync(geocodingBatchRequestBody)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Use to send a batch of queries to the [Geocoding](/rest/api/maps/search/get-geocoding) API in a single request.
     * 
     * 
     * 
     * The `Get Geocoding Batch` API is an HTTP `POST` request that sends batches of up to **100** queries to the
     * [Geocoding](/rest/api/maps/search/get-geocoding) API in a single request.
     * 
     * ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API.
     * ```
     * POST https://atlas.microsoft.com/geocode:batch?api-version=2023-06-01
     * ```
     * ### POST Body for Batch Request
     * To send the _geocoding_ queries you will use a `POST` request where the request body will contain the
     * `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a
     * sample request body containing 2 _geocoding_ queries:
     * 
     * 
     * ```
     * {
     * "batchItems": [
     * {
     * "addressLine": "One, Microsoft Way, Redmond, WA 98052",
     * "top": 2
     * },
     * {
     * "addressLine": "Pike Pl",
     * "adminDistrict": "WA",
     * "locality": "Seattle",
     * "top": 3
     * }
     * ]
     * }
     * ```
     * 
     * A _geocoding_ batchItem object can accept any of the supported _geocoding_ [URI
     * parameters](/rest/api/maps/search/get-geocoding#uri-parameters).
     * 
     * 
     * The batch should contain at least **1** query.
     * 
     * 
     * ### Batch Response Model
     * The batch response contains a `summary` component that indicates the `totalRequests` that were part of the
     * original batch request and `successfulRequests` i.e. queries which were executed successfully. The batch response
     * also includes a `batchItems` array which contains a response for each and every query in the batch request. The
     * `batchItems` will contain the results in the exact same order the original queries were sent in the batch
     * request. Each item is of one of the following types:
     * 
     * - [`GeocodingResponse`](/rest/api/maps/search/get-geocoding#geocodingresponse) - If the query completed
     * successfully.
     * 
     * - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     * 
     * @param geocodingBatchRequestBody The list of address geocoding queries/requests to process. The list can contain
     * a max of 100 queries and must contain at least 1 query.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding Batch service call on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeocodingBatchResponse> getGeocodingBatchAsync(GeocodingBatchRequestBody geocodingBatchRequestBody,
        Context context) {
        return getGeocodingBatchWithResponseAsync(geocodingBatchRequestBody, context)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Use to send a batch of queries to the [Geocoding](/rest/api/maps/search/get-geocoding) API in a single request.
     * 
     * 
     * 
     * The `Get Geocoding Batch` API is an HTTP `POST` request that sends batches of up to **100** queries to the
     * [Geocoding](/rest/api/maps/search/get-geocoding) API in a single request.
     * 
     * ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API.
     * ```
     * POST https://atlas.microsoft.com/geocode:batch?api-version=2023-06-01
     * ```
     * ### POST Body for Batch Request
     * To send the _geocoding_ queries you will use a `POST` request where the request body will contain the
     * `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a
     * sample request body containing 2 _geocoding_ queries:
     * 
     * 
     * ```
     * {
     * "batchItems": [
     * {
     * "addressLine": "One, Microsoft Way, Redmond, WA 98052",
     * "top": 2
     * },
     * {
     * "addressLine": "Pike Pl",
     * "adminDistrict": "WA",
     * "locality": "Seattle",
     * "top": 3
     * }
     * ]
     * }
     * ```
     * 
     * A _geocoding_ batchItem object can accept any of the supported _geocoding_ [URI
     * parameters](/rest/api/maps/search/get-geocoding#uri-parameters).
     * 
     * 
     * The batch should contain at least **1** query.
     * 
     * 
     * ### Batch Response Model
     * The batch response contains a `summary` component that indicates the `totalRequests` that were part of the
     * original batch request and `successfulRequests` i.e. queries which were executed successfully. The batch response
     * also includes a `batchItems` array which contains a response for each and every query in the batch request. The
     * `batchItems` will contain the results in the exact same order the original queries were sent in the batch
     * request. Each item is of one of the following types:
     * 
     * - [`GeocodingResponse`](/rest/api/maps/search/get-geocoding#geocodingresponse) - If the query completed
     * successfully.
     * 
     * - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     * 
     * @param geocodingBatchRequestBody The list of address geocoding queries/requests to process. The list can contain
     * a max of 100 queries and must contain at least 1 query.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding Batch service call along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GeocodingBatchResponse>
        getGeocodingBatchWithResponse(GeocodingBatchRequestBody geocodingBatchRequestBody, Context context) {
        return getGeocodingBatchWithResponseAsync(geocodingBatchRequestBody, context).block();
    }

    /**
     * Use to send a batch of queries to the [Geocoding](/rest/api/maps/search/get-geocoding) API in a single request.
     * 
     * 
     * 
     * The `Get Geocoding Batch` API is an HTTP `POST` request that sends batches of up to **100** queries to the
     * [Geocoding](/rest/api/maps/search/get-geocoding) API in a single request.
     * 
     * ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API.
     * ```
     * POST https://atlas.microsoft.com/geocode:batch?api-version=2023-06-01
     * ```
     * ### POST Body for Batch Request
     * To send the _geocoding_ queries you will use a `POST` request where the request body will contain the
     * `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a
     * sample request body containing 2 _geocoding_ queries:
     * 
     * 
     * ```
     * {
     * "batchItems": [
     * {
     * "addressLine": "One, Microsoft Way, Redmond, WA 98052",
     * "top": 2
     * },
     * {
     * "addressLine": "Pike Pl",
     * "adminDistrict": "WA",
     * "locality": "Seattle",
     * "top": 3
     * }
     * ]
     * }
     * ```
     * 
     * A _geocoding_ batchItem object can accept any of the supported _geocoding_ [URI
     * parameters](/rest/api/maps/search/get-geocoding#uri-parameters).
     * 
     * 
     * The batch should contain at least **1** query.
     * 
     * 
     * ### Batch Response Model
     * The batch response contains a `summary` component that indicates the `totalRequests` that were part of the
     * original batch request and `successfulRequests` i.e. queries which were executed successfully. The batch response
     * also includes a `batchItems` array which contains a response for each and every query in the batch request. The
     * `batchItems` will contain the results in the exact same order the original queries were sent in the batch
     * request. Each item is of one of the following types:
     * 
     * - [`GeocodingResponse`](/rest/api/maps/search/get-geocoding#geocodingresponse) - If the query completed
     * successfully.
     * 
     * - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     * 
     * @param geocodingBatchRequestBody The list of address geocoding queries/requests to process. The list can contain
     * a max of 100 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GeocodingBatchResponse getGeocodingBatch(GeocodingBatchRequestBody geocodingBatchRequestBody) {
        return getGeocodingBatchWithResponse(geocodingBatchRequestBody, Context.NONE).getValue();
    }

    /**
     * Use to get polygon data of a geographical area shape such as a city or a country region.
     * 
     * 
     * 
     * The `Get Polygon` API is an HTTP `GET` request that supplies polygon data of a geographical area outline such as
     * a city or a country region.
     * 
     * @param coordinates A point on the earth specified as a longitude and latitude. Example: &amp;coordinates=lon,lat.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param resultType The geopolitical concept to return a boundary for. If not specified, the default is
     * `countryRegion` result type.
     * @param resolution Resolution determines the amount of points to send back. If not specified, the default is
     * medium resolution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return `GeoJSON GeocodingFeature` object that describe the boundaries of a geographical area along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boundary>> getPolygonWithResponseAsync(List<Double> coordinates, String view,
        BoundaryResultTypeEnum resultType, ResolutionEnum resolution) {
        final String accept = "application/geo+json, application/json";
        String coordinatesConverted
            = JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(coordinates, CollectionFormat.CSV);
        return FluxUtil.withContext(
            context -> service.getPolygon(this.client.getHost(), this.client.getClientId(), this.client.getApiVersion(),
                this.client.getAcceptLanguage(), coordinatesConverted, view, resultType, resolution, accept, context));
    }

    /**
     * Use to get polygon data of a geographical area shape such as a city or a country region.
     * 
     * 
     * 
     * The `Get Polygon` API is an HTTP `GET` request that supplies polygon data of a geographical area outline such as
     * a city or a country region.
     * 
     * @param coordinates A point on the earth specified as a longitude and latitude. Example: &amp;coordinates=lon,lat.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param resultType The geopolitical concept to return a boundary for. If not specified, the default is
     * `countryRegion` result type.
     * @param resolution Resolution determines the amount of points to send back. If not specified, the default is
     * medium resolution.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return `GeoJSON GeocodingFeature` object that describe the boundaries of a geographical area along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boundary>> getPolygonWithResponseAsync(List<Double> coordinates, String view,
        BoundaryResultTypeEnum resultType, ResolutionEnum resolution, Context context) {
        final String accept = "application/geo+json, application/json";
        String coordinatesConverted
            = JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(coordinates, CollectionFormat.CSV);
        return service.getPolygon(this.client.getHost(), this.client.getClientId(), this.client.getApiVersion(),
            this.client.getAcceptLanguage(), coordinatesConverted, view, resultType, resolution, accept, context);
    }

    /**
     * Use to get polygon data of a geographical area shape such as a city or a country region.
     * 
     * 
     * 
     * The `Get Polygon` API is an HTTP `GET` request that supplies polygon data of a geographical area outline such as
     * a city or a country region.
     * 
     * @param coordinates A point on the earth specified as a longitude and latitude. Example: &amp;coordinates=lon,lat.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param resultType The geopolitical concept to return a boundary for. If not specified, the default is
     * `countryRegion` result type.
     * @param resolution Resolution determines the amount of points to send back. If not specified, the default is
     * medium resolution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return `GeoJSON GeocodingFeature` object that describe the boundaries of a geographical area on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boundary> getPolygonAsync(List<Double> coordinates, String view, BoundaryResultTypeEnum resultType,
        ResolutionEnum resolution) {
        return getPolygonWithResponseAsync(coordinates, view, resultType, resolution)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Use to get polygon data of a geographical area shape such as a city or a country region.
     * 
     * 
     * 
     * The `Get Polygon` API is an HTTP `GET` request that supplies polygon data of a geographical area outline such as
     * a city or a country region.
     * 
     * @param coordinates A point on the earth specified as a longitude and latitude. Example: &amp;coordinates=lon,lat.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param resultType The geopolitical concept to return a boundary for. If not specified, the default is
     * `countryRegion` result type.
     * @param resolution Resolution determines the amount of points to send back. If not specified, the default is
     * medium resolution.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return `GeoJSON GeocodingFeature` object that describe the boundaries of a geographical area on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boundary> getPolygonAsync(List<Double> coordinates, String view, BoundaryResultTypeEnum resultType,
        ResolutionEnum resolution, Context context) {
        return getPolygonWithResponseAsync(coordinates, view, resultType, resolution, context)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Use to get polygon data of a geographical area shape such as a city or a country region.
     * 
     * 
     * 
     * The `Get Polygon` API is an HTTP `GET` request that supplies polygon data of a geographical area outline such as
     * a city or a country region.
     * 
     * @param coordinates A point on the earth specified as a longitude and latitude. Example: &amp;coordinates=lon,lat.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param resultType The geopolitical concept to return a boundary for. If not specified, the default is
     * `countryRegion` result type.
     * @param resolution Resolution determines the amount of points to send back. If not specified, the default is
     * medium resolution.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return `GeoJSON GeocodingFeature` object that describe the boundaries of a geographical area along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Boundary> getPolygonWithResponse(List<Double> coordinates, String view,
        BoundaryResultTypeEnum resultType, ResolutionEnum resolution, Context context) {
        return getPolygonWithResponseAsync(coordinates, view, resultType, resolution, context).block();
    }

    /**
     * Use to get polygon data of a geographical area shape such as a city or a country region.
     * 
     * 
     * 
     * The `Get Polygon` API is an HTTP `GET` request that supplies polygon data of a geographical area outline such as
     * a city or a country region.
     * 
     * @param coordinates A point on the earth specified as a longitude and latitude. Example: &amp;coordinates=lon,lat.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param resultType The geopolitical concept to return a boundary for. If not specified, the default is
     * `countryRegion` result type.
     * @param resolution Resolution determines the amount of points to send back. If not specified, the default is
     * medium resolution.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return `GeoJSON GeocodingFeature` object that describe the boundaries of a geographical area.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Boundary getPolygon(List<Double> coordinates, String view, BoundaryResultTypeEnum resultType,
        ResolutionEnum resolution) {
        return getPolygonWithResponse(coordinates, view, resultType, resolution, Context.NONE).getValue();
    }

    /**
     * Use to get a street address and location info from longitude and latitude coordinates.
     * 
     * 
     * 
     * The `Get Reverse Geocoding` API is an HTTP `GET` request used to translate a coordinate (example: 37.786505,
     * -122.3862) into a human understandable street address. Useful in tracking applications where you receive a GPS
     * feed from the device or asset and wish to know the address associated with the coordinates. This endpoint will
     * return address information for a given coordinate.
     * 
     * @param coordinates The coordinates of the location that you want to reverse geocode. Example:
     * &amp;coordinates=lon,lat.
     * @param resultTypes Specify entity types that you want in the response. Only the types you specify will be
     * returned. If the point cannot be mapped to the entity types you specify, no location information is returned in
     * the response.
     * Default value is all possible entities.
     * A comma separated list of entity types selected from the following options.
     * 
     * - Address
     * - Neighborhood
     * - PopulatedPlace
     * - Postcode1
     * - AdminDivision1
     * - AdminDivision2
     * - CountryRegion
     * 
     * These entity types are ordered from the most specific entity to the least specific entity. When entities of more
     * than one entity type are found, only the most specific entity is returned. For example, if you specify Address
     * and AdminDistrict1 as entity types and entities were found for both types, only the Address entity information is
     * returned in the response.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding call along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GeocodingResponse>> getReverseGeocodingWithResponseAsync(List<Double> coordinates,
        List<ReverseGeocodingResultTypeEnum> resultTypes, String view) {
        final String accept = "application/geo+json, application/json";
        String coordinatesConverted
            = JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(coordinates, CollectionFormat.CSV);
        String resultTypesConverted = (resultTypes == null)
            ? null
            : resultTypes.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        return FluxUtil.withContext(context -> service.getReverseGeocoding(this.client.getHost(),
            this.client.getClientId(), this.client.getApiVersion(), this.client.getAcceptLanguage(),
            coordinatesConverted, resultTypesConverted, view, accept, context));
    }

    /**
     * Use to get a street address and location info from longitude and latitude coordinates.
     * 
     * 
     * 
     * The `Get Reverse Geocoding` API is an HTTP `GET` request used to translate a coordinate (example: 37.786505,
     * -122.3862) into a human understandable street address. Useful in tracking applications where you receive a GPS
     * feed from the device or asset and wish to know the address associated with the coordinates. This endpoint will
     * return address information for a given coordinate.
     * 
     * @param coordinates The coordinates of the location that you want to reverse geocode. Example:
     * &amp;coordinates=lon,lat.
     * @param resultTypes Specify entity types that you want in the response. Only the types you specify will be
     * returned. If the point cannot be mapped to the entity types you specify, no location information is returned in
     * the response.
     * Default value is all possible entities.
     * A comma separated list of entity types selected from the following options.
     * 
     * - Address
     * - Neighborhood
     * - PopulatedPlace
     * - Postcode1
     * - AdminDivision1
     * - AdminDivision2
     * - CountryRegion
     * 
     * These entity types are ordered from the most specific entity to the least specific entity. When entities of more
     * than one entity type are found, only the most specific entity is returned. For example, if you specify Address
     * and AdminDistrict1 as entity types and entities were found for both types, only the Address entity information is
     * returned in the response.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding call along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GeocodingResponse>> getReverseGeocodingWithResponseAsync(List<Double> coordinates,
        List<ReverseGeocodingResultTypeEnum> resultTypes, String view, Context context) {
        final String accept = "application/geo+json, application/json";
        String coordinatesConverted
            = JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(coordinates, CollectionFormat.CSV);
        String resultTypesConverted = (resultTypes == null)
            ? null
            : resultTypes.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        return service.getReverseGeocoding(this.client.getHost(), this.client.getClientId(),
            this.client.getApiVersion(), this.client.getAcceptLanguage(), coordinatesConverted, resultTypesConverted,
            view, accept, context);
    }

    /**
     * Use to get a street address and location info from longitude and latitude coordinates.
     * 
     * 
     * 
     * The `Get Reverse Geocoding` API is an HTTP `GET` request used to translate a coordinate (example: 37.786505,
     * -122.3862) into a human understandable street address. Useful in tracking applications where you receive a GPS
     * feed from the device or asset and wish to know the address associated with the coordinates. This endpoint will
     * return address information for a given coordinate.
     * 
     * @param coordinates The coordinates of the location that you want to reverse geocode. Example:
     * &amp;coordinates=lon,lat.
     * @param resultTypes Specify entity types that you want in the response. Only the types you specify will be
     * returned. If the point cannot be mapped to the entity types you specify, no location information is returned in
     * the response.
     * Default value is all possible entities.
     * A comma separated list of entity types selected from the following options.
     * 
     * - Address
     * - Neighborhood
     * - PopulatedPlace
     * - Postcode1
     * - AdminDivision1
     * - AdminDivision2
     * - CountryRegion
     * 
     * These entity types are ordered from the most specific entity to the least specific entity. When entities of more
     * than one entity type are found, only the most specific entity is returned. For example, if you specify Address
     * and AdminDistrict1 as entity types and entities were found for both types, only the Address entity information is
     * returned in the response.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding call on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeocodingResponse> getReverseGeocodingAsync(List<Double> coordinates,
        List<ReverseGeocodingResultTypeEnum> resultTypes, String view) {
        return getReverseGeocodingWithResponseAsync(coordinates, resultTypes, view)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Use to get a street address and location info from longitude and latitude coordinates.
     * 
     * 
     * 
     * The `Get Reverse Geocoding` API is an HTTP `GET` request used to translate a coordinate (example: 37.786505,
     * -122.3862) into a human understandable street address. Useful in tracking applications where you receive a GPS
     * feed from the device or asset and wish to know the address associated with the coordinates. This endpoint will
     * return address information for a given coordinate.
     * 
     * @param coordinates The coordinates of the location that you want to reverse geocode. Example:
     * &amp;coordinates=lon,lat.
     * @param resultTypes Specify entity types that you want in the response. Only the types you specify will be
     * returned. If the point cannot be mapped to the entity types you specify, no location information is returned in
     * the response.
     * Default value is all possible entities.
     * A comma separated list of entity types selected from the following options.
     * 
     * - Address
     * - Neighborhood
     * - PopulatedPlace
     * - Postcode1
     * - AdminDivision1
     * - AdminDivision2
     * - CountryRegion
     * 
     * These entity types are ordered from the most specific entity to the least specific entity. When entities of more
     * than one entity type are found, only the most specific entity is returned. For example, if you specify Address
     * and AdminDistrict1 as entity types and entities were found for both types, only the Address entity information is
     * returned in the response.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding call on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeocodingResponse> getReverseGeocodingAsync(List<Double> coordinates,
        List<ReverseGeocodingResultTypeEnum> resultTypes, String view, Context context) {
        return getReverseGeocodingWithResponseAsync(coordinates, resultTypes, view, context)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Use to get a street address and location info from longitude and latitude coordinates.
     * 
     * 
     * 
     * The `Get Reverse Geocoding` API is an HTTP `GET` request used to translate a coordinate (example: 37.786505,
     * -122.3862) into a human understandable street address. Useful in tracking applications where you receive a GPS
     * feed from the device or asset and wish to know the address associated with the coordinates. This endpoint will
     * return address information for a given coordinate.
     * 
     * @param coordinates The coordinates of the location that you want to reverse geocode. Example:
     * &amp;coordinates=lon,lat.
     * @param resultTypes Specify entity types that you want in the response. Only the types you specify will be
     * returned. If the point cannot be mapped to the entity types you specify, no location information is returned in
     * the response.
     * Default value is all possible entities.
     * A comma separated list of entity types selected from the following options.
     * 
     * - Address
     * - Neighborhood
     * - PopulatedPlace
     * - Postcode1
     * - AdminDivision1
     * - AdminDivision2
     * - CountryRegion
     * 
     * These entity types are ordered from the most specific entity to the least specific entity. When entities of more
     * than one entity type are found, only the most specific entity is returned. For example, if you specify Address
     * and AdminDistrict1 as entity types and entities were found for both types, only the Address entity information is
     * returned in the response.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding call along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GeocodingResponse> getReverseGeocodingWithResponse(List<Double> coordinates,
        List<ReverseGeocodingResultTypeEnum> resultTypes, String view, Context context) {
        return getReverseGeocodingWithResponseAsync(coordinates, resultTypes, view, context).block();
    }

    /**
     * Use to get a street address and location info from longitude and latitude coordinates.
     * 
     * 
     * 
     * The `Get Reverse Geocoding` API is an HTTP `GET` request used to translate a coordinate (example: 37.786505,
     * -122.3862) into a human understandable street address. Useful in tracking applications where you receive a GPS
     * feed from the device or asset and wish to know the address associated with the coordinates. This endpoint will
     * return address information for a given coordinate.
     * 
     * @param coordinates The coordinates of the location that you want to reverse geocode. Example:
     * &amp;coordinates=lon,lat.
     * @param resultTypes Specify entity types that you want in the response. Only the types you specify will be
     * returned. If the point cannot be mapped to the entity types you specify, no location information is returned in
     * the response.
     * Default value is all possible entities.
     * A comma separated list of entity types selected from the following options.
     * 
     * - Address
     * - Neighborhood
     * - PopulatedPlace
     * - Postcode1
     * - AdminDivision1
     * - AdminDivision2
     * - CountryRegion
     * 
     * These entity types are ordered from the most specific entity to the least specific entity. When entities of more
     * than one entity type are found, only the most specific entity is returned. For example, if you specify Address
     * and AdminDistrict1 as entity types and entities were found for both types, only the Address entity information is
     * returned in the response.
     * @param view A string that represents an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region. By default, the View parameter is set to “Auto” even if you haven’t
     * defined it in the request.
     * 
     * Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available
     * Views.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GeocodingResponse getReverseGeocoding(List<Double> coordinates,
        List<ReverseGeocodingResultTypeEnum> resultTypes, String view) {
        return getReverseGeocodingWithResponse(coordinates, resultTypes, view, Context.NONE).getValue();
    }

    /**
     * Use to send a batch of queries to the [Reverse Geocoding](/rest/api/maps/search/get-reverse-geocoding) API in a
     * single request.
     * 
     * 
     * 
     * The `Get Reverse Geocoding Batch` API is an HTTP `POST` request that sends batches of up to **100** queries to
     * [Reverse Geocoding](/rest/api/maps/search/get-reverse-geocoding) API using a single request.
     * 
     * ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API.
     * ```
     * POST https://atlas.microsoft.com/reverseGeocode:batch?api-version=2023-06-01
     * ```
     * ### POST Body for Batch Request
     * To send the _reverse geocoding_ queries you will use a `POST` request where the request body will contain the
     * `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a
     * sample request body containing 2 _reverse geocoding_ queries:
     * 
     * 
     * ```
     * {
     * "batchItems": [
     * {
     * "coordinates": [-122.128275, 47.639429],
     * "resultTypes": ["Address", "PopulatedPlace"]
     * },
     * {
     * "coordinates": [-122.341979399674, 47.6095253501216]
     * }
     * ]
     * }
     * ```
     * 
     * A _reverse geocoding_ batchItem object can accept any of the supported _reverse geocoding_ [URI
     * parameters](/rest/api/maps/search/get-reverse-geocoding#uri-parameters).
     * 
     * 
     * The batch should contain at least **1** query.
     * 
     * 
     * ### Batch Response Model
     * The batch response contains a `summary` component that indicates the `totalRequests` that were part of the
     * original batch request and `successfulRequests` i.e. queries which were executed successfully. The batch response
     * also includes a `batchItems` array which contains a response for each and every query in the batch request. The
     * `batchItems` will contain the results in the exact same order the original queries were sent in the batch
     * request. Each item is of one of the following types:
     * 
     * - [`GeocodingResponse`](/rest/api/maps/search/get-reverse-geocoding#geocodingresponse) - If the query completed
     * successfully.
     * 
     * - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     * 
     * @param reverseGeocodingBatchRequestBody The list of reverse geocoding queries/requests to process. The list can
     * contain a max of 100 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding Batch service call along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GeocodingBatchResponse>>
        getReverseGeocodingBatchWithResponseAsync(ReverseGeocodingBatchRequestBody reverseGeocodingBatchRequestBody) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getReverseGeocodingBatch(this.client.getHost(),
            this.client.getClientId(), this.client.getApiVersion(), this.client.getAcceptLanguage(),
            reverseGeocodingBatchRequestBody, accept, context));
    }

    /**
     * Use to send a batch of queries to the [Reverse Geocoding](/rest/api/maps/search/get-reverse-geocoding) API in a
     * single request.
     * 
     * 
     * 
     * The `Get Reverse Geocoding Batch` API is an HTTP `POST` request that sends batches of up to **100** queries to
     * [Reverse Geocoding](/rest/api/maps/search/get-reverse-geocoding) API using a single request.
     * 
     * ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API.
     * ```
     * POST https://atlas.microsoft.com/reverseGeocode:batch?api-version=2023-06-01
     * ```
     * ### POST Body for Batch Request
     * To send the _reverse geocoding_ queries you will use a `POST` request where the request body will contain the
     * `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a
     * sample request body containing 2 _reverse geocoding_ queries:
     * 
     * 
     * ```
     * {
     * "batchItems": [
     * {
     * "coordinates": [-122.128275, 47.639429],
     * "resultTypes": ["Address", "PopulatedPlace"]
     * },
     * {
     * "coordinates": [-122.341979399674, 47.6095253501216]
     * }
     * ]
     * }
     * ```
     * 
     * A _reverse geocoding_ batchItem object can accept any of the supported _reverse geocoding_ [URI
     * parameters](/rest/api/maps/search/get-reverse-geocoding#uri-parameters).
     * 
     * 
     * The batch should contain at least **1** query.
     * 
     * 
     * ### Batch Response Model
     * The batch response contains a `summary` component that indicates the `totalRequests` that were part of the
     * original batch request and `successfulRequests` i.e. queries which were executed successfully. The batch response
     * also includes a `batchItems` array which contains a response for each and every query in the batch request. The
     * `batchItems` will contain the results in the exact same order the original queries were sent in the batch
     * request. Each item is of one of the following types:
     * 
     * - [`GeocodingResponse`](/rest/api/maps/search/get-reverse-geocoding#geocodingresponse) - If the query completed
     * successfully.
     * 
     * - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     * 
     * @param reverseGeocodingBatchRequestBody The list of reverse geocoding queries/requests to process. The list can
     * contain a max of 100 queries and must contain at least 1 query.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding Batch service call along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GeocodingBatchResponse>> getReverseGeocodingBatchWithResponseAsync(
        ReverseGeocodingBatchRequestBody reverseGeocodingBatchRequestBody, Context context) {
        final String accept = "application/json";
        return service.getReverseGeocodingBatch(this.client.getHost(), this.client.getClientId(),
            this.client.getApiVersion(), this.client.getAcceptLanguage(), reverseGeocodingBatchRequestBody, accept,
            context);
    }

    /**
     * Use to send a batch of queries to the [Reverse Geocoding](/rest/api/maps/search/get-reverse-geocoding) API in a
     * single request.
     * 
     * 
     * 
     * The `Get Reverse Geocoding Batch` API is an HTTP `POST` request that sends batches of up to **100** queries to
     * [Reverse Geocoding](/rest/api/maps/search/get-reverse-geocoding) API using a single request.
     * 
     * ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API.
     * ```
     * POST https://atlas.microsoft.com/reverseGeocode:batch?api-version=2023-06-01
     * ```
     * ### POST Body for Batch Request
     * To send the _reverse geocoding_ queries you will use a `POST` request where the request body will contain the
     * `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a
     * sample request body containing 2 _reverse geocoding_ queries:
     * 
     * 
     * ```
     * {
     * "batchItems": [
     * {
     * "coordinates": [-122.128275, 47.639429],
     * "resultTypes": ["Address", "PopulatedPlace"]
     * },
     * {
     * "coordinates": [-122.341979399674, 47.6095253501216]
     * }
     * ]
     * }
     * ```
     * 
     * A _reverse geocoding_ batchItem object can accept any of the supported _reverse geocoding_ [URI
     * parameters](/rest/api/maps/search/get-reverse-geocoding#uri-parameters).
     * 
     * 
     * The batch should contain at least **1** query.
     * 
     * 
     * ### Batch Response Model
     * The batch response contains a `summary` component that indicates the `totalRequests` that were part of the
     * original batch request and `successfulRequests` i.e. queries which were executed successfully. The batch response
     * also includes a `batchItems` array which contains a response for each and every query in the batch request. The
     * `batchItems` will contain the results in the exact same order the original queries were sent in the batch
     * request. Each item is of one of the following types:
     * 
     * - [`GeocodingResponse`](/rest/api/maps/search/get-reverse-geocoding#geocodingresponse) - If the query completed
     * successfully.
     * 
     * - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     * 
     * @param reverseGeocodingBatchRequestBody The list of reverse geocoding queries/requests to process. The list can
     * contain a max of 100 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding Batch service call on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeocodingBatchResponse>
        getReverseGeocodingBatchAsync(ReverseGeocodingBatchRequestBody reverseGeocodingBatchRequestBody) {
        return getReverseGeocodingBatchWithResponseAsync(reverseGeocodingBatchRequestBody)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Use to send a batch of queries to the [Reverse Geocoding](/rest/api/maps/search/get-reverse-geocoding) API in a
     * single request.
     * 
     * 
     * 
     * The `Get Reverse Geocoding Batch` API is an HTTP `POST` request that sends batches of up to **100** queries to
     * [Reverse Geocoding](/rest/api/maps/search/get-reverse-geocoding) API using a single request.
     * 
     * ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API.
     * ```
     * POST https://atlas.microsoft.com/reverseGeocode:batch?api-version=2023-06-01
     * ```
     * ### POST Body for Batch Request
     * To send the _reverse geocoding_ queries you will use a `POST` request where the request body will contain the
     * `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a
     * sample request body containing 2 _reverse geocoding_ queries:
     * 
     * 
     * ```
     * {
     * "batchItems": [
     * {
     * "coordinates": [-122.128275, 47.639429],
     * "resultTypes": ["Address", "PopulatedPlace"]
     * },
     * {
     * "coordinates": [-122.341979399674, 47.6095253501216]
     * }
     * ]
     * }
     * ```
     * 
     * A _reverse geocoding_ batchItem object can accept any of the supported _reverse geocoding_ [URI
     * parameters](/rest/api/maps/search/get-reverse-geocoding#uri-parameters).
     * 
     * 
     * The batch should contain at least **1** query.
     * 
     * 
     * ### Batch Response Model
     * The batch response contains a `summary` component that indicates the `totalRequests` that were part of the
     * original batch request and `successfulRequests` i.e. queries which were executed successfully. The batch response
     * also includes a `batchItems` array which contains a response for each and every query in the batch request. The
     * `batchItems` will contain the results in the exact same order the original queries were sent in the batch
     * request. Each item is of one of the following types:
     * 
     * - [`GeocodingResponse`](/rest/api/maps/search/get-reverse-geocoding#geocodingresponse) - If the query completed
     * successfully.
     * 
     * - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     * 
     * @param reverseGeocodingBatchRequestBody The list of reverse geocoding queries/requests to process. The list can
     * contain a max of 100 queries and must contain at least 1 query.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding Batch service call on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeocodingBatchResponse> getReverseGeocodingBatchAsync(
        ReverseGeocodingBatchRequestBody reverseGeocodingBatchRequestBody, Context context) {
        return getReverseGeocodingBatchWithResponseAsync(reverseGeocodingBatchRequestBody, context)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Use to send a batch of queries to the [Reverse Geocoding](/rest/api/maps/search/get-reverse-geocoding) API in a
     * single request.
     * 
     * 
     * 
     * The `Get Reverse Geocoding Batch` API is an HTTP `POST` request that sends batches of up to **100** queries to
     * [Reverse Geocoding](/rest/api/maps/search/get-reverse-geocoding) API using a single request.
     * 
     * ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API.
     * ```
     * POST https://atlas.microsoft.com/reverseGeocode:batch?api-version=2023-06-01
     * ```
     * ### POST Body for Batch Request
     * To send the _reverse geocoding_ queries you will use a `POST` request where the request body will contain the
     * `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a
     * sample request body containing 2 _reverse geocoding_ queries:
     * 
     * 
     * ```
     * {
     * "batchItems": [
     * {
     * "coordinates": [-122.128275, 47.639429],
     * "resultTypes": ["Address", "PopulatedPlace"]
     * },
     * {
     * "coordinates": [-122.341979399674, 47.6095253501216]
     * }
     * ]
     * }
     * ```
     * 
     * A _reverse geocoding_ batchItem object can accept any of the supported _reverse geocoding_ [URI
     * parameters](/rest/api/maps/search/get-reverse-geocoding#uri-parameters).
     * 
     * 
     * The batch should contain at least **1** query.
     * 
     * 
     * ### Batch Response Model
     * The batch response contains a `summary` component that indicates the `totalRequests` that were part of the
     * original batch request and `successfulRequests` i.e. queries which were executed successfully. The batch response
     * also includes a `batchItems` array which contains a response for each and every query in the batch request. The
     * `batchItems` will contain the results in the exact same order the original queries were sent in the batch
     * request. Each item is of one of the following types:
     * 
     * - [`GeocodingResponse`](/rest/api/maps/search/get-reverse-geocoding#geocodingresponse) - If the query completed
     * successfully.
     * 
     * - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     * 
     * @param reverseGeocodingBatchRequestBody The list of reverse geocoding queries/requests to process. The list can
     * contain a max of 100 queries and must contain at least 1 query.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding Batch service call along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GeocodingBatchResponse> getReverseGeocodingBatchWithResponse(
        ReverseGeocodingBatchRequestBody reverseGeocodingBatchRequestBody, Context context) {
        return getReverseGeocodingBatchWithResponseAsync(reverseGeocodingBatchRequestBody, context).block();
    }

    /**
     * Use to send a batch of queries to the [Reverse Geocoding](/rest/api/maps/search/get-reverse-geocoding) API in a
     * single request.
     * 
     * 
     * 
     * The `Get Reverse Geocoding Batch` API is an HTTP `POST` request that sends batches of up to **100** queries to
     * [Reverse Geocoding](/rest/api/maps/search/get-reverse-geocoding) API using a single request.
     * 
     * ### Submit Synchronous Batch Request
     * The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will
     * respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later.
     * The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The
     * number of batch items is limited to **100** for this API.
     * ```
     * POST https://atlas.microsoft.com/reverseGeocode:batch?api-version=2023-06-01
     * ```
     * ### POST Body for Batch Request
     * To send the _reverse geocoding_ queries you will use a `POST` request where the request body will contain the
     * `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a
     * sample request body containing 2 _reverse geocoding_ queries:
     * 
     * 
     * ```
     * {
     * "batchItems": [
     * {
     * "coordinates": [-122.128275, 47.639429],
     * "resultTypes": ["Address", "PopulatedPlace"]
     * },
     * {
     * "coordinates": [-122.341979399674, 47.6095253501216]
     * }
     * ]
     * }
     * ```
     * 
     * A _reverse geocoding_ batchItem object can accept any of the supported _reverse geocoding_ [URI
     * parameters](/rest/api/maps/search/get-reverse-geocoding#uri-parameters).
     * 
     * 
     * The batch should contain at least **1** query.
     * 
     * 
     * ### Batch Response Model
     * The batch response contains a `summary` component that indicates the `totalRequests` that were part of the
     * original batch request and `successfulRequests` i.e. queries which were executed successfully. The batch response
     * also includes a `batchItems` array which contains a response for each and every query in the batch request. The
     * `batchItems` will contain the results in the exact same order the original queries were sent in the batch
     * request. Each item is of one of the following types:
     * 
     * - [`GeocodingResponse`](/rest/api/maps/search/get-reverse-geocoding#geocodingresponse) - If the query completed
     * successfully.
     * 
     * - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
     * 
     * @param reverseGeocodingBatchRequestBody The list of reverse geocoding queries/requests to process. The list can
     * contain a max of 100 queries and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Geocoding Batch service call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GeocodingBatchResponse
        getReverseGeocodingBatch(ReverseGeocodingBatchRequestBody reverseGeocodingBatchRequestBody) {
        return getReverseGeocodingBatchWithResponse(reverseGeocodingBatchRequestBody, Context.NONE).getValue();
    }
}
