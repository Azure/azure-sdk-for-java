// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Batch Query object.
 */
@Fluent
public final class GeocodingBatchRequestItem implements JsonSerializable<GeocodingBatchRequestItem> {
    /*
     * id of the request which would show in corresponding batchItem
     */
    private String optionalId;

    /*
     * Maximum number of responses that will be returned. Default: 5, minimum: 1 and maximum: 20.
     */
    private Integer top;

    /*
     * A string that contains information about a location, such as an address or landmark name.
     */
    private String query;

    /*
     * The official street line of an address relative to the area, as specified by the locality, or postalCode, properties. Typical use of this element would be to provide a street address or any official address.
     * 
     * **If query is given, should not use this parameter.**
     */
    private String addressLine;

    /*
     * Signal for the geocoding result to an [ISO 3166-1 Alpha-2 region/country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) that is specified e.g. FR./
     * 
     * **If query is given, should not use this parameter.**
     */
    private String countryRegion;

    /*
     * A rectangular area on the earth defined as a bounding box object. The sides of the rectangles are defined by longitude and latitude values. For more information, see Location and Area Types. When you specify this parameter, the geographical area is taken into account when computing the results of a location query.
     * 
     * Example: [lon1, lat1, lon2, lat2]
     */
    private List<Double> bbox;

    /*
     * A string that specifies an [ISO 3166-1 Alpha-2 region/country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels to align with the specified user region.
     */
    private String view;

    /*
     * A point on the earth specified as a longitude and latitude. When you specify this parameter, the user’s location is taken into account and the results returned may be more relevant to the user. Example: [lon, lat]
     */
    private List<Double> coordinates;

    /*
     * The country subdivision portion of an address, such as WA.
     * 
     * **If query is given, should not use this parameter.**
     */
    private String adminDistrict;

    /*
     * The county for the structured address, such as King.
     * 
     * **If query is given, should not use this parameter.**
     */
    private String adminDistrict2;

    /*
     * The named area for the structured address.
     * 
     * **If query is given, should not use this parameter.**
     */
    private String adminDistrict3;

    /*
     * The locality portion of an address, such as Seattle.
     * 
     * **If query is given, should not use this parameter.**
     */
    private String locality;

    /*
     * The postal code portion of an address.
     * 
     * **If query is given, should not use this parameter.**
     */
    private String postalCode;

    /**
     * Creates an instance of GeocodingBatchRequestItem class.
     */
    public GeocodingBatchRequestItem() {
    }

    /**
     * Get the optionalId property: id of the request which would show in corresponding batchItem.
     * 
     * @return the optionalId value.
     */
    public String getOptionalId() {
        return this.optionalId;
    }

    /**
     * Set the optionalId property: id of the request which would show in corresponding batchItem.
     * 
     * @param optionalId the optionalId value to set.
     * @return the GeocodingBatchRequestItem object itself.
     */
    public GeocodingBatchRequestItem setOptionalId(String optionalId) {
        this.optionalId = optionalId;
        return this;
    }

    /**
     * Get the top property: Maximum number of responses that will be returned. Default: 5, minimum: 1 and maximum: 20.
     * 
     * @return the top value.
     */
    public Integer getTop() {
        return this.top;
    }

    /**
     * Set the top property: Maximum number of responses that will be returned. Default: 5, minimum: 1 and maximum: 20.
     * 
     * @param top the top value to set.
     * @return the GeocodingBatchRequestItem object itself.
     */
    public GeocodingBatchRequestItem setTop(Integer top) {
        this.top = top;
        return this;
    }

    /**
     * Get the query property: A string that contains information about a location, such as an address or landmark name.
     * 
     * @return the query value.
     */
    public String getQuery() {
        return this.query;
    }

    /**
     * Set the query property: A string that contains information about a location, such as an address or landmark name.
     * 
     * @param query the query value to set.
     * @return the GeocodingBatchRequestItem object itself.
     */
    public GeocodingBatchRequestItem setQuery(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get the addressLine property: The official street line of an address relative to the area, as specified by the
     * locality, or postalCode, properties. Typical use of this element would be to provide a street address or any
     * official address.
     * 
     * **If query is given, should not use this parameter.**.
     * 
     * @return the addressLine value.
     */
    public String getAddressLine() {
        return this.addressLine;
    }

    /**
     * Set the addressLine property: The official street line of an address relative to the area, as specified by the
     * locality, or postalCode, properties. Typical use of this element would be to provide a street address or any
     * official address.
     * 
     * **If query is given, should not use this parameter.**.
     * 
     * @param addressLine the addressLine value to set.
     * @return the GeocodingBatchRequestItem object itself.
     */
    public GeocodingBatchRequestItem setAddressLine(String addressLine) {
        this.addressLine = addressLine;
        return this;
    }

    /**
     * Get the countryRegion property: Signal for the geocoding result to an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) that is specified e.g. FR./
     * 
     * **If query is given, should not use this parameter.**.
     * 
     * @return the countryRegion value.
     */
    public String getCountryRegion() {
        return this.countryRegion;
    }

    /**
     * Set the countryRegion property: Signal for the geocoding result to an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) that is specified e.g. FR./
     * 
     * **If query is given, should not use this parameter.**.
     * 
     * @param countryRegion the countryRegion value to set.
     * @return the GeocodingBatchRequestItem object itself.
     */
    public GeocodingBatchRequestItem setCountryRegion(String countryRegion) {
        this.countryRegion = countryRegion;
        return this;
    }

    /**
     * Get the bbox property: A rectangular area on the earth defined as a bounding box object. The sides of the
     * rectangles are defined by longitude and latitude values. For more information, see Location and Area Types. When
     * you specify this parameter, the geographical area is taken into account when computing the results of a location
     * query.
     * 
     * Example: [lon1, lat1, lon2, lat2].
     * 
     * @return the bbox value.
     */
    public List<Double> getBbox() {
        return this.bbox;
    }

    /**
     * Set the bbox property: A rectangular area on the earth defined as a bounding box object. The sides of the
     * rectangles are defined by longitude and latitude values. For more information, see Location and Area Types. When
     * you specify this parameter, the geographical area is taken into account when computing the results of a location
     * query.
     * 
     * Example: [lon1, lat1, lon2, lat2].
     * 
     * @param bbox the bbox value to set.
     * @return the GeocodingBatchRequestItem object itself.
     */
    public GeocodingBatchRequestItem setBbox(List<Double> bbox) {
        this.bbox = bbox;
        return this;
    }

    /**
     * Get the view property: A string that specifies an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region.
     * 
     * @return the view value.
     */
    public String getView() {
        return this.view;
    }

    /**
     * Set the view property: A string that specifies an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region.
     * 
     * @param view the view value to set.
     * @return the GeocodingBatchRequestItem object itself.
     */
    public GeocodingBatchRequestItem setView(String view) {
        this.view = view;
        return this;
    }

    /**
     * Get the coordinates property: A point on the earth specified as a longitude and latitude. When you specify this
     * parameter, the user’s location is taken into account and the results returned may be more relevant to the user.
     * Example: [lon, lat].
     * 
     * @return the coordinates value.
     */
    public List<Double> getCoordinates() {
        return this.coordinates;
    }

    /**
     * Set the coordinates property: A point on the earth specified as a longitude and latitude. When you specify this
     * parameter, the user’s location is taken into account and the results returned may be more relevant to the user.
     * Example: [lon, lat].
     * 
     * @param coordinates the coordinates value to set.
     * @return the GeocodingBatchRequestItem object itself.
     */
    public GeocodingBatchRequestItem setCoordinates(List<Double> coordinates) {
        this.coordinates = coordinates;
        return this;
    }

    /**
     * Get the adminDistrict property: The country subdivision portion of an address, such as WA.
     * 
     * **If query is given, should not use this parameter.**.
     * 
     * @return the adminDistrict value.
     */
    public String getAdminDistrict() {
        return this.adminDistrict;
    }

    /**
     * Set the adminDistrict property: The country subdivision portion of an address, such as WA.
     * 
     * **If query is given, should not use this parameter.**.
     * 
     * @param adminDistrict the adminDistrict value to set.
     * @return the GeocodingBatchRequestItem object itself.
     */
    public GeocodingBatchRequestItem setAdminDistrict(String adminDistrict) {
        this.adminDistrict = adminDistrict;
        return this;
    }

    /**
     * Get the adminDistrict2 property: The county for the structured address, such as King.
     * 
     * **If query is given, should not use this parameter.**.
     * 
     * @return the adminDistrict2 value.
     */
    public String getAdminDistrict2() {
        return this.adminDistrict2;
    }

    /**
     * Set the adminDistrict2 property: The county for the structured address, such as King.
     * 
     * **If query is given, should not use this parameter.**.
     * 
     * @param adminDistrict2 the adminDistrict2 value to set.
     * @return the GeocodingBatchRequestItem object itself.
     */
    public GeocodingBatchRequestItem setAdminDistrict2(String adminDistrict2) {
        this.adminDistrict2 = adminDistrict2;
        return this;
    }

    /**
     * Get the adminDistrict3 property: The named area for the structured address.
     * 
     * **If query is given, should not use this parameter.**.
     * 
     * @return the adminDistrict3 value.
     */
    public String getAdminDistrict3() {
        return this.adminDistrict3;
    }

    /**
     * Set the adminDistrict3 property: The named area for the structured address.
     * 
     * **If query is given, should not use this parameter.**.
     * 
     * @param adminDistrict3 the adminDistrict3 value to set.
     * @return the GeocodingBatchRequestItem object itself.
     */
    public GeocodingBatchRequestItem setAdminDistrict3(String adminDistrict3) {
        this.adminDistrict3 = adminDistrict3;
        return this;
    }

    /**
     * Get the locality property: The locality portion of an address, such as Seattle.
     * 
     * **If query is given, should not use this parameter.**.
     * 
     * @return the locality value.
     */
    public String getLocality() {
        return this.locality;
    }

    /**
     * Set the locality property: The locality portion of an address, such as Seattle.
     * 
     * **If query is given, should not use this parameter.**.
     * 
     * @param locality the locality value to set.
     * @return the GeocodingBatchRequestItem object itself.
     */
    public GeocodingBatchRequestItem setLocality(String locality) {
        this.locality = locality;
        return this;
    }

    /**
     * Get the postalCode property: The postal code portion of an address.
     * 
     * **If query is given, should not use this parameter.**.
     * 
     * @return the postalCode value.
     */
    public String getPostalCode() {
        return this.postalCode;
    }

    /**
     * Set the postalCode property: The postal code portion of an address.
     * 
     * **If query is given, should not use this parameter.**.
     * 
     * @param postalCode the postalCode value to set.
     * @return the GeocodingBatchRequestItem object itself.
     */
    public GeocodingBatchRequestItem setPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("optionalId", this.optionalId);
        jsonWriter.writeNumberField("top", this.top);
        jsonWriter.writeStringField("query", this.query);
        jsonWriter.writeStringField("addressLine", this.addressLine);
        jsonWriter.writeStringField("countryRegion", this.countryRegion);
        jsonWriter.writeArrayField("bbox", this.bbox, (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeStringField("view", this.view);
        jsonWriter.writeArrayField("coordinates", this.coordinates, (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeStringField("adminDistrict", this.adminDistrict);
        jsonWriter.writeStringField("adminDistrict2", this.adminDistrict2);
        jsonWriter.writeStringField("adminDistrict3", this.adminDistrict3);
        jsonWriter.writeStringField("locality", this.locality);
        jsonWriter.writeStringField("postalCode", this.postalCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeocodingBatchRequestItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeocodingBatchRequestItem if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GeocodingBatchRequestItem.
     */
    public static GeocodingBatchRequestItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeocodingBatchRequestItem deserializedGeocodingBatchRequestItem = new GeocodingBatchRequestItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("optionalId".equals(fieldName)) {
                    deserializedGeocodingBatchRequestItem.optionalId = reader.getString();
                } else if ("top".equals(fieldName)) {
                    deserializedGeocodingBatchRequestItem.top = reader.getNullable(JsonReader::getInt);
                } else if ("query".equals(fieldName)) {
                    deserializedGeocodingBatchRequestItem.query = reader.getString();
                } else if ("addressLine".equals(fieldName)) {
                    deserializedGeocodingBatchRequestItem.addressLine = reader.getString();
                } else if ("countryRegion".equals(fieldName)) {
                    deserializedGeocodingBatchRequestItem.countryRegion = reader.getString();
                } else if ("bbox".equals(fieldName)) {
                    List<Double> bbox = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedGeocodingBatchRequestItem.bbox = bbox;
                } else if ("view".equals(fieldName)) {
                    deserializedGeocodingBatchRequestItem.view = reader.getString();
                } else if ("coordinates".equals(fieldName)) {
                    List<Double> coordinates = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedGeocodingBatchRequestItem.coordinates = coordinates;
                } else if ("adminDistrict".equals(fieldName)) {
                    deserializedGeocodingBatchRequestItem.adminDistrict = reader.getString();
                } else if ("adminDistrict2".equals(fieldName)) {
                    deserializedGeocodingBatchRequestItem.adminDistrict2 = reader.getString();
                } else if ("adminDistrict3".equals(fieldName)) {
                    deserializedGeocodingBatchRequestItem.adminDistrict3 = reader.getString();
                } else if ("locality".equals(fieldName)) {
                    deserializedGeocodingBatchRequestItem.locality = reader.getString();
                } else if ("postalCode".equals(fieldName)) {
                    deserializedGeocodingBatchRequestItem.postalCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGeocodingBatchRequestItem;
        });
    }
}
