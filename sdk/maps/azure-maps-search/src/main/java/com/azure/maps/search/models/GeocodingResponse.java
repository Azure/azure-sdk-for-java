// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.search.implementation.models.FeaturesItem;
import java.io.IOException;
import java.util.List;

/**
 * This object is returned from a successful Geocoding call.
 */
@Fluent
public final class GeocodingResponse implements JsonSerializable<GeocodingResponse> {
    /*
     * The type of a FeatureCollection object must be FeatureCollection.
     */
    private FeatureCollectionEnum type;

    /*
     * The features property.
     */
    private List<FeaturesItem> features;

    /*
     * The is the link to the next page of the features returned. If it's the last page, no this field.
     */
    private String nextLink;

    /**
     * Creates an instance of GeocodingResponse class.
     */
    public GeocodingResponse() {
    }

    /**
     * Get the type property: The type of a FeatureCollection object must be FeatureCollection.
     * 
     * @return the type value.
     */
    public FeatureCollectionEnum getType() {
        return this.type;
    }

    /**
     * Set the type property: The type of a FeatureCollection object must be FeatureCollection.
     * 
     * @param type the type value to set.
     * @return the GeocodingResponse object itself.
     */
    public GeocodingResponse setType(FeatureCollectionEnum type) {
        this.type = type;
        return this;
    }

    /**
     * Get the features property: The features property.
     * 
     * @return the features value.
     */
    public List<FeaturesItem> getFeatures() {
        return this.features;
    }

    /**
     * Set the features property: The features property.
     * 
     * @param features the features value to set.
     * @return the GeocodingResponse object itself.
     */
    public GeocodingResponse setFeatures(List<FeaturesItem> features) {
        this.features = features;
        return this;
    }

    /**
     * Get the nextLink property: The is the link to the next page of the features returned. If it's the last page, no
     * this field.
     * 
     * @return the nextLink value.
     */
    public String getNextLink() {
        return this.nextLink;
    }

    /**
     * Set the nextLink property: The is the link to the next page of the features returned. If it's the last page, no
     * this field.
     * 
     * @param nextLink the nextLink value to set.
     * @return the GeocodingResponse object itself.
     */
    public GeocodingResponse setNextLink(String nextLink) {
        this.nextLink = nextLink;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeArrayField("features", this.features, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("nextLink", this.nextLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeocodingResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeocodingResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the GeocodingResponse.
     */
    public static GeocodingResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeocodingResponse deserializedGeocodingResponse = new GeocodingResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedGeocodingResponse.type = FeatureCollectionEnum.fromString(reader.getString());
                } else if ("features".equals(fieldName)) {
                    List<FeaturesItem> features = reader.readArray(reader1 -> FeaturesItem.fromJson(reader1));
                    deserializedGeocodingResponse.features = features;
                } else if ("nextLink".equals(fieldName)) {
                    deserializedGeocodingResponse.nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGeocodingResponse;
        });
    }
}
