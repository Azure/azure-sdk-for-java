// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.search.implementation.models.GeoJsonFeatureCollection;
import java.io.IOException;
import java.util.List;
import com.azure.maps.search.implementation.models.GeoJsonPoint;
import com.azure.maps.search.implementation.models.GeoJsonMultiPoint;
import com.azure.maps.search.implementation.models.GeoJsonLineString;
import com.azure.maps.search.implementation.models.GeoJsonMultiLineString;
import com.azure.maps.search.implementation.models.GeoJsonPolygon;
import com.azure.maps.search.implementation.models.GeoJsonMultiPolygon;
import com.azure.maps.search.implementation.models.GeoJsonGeometryCollection;

/**
 * A valid `GeoJSON` object. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3) for details.
 */
@Fluent
public class GeoJsonObject implements JsonSerializable<GeoJsonObject> {

    /*
     * Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
     */
    private GeoJsonObjectType type;

    /*
     * Bounding box. Projection used - EPSG:3857. Please refer to [RFC 7946](https://datatracker.ietf.org/doc/html/rfc7946#section-5) for details.
     */
    private List<Double> bbox;

    /**
     * Creates an instance of GeoJsonObject class.
     */
    public GeoJsonObject() {
        this.type = GeoJsonObjectType.fromString("GeoJsonObject");
    }

    /**
     * Get the type property: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point,
     * MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and
     * FeatureCollection.
     *
     * @return the type value.
     */
    public GeoJsonObjectType getType() {
        return this.type;
    }

    /**
     * Get the bbox property: Bounding box. Projection used - EPSG:3857. Please refer to [RFC
     * 7946](https://datatracker.ietf.org/doc/html/rfc7946#section-5) for details.
     *
     * @return the bbox value.
     */
    public List<Double> getBbox() {
        return this.bbox;
    }

    /**
     * Set the bbox property: Bounding box. Projection used - EPSG:3857. Please refer to [RFC
     * 7946](https://datatracker.ietf.org/doc/html/rfc7946#section-5) for details.
     *
     * @param bbox the bbox value to set.
     * @return the GeoJsonObject object itself.
     */
    public GeoJsonObject setBbox(List<Double> bbox) {
        this.bbox = bbox;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeArrayField("bbox", this.bbox, (writer, element) -> writer.writeDouble(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeoJsonObject from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeoJsonObject if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the GeoJsonObject.
     */
    public static GeoJsonObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("GeoJsonGeometry".equals(discriminatorValue)) {
                    return GeoJsonGeometry.fromJsonKnownDiscriminator(readerToUse.reset());
                } else if ("Point".equals(discriminatorValue)) {
                    return GeoJsonPoint.fromJson(readerToUse.reset());
                } else if ("MultiPoint".equals(discriminatorValue)) {
                    return GeoJsonMultiPoint.fromJson(readerToUse.reset());
                } else if ("LineString".equals(discriminatorValue)) {
                    return GeoJsonLineString.fromJson(readerToUse.reset());
                } else if ("MultiLineString".equals(discriminatorValue)) {
                    return GeoJsonMultiLineString.fromJson(readerToUse.reset());
                } else if ("Polygon".equals(discriminatorValue)) {
                    return GeoJsonPolygon.fromJson(readerToUse.reset());
                } else if ("MultiPolygon".equals(discriminatorValue)) {
                    return GeoJsonMultiPolygon.fromJson(readerToUse.reset());
                } else if ("GeometryCollection".equals(discriminatorValue)) {
                    return GeoJsonGeometryCollection.fromJson(readerToUse.reset());
                } else if ("Feature".equals(discriminatorValue)) {
                    return GeoJsonFeature.fromJsonKnownDiscriminator(readerToUse.reset());
                } else if ("Boundary".equals(discriminatorValue)) {
                    return Boundary.fromJson(readerToUse.reset());
                } else if ("FeatureCollection".equals(discriminatorValue)) {
                    return GeoJsonFeatureCollection.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static GeoJsonObject fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeoJsonObject deserializedGeoJsonObject = new GeoJsonObject();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedGeoJsonObject.type = GeoJsonObjectType.fromString(reader.getString());
                } else if ("bbox".equals(fieldName)) {
                    List<Double> bbox = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedGeoJsonObject.bbox = bbox;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedGeoJsonObject;
        });
    }
}
