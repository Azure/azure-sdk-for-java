// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A location represented as a latitude and longitude using short names 'lat' &amp; 'lon'.
 */
@Fluent
public final class LatLongPairAbbreviated implements JsonSerializable<LatLongPairAbbreviated> {
    /*
     * Latitude property
     */
    private Double lat;

    /*
     * Longitude property
     */
    private Double lon;

    /**
     * Creates an instance of LatLongPairAbbreviated class.
     */
    public LatLongPairAbbreviated() {
    }

    /**
     * Get the lat property: Latitude property.
     * 
     * @return the lat value.
     */
    public Double getLat() {
        return this.lat;
    }

    /**
     * Set the lat property: Latitude property.
     * 
     * @param lat the lat value to set.
     * @return the LatLongPairAbbreviated object itself.
     */
    public LatLongPairAbbreviated setLat(Double lat) {
        this.lat = lat;
        return this;
    }

    /**
     * Get the lon property: Longitude property.
     * 
     * @return the lon value.
     */
    public Double getLon() {
        return this.lon;
    }

    /**
     * Set the lon property: Longitude property.
     * 
     * @param lon the lon value to set.
     * @return the LatLongPairAbbreviated object itself.
     */
    public LatLongPairAbbreviated setLon(Double lon) {
        this.lon = lon;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("lat", this.lat);
        jsonWriter.writeNumberField("lon", this.lon);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LatLongPairAbbreviated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LatLongPairAbbreviated if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LatLongPairAbbreviated.
     */
    public static LatLongPairAbbreviated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LatLongPairAbbreviated deserializedLatLongPairAbbreviated = new LatLongPairAbbreviated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lat".equals(fieldName)) {
                    deserializedLatLongPairAbbreviated.lat = reader.getNullable(JsonReader::getDouble);
                } else if ("lon".equals(fieldName)) {
                    deserializedLatLongPairAbbreviated.lon = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLatLongPairAbbreviated;
        });
    }
}
