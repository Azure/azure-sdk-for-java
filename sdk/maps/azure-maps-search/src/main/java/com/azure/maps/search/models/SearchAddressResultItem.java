// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.search.implementation.models.BoundingBoxPrivate;
import com.azure.maps.search.implementation.models.LatLongPairAbbreviated;
import java.io.IOException;
import java.util.List;
import com.azure.core.models.GeoPosition;
import com.azure.core.models.GeoBoundingBox;

/**
 * Result object for a Search API response.
 */
@Fluent
public final class SearchAddressResultItem implements JsonSerializable<SearchAddressResultItem> {

    /*
     * One of:
     * * POI
     * * Street
     * * Geography
     * * Point Address
     * * Address Range
     * * Cross Street
     */
    private SearchAddressResultType type;

    /*
     * Id property
     */
    private String id;

    /*
     * The value within a result set to indicate the relative matching score between results.  You can use this to  determine that result x is twice as likely to be as relevant as result y if the value of x is 2x the value of y.   The values vary between queries and is only meant as a relative value for one result set.
     */
    private Double score;

    /*
     * Straight line distance between the result and geobias location in meters.
     */
    private Double distanceInMeters;

    /*
     * Information about the original data source of the Result. Used for support requests.
     */
    private String info;

    /*
     * The entityType property.
     */
    private GeographicEntityType entityType;

    /*
     * Details of the returned POI including information such as the name, phone, url address, and classifications.
     */
    private PointOfInterest pointOfInterest;

    /*
     * The address of the result
     */
    private MapsSearchAddress address;

    /*
     * A location represented as a latitude and longitude using short names 'lat' & 'lon'.
     */
    private LatLongPairAbbreviated position;

    /*
     * The viewport that covers the result represented by the top-left and bottom-right coordinates of the viewport.
     */
    private BoundingBoxPrivate viewport;

    /*
     * Array of EntryPoints. Those describe the types of entrances available at the location. The type can be "main" for main entrances such as a front door, or a lobby, and "minor", for side and back doors.
     */
    private List<EntryPoint> entryPoints;

    /*
     * Describes the address range on both sides of the street for a search result. Coordinates for the start and end locations of the address range are included.
     */
    private AddressRanges addressRanges;

    /*
     * Optional section. Reference geometry id for use with the [Get Search Polygon](/rest/api/maps/search/get-search-polygon?view=rest-maps-1.0) API.
     */
    private DataSource dataSources;

    /*
     * Information on the type of match.
     * 
     * One of:
     *   * AddressPoint
     *   * HouseNumberRange
     *   * Street
     */
    private MatchType matchType;

    /*
     * Detour time in seconds. Only returned for calls to the Search Along Route API.
     */
    private Integer detourTime;

    /**
     * Creates an instance of SearchAddressResultItem class.
     */
    public SearchAddressResultItem() {
    }

    /**
     * Get the type property: One of:
     * * POI
     * * Street
     * * Geography
     * * Point Address
     * * Address Range
     * * Cross Street.
     *
     * @return the type value.
     */
    public SearchAddressResultType getType() {
        return this.type;
    }

    /**
     * Get the id property: Id property.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the score property: The value within a result set to indicate the relative matching score between results.
     * You can use this to determine that result x is twice as likely to be as relevant as result y if the value of x is
     * 2x the value of y. The values vary between queries and is only meant as a relative value for one result set.
     *
     * @return the score value.
     */
    public Double getScore() {
        return this.score;
    }

    /**
     * Get the distanceInMeters property: Straight line distance between the result and geobias location in meters.
     *
     * @return the distanceInMeters value.
     */
    public Double getDistanceInMeters() {
        return this.distanceInMeters;
    }

    /**
     * Get the info property: Information about the original data source of the Result. Used for support requests.
     *
     * @return the info value.
     */
    public String getInfo() {
        return this.info;
    }

    /**
     * Get the entityType property: The entityType property.
     *
     * @return the entityType value.
     */
    public GeographicEntityType getEntityType() {
        return this.entityType;
    }

    /**
     * Set the entityType property: The entityType property.
     *
     * @param entityType the entityType value to set.
     * @return the SearchAddressResultItem object itself.
     */
    public SearchAddressResultItem setEntityType(GeographicEntityType entityType) {
        this.entityType = entityType;
        return this;
    }

    /**
     * Get the pointOfInterest property: Details of the returned POI including information such as the name, phone, url
     * address, and classifications.
     *
     * @return the pointOfInterest value.
     */
    public PointOfInterest getPointOfInterest() {
        return this.pointOfInterest;
    }

    /**
     * Get the address property: The address of the result.
     *
     * @return the address value.
     */
    public MapsSearchAddress getAddress() {
        return this.address;
    }

    /**
     * Get the position property: A location represented as a latitude and longitude using short names 'lat' &amp;
     * 'lon'.
     *
     * @return the position value.
     */
    public GeoPosition getPosition() {
        return new GeoPosition(this.position.getLon(), this.position.getLat());
    }

    /**
     * Get the viewport property: The viewport that covers the result represented by the top-left and bottom-right
     * coordinates of the viewport.
     *
     * @return the viewport value.
     */
    public GeoBoundingBox getBoundingBox() {
        return new GeoBoundingBox(this.viewport.getTopLeft().getLon(), this.viewport.getTopLeft().getLat(),
            this.viewport.getBottomRight().getLon(), this.viewport.getBottomRight().getLat());
    }

    /**
     * Get the entryPoints property: Array of EntryPoints. Those describe the types of entrances available at the
     * location. The type can be "main" for main entrances such as a front door, or a lobby, and "minor", for side and
     * back doors.
     *
     * @return the entryPoints value.
     */
    public List<EntryPoint> getEntryPoints() {
        return this.entryPoints;
    }

    /**
     * Get the addressRanges property: Describes the address range on both sides of the street for a search result.
     * Coordinates for the start and end locations of the address range are included.
     *
     * @return the addressRanges value.
     */
    public AddressRanges getAddressRanges() {
        return this.addressRanges;
    }

    /**
     * Get the dataSources property: Optional section. Reference geometry id for use with the [Get Search
     * Polygon](/rest/api/maps/search/get-search-polygon?view=rest-maps-1.0) API.
     *
     * @return the dataSources value.
     */
    public DataSource getDataSource() {
        return this.dataSources;
    }

    /**
     * Get the matchType property: Information on the type of match.
     *
     * One of:
     * * AddressPoint
     * * HouseNumberRange
     * * Street.
     *
     * @return the matchType value.
     */
    public MatchType getMatchType() {
        return this.matchType;
    }

    /**
     * Get the detourTime property: Detour time in seconds. Only returned for calls to the Search Along Route API.
     *
     * @return the detourTime value.
     */
    public Integer getDetourTime() {
        return this.detourTime;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("entityType", this.entityType == null ? null : this.entityType.toString());
        jsonWriter.writeJsonField("position", this.position);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchAddressResultItem from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchAddressResultItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SearchAddressResultItem.
     */
    public static SearchAddressResultItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchAddressResultItem deserializedSearchAddressResultItem = new SearchAddressResultItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedSearchAddressResultItem.type = SearchAddressResultType.fromString(reader.getString());
                } else if ("id".equals(fieldName)) {
                    deserializedSearchAddressResultItem.id = reader.getString();
                } else if ("score".equals(fieldName)) {
                    deserializedSearchAddressResultItem.score = reader.getNullable(JsonReader::getDouble);
                } else if ("dist".equals(fieldName)) {
                    deserializedSearchAddressResultItem.distanceInMeters = reader.getNullable(JsonReader::getDouble);
                } else if ("info".equals(fieldName)) {
                    deserializedSearchAddressResultItem.info = reader.getString();
                } else if ("entityType".equals(fieldName)) {
                    deserializedSearchAddressResultItem.entityType
                        = GeographicEntityType.fromString(reader.getString());
                } else if ("poi".equals(fieldName)) {
                    deserializedSearchAddressResultItem.pointOfInterest = PointOfInterest.fromJson(reader);
                } else if ("address".equals(fieldName)) {
                    deserializedSearchAddressResultItem.address = MapsSearchAddress.fromJson(reader);
                } else if ("position".equals(fieldName)) {
                    deserializedSearchAddressResultItem.position = LatLongPairAbbreviated.fromJson(reader);
                } else if ("viewport".equals(fieldName)) {
                    deserializedSearchAddressResultItem.viewport = BoundingBoxPrivate.fromJson(reader);
                } else if ("entryPoints".equals(fieldName)) {
                    List<EntryPoint> entryPoints = reader.readArray(reader1 -> EntryPoint.fromJson(reader1));
                    deserializedSearchAddressResultItem.entryPoints = entryPoints;
                } else if ("addressRanges".equals(fieldName)) {
                    deserializedSearchAddressResultItem.addressRanges = AddressRanges.fromJson(reader);
                } else if ("dataSources".equals(fieldName)) {
                    deserializedSearchAddressResultItem.dataSources = DataSource.fromJson(reader);
                } else if ("matchType".equals(fieldName)) {
                    deserializedSearchAddressResultItem.matchType = MatchType.fromString(reader.getString());
                } else if ("detourTime".equals(fieldName)) {
                    deserializedSearchAddressResultItem.detourTime = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedSearchAddressResultItem;
        });
    }
}
