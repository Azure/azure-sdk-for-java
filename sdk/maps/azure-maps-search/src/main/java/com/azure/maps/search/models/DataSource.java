// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Optional section. Reference ids for use with the [Get Search
 * Polygon](/rest/api/maps/search/get-search-polygon?view=rest-maps-1.0) API.
 */
@Fluent
public final class DataSource implements JsonSerializable<DataSource> {

    /*
     * Information about the geometric shape of the result. Only present if type == Geography.
     */
    private GeometryIdentifier geometry;

    /**
     * Creates an instance of DataSource class.
     */
    public DataSource() {
    }

    /**
     * Get the geometry property: Information about the geometric shape of the result. Only present if type ==
     * Geography.
     *
     * @return the geometry value.
     */
    public String getGeometry() {
        return this.geometry.toString();
    }

    /**
     * Set the geometry property: Information about the geometric shape of the result. Only present if type ==
     * Geography.
     *
     * @param geometry the geometry value to set.
     * @return the DataSource object itself.
     */
    public DataSource setGeometry(String geometry) {
        this.geometry = new GeometryIdentifier().setId(geometry);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("geometry", this.geometry);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataSource from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataSource if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the DataSource.
     */
    public static DataSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataSource deserializedDataSource = new DataSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("geometry".equals(fieldName)) {
                    deserializedDataSource.geometry = GeometryIdentifier.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDataSource;
        });
    }

    /**
     * Creates an instance of DataSource class.
     *
     * @param geometry this is geometry id
     */
    public DataSource(String geometry) {
        this.geometry = new GeometryIdentifier().setId(geometry);
    }
}
