// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.implementation.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The bounding box of the location.
 */
@Immutable
public final class BoundingBoxCompassNotation implements JsonSerializable<BoundingBoxCompassNotation> {
    /*
     * North-east latitude,longitude coordinate of the bounding box as comma-separated floats
     */
    private String northEast;

    /*
     * South-west latitude,longitude coordinate of the bounding box as comma-separated floats
     */
    private String southWest;

    /*
     * Entity type source of the bounding box. For reverse-geocoding this is always equal to position.
     */
    private Entity entity;

    /**
     * Creates an instance of BoundingBoxCompassNotation class.
     */
    public BoundingBoxCompassNotation() {
    }

    /**
     * Get the northEast property: North-east latitude,longitude coordinate of the bounding box as comma-separated
     * floats.
     * 
     * @return the northEast value.
     */
    public String getNorthEast() {
        return this.northEast;
    }

    /**
     * Get the southWest property: South-west latitude,longitude coordinate of the bounding box as comma-separated
     * floats.
     * 
     * @return the southWest value.
     */
    public String getSouthWest() {
        return this.southWest;
    }

    /**
     * Get the entity property: Entity type source of the bounding box. For reverse-geocoding this is always equal to
     * position.
     * 
     * @return the entity value.
     */
    public Entity getEntity() {
        return this.entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BoundingBoxCompassNotation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BoundingBoxCompassNotation if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BoundingBoxCompassNotation.
     */
    public static BoundingBoxCompassNotation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BoundingBoxCompassNotation deserializedBoundingBoxCompassNotation = new BoundingBoxCompassNotation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("northEast".equals(fieldName)) {
                    deserializedBoundingBoxCompassNotation.northEast = reader.getString();
                } else if ("southWest".equals(fieldName)) {
                    deserializedBoundingBoxCompassNotation.southWest = reader.getString();
                } else if ("entity".equals(fieldName)) {
                    deserializedBoundingBoxCompassNotation.entity = Entity.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBoundingBoxCompassNotation;
        });
    }
}
