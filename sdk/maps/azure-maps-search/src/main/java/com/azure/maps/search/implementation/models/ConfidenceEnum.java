// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.implementation.models;

import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * The level of confidence that the geocoded location result is a match. Use this value with the match code to determine
 * for more complete information about the match.
 * 
 * The confidence of a geocoded location is based on many factors including the relative importance of the geocoded
 * location and the userâ€™s location, if specified.
 */
public final class ConfidenceEnum extends ExpandableStringEnum<ConfidenceEnum> {
    /**
     * If the confidence is set to `High`, one or more strong matches were found. Multiple `High` confidence matches are
     * sorted in ranked order by importance when applicable. For example, landmarks have importance but addresses do
     * not.
     * 
     * If a request includes a location or a view, then the ranking may change appropriately. For example, a location
     * query for "Paris" returns "Paris, France" and "Paris, TX" both with `High` confidence. "Paris, France" is always
     * ranked first due to importance unless a user location indicates that the user is in or very close to Paris, TX or
     * the map view indicates that the user is searching in that area.
     */
    public static final ConfidenceEnum HIGH = fromString("High");

    /**
     * In some situations, the returned match may not be at the same level as the information provided in the request.
     * For example, a request may specify address information and the geocode service may only be able to match a postal
     * code. In this case, if the geocode service has a confidence that the postal code matches the data, the confidence
     * is set to `Medium` and the match code is set to `UpHierarchy` to specify that it could not match all of the
     * information and had to search up-hierarchy.
     * 
     * If the location information in the query is ambiguous, and there is no additional information to rank the
     * locations (such as user location or the relative importance of the location), the confidence is set to `Medium`.
     * For example, a location query for "148th Ave, Bellevue" may return "148th Ave SE" and "148th Ave NE" both with
     * `Medium` confidence.
     * 
     * If the location information in the query does not provide enough information to geocode a specific location, a
     * less precise location value may be returned and the confidence is set to `Medium`. For example, if an address is
     * provided, but a match is not found for the house number, the geocode result with a Roadblock entity type may be
     * returned.
     */
    public static final ConfidenceEnum MEDIUM = fromString("Medium");

    /**
     * Static value Low for ConfidenceEnum.
     */
    public static final ConfidenceEnum LOW = fromString("Low");

    /**
     * Creates a new instance of ConfidenceEnum value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Deprecated
    public ConfidenceEnum() {
    }

    /**
     * Creates or finds a ConfidenceEnum from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding ConfidenceEnum.
     */
    public static ConfidenceEnum fromString(String name) {
        return fromString(name, ConfidenceEnum.class);
    }

    /**
     * Gets known ConfidenceEnum values.
     * 
     * @return known ConfidenceEnum values.
     */
    public static Collection<ConfidenceEnum> values() {
        return values(ConfidenceEnum.class);
    }
}
