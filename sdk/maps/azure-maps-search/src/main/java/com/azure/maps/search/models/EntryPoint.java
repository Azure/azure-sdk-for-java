// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.search.implementation.models.LatLongPairAbbreviated;
import java.io.IOException;
import com.azure.core.models.GeoPosition;

/**
 * The entry point for the POI being returned.
 */
@Fluent
public final class EntryPoint implements JsonSerializable<EntryPoint> {

    /*
     * The type of entry point. Value can be either _main_ or _minor_.
     */
    private EntryPointType type;

    /*
     * A location represented as a latitude and longitude using short names 'lat' & 'lon'.
     */
    private LatLongPairAbbreviated position;

    /**
     * Creates an instance of EntryPoint class.
     */
    public EntryPoint() {
    }

    /**
     * Get the type property: The type of entry point. Value can be either _main_ or _minor_.
     *
     * @return the type value.
     */
    public EntryPointType getType() {
        return this.type;
    }

    /**
     * Get the position property: A location represented as a latitude and longitude using short names 'lat' &amp;
     * 'lon'.
     *
     * @return the position value.
     */
    public GeoPosition getPosition() {
        return new GeoPosition(this.position.getLon(), this.position.getLat());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("position", this.position);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EntryPoint from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of EntryPoint if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the EntryPoint.
     */
    public static EntryPoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EntryPoint deserializedEntryPoint = new EntryPoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedEntryPoint.type = EntryPointType.fromString(reader.getString());
                } else if ("position".equals(fieldName)) {
                    deserializedEntryPoint.position = LatLongPairAbbreviated.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedEntryPoint;
        });
    }
}
