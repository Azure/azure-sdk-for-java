// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The FeaturesItem model.
 */
@Fluent
public final class FeaturesItem implements JsonSerializable<FeaturesItem> {
    /*
     * The type of a feature must be Feature.
     */
    private FeatureTypeEnum type;

    /*
     * ID for feature returned
     */
    private String id;

    /*
     * The properties property.
     */
    private FeaturesItemProperties properties;

    /*
     * A valid `GeoJSON Point` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.2) for details.
     */
    private GeoJsonPoint geometry;

    /*
     * Bounding box. Projection used - EPSG:3857. Please refer to [RFC 7946](https://datatracker.ietf.org/doc/html/rfc7946#section-5) for details.
     */
    private List<Double> bbox;

    /**
     * Creates an instance of FeaturesItem class.
     */
    public FeaturesItem() {
    }

    /**
     * Get the type property: The type of a feature must be Feature.
     * 
     * @return the type value.
     */
    public FeatureTypeEnum getType() {
        return this.type;
    }

    /**
     * Set the type property: The type of a feature must be Feature.
     * 
     * @param type the type value to set.
     * @return the FeaturesItem object itself.
     */
    public FeaturesItem setType(FeatureTypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * Get the id property: ID for feature returned.
     * 
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: ID for feature returned.
     * 
     * @param id the id value to set.
     * @return the FeaturesItem object itself.
     */
    public FeaturesItem setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the properties property: The properties property.
     * 
     * @return the properties value.
     */
    public FeaturesItemProperties getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: The properties property.
     * 
     * @param properties the properties value to set.
     * @return the FeaturesItem object itself.
     */
    public FeaturesItem setProperties(FeaturesItemProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the geometry property: A valid `GeoJSON Point` geometry type. Please refer to [RFC
     * 7946](https://tools.ietf.org/html/rfc7946#section-3.1.2) for details.
     * 
     * @return the geometry value.
     */
    public GeoJsonPoint getGeometry() {
        return this.geometry;
    }

    /**
     * Set the geometry property: A valid `GeoJSON Point` geometry type. Please refer to [RFC
     * 7946](https://tools.ietf.org/html/rfc7946#section-3.1.2) for details.
     * 
     * @param geometry the geometry value to set.
     * @return the FeaturesItem object itself.
     */
    public FeaturesItem setGeometry(GeoJsonPoint geometry) {
        this.geometry = geometry;
        return this;
    }

    /**
     * Get the bbox property: Bounding box. Projection used - EPSG:3857. Please refer to [RFC
     * 7946](https://datatracker.ietf.org/doc/html/rfc7946#section-5) for details.
     * 
     * @return the bbox value.
     */
    public List<Double> getBbox() {
        return this.bbox;
    }

    /**
     * Set the bbox property: Bounding box. Projection used - EPSG:3857. Please refer to [RFC
     * 7946](https://datatracker.ietf.org/doc/html/rfc7946#section-5) for details.
     * 
     * @param bbox the bbox value to set.
     * @return the FeaturesItem object itself.
     */
    public FeaturesItem setBbox(List<Double> bbox) {
        this.bbox = bbox;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("geometry", this.geometry);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeJsonField("properties", this.properties);
        jsonWriter.writeArrayField("bbox", this.bbox, (writer, element) -> writer.writeDouble(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FeaturesItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FeaturesItem if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FeaturesItem.
     */
    public static FeaturesItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FeaturesItem deserializedFeaturesItem = new FeaturesItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("geometry".equals(fieldName)) {
                    deserializedFeaturesItem.geometry = GeoJsonPoint.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    deserializedFeaturesItem.type = FeatureTypeEnum.fromString(reader.getString());
                } else if ("id".equals(fieldName)) {
                    deserializedFeaturesItem.id = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedFeaturesItem.properties = FeaturesItemProperties.fromJson(reader);
                } else if ("bbox".equals(fieldName)) {
                    List<Double> bbox = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedFeaturesItem.bbox = bbox;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFeaturesItem;
        });
    }
}
