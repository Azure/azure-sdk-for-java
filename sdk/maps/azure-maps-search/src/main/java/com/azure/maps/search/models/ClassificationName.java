// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Name for the classification.
 */
@Immutable
public final class ClassificationName implements JsonSerializable<ClassificationName> {
    /*
     * Name Locale property
     */
    private String nameLocale;

    /*
     * Name property
     */
    private String name;

    /**
     * Creates an instance of ClassificationName class.
     */
    public ClassificationName() {
    }

    /**
     * Get the nameLocale property: Name Locale property.
     * 
     * @return the nameLocale value.
     */
    public String getNameLocale() {
        return this.nameLocale;
    }

    /**
     * Get the name property: Name property.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClassificationName from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClassificationName if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClassificationName.
     */
    public static ClassificationName fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClassificationName deserializedClassificationName = new ClassificationName();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nameLocale".equals(fieldName)) {
                    deserializedClassificationName.nameLocale = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedClassificationName.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClassificationName;
        });
    }
}
