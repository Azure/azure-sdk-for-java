// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The address of the result.
 */
@Fluent
public final class Intersection implements JsonSerializable<Intersection> {
    /*
     * Primary street for the location.
     */
    @Generated
    private String baseStreet;

    /*
     * The first intersecting street.
     */
    @Generated
    private String secondaryStreet1;

    /*
     * If any, the second intersecting street.
     */
    @Generated
    private String secondaryStreet2;

    /*
     * Type of intersection.
     */
    @Generated
    private String intersectionType;

    /*
     * Complete name of the intersection.
     */
    @Generated
    private String displayName;

    /**
     * Creates an instance of Intersection class.
     */
    @Generated
    public Intersection() {
    }

    /**
     * Get the baseStreet property: Primary street for the location.
     * 
     * @return the baseStreet value.
     */
    @Generated
    public String getBaseStreet() {
        return this.baseStreet;
    }

    /**
     * Set the baseStreet property: Primary street for the location.
     * 
     * @param baseStreet the baseStreet value to set.
     * @return the Intersection object itself.
     */
    @Generated
    public Intersection setBaseStreet(String baseStreet) {
        this.baseStreet = baseStreet;
        return this;
    }

    /**
     * Get the secondaryStreet1 property: The first intersecting street.
     * 
     * @return the secondaryStreet1 value.
     */
    @Generated
    public String getSecondaryStreet1() {
        return this.secondaryStreet1;
    }

    /**
     * Set the secondaryStreet1 property: The first intersecting street.
     * 
     * @param secondaryStreet1 the secondaryStreet1 value to set.
     * @return the Intersection object itself.
     */
    @Generated
    public Intersection setSecondaryStreet1(String secondaryStreet1) {
        this.secondaryStreet1 = secondaryStreet1;
        return this;
    }

    /**
     * Get the secondaryStreet2 property: If any, the second intersecting street.
     * 
     * @return the secondaryStreet2 value.
     */
    @Generated
    public String getSecondaryStreet2() {
        return this.secondaryStreet2;
    }

    /**
     * Set the secondaryStreet2 property: If any, the second intersecting street.
     * 
     * @param secondaryStreet2 the secondaryStreet2 value to set.
     * @return the Intersection object itself.
     */
    @Generated
    public Intersection setSecondaryStreet2(String secondaryStreet2) {
        this.secondaryStreet2 = secondaryStreet2;
        return this;
    }

    /**
     * Get the intersectionType property: Type of intersection.
     * 
     * @return the intersectionType value.
     */
    @Generated
    public String getIntersectionType() {
        return this.intersectionType;
    }

    /**
     * Set the intersectionType property: Type of intersection.
     * 
     * @param intersectionType the intersectionType value to set.
     * @return the Intersection object itself.
     */
    @Generated
    public Intersection setIntersectionType(String intersectionType) {
        this.intersectionType = intersectionType;
        return this;
    }

    /**
     * Get the displayName property: Complete name of the intersection.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Complete name of the intersection.
     * 
     * @param displayName the displayName value to set.
     * @return the Intersection object itself.
     */
    @Generated
    public Intersection setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("baseStreet", this.baseStreet);
        jsonWriter.writeStringField("secondaryStreet1", this.secondaryStreet1);
        jsonWriter.writeStringField("secondaryStreet2", this.secondaryStreet2);
        jsonWriter.writeStringField("intersectionType", this.intersectionType);
        jsonWriter.writeStringField("displayName", this.displayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Intersection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Intersection if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Intersection.
     */
    @Generated
    public static Intersection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Intersection deserializedIntersection = new Intersection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("baseStreet".equals(fieldName)) {
                    deserializedIntersection.baseStreet = reader.getString();
                } else if ("secondaryStreet1".equals(fieldName)) {
                    deserializedIntersection.secondaryStreet1 = reader.getString();
                } else if ("secondaryStreet2".equals(fieldName)) {
                    deserializedIntersection.secondaryStreet2 = reader.getString();
                } else if ("intersectionType".equals(fieldName)) {
                    deserializedIntersection.intersectionType = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedIntersection.displayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIntersection;
        });
    }
}
