// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.search.implementation.models.GeocodingBatchRequestItem;
import java.io.IOException;
import java.util.List;

/**
 * The list of address geocoding queries/requests to process. The list can contain a max of 100 queries and must contain
 * at least 1 query.
 */
@Fluent
public final class GeocodingBatchRequestBody implements JsonSerializable<GeocodingBatchRequestBody> {
    /*
     * The list of queries to process.
     */
    private List<GeocodingBatchRequestItem> batchItems;

    /**
     * Creates an instance of GeocodingBatchRequestBody class.
     */
    public GeocodingBatchRequestBody() {
    }

    /**
     * Get the batchItems property: The list of queries to process.
     * 
     * @return the batchItems value.
     */
    public List<GeocodingBatchRequestItem> getBatchItems() {
        return this.batchItems;
    }

    /**
     * Set the batchItems property: The list of queries to process.
     * 
     * @param batchItems the batchItems value to set.
     * @return the GeocodingBatchRequestBody object itself.
     */
    public GeocodingBatchRequestBody setBatchItems(List<GeocodingBatchRequestItem> batchItems) {
        this.batchItems = batchItems;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("batchItems", this.batchItems, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeocodingBatchRequestBody from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeocodingBatchRequestBody if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GeocodingBatchRequestBody.
     */
    public static GeocodingBatchRequestBody fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeocodingBatchRequestBody deserializedGeocodingBatchRequestBody = new GeocodingBatchRequestBody();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("batchItems".equals(fieldName)) {
                    List<GeocodingBatchRequestItem> batchItems
                        = reader.readArray(reader1 -> GeocodingBatchRequestItem.fromJson(reader1));
                    deserializedGeocodingBatchRequestBody.batchItems = batchItems;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGeocodingBatchRequestBody;
        });
    }
}
