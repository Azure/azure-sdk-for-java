// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The viewport that covers the result represented by the top-left and bottom-right coordinates of the viewport.
 */
@Fluent
public final class Viewport implements JsonSerializable<Viewport> {
    /*
     * A location represented as a latitude and longitude using short names 'lat' & 'lon'.
     */
    private LatLongPairAbbreviated topLeftPoint;

    /*
     * A location represented as a latitude and longitude using short names 'lat' & 'lon'.
     */
    private LatLongPairAbbreviated btmRightPoint;

    /**
     * Creates an instance of Viewport class.
     */
    public Viewport() {
    }

    /**
     * Get the topLeftPoint property: A location represented as a latitude and longitude using short names 'lat' &amp;
     * 'lon'.
     * 
     * @return the topLeftPoint value.
     */
    public LatLongPairAbbreviated getTopLeftPoint() {
        return this.topLeftPoint;
    }

    /**
     * Set the topLeftPoint property: A location represented as a latitude and longitude using short names 'lat' &amp;
     * 'lon'.
     * 
     * @param topLeftPoint the topLeftPoint value to set.
     * @return the Viewport object itself.
     */
    public Viewport setTopLeftPoint(LatLongPairAbbreviated topLeftPoint) {
        this.topLeftPoint = topLeftPoint;
        return this;
    }

    /**
     * Get the btmRightPoint property: A location represented as a latitude and longitude using short names 'lat' &amp;
     * 'lon'.
     * 
     * @return the btmRightPoint value.
     */
    public LatLongPairAbbreviated getBtmRightPoint() {
        return this.btmRightPoint;
    }

    /**
     * Set the btmRightPoint property: A location represented as a latitude and longitude using short names 'lat' &amp;
     * 'lon'.
     * 
     * @param btmRightPoint the btmRightPoint value to set.
     * @return the Viewport object itself.
     */
    public Viewport setBtmRightPoint(LatLongPairAbbreviated btmRightPoint) {
        this.btmRightPoint = btmRightPoint;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("topLeftPoint", this.topLeftPoint);
        jsonWriter.writeJsonField("btmRightPoint", this.btmRightPoint);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Viewport from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Viewport if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Viewport.
     */
    public static Viewport fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Viewport deserializedViewport = new Viewport();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("topLeftPoint".equals(fieldName)) {
                    deserializedViewport.topLeftPoint = LatLongPairAbbreviated.fromJson(reader);
                } else if ("btmRightPoint".equals(fieldName)) {
                    deserializedViewport.btmRightPoint = LatLongPairAbbreviated.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedViewport;
        });
    }
}
