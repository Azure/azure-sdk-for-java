// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.search.models.FeatureCollectionEnum;
import java.io.IOException;
import java.util.List;

/**
 * The GeocodingBatchResponseItem model.
 */
@Fluent
public final class GeocodingBatchResponseItem implements JsonSerializable<GeocodingBatchResponseItem> {
    /*
     * id of the batchItem which would be the same as the id in the request
     */
    private String optionalId;

    /*
     * The type of a FeatureCollection object must be FeatureCollection.
     */
    private FeatureCollectionEnum type;

    /*
     * The features property.
     */
    private List<FeaturesItem> features;

    /*
     * The is the link to the next page of the features returned. If it's the last page, no this field.
     */
    private String nextLink;

    /*
     * The error detail.
     */
    private ErrorDetail error;

    /**
     * Creates an instance of GeocodingBatchResponseItem class.
     */
    public GeocodingBatchResponseItem() {
    }

    /**
     * Get the optionalId property: id of the batchItem which would be the same as the id in the request.
     * 
     * @return the optionalId value.
     */
    public String getOptionalId() {
        return this.optionalId;
    }

    /**
     * Set the optionalId property: id of the batchItem which would be the same as the id in the request.
     * 
     * @param optionalId the optionalId value to set.
     * @return the GeocodingBatchResponseItem object itself.
     */
    public GeocodingBatchResponseItem setOptionalId(String optionalId) {
        this.optionalId = optionalId;
        return this;
    }

    /**
     * Get the type property: The type of a FeatureCollection object must be FeatureCollection.
     * 
     * @return the type value.
     */
    public FeatureCollectionEnum getType() {
        return this.type;
    }

    /**
     * Set the type property: The type of a FeatureCollection object must be FeatureCollection.
     * 
     * @param type the type value to set.
     * @return the GeocodingBatchResponseItem object itself.
     */
    public GeocodingBatchResponseItem setType(FeatureCollectionEnum type) {
        this.type = type;
        return this;
    }

    /**
     * Get the features property: The features property.
     * 
     * @return the features value.
     */
    public List<FeaturesItem> getFeatures() {
        return this.features;
    }

    /**
     * Set the features property: The features property.
     * 
     * @param features the features value to set.
     * @return the GeocodingBatchResponseItem object itself.
     */
    public GeocodingBatchResponseItem setFeatures(List<FeaturesItem> features) {
        this.features = features;
        return this;
    }

    /**
     * Get the nextLink property: The is the link to the next page of the features returned. If it's the last page, no
     * this field.
     * 
     * @return the nextLink value.
     */
    public String getNextLink() {
        return this.nextLink;
    }

    /**
     * Set the nextLink property: The is the link to the next page of the features returned. If it's the last page, no
     * this field.
     * 
     * @param nextLink the nextLink value to set.
     * @return the GeocodingBatchResponseItem object itself.
     */
    public GeocodingBatchResponseItem setNextLink(String nextLink) {
        this.nextLink = nextLink;
        return this;
    }

    /**
     * Get the error property: The error detail.
     * 
     * @return the error value.
     */
    public ErrorDetail getError() {
        return this.error;
    }

    /**
     * Set the error property: The error detail.
     * 
     * @param error the error value to set.
     * @return the GeocodingBatchResponseItem object itself.
     */
    public GeocodingBatchResponseItem setError(ErrorDetail error) {
        this.error = error;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("optionalId", this.optionalId);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeArrayField("features", this.features, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("nextLink", this.nextLink);
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeocodingBatchResponseItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeocodingBatchResponseItem if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GeocodingBatchResponseItem.
     */
    public static GeocodingBatchResponseItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeocodingBatchResponseItem deserializedGeocodingBatchResponseItem = new GeocodingBatchResponseItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("optionalId".equals(fieldName)) {
                    deserializedGeocodingBatchResponseItem.optionalId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedGeocodingBatchResponseItem.type = FeatureCollectionEnum.fromString(reader.getString());
                } else if ("features".equals(fieldName)) {
                    List<FeaturesItem> features = reader.readArray(reader1 -> FeaturesItem.fromJson(reader1));
                    deserializedGeocodingBatchResponseItem.features = features;
                } else if ("nextLink".equals(fieldName)) {
                    deserializedGeocodingBatchResponseItem.nextLink = reader.getString();
                } else if ("error".equals(fieldName)) {
                    deserializedGeocodingBatchResponseItem.error = ErrorDetail.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGeocodingBatchResponseItem;
        });
    }
}
