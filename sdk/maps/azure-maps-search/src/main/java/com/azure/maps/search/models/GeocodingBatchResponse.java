// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.search.implementation.models.GeocodingBatchResponseItem;
import java.io.IOException;
import java.util.List;

/**
 * This object is returned from a successful Geocoding Batch service call.
 */
@Fluent
public final class GeocodingBatchResponse implements JsonSerializable<GeocodingBatchResponse> {
    /*
     * Summary for the batch request
     */
    private GeocodingBatchResponseSummary summary;

    /*
     * Array containing the batch results.
     */
    private List<GeocodingBatchResponseItem> batchItems;

    /*
     * The is the link to the next page of the features returned. If it's the last page, no this field.
     */
    private String nextLink;

    /**
     * Creates an instance of GeocodingBatchResponse class.
     */
    public GeocodingBatchResponse() {
    }

    /**
     * Get the summary property: Summary for the batch request.
     * 
     * @return the summary value.
     */
    public GeocodingBatchResponseSummary getSummary() {
        return this.summary;
    }

    /**
     * Set the summary property: Summary for the batch request.
     * 
     * @param summary the summary value to set.
     * @return the GeocodingBatchResponse object itself.
     */
    public GeocodingBatchResponse setSummary(GeocodingBatchResponseSummary summary) {
        this.summary = summary;
        return this;
    }

    /**
     * Get the batchItems property: Array containing the batch results.
     * 
     * @return the batchItems value.
     */
    public List<GeocodingBatchResponseItem> getBatchItems() {
        return this.batchItems;
    }

    /**
     * Set the batchItems property: Array containing the batch results.
     * 
     * @param batchItems the batchItems value to set.
     * @return the GeocodingBatchResponse object itself.
     */
    public GeocodingBatchResponse setBatchItems(List<GeocodingBatchResponseItem> batchItems) {
        this.batchItems = batchItems;
        return this;
    }

    /**
     * Get the nextLink property: The is the link to the next page of the features returned. If it's the last page, no
     * this field.
     * 
     * @return the nextLink value.
     */
    public String getNextLink() {
        return this.nextLink;
    }

    /**
     * Set the nextLink property: The is the link to the next page of the features returned. If it's the last page, no
     * this field.
     * 
     * @param nextLink the nextLink value to set.
     * @return the GeocodingBatchResponse object itself.
     */
    public GeocodingBatchResponse setNextLink(String nextLink) {
        this.nextLink = nextLink;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("summary", this.summary);
        jsonWriter.writeArrayField("batchItems", this.batchItems, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("nextLink", this.nextLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeocodingBatchResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeocodingBatchResponse if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GeocodingBatchResponse.
     */
    public static GeocodingBatchResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeocodingBatchResponse deserializedGeocodingBatchResponse = new GeocodingBatchResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("summary".equals(fieldName)) {
                    deserializedGeocodingBatchResponse.summary = GeocodingBatchResponseSummary.fromJson(reader);
                } else if ("batchItems".equals(fieldName)) {
                    List<GeocodingBatchResponseItem> batchItems
                        = reader.readArray(reader1 -> GeocodingBatchResponseItem.fromJson(reader1));
                    deserializedGeocodingBatchResponse.batchItems = batchItems;
                } else if ("nextLink".equals(fieldName)) {
                    deserializedGeocodingBatchResponse.nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGeocodingBatchResponse;
        });
    }
}
