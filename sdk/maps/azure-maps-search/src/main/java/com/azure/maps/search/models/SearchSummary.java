// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.search.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.search.implementation.models.LatLongPairAbbreviated;
import java.io.IOException;
import com.azure.core.models.GeoPosition;

/**
 * Summary object for a Search API response.
 */
@Immutable
public final class SearchSummary implements JsonSerializable<SearchSummary> {

    /*
     * The query parameter that was used to produce these search results.
     */
    private String query;

    /*
     * The type of query being returned: NEARBY or NON_NEAR.
     */
    private QueryType queryType;

    /*
     * Time spent resolving the query, in milliseconds.
     */
    private Integer queryTime;

    /*
     * Number of results in the response.
     */
    private Integer numResults;

    /*
     * Maximum number of responses that will be returned
     */
    private Integer top;

    /*
     * The starting offset of the returned Results within the full Result set.
     */
    private Integer skip;

    /*
     * The total number of Results found.
     */
    private Integer totalResults;

    /*
     * The maximum fuzzy level required to provide Results.
     */
    private Integer fuzzyLevel;

    /*
     * Indication when the internal search engine has applied a geospatial bias to improve the ranking of results.  In  some methods, this can be affected by setting the lat and lon parameters where available.  In other cases it is  purely internal.
     */
    private LatLongPairAbbreviated geoBias;

    /**
     * Creates an instance of SearchSummary class.
     */
    public SearchSummary() {
    }

    /**
     * Get the query property: The query parameter that was used to produce these search results.
     *
     * @return the query value.
     */
    public String getQuery() {
        return this.query;
    }

    /**
     * Get the queryType property: The type of query being returned: NEARBY or NON_NEAR.
     *
     * @return the queryType value.
     */
    public QueryType getQueryType() {
        return this.queryType;
    }

    /**
     * Get the queryTime property: Time spent resolving the query, in milliseconds.
     *
     * @return the queryTime value.
     */
    public Integer getQueryTime() {
        return this.queryTime;
    }

    /**
     * Get the numResults property: Number of results in the response.
     *
     * @return the numResults value.
     */
    public Integer getNumResults() {
        return this.numResults;
    }

    /**
     * Get the top property: Maximum number of responses that will be returned.
     *
     * @return the top value.
     */
    public Integer getTop() {
        return this.top;
    }

    /**
     * Get the skip property: The starting offset of the returned Results within the full Result set.
     *
     * @return the skip value.
     */
    public Integer getSkip() {
        return this.skip;
    }

    /**
     * Get the totalResults property: The total number of Results found.
     *
     * @return the totalResults value.
     */
    public Integer getTotalResults() {
        return this.totalResults;
    }

    /**
     * Get the fuzzyLevel property: The maximum fuzzy level required to provide Results.
     *
     * @return the fuzzyLevel value.
     */
    public Integer getFuzzyLevel() {
        return this.fuzzyLevel;
    }

    /**
     * Get the geoBias property: Indication when the internal search engine has applied a geospatial bias to improve the
     * ranking of results. In some methods, this can be affected by setting the lat and lon parameters where available.
     * In other cases it is purely internal.
     *
     * @return the geoBias value.
     */
    public GeoPosition getGeoBias() {
        return this.geoBias != null ? new GeoPosition(this.geoBias.getLon(), this.geoBias.getLat()) : null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchSummary from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchSummary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SearchSummary.
     */
    public static SearchSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchSummary deserializedSearchSummary = new SearchSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("query".equals(fieldName)) {
                    deserializedSearchSummary.query = reader.getString();
                } else if ("queryType".equals(fieldName)) {
                    deserializedSearchSummary.queryType = QueryType.fromString(reader.getString());
                } else if ("queryTime".equals(fieldName)) {
                    deserializedSearchSummary.queryTime = reader.getNullable(JsonReader::getInt);
                } else if ("numResults".equals(fieldName)) {
                    deserializedSearchSummary.numResults = reader.getNullable(JsonReader::getInt);
                } else if ("limit".equals(fieldName)) {
                    deserializedSearchSummary.top = reader.getNullable(JsonReader::getInt);
                } else if ("offset".equals(fieldName)) {
                    deserializedSearchSummary.skip = reader.getNullable(JsonReader::getInt);
                } else if ("totalResults".equals(fieldName)) {
                    deserializedSearchSummary.totalResults = reader.getNullable(JsonReader::getInt);
                } else if ("fuzzyLevel".equals(fieldName)) {
                    deserializedSearchSummary.fuzzyLevel = reader.getNullable(JsonReader::getInt);
                } else if ("geoBias".equals(fieldName)) {
                    deserializedSearchSummary.geoBias = LatLongPairAbbreviated.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedSearchSummary;
        });
    }
}
