// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.models.GeoPosition;
import com.azure.maps.search.implementation.helpers.SearchSummaryPropertiesHelper;
import com.azure.maps.search.implementation.models.SearchSummaryPrivate;
import com.fasterxml.jackson.annotation.JsonIgnore;

/** Summary object for a Search API response. */
@Immutable
public final class SearchSummary {
    private String query;
    private QueryType queryType;
    private Integer queryTime;
    private Integer numResults;
    private Integer top;
    private Integer skip;
    private Integer totalResults;
    private Integer fuzzyLevel;
    @JsonIgnore
    private GeoPosition geoBias;

    static {
        SearchSummaryPropertiesHelper.setAccessor(new SearchSummaryPropertiesHelper.SearchSummaryAccessor() {
            @Override
            public void setFromPrivateSearchSummary(SearchSummary searchSummary,
                    SearchSummaryPrivate privateSearchSummary) {
                searchSummary.setFromPrivateSearchSummary(privateSearchSummary);
            }
        });
    }

    /**
     * Get the query property: The query parameter that was used to produce these search results.
     *
     * @return the query value.
     */
    public String getQuery() {
        return this.query;
    }

    /**
     * Get the queryType property: The type of query being returned: NEARBY or NON_NEAR.
     *
     * @return the queryType value.
     */
    public QueryType getQueryType() {
        return this.queryType;
    }

    /**
     * Get the queryTime property: Time spent resolving the query, in milliseconds.
     *
     * @return the queryTime value.
     */
    public Integer getQueryTime() {
        return this.queryTime;
    }

    /**
     * Get the numResults property: Number of results in the response.
     *
     * @return the numResults value.
     */
    public Integer getNumResults() {
        return this.numResults;
    }

    /**
     * Get the top property: Maximum number of responses that will be returned.
     *
     * @return the top value.
     */
    public Integer getTop() {
        return this.top;
    }

    /**
     * Get the skip property: The starting offset of the returned Results within the full Result set.
     *
     * @return the skip value.
     */
    public Integer getSkip() {
        return this.skip;
    }

    /**
     * Get the totalResults property: The total number of Results found.
     *
     * @return the totalResults value.
     */
    public Integer getTotalResults() {
        return this.totalResults;
    }

    /**
     * Get the fuzzyLevel property: The maximum fuzzy level required to provide Results.
     *
     * @return the fuzzyLevel value.
     */
    public Integer getFuzzyLevel() {
        return this.fuzzyLevel;
    }

    /**
     * Get the geoBias property: Indication when the internal search engine has applied a geospatial bias to improve the
     * ranking of results. In some methods, this can be affected by setting the lat and lon parameters where available.
     * In other cases it is purely internal.
     *
     * @return the geoBias value.
     */
    public GeoPosition getGeoBias() {
        return this.geoBias;
    }

    // private setter
    private void setFromPrivateSearchSummary(SearchSummaryPrivate privateSearchSummary) {
        this.query = privateSearchSummary.getQuery();
        this.queryType = privateSearchSummary.getQueryType();
        this.queryTime = privateSearchSummary.getQueryTime();
        this.numResults = privateSearchSummary.getNumResults();
        this.top = privateSearchSummary.getTop();
        this.skip = privateSearchSummary.getSkip();
        this.totalResults = privateSearchSummary.getTotalResults();
        this.fuzzyLevel = privateSearchSummary.getFuzzyLevel();

        if (privateSearchSummary.getGeoBias() != null) {
            this.geoBias = new GeoPosition(privateSearchSummary.getGeoBias().getLon(),
                privateSearchSummary.getGeoBias().getLat());
        }
    }
}
