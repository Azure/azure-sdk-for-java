// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.search.implementation.models.GeometryCopyright;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import com.azure.core.models.GeoBoundingBox;

/**
 * `GeoJSON GeocodingFeature` object that describe the boundaries of a geographical area. Geometry of the feature is
 * described with `GeoJSON GeometryCollection`.
 *
 * Please note, the service typically returns a GeometryCollection with Polygon or MultiPolygon sub-types.
 */
@Fluent
public final class Boundary extends GeoJsonFeature {

    /*
     * Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
     */
    private GeoJsonObjectType type = GeoJsonObjectType.fromString("Boundary");

    /*
     * The name associated with the geographical area.
     */
    private String name;

    /*
     * The copyright string.
     */
    private String copyright;

    /*
     * A URL that lists many of the data providers for Azure Maps and their related copyright information.
     */
    private String copyrightURL;

    /*
     * A collection of copyright information for each geometry of the Boundary object in the same order they appear.
     */
    private List<GeometryCopyright> geometriesCopyright;

    /**
     * Creates an instance of Boundary class.
     */
    public Boundary() {
    }

    /**
     * Get the type property: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point,
     * MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and
     * FeatureCollection.
     *
     * @return the type value.
     */
    @Override
    public GeoJsonObjectType getType() {
        return this.type;
    }

    /**
     * Get the name property: The name associated with the geographical area.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name associated with the geographical area.
     *
     * @param name the name value to set.
     * @return the Boundary object itself.
     */
    public Boundary setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the copyright property: The copyright string.
     *
     * @return the copyright value.
     */
    public String getCopyright() {
        return this.copyright;
    }

    /**
     * Set the copyright property: The copyright string.
     *
     * @param copyright the copyright value to set.
     * @return the Boundary object itself.
     */
    public Boundary setCopyright(String copyright) {
        this.copyright = copyright;
        return this;
    }

    /**
     * Get the copyrightURL property: A URL that lists many of the data providers for Azure Maps and their related
     * copyright information.
     *
     * @return the copyrightURL value.
     */
    public String getCopyrightUrl() {
        return this.copyrightURL;
    }

    /**
     * Set the copyrightURL property: A URL that lists many of the data providers for Azure Maps and their related
     * copyright information.
     *
     * @param copyrightURL the copyrightURL value to set.
     * @return the Boundary object itself.
     */
    public Boundary setCopyrightUrl(String copyrightURL) {
        this.copyrightURL = copyrightURL;
        return this;
    }

    /**
     * Get the geometriesCopyright property: A collection of copyright information for each geometry of the Boundary
     * object in the same order they appear.
     *
     * @return the geometriesCopyright value.
     */
    public List<GeometryCopyright> getGeometriesCopyright() {
        return this.geometriesCopyright;
    }

    /**
     * Set the geometriesCopyright property: A collection of copyright information for each geometry of the Boundary
     * object in the same order they appear.
     *
     * @param geometriesCopyright the geometriesCopyright value to set.
     * @return the Boundary object itself.
     */
    public Boundary setGeometriesCopyright(List<GeometryCopyright> geometriesCopyright) {
        this.geometriesCopyright = geometriesCopyright;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boundary setGeometry(GeoJsonGeometry geometry) {
        super.setGeometry(geometry);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boundary setProperties(Object properties) {
        super.setProperties(properties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boundary setId(String id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boundary setFeatureType(String featureType) {
        super.setFeatureType(featureType);
        return this;
    }

    /**
     * /**
     * Sets the bounding box of this feature using a {@link GeoBoundingBox}.
     *
     * @param bbox The bounding box to set.
     * @return The updated Boundary object.
     * /
     */
    public Boundary setBbox(GeoBoundingBox bbox) {
        List<Double> bboxList = new ArrayList<>();
        bboxList.add(bbox.getNorth());
        bboxList.add(bbox.getWest());
        bboxList.add(bbox.getSouth());
        bboxList.add(bbox.getEast());
        super.setBbox(bboxList);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("geometry", getGeometry());
        jsonWriter.writeArrayField("bbox", getBbox(), (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeUntypedField("properties", getProperties());
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeStringField("featureType", getFeatureType());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("copyright", this.copyright);
        jsonWriter.writeStringField("copyrightURL", this.copyrightURL);
        jsonWriter.writeArrayField("geometriesCopyright", this.geometriesCopyright,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Boundary from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of Boundary if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Boundary.
     */
    public static Boundary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Boundary deserializedBoundary = new Boundary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("geometry".equals(fieldName)) {
                    deserializedBoundary.setGeometry(GeoJsonGeometry.fromJson(reader));
                } else if ("bbox".equals(fieldName)) {
                    List<Double> bbox = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedBoundary.setBbox(bbox);
                } else if ("properties".equals(fieldName)) {
                    deserializedBoundary.setProperties(reader.readUntyped());
                } else if ("id".equals(fieldName)) {
                    deserializedBoundary.setId(reader.getString());
                } else if ("featureType".equals(fieldName)) {
                    deserializedBoundary.setFeatureType(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedBoundary.type = GeoJsonObjectType.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedBoundary.name = reader.getString();
                } else if ("copyright".equals(fieldName)) {
                    deserializedBoundary.copyright = reader.getString();
                } else if ("copyrightURL".equals(fieldName)) {
                    deserializedBoundary.copyrightURL = reader.getString();
                } else if ("geometriesCopyright".equals(fieldName)) {
                    List<GeometryCopyright> geometriesCopyright
                        = reader.readArray(reader1 -> GeometryCopyright.fromJson(reader1));
                    deserializedBoundary.geometriesCopyright = geometriesCopyright;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedBoundary;
        });
    }
}
