// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.search.implementation.models.LatLongPairAbbreviated;
import java.io.IOException;
import com.azure.core.models.GeoPosition;

/**
 * Describes the address range on both sides of the street for a search result. Coordinates for the start and end
 * locations of the address range are included.
 */
@Fluent
public final class AddressRanges implements JsonSerializable<AddressRanges> {

    /*
     * Address range on the left side of the street.
     */
    private String rangeLeft;

    /*
     * Address range on the right side of the street.
     */
    private String rangeRight;

    /*
     * A location represented as a latitude and longitude using short names 'lat' & 'lon'.
     */
    private LatLongPairAbbreviated from;

    /*
     * A location represented as a latitude and longitude using short names 'lat' & 'lon'.
     */
    private LatLongPairAbbreviated to;

    /**
     * Creates an instance of AddressRanges class.
     */
    public AddressRanges() {
    }

    /**
     * Get the rangeLeft property: Address range on the left side of the street.
     *
     * @return the rangeLeft value.
     */
    public String getRangeLeft() {
        return this.rangeLeft;
    }

    /**
     * Get the rangeRight property: Address range on the right side of the street.
     *
     * @return the rangeRight value.
     */
    public String getRangeRight() {
        return this.rangeRight;
    }

    /**
     * Get the from property: A location represented as a latitude and longitude using short names 'lat' &amp; 'lon'.
     *
     * @return the from value.
     */
    public GeoPosition getFrom() {
        return new GeoPosition(this.from.getLon(), this.from.getLat());
    }

    /**
     * Get the to property: A location represented as a latitude and longitude using short names 'lat' &amp; 'lon'.
     *
     * @return the to value.
     */
    public GeoPosition getTo() {
        return new GeoPosition(this.to.getLon(), this.to.getLat());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("rangeLeft", this.rangeLeft);
        jsonWriter.writeStringField("rangeRight", this.rangeRight);
        jsonWriter.writeJsonField("from", this.from);
        jsonWriter.writeJsonField("to", this.to);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AddressRanges from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AddressRanges if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AddressRanges.
     */
    public static AddressRanges fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AddressRanges deserializedAddressRanges = new AddressRanges();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("rangeLeft".equals(fieldName)) {
                    deserializedAddressRanges.rangeLeft = reader.getString();
                } else if ("rangeRight".equals(fieldName)) {
                    deserializedAddressRanges.rangeRight = reader.getString();
                } else if ("from".equals(fieldName)) {
                    deserializedAddressRanges.from = LatLongPairAbbreviated.fromJson(reader);
                } else if ("to".equals(fieldName)) {
                    deserializedAddressRanges.to = LatLongPairAbbreviated.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedAddressRanges;
        });
    }
}
