// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.search.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of a Boundary object.
 */
@Fluent
public class BoundaryProperties implements JsonSerializable<BoundaryProperties> {

    /*
     * The name associated with the geographical area.
     */
    private String name;

    /*
     * The copyright string.
     */
    private String copyright;

    /*
     * A URL that lists many of the data providers for Azure Maps and their related copyright information.
     */
    private String copyrightURL;

    /*
     * A collection of copyright information for each geometry of the Boundary object in the same order they appear.
     */
    private List<GeometryCopyright> geometriesCopyright;

    /**
     * Creates an instance of BoundaryProperties class.
     */
    public BoundaryProperties() {
    }

    /**
     * Get the name property: The name associated with the geographical area.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name associated with the geographical area.
     *
     * @param name the name value to set.
     * @return the BoundaryProperties object itself.
     */
    public BoundaryProperties setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the copyright property: The copyright string.
     *
     * @return the copyright value.
     */
    public String getCopyright() {
        return this.copyright;
    }

    /**
     * Set the copyright property: The copyright string.
     *
     * @param copyright the copyright value to set.
     * @return the BoundaryProperties object itself.
     */
    public BoundaryProperties setCopyright(String copyright) {
        this.copyright = copyright;
        return this;
    }

    /**
     * Get the copyrightURL property: A URL that lists many of the data providers for Azure Maps and their related
     * copyright information.
     *
     * @return the copyrightURL value.
     */
    public String getCopyrightUrl() {
        return this.copyrightURL;
    }

    /**
     * Set the copyrightURL property: A URL that lists many of the data providers for Azure Maps and their related
     * copyright information.
     *
     * @param copyrightURL the copyrightURL value to set.
     * @return the BoundaryProperties object itself.
     */
    public BoundaryProperties setCopyrightUrl(String copyrightURL) {
        this.copyrightURL = copyrightURL;
        return this;
    }

    /**
     * Get the geometriesCopyright property: A collection of copyright information for each geometry of the Boundary
     * object in the same order they appear.
     *
     * @return the geometriesCopyright value.
     */
    public List<GeometryCopyright> getGeometriesCopyright() {
        return this.geometriesCopyright;
    }

    /**
     * Set the geometriesCopyright property: A collection of copyright information for each geometry of the Boundary
     * object in the same order they appear.
     *
     * @param geometriesCopyright the geometriesCopyright value to set.
     * @return the BoundaryProperties object itself.
     */
    public BoundaryProperties setGeometriesCopyright(List<GeometryCopyright> geometriesCopyright) {
        this.geometriesCopyright = geometriesCopyright;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("copyright", this.copyright);
        jsonWriter.writeStringField("copyrightURL", this.copyrightURL);
        jsonWriter.writeArrayField("geometriesCopyright", this.geometriesCopyright,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BoundaryProperties from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BoundaryProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BoundaryProperties.
     */
    public static BoundaryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BoundaryProperties deserializedBoundaryProperties = new BoundaryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    deserializedBoundaryProperties.name = reader.getString();
                } else if ("copyright".equals(fieldName)) {
                    deserializedBoundaryProperties.copyright = reader.getString();
                } else if ("copyrightURL".equals(fieldName)) {
                    deserializedBoundaryProperties.copyrightURL = reader.getString();
                } else if ("geometriesCopyright".equals(fieldName)) {
                    List<GeometryCopyright> geometriesCopyright
                        = reader.readArray(reader1 -> GeometryCopyright.fromJson(reader1));
                    deserializedBoundaryProperties.geometriesCopyright = geometriesCopyright;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedBoundaryProperties;
        });
    }
}
