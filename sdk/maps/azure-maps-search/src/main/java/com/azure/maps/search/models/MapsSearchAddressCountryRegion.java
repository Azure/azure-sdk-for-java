// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The MapsSearchAddressCountryRegion model.
 */
@Fluent
public final class MapsSearchAddressCountryRegion implements JsonSerializable<MapsSearchAddressCountryRegion> {
    /*
     * ISO of country/region
     */
    private String iSO;

    /*
     * name of country/region
     */
    private String name;

    /**
     * Creates an instance of MapsSearchAddressCountryRegion class.
     */
    public MapsSearchAddressCountryRegion() {
    }

    /**
     * Get the iSO property: ISO of country/region.
     * 
     * @return the iSO value.
     */
    public String getISO() {
        return this.iSO;
    }

    /**
     * Set the iSO property: ISO of country/region.
     * 
     * @param iSO the iSO value to set.
     * @return the MapsSearchAddressCountryRegion object itself.
     */
    public MapsSearchAddressCountryRegion setISO(String iSO) {
        this.iSO = iSO;
        return this;
    }

    /**
     * Get the name property: name of country/region.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: name of country/region.
     * 
     * @param name the name value to set.
     * @return the MapsSearchAddressCountryRegion object itself.
     */
    public MapsSearchAddressCountryRegion setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ISO", this.iSO);
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MapsSearchAddressCountryRegion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MapsSearchAddressCountryRegion if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MapsSearchAddressCountryRegion.
     */
    public static MapsSearchAddressCountryRegion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MapsSearchAddressCountryRegion deserializedMapsSearchAddressCountryRegion
                = new MapsSearchAddressCountryRegion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ISO".equals(fieldName)) {
                    deserializedMapsSearchAddressCountryRegion.iSO = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedMapsSearchAddressCountryRegion.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMapsSearchAddressCountryRegion;
        });
    }
}
