// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.search.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.search.models.SearchAddressResult;
import com.azure.maps.search.models.SearchAddressResultItem;
import com.azure.maps.search.models.SearchSummary;
import java.io.IOException;
import java.util.List;
import com.azure.core.models.ResponseError;
import com.azure.maps.search.implementation.helpers.SearchAddressResultPropertiesHelper;

/**
 * The result of the query. SearchAddressResult if the query completed successfully, ErrorResponse otherwise.
 */
@Fluent
public final class SearchAddressBatchItemPrivateResponse extends SearchAddressResult {

    /*
     * The error object.
     */
    private ErrorDetail error;

    /**
     * Creates an instance of SearchAddressBatchItemPrivateResponse class.
     */
    public SearchAddressBatchItemPrivateResponse() {
    }

    /**
     * Get the error property: The error object.
     *
     * @return the error value.
     */
    public ResponseError getError() {
        if (this.error == null) {
            return new ResponseError("", "");
        }
        return new ResponseError(this.error.getCode(), this.error.getMessage());
    }

    /**
     * Set the error property: The error object.
     *
     * @param error the error value to set.
     * @return the SearchAddressBatchItemPrivateResponse object itself.
     */
    public SearchAddressBatchItemPrivateResponse setError(ResponseError error) {
        this.error = new ErrorDetail().setCode(error.getCode()).setMessage(error.getMessage());
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchAddressBatchItemPrivateResponse from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchAddressBatchItemPrivateResponse if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SearchAddressBatchItemPrivateResponse.
     */
    public static SearchAddressBatchItemPrivateResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchAddressBatchItemPrivateResponse deserializedSearchAddressBatchItemPrivateResponse
                = new SearchAddressBatchItemPrivateResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("summary".equals(fieldName)) {
                    SearchAddressResultPropertiesHelper.setSummary(deserializedSearchAddressBatchItemPrivateResponse,
                        SearchSummary.fromJson(reader));
                } else if ("results".equals(fieldName)) {
                    List<SearchAddressResultItem> results
                        = reader.readArray(reader1 -> SearchAddressResultItem.fromJson(reader1));
                    SearchAddressResultPropertiesHelper.setResults(deserializedSearchAddressBatchItemPrivateResponse,
                        results);
                } else if ("error".equals(fieldName)) {
                    deserializedSearchAddressBatchItemPrivateResponse.error = ErrorDetail.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedSearchAddressBatchItemPrivateResponse;
        });
    }
}
