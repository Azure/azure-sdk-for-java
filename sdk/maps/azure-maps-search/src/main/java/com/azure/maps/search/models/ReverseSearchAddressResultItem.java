// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.search.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import com.azure.core.models.GeoPosition;

/**
 * Result object for a Search Address Reverse response.
 */
@Immutable
public final class ReverseSearchAddressResultItem implements JsonSerializable<ReverseSearchAddressResultItem> {

    /*
     * The address of the result
     */
    private MapsSearchAddress address;

    /*
     * Position property in the form of "{latitude},{longitude}"
     */
    private String position;

    /*
     * The roadUse property.
     */
    private List<RoadUseType> roadUse;

    /*
     * Information on the type of match.
     * 
     * One of:
     *   * AddressPoint
     *   * HouseNumberRange
     *   * Street
     */
    private MatchType matchType;

    /**
     * Creates an instance of ReverseSearchAddressResultItem class.
     */
    public ReverseSearchAddressResultItem() {
    }

    /**
     * Get the address property: The address of the result.
     *
     * @return the address value.
     */
    public MapsSearchAddress getAddress() {
        return this.address;
    }

    /**
     * Get the position property: Position property in the form of "{latitude},{longitude}".
     *
     * @return the position value.
     */
    public GeoPosition getPosition() {
        return com.azure.maps.search.implementation.helpers.Utility.fromCommaSeparatedString(this.position);
    }

    /**
     * Get the roadUse property: The roadUse property.
     *
     * @return the roadUse value.
     */
    public List<RoadUseType> getRoadUse() {
        return this.roadUse;
    }

    /**
     * Get the matchType property: Information on the type of match.
     *
     * One of:
     * * AddressPoint
     * * HouseNumberRange
     * * Street.
     *
     * @return the matchType value.
     */
    public MatchType getMatchType() {
        return this.matchType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReverseSearchAddressResultItem from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReverseSearchAddressResultItem if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReverseSearchAddressResultItem.
     */
    public static ReverseSearchAddressResultItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReverseSearchAddressResultItem deserializedReverseSearchAddressResultItem
                = new ReverseSearchAddressResultItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("address".equals(fieldName)) {
                    deserializedReverseSearchAddressResultItem.address = MapsSearchAddress.fromJson(reader);
                } else if ("position".equals(fieldName)) {
                    deserializedReverseSearchAddressResultItem.position = reader.getString();
                } else if ("roadUse".equals(fieldName)) {
                    List<RoadUseType> roadUse
                        = reader.readArray(reader1 -> RoadUseType.fromString(reader1.getString()));
                    deserializedReverseSearchAddressResultItem.roadUse = roadUse;
                } else if ("matchType".equals(fieldName)) {
                    deserializedReverseSearchAddressResultItem.matchType = MatchType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedReverseSearchAddressResultItem;
        });
    }
}
