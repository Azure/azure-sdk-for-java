// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.search.implementation.models.GeoJsonObject;
import java.io.IOException;
import com.azure.core.models.GeoObject;

/**
 * The MapsPolygon model.
 */
@Fluent
public final class MapsPolygon implements JsonSerializable<MapsPolygon> {

    /*
     * ID of the returned entity
     */
    private String providerID;

    /*
     * Geometry data in GeoJSON format. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946) for details. Present only if "error" is not present.
     */
    private GeoJsonObject geometryData;

    /**
     * Creates an instance of MapsPolygon class.
     */
    public MapsPolygon() {
    }

    /**
     * Get the providerID property: ID of the returned entity.
     *
     * @return the providerID value.
     */
    public String getProviderId() {
        return this.providerID;
    }

    /**
     * Get the geometryData property: Geometry data in GeoJSON format. Please refer to [RFC
     * 7946](https://tools.ietf.org/html/rfc7946) for details. Present only if "error" is not present.
     *
     * @return the geometryData value.
     */
    public GeoObject getGeometry() {
        return com.azure.maps.search.implementation.helpers.Utility.toGeoObject(this.geometryData);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("geometryData", this.geometryData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MapsPolygon from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MapsPolygon if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MapsPolygon.
     */
    public static MapsPolygon fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MapsPolygon deserializedMapsPolygon = new MapsPolygon();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("providerID".equals(fieldName)) {
                    deserializedMapsPolygon.providerID = reader.getString();
                } else if ("geometryData".equals(fieldName)) {
                    deserializedMapsPolygon.geometryData = GeoJsonObject.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedMapsPolygon;
        });
    }
}
