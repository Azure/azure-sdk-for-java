// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.search.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.models.GeoPosition;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Batch Query object.
 */
@Fluent
public final class ReverseGeocodingBatchRequestItem implements JsonSerializable<ReverseGeocodingBatchRequestItem> {

    /*
     * id of the request which would show in corresponding batchItem
     */
    @Generated
    private String optionalId;

    /*
     * The coordinates of the location that you want to reverse geocode. Example: [lon,lat]
     */
    @Generated
    private List<Double> coordinates;

    /*
     * Specify entity types that you want in the response. Only the types you specify will be returned. If the point
     * cannot be mapped to the entity types you specify, no location information is returned in the response.
     * Default value is all possible entities.
     * A comma separated list of entity types selected from the following options.
     * 
     * - Address
     * - Neighborhood
     * - PopulatedPlace
     * - Postcode1
     * - AdminDivision1
     * - AdminDivision2
     * - CountryRegion
     * 
     * These entity types are ordered from the most specific entity to the least specific entity. When entities of more
     * than one entity type are found, only the most specific entity is returned. For example, if you specify Address
     * and AdminDistrict1 as entity types and entities were found for both types, only the Address entity information is
     * returned in the response.
     */
    @Generated
    private List<ResultTypeEnum> resultTypes;

    /*
     * A string that specifies an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region.
     */
    @Generated
    private String view;

    /**
     * Creates an instance of ReverseGeocodingBatchRequestItem class.
     */
    @Generated
    public ReverseGeocodingBatchRequestItem() {
    }

    /**
     * Get the optionalId property: id of the request which would show in corresponding batchItem.
     *
     * @return the optionalId value.
     */
    @Generated
    public String getOptionalId() {
        return this.optionalId;
    }

    /**
     * Set the optionalId property: id of the request which would show in corresponding batchItem.
     *
     * @param optionalId the optionalId value to set.
     * @return the ReverseGeocodingBatchRequestItem object itself.
     */
    @Generated
    public ReverseGeocodingBatchRequestItem setOptionalId(String optionalId) {
        this.optionalId = optionalId;
        return this;
    }

    /**
     * Get the coordinates property: The coordinates of the location that you want to reverse geocode. Example:
     * [lon,lat].
     *
     * @return the coordinates value.
     */
    @Generated
    public GeoPosition getCoordinates() {
        return com.azure.maps.search.implementation.helpers.Utility.fromDoubleList(this.coordinates);
    }

    /**
     * Set the coordinates property: The coordinates of the location that you want to reverse geocode. Example:
     * [lon,lat].
     *
     * @param coordinates the coordinates value to set.
     * @return the ReverseGeocodingBatchRequestItem object itself.
     */
    @Generated
    public ReverseGeocodingBatchRequestItem setCoordinates(GeoPosition coordinates) {
        this.coordinates = new ArrayList<>();
        this.coordinates.add(coordinates.getLongitude());
        this.coordinates.add(coordinates.getLatitude());
        return this;
    }

    /**
     * Get the resultTypes property: Specify entity types that you want in the response. Only the types you specify will
     * be returned. If the point cannot be mapped to the entity types you specify, no location information is returned
     * in the response.
     * Default value is all possible entities.
     * A comma separated list of entity types selected from the following options.
     *
     * - Address
     * - Neighborhood
     * - PopulatedPlace
     * - Postcode1
     * - AdminDivision1
     * - AdminDivision2
     * - CountryRegion
     *
     * These entity types are ordered from the most specific entity to the least specific entity. When entities of more
     * than one entity type are found, only the most specific entity is returned. For example, if you specify Address
     * and AdminDistrict1 as entity types and entities were found for both types, only the Address entity information is
     * returned in the response.
     *
     * @return the resultTypes value.
     */
    @Generated
    public List<ResultTypeEnum> getResultTypes() {
        return this.resultTypes;
    }

    /**
     * Set the resultTypes property: Specify entity types that you want in the response. Only the types you specify will
     * be returned. If the point cannot be mapped to the entity types you specify, no location information is returned
     * in the response.
     * Default value is all possible entities.
     * A comma separated list of entity types selected from the following options.
     *
     * - Address
     * - Neighborhood
     * - PopulatedPlace
     * - Postcode1
     * - AdminDivision1
     * - AdminDivision2
     * - CountryRegion
     *
     * These entity types are ordered from the most specific entity to the least specific entity. When entities of more
     * than one entity type are found, only the most specific entity is returned. For example, if you specify Address
     * and AdminDistrict1 as entity types and entities were found for both types, only the Address entity information is
     * returned in the response.
     *
     * @param resultTypes the resultTypes value to set.
     * @return the ReverseGeocodingBatchRequestItem object itself.
     */
    @Generated
    public ReverseGeocodingBatchRequestItem setResultTypes(List<ResultTypeEnum> resultTypes) {
        this.resultTypes = resultTypes;
        return this;
    }

    /**
     * Get the view property: A string that specifies an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region.
     *
     * @return the view value.
     */
    @Generated
    public String getView() {
        return this.view;
    }

    /**
     * Set the view property: A string that specifies an [ISO 3166-1 Alpha-2 region/country
     * code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels
     * to align with the specified user region.
     *
     * @param view the view value to set.
     * @return the ReverseGeocodingBatchRequestItem object itself.
     */
    @Generated
    public ReverseGeocodingBatchRequestItem setView(String view) {
        this.view = view;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("optionalId", this.optionalId);
        jsonWriter.writeArrayField("coordinates", this.coordinates, (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeArrayField("resultTypes", this.resultTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("view", this.view);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReverseGeocodingBatchRequestItem from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReverseGeocodingBatchRequestItem if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReverseGeocodingBatchRequestItem.
     */
    @Generated
    public static ReverseGeocodingBatchRequestItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReverseGeocodingBatchRequestItem deserializedReverseGeocodingBatchRequestItem
                = new ReverseGeocodingBatchRequestItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("optionalId".equals(fieldName)) {
                    deserializedReverseGeocodingBatchRequestItem.optionalId = reader.getString();
                } else if ("coordinates".equals(fieldName)) {
                    List<Double> coordinates = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedReverseGeocodingBatchRequestItem.coordinates = coordinates;
                } else if ("resultTypes".equals(fieldName)) {
                    List<ResultTypeEnum> resultTypes
                        = reader.readArray(reader1 -> ResultTypeEnum.fromString(reader1.getString()));
                    deserializedReverseGeocodingBatchRequestItem.resultTypes = resultTypes;
                } else if ("view".equals(fieldName)) {
                    deserializedReverseGeocodingBatchRequestItem.view = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedReverseGeocodingBatchRequestItem;
        });
    }
}
