// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maps.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Creator resource properties.
 */
@Fluent
public final class CreatorProperties implements JsonSerializable<CreatorProperties> {
    /*
     * The state of the resource provisioning, terminal states: Succeeded, Failed, Canceled
     */
    private String provisioningState;

    /*
     * The storage units to be allocated. Integer values from 1 to 100, inclusive.
     */
    private int storageUnits;

    /**
     * Creates an instance of CreatorProperties class.
     */
    public CreatorProperties() {
    }

    /**
     * Get the provisioningState property: The state of the resource provisioning, terminal states: Succeeded, Failed,
     * Canceled.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the storageUnits property: The storage units to be allocated. Integer values from 1 to 100, inclusive.
     * 
     * @return the storageUnits value.
     */
    public int storageUnits() {
        return this.storageUnits;
    }

    /**
     * Set the storageUnits property: The storage units to be allocated. Integer values from 1 to 100, inclusive.
     * 
     * @param storageUnits the storageUnits value to set.
     * @return the CreatorProperties object itself.
     */
    public CreatorProperties withStorageUnits(int storageUnits) {
        this.storageUnits = storageUnits;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("storageUnits", this.storageUnits);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreatorProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreatorProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreatorProperties.
     */
    public static CreatorProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreatorProperties deserializedCreatorProperties = new CreatorProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageUnits".equals(fieldName)) {
                    deserializedCreatorProperties.storageUnits = reader.getInt();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedCreatorProperties.provisioningState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCreatorProperties;
        });
    }
}
