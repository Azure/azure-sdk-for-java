// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maps.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Parameters used to create an account Shared Access Signature (SAS) token. The REST API access control is provided by
 * Azure Maps Role Based Access (RBAC) identity and access.
 */
@Fluent
public final class AccountSasParameters {
    /*
     * The Map account key to use for signing. Picking `primaryKey` or `secondaryKey` will use the Map account Shared
     * Keys, and using `managedIdentity` will use the auto-renewed private key to sign the SAS.
     */
    @JsonProperty(value = "signingKey", required = true)
    private SigningKey signingKey;

    /*
     * The principal Id also known as the object Id of a User Assigned Managed Identity currently assigned to the Map
     * Account. To assign a Managed Identity of the account, use operation Create or Update an assign a User Assigned
     * Identity resource Id.
     */
    @JsonProperty(value = "principalId", required = true)
    private String principalId;

    /*
     * Optional, allows control of which region locations are permitted access to Azure Maps REST APIs with the SAS
     * token. Example: "eastus", "westus2". Omitting this parameter will allow all region locations to be accessible.
     */
    @JsonProperty(value = "regions")
    private List<String> regions;

    /*
     * Required parameter which represents the desired maximum request per second to allowed for the given SAS token.
     * This does not guarantee perfect accuracy in measurements but provides application safe guards of abuse with
     * eventual enforcement.
     */
    @JsonProperty(value = "maxRatePerSecond", required = true)
    private int maxRatePerSecond;

    /*
     * The date time offset of when the token validity begins. For example "2017-05-24T10:42:03.1567373Z". Maximum
     * duration allowed is 24 hours between `start` and `expiry`.
     */
    @JsonProperty(value = "start", required = true)
    private String start;

    /*
     * The date time offset of when the token validity expires. For example "2017-05-24T10:42:03.1567373Z". Maximum
     * duration allowed is 24 hours between `start` and `expiry`.
     */
    @JsonProperty(value = "expiry", required = true)
    private String expiry;

    /** Creates an instance of AccountSasParameters class. */
    public AccountSasParameters() {
    }

    /**
     * Get the signingKey property: The Map account key to use for signing. Picking `primaryKey` or `secondaryKey` will
     * use the Map account Shared Keys, and using `managedIdentity` will use the auto-renewed private key to sign the
     * SAS.
     *
     * @return the signingKey value.
     */
    public SigningKey signingKey() {
        return this.signingKey;
    }

    /**
     * Set the signingKey property: The Map account key to use for signing. Picking `primaryKey` or `secondaryKey` will
     * use the Map account Shared Keys, and using `managedIdentity` will use the auto-renewed private key to sign the
     * SAS.
     *
     * @param signingKey the signingKey value to set.
     * @return the AccountSasParameters object itself.
     */
    public AccountSasParameters withSigningKey(SigningKey signingKey) {
        this.signingKey = signingKey;
        return this;
    }

    /**
     * Get the principalId property: The principal Id also known as the object Id of a User Assigned Managed Identity
     * currently assigned to the Map Account. To assign a Managed Identity of the account, use operation Create or
     * Update an assign a User Assigned Identity resource Id.
     *
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Set the principalId property: The principal Id also known as the object Id of a User Assigned Managed Identity
     * currently assigned to the Map Account. To assign a Managed Identity of the account, use operation Create or
     * Update an assign a User Assigned Identity resource Id.
     *
     * @param principalId the principalId value to set.
     * @return the AccountSasParameters object itself.
     */
    public AccountSasParameters withPrincipalId(String principalId) {
        this.principalId = principalId;
        return this;
    }

    /**
     * Get the regions property: Optional, allows control of which region locations are permitted access to Azure Maps
     * REST APIs with the SAS token. Example: "eastus", "westus2". Omitting this parameter will allow all region
     * locations to be accessible.
     *
     * @return the regions value.
     */
    public List<String> regions() {
        return this.regions;
    }

    /**
     * Set the regions property: Optional, allows control of which region locations are permitted access to Azure Maps
     * REST APIs with the SAS token. Example: "eastus", "westus2". Omitting this parameter will allow all region
     * locations to be accessible.
     *
     * @param regions the regions value to set.
     * @return the AccountSasParameters object itself.
     */
    public AccountSasParameters withRegions(List<String> regions) {
        this.regions = regions;
        return this;
    }

    /**
     * Get the maxRatePerSecond property: Required parameter which represents the desired maximum request per second to
     * allowed for the given SAS token. This does not guarantee perfect accuracy in measurements but provides
     * application safe guards of abuse with eventual enforcement.
     *
     * @return the maxRatePerSecond value.
     */
    public int maxRatePerSecond() {
        return this.maxRatePerSecond;
    }

    /**
     * Set the maxRatePerSecond property: Required parameter which represents the desired maximum request per second to
     * allowed for the given SAS token. This does not guarantee perfect accuracy in measurements but provides
     * application safe guards of abuse with eventual enforcement.
     *
     * @param maxRatePerSecond the maxRatePerSecond value to set.
     * @return the AccountSasParameters object itself.
     */
    public AccountSasParameters withMaxRatePerSecond(int maxRatePerSecond) {
        this.maxRatePerSecond = maxRatePerSecond;
        return this;
    }

    /**
     * Get the start property: The date time offset of when the token validity begins. For example
     * "2017-05-24T10:42:03.1567373Z". Maximum duration allowed is 24 hours between `start` and `expiry`.
     *
     * @return the start value.
     */
    public String start() {
        return this.start;
    }

    /**
     * Set the start property: The date time offset of when the token validity begins. For example
     * "2017-05-24T10:42:03.1567373Z". Maximum duration allowed is 24 hours between `start` and `expiry`.
     *
     * @param start the start value to set.
     * @return the AccountSasParameters object itself.
     */
    public AccountSasParameters withStart(String start) {
        this.start = start;
        return this;
    }

    /**
     * Get the expiry property: The date time offset of when the token validity expires. For example
     * "2017-05-24T10:42:03.1567373Z". Maximum duration allowed is 24 hours between `start` and `expiry`.
     *
     * @return the expiry value.
     */
    public String expiry() {
        return this.expiry;
    }

    /**
     * Set the expiry property: The date time offset of when the token validity expires. For example
     * "2017-05-24T10:42:03.1567373Z". Maximum duration allowed is 24 hours between `start` and `expiry`.
     *
     * @param expiry the expiry value to set.
     * @return the AccountSasParameters object itself.
     */
    public AccountSasParameters withExpiry(String expiry) {
        this.expiry = expiry;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (signingKey() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property signingKey in model AccountSasParameters"));
        }
        if (principalId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property principalId in model AccountSasParameters"));
        }
        if (start() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property start in model AccountSasParameters"));
        }
        if (expiry() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property expiry in model AccountSasParameters"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AccountSasParameters.class);
}
