// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maps.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.maps.models.CorsRules;
import com.azure.resourcemanager.maps.models.Encryption;
import com.azure.resourcemanager.maps.models.LinkedResource;
import java.io.IOException;
import java.util.List;

/**
 * Additional Map account properties.
 */
@Fluent
public final class MapsAccountProperties implements JsonSerializable<MapsAccountProperties> {
    /*
     * A unique identifier for the maps account
     */
    private String uniqueId;

    /*
     * Allows toggle functionality on Azure Policy to disable Azure Maps local authentication support. This will disable
     * Shared Keys and Shared Access Signature Token authentication from any usage.
     */
    private Boolean disableLocalAuth;

    /*
     * The provisioning state of the Map account resource, Account updates can only be performed on terminal states.
     * Terminal states: `Succeeded` and `Failed`
     */
    private String provisioningState;

    /*
     * The array of associated resources to the Map account. Linked resource in the array cannot individually update,
     * you must update all linked resources in the array together. These resources may be used on operations on the
     * Azure Maps REST API. Access is controlled by the Map Account Managed Identity(s) permissions to those
     * resource(s).
     */
    private List<LinkedResource> linkedResources;

    /*
     * Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no
     * CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for
     * the Blob service.
     */
    private CorsRules cors;

    /*
     * (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform
     * (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
     */
    private Encryption encryption;

    /**
     * Creates an instance of MapsAccountProperties class.
     */
    public MapsAccountProperties() {
    }

    /**
     * Get the uniqueId property: A unique identifier for the maps account.
     * 
     * @return the uniqueId value.
     */
    public String uniqueId() {
        return this.uniqueId;
    }

    /**
     * Get the disableLocalAuth property: Allows toggle functionality on Azure Policy to disable Azure Maps local
     * authentication support. This will disable Shared Keys and Shared Access Signature Token authentication from any
     * usage.
     * 
     * @return the disableLocalAuth value.
     */
    public Boolean disableLocalAuth() {
        return this.disableLocalAuth;
    }

    /**
     * Set the disableLocalAuth property: Allows toggle functionality on Azure Policy to disable Azure Maps local
     * authentication support. This will disable Shared Keys and Shared Access Signature Token authentication from any
     * usage.
     * 
     * @param disableLocalAuth the disableLocalAuth value to set.
     * @return the MapsAccountProperties object itself.
     */
    public MapsAccountProperties withDisableLocalAuth(Boolean disableLocalAuth) {
        this.disableLocalAuth = disableLocalAuth;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the Map account resource, Account updates can only
     * be performed on terminal states. Terminal states: `Succeeded` and `Failed`.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the linkedResources property: The array of associated resources to the Map account. Linked resource in the
     * array cannot individually update, you must update all linked resources in the array together. These resources may
     * be used on operations on the Azure Maps REST API. Access is controlled by the Map Account Managed Identity(s)
     * permissions to those resource(s).
     * 
     * @return the linkedResources value.
     */
    public List<LinkedResource> linkedResources() {
        return this.linkedResources;
    }

    /**
     * Set the linkedResources property: The array of associated resources to the Map account. Linked resource in the
     * array cannot individually update, you must update all linked resources in the array together. These resources may
     * be used on operations on the Azure Maps REST API. Access is controlled by the Map Account Managed Identity(s)
     * permissions to those resource(s).
     * 
     * @param linkedResources the linkedResources value to set.
     * @return the MapsAccountProperties object itself.
     */
    public MapsAccountProperties withLinkedResources(List<LinkedResource> linkedResources) {
        this.linkedResources = linkedResources;
        return this;
    }

    /**
     * Get the cors property: Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in
     * the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS
     * will be disabled for the Blob service.
     * 
     * @return the cors value.
     */
    public CorsRules cors() {
        return this.cors;
    }

    /**
     * Set the cors property: Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in
     * the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS
     * will be disabled for the Blob service.
     * 
     * @param cors the cors value to set.
     * @return the MapsAccountProperties object itself.
     */
    public MapsAccountProperties withCors(CorsRules cors) {
        this.cors = cors;
        return this;
    }

    /**
     * Get the encryption property: (Optional) Discouraged to include in resource definition. Only needed where it is
     * possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are
     * enabled and disabled.
     * 
     * @return the encryption value.
     */
    public Encryption encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: (Optional) Discouraged to include in resource definition. Only needed where it is
     * possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are
     * enabled and disabled.
     * 
     * @param encryption the encryption value to set.
     * @return the MapsAccountProperties object itself.
     */
    public MapsAccountProperties withEncryption(Encryption encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (linkedResources() != null) {
            linkedResources().forEach(e -> e.validate());
        }
        if (cors() != null) {
            cors().validate();
        }
        if (encryption() != null) {
            encryption().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("disableLocalAuth", this.disableLocalAuth);
        jsonWriter.writeArrayField("linkedResources", this.linkedResources,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("cors", this.cors);
        jsonWriter.writeJsonField("encryption", this.encryption);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MapsAccountProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MapsAccountProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MapsAccountProperties.
     */
    public static MapsAccountProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MapsAccountProperties deserializedMapsAccountProperties = new MapsAccountProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("uniqueId".equals(fieldName)) {
                    deserializedMapsAccountProperties.uniqueId = reader.getString();
                } else if ("disableLocalAuth".equals(fieldName)) {
                    deserializedMapsAccountProperties.disableLocalAuth = reader.getNullable(JsonReader::getBoolean);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedMapsAccountProperties.provisioningState = reader.getString();
                } else if ("linkedResources".equals(fieldName)) {
                    List<LinkedResource> linkedResources
                        = reader.readArray(reader1 -> LinkedResource.fromJson(reader1));
                    deserializedMapsAccountProperties.linkedResources = linkedResources;
                } else if ("cors".equals(fieldName)) {
                    deserializedMapsAccountProperties.cors = CorsRules.fromJson(reader);
                } else if ("encryption".equals(fieldName)) {
                    deserializedMapsAccountProperties.encryption = Encryption.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMapsAccountProperties;
        });
    }
}
