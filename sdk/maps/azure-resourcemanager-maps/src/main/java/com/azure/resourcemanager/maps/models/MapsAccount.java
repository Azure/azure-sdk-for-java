// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maps.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.maps.fluent.models.MapsAccountInner;
import java.util.Map;

/** An immutable client-side representation of MapsAccount. */
public interface MapsAccount {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the sku property: The SKU of this account.
     *
     * @return the sku value.
     */
    Sku sku();

    /**
     * Gets the kind property: Get or Set Kind property.
     *
     * @return the kind value.
     */
    Kind kind();

    /**
     * Gets the systemData property: The system meta data relating to this resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the properties property: The map account properties.
     *
     * @return the properties value.
     */
    MapsAccountProperties properties();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.maps.fluent.models.MapsAccountInner object.
     *
     * @return the inner object.
     */
    MapsAccountInner innerModel();

    /** The entirety of the MapsAccount definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithSku,
            DefinitionStages.WithCreate {
    }
    /** The MapsAccount definition stages. */
    interface DefinitionStages {
        /** The first stage of the MapsAccount definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the MapsAccount definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the MapsAccount definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithSku withExistingResourceGroup(String resourceGroupName);
        }
        /** The stage of the MapsAccount definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The SKU of this account..
             *
             * @param sku The SKU of this account.
             * @return the next definition stage.
             */
            WithCreate withSku(Sku sku);
        }
        /**
         * The stage of the MapsAccount definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags, DefinitionStages.WithKind, DefinitionStages.WithProperties {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            MapsAccount create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            MapsAccount create(Context context);
        }
        /** The stage of the MapsAccount definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the MapsAccount definition allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Get or Set Kind property..
             *
             * @param kind Get or Set Kind property.
             * @return the next definition stage.
             */
            WithCreate withKind(Kind kind);
        }
        /** The stage of the MapsAccount definition allowing to specify properties. */
        interface WithProperties {
            /**
             * Specifies the properties property: The map account properties..
             *
             * @param properties The map account properties.
             * @return the next definition stage.
             */
            WithCreate withProperties(MapsAccountProperties properties);
        }
    }
    /**
     * Begins update for the MapsAccount resource.
     *
     * @return the stage of resource update.
     */
    MapsAccount.Update update();

    /** The template for MapsAccount update. */
    interface Update
        extends UpdateStages.WithTags, UpdateStages.WithKind, UpdateStages.WithSku, UpdateStages.WithDisableLocalAuth {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        MapsAccount apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        MapsAccount apply(Context context);
    }
    /** The MapsAccount update stages. */
    interface UpdateStages {
        /** The stage of the MapsAccount update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Gets or sets a list of key value pairs that describe the resource. These
             * tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can
             * be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater
             * than 256 characters..
             *
             * @param tags Gets or sets a list of key value pairs that describe the resource. These tags can be used in
             *     viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for
             *     a resource. Each tag must have a key no greater than 128 characters and value no greater than 256
             *     characters.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the MapsAccount update allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Get or Set Kind property..
             *
             * @param kind Get or Set Kind property.
             * @return the next definition stage.
             */
            Update withKind(Kind kind);
        }
        /** The stage of the MapsAccount update allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The SKU of this account..
             *
             * @param sku The SKU of this account.
             * @return the next definition stage.
             */
            Update withSku(Sku sku);
        }
        /** The stage of the MapsAccount update allowing to specify disableLocalAuth. */
        interface WithDisableLocalAuth {
            /**
             * Specifies the disableLocalAuth property: Allows toggle functionality on Azure Policy to disable Azure
             * Maps local authentication support. This will disable Shared Keys authentication from any usage..
             *
             * @param disableLocalAuth Allows toggle functionality on Azure Policy to disable Azure Maps local
             *     authentication support. This will disable Shared Keys authentication from any usage.
             * @return the next definition stage.
             */
            Update withDisableLocalAuth(Boolean disableLocalAuth);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    MapsAccount refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    MapsAccount refresh(Context context);

    /**
     * Get the keys to use with the Maps APIs. A key is used to authenticate and authorize access to the Maps REST APIs.
     * Only one key is needed at a time; two are given to provide seamless key regeneration.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the keys to use with the Maps APIs.
     */
    MapsAccountKeys listKeys();

    /**
     * Get the keys to use with the Maps APIs. A key is used to authenticate and authorize access to the Maps REST APIs.
     * Only one key is needed at a time; two are given to provide seamless key regeneration.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the keys to use with the Maps APIs.
     */
    Response<MapsAccountKeys> listKeysWithResponse(Context context);

    /**
     * Regenerate either the primary or secondary key for use with the Maps APIs. The old key will stop working
     * immediately.
     *
     * @param keySpecification Which key to regenerate: primary or secondary.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the set of keys which can be used to access the Maps REST APIs.
     */
    MapsAccountKeys regenerateKeys(MapsKeySpecification keySpecification);

    /**
     * Regenerate either the primary or secondary key for use with the Maps APIs. The old key will stop working
     * immediately.
     *
     * @param keySpecification Which key to regenerate: primary or secondary.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the set of keys which can be used to access the Maps REST APIs.
     */
    Response<MapsAccountKeys> regenerateKeysWithResponse(MapsKeySpecification keySpecification, Context context);
}
