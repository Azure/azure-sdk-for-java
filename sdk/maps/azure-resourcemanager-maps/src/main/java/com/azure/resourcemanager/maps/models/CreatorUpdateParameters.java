// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maps.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Parameters used to update an existing Creator resource. */
@JsonFlatten
@Fluent
public class CreatorUpdateParameters {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CreatorUpdateParameters.class);

    /*
     * Gets or sets a list of key value pairs that describe the resource. These
     * tags can be used in viewing and grouping this resource (across resource
     * groups). A maximum of 15 tags can be provided for a resource. Each tag
     * must have a key no greater than 128 characters and value no greater than
     * 256 characters.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /*
     * The state of the resource provisioning, terminal states: Succeeded,
     * Failed, Canceled
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * The storage units to be allocated. Integer values from 1 to 100,
     * inclusive.
     */
    @JsonProperty(value = "properties.storageUnits")
    private Integer storageUnits;

    /**
     * Get the tags property: Gets or sets a list of key value pairs that describe the resource. These tags can be used
     * in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a
     * resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Gets or sets a list of key value pairs that describe the resource. These tags can be used
     * in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a
     * resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters.
     *
     * @param tags the tags value to set.
     * @return the CreatorUpdateParameters object itself.
     */
    public CreatorUpdateParameters withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the provisioningState property: The state of the resource provisioning, terminal states: Succeeded, Failed,
     * Canceled.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the storageUnits property: The storage units to be allocated. Integer values from 1 to 100, inclusive.
     *
     * @return the storageUnits value.
     */
    public Integer storageUnits() {
        return this.storageUnits;
    }

    /**
     * Set the storageUnits property: The storage units to be allocated. Integer values from 1 to 100, inclusive.
     *
     * @param storageUnits the storageUnits value to set.
     * @return the CreatorUpdateParameters object itself.
     */
    public CreatorUpdateParameters withStorageUnits(Integer storageUnits) {
        this.storageUnits = storageUnits;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
