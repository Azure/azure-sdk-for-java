// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.maps.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.maps.fluent.models.MapsAccountInner;
import com.azure.resourcemanager.maps.fluent.models.MapsAccountProperties;
import com.azure.resourcemanager.maps.models.Kind;
import com.azure.resourcemanager.maps.models.Name;
import com.azure.resourcemanager.maps.models.Sku;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MapsAccountInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MapsAccountInner model =
            BinaryData
                .fromString(
                    "{\"sku\":{\"name\":\"G2\",\"tier\":\"hq\"},\"kind\":\"Gen2\",\"properties\":{\"uniqueId\":\"ybczmehmtzo\",\"disableLocalAuth\":true,\"provisioningState\":\"h\"},\"location\":\"upi\",\"tags\":{\"ycm\":\"ybbejhph\",\"htbmuf\":\"xaobhdxbmtqioqjz\",\"rxybqsoq\":\"ownoizhw\"},\"id\":\"jgkdmbpazlobcu\",\"name\":\"pdznrbtcqqjnqgl\",\"type\":\"qgn\"}")
                .toObject(MapsAccountInner.class);
        Assertions.assertEquals("upi", model.location());
        Assertions.assertEquals("ybbejhph", model.tags().get("ycm"));
        Assertions.assertEquals(Name.G2, model.sku().name());
        Assertions.assertEquals(Kind.GEN2, model.kind());
        Assertions.assertEquals(true, model.properties().disableLocalAuth());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MapsAccountInner model =
            new MapsAccountInner()
                .withLocation("upi")
                .withTags(mapOf("ycm", "ybbejhph", "htbmuf", "xaobhdxbmtqioqjz", "rxybqsoq", "ownoizhw"))
                .withSku(new Sku().withName(Name.G2))
                .withKind(Kind.GEN2)
                .withProperties(new MapsAccountProperties().withDisableLocalAuth(true));
        model = BinaryData.fromObject(model).toObject(MapsAccountInner.class);
        Assertions.assertEquals("upi", model.location());
        Assertions.assertEquals("ybbejhph", model.tags().get("ycm"));
        Assertions.assertEquals(Name.G2, model.sku().name());
        Assertions.assertEquals(Kind.GEN2, model.kind());
        Assertions.assertEquals(true, model.properties().disableLocalAuth());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
