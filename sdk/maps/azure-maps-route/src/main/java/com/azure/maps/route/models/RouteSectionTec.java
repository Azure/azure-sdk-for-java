// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.route.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details of the traffic event, using definitions in the [TPEG2-TEC](https://www.iso.org/standard/63116.html) standard.
 * Can contain effectCode and causes elements.
 */
@Fluent
public final class RouteSectionTec implements JsonSerializable<RouteSectionTec> {
    /*
     * The effect on the traffic flow. Contains a value in the tec001:EffectCode table, as defined in the [TPEG2-TEC](https://www.iso.org/standard/63116.html) standard. Can be used to color-code traffic events according to severity.
     */
    private Integer effectCode;

    /*
     * Causes array
     */
    private List<RouteSectionTecCause> causes;

    /**
     * Creates an instance of RouteSectionTec class.
     */
    public RouteSectionTec() {
    }

    /**
     * Get the effectCode property: The effect on the traffic flow. Contains a value in the tec001:EffectCode table, as
     * defined in the [TPEG2-TEC](https://www.iso.org/standard/63116.html) standard. Can be used to color-code traffic
     * events according to severity.
     * 
     * @return the effectCode value.
     */
    public Integer getEffectCode() {
        return this.effectCode;
    }

    /**
     * Get the causes property: Causes array.
     * 
     * @return the causes value.
     */
    public List<RouteSectionTecCause> getCauses() {
        return this.causes;
    }

    /**
     * Set the causes property: Causes array.
     * 
     * @param causes the causes value to set.
     * @return the RouteSectionTec object itself.
     */
    public RouteSectionTec setCauses(List<RouteSectionTecCause> causes) {
        this.causes = causes;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("causes", this.causes, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouteSectionTec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouteSectionTec if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RouteSectionTec.
     */
    public static RouteSectionTec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RouteSectionTec deserializedRouteSectionTec = new RouteSectionTec();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("effectCode".equals(fieldName)) {
                    deserializedRouteSectionTec.effectCode = reader.getNullable(JsonReader::getInt);
                } else if ("causes".equals(fieldName)) {
                    List<RouteSectionTecCause> causes
                        = reader.readArray(reader1 -> RouteSectionTecCause.fromJson(reader1));
                    deserializedRouteSectionTec.causes = causes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRouteSectionTec;
        });
    }
}
