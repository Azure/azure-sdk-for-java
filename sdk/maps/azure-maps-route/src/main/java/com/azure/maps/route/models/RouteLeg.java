// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.route.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.route.implementation.models.LatLongPair;
import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;
import com.azure.core.models.GeoPosition;

/**
 * A description of a part of a route, comprised of a list of points. Each additional waypoint provided in the request
 * will result in an additional leg in the returned route.
 */
@Immutable
public final class RouteLeg implements JsonSerializable<RouteLeg> {

    /*
     * Summary object for route section.
     */
    private RouteLegSummary summary;

    /*
     * Points array
     */
    private List<LatLongPair> points;

    /**
     * Creates an instance of RouteLeg class.
     */
    public RouteLeg() {
    }

    /**
     * Get the summary property: Summary object for route section.
     *
     * @return the summary value.
     */
    public RouteLegSummary getSummary() {
        return this.summary;
    }

    /**
     * Returns a list of {@link GeoPosition} coordinates.
     *
     * @return a list of {@code GeoPosition} coordinates.
     */
    public List<GeoPosition> getPoints() {
        return this.points.stream()
            .map(item -> new GeoPosition(item.getLongitude(), item.getLatitude()))
            .collect(Collectors.toList());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouteLeg from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouteLeg if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the RouteLeg.
     */
    public static RouteLeg fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RouteLeg deserializedRouteLeg = new RouteLeg();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("summary".equals(fieldName)) {
                    deserializedRouteLeg.summary = RouteLegSummary.fromJson(reader);
                } else if ("points".equals(fieldName)) {
                    List<LatLongPair> points = reader.readArray(reader1 -> LatLongPair.fromJson(reader1));
                    deserializedRouteLeg.points = points;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRouteLeg;
        });
    }
}
