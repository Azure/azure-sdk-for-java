// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.route.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.route.implementation.models.LatLongPair;
import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;
import com.azure.core.models.GeoPosition;

/**
 * Reachable Range.
 */
@Fluent
public final class RouteRange implements JsonSerializable<RouteRange> {

    /*
     * Center point of the reachable range
     */
    private LatLongPair center;

    /*
     * Polygon boundary of the reachable range represented as a list of points.
     */
    private List<LatLongPair> boundary;

    /**
     * Creates an instance of RouteRange class.
     */
    public RouteRange() {
    }

    /**
     * Returns the {@link GeoPosition} coordinates of the center of the range.
     *
     * @return a {@code GeoPosition} with the coordinates of the center.
     */
    public GeoPosition getCenter() {
        return new GeoPosition(this.center.getLongitude(), this.center.getLatitude());
    }

    /**
     * Returns a list of {@link GeoPosition} coordinates.
     *
     * @return a list of {@code GeoPosition} representing the boundary.
     */
    public List<GeoPosition> getBoundary() {
        return this.boundary.stream()
            .map(item -> new GeoPosition(item.getLongitude(), item.getLatitude()))
            .collect(Collectors.toList());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("center", this.center);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouteRange from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouteRange if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the RouteRange.
     */
    public static RouteRange fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RouteRange deserializedRouteRange = new RouteRange();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("center".equals(fieldName)) {
                    deserializedRouteRange.center = LatLongPair.fromJson(reader);
                } else if ("boundary".equals(fieldName)) {
                    List<LatLongPair> boundary = reader.readArray(reader1 -> LatLongPair.fromJson(reader1));
                    deserializedRouteRange.boundary = boundary;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRouteRange;
        });
    }
}
