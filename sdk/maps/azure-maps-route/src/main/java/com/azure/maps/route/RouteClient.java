// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.route;

import java.util.List;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.maps.route.models.ErrorResponseException;
import com.azure.maps.route.models.RouteDirections;
import com.azure.maps.route.models.RouteDirectionsBatchResult;
import com.azure.maps.route.models.RouteDirectionsOptions;
import com.azure.maps.route.models.RouteDirectionsParameters;
import com.azure.maps.route.models.RouteMatrixOptions;
import com.azure.maps.route.models.RouteMatrixResult;
import com.azure.maps.route.models.RouteRangeOptions;
import com.azure.maps.route.models.RouteRangeResult;

/** Initializes a new instance of the synchronous RouteClient type. */
@ServiceClient(builder = RouteClientBuilder.class)
public final class RouteClient {
    @Generated private final RouteAsyncClient asyncClient;

    /**
     * Initializes an instance of Routes client.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    RouteClient(RouteAsyncClient asyncClient) {
        this.asyncClient = asyncClient;
    }

    /**
     * **Applies to**: S1 pricing tier.
     * @param routeType The type of route requested.
     * @param vehicleLoadType Types of cargo that may be classified as hazardous materials and restricted from some
     *     roads. Available vehicleLoadType values are US Hazmat classes 1 through 9, plus generic classifications for
     *     use in other countries. Values beginning with USHazmat are for US routing while otherHazmat should be used
     *     for all other countries. vehicleLoadType can be specified multiple times. This parameter is currently only
     *     considered for travelMode=truck.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Route Matrix call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<RouteMatrixResult, RouteMatrixResult> beginRequestRouteMatrix(RouteMatrixOptions options) {
        return this.asyncClient.beginRequestRouteMatrix(options).getSyncPoller();
    }

    /**
     * **Applies to**: S1 pricing tier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Route Matrix call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<RouteMatrixResult, RouteMatrixResult> beginRequestRouteMatrix(
            RouteMatrixOptions options,
            Context context) {
        return this.asyncClient.beginRequestRouteMatrix(options, context).getSyncPoller();
    }

    /**
     * If the Matrix Route request was accepted successfully, the Location header in the response contains the URL to
     * download the results of the request. This status URI looks like the following:
     *
     * @param matrixId Matrix id received after the Matrix Route request was accepted successfully.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Route Matrix call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<RouteMatrixResult, RouteMatrixResult> beginGetRouteMatrix(String matrixId) {
        return this.asyncClient.beginGetRouteMatrix(matrixId).getSyncPoller();
    }

    /**
     * If the Matrix Route request was accepted successfully, the Location header in the response contains the URL to
     * download the results of the request. This status URI looks like the following:
     * @param matrixId Matrix id received after the Matrix Route request was accepted successfully.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Route Matrix call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<RouteMatrixResult, RouteMatrixResult> beginGetRouteMatrix(String matrixId, Context context) {
        return this.asyncClient.beginGetRouteMatrix(matrixId, context).getSyncPoller();
    }

    /**
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Route Directions call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouteDirections getRouteDirections(RouteDirectionsOptions options) {
        return this.asyncClient.getRouteDirections(options).block();
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Route Directions call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RouteDirections> getRouteDirectionsWithResponse(
            RouteDirectionsOptions options, Context context) {
        return this.asyncClient.getRouteDirectionsWithResponse(options, context).block();
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Route Directions call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouteDirections getRouteDirectionsWithAdditionalParameters(
            RouteDirectionsOptions options, RouteDirectionsParameters parameters) {
        return this.asyncClient.getRouteDirectionsWithAdditionalParameters(options, parameters).block();
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     * @param maxChargeInKwH Specifies the maximum electric energy supply in kilowatt hours (kWh) that may be stored in
     *     the vehicle's battery.
     *     <p>This parameter co-exists with **currentChargeInkWh** parameter.
     *     <p>Minimum value has to be greater than or equal to **currentChargeInkWh**.
     *     <p>Sensible Values : 85.
     * @param auxiliaryPowerInKw Specifies the amount of power consumed for sustaining auxiliary systems, in kilowatts
     *     (kW).
     *     <p>It can be used to specify consumption due to devices and systems such as AC systems, radio, heating, etc.
     *     <p>Sensible Values : 1.7.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Route Directions call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RouteDirections> getRouteDirectionsWithAdditionalParametersWithResponse(
            RouteDirectionsOptions options, RouteDirectionsParameters parameters, Context context) {
        return this.asyncClient.getRouteDirectionsWithAdditionalParametersWithResponse(
            options, parameters, context).block();
    }

    /**
     * __Route Range (Isochrone) API__
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>This service will calculate a set of locations that can be reached from the origin point based on fuel,
     * energy, time or distance budget that is specified. A polygon boundary (or Isochrone) is returned in a
     * counterclockwise orientation as well as the precise polygon center which was the result of the origin point.
     *
     * <p>The returned polygon can be used for further processing such as [Search Inside
     * Geometry](https://docs.microsoft.com/rest/api/maps/search/postsearchinsidegeometry) to search for POIs within the
     * provided Isochrone.
     *
     * @param format Desired format of the response. Value can be either _json_ or _xml_.
     * @param query The Coordinate from which the range calculation should start.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Route Reachable Range call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouteRangeResult getRouteRange(RouteRangeOptions options) {
        return this.asyncClient.getRouteRange(options).block();
    }

    /**
     * __Route Range (Isochrone) API__
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Route Reachable Range call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RouteRangeResult> getRouteRangeWithResponse(
            RouteRangeOptions options, Context context) {
        return this.asyncClient.getRouteRangeWithResponse(options, context).block();
    }

    /**
     * **Route Directions Batch API**
     *
     *     * @param format Desired format of the response. Only `json` format is supported.
     * @param routeDirectionsBatchQueries The list of route directions queries/requests to process. The list can contain
     *     a max of 700 queries for async and 100 queries for sync version and must contain at least 1 query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Route Directions Batch service call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<RouteDirectionsBatchResult, RouteDirectionsBatchResult>
            beginRequestRouteDirectionsBatch(List<RouteDirectionsOptions> optionsList) {
        return this.beginRequestRouteDirectionsBatch(optionsList, null);
    }

    /**
     * **Route Directions Batch API**
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param routeDirectionsBatchQueries The list of route directions queries/requests to process. The list can contain
     *     a max of 700 queries for async and 100 queries for sync version and must contain at least 1 query.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Route Directions Batch service call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<RouteDirectionsBatchResult, RouteDirectionsBatchResult>
            beginRequestRouteDirectionsBatch(List<RouteDirectionsOptions> optionsList, Context context) {
        return this.asyncClient
            .beginRequestRouteDirectionsBatch(optionsList, context).getSyncPoller();
    }

    /**
     *      * @param batchId Batch id for querying the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Route Directions Batch service call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<RouteDirectionsBatchResult, RouteDirectionsBatchResult> beginGetRouteDirectionsBatch(
            String batchId) {
        return this.beginGetRouteDirectionsBatch(batchId, null);
    }

    /**
     *
     * @param batchId Batch id for querying the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Route Directions Batch service call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<RouteDirectionsBatchResult, RouteDirectionsBatchResult> beginGetRouteDirectionsBatch(
            String batchId, Context context) {
        return this.asyncClient.beginGetRouteDirectionsBatch(batchId, context).getSyncPoller();
    }
}
