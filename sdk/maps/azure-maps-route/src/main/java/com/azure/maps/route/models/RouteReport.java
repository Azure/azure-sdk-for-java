// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.route.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**
 * Reports the effective settings used in the current call.
 */
@Immutable
public final class RouteReport implements JsonSerializable<RouteReport> {

    /*
     * Effective parameters or data used when calling this Route API.
     */
    private List<EffectiveSetting> effectiveSettings;

    /**
     * Creates an instance of RouteReport class.
     */
    public RouteReport() {
    }

    /**
     * Get the effectiveSettings property: Effective parameters or data used when calling this Route API.
     *
     * @return the effectiveSettings value.
     */
    public Map<String, String> getEffectiveSettings() {
        Map<String, String> map = new HashMap<>();
        for (EffectiveSetting effectiveSetting : this.effectiveSettings) {
            map.put(effectiveSetting.getKey(), effectiveSetting.getValue());
        }
        return map;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouteReport from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouteReport if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RouteReport.
     */
    public static RouteReport fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RouteReport deserializedRouteReport = new RouteReport();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("effectiveSettings".equals(fieldName)) {
                    List<EffectiveSetting> effectiveSettings
                        = reader.readArray(reader1 -> EffectiveSetting.fromJson(reader1));
                    deserializedRouteReport.effectiveSettings = effectiveSettings;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRouteReport;
        });
    }
}
