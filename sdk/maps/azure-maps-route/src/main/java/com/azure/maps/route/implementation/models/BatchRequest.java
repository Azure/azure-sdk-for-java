// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.route.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * This type represents the request body for the Batch service.
 */
@Fluent
public final class BatchRequest implements JsonSerializable<BatchRequest> {
    /*
     * The list of queries to process.
     */
    private List<BatchRequestItem> batchItems;

    /**
     * Creates an instance of BatchRequest class.
     */
    public BatchRequest() {
    }

    /**
     * Get the batchItems property: The list of queries to process.
     * 
     * @return the batchItems value.
     */
    public List<BatchRequestItem> getBatchItems() {
        return this.batchItems;
    }

    /**
     * Set the batchItems property: The list of queries to process.
     * 
     * @param batchItems the batchItems value to set.
     * @return the BatchRequest object itself.
     */
    public BatchRequest setBatchItems(List<BatchRequestItem> batchItems) {
        this.batchItems = batchItems;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("batchItems", this.batchItems, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchRequest.
     */
    public static BatchRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchRequest deserializedBatchRequest = new BatchRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("batchItems".equals(fieldName)) {
                    List<BatchRequestItem> batchItems = reader.readArray(reader1 -> BatchRequestItem.fromJson(reader1));
                    deserializedBatchRequest.batchItems = batchItems;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBatchRequest;
        });
    }
}
