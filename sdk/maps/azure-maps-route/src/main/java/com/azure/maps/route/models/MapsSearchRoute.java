// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.route.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The Route model.
 */
@Immutable
public final class MapsSearchRoute implements JsonSerializable<MapsSearchRoute> {
    /*
     * Summary object
     */
    private RouteSummary summary;

    /*
     * Legs array
     */
    private List<RouteLeg> legs;

    /*
     * Sections array
     */
    private List<RouteSection> sections;

    /*
     * Contains guidance related elements. This field is present only when guidance was requested and is available.
     */
    private RouteGuidance guidance;

    /**
     * Creates an instance of Route class.
     */
    public MapsSearchRoute() {
    }

    /**
     * Get the summary property: Summary object.
     * 
     * @return the summary value.
     */
    public RouteSummary getSummary() {
        return this.summary;
    }

    /**
     * Get the legs property: Legs array.
     * 
     * @return the legs value.
     */
    public List<RouteLeg> getLegs() {
        return this.legs;
    }

    /**
     * Get the sections property: Sections array.
     * 
     * @return the sections value.
     */
    public List<RouteSection> getSections() {
        return this.sections;
    }

    /**
     * Get the guidance property: Contains guidance related elements. This field is present only when guidance was
     * requested and is available.
     * 
     * @return the guidance value.
     */
    public RouteGuidance getGuidance() {
        return this.guidance;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Route from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Route if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Route.
     */
    public static MapsSearchRoute fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MapsSearchRoute deserializedRoute = new MapsSearchRoute();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("summary".equals(fieldName)) {
                    deserializedRoute.summary = RouteSummary.fromJson(reader);
                } else if ("legs".equals(fieldName)) {
                    List<RouteLeg> legs = reader.readArray(reader1 -> RouteLeg.fromJson(reader1));
                    deserializedRoute.legs = legs;
                } else if ("sections".equals(fieldName)) {
                    List<RouteSection> sections = reader.readArray(reader1 -> RouteSection.fromJson(reader1));
                    deserializedRoute.sections = sections;
                } else if ("guidance".equals(fieldName)) {
                    deserializedRoute.guidance = RouteGuidance.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoute;
        });
    }
}
