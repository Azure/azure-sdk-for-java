// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.route.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This object is returned from a successful Route Reachable Range call.
 */
@Fluent
public final class RouteRangeResult implements JsonSerializable<RouteRangeResult> {
    /*
     * Format Version property
     */
    private String formatVersion;

    /*
     * Reachable Range
     */
    private RouteRange reachableRange;

    /*
     * Reports the effective settings used in the current call.
     */
    private RouteReport report;

    /**
     * Creates an instance of RouteRangeResult class.
     */
    public RouteRangeResult() {
    }

    /**
     * Get the formatVersion property: Format Version property.
     * 
     * @return the formatVersion value.
     */
    public String getFormatVersion() {
        return this.formatVersion;
    }

    /**
     * Get the reachableRange property: Reachable Range.
     * 
     * @return the reachableRange value.
     */
    public RouteRange getReachableRange() {
        return this.reachableRange;
    }

    /**
     * Set the reachableRange property: Reachable Range.
     * 
     * @param reachableRange the reachableRange value to set.
     * @return the RouteRangeResult object itself.
     */
    public RouteRangeResult setReachableRange(RouteRange reachableRange) {
        this.reachableRange = reachableRange;
        return this;
    }

    /**
     * Get the report property: Reports the effective settings used in the current call.
     * 
     * @return the report value.
     */
    public RouteReport getReport() {
        return this.report;
    }

    /**
     * Set the report property: Reports the effective settings used in the current call.
     * 
     * @param report the report value to set.
     * @return the RouteRangeResult object itself.
     */
    public RouteRangeResult setReport(RouteReport report) {
        this.report = report;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("reachableRange", this.reachableRange);
        jsonWriter.writeJsonField("report", this.report);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouteRangeResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouteRangeResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RouteRangeResult.
     */
    public static RouteRangeResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RouteRangeResult deserializedRouteRangeResult = new RouteRangeResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("formatVersion".equals(fieldName)) {
                    deserializedRouteRangeResult.formatVersion = reader.getString();
                } else if ("reachableRange".equals(fieldName)) {
                    deserializedRouteRangeResult.reachableRange = RouteRange.fromJson(reader);
                } else if ("report".equals(fieldName)) {
                    deserializedRouteRangeResult.report = RouteReport.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRouteRangeResult;
        });
    }
}
