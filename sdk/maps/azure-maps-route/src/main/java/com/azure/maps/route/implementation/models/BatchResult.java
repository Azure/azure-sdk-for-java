// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.route.implementation.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.route.models.BatchResultSummary;
import java.io.IOException;

/**
 * This object is returned from a successful Batch service call. Extend with 'batchItems' property.
 */
@Immutable
public class BatchResult implements JsonSerializable<BatchResult> {
    /*
     * Summary of the results for the batch request
     */
    private BatchResultSummary batchSummary;

    /**
     * Creates an instance of BatchResult class.
     */
    public BatchResult() {
    }

    /**
     * Get the batchSummary property: Summary of the results for the batch request.
     * 
     * @return the batchSummary value.
     */
    public BatchResultSummary getBatchSummary() {
        return this.batchSummary;
    }

    /**
     * Set the batchSummary property: Summary of the results for the batch request.
     * 
     * @param batchSummary the batchSummary value to set.
     * @return the BatchResult object itself.
     */
    BatchResult setBatchSummary(BatchResultSummary batchSummary) {
        this.batchSummary = batchSummary;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchResult.
     */
    public static BatchResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchResult deserializedBatchResult = new BatchResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("summary".equals(fieldName)) {
                    deserializedBatchResult.batchSummary = BatchResultSummary.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBatchResult;
        });
    }
}
