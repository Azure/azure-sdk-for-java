// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.route.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import com.azure.core.models.ResponseError;

/**
 * An item returned from Route Directions Batch service call.
 */
@Immutable
public final class RouteDirectionsBatchItem extends BatchResultItem {

    /*
     * The result of the query. RouteDirections if the query completed successfully, ErrorResponse otherwise.
     */
    private RouteDirectionsBatchItemResponse response;

    /**
     * Creates an instance of RouteDirectionsBatchItem class.
     */
    public RouteDirectionsBatchItem() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouteDirectionsBatchItem from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouteDirectionsBatchItem if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RouteDirectionsBatchItem.
     */
    public static RouteDirectionsBatchItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RouteDirectionsBatchItem deserializedRouteDirectionsBatchItem = new RouteDirectionsBatchItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("statusCode".equals(fieldName)) {
                    deserializedRouteDirectionsBatchItem.setStatusCode(reader.getNullable(JsonReader::getInt));
                } else if ("response".equals(fieldName)) {
                    deserializedRouteDirectionsBatchItem.response = RouteDirectionsBatchItemResponse.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRouteDirectionsBatchItem;
        });
    }

    /**
     * Returns the {@link ResponseError} in case of an error response.
     *
     * @return the error detail as a {@code ResponseError}
     */
    public ResponseError getError() {
        return this.response.getError();
    }

    /**
     * Returns the {@link RouteDirections} associated with the response.
     *
     * @return the route directions as a {@code RouteDirections}
     */
    public RouteDirections getRouteDirections() {
        return (RouteDirections) this.response;
    }
}
