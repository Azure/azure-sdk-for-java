// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.route.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.time.OffsetDateTime;

/**
 * Summary object.
 */
@Immutable
public final class RouteSummary implements JsonSerializable<RouteSummary> {

    /*
     * Length In Meters property
     */
    @Generated
    private Integer lengthInMeters;

    /*
     * Estimated travel time in seconds property that includes the delay due to real-time traffic. Note that even when
     * traffic=false travelTimeInSeconds still includes the delay due to traffic. If DepartAt is in the future, travel
     * time is calculated using time-dependent historic traffic data.
     */
    @Generated
    private Integer travelTimeInSeconds;

    /*
     * Estimated delay in seconds caused by the real-time incident(s) according to traffic information. For routes
     * planned with departure time in the future, delays is always 0. To return additional travel times using different
     * types of traffic information, parameter computeTravelTimeFor=all needs to be added.
     */
    @Generated
    private Integer trafficDelayInSeconds;

    /*
     * The estimated departure time for the route or leg. Time is in UTC.
     */
    @Generated
    private OffsetDateTime departureTime;

    /*
     * The estimated arrival time for the route or leg. Time is in UTC.
     */
    @Generated
    private OffsetDateTime arrivalTime;

    /**
     * Creates an instance of RouteSummary class.
     */
    @Generated
    public RouteSummary() {
    }

    /**
     * Get the lengthInMeters property: Length In Meters property.
     *
     * @return the lengthInMeters value.
     */
    @Generated
    public Integer getLengthInMeters() {
        return this.lengthInMeters;
    }

    /**
     * Get the travelTimeInSeconds property: Estimated travel time in seconds property that includes the delay due to
     * real-time traffic. Note that even when traffic=false travelTimeInSeconds still includes the delay due to traffic.
     * If DepartAt is in the future, travel time is calculated using time-dependent historic traffic data.
     *
     * @return the travelTimeInSeconds value.
     */
    @Generated
    public Duration getTravelTimeInSeconds() {
        return Duration.ofSeconds(this.travelTimeInSeconds);
    }

    /**
     * Get the trafficDelayInSeconds property: Estimated delay in seconds caused by the real-time incident(s) according
     * to traffic information. For routes planned with departure time in the future, delays is always 0. To return
     * additional travel times using different types of traffic information, parameter computeTravelTimeFor=all needs to
     * be added.
     *
     * @return the trafficDelayInSeconds value.
     */
    @Generated
    public Duration getTrafficDelayInSeconds() {
        return Duration.ofSeconds(this.trafficDelayInSeconds);
    }

    /**
     * Get the departureTime property: The estimated departure time for the route or leg. Time is in UTC.
     *
     * @return the departureTime value.
     */
    @Generated
    public OffsetDateTime getDepartureTime() {
        return this.departureTime;
    }

    /**
     * Get the arrivalTime property: The estimated arrival time for the route or leg. Time is in UTC.
     *
     * @return the arrivalTime value.
     */
    @Generated
    public OffsetDateTime getArrivalTime() {
        return this.arrivalTime;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouteSummary from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouteSummary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RouteSummary.
     */
    @Generated
    public static RouteSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RouteSummary deserializedRouteSummary = new RouteSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("lengthInMeters".equals(fieldName)) {
                    deserializedRouteSummary.lengthInMeters = reader.getNullable(JsonReader::getInt);
                } else if ("travelTimeInSeconds".equals(fieldName)) {
                    deserializedRouteSummary.travelTimeInSeconds = reader.getNullable(JsonReader::getInt);
                } else if ("trafficDelayInSeconds".equals(fieldName)) {
                    deserializedRouteSummary.trafficDelayInSeconds = reader.getNullable(JsonReader::getInt);
                } else if ("departureTime".equals(fieldName)) {
                    deserializedRouteSummary.departureTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("arrivalTime".equals(fieldName)) {
                    deserializedRouteSummary.arrivalTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRouteSummary;
        });
    }
}
