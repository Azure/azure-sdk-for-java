// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.geolocation.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The object containing the country/region information.
 */
@Immutable
public final class CountryRegion implements JsonSerializable<CountryRegion> {

    /*
     * The IP Address's 2-character code [(ISO 3166-1)](https://www.iso.org/iso-3166-country-codes.html) of the country or region. Please note, IP address in ranges reserved for special purpose will return Null for country/region.
     */
    private String isoCode;

    /**
     * Set default constructor to private
     */
    private CountryRegion() {
    }

    /**
     * Get the isoCode property: The IP Address's 2-character code [(ISO
     * 3166-1)](https://www.iso.org/iso-3166-country-codes.html) of the country or region. Please note, IP address in
     * ranges reserved for special purpose will return Null for country/region.
     *
     * @return the isoCode value.
     */
    public String getIsoCode() {
        return this.isoCode;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CountryRegion from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CountryRegion if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CountryRegion.
     */
    public static CountryRegion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CountryRegion deserializedCountryRegion = new CountryRegion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("isoCode".equals(fieldName)) {
                    deserializedCountryRegion.isoCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedCountryRegion;
        });
    }
}
