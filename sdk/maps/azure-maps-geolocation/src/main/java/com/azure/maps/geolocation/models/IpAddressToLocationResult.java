// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.geolocation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;

/**
 * This object is returned from a successful call to IP Address to country/region API.
 */
@Immutable
public final class IpAddressToLocationResult implements JsonSerializable<IpAddressToLocationResult> {

    /*
     * The object containing the country/region information.
     */
    @Generated
    private CountryRegion countryRegion;

    /*
     * The IP Address of the request.
     */
    @Generated
    private String ipAddress;

    /**
     * Set default constructor to private
     */
    @Generated
    private IpAddressToLocationResult() {
    }

    /**
     * Get the countryRegion property: The object containing the country/region information.
     *
     * @return the countryRegion value.
     */
    @Generated
    public CountryRegion getCountryRegion() {
        return this.countryRegion;
    }

    /**
     * Get the IP address as an InetAddress.
     *
     * @return The IP address as an InetAddress.
     * @throws IllegalArgumentException If the IP address isn't a valid InetAddress.
     */
    @Generated
    public InetAddress getIpAddress() {
        try {
            return InetAddress.getByName(this.ipAddress);
        } catch (UnknownHostException e) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException("Invalid IP address: " + this.ipAddress, e));
        }
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpAddressToLocationResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpAddressToLocationResult if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IpAddressToLocationResult.
     */
    @Generated
    public static IpAddressToLocationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpAddressToLocationResult deserializedIpAddressToLocationResult = new IpAddressToLocationResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("countryRegion".equals(fieldName)) {
                    deserializedIpAddressToLocationResult.countryRegion = CountryRegion.fromJson(reader);
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedIpAddressToLocationResult.ipAddress = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedIpAddressToLocationResult;
        });
    }

    private static final ClientLogger LOGGER = new ClientLogger(IpAddressToLocationResult.class);
}
