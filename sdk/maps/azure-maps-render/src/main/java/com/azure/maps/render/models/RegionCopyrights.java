// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.render.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The RegionCopyrights model.
 */
@Immutable
public final class RegionCopyrights implements JsonSerializable<RegionCopyrights> {
    /*
     * Copyrights array
     */
    private List<String> copyrights;

    /*
     * Country property
     */
    private RegionCopyrightsCountry country;

    /**
     * Creates an instance of RegionCopyrights class.
     */
    public RegionCopyrights() {
    }

    /**
     * Get the copyrights property: Copyrights array.
     * 
     * @return the copyrights value.
     */
    public List<String> getCopyrights() {
        return this.copyrights;
    }

    /**
     * Get the country property: Country property.
     * 
     * @return the country value.
     */
    public RegionCopyrightsCountry getCountry() {
        return this.country;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegionCopyrights from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegionCopyrights if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegionCopyrights.
     */
    public static RegionCopyrights fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegionCopyrights deserializedRegionCopyrights = new RegionCopyrights();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("copyrights".equals(fieldName)) {
                    List<String> copyrights = reader.readArray(reader1 -> reader1.getString());
                    deserializedRegionCopyrights.copyrights = copyrights;
                } else if ("country".equals(fieldName)) {
                    deserializedRegionCopyrights.country = RegionCopyrightsCountry.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegionCopyrights;
        });
    }
}
