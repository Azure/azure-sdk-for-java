// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.render.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * This object is returned from a successful copyright request.
 */
@Immutable
public final class Copyright implements JsonSerializable<Copyright> {
    /*
     * Format Version property
     */
    private String formatVersion;

    /*
     * General Copyrights array
     */
    private List<String> generalCopyrights;

    /*
     * Regions array
     */
    private List<RegionCopyrights> regions;

    /**
     * Creates an instance of Copyright class.
     */
    public Copyright() {
    }

    /**
     * Get the formatVersion property: Format Version property.
     * 
     * @return the formatVersion value.
     */
    public String getFormatVersion() {
        return this.formatVersion;
    }

    /**
     * Get the generalCopyrights property: General Copyrights array.
     * 
     * @return the generalCopyrights value.
     */
    public List<String> getGeneralCopyrights() {
        return this.generalCopyrights;
    }

    /**
     * Get the regions property: Regions array.
     * 
     * @return the regions value.
     */
    public List<RegionCopyrights> getRegions() {
        return this.regions;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Copyright from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Copyright if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Copyright.
     */
    public static Copyright fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Copyright deserializedCopyright = new Copyright();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("formatVersion".equals(fieldName)) {
                    deserializedCopyright.formatVersion = reader.getString();
                } else if ("generalCopyrights".equals(fieldName)) {
                    List<String> generalCopyrights = reader.readArray(reader1 -> reader1.getString());
                    deserializedCopyright.generalCopyrights = generalCopyrights;
                } else if ("regions".equals(fieldName)) {
                    List<RegionCopyrights> regions = reader.readArray(reader1 -> RegionCopyrights.fromJson(reader1));
                    deserializedCopyright.regions = regions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCopyright;
        });
    }
}
