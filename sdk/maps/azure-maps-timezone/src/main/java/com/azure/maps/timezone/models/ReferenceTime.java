// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.timezone.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;

/**
 * Details in effect at the local time.
 */
@Immutable
public final class ReferenceTime implements JsonSerializable<ReferenceTime> {

    /*
     * Time zone name in effect at the reference timestamp (i.e. PST or PDT depending whether Daylight Savings Time is in effect).
     */
    private String tag;

    /*
     * UTC offset in effect at the `ReferenceUTCTimestamp`.
     */
    private String standardOffset;

    /*
     * Time saving in minutes in effect at the `ReferenceUTCTimestamp`.
     */
    private String daylightSavings;

    /*
     * Current wall time at the given time zone as shown in the `Tag` property.
     */
    private String wallTime;

    /*
     * The year this POSIX string is valid for. Note: A POSIX string will only be valid in the given year.
     */
    private Integer posixTzValidYear;

    /*
     * POSIX string used to set the time zone environment variable.
     */
    private String posixTz;

    /*
     * Sunrise at the given time zone as shown in the `Tag` property. The sunrise is described in the ISO8601 format. (Only be populated if the call is byCoordinates)
     */
    private OffsetDateTime sunrise;

    /*
     * Sunset at the given time zone as shown in the `Tag` property. The sunset is described in the ISO8601 format.(Only be populated if the call is byCoordinates)
     */
    private OffsetDateTime sunset;

    /**
     * Set default ReferenceTime constructor to private
     */
    private ReferenceTime() {
    }

    /**
     * Get the tag property: Time zone name in effect at the reference timestamp (i.e. PST or PDT depending whether
     * Daylight Savings Time is in effect).
     *
     * @return the tag value.
     */
    public String getTag() {
        return this.tag;
    }

    /**
     * Get the standard offset.
     *
     * @return Returns a {@link ZoneOffset} time offset.
     */
    public ZoneOffset getStandardOffset() {
        if (standardOffset.charAt(0) != '+' && standardOffset.charAt(0) != '-') {
            standardOffset = "+" + standardOffset;
        }
        return ZoneOffset.of(standardOffset);
    }

    /**
     * Get the daylight savings.
     *
     * @return Returns a {@link ZoneOffset} daylight savings. Get the daylightSavings property: Time saving in minutes
     * in effect at the ReferenceUTCTimestamp.
     */
    public ZoneOffset getDaylightSavings() {
        if (daylightSavings.charAt(0) != '+' && daylightSavings.charAt(0) != '-') {
            daylightSavings = "+" + daylightSavings;
        }
        return ZoneOffset.of(daylightSavings);
    }

    /**
     * Get the wall time.
     *
     * @return Returns a {@link OffsetDateTime} offset date time.
     */
    public OffsetDateTime getWallTime() {
        return OffsetDateTime.parse(wallTime);
    }

    /**
     * Get the posixTzValidYear property: The year this POSIX string is valid for. Note: A POSIX string will only be
     * valid in the given year.
     *
     * @return the posixTzValidYear value.
     */
    public Integer getPosixTzValidYear() {
        return this.posixTzValidYear;
    }

    /**
     * Get the posixTz property: POSIX string used to set the time zone environment variable.
     *
     * @return the posixTz value.
     */
    public String getPosixTz() {
        return this.posixTz;
    }

    /**
     * Get the sunrise property: Sunrise at the given time zone as shown in the `Tag` property. The sunrise is described
     * in the ISO8601 format. (Only be populated if the call is byCoordinates).
     *
     * @return the sunrise value.
     */
    public OffsetDateTime getSunrise() {
        return this.sunrise;
    }

    /**
     * Get the sunset property: Sunset at the given time zone as shown in the `Tag` property. The sunset is described in
     * the ISO8601 format.(Only be populated if the call is byCoordinates).
     *
     * @return the sunset value.
     */
    public OffsetDateTime getSunset() {
        return this.sunset;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReferenceTime from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReferenceTime if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReferenceTime.
     */
    public static ReferenceTime fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReferenceTime deserializedReferenceTime = new ReferenceTime();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("Tag".equals(fieldName)) {
                    deserializedReferenceTime.tag = reader.getString();
                } else if ("StandardOffset".equals(fieldName)) {
                    deserializedReferenceTime.standardOffset = reader.getString();
                } else if ("DaylightSavings".equals(fieldName)) {
                    deserializedReferenceTime.daylightSavings = reader.getString();
                } else if ("WallTime".equals(fieldName)) {
                    deserializedReferenceTime.wallTime = reader.getString();
                } else if ("PosixTzValidYear".equals(fieldName)) {
                    deserializedReferenceTime.posixTzValidYear = reader.getNullable(JsonReader::getInt);
                } else if ("PosixTz".equals(fieldName)) {
                    deserializedReferenceTime.posixTz = reader.getString();
                } else if ("Sunrise".equals(fieldName)) {
                    deserializedReferenceTime.sunrise
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("Sunset".equals(fieldName)) {
                    deserializedReferenceTime.sunset
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedReferenceTime;
        });
    }
}
