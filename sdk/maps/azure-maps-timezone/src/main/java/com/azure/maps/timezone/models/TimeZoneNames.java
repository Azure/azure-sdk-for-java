// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.timezone.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Timezone names object.
 */
@Immutable
public final class TimeZoneNames implements JsonSerializable<TimeZoneNames> {

    /*
     * The ISO 639-1 language code of the Names
     */
    private String iSO6391LanguageCode;

    /*
     * Generic Name
     */
    private String generic;

    /*
     * Standard Name
     */
    private String standard;

    /*
     * Daylight Name
     */
    private String daylight;

    /**
     * Set default TimeZoneNames constructor to private
     */
    private TimeZoneNames() {
    }

    /**
     * Get the iSO6391LanguageCode property: The ISO 639-1 language code of the Names.
     *
     * @return the iSO6391LanguageCode value.
     */
    public String getISO6391LanguageCode() {
        return this.iSO6391LanguageCode;
    }

    /**
     * Get the generic property: Generic Name.
     *
     * @return the generic value.
     */
    public String getGeneric() {
        return this.generic;
    }

    /**
     * Get the standard property: Standard Name.
     *
     * @return the standard value.
     */
    public String getStandard() {
        return this.standard;
    }

    /**
     * Get the daylight property: Daylight Name.
     *
     * @return the daylight value.
     */
    public String getDaylight() {
        return this.daylight;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TimeZoneNames from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TimeZoneNames if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TimeZoneNames.
     */
    public static TimeZoneNames fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TimeZoneNames deserializedTimeZoneNames = new TimeZoneNames();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("ISO6391LanguageCode".equals(fieldName)) {
                    deserializedTimeZoneNames.iSO6391LanguageCode = reader.getString();
                } else if ("Generic".equals(fieldName)) {
                    deserializedTimeZoneNames.generic = reader.getString();
                } else if ("Standard".equals(fieldName)) {
                    deserializedTimeZoneNames.standard = reader.getString();
                } else if ("Daylight".equals(fieldName)) {
                    deserializedTimeZoneNames.daylight = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTimeZoneNames;
        });
    }
}
