// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.timezone.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.timezone.implementation.models.RepresentativePoint;
import java.io.IOException;
import java.util.List;
import com.azure.core.models.GeoPosition;

/**
 * The TimeZoneId model.
 */
@Fluent
public final class TimeZoneId implements JsonSerializable<TimeZoneId> {

    /*
     * Id property
     */
    private String id;

    /*
     * An array of time zone ID aliases. Only returned when [options]=*zoneinfo* or *all*.
     * 
     * Note: may be null.
     */
    private List<String> aliases;

    /*
     * An array of country/region records. Only returned when [options]=*zoneinfo* or *all*.
     */
    private List<CountryRecord> countries;

    /*
     * Timezone names object.
     */
    private TimeZoneNames names;

    /*
     * Details in effect at the local time.
     */
    private ReferenceTime referenceTime;

    /*
     * Representative point property
     */
    private RepresentativePoint representativePoint;

    /*
     * Time zone DST transitions from [transitionsFrom] until timestamp + 1 year.
     */
    private List<TimeTransition> timeTransitions;

    /**
     * Set default TimeZoneId constructor to private
     */
    private TimeZoneId() {
    }

    /**
     * Get the id property: Id property.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the aliases property: An array of time zone ID aliases. Only returned when [options]=*zoneinfo* or *all*.
     *
     * Note: may be null.
     *
     * @return the aliases value.
     */
    public List<String> getAliases() {
        return this.aliases;
    }

    /**
     * Get the countries property: An array of country/region records. Only returned when [options]=*zoneinfo* or *all*.
     *
     * @return the countries value.
     */
    public List<CountryRecord> getCountries() {
        return this.countries;
    }

    /**
     * Get the names property: Timezone names object.
     *
     * @return the names value.
     */
    public TimeZoneNames getNames() {
        return this.names;
    }

    /**
     * Set the names property: Timezone names object.
     *
     * @param names the names value to set.
     * @return the TimeZoneId object itself.
     */
    public TimeZoneId setNames(TimeZoneNames names) {
        this.names = names;
        return this;
    }

    /**
     * Get the referenceTime property: Details in effect at the local time.
     *
     * @return the referenceTime value.
     */
    public ReferenceTime getReferenceTime() {
        return this.referenceTime;
    }

    /**
     * Get the representativePoint property: Representative point property.
     *
     * @return the representativePoint value.
     */
    public GeoPosition getRepresentativePoint() {
        return new GeoPosition(this.representativePoint.getLongitude(), this.representativePoint.getLatitude());
    }

    /**
     * Get the timeTransitions property: Time zone DST transitions from [transitionsFrom] until timestamp + 1 year.
     *
     * @return the timeTransitions value.
     */
    public List<TimeTransition> getTimeTransitions() {
        return this.timeTransitions;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("Names", this.names);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TimeZoneId from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TimeZoneId if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the TimeZoneId.
     */
    public static TimeZoneId fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TimeZoneId deserializedTimeZoneId = new TimeZoneId();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("Id".equals(fieldName)) {
                    deserializedTimeZoneId.id = reader.getString();
                } else if ("Aliases".equals(fieldName)) {
                    List<String> aliases = reader.readArray(reader1 -> reader1.getString());
                    deserializedTimeZoneId.aliases = aliases;
                } else if ("Countries".equals(fieldName)) {
                    List<CountryRecord> countries = reader.readArray(reader1 -> CountryRecord.fromJson(reader1));
                    deserializedTimeZoneId.countries = countries;
                } else if ("Names".equals(fieldName)) {
                    deserializedTimeZoneId.names = TimeZoneNames.fromJson(reader);
                } else if ("ReferenceTime".equals(fieldName)) {
                    deserializedTimeZoneId.referenceTime = ReferenceTime.fromJson(reader);
                } else if ("RepresentativePoint".equals(fieldName)) {
                    deserializedTimeZoneId.representativePoint = RepresentativePoint.fromJson(reader);
                } else if ("TimeTransitions".equals(fieldName)) {
                    List<TimeTransition> timeTransitions
                        = reader.readArray(reader1 -> TimeTransition.fromJson(reader1));
                    deserializedTimeZoneId.timeTransitions = timeTransitions;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTimeZoneId;
        });
    }
}
