// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.timezone.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;

/**
 * The TimeTransition model.
 */
@Immutable
public final class TimeTransition implements JsonSerializable<TimeTransition> {

    /*
     * Tag property
     */
    private String tag;

    /*
     * StandardOffset property
     */
    private String standardOffset;

    /*
     * DaylightSavings property
     */
    private String daylightSavings;

    /*
     * Start date, start time for this transition period
     */
    private OffsetDateTime utcStart;

    /*
     * End date, end time for this transition period
     */
    private OffsetDateTime utcEnd;

    /**
     * Set default TimeTransition constructor to private
     */
    private TimeTransition() {
    }

    /**
     * Get the tag property: Tag property.
     *
     * @return the tag value.
     */
    public String getTag() {
        return this.tag;
    }

    /**
     * return the standardOffset value
     *
     * @return Returns a {@link ZoneOffset} time offset.
     */
    public ZoneOffset getStandardOffset() {
        if (standardOffset.charAt(0) != '+' && standardOffset.charAt(0) != '-') {
            standardOffset = "+" + standardOffset;
        }
        return ZoneOffset.of(standardOffset);
    }

    /**
     * return the daylight savings value
     *
     * @return Returns a {@link ZoneOffset} daylight savings. Get the daylightSavings property: Time saving in minutes
     * in effect at the ReferenceUTCTimestamp.
     */
    public ZoneOffset getDaylightSavings() {
        if (daylightSavings.charAt(0) != '+' && daylightSavings.charAt(0) != '-') {
            daylightSavings = "+" + daylightSavings;
        }
        return ZoneOffset.of(daylightSavings);
    }

    /**
     * Get the utcStart property: Start date, start time for this transition period.
     *
     * @return the utcStart value.
     */
    public OffsetDateTime getUtcStart() {
        return this.utcStart;
    }

    /**
     * Get the utcEnd property: End date, end time for this transition period.
     *
     * @return the utcEnd value.
     */
    public OffsetDateTime getUtcEnd() {
        return this.utcEnd;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TimeTransition from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TimeTransition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TimeTransition.
     */
    public static TimeTransition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TimeTransition deserializedTimeTransition = new TimeTransition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("Tag".equals(fieldName)) {
                    deserializedTimeTransition.tag = reader.getString();
                } else if ("StandardOffset".equals(fieldName)) {
                    deserializedTimeTransition.standardOffset = reader.getString();
                } else if ("DaylightSavings".equals(fieldName)) {
                    deserializedTimeTransition.daylightSavings = reader.getString();
                } else if ("UtcStart".equals(fieldName)) {
                    deserializedTimeTransition.utcStart
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("UtcEnd".equals(fieldName)) {
                    deserializedTimeTransition.utcEnd
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTimeTransition;
        });
    }
}
