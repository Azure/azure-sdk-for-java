// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.timezone.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The IanaId model.
 */
@Immutable
public final class IanaId implements JsonSerializable<IanaId> {

    /*
     * Id property
     */
    private String id;

    /*
     * IsAlias property
     */
    private Boolean isAlias;

    /*
     * AliasOf property
     */
    private String aliasOf;

    /*
     * This attribute returns `True` if the IanaId has any country/zone associated with it.
     */
    private Boolean hasZone1970Location;

    /**
     * Set default TimeZoneWindows constructor to private
     */
    private IanaId() {
    }

    /**
     * Get the id property: Id property.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the isAlias property: IsAlias property.
     *
     * @return the isAlias value.
     */
    public Boolean isAlias() {
        return this.isAlias;
    }

    /**
     * Get the aliasOf property: AliasOf property.
     *
     * @return the aliasOf value.
     */
    public String getAlias() {
        return this.aliasOf;
    }

    /**
     * Get the hasZone1970Location property: This attribute returns `True` if the IanaId has any country/zone associated
     * with it.
     *
     * @return the hasZone1970Location value.
     */
    public Boolean getHasZone1970Location() {
        return this.hasZone1970Location;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IanaId from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of IanaId if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the IanaId.
     */
    public static IanaId fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IanaId deserializedIanaId = new IanaId();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("Id".equals(fieldName)) {
                    deserializedIanaId.id = reader.getString();
                } else if ("IsAlias".equals(fieldName)) {
                    deserializedIanaId.isAlias = reader.getNullable(JsonReader::getBoolean);
                } else if ("AliasOf".equals(fieldName)) {
                    deserializedIanaId.aliasOf = reader.getString();
                } else if ("HasZone1970Location".equals(fieldName)) {
                    deserializedIanaId.hasZone1970Location = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedIanaId;
        });
    }
}
