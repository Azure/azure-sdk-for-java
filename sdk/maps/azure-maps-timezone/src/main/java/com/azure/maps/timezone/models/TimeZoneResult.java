// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.timezone.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * This object is returned from a successful Timezone By ID call or By Coordinates call.
 */
@Immutable
public final class TimeZoneResult implements JsonSerializable<TimeZoneResult> {

    /*
     * Version property
     */
    private String version;

    /*
     * Reference Utc Timestamp property
     */
    private OffsetDateTime referenceUtcTimestamp;

    /*
     * TimeZoneId array
     */
    private List<TimeZoneId> timeZones;

    /**
     * Set default TimeZoneResult constructor to private
     */
    private TimeZoneResult() {
    }

    /**
     * Get the version property: Version property.
     *
     * @return the version value.
     */
    public String getVersion() {
        return this.version;
    }

    /**
     * Get the referenceUtcTimestamp property: Reference Utc Timestamp property.
     *
     * @return the referenceUtcTimestamp value.
     */
    public OffsetDateTime getReferenceUtcTimestamp() {
        return this.referenceUtcTimestamp;
    }

    /**
     * Get the timeZones property: TimeZoneId array.
     *
     * @return the timeZones value.
     */
    public List<TimeZoneId> getTimeZones() {
        return this.timeZones;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TimeZoneResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TimeZoneResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TimeZoneResult.
     */
    public static TimeZoneResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TimeZoneResult deserializedTimeZoneResult = new TimeZoneResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("Version".equals(fieldName)) {
                    deserializedTimeZoneResult.version = reader.getString();
                } else if ("ReferenceUtcTimestamp".equals(fieldName)) {
                    deserializedTimeZoneResult.referenceUtcTimestamp
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("TimeZones".equals(fieldName)) {
                    List<TimeZoneId> timeZones = reader.readArray(reader1 -> TimeZoneId.fromJson(reader1));
                    deserializedTimeZoneResult.timeZones = timeZones;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTimeZoneResult;
        });
    }
}
