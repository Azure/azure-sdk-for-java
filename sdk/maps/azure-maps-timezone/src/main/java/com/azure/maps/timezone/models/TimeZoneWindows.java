// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.timezone.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The TimeZoneWindows model.
 */
@Fluent
public final class TimeZoneWindows implements JsonSerializable<TimeZoneWindows> {

    /*
     * Windows Id property
     */
    private String windowsId;

    /*
     * Territory property
     */
    private String territory;

    /*
     * IanaIds array
     */
    private List<String> ianaIds;

    /**
     * Set default TimeZoneWindows constructor to private
     */
    private TimeZoneWindows() {
    }

    /**
     * Get the windowsId property: Windows Id property.
     *
     * @return the windowsId value.
     */
    public String getWindowsId() {
        return this.windowsId;
    }

    /**
     * Get the territory property: Territory property.
     *
     * @return the territory value.
     */
    public String getTerritory() {
        return this.territory;
    }

    /**
     * Get the ianaIds property: IanaIds array.
     *
     * @return the ianaIds value.
     */
    public List<String> getIanaIds() {
        return this.ianaIds;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("IanaIds", this.ianaIds, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TimeZoneWindows from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TimeZoneWindows if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TimeZoneWindows.
     */
    public static TimeZoneWindows fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TimeZoneWindows deserializedTimeZoneWindows = new TimeZoneWindows();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("WindowsId".equals(fieldName)) {
                    deserializedTimeZoneWindows.windowsId = reader.getString();
                } else if ("Territory".equals(fieldName)) {
                    deserializedTimeZoneWindows.territory = reader.getString();
                } else if ("IanaIds".equals(fieldName)) {
                    List<String> ianaIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedTimeZoneWindows.ianaIds = ianaIds;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTimeZoneWindows;
        });
    }
}
