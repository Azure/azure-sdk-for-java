// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.timezone.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A country/region record.
 */
@Immutable
public final class CountryRecord implements JsonSerializable<CountryRecord> {

    /*
     * country/region Name
     */
    private String name;

    /*
     * ISO-3166 2-letter country/region code for the country/region.
     */
    private String code;

    /**
     * Set default CountryRecord constructor to private
     */
    private CountryRecord() {
    }

    /**
     * Get the name property: country/region Name.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Get the code property: ISO-3166 2-letter country/region code for the country/region.
     *
     * @return the code value.
     */
    public String getCode() {
        return this.code;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CountryRecord from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CountryRecord if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CountryRecord.
     */
    public static CountryRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CountryRecord deserializedCountryRecord = new CountryRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("Name".equals(fieldName)) {
                    deserializedCountryRecord.name = reader.getString();
                } else if ("Code".equals(fieldName)) {
                    deserializedCountryRecord.code = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedCountryRecord;
        });
    }
}
