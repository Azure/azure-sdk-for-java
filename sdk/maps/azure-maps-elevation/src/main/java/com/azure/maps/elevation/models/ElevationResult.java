// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.elevation.models;

import java.util.ArrayList;
import com.azure.core.models.GeoPosition;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.elevation.implementation.models.Elevation;
import java.io.IOException;
import java.util.List;

/**
 * The response from a successful Get Data for Bounding Box API.
 */
@Immutable
public final class ElevationResult implements JsonSerializable<ElevationResult> {
    /*
     * The response for point/points elevation API. The result will be in same sequence of points listed in request.
     */
    private List<Elevation> elevations;

    /**
     * Set default ElevationResult constructor to private
     */
    private ElevationResult() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ElevationResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ElevationResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ElevationResult.
     */
    public static ElevationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ElevationResult deserializedElevationResult = new ElevationResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    List<Elevation> elevations = reader.readArray(reader1 -> Elevation.fromJson(reader1));
                    deserializedElevationResult.elevations = elevations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedElevationResult;
        });
    }

    /**
     * Get the elevations property: The response for point/points elevation API. The result will be in same sequence of
     * points listed in request.
     *
     * @return the elevations value
     */
    public List<GeoPosition> getElevations() {
        List<GeoPosition> toreturn = new ArrayList<>();
        for (Elevation e : this.elevations) {
            toreturn.add(new GeoPosition(e.getCoordinate().getLatitude(), e.getCoordinate().getLongitude(),
                (double) e.getElevationInMeters()));
        }
        return toreturn;
    }
}
