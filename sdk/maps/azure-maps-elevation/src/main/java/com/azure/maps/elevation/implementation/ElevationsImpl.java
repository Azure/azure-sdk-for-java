// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.elevation.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Elevations. */
public final class ElevationsImpl {
    /** The proxy service used to perform REST calls. */
    private final ElevationsService service;

    /** The service client containing this operation class. */
    private final AzureMapsElevationApiClientImpl client;

    /**
     * Initializes an instance of ElevationsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ElevationsImpl(AzureMapsElevationApiClientImpl client) {
        this.service =
                RestProxy.create(ElevationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureMapsElevationApiElevations to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureMapsElevationAp")
    private interface ElevationsService {
        @Get("/elevation/point/{format}")
        @ExpectedResponses({200})
        Mono<Response<BinaryData>> getDataForPoints(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") String format,
                RequestOptions requestOptions,
                Context context);

        @Post("/elevation/point/{format}")
        @ExpectedResponses({200})
        Mono<Response<BinaryData>> postDataForPoints(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") String format,
                @BodyParam("application/json") BinaryData points,
                RequestOptions requestOptions,
                Context context);

        @Get("/elevation/line/{format}")
        @ExpectedResponses({200})
        Mono<Response<BinaryData>> getDataForPolyline(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") String format,
                RequestOptions requestOptions,
                Context context);

        @Post("/elevation/line/{format}")
        @ExpectedResponses({200})
        Mono<Response<BinaryData>> postDataForPolyline(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") String format,
                @BodyParam("application/json") BinaryData polyline,
                RequestOptions requestOptions,
                Context context);

        @Get("/elevation/lattice/{format}")
        @ExpectedResponses({200})
        Mono<Response<BinaryData>> getDataForBoundingBox(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") String format,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Get Data for Points API provides elevation data for one or more points. A point is defined in lat,long
     * coordinate format.
     *
     * <p>Due to the URL character length limit of 2048, it's not possible to pass more than 100 coordinates as a
     * pipeline delimited string in a URL GET request. If you intend to pass more than 100 coordinates as a pipeline
     * delimited string, use the [POST Data For
     * Points](https://docs.microsoft.com/rest/api/maps/elevation/postdataforpoints).
     *
     * <p>The result will be in the same sequence of points listed in the request.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>points</td><td>String</td><td>Yes</td><td>The string representation of a list of points. A point is defined in lon/lat WGS84 coordinate reference system format.  If multiple points are requested, each of the points in a list should be separated by the pipe ('|') character.  The maximum number of points that can be requested in a single request is 2,000. The resolution of the elevation  data will be the highest for a single point and will decrease if multiple points are spread further apart. </td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-id</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     elevations: [
     *         {
     *             coordinate: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             elevationInMeter: Float
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response from a successful Get Data for Bounding Box API along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDataForPointsWithResponseAsync(String format, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getDataForPoints(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                format,
                                requestOptions,
                                context));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Get Data for Points API provides elevation data for one or more points. A point is defined in lat,long
     * coordinate format.
     *
     * <p>Due to the URL character length limit of 2048, it's not possible to pass more than 100 coordinates as a
     * pipeline delimited string in a URL GET request. If you intend to pass more than 100 coordinates as a pipeline
     * delimited string, use the [POST Data For
     * Points](https://docs.microsoft.com/rest/api/maps/elevation/postdataforpoints).
     *
     * <p>The result will be in the same sequence of points listed in the request.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>points</td><td>String</td><td>Yes</td><td>The string representation of a list of points. A point is defined in lon/lat WGS84 coordinate reference system format.  If multiple points are requested, each of the points in a list should be separated by the pipe ('|') character.  The maximum number of points that can be requested in a single request is 2,000. The resolution of the elevation  data will be the highest for a single point and will decrease if multiple points are spread further apart. </td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-id</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     elevations: [
     *         {
     *             coordinate: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             elevationInMeter: Float
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response from a successful Get Data for Bounding Box API along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDataForPointsWithResponseAsync(
            String format, RequestOptions requestOptions, Context context) {
        return service.getDataForPoints(
                this.client.getHost(), this.client.getServiceVersion().getVersion(), format, requestOptions, context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Get Data for Points API provides elevation data for one or more points. A point is defined in lat,long
     * coordinate format.
     *
     * <p>Due to the URL character length limit of 2048, it's not possible to pass more than 100 coordinates as a
     * pipeline delimited string in a URL GET request. If you intend to pass more than 100 coordinates as a pipeline
     * delimited string, use the [POST Data For
     * Points](https://docs.microsoft.com/rest/api/maps/elevation/postdataforpoints).
     *
     * <p>The result will be in the same sequence of points listed in the request.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>points</td><td>String</td><td>Yes</td><td>The string representation of a list of points. A point is defined in lon/lat WGS84 coordinate reference system format.  If multiple points are requested, each of the points in a list should be separated by the pipe ('|') character.  The maximum number of points that can be requested in a single request is 2,000. The resolution of the elevation  data will be the highest for a single point and will decrease if multiple points are spread further apart. </td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-id</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     elevations: [
     *         {
     *             coordinate: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             elevationInMeter: Float
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response from a successful Get Data for Bounding Box API along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDataForPointsWithResponse(String format, RequestOptions requestOptions) {
        return getDataForPointsWithResponseAsync(format, requestOptions).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Post Data for Points API provides elevation data for multiple points. A point is defined lon/lat
     * coordinate format.
     *
     * <p>Use the POST endpoint only if you intend to pass multiple points in the request. If you intend to pass a
     * single coordinate into the API, use the [GET Data For Points
     * API](https://docs.microsoft.com/rest/api/maps/elevation/getdataforpoints).
     *
     * <p>The result will be in the same sequence of points listed in the request.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-id</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         lat: Double
     *         lon: Double
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     elevations: [
     *         {
     *             coordinate: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             elevationInMeter: Float
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param points The string representation of a list of points. A point is defined in lon/lat WGS84 coordinate
     *     reference system format. Each points in a list should be separated by the pipe ('|') character. The number of
     *     points that can be requested in a POST request ranges from 2 to 2,000. The resolution of the elevation data
     *     will be the highest for a single point and will decrease if multiple points are spread further apart.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response from a successful Get Data for Bounding Box API along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> postDataForPointsWithResponseAsync(
            String format, BinaryData points, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.postDataForPoints(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                format,
                                points,
                                requestOptions,
                                context));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Post Data for Points API provides elevation data for multiple points. A point is defined lon/lat
     * coordinate format.
     *
     * <p>Use the POST endpoint only if you intend to pass multiple points in the request. If you intend to pass a
     * single coordinate into the API, use the [GET Data For Points
     * API](https://docs.microsoft.com/rest/api/maps/elevation/getdataforpoints).
     *
     * <p>The result will be in the same sequence of points listed in the request.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-id</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         lat: Double
     *         lon: Double
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     elevations: [
     *         {
     *             coordinate: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             elevationInMeter: Float
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param points The string representation of a list of points. A point is defined in lon/lat WGS84 coordinate
     *     reference system format. Each points in a list should be separated by the pipe ('|') character. The number of
     *     points that can be requested in a POST request ranges from 2 to 2,000. The resolution of the elevation data
     *     will be the highest for a single point and will decrease if multiple points are spread further apart.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response from a successful Get Data for Bounding Box API along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> postDataForPointsWithResponseAsync(
            String format, BinaryData points, RequestOptions requestOptions, Context context) {
        return service.postDataForPoints(
                this.client.getHost(),
                this.client.getServiceVersion().getVersion(),
                format,
                points,
                requestOptions,
                context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Post Data for Points API provides elevation data for multiple points. A point is defined lon/lat
     * coordinate format.
     *
     * <p>Use the POST endpoint only if you intend to pass multiple points in the request. If you intend to pass a
     * single coordinate into the API, use the [GET Data For Points
     * API](https://docs.microsoft.com/rest/api/maps/elevation/getdataforpoints).
     *
     * <p>The result will be in the same sequence of points listed in the request.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-id</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         lat: Double
     *         lon: Double
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     elevations: [
     *         {
     *             coordinate: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             elevationInMeter: Float
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param points The string representation of a list of points. A point is defined in lon/lat WGS84 coordinate
     *     reference system format. Each points in a list should be separated by the pipe ('|') character. The number of
     *     points that can be requested in a POST request ranges from 2 to 2,000. The resolution of the elevation data
     *     will be the highest for a single point and will decrease if multiple points are spread further apart.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response from a successful Get Data for Bounding Box API along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> postDataForPointsWithResponse(
            String format, BinaryData points, RequestOptions requestOptions) {
        return postDataForPointsWithResponseAsync(format, points, requestOptions).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Get Data for Polyline API provides elevation data along a polyline.
     *
     * <p>A polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character.
     * In addition to passing in endpoints, customers can specify the number of sample points that will be used to
     * divide polyline into equally spaced segments.
     *
     * <p>Elevation data at both start and endpoints, as well as equally spaced points along the polyline will be
     * returned. The results will be listed in the direction from the first endpoint towards the last endpoint. A line
     * between two endpoints is a straight Cartesian line, the shortest line between those two points in the coordinate
     * reference system. Note that the point is chosen based on Euclidean distance and may markedly differ from the
     * geodesic path along the curved surface of the reference ellipsoid.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>lines</td><td>String</td><td>Yes</td><td>The string representation of a polyline path. A polyline is defined by endpoint coordinates,  with each endpoint separated by a pipe ('|') character. The polyline should be defined in the  following format: `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ...,  longitude_pointN, latitude_pointN]`.
     *
     *  The longitude and latitude values refer to the World Geodetic  System (WGS84) coordinate reference system. The resolution of the data used to compute the  elevation depends on the distance between the endpoints.</td></tr>
     *     <tr><td>samples</td><td>String</td><td>No</td><td>The samples parameter specifies the number of equally spaced points at which elevation values  should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value is 10.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-id</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     elevations: [
     *         {
     *             coordinate: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             elevationInMeter: Float
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response from a successful Get Data for Bounding Box API along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDataForPolylineWithResponseAsync(
            String format, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getDataForPolyline(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                format,
                                requestOptions,
                                context));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Get Data for Polyline API provides elevation data along a polyline.
     *
     * <p>A polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character.
     * In addition to passing in endpoints, customers can specify the number of sample points that will be used to
     * divide polyline into equally spaced segments.
     *
     * <p>Elevation data at both start and endpoints, as well as equally spaced points along the polyline will be
     * returned. The results will be listed in the direction from the first endpoint towards the last endpoint. A line
     * between two endpoints is a straight Cartesian line, the shortest line between those two points in the coordinate
     * reference system. Note that the point is chosen based on Euclidean distance and may markedly differ from the
     * geodesic path along the curved surface of the reference ellipsoid.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>lines</td><td>String</td><td>Yes</td><td>The string representation of a polyline path. A polyline is defined by endpoint coordinates,  with each endpoint separated by a pipe ('|') character. The polyline should be defined in the  following format: `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ...,  longitude_pointN, latitude_pointN]`.
     *
     *  The longitude and latitude values refer to the World Geodetic  System (WGS84) coordinate reference system. The resolution of the data used to compute the  elevation depends on the distance between the endpoints.</td></tr>
     *     <tr><td>samples</td><td>String</td><td>No</td><td>The samples parameter specifies the number of equally spaced points at which elevation values  should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value is 10.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-id</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     elevations: [
     *         {
     *             coordinate: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             elevationInMeter: Float
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response from a successful Get Data for Bounding Box API along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDataForPolylineWithResponseAsync(
            String format, RequestOptions requestOptions, Context context) {
        return service.getDataForPolyline(
                this.client.getHost(), this.client.getServiceVersion().getVersion(), format, requestOptions, context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Get Data for Polyline API provides elevation data along a polyline.
     *
     * <p>A polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character.
     * In addition to passing in endpoints, customers can specify the number of sample points that will be used to
     * divide polyline into equally spaced segments.
     *
     * <p>Elevation data at both start and endpoints, as well as equally spaced points along the polyline will be
     * returned. The results will be listed in the direction from the first endpoint towards the last endpoint. A line
     * between two endpoints is a straight Cartesian line, the shortest line between those two points in the coordinate
     * reference system. Note that the point is chosen based on Euclidean distance and may markedly differ from the
     * geodesic path along the curved surface of the reference ellipsoid.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>lines</td><td>String</td><td>Yes</td><td>The string representation of a polyline path. A polyline is defined by endpoint coordinates,  with each endpoint separated by a pipe ('|') character. The polyline should be defined in the  following format: `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ...,  longitude_pointN, latitude_pointN]`.
     *
     *  The longitude and latitude values refer to the World Geodetic  System (WGS84) coordinate reference system. The resolution of the data used to compute the  elevation depends on the distance between the endpoints.</td></tr>
     *     <tr><td>samples</td><td>String</td><td>No</td><td>The samples parameter specifies the number of equally spaced points at which elevation values  should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value is 10.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-id</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     elevations: [
     *         {
     *             coordinate: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             elevationInMeter: Float
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response from a successful Get Data for Bounding Box API along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDataForPolylineWithResponse(String format, RequestOptions requestOptions) {
        return getDataForPolylineWithResponseAsync(format, requestOptions).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Post Data for Polyline API provides elevation data along a polyline.
     *
     * <p>A polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character.
     * In addition to passing in endpoints, customers can specify the number of sample points that will be used to
     * divide polyline into equally spaced segments.
     *
     * <p>Elevation data at both start and end points, as well as equally spaced points along the polyline will be
     * returned. The results will be listed in the direction from the first endpoint towards the last endpoint. A line
     * between two endpoints is a straight Cartesian line, the shortest line between those two points in the coordinate
     * reference system. Note that the point is chosen based on Euclidean distance and may markedly differ from the
     * geodesic path along the curved surface of the reference ellipsoid.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>samples</td><td>String</td><td>No</td><td>The samples parameter specifies the number of equally spaced points at which elevation values  should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value is 10.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-id</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         lat: Double
     *         lon: Double
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     elevations: [
     *         {
     *             coordinate: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             elevationInMeter: Float
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param polyline The string representation of a polyline path. A polyline is defined by endpoint coordinates, with
     *     each endpoint separated by a pipe ('|') character. The polyline should be defined in the following format:
     *     `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ..., longitude_pointN,
     *     latitude_pointN]`. The longitude and latitude values refer to the World Geodetic System (WGS84) coordinate
     *     reference system. The resolution of the data used to compute the elevation will depend on the distance
     *     between the endpoints.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response from a successful Get Data for Bounding Box API along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> postDataForPolylineWithResponseAsync(
            String format, BinaryData polyline, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.postDataForPolyline(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                format,
                                polyline,
                                requestOptions,
                                context));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Post Data for Polyline API provides elevation data along a polyline.
     *
     * <p>A polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character.
     * In addition to passing in endpoints, customers can specify the number of sample points that will be used to
     * divide polyline into equally spaced segments.
     *
     * <p>Elevation data at both start and end points, as well as equally spaced points along the polyline will be
     * returned. The results will be listed in the direction from the first endpoint towards the last endpoint. A line
     * between two endpoints is a straight Cartesian line, the shortest line between those two points in the coordinate
     * reference system. Note that the point is chosen based on Euclidean distance and may markedly differ from the
     * geodesic path along the curved surface of the reference ellipsoid.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>samples</td><td>String</td><td>No</td><td>The samples parameter specifies the number of equally spaced points at which elevation values  should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value is 10.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-id</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         lat: Double
     *         lon: Double
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     elevations: [
     *         {
     *             coordinate: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             elevationInMeter: Float
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param polyline The string representation of a polyline path. A polyline is defined by endpoint coordinates, with
     *     each endpoint separated by a pipe ('|') character. The polyline should be defined in the following format:
     *     `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ..., longitude_pointN,
     *     latitude_pointN]`. The longitude and latitude values refer to the World Geodetic System (WGS84) coordinate
     *     reference system. The resolution of the data used to compute the elevation will depend on the distance
     *     between the endpoints.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response from a successful Get Data for Bounding Box API along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> postDataForPolylineWithResponseAsync(
            String format, BinaryData polyline, RequestOptions requestOptions, Context context) {
        return service.postDataForPolyline(
                this.client.getHost(),
                this.client.getServiceVersion().getVersion(),
                format,
                polyline,
                requestOptions,
                context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Post Data for Polyline API provides elevation data along a polyline.
     *
     * <p>A polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character.
     * In addition to passing in endpoints, customers can specify the number of sample points that will be used to
     * divide polyline into equally spaced segments.
     *
     * <p>Elevation data at both start and end points, as well as equally spaced points along the polyline will be
     * returned. The results will be listed in the direction from the first endpoint towards the last endpoint. A line
     * between two endpoints is a straight Cartesian line, the shortest line between those two points in the coordinate
     * reference system. Note that the point is chosen based on Euclidean distance and may markedly differ from the
     * geodesic path along the curved surface of the reference ellipsoid.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>samples</td><td>String</td><td>No</td><td>The samples parameter specifies the number of equally spaced points at which elevation values  should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value is 10.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-id</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         lat: Double
     *         lon: Double
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     elevations: [
     *         {
     *             coordinate: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             elevationInMeter: Float
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param polyline The string representation of a polyline path. A polyline is defined by endpoint coordinates, with
     *     each endpoint separated by a pipe ('|') character. The polyline should be defined in the following format:
     *     `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ..., longitude_pointN,
     *     latitude_pointN]`. The longitude and latitude values refer to the World Geodetic System (WGS84) coordinate
     *     reference system. The resolution of the data used to compute the elevation will depend on the distance
     *     between the endpoints.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response from a successful Get Data for Bounding Box API along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> postDataForPolylineWithResponse(
            String format, BinaryData polyline, RequestOptions requestOptions) {
        return postDataForPolylineWithResponseAsync(format, polyline, requestOptions).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Get Data for Bounding Box API provides elevation data at equally spaced locations within a bounding box. A
     * bounding box is defined by the coordinates for two corners (southwest, northeast) and then subsequently divided
     * into rows and columns.
     *
     * <p>Elevations are returned for the vertices of the grid created by the rows and columns. Up to 2,000 elevations
     * can be returned in a single request. The returned elevation values are ordered, starting at the southwest corner,
     * and then proceeding west to east along the row. At the end of the row, it moves north to the next row, and
     * repeats the process until it reaches the far northeast corner.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>bounds</td><td>String</td><td>Yes</td><td>The string that represents the rectangular area of a bounding box. The bounds parameter is defined by the 4 bounding box coordinates, with WGS84 longitude and latitude of the southwest corner followed by  WGS84 longitude and latitude of the northeast corner. The string is presented in the following  format: `[SouthwestCorner_Longitude, SouthwestCorner_Latitude, NortheastCorner_Longitude,  NortheastCorner_Latitude]`.</td></tr>
     *     <tr><td>rows</td><td>int</td><td>Yes</td><td>Specifies the number of rows to use to divide the bounding box area into a grid. The number of vertices (rows x columns) in the grid should be less than 2,000. </td></tr>
     *     <tr><td>columns</td><td>int</td><td>Yes</td><td>Specifies the number of columns to use to divide the bounding box area into a grid. The number of vertices (rows x columns) in the grid should be less than 2,000. </td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-id</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     elevations: [
     *         {
     *             coordinate: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             elevationInMeter: Float
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response from a successful Get Data for Bounding Box API along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDataForBoundingBoxWithResponseAsync(
            String format, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getDataForBoundingBox(
                                this.client.getHost(),
                                this.client.getServiceVersion().getVersion(),
                                format,
                                requestOptions,
                                context));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Get Data for Bounding Box API provides elevation data at equally spaced locations within a bounding box. A
     * bounding box is defined by the coordinates for two corners (southwest, northeast) and then subsequently divided
     * into rows and columns.
     *
     * <p>Elevations are returned for the vertices of the grid created by the rows and columns. Up to 2,000 elevations
     * can be returned in a single request. The returned elevation values are ordered, starting at the southwest corner,
     * and then proceeding west to east along the row. At the end of the row, it moves north to the next row, and
     * repeats the process until it reaches the far northeast corner.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>bounds</td><td>String</td><td>Yes</td><td>The string that represents the rectangular area of a bounding box. The bounds parameter is defined by the 4 bounding box coordinates, with WGS84 longitude and latitude of the southwest corner followed by  WGS84 longitude and latitude of the northeast corner. The string is presented in the following  format: `[SouthwestCorner_Longitude, SouthwestCorner_Latitude, NortheastCorner_Longitude,  NortheastCorner_Latitude]`.</td></tr>
     *     <tr><td>rows</td><td>int</td><td>Yes</td><td>Specifies the number of rows to use to divide the bounding box area into a grid. The number of vertices (rows x columns) in the grid should be less than 2,000. </td></tr>
     *     <tr><td>columns</td><td>int</td><td>Yes</td><td>Specifies the number of columns to use to divide the bounding box area into a grid. The number of vertices (rows x columns) in the grid should be less than 2,000. </td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-id</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     elevations: [
     *         {
     *             coordinate: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             elevationInMeter: Float
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response from a successful Get Data for Bounding Box API along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDataForBoundingBoxWithResponseAsync(
            String format, RequestOptions requestOptions, Context context) {
        return service.getDataForBoundingBox(
                this.client.getHost(), this.client.getServiceVersion().getVersion(), format, requestOptions, context);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Get Data for Bounding Box API provides elevation data at equally spaced locations within a bounding box. A
     * bounding box is defined by the coordinates for two corners (southwest, northeast) and then subsequently divided
     * into rows and columns.
     *
     * <p>Elevations are returned for the vertices of the grid created by the rows and columns. Up to 2,000 elevations
     * can be returned in a single request. The returned elevation values are ordered, starting at the southwest corner,
     * and then proceeding west to east along the row. At the end of the row, it moves north to the next row, and
     * repeats the process until it reaches the far northeast corner.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>bounds</td><td>String</td><td>Yes</td><td>The string that represents the rectangular area of a bounding box. The bounds parameter is defined by the 4 bounding box coordinates, with WGS84 longitude and latitude of the southwest corner followed by  WGS84 longitude and latitude of the northeast corner. The string is presented in the following  format: `[SouthwestCorner_Longitude, SouthwestCorner_Latitude, NortheastCorner_Longitude,  NortheastCorner_Latitude]`.</td></tr>
     *     <tr><td>rows</td><td>int</td><td>Yes</td><td>Specifies the number of rows to use to divide the bounding box area into a grid. The number of vertices (rows x columns) in the grid should be less than 2,000. </td></tr>
     *     <tr><td>columns</td><td>int</td><td>Yes</td><td>Specifies the number of columns to use to divide the bounding box area into a grid. The number of vertices (rows x columns) in the grid should be less than 2,000. </td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-id</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     elevations: [
     *         {
     *             coordinate: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             elevationInMeter: Float
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response from a successful Get Data for Bounding Box API along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDataForBoundingBoxWithResponse(String format, RequestOptions requestOptions) {
        return getDataForBoundingBoxWithResponseAsync(format, requestOptions).block();
    }
}
