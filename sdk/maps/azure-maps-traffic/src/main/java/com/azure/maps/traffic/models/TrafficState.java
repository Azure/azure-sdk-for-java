// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.traffic.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Traffic State information.
 */
@Immutable
public final class TrafficState implements JsonSerializable<TrafficState> {

    /*
     * The elapsed time (in seconds) from the Traffic Model ID creation.
     */
    private Integer trafficAge;

    /*
     * The unique ID called Traffic Model ID is used in calls to Traffic Incident services. It allows to obtain information from particular traffic updates. Traffic Model ID is updated every minute, and is valid for two minutes before it times out.
     */
    private String trafficModelId;

    /**
     * Set default constructor to private
     */
    private TrafficState() {
    }

    /**
     * Get the trafficAge property: The elapsed time (in seconds) from the Traffic Model ID creation.
     *
     * @return the trafficAge value.
     */
    public Integer getTrafficAge() {
        return this.trafficAge;
    }

    /**
     * Get the trafficModelId property: The unique ID called Traffic Model ID is used in calls to Traffic Incident
     * services. It allows to obtain information from particular traffic updates. Traffic Model ID is updated every
     * minute, and is valid for two minutes before it times out.
     *
     * @return the trafficModelId value.
     */
    public String getTrafficModelId() {
        return this.trafficModelId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrafficState from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrafficState if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TrafficState.
     */
    public static TrafficState fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrafficState deserializedTrafficState = new TrafficState();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("@trafficAge".equals(fieldName)) {
                    deserializedTrafficState.trafficAge = reader.getNullable(JsonReader::getInt);
                } else if ("@trafficModelId".equals(fieldName)) {
                    deserializedTrafficState.trafficModelId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTrafficState;
        });
    }
}
