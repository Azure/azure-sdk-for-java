// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.traffic.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Generic representation of a point with coordinates (x, y) in the Cartesian plane.
 */
@Immutable
public final class MapsPoint implements JsonSerializable<MapsPoint> {

    /*
     * x coordinate
     */
    private Float x;

    /*
     * y coordinate
     */
    private Float y;

    /**
     * Set default constructor to private
     */
    private MapsPoint() {
    }

    /**
     * Get the x property: x coordinate.
     *
     * @return the x value.
     */
    public Float getX() {
        return this.x;
    }

    /**
     * Get the y property: y coordinate.
     *
     * @return the y value.
     */
    public Float getY() {
        return this.y;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MapsPoint from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MapsPoint if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the MapsPoint.
     */
    public static MapsPoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MapsPoint deserializedMapsPoint = new MapsPoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("x".equals(fieldName)) {
                    deserializedMapsPoint.x = reader.getNullable(JsonReader::getFloat);
                } else if ("y".equals(fieldName)) {
                    deserializedMapsPoint.y = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedMapsPoint;
        });
    }
}
