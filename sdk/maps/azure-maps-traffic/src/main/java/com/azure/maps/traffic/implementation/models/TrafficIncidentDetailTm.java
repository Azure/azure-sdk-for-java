// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.traffic.implementation.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.traffic.models.TrafficIncidentPointOfInterest;
import java.io.IOException;
import java.util.List;

/**
 * Main response element.
 */
@Immutable
public final class TrafficIncidentDetailTm implements JsonSerializable<TrafficIncidentDetailTm> {
    /*
     * ID of the traffic model for this incident
     */
    private String id;

    /*
     * A single traffic incident, or a cluster of traffic incidents
     */
    private List<TrafficIncidentPointOfInterest> pointsOfInterest;

    /**
     * Creates an instance of TrafficIncidentDetailTm class.
     */
    public TrafficIncidentDetailTm() {
    }

    /**
     * Get the id property: ID of the traffic model for this incident.
     * 
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the pointsOfInterest property: A single traffic incident, or a cluster of traffic incidents.
     * 
     * @return the pointsOfInterest value.
     */
    public List<TrafficIncidentPointOfInterest> getPointsOfInterest() {
        return this.pointsOfInterest;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrafficIncidentDetailTm from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrafficIncidentDetailTm if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TrafficIncidentDetailTm.
     */
    public static TrafficIncidentDetailTm fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrafficIncidentDetailTm deserializedTrafficIncidentDetailTm = new TrafficIncidentDetailTm();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("@id".equals(fieldName)) {
                    deserializedTrafficIncidentDetailTm.id = reader.getString();
                } else if ("poi".equals(fieldName)) {
                    List<TrafficIncidentPointOfInterest> pointsOfInterest
                        = reader.readArray(reader1 -> TrafficIncidentPointOfInterest.fromJson(reader1));
                    deserializedTrafficIncidentDetailTm.pointsOfInterest = pointsOfInterest;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrafficIncidentDetailTm;
        });
    }
}
