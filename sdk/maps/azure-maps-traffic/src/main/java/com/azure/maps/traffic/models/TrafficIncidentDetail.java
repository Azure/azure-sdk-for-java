// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.traffic.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.traffic.implementation.models.TrafficIncidentDetailTm;
import java.io.IOException;
import java.util.List;

/**
 * This object is returned from a successful Traffic incident Detail call.
 */
@Immutable
public final class TrafficIncidentDetail implements JsonSerializable<TrafficIncidentDetail> {

    /*
     * Main response element
     */
    private TrafficIncidentDetailTm tm;

    /**
     * Set default constructor to private
     */
    private TrafficIncidentDetail() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrafficIncidentDetail from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrafficIncidentDetail if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TrafficIncidentDetail.
     */
    public static TrafficIncidentDetail fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrafficIncidentDetail deserializedTrafficIncidentDetail = new TrafficIncidentDetail();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("tm".equals(fieldName)) {
                    deserializedTrafficIncidentDetail.tm = TrafficIncidentDetailTm.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTrafficIncidentDetail;
        });
    }

    /**
     * Get the id property: ID of the traffic model for this incident.
     *
     * @return the id value.
     */
    public String getId() {
        return this.tm.getId();
    }

    /**
     * Get the pointsOfInterest property: A single traffic incident, or a cluster of traffic incidents.
     *
     * @return the pointsOfInterest value.
     */
    public List<TrafficIncidentPointOfInterest> getPointsOfInterest() {
        return this.tm.getPointsOfInterest();
    }
}
