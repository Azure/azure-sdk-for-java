// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.traffic.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Viewport Response object.
 */
@Immutable
public final class TrafficIncidentViewportResponse implements JsonSerializable<TrafficIncidentViewportResponse> {

    /*
     * Traffic State information
     */
    private TrafficState trafficState;

    /*
     * When the copyright parameter value is true, this contains the full text of the copyright information that must be displayed with the tiles in the viewport
     */
    private String copyrightInformation;

    /*
     * Indicates the software version used to generate the information. For use with support queries.
     */
    private String version;

    /*
     * Indicates the data provider's internal names for the map data used in the viewport. For use with support queries.
     */
    private String maps;

    /**
     * Set default constructor to private
     */
    private TrafficIncidentViewportResponse() {
    }

    /**
     * Get the trafficState property: Traffic State information.
     *
     * @return the trafficState value.
     */
    public TrafficState getTrafficState() {
        return this.trafficState;
    }

    /**
     * Get the copyrightInformation property: When the copyright parameter value is true, this contains the full text of
     * the copyright information that must be displayed with the tiles in the viewport.
     *
     * @return the copyrightInformation value.
     */
    public String getCopyrightInformation() {
        return this.copyrightInformation;
    }

    /**
     * Get the version property: Indicates the software version used to generate the information. For use with support
     * queries.
     *
     * @return the version value.
     */
    public String getVersion() {
        return this.version;
    }

    /**
     * Get the maps property: Indicates the data provider's internal names for the map data used in the viewport. For
     * use with support queries.
     *
     * @return the maps value.
     */
    public String getMaps() {
        return this.maps;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrafficIncidentViewportViewpResp from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrafficIncidentViewportViewpResp if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TrafficIncidentViewportViewpResp.
     */
    public static TrafficIncidentViewportResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrafficIncidentViewportResponse deserializedTrafficIncidentViewportViewpResp
                = new TrafficIncidentViewportResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("trafficState".equals(fieldName)) {
                    deserializedTrafficIncidentViewportViewpResp.trafficState = TrafficState.fromJson(reader);
                } else if ("copyrightIds".equals(fieldName)) {
                    deserializedTrafficIncidentViewportViewpResp.copyrightInformation = reader.getString();
                } else if ("@version".equals(fieldName)) {
                    deserializedTrafficIncidentViewportViewpResp.version = reader.getString();
                } else if ("@maps".equals(fieldName)) {
                    deserializedTrafficIncidentViewportViewpResp.maps = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTrafficIncidentViewportViewpResp;
        });
    }
}
