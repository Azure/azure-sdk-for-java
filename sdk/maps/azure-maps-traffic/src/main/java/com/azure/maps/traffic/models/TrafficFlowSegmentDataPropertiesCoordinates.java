// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.traffic.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.traffic.implementation.models.LatLongPair;
import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;
import com.azure.core.models.GeoPosition;

/**
 * Includes the coordinates describing the shape of the segment. Coordinates are shifted from the road depending on the
 * zoom level to support high quality visualization in every scale.
 */
@Immutable
public final class TrafficFlowSegmentDataPropertiesCoordinates
    implements JsonSerializable<TrafficFlowSegmentDataPropertiesCoordinates> {

    /*
     * Coordinate array
     */
    private List<LatLongPair> coordinates;

    /**
     * Set default constructor to private
     */
    private TrafficFlowSegmentDataPropertiesCoordinates() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrafficFlowSegmentDataFlowSegmentDataCoordinates from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrafficFlowSegmentDataFlowSegmentDataCoordinates if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TrafficFlowSegmentDataFlowSegmentDataCoordinates.
     */
    public static TrafficFlowSegmentDataPropertiesCoordinates fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrafficFlowSegmentDataPropertiesCoordinates deserializedTrafficFlowSegmentDataFlowSegmentDataCoordinates
                = new TrafficFlowSegmentDataPropertiesCoordinates();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("coordinate".equals(fieldName)) {
                    List<LatLongPair> coordinates = reader.readArray(reader1 -> LatLongPair.fromJson(reader1));
                    deserializedTrafficFlowSegmentDataFlowSegmentDataCoordinates.coordinates = coordinates;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTrafficFlowSegmentDataFlowSegmentDataCoordinates;
        });
    }

    /**
     * Return the coordinates
     *
     * @return Returns a list of {@link GeoPosition} coordinates.
     */
    public List<GeoPosition> getCoordinates() {
        return this.coordinates.stream()
            .map(item -> new GeoPosition(item.getLongitude(), item.getLatitude()))
            .collect(Collectors.toList());
    }
}
