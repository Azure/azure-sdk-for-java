// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.traffic.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableEnum;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

/**
 * The icon category associated with this incident. Values are numbers in the range 0-13, with the following meanings --
 * 0: Unknown, 1: Accident, 2: Fog, 3: Dangerous Conditions, 4: Rain, 5: Ice, 6: Jam, 7: Lane Closed, 8: Road Closed, 9:
 * Road Works, 10: Wind, 11: Flooding, 12: Detour, 13: Cluster.
 */
public final class IconCategory implements ExpandableEnum<Integer>, JsonSerializable<IconCategory> {
    private static final Map<Integer, IconCategory> VALUES = new ConcurrentHashMap<>();

    private static final Function<Integer, IconCategory> NEW_INSTANCE = IconCategory::new;

    /**
     * Unknown.
     */
    @Generated
    public static final IconCategory UNKNOWN = fromValue(0);

    /**
     * Accident.
     */
    @Generated
    public static final IconCategory ACCIDENT = fromValue(1);

    /**
     * Fog.
     */
    @Generated
    public static final IconCategory FOG = fromValue(2);

    /**
     * Dangerous Conditions.
     */
    @Generated
    public static final IconCategory DANGEROUS_CONDITIONS = fromValue(3);

    /**
     * Rain.
     */
    @Generated
    public static final IconCategory RAIN = fromValue(4);

    /**
     * Ice.
     */
    @Generated
    public static final IconCategory ICE = fromValue(5);

    /**
     * Jam.
     */
    @Generated
    public static final IconCategory JAM = fromValue(6);

    /**
     * Lane Closed.
     */
    @Generated
    public static final IconCategory LANE_CLOSED = fromValue(7);

    /**
     * Road Closed.
     */
    @Generated
    public static final IconCategory ROAD_CLOSED = fromValue(8);

    /**
     * Road Works.
     */
    @Generated
    public static final IconCategory ROAD_WORKS = fromValue(9);

    /**
     * Wind.
     */
    @Generated
    public static final IconCategory WIND = fromValue(10);

    /**
     * Flooding.
     */
    @Generated
    public static final IconCategory FLOODING = fromValue(11);

    /**
     * Detour.
     */
    @Generated
    public static final IconCategory DETOUR = fromValue(12);

    /**
     * Cluster: Returned if a cluster contains incidents with different icon categories.
     */
    @Generated
    public static final IconCategory CLUSTER = fromValue(13);

    /**
     * Broken Down Vehicle.
     */
    @Generated
    public static final IconCategory BROKEN_DOWN_VEHICLE = fromValue(14);

    private final Integer value;

    private IconCategory(Integer value) {
        this.value = value;
    }

    /**
     * Creates or finds a IconCategory.
     * 
     * @param value a value to look for.
     * @return the corresponding IconCategory.
     * @throws IllegalArgumentException if value is null.
     */
    @Generated
    public static IconCategory fromValue(Integer value) {
        if (value == null) {
            throw new IllegalArgumentException("'value' cannot be null.");
        }
        return VALUES.computeIfAbsent(value, NEW_INSTANCE);
    }

    /**
     * Gets known IconCategory values.
     * 
     * @return Known IconCategory values.
     */
    @Generated
    public static Collection<IconCategory> values() {
        return new ArrayList<>(VALUES.values());
    }

    /**
     * Gets the value of the IconCategory instance.
     * 
     * @return the value of the IconCategory instance.
     */
    @Generated
    @Override
    public Integer getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeInt(getValue());
    }

    /**
     * Reads an instance of IconCategory from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IconCategory if the JsonReader was pointing to an instance of it, or null if the
     * JsonReader was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IconCategory.
     * @throws IllegalStateException If unexpected JSON token is found.
     */
    @Generated
    public static IconCategory fromJson(JsonReader jsonReader) throws IOException {
        JsonToken nextToken = jsonReader.nextToken();
        if (nextToken == JsonToken.NULL) {
            return null;
        }
        if (nextToken != JsonToken.NUMBER) {
            throw new IllegalStateException(
                String.format("Unexpected JSON token for %s deserialization: %s", JsonToken.NUMBER, nextToken));
        }
        return IconCategory.fromValue(jsonReader.getInt());
    }

    @Generated
    @Override
    public String toString() {
        return Objects.toString(this.value);
    }

    @Generated
    @Override
    public boolean equals(Object obj) {
        return this == obj;
    }

    @Generated
    @Override
    public int hashCode() {
        return Objects.hashCode(this.value);
    }
}
