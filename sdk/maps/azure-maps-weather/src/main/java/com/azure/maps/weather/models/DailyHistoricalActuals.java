// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The DailyHistoricalActuals model.
 */
@Fluent
public final class DailyHistoricalActuals implements JsonSerializable<DailyHistoricalActuals> {

    /*
     * Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
     */
    private OffsetDateTime timestamp;

    /*
     * Temperature values.
     */
    private WeatherValueMaxMinAvg temperature;

    /*
     * Summary of heating or cooling degree day information. Degree days are measures of how cold or warm a location is. A degree day compares the mean (the average of the high and low) outdoor temperatures recorded for a location to a standard temperature of 65 degrees F/ 18 degree C.
     */
    private DegreeDaySummary degreeDaySummary;

    /*
     * The amount of precipitation (liquid equivalent) that has fallen.
     */
    private WeatherUnitDetails precipitation;

    /*
     * The amount of snow that has fallen.
     */
    private WeatherUnitDetails snowfall;

    /*
     * Snow depth.
     */
    private WeatherUnitDetails snowDepth;

    /**
     * Set default DailyHistoricalActuals constructor to private
     */
    private DailyHistoricalActuals() {
    }

    /**
     * Get the timestamp property: Date and time of the current observation displayed in ISO 8601 format, for example,
     * 2019-10-27T19:39:57-08:00.
     *
     * @return the timestamp value.
     */
    public OffsetDateTime getTimestamp() {
        return this.timestamp;
    }

    /**
     * Get the temperature property: Temperature values.
     *
     * @return the temperature value.
     */
    public WeatherValueMaxMinAvg getTemperature() {
        return this.temperature;
    }

    /**
     * Get the degreeDaySummary property: Summary of heating or cooling degree day information. Degree days are measures
     * of how cold or warm a location is. A degree day compares the mean (the average of the high and low) outdoor
     * temperatures recorded for a location to a standard temperature of 65 degrees F/ 18 degree C.
     *
     * @return the degreeDaySummary value.
     */
    public DegreeDaySummary getDegreeDaySummary() {
        return this.degreeDaySummary;
    }

    /**
     * Get the precipitation property: The amount of precipitation (liquid equivalent) that has fallen.
     *
     * @return the precipitation value.
     */
    public WeatherUnitDetails getPrecipitation() {
        return this.precipitation;
    }

    /**
     * Get the snowfall property: The amount of snow that has fallen.
     *
     * @return the snowfall value.
     */
    public WeatherUnitDetails getSnowfall() {
        return this.snowfall;
    }

    /**
     * Get the snowDepth property: Snow depth.
     *
     * @return the snowDepth value.
     */
    public WeatherUnitDetails getSnowDepth() {
        return this.snowDepth;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("date",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        jsonWriter.writeJsonField("temperature", this.temperature);
        jsonWriter.writeJsonField("degreeDaySummary", this.degreeDaySummary);
        jsonWriter.writeJsonField("precipitation", this.precipitation);
        jsonWriter.writeJsonField("snowfall", this.snowfall);
        jsonWriter.writeJsonField("snowDepth", this.snowDepth);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DailyHistoricalActuals from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DailyHistoricalActuals if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DailyHistoricalActuals.
     */
    public static DailyHistoricalActuals fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DailyHistoricalActuals deserializedDailyHistoricalActuals = new DailyHistoricalActuals();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("date".equals(fieldName)) {
                    deserializedDailyHistoricalActuals.timestamp
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("temperature".equals(fieldName)) {
                    deserializedDailyHistoricalActuals.temperature = WeatherValueMaxMinAvg.fromJson(reader);
                } else if ("degreeDaySummary".equals(fieldName)) {
                    deserializedDailyHistoricalActuals.degreeDaySummary = DegreeDaySummary.fromJson(reader);
                } else if ("precipitation".equals(fieldName)) {
                    deserializedDailyHistoricalActuals.precipitation = WeatherUnitDetails.fromJson(reader);
                } else if ("snowfall".equals(fieldName)) {
                    deserializedDailyHistoricalActuals.snowfall = WeatherUnitDetails.fromJson(reader);
                } else if ("snowDepth".equals(fieldName)) {
                    deserializedDailyHistoricalActuals.snowDepth = WeatherUnitDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDailyHistoricalActuals;
        });
    }
}
