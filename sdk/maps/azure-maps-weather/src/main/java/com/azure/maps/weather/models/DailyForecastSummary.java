// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Summary for the main conditions for the requested time period. Notice that summary can cover only part of the time
 * period.
 */
@Fluent
public final class DailyForecastSummary implements JsonSerializable<DailyForecastSummary> {

    /*
     * Date and time that the summary is in effect, displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
     */
    private OffsetDateTime startDate;

    /*
     * Date and time that the summary period ends, displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
     */
    private OffsetDateTime endDate;

    /*
     * severity
     */
    private Integer severity;

    /*
     * Summary phrase of the daily forecast.  Displayed in specified language.
     */
    private String phrase;

    /*
     * one or 2 word(s) to summarize the phrase.
     */
    private String category;

    /**
     * Set default DailyForecastSummary constructor to private
     */
    private DailyForecastSummary() {
    }

    /**
     * Get the startDate property: Date and time that the summary is in effect, displayed in ISO 8601 format, for
     * example, 2019-10-27T19:39:57-08:00.
     *
     * @return the startDate value.
     */
    public OffsetDateTime getStartDate() {
        return this.startDate;
    }

    /**
     * Get the endDate property: Date and time that the summary period ends, displayed in ISO 8601 format, for example,
     * 2019-10-27T19:39:57-08:00.
     *
     * @return the endDate value.
     */
    public OffsetDateTime getEndDate() {
        return this.endDate;
    }

    /**
     * Get the severity property: severity.
     *
     * @return the severity value.
     */
    public Integer getSeverity() {
        return this.severity;
    }

    /**
     * Get the phrase property: Summary phrase of the daily forecast. Displayed in specified language.
     *
     * @return the phrase value.
     */
    public String getPhrase() {
        return this.phrase;
    }

    /**
     * Get the category property: one or 2 word(s) to summarize the phrase.
     *
     * @return the category value.
     */
    public String getCategory() {
        return this.category;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startDate",
            this.startDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startDate));
        jsonWriter.writeStringField("endDate",
            this.endDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDate));
        jsonWriter.writeNumberField("severity", this.severity);
        jsonWriter.writeStringField("phrase", this.phrase);
        jsonWriter.writeStringField("category", this.category);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DailyForecastSummary from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DailyForecastSummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DailyForecastSummary.
     */
    public static DailyForecastSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DailyForecastSummary deserializedDailyForecastSummary = new DailyForecastSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("startDate".equals(fieldName)) {
                    deserializedDailyForecastSummary.startDate
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("endDate".equals(fieldName)) {
                    deserializedDailyForecastSummary.endDate
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("severity".equals(fieldName)) {
                    deserializedDailyForecastSummary.severity = reader.getNullable(JsonReader::getInt);
                } else if ("phrase".equals(fieldName)) {
                    deserializedDailyForecastSummary.phrase = reader.getString();
                } else if ("category".equals(fieldName)) {
                    deserializedDailyForecastSummary.category = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDailyForecastSummary;
        });
    }
}
