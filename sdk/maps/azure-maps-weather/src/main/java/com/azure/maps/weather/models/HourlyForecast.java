// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The HourlyForecast model.
 */
@Fluent
public final class HourlyForecast implements JsonSerializable<HourlyForecast> {

    /*
     * Date and time of the forecast in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
     */
    private OffsetDateTime timestamp;

    /*
     * Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather services in Azure Maps](/azure/azure-maps/weather-services-concepts#weather-icons) for details.
     */
    private IconCode iconCode;

    /*
     * Phrase description of the weather icon.
     */
    private String iconPhrase;

    /*
     * Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation.
     */
    private Boolean hasPrecipitation;

    /*
     * Specifies whether or not it is daylight. True indicates day light.
     */
    private Boolean isDaylight;

    /*
     * Temperature being returned.
     */
    private WeatherUnitDetails temperature;

    /*
     * RealFeel™ Temperature being returned. Describes what the temperature really feels like in the shade.
     */
    private WeatherUnitDetails realFeelTemperature;

    /*
     * The temperature to which air may be cooled by evaporating water into it at constant pressure until it reaches saturation.
     */
    private WeatherUnitDetails wetBulbTemperature;

    /*
     * The dewpoint temperature in specified unit. The dewpoint temperature is the temperature that the air must be cooled to in order to reach saturation.
     */
    private WeatherUnitDetails dewPoint;

    /*
     * Wind details being returned including speed and direction.
     */
    private WindDetails wind;

    /*
     * Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
     */
    private WindDetails windGust;

    /*
     * Relative humidity is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature.
     */
    private Integer relativeHumidity;

    /*
     * Visibility in specified unit. A measure of the distance at which an object or light can be clearly discerned.
     */
    private WeatherUnitDetails visibility;

    /*
     * Cloud ceiling in specified unit. The ceiling is a measurement of the height of the base of the lowest clouds.
     */
    private WeatherUnitDetails cloudCeiling;

    /*
     * Measure of the strength of the ultraviolet radiation from the sun. Supported values are:
     *   * `0-2` - Low danger from the sun's UV rays or the average person.
     *   * `3-5` - Moderate risk of harm from unprotected sun exposure.
     *   * `6-7` - High risk of harm from unprotected sun exposure.
     *   * `8-10` - Very high risk of harm from unprotected sun exposure.
     *   * `11+` - Extreme risk of harm from unprotected sun exposure.
     */
    private Integer uvIndex;

    /*
     * Phrase associated with the `uvIndex`.
     */
    private String uvIndexDescription;

    /*
     * Percent representing the probability of precipitation. For example, '20'.
     */
    private Integer precipitationProbability;

    /*
     * Percent representing the probability of rain. For example, '50'.
     */
    private Integer rainProbability;

    /*
     * Percent representing the probability of snow. For example, '50'.
     */
    private Integer snowProbability;

    /*
     * Percent representing the probability of snow. For example, '5'.
     */
    private Integer iceProbability;

    /*
     * Total liquid equivalent of precipitation during the forecast period.
     */
    private WeatherUnitDetails totalLiquid;

    /*
     * Rain
     */
    private WeatherUnitDetails rain;

    /*
     * Snow
     */
    private WeatherUnitDetails snow;

    /*
     * Ice
     */
    private WeatherUnitDetails ice;

    /*
     * Percent representing cloud cover.
     */
    private Integer cloudCover;

    /**
     * Set default HourlyForecast constructor to private
     */
    private HourlyForecast() {
    }

    /**
     * Get the timestamp property: Date and time of the forecast in ISO 8601 format, for example,
     * 2019-10-27T19:39:57-08:00.
     *
     * @return the timestamp value.
     */
    public OffsetDateTime getTimestamp() {
        return this.timestamp;
    }

    /**
     * Get the iconCode property: Numeric value representing an image that displays the `iconPhrase`. Please refer to
     * [Weather services in Azure Maps](/azure/azure-maps/weather-services-concepts#weather-icons) for details.
     *
     * @return the iconCode value.
     */
    public IconCode getIconCode() {
        return this.iconCode;
    }

    /**
     * Get the iconPhrase property: Phrase description of the weather icon.
     *
     * @return the iconPhrase value.
     */
    public String getIconPhrase() {
        return this.iconPhrase;
    }

    /**
     * Get the hasPrecipitation property: Indicates the presence or absence of precipitation. True indicates the
     * presence of precipitation, false indicates the absence of precipitation.
     *
     * @return the hasPrecipitation value.
     */
    public Boolean isHasPrecipitation() {
        return this.hasPrecipitation;
    }

    /**
     * Get the isDaylight property: Specifies whether or not it is daylight. True indicates day light.
     *
     * @return the isDaylight value.
     */
    public Boolean isDaylight() {
        return this.isDaylight;
    }

    /**
     * Get the temperature property: Temperature being returned.
     *
     * @return the temperature value.
     */
    public WeatherUnitDetails getTemperature() {
        return this.temperature;
    }

    /**
     * Get the realFeelTemperature property: RealFeel™ Temperature being returned. Describes what the temperature really
     * feels like in the shade.
     *
     * @return the realFeelTemperature value.
     */
    public WeatherUnitDetails getRealFeelTemperature() {
        return this.realFeelTemperature;
    }

    /**
     * Get the wetBulbTemperature property: The temperature to which air may be cooled by evaporating water into it at
     * constant pressure until it reaches saturation.
     *
     * @return the wetBulbTemperature value.
     */
    public WeatherUnitDetails getWetBulbTemperature() {
        return this.wetBulbTemperature;
    }

    /**
     * Get the dewPoint property: The dewpoint temperature in specified unit. The dewpoint temperature is the
     * temperature that the air must be cooled to in order to reach saturation.
     *
     * @return the dewPoint value.
     */
    public WeatherUnitDetails getDewPoint() {
        return this.dewPoint;
    }

    /**
     * Get the wind property: Wind details being returned including speed and direction.
     *
     * @return the wind value.
     */
    public WindDetails getWind() {
        return this.wind;
    }

    /**
     * Get the windGust property: Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
     *
     * @return the windGust value.
     */
    public WindDetails getWindGust() {
        return this.windGust;
    }

    /**
     * Get the relativeHumidity property: Relative humidity is the amount of water vapor present in air expressed as a
     * percentage of the amount needed for saturation at the same temperature.
     *
     * @return the relativeHumidity value.
     */
    public Integer getRelativeHumidity() {
        return this.relativeHumidity;
    }

    /**
     * Get the visibility property: Visibility in specified unit. A measure of the distance at which an object or light
     * can be clearly discerned.
     *
     * @return the visibility value.
     */
    public WeatherUnitDetails getVisibility() {
        return this.visibility;
    }

    /**
     * Get the cloudCeiling property: Cloud ceiling in specified unit. The ceiling is a measurement of the height of the
     * base of the lowest clouds.
     *
     * @return the cloudCeiling value.
     */
    public WeatherUnitDetails getCloudCeiling() {
        return this.cloudCeiling;
    }

    /**
     * Get the uvIndex property: Measure of the strength of the ultraviolet radiation from the sun. Supported values
     * are:
     * * `0-2` - Low danger from the sun's UV rays or the average person.
     * * `3-5` - Moderate risk of harm from unprotected sun exposure.
     * * `6-7` - High risk of harm from unprotected sun exposure.
     * * `8-10` - Very high risk of harm from unprotected sun exposure.
     * * `11+` - Extreme risk of harm from unprotected sun exposure.
     *
     * @return the uvIndex value.
     */
    public Integer getUvIndex() {
        return this.uvIndex;
    }

    /**
     * Get the uvIndexDescription property: Phrase associated with the `uvIndex`.
     *
     * @return the uvIndexDescription value.
     */
    public String getUvIndexDescription() {
        return this.uvIndexDescription;
    }

    /**
     * Get the precipitationProbability property: Percent representing the probability of precipitation. For example,
     * '20'.
     *
     * @return the precipitationProbability value.
     */
    public Integer getPrecipitationProbability() {
        return this.precipitationProbability;
    }

    /**
     * Get the rainProbability property: Percent representing the probability of rain. For example, '50'.
     *
     * @return the rainProbability value.
     */
    public Integer getRainProbability() {
        return this.rainProbability;
    }

    /**
     * Get the snowProbability property: Percent representing the probability of snow. For example, '50'.
     *
     * @return the snowProbability value.
     */
    public Integer getSnowProbability() {
        return this.snowProbability;
    }

    /**
     * Get the iceProbability property: Percent representing the probability of snow. For example, '5'.
     *
     * @return the iceProbability value.
     */
    public Integer getIceProbability() {
        return this.iceProbability;
    }

    /**
     * Get the totalLiquid property: Total liquid equivalent of precipitation during the forecast period.
     *
     * @return the totalLiquid value.
     */
    public WeatherUnitDetails getTotalLiquid() {
        return this.totalLiquid;
    }

    /**
     * Get the rain property: Rain.
     *
     * @return the rain value.
     */
    public WeatherUnitDetails getRain() {
        return this.rain;
    }

    /**
     * Get the snow property: Snow.
     *
     * @return the snow value.
     */
    public WeatherUnitDetails getSnow() {
        return this.snow;
    }

    /**
     * Get the ice property: Ice.
     *
     * @return the ice value.
     */
    public WeatherUnitDetails getIce() {
        return this.ice;
    }

    /**
     * Get the cloudCover property: Percent representing cloud cover.
     *
     * @return the cloudCover value.
     */
    public Integer getCloudCover() {
        return this.cloudCover;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("date",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        jsonWriter.writeNumberField("iconCode", this.iconCode == null ? null : this.iconCode.toInt());
        jsonWriter.writeStringField("iconPhrase", this.iconPhrase);
        jsonWriter.writeBooleanField("hasPrecipitation", this.hasPrecipitation);
        jsonWriter.writeBooleanField("isDaylight", this.isDaylight);
        jsonWriter.writeJsonField("temperature", this.temperature);
        jsonWriter.writeJsonField("realFeelTemperature", this.realFeelTemperature);
        jsonWriter.writeJsonField("wetBulbTemperature", this.wetBulbTemperature);
        jsonWriter.writeJsonField("dewPoint", this.dewPoint);
        jsonWriter.writeJsonField("wind", this.wind);
        jsonWriter.writeJsonField("windGust", this.windGust);
        jsonWriter.writeNumberField("relativeHumidity", this.relativeHumidity);
        jsonWriter.writeJsonField("visibility", this.visibility);
        jsonWriter.writeJsonField("ceiling", this.cloudCeiling);
        jsonWriter.writeNumberField("uvIndex", this.uvIndex);
        jsonWriter.writeStringField("uvIndexPhrase", this.uvIndexDescription);
        jsonWriter.writeNumberField("precipitationProbability", this.precipitationProbability);
        jsonWriter.writeNumberField("rainProbability", this.rainProbability);
        jsonWriter.writeNumberField("snowProbability", this.snowProbability);
        jsonWriter.writeNumberField("iceProbability", this.iceProbability);
        jsonWriter.writeJsonField("totalLiquid", this.totalLiquid);
        jsonWriter.writeJsonField("rain", this.rain);
        jsonWriter.writeJsonField("snow", this.snow);
        jsonWriter.writeJsonField("ice", this.ice);
        jsonWriter.writeNumberField("cloudCover", this.cloudCover);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HourlyForecast from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of HourlyForecast if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HourlyForecast.
     */
    public static HourlyForecast fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HourlyForecast deserializedHourlyForecast = new HourlyForecast();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("date".equals(fieldName)) {
                    deserializedHourlyForecast.timestamp
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("iconCode".equals(fieldName)) {
                    deserializedHourlyForecast.iconCode = IconCode.fromInt(reader.getInt());
                } else if ("iconPhrase".equals(fieldName)) {
                    deserializedHourlyForecast.iconPhrase = reader.getString();
                } else if ("hasPrecipitation".equals(fieldName)) {
                    deserializedHourlyForecast.hasPrecipitation = reader.getNullable(JsonReader::getBoolean);
                } else if ("isDaylight".equals(fieldName)) {
                    deserializedHourlyForecast.isDaylight = reader.getNullable(JsonReader::getBoolean);
                } else if ("temperature".equals(fieldName)) {
                    deserializedHourlyForecast.temperature = WeatherUnitDetails.fromJson(reader);
                } else if ("realFeelTemperature".equals(fieldName)) {
                    deserializedHourlyForecast.realFeelTemperature = WeatherUnitDetails.fromJson(reader);
                } else if ("wetBulbTemperature".equals(fieldName)) {
                    deserializedHourlyForecast.wetBulbTemperature = WeatherUnitDetails.fromJson(reader);
                } else if ("dewPoint".equals(fieldName)) {
                    deserializedHourlyForecast.dewPoint = WeatherUnitDetails.fromJson(reader);
                } else if ("wind".equals(fieldName)) {
                    deserializedHourlyForecast.wind = WindDetails.fromJson(reader);
                } else if ("windGust".equals(fieldName)) {
                    deserializedHourlyForecast.windGust = WindDetails.fromJson(reader);
                } else if ("relativeHumidity".equals(fieldName)) {
                    deserializedHourlyForecast.relativeHumidity = reader.getNullable(JsonReader::getInt);
                } else if ("visibility".equals(fieldName)) {
                    deserializedHourlyForecast.visibility = WeatherUnitDetails.fromJson(reader);
                } else if ("ceiling".equals(fieldName)) {
                    deserializedHourlyForecast.cloudCeiling = WeatherUnitDetails.fromJson(reader);
                } else if ("uvIndex".equals(fieldName)) {
                    deserializedHourlyForecast.uvIndex = reader.getNullable(JsonReader::getInt);
                } else if ("uvIndexPhrase".equals(fieldName)) {
                    deserializedHourlyForecast.uvIndexDescription = reader.getString();
                } else if ("precipitationProbability".equals(fieldName)) {
                    deserializedHourlyForecast.precipitationProbability = reader.getNullable(JsonReader::getInt);
                } else if ("rainProbability".equals(fieldName)) {
                    deserializedHourlyForecast.rainProbability = reader.getNullable(JsonReader::getInt);
                } else if ("snowProbability".equals(fieldName)) {
                    deserializedHourlyForecast.snowProbability = reader.getNullable(JsonReader::getInt);
                } else if ("iceProbability".equals(fieldName)) {
                    deserializedHourlyForecast.iceProbability = reader.getNullable(JsonReader::getInt);
                } else if ("totalLiquid".equals(fieldName)) {
                    deserializedHourlyForecast.totalLiquid = WeatherUnitDetails.fromJson(reader);
                } else if ("rain".equals(fieldName)) {
                    deserializedHourlyForecast.rain = WeatherUnitDetails.fromJson(reader);
                } else if ("snow".equals(fieldName)) {
                    deserializedHourlyForecast.snow = WeatherUnitDetails.fromJson(reader);
                } else if ("ice".equals(fieldName)) {
                    deserializedHourlyForecast.ice = WeatherUnitDetails.fromJson(reader);
                } else if ("cloudCover".equals(fieldName)) {
                    deserializedHourlyForecast.cloudCover = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedHourlyForecast;
        });
    }
}
