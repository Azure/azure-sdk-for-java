// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.util.ExpandableEnum;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

/**
 * Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather services in Azure
 * Maps](/azure/azure-maps/weather-services-concepts#weather-icons) for details.
 */
public final class IconCode implements ExpandableEnum<Integer>, JsonSerializable<IconCode> {

    private static final Map<Integer, IconCode> VALUES = new ConcurrentHashMap<>();

    private static final Function<Integer, IconCode> NEW_INSTANCE = IconCode::new;

    /**
     * Sunny.
     */
    public static final IconCode SUNNY = fromValue(1);

    /**
     * Mostly Sunny.
     */
    public static final IconCode MOSTLY_SUNNY = fromValue(2);

    /**
     * Partly Sunny.
     */
    public static final IconCode PARTLY_SUNNY = fromValue(3);

    /**
     * Intermittent Clouds.
     */
    public static final IconCode INTERMITTENT_CLOUDS = fromValue(4);

    /**
     * Hazy Sunshine.
     */
    public static final IconCode HAZY_SUNSHINE = fromValue(5);

    /**
     * Mostly Cloudy.
     */
    public static final IconCode MOSTLY_CLOUDY = fromValue(6);

    /**
     * Cloudy.
     */
    public static final IconCode CLOUDY = fromValue(7);

    /**
     * Dreary (Overcast).
     */
    public static final IconCode DREARY = fromValue(8);

    /**
     * Fog.
     */
    public static final IconCode FOG = fromValue(11);

    /**
     * Showers.
     */
    public static final IconCode SHOWERS = fromValue(12);

    /**
     * Mostly Cloudy with Showers.
     */
    public static final IconCode MOSTLY_CLOUDY_WITH_SHOWERS = fromValue(13);

    /**
     * Partly Sunny with Showers.
     */
    public static final IconCode PARTLY_SUNNY_WITH_SHOWERS = fromValue(14);

    /**
     * Thunderstorms.
     */
    public static final IconCode THUNDERSTORMS = fromValue(15);

    /**
     * Mostly Cloudy with Thunderstorms.
     */
    public static final IconCode MOSTLY_CLOUDY_WITH_THUNDERSTORMS = fromValue(16);

    /**
     * Partly Sunny with Thunderstorms.
     */
    public static final IconCode PARTLY_SUNNY_WITH_THUNDERSTORMS = fromValue(17);

    /**
     * Rain.
     */
    public static final IconCode RAIN = fromValue(18);

    /**
     * Flurries.
     */
    public static final IconCode FLURRIES = fromValue(19);

    /**
     * Mostly Cloudy with Flurries.
     */
    public static final IconCode MOSTLY_CLOUDY_WITH_FLURRIES = fromValue(20);

    /**
     * Partly Sunny with Flurries.
     */
    public static final IconCode PARTLY_SUNNY_WITH_FLURRIES = fromValue(21);

    /**
     * Snow.
     */
    public static final IconCode SNOW = fromValue(22);

    /**
     * Mostly Cloudy with Snow.
     */
    public static final IconCode MOSTLY_CLOUDY_WITH_SNOW = fromValue(23);

    /**
     * Ice.
     */
    public static final IconCode ICE = fromValue(24);

    /**
     * Sleet.
     */
    public static final IconCode SLEET = fromValue(25);

    /**
     * Freezing Rain.
     */
    public static final IconCode FREEZING_RAIN = fromValue(26);

    /**
     * Rain and Snow.
     */
    public static final IconCode RAIN_AND_SNOW = fromValue(29);

    /**
     * Hot.
     */
    public static final IconCode HOT = fromValue(30);

    /**
     * Cold.
     */
    public static final IconCode COLD = fromValue(31);

    /**
     * Windy.
     */
    public static final IconCode WINDY = fromValue(32);

    /**
     * Clear.
     */
    public static final IconCode CLEAR = fromValue(33);

    /**
     * Mostly Clear.
     */
    public static final IconCode MOSTLY_CLEAR = fromValue(34);

    /**
     * Partly Cloudy.
     */
    public static final IconCode PARTLY_CLOUDY = fromValue(35);

    /**
     * Intermittent Clouds (Night).
     */
    public static final IconCode INTERMITTENT_CLOUDS_NIGHT = fromValue(36);

    /**
     * Hazy Moonlight.
     */
    public static final IconCode HAZY_MOONLIGHT = fromValue(37);

    /**
     * Mostly Cloudy (Night).
     */
    public static final IconCode MOSTLY_CLOUDY_NIGHT = fromValue(38);

    /**
     * Partly Cloudy with Showers.
     */
    public static final IconCode PARTLY_CLOUDY_WITH_SHOWERS = fromValue(39);

    /**
     * Mostly Cloudy with Showers (Night).
     */
    public static final IconCode MOSTLY_CLOUDY_WITH_SHOWERS_NIGHT = fromValue(40);

    /**
     * Partly Cloudy with Thunderstorms.
     */
    public static final IconCode PARTLY_CLOUDY_WITH_THUNDERSTORMS = fromValue(41);

    /**
     * Mostly Cloudy with Thunderstorms (Night).
     */
    public static final IconCode MOSTLY_CLOUDY_WITH_THUNDERSTORMS_NIGHT = fromValue(42);

    /**
     * Mostly Cloudy with Flurries (Night).
     */
    public static final IconCode MOSTLY_CLOUDY_WITH_FLURRIES_NIGHT = fromValue(43);

    /**
     * Mostly Cloudy with Snow (Night).
     */
    public static final IconCode MOSTLY_CLOUDY_WITH_SNOW_NIGHT = fromValue(44);

    private final Integer value;

    private IconCode(Integer value) {
        this.value = value;
    }

    /**
     * Creates or finds a IconCode.
     *
     * @param value a value to look for.
     * @return the corresponding IconCode.
     * @throws IllegalArgumentException if value is null.
     */
    public static IconCode fromValue(Integer value) {
        if (value == null) {
            throw new IllegalArgumentException("'value' cannot be null.");
        }
        return VALUES.computeIfAbsent(value, NEW_INSTANCE);
    }

    /**
     * Gets known IconCode values.
     *
     * @return Known IconCode values.
     */
    public static Collection<IconCode> values() {
        return new ArrayList<>(VALUES.values());
    }

    /**
     * Gets the value of the IconCode instance.
     *
     * @return the value of the IconCode instance.
     */
    @Override
    public Integer getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeInt(getValue());
    }

    /**
     * Reads an instance of IconCode from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of IconCode if the JsonReader was pointing to an instance of it, or null if the JsonReader
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IconCode.
     * @throws IllegalStateException If unexpected JSON token is found.
     */
    public static IconCode fromJson(JsonReader jsonReader) throws IOException {
        JsonToken nextToken = jsonReader.nextToken();
        if (nextToken == JsonToken.NULL) {
            return null;
        }
        if (nextToken != JsonToken.NUMBER) {
            throw new IllegalStateException(
                String.format("Unexpected JSON token for %s deserialization: %s", JsonToken.NUMBER, nextToken));
        }
        return IconCode.fromValue(jsonReader.getInt());
    }

    @Override
    public String toString() {
        return Objects.toString(this.value);
    }

    @Override
    public boolean equals(Object obj) {
        return this == obj;
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(this.value);
    }

    int toInt() {
        return Integer.parseInt(toString());
    }
}
