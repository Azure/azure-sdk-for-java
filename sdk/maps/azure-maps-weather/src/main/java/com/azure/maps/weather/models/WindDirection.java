// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Wind direction.
 */
@Fluent
public final class WindDirection implements JsonSerializable<WindDirection> {

    /*
     * Wind direction in Azimuth degrees,  starting at true North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270 degrees. Possible values 0-359.
     */
    private Integer degrees;

    /*
     * Direction abbreviation in the specified language.
     */
    private String description;

    /**
     * Set default WindDirection constructor to private
     */
    private WindDirection() {
    }

    /**
     * Get the degrees property: Wind direction in Azimuth degrees, starting at true North and continuing in clockwise
     * direction. North is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270 degrees. Possible values
     * 0-359.
     *
     * @return the degrees value.
     */
    public Integer getDegrees() {
        return this.degrees;
    }

    /**
     * Get the description property: Direction abbreviation in the specified language.
     *
     * @return the description value.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("degrees", this.degrees);
        jsonWriter.writeStringField("localizedDescription", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WindDirection from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of WindDirection if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WindDirection.
     */
    public static WindDirection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WindDirection deserializedWindDirection = new WindDirection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("degrees".equals(fieldName)) {
                    deserializedWindDirection.degrees = reader.getNullable(JsonReader::getInt);
                } else if ("localizedDescription".equals(fieldName)) {
                    deserializedWindDirection.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedWindDirection;
        });
    }
}
