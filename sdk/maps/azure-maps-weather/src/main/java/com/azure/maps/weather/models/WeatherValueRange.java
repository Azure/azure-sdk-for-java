// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Returned temperature values.
 */
@Fluent
public final class WeatherValueRange implements JsonSerializable<WeatherValueRange> {

    /*
     * Minimum temperature for the time period.
     */
    private WeatherUnitDetails minimum;

    /*
     * Maximum temperature for the time period
     */
    private WeatherUnitDetails maximum;

    /**
     * Set default WeatherValueRange constructor to private
     */
    private WeatherValueRange() {
    }

    /**
     * Get the minimum property: Minimum temperature for the time period.
     *
     * @return the minimum value.
     */
    public WeatherUnitDetails getMinimum() {
        return this.minimum;
    }

    /**
     * Get the maximum property: Maximum temperature for the time period.
     *
     * @return the maximum value.
     */
    public WeatherUnitDetails getMaximum() {
        return this.maximum;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("minimum", this.minimum);
        jsonWriter.writeJsonField("maximum", this.maximum);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeatherValueRange from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeatherValueRange if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WeatherValueRange.
     */
    public static WeatherValueRange fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WeatherValueRange deserializedWeatherValueRange = new WeatherValueRange();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("minimum".equals(fieldName)) {
                    deserializedWeatherValueRange.minimum = WeatherUnitDetails.fromJson(reader);
                } else if ("maximum".equals(fieldName)) {
                    deserializedWeatherValueRange.maximum = WeatherUnitDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedWeatherValueRange;
        });
    }
}
