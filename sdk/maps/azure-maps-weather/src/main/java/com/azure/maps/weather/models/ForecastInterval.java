// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The ForecastInterval model.
 */
@Fluent
public final class ForecastInterval implements JsonSerializable<ForecastInterval> {

    /*
     * The date and time for the start of the interval in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
     */
    private OffsetDateTime startTime;

    /*
     * The first minute for the interval.
     */
    private Integer minute;

    /*
     * A unit that represents forecasted precipitation intensity.
     */
    private Double decibelRelativeToZ;

    /*
     * A short phrase describing precipitation condition for the interval.
     */
    private String shortDescription;

    /*
     * Key that specifies the threshold value. Along with precipitationType, can be used to determine the simplifiedColor. If dbz is zero, not present in the response.
     */
    private String threshold;

    /*
     * The full spectrum color that maps to the dBZ (decibel relative to Z). If dbz is zero, color is not present in the response.
     */
    private ColorValue color;

    /*
     * The band color that maps to the precipitation type and threshold. If dbz is zero, not present in the response.
     */
    private ColorValue simplifiedColor;

    /*
     * Specifies the type of precipitation ("Rain" "Snow" "Ice" or "Mix"). If dbz is zero, precipitationType is not present in the response.
     */
    private PrecipitationType precipitationType;

    /*
     * Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather services in Azure Maps](/azure/azure-maps/weather-services-concepts#weather-icons) for details.
     */
    private IconCode iconCode;

    /*
     * Percent representing cloud cover.
     */
    private Integer cloudCover;

    /**
     * Set default ForecastInterval constructor to private
     */
    private ForecastInterval() {
    }

    /**
     * Get the startTime property: The date and time for the start of the interval in ISO 8601 format, for example,
     * 2019-10-27T19:39:57-08:00.
     *
     * @return the startTime value.
     */
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The date and time for the start of the interval in ISO 8601 format, for example,
     * 2019-10-27T19:39:57-08:00.
     *
     * @param startTime the startTime value to set.
     * @return the ForecastInterval object itself.
     */
    public ForecastInterval setStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the minute property: The first minute for the interval.
     *
     * @return the minute value.
     */
    public Integer getMinute() {
        return this.minute;
    }

    /**
     * Get the decibelRelativeToZ property: A unit that represents forecasted precipitation intensity.
     *
     * @return the decibelRelativeToZ value.
     */
    public Double getDecibelRelativeToZ() {
        return this.decibelRelativeToZ;
    }

    /**
     * Get the shortDescription property: A short phrase describing precipitation condition for the interval.
     *
     * @return the shortDescription value.
     */
    public String getShortDescription() {
        return this.shortDescription;
    }

    /**
     * Get the threshold property: Key that specifies the threshold value. Along with precipitationType, can be used to
     * determine the simplifiedColor. If dbz is zero, not present in the response.
     *
     * @return the threshold value.
     */
    public String getThreshold() {
        return this.threshold;
    }

    /**
     * Get the color property: The full spectrum color that maps to the dBZ (decibel relative to Z). If dbz is zero,
     * color is not present in the response.
     *
     * @return the color value.
     */
    public ColorValue getColor() {
        return this.color;
    }

    /**
     * Get the simplifiedColor property: The band color that maps to the precipitation type and threshold. If dbz is
     * zero, not present in the response.
     *
     * @return the simplifiedColor value.
     */
    public ColorValue getSimplifiedColor() {
        return this.simplifiedColor;
    }

    /**
     * Get the precipitationType property: Specifies the type of precipitation ("Rain" "Snow" "Ice" or "Mix"). If dbz is
     * zero, precipitationType is not present in the response.
     *
     * @return the precipitationType value.
     */
    public PrecipitationType getPrecipitationType() {
        return this.precipitationType;
    }

    /**
     * Get the iconCode property: Numeric value representing an image that displays the `iconPhrase`. Please refer to
     * [Weather services in Azure Maps](/azure/azure-maps/weather-services-concepts#weather-icons) for details.
     *
     * @return the iconCode value.
     */
    public IconCode getIconCode() {
        return this.iconCode;
    }

    /**
     * Get the cloudCover property: Percent representing cloud cover.
     *
     * @return the cloudCover value.
     */
    public Integer getCloudCover() {
        return this.cloudCover;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeNumberField("minute", this.minute);
        jsonWriter.writeNumberField("dbz", this.decibelRelativeToZ);
        jsonWriter.writeStringField("shortPhrase", this.shortDescription);
        jsonWriter.writeStringField("threshold", this.threshold);
        jsonWriter.writeJsonField("color", this.color);
        jsonWriter.writeJsonField("simplifiedColor", this.simplifiedColor);
        jsonWriter.writeStringField("precipitationType",
            this.precipitationType == null ? null : this.precipitationType.toString());
        jsonWriter.writeNumberField("iconCode", this.iconCode == null ? null : this.iconCode.toInt());
        jsonWriter.writeNumberField("cloudCover", this.cloudCover);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ForecastInterval from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ForecastInterval if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ForecastInterval.
     */
    public static ForecastInterval fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ForecastInterval deserializedForecastInterval = new ForecastInterval();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("startTime".equals(fieldName)) {
                    deserializedForecastInterval.startTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("minute".equals(fieldName)) {
                    deserializedForecastInterval.minute = reader.getNullable(JsonReader::getInt);
                } else if ("dbz".equals(fieldName)) {
                    deserializedForecastInterval.decibelRelativeToZ = reader.getNullable(JsonReader::getDouble);
                } else if ("shortPhrase".equals(fieldName)) {
                    deserializedForecastInterval.shortDescription = reader.getString();
                } else if ("threshold".equals(fieldName)) {
                    deserializedForecastInterval.threshold = reader.getString();
                } else if ("color".equals(fieldName)) {
                    deserializedForecastInterval.color = ColorValue.fromJson(reader);
                } else if ("simplifiedColor".equals(fieldName)) {
                    deserializedForecastInterval.simplifiedColor = ColorValue.fromJson(reader);
                } else if ("precipitationType".equals(fieldName)) {
                    deserializedForecastInterval.precipitationType = PrecipitationType.fromString(reader.getString());
                } else if ("iconCode".equals(fieldName)) {
                    deserializedForecastInterval.iconCode = IconCode.fromInt(reader.getInt());
                } else if ("cloudCover".equals(fieldName)) {
                    deserializedForecastInterval.cloudCover = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedForecastInterval;
        });
    }
}
