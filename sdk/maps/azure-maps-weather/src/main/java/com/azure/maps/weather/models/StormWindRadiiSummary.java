// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.weather.implementation.models.GeoJsonGeometry;
import java.io.IOException;
import java.util.List;
import com.azure.core.models.GeoPolygon;
import com.azure.maps.weather.implementation.helpers.Utility;

/**
 * Displayed when details=true or radiiGeometry=true in the request.
 */
@Fluent
public final class StormWindRadiiSummary implements JsonSerializable<StormWindRadiiSummary> {

    /*
     * DateTime for which the wind radii summary data is valid, displayed in ISO8601 format.
     */
    private String timestamp;

    /*
     * Wind speed associated with the radiusSectorData.
     */
    private WeatherUnitDetails windSpeed;

    /*
     * Contains the information needed to plot wind radius quadrants. Bearing 0–90 = NE quadrant; 90–180 = SE quadrant; 180–270 = SW quadrant; 270–360 = NW quadrant.
     */
    private List<RadiusSector> radiusSectorData;

    /*
     * GeoJSON object. Displayed when radiiGeometry=true in request. Describes the outline of the wind radius quadrants.
     */
    private GeoJsonGeometry radiiGeometry;

    /**
     * Set default StormWindRadiiSummary constructor to private
     */
    private StormWindRadiiSummary() {
    }

    /**
     * Get the timestamp property: DateTime for which the wind radii summary data is valid, displayed in ISO8601 format.
     *
     * @return the timestamp value.
     */
    public String getTimestamp() {
        return this.timestamp;
    }

    /**
     * Get the windSpeed property: Wind speed associated with the radiusSectorData.
     *
     * @return the windSpeed value.
     */
    public WeatherUnitDetails getWindSpeed() {
        return this.windSpeed;
    }

    /**
     * Get the radiusSectorData property: Contains the information needed to plot wind radius quadrants. Bearing 0–90 =
     * NE quadrant; 90–180 = SE quadrant; 180–270 = SW quadrant; 270–360 = NW quadrant.
     *
     * @return the radiusSectorData value.
     */
    public List<RadiusSector> getRadiusSectorData() {
        return this.radiusSectorData;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dateTime", this.timestamp);
        jsonWriter.writeJsonField("windSpeed", this.windSpeed);
        jsonWriter.writeArrayField("radiusSectorData", this.radiusSectorData,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("radiiGeometry", this.radiiGeometry);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StormWindRadiiSummary from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of StormWindRadiiSummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StormWindRadiiSummary.
     */
    public static StormWindRadiiSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StormWindRadiiSummary deserializedStormWindRadiiSummary = new StormWindRadiiSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("dateTime".equals(fieldName)) {
                    deserializedStormWindRadiiSummary.timestamp = reader.getString();
                } else if ("windSpeed".equals(fieldName)) {
                    deserializedStormWindRadiiSummary.windSpeed = WeatherUnitDetails.fromJson(reader);
                } else if ("radiusSectorData".equals(fieldName)) {
                    List<RadiusSector> radiusSectorData = reader.readArray(reader1 -> RadiusSector.fromJson(reader1));
                    deserializedStormWindRadiiSummary.radiusSectorData = radiusSectorData;
                } else if ("radiiGeometry".equals(fieldName)) {
                    deserializedStormWindRadiiSummary.radiiGeometry = GeoJsonGeometry.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedStormWindRadiiSummary;
        });
    }

    /**
     * Return GeoPolygon
     *
     * @return Returns a {@link GeoPolygon} for this weather window
     */
    public GeoPolygon getPolygon() {
        return Utility.toGeoPolygon(this.radiiGeometry);
    }
}
