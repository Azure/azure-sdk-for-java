// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Bearing 0–90 = NE quadrant; 90–180 = SE quadrant; 180–270 = SW quadrant; 270–360 = NW quadrant.
 */
@Fluent
public final class RadiusSector implements JsonSerializable<RadiusSector> {

    /*
     * Bearing, in degrees, of the beginning of the quadrant.
     */
    private Double beginBearing;

    /*
     * Bearing, in degrees, of the end of the quadrant.
     */
    private Double endBearing;

    /*
     * The radius of the quadrant, in nautical miles.
     */
    private Double radius;

    /**
     * Set default RadiusSector constructor to private
     */
    private RadiusSector() {
    }

    /**
     * Get the beginBearing property: Bearing, in degrees, of the beginning of the quadrant.
     *
     * @return the beginBearing value.
     */
    public Double getBeginBearing() {
        return this.beginBearing;
    }

    /**
     * Get the endBearing property: Bearing, in degrees, of the end of the quadrant.
     *
     * @return the endBearing value.
     */
    public Double getEndBearing() {
        return this.endBearing;
    }

    /**
     * Get the radius property: The radius of the quadrant, in nautical miles.
     *
     * @return the radius value.
     */
    public Double getRadius() {
        return this.radius;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("beginBearing", this.beginBearing);
        jsonWriter.writeNumberField("endBearing", this.endBearing);
        jsonWriter.writeNumberField("range", this.radius);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RadiusSector from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RadiusSector if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RadiusSector.
     */
    public static RadiusSector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RadiusSector deserializedRadiusSector = new RadiusSector();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("beginBearing".equals(fieldName)) {
                    deserializedRadiusSector.beginBearing = reader.getNullable(JsonReader::getDouble);
                } else if ("endBearing".equals(fieldName)) {
                    deserializedRadiusSector.endBearing = reader.getNullable(JsonReader::getDouble);
                } else if ("range".equals(fieldName)) {
                    deserializedRadiusSector.radius = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRadiusSector;
        });
    }
}
