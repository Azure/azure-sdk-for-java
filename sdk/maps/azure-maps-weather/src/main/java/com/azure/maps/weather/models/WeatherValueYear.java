// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The WeatherValueYear model.
 */
@Fluent
public final class WeatherValueYear implements JsonSerializable<WeatherValueYear> {

    /*
     * Rounded value.
     */
    private Float value;

    /*
     * Type of unit for the returned value.
     */
    private String unit;

    /*
     * Numeric ID value associated with the type of unit being displayed. Can be used for unit translation. Please refer to [Weather services in Azure Maps](/azure/azure-maps/weather-services-concepts#daily-index-range-sets) for details.
     */
    private Integer unitType;

    /*
     * Year the value occurred.
     */
    private Integer year;

    /**
     * Set default WeatherValueYear constructor to private
     */
    private WeatherValueYear() {
    }

    /**
     * Get the value property: Rounded value.
     *
     * @return the value value.
     */
    public Float getValue() {
        return this.value;
    }

    /**
     * Get the unit property: Type of unit for the returned value.
     *
     * @return the unit value.
     */
    public String getUnit() {
        return this.unit;
    }

    /**
     * Get the unitType property: Numeric ID value associated with the type of unit being displayed. Can be used for
     * unit translation. Please refer to [Weather services in Azure
     * Maps](/azure/azure-maps/weather-services-concepts#daily-index-range-sets) for details.
     *
     * @return the unitType value.
     */
    public Integer getUnitType() {
        return this.unitType;
    }

    /**
     * Get the year property: Year the value occurred.
     *
     * @return the year value.
     */
    public Integer getYear() {
        return this.year;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("value", this.value);
        jsonWriter.writeStringField("unit", this.unit);
        jsonWriter.writeNumberField("unitType", this.unitType);
        jsonWriter.writeNumberField("year", this.year);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeatherValueYear from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeatherValueYear if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WeatherValueYear.
     */
    public static WeatherValueYear fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WeatherValueYear deserializedWeatherValueYear = new WeatherValueYear();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("value".equals(fieldName)) {
                    deserializedWeatherValueYear.value = reader.getNullable(JsonReader::getFloat);
                } else if ("unit".equals(fieldName)) {
                    deserializedWeatherValueYear.unit = reader.getString();
                } else if ("unitType".equals(fieldName)) {
                    deserializedWeatherValueYear.unitType = reader.getNullable(JsonReader::getInt);
                } else if ("year".equals(fieldName)) {
                    if (reader.currentToken() == JsonToken.NUMBER) {
                        deserializedWeatherValueYear.year = reader.getNullable(JsonReader::getInt);
                    } else if (reader.currentToken() == JsonToken.STRING) {
                        deserializedWeatherValueYear.year = Integer.parseInt(reader.getString());
                    }
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedWeatherValueYear;
        });
    }
}
