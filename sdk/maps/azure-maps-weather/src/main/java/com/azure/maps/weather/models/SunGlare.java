// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A rating that indicates how blinding the sun is for the driver.
 */
@Fluent
public final class SunGlare implements JsonSerializable<SunGlare> {

    /*
     * If the vehicle heading value is not provided for a waypoint, then the service will calculate a heading based upon the location of neighboring waypoints if provided.
     */
    private Integer calculatedVehicleHeading;

    /*
     * An index from 0 to 100 indicating sun glare intensity for a driver. A value of 50 and above can be considered a hazard for some drivers and a value of 100 signifies the driver is driving straight into the sun and atmospheric conditions are clear allowing for the full intensity of the sun to blind the driver.
     */
    private Integer glareIndex;

    /**
     * Set default SunGlare constructor to private
     */
    private SunGlare() {
    }

    /**
     * Get the calculatedVehicleHeading property: If the vehicle heading value is not provided for a waypoint, then the
     * service will calculate a heading based upon the location of neighboring waypoints if provided.
     *
     * @return the calculatedVehicleHeading value.
     */
    public Integer getCalculatedVehicleHeading() {
        return this.calculatedVehicleHeading;
    }

    /**
     * Get the glareIndex property: An index from 0 to 100 indicating sun glare intensity for a driver. A value of 50
     * and above can be considered a hazard for some drivers and a value of 100 signifies the driver is driving straight
     * into the sun and atmospheric conditions are clear allowing for the full intensity of the sun to blind the driver.
     *
     * @return the glareIndex value.
     */
    public Integer getGlareIndex() {
        return this.glareIndex;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("calculatedVehicleHeading", this.calculatedVehicleHeading);
        jsonWriter.writeNumberField("glareIndex", this.glareIndex);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SunGlare from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SunGlare if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the SunGlare.
     */
    public static SunGlare fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SunGlare deserializedSunGlare = new SunGlare();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("calculatedVehicleHeading".equals(fieldName)) {
                    deserializedSunGlare.calculatedVehicleHeading = reader.getNullable(JsonReader::getInt);
                } else if ("glareIndex".equals(fieldName)) {
                    deserializedSunGlare.glareIndex = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedSunGlare;
        });
    }
}
