// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The PrecipitationSummary model.
 */
@Fluent
public final class PrecipitationSummary implements JsonSerializable<PrecipitationSummary> {

    /*
     * The amount of precipitation (liquid equivalent) that has fallen in the past hour.
     */
    private WeatherUnitDetails pastHour;

    /*
     * The amount of precipitation (liquid equivalent) that has fallen in the past three hours.
     */
    private WeatherUnitDetails past3Hours;

    /*
     * The amount of precipitation (liquid equivalent) that has fallen in the past six hours. Contains Metric and
     * Imperial Values.
     */
    private WeatherUnitDetails past6Hours;

    /*
     * The amount of precipitation (liquid equivalent) that has fallen in the past nine hours.
     */
    private WeatherUnitDetails past9Hours;

    /*
     * The amount of precipitation (liquid equivalent) that has fallen in the past 12 hours.
     */
    private WeatherUnitDetails past12Hours;

    /*
     * The amount of precipitation (liquid equivalent) that has fallen in the past 18 hours.
     */
    private WeatherUnitDetails past18Hours;

    /*
     * The amount of precipitation (liquid equivalent) that has fallen in the past 24 hours.
     */
    private WeatherUnitDetails past24Hours;

    /**
     * Set default PrecipitationSummary constructor to private
     */
    private PrecipitationSummary() {
    }

    /**
     * Get the pastHour property: The amount of precipitation (liquid equivalent) that has fallen in the past hour.
     *
     * @return the pastHour value.
     */
    public WeatherUnitDetails getPastHour() {
        return this.pastHour;
    }

    /**
     * Get the past3Hours property: The amount of precipitation (liquid equivalent) that has fallen in the past three
     * hours.
     *
     * @return the past3Hours value.
     */
    public WeatherUnitDetails getPast3Hours() {
        return this.past3Hours;
    }

    /**
     * Get the past6Hours property: The amount of precipitation (liquid equivalent) that has fallen in the past six
     * hours. Contains Metric and Imperial Values.
     *
     * @return the past6Hours value.
     */
    public WeatherUnitDetails getPast6Hours() {
        return this.past6Hours;
    }

    /**
     * Get the past9Hours property: The amount of precipitation (liquid equivalent) that has fallen in the past nine
     * hours.
     *
     * @return the past9Hours value.
     */
    public WeatherUnitDetails getPast9Hours() {
        return this.past9Hours;
    }

    /**
     * Get the past12Hours property: The amount of precipitation (liquid equivalent) that has fallen in the past 12
     * hours.
     *
     * @return the past12Hours value.
     */
    public WeatherUnitDetails getPast12Hours() {
        return this.past12Hours;
    }

    /**
     * Get the past18Hours property: The amount of precipitation (liquid equivalent) that has fallen in the past 18
     * hours.
     *
     * @return the past18Hours value.
     */
    public WeatherUnitDetails getPast18Hours() {
        return this.past18Hours;
    }

    /**
     * Get the past24Hours property: The amount of precipitation (liquid equivalent) that has fallen in the past 24
     * hours.
     *
     * @return the past24Hours value.
     */
    public WeatherUnitDetails getPast24Hours() {
        return this.past24Hours;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("pastHour", this.pastHour);
        jsonWriter.writeJsonField("past3Hours", this.past3Hours);
        jsonWriter.writeJsonField("past6Hours", this.past6Hours);
        jsonWriter.writeJsonField("past9Hours", this.past9Hours);
        jsonWriter.writeJsonField("past12Hours", this.past12Hours);
        jsonWriter.writeJsonField("past18Hours", this.past18Hours);
        jsonWriter.writeJsonField("past24Hours", this.past24Hours);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrecipitationSummary from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrecipitationSummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PrecipitationSummary.
     */
    public static PrecipitationSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrecipitationSummary deserializedPrecipitationSummary = new PrecipitationSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("pastHour".equals(fieldName)) {
                    deserializedPrecipitationSummary.pastHour = WeatherUnitDetails.fromJson(reader);
                } else if ("past3Hours".equals(fieldName)) {
                    deserializedPrecipitationSummary.past3Hours = WeatherUnitDetails.fromJson(reader);
                } else if ("past6Hours".equals(fieldName)) {
                    deserializedPrecipitationSummary.past6Hours = WeatherUnitDetails.fromJson(reader);
                } else if ("past9Hours".equals(fieldName)) {
                    deserializedPrecipitationSummary.past9Hours = WeatherUnitDetails.fromJson(reader);
                } else if ("past12Hours".equals(fieldName)) {
                    deserializedPrecipitationSummary.past12Hours = WeatherUnitDetails.fromJson(reader);
                } else if ("past18Hours".equals(fieldName)) {
                    deserializedPrecipitationSummary.past18Hours = WeatherUnitDetails.fromJson(reader);
                } else if ("past24Hours".equals(fieldName)) {
                    deserializedPrecipitationSummary.past24Hours = WeatherUnitDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedPrecipitationSummary;
        });
    }
}
