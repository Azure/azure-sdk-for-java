// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Numeric ID value associated with the type of unit being displayed. Can be used for unit translation. Please refer to
 * [Weather services in Azure Maps](/azure/azure-maps/weather-services-concepts#unittype) for details.
 */
public final class UnitType extends ExpandableStringEnum<UnitType> {

    /**
     * feet.
     */
    public static final UnitType FEET = fromInt(0);

    /**
     * inches.
     */
    public static final UnitType INCHES = fromInt(1);

    /**
     * miles.
     */
    public static final UnitType MILES = fromInt(2);

    /**
     * millimeter.
     */
    public static final UnitType MILLIMETER = fromInt(3);

    /**
     * centimeter.
     */
    public static final UnitType CENTIMETER = fromInt(4);

    /**
     * meter.
     */
    public static final UnitType METER = fromInt(5);

    /**
     * kilometer.
     */
    public static final UnitType KILOMETER = fromInt(6);

    /**
     * kilometersPerHour.
     */
    public static final UnitType KILOMETERS_PER_HOUR = fromInt(7);

    /**
     * knots.
     */
    public static final UnitType KNOTS = fromInt(8);

    /**
     * milesPerHour.
     */
    public static final UnitType MILES_PER_HOUR = fromInt(9);

    /**
     * metersPerSecond.
     */
    public static final UnitType METERS_PER_SECOND = fromInt(10);

    /**
     * hectoPascals.
     */
    public static final UnitType HECTO_PASCALS = fromInt(11);

    /**
     * inchesOfMercury.
     */
    public static final UnitType INCHES_OF_MERCURY = fromInt(12);

    /**
     * kiloPascals.
     */
    public static final UnitType KILO_PASCALS = fromInt(13);

    /**
     * millibars.
     */
    public static final UnitType MILLIBARS = fromInt(14);

    /**
     * millimetersOfMercury.
     */
    public static final UnitType MILLIMETERS_OF_MERCURY = fromInt(15);

    /**
     * poundsPerSquareInch.
     */
    public static final UnitType POUNDS_PER_SQUARE_INCH = fromInt(16);

    /**
     * celsius.
     */
    public static final UnitType CELSIUS = fromInt(17);

    /**
     * fahrenheit.
     */
    public static final UnitType FAHRENHEIT = fromInt(18);

    /**
     * kelvin.
     */
    public static final UnitType KELVIN = fromInt(19);

    /**
     * percent.
     */
    public static final UnitType PERCENT = fromInt(20);

    /**
     * float.
     */
    public static final UnitType FLOAT = fromInt(21);

    /**
     * integer.
     */
    public static final UnitType INTEGER = fromInt(22);

    /**
     * MicrogramsPerCubicMeterOfAir.
     */
    public static final UnitType MICROGRAMS_PER_CUBIC_METER_OF_AIR = fromInt(31);

    /**
     * Creates a new instance of UnitType value.
     *
     * @deprecated Use the {@link #fromInt(int)} factory method.
     */
    @Deprecated
    public UnitType() {
    }

    /**
     * Creates or finds a UnitType from its string representation.
     *
     * @param name a name to look for.
     * @return the corresponding UnitType.
     */
    public static UnitType fromInt(int name) {
        return fromString(String.valueOf(name), UnitType.class);
    }

    /**
     * Gets known UnitType values.
     *
     * @return known UnitType values.
     */
    public static Collection<UnitType> values() {
        return values(UnitType.class);
    }

    int toInt() {
        return Integer.parseInt(toString());
    }
}
