// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * This object is returned from a successful Get Daily Indices call.
 */
@Immutable
public final class DailyIndicesResult implements JsonSerializable<DailyIndicesResult> {

    /*
     * A list of all daily indices for the queried location.
     */
    private List<DailyIndex> results;

    /**
     * Set default DailyIndicesResult constructor to private
     */
    private DailyIndicesResult() {
    }

    /**
     * Get the results property: A list of all daily indices for the queried location.
     *
     * @return the results value.
     */
    public List<DailyIndex> getResults() {
        return this.results;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DailyIndicesResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DailyIndicesResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DailyIndicesResult.
     */
    public static DailyIndicesResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DailyIndicesResult deserializedDailyIndicesResult = new DailyIndicesResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("results".equals(fieldName)) {
                    List<DailyIndex> results = reader.readArray(reader1 -> DailyIndex.fromJson(reader1));
                    deserializedDailyIndicesResult.results = results;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDailyIndicesResult;
        });
    }
}
