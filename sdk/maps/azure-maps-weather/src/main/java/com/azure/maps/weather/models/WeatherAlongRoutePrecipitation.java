// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Precipitation forecast of the weather along the route.
 */
@Fluent
public final class WeatherAlongRoutePrecipitation implements JsonSerializable<WeatherAlongRoutePrecipitation> {

    /*
     * The forecasted precipitation intensity in dBZ (decibels relative to Z) from 0.0 to 100.0.
     */
    private Double dbz;

    /*
     * Precipitation type. If precipitation should occur, the type that it will be: "RAIN," "HAIL," "SNOW," "ICE," or "MIX."
     */
    private String type;

    /**
     * Set default WeatherAlongRoutePrecipitation constructor to private
     */
    private WeatherAlongRoutePrecipitation() {
    }

    /**
     * Get the dbz property: The forecasted precipitation intensity in dBZ (decibels relative to Z) from 0.0 to 100.0.
     *
     * @return the dbz value.
     */
    public Double getDeciblesRelativeToZ() {
        return this.dbz;
    }

    /**
     * Get the type property: Precipitation type. If precipitation should occur, the type that it will be: "RAIN,"
     * "HAIL," "SNOW," "ICE," or "MIX.".
     *
     * @return the type value.
     */
    public String getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("dbz", this.dbz);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeatherAlongRoutePrecipitation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeatherAlongRoutePrecipitation if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WeatherAlongRoutePrecipitation.
     */
    public static WeatherAlongRoutePrecipitation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WeatherAlongRoutePrecipitation deserializedWeatherAlongRoutePrecipitation
                = new WeatherAlongRoutePrecipitation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("dbz".equals(fieldName)) {
                    deserializedWeatherAlongRoutePrecipitation.dbz = reader.getNullable(JsonReader::getDouble);
                } else if ("type".equals(fieldName)) {
                    deserializedWeatherAlongRoutePrecipitation.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedWeatherAlongRoutePrecipitation;
        });
    }
}
