// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Search government-issued storms.
 */
@Fluent
public final class StormSearchResult implements JsonSerializable<StormSearchResult> {

    /*
     * Search government-issued storms
     */
    private List<StormSearchResultItem> storms;

    /*
     * The is the link to the next page of the features returned. If it's the last page, no this field.
     */
    private String nextLink;

    /**
     * Set default StormSearchResult constructor to private
     */
    private StormSearchResult() {
    }

    /**
     * Get the storms property: Search government-issued storms.
     *
     * @return the storms value.
     */
    public List<StormSearchResultItem> getStorms() {
        return this.storms;
    }

    /**
     * Get the nextLink property: The is the link to the next page of the features returned. If it's the last page, no
     * this field.
     *
     * @return the nextLink value.
     */
    public String getNextLink() {
        return this.nextLink;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("results", this.storms, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("nextLink", this.nextLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StormSearchResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of StormSearchResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StormSearchResult.
     */
    public static StormSearchResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StormSearchResult deserializedStormSearchResult = new StormSearchResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("results".equals(fieldName)) {
                    List<StormSearchResultItem> storms
                        = reader.readArray(reader1 -> StormSearchResultItem.fromJson(reader1));
                    deserializedStormSearchResult.storms = storms;
                } else if ("nextLink".equals(fieldName)) {
                    deserializedStormSearchResult.nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedStormSearchResult;
        });
    }
}
