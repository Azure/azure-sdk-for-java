// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * This object is returned from a successful Weather Along Route.
 */
@Immutable
public final class WeatherAlongRouteResult implements JsonSerializable<WeatherAlongRouteResult> {

    /*
     * Short summary of the weather along the route.
     */
    private WeatherAlongRouteSummary summary;

    /*
     * Data for each waypoint returned in the same order as specified in the request.
     */
    private List<WaypointForecast> waypoints;

    /**
     * Set default WeatherAlongRouteResult constructor to private
     */
    private WeatherAlongRouteResult() {
    }

    /**
     * Get the summary property: Short summary of the weather along the route.
     *
     * @return the summary value.
     */
    public WeatherAlongRouteSummary getSummary() {
        return this.summary;
    }

    /**
     * Get the waypoints property: Data for each waypoint returned in the same order as specified in the request.
     *
     * @return the waypoints value.
     */
    public List<WaypointForecast> getWaypoints() {
        return this.waypoints;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeatherAlongRouteResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeatherAlongRouteResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WeatherAlongRouteResult.
     */
    public static WeatherAlongRouteResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WeatherAlongRouteResult deserializedWeatherAlongRouteResult = new WeatherAlongRouteResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("summary".equals(fieldName)) {
                    deserializedWeatherAlongRouteResult.summary = WeatherAlongRouteSummary.fromJson(reader);
                } else if ("waypoints".equals(fieldName)) {
                    List<WaypointForecast> waypoints = reader.readArray(reader1 -> WaypointForecast.fromJson(reader1));
                    deserializedWeatherAlongRouteResult.waypoints = waypoints;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedWeatherAlongRouteResult;
        });
    }
}
