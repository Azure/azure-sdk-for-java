// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Information about a severe weather alert.
 */
@Fluent
public final class SevereWeatherAlert implements JsonSerializable<SevereWeatherAlert> {

    /*
     * 2-character ISO 3166-1 Alpha-2 country code, for example, "US".
     */
    private String countryCode;

    /*
     * A unique numerical identifier for a weather alert.
     */
    private Integer alertId;

    /*
     * Description of the alert.
     */
    private SevereWeatherAlertDescription description;

    /*
     * Category of the alert.
     */
    private String category;

    /*
     * Number signifying the importance or ranking order of the given alert within the country/region it has originated. A lower number signifies a higher priority. For example, 1 is the highest priority. The number varies by country/region and can change over time as each country/region evolves their alert systems.
     */
    private Integer priority;

    /*
     * Classification of the alert. This field is not available for all countries and therefore not always returned.
     */
    private String classification;

    /*
     * Severity level of the alert. This field is not available for all countries and therefore not always returned.
     */
    private String level;

    /*
     * The provider of the alert information. By default the source is returned in English (en-US). The alerts are from official Government Meteorological Agencies and leading global weather alert providers.
     */
    private String source;

    /*
     * A numerical identifier associated with the source provider name of the alert data.
     */
    private Integer sourceId;

    /*
     * A disclaimer regarding the source of the alert information. This field is not always available. For example, disclaimer may include details about the delays or potential issues related to the alarm.
     */
    private String disclaimer;

    /*
     * Information about the alert specific to the affected area(s).
     */
    private List<AlertDetails> alertDetails;

    /**
     * Set default SevereWeatherAlert constructor to private
     */
    private SevereWeatherAlert() {
    }

    /**
     * Get the countryCode property: 2-character ISO 3166-1 Alpha-2 country code, for example, "US".
     *
     * @return the countryCode value.
     */
    public String getCountryCode() {
        return this.countryCode;
    }

    /**
     * Get the alertId property: A unique numerical identifier for a weather alert.
     *
     * @return the alertId value.
     */
    public Integer getAlertId() {
        return this.alertId;
    }

    /**
     * Get the description property: Description of the alert.
     *
     * @return the description value.
     */
    public SevereWeatherAlertDescription getDescription() {
        return this.description;
    }

    /**
     * Get the category property: Category of the alert.
     *
     * @return the category value.
     */
    public String getCategory() {
        return this.category;
    }

    /**
     * Get the priority property: Number signifying the importance or ranking order of the given alert within the
     * country/region it has originated. A lower number signifies a higher priority. For example, 1 is the highest
     * priority. The number varies by country/region and can change over time as each country/region evolves their alert
     * systems.
     *
     * @return the priority value.
     */
    public Integer getPriority() {
        return this.priority;
    }

    /**
     * Get the classification property: Classification of the alert. This field is not available for all countries and
     * therefore not always returned.
     *
     * @return the classification value.
     */
    public String getClassification() {
        return this.classification;
    }

    /**
     * Get the level property: Severity level of the alert. This field is not available for all countries and therefore
     * not always returned.
     *
     * @return the level value.
     */
    public String getLevel() {
        return this.level;
    }

    /**
     * Get the source property: The provider of the alert information. By default the source is returned in English
     * (en-US). The alerts are from official Government Meteorological Agencies and leading global weather alert
     * providers.
     *
     * @return the source value.
     */
    public String getSource() {
        return this.source;
    }

    /**
     * Get the sourceId property: A numerical identifier associated with the source provider name of the alert data.
     *
     * @return the sourceId value.
     */
    public Integer getSourceId() {
        return this.sourceId;
    }

    /**
     * Get the disclaimer property: A disclaimer regarding the source of the alert information. This field is not always
     * available. For example, disclaimer may include details about the delays or potential issues related to the alarm.
     *
     * @return the disclaimer value.
     */
    public String getDisclaimer() {
        return this.disclaimer;
    }

    /**
     * Get the alertDetails property: Information about the alert specific to the affected area(s).
     *
     * @return the alertDetails value.
     */
    public List<AlertDetails> getAlertDetails() {
        return this.alertDetails;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("countryCode", this.countryCode);
        jsonWriter.writeNumberField("alertId", this.alertId);
        jsonWriter.writeJsonField("description", this.description);
        jsonWriter.writeStringField("category", this.category);
        jsonWriter.writeNumberField("priority", this.priority);
        jsonWriter.writeStringField("class", this.classification);
        jsonWriter.writeStringField("level", this.level);
        jsonWriter.writeStringField("source", this.source);
        jsonWriter.writeNumberField("sourceId", this.sourceId);
        jsonWriter.writeStringField("disclaimer", this.disclaimer);
        jsonWriter.writeArrayField("alertAreas", this.alertDetails, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SevereWeatherAlert from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SevereWeatherAlert if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SevereWeatherAlert.
     */
    public static SevereWeatherAlert fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SevereWeatherAlert deserializedSevereWeatherAlert = new SevereWeatherAlert();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("countryCode".equals(fieldName)) {
                    deserializedSevereWeatherAlert.countryCode = reader.getString();
                } else if ("alertId".equals(fieldName)) {
                    deserializedSevereWeatherAlert.alertId = reader.getNullable(JsonReader::getInt);
                } else if ("description".equals(fieldName)) {
                    deserializedSevereWeatherAlert.description = SevereWeatherAlertDescription.fromJson(reader);
                } else if ("category".equals(fieldName)) {
                    deserializedSevereWeatherAlert.category = reader.getString();
                } else if ("priority".equals(fieldName)) {
                    deserializedSevereWeatherAlert.priority = reader.getNullable(JsonReader::getInt);
                } else if ("class".equals(fieldName)) {
                    deserializedSevereWeatherAlert.classification = reader.getString();
                } else if ("level".equals(fieldName)) {
                    deserializedSevereWeatherAlert.level = reader.getString();
                } else if ("source".equals(fieldName)) {
                    deserializedSevereWeatherAlert.source = reader.getString();
                } else if ("sourceId".equals(fieldName)) {
                    deserializedSevereWeatherAlert.sourceId = reader.getNullable(JsonReader::getInt);
                } else if ("disclaimer".equals(fieldName)) {
                    deserializedSevereWeatherAlert.disclaimer = reader.getString();
                } else if ("alertAreas".equals(fieldName)) {
                    List<AlertDetails> alertDetails = reader.readArray(reader1 -> AlertDetails.fromJson(reader1));
                    deserializedSevereWeatherAlert.alertDetails = alertDetails;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedSevereWeatherAlert;
        });
    }
}
