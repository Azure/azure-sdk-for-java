// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Government-issued active storm event.
 */
@Fluent
public final class StormSearchResultItem implements JsonSerializable<StormSearchResultItem> {

    /*
     * Year of origination
     */
    @Generated
    private String year;

    /*
     * Basin identifier (AL, EP, SI, NI, CP, NP, SP)
     */
    @Generated
    private BasinId basinId;

    /*
     * The name of the depression.
     */
    @Generated
    private String name;

    /*
     * True if the depression has been updated recently.
     */
    @Generated
    private Boolean isActive;

    /*
     * True if the storm name has been permanently retired in the source basin.
     */
    @Generated
    private Boolean isRetired;

    /*
     * True when the depression is classified as a subtropical cyclone.
     */
    @Generated
    private Boolean isSubtropical;

    /*
     * Government storm ID. This will match the depression number.
     */
    @Generated
    private Integer govId;

    /**
     * Set default StormSearchResultItem constructor to private
     */
    @Generated
    private StormSearchResultItem() {
    }

    /**
     * Get the year property: Year of origination.
     *
     * @return the year value.
     */
    @Generated
    public Integer getYear() {
        return Integer.valueOf(year);
    }

    /**
     * Get the basinId property: Basin identifier (AL, EP, SI, NI, CP, NP, SP).
     *
     * @return the basinId value.
     */
    @Generated
    public BasinId getBasinId() {
        return this.basinId;
    }

    /**
     * Get the name property: The name of the depression.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the isActive property: True if the depression has been updated recently.
     *
     * @return the isActive value.
     */
    @Generated
    public Boolean isActive() {
        return this.isActive;
    }

    /**
     * Get the isRetired property: True if the storm name has been permanently retired in the source basin.
     *
     * @return the isRetired value.
     */
    @Generated
    public Boolean isRetired() {
        return this.isRetired;
    }

    /**
     * Get the isSubtropical property: True when the depression is classified as a subtropical cyclone.
     *
     * @return the isSubtropical value.
     */
    @Generated
    public Boolean isSubtropical() {
        return this.isSubtropical;
    }

    /**
     * Get the govId property: Government storm ID. This will match the depression number.
     *
     * @return the govId value.
     */
    @Generated
    public Integer getGovernmentId() {
        return this.govId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("year", this.year);
        jsonWriter.writeStringField("basinId", this.basinId == null ? null : this.basinId.toString());
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeBooleanField("isActive", this.isActive);
        jsonWriter.writeBooleanField("isRetired", this.isRetired);
        jsonWriter.writeBooleanField("isSubtropical", this.isSubtropical);
        jsonWriter.writeNumberField("govId", this.govId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StormSearchResultItem from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of StormSearchResultItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StormSearchResultItem.
     */
    @Generated
    public static StormSearchResultItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StormSearchResultItem deserializedStormSearchResultItem = new StormSearchResultItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("year".equals(fieldName)) {
                    deserializedStormSearchResultItem.year = reader.getString();
                } else if ("basinId".equals(fieldName)) {
                    deserializedStormSearchResultItem.basinId = BasinId.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedStormSearchResultItem.name = reader.getString();
                } else if ("isActive".equals(fieldName)) {
                    deserializedStormSearchResultItem.isActive = reader.getNullable(JsonReader::getBoolean);
                } else if ("isRetired".equals(fieldName)) {
                    deserializedStormSearchResultItem.isRetired = reader.getNullable(JsonReader::getBoolean);
                } else if ("isSubtropical".equals(fieldName)) {
                    deserializedStormSearchResultItem.isSubtropical = reader.getNullable(JsonReader::getBoolean);
                } else if ("govId".equals(fieldName)) {
                    deserializedStormSearchResultItem.govId = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedStormSearchResultItem;
        });
    }
}
