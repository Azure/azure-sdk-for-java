// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AirAndPollen model.
 */
@Fluent
public final class AirAndPollen implements JsonSerializable<AirAndPollen> {

    /*
     * Name of the pollen or pollutant. For example, grass, mold, weed, air quality, tree and UV index.
     */
    private String description;

    /*
     * Value of the given type above. Values associated with mold, grass, weed and tree are in units of parts per cubic meter. Both air quality and UV are indices, so they are unitless.
     */
    private Integer value;

    /*
     * Category of the air quality or pollution type. For example, low, high, good, moderate, unhealthy, hazardous.
     */
    private String category;

    /*
     * Value associated with the air quality or pollution category. These values range from 1 to 6. 1 implying good conditions, 6 implying hazardous conditions.
     */
    private Integer categoryValue;

    /*
     * Only exists for air quality. Examples include ozone and particle pollution.
     */
    private String airQualityType;

    /**
     * Set default AirAndPollen constructor to private
     */
    private AirAndPollen() {
    }

    /**
     * Get the description property: Name of the pollen or pollutant. For example, grass, mold, weed, air quality, tree
     * and UV index.
     *
     * @return the description value.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the value property: Value of the given type above. Values associated with mold, grass, weed and tree are in
     * units of parts per cubic meter. Both air quality and UV are indices, so they are unitless.
     *
     * @return the value value.
     */
    public Integer getValue() {
        return this.value;
    }

    /**
     * Get the category property: Category of the air quality or pollution type. For example, low, high, good, moderate,
     * unhealthy, hazardous.
     *
     * @return the category value.
     */
    public String getCategory() {
        return this.category;
    }

    /**
     * Get the categoryValue property: Value associated with the air quality or pollution category. These values range
     * from 1 to 6. 1 implying good conditions, 6 implying hazardous conditions.
     *
     * @return the categoryValue value.
     */
    public Integer getCategoryValue() {
        return this.categoryValue;
    }

    /**
     * Get the airQualityType property: Only exists for air quality. Examples include ozone and particle pollution.
     *
     * @return the airQualityType value.
     */
    public String getAirQualityType() {
        return this.airQualityType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.description);
        jsonWriter.writeNumberField("value", this.value);
        jsonWriter.writeStringField("category", this.category);
        jsonWriter.writeNumberField("categoryValue", this.categoryValue);
        jsonWriter.writeStringField("type", this.airQualityType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AirAndPollen from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AirAndPollen if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AirAndPollen.
     */
    public static AirAndPollen fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AirAndPollen deserializedAirAndPollen = new AirAndPollen();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    deserializedAirAndPollen.description = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedAirAndPollen.value = reader.getNullable(JsonReader::getInt);
                } else if ("category".equals(fieldName)) {
                    deserializedAirAndPollen.category = reader.getString();
                } else if ("categoryValue".equals(fieldName)) {
                    deserializedAirAndPollen.categoryValue = reader.getNullable(JsonReader::getInt);
                } else if ("type".equals(fieldName)) {
                    deserializedAirAndPollen.airQualityType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedAirAndPollen;
        });
    }
}
