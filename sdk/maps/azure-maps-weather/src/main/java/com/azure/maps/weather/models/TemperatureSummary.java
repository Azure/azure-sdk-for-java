// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The TemperatureSummary model.
 */
@Fluent
public final class TemperatureSummary implements JsonSerializable<TemperatureSummary> {

    /*
     * Summary of temperature fluctuations over the past 6 hours.
     */
    private PastHoursTemperature pastSixHours;

    /*
     * Summary of temperature fluctuations over the past 12 hours.
     */
    private PastHoursTemperature pastTwelveHours;

    /*
     * Summary of temperature fluctuations over the past 24 hours.
     */
    private PastHoursTemperature pastTwentyFourHours;

    /**
     * Set default TemperatureSummary constructor to private
     */
    private TemperatureSummary() {
    }

    /**
     * Get the pastSixHours property: Summary of temperature fluctuations over the past 6 hours.
     *
     * @return the pastSixHours value.
     */
    public PastHoursTemperature getPastSixHours() {
        return this.pastSixHours;
    }

    /**
     * Get the pastTwelveHours property: Summary of temperature fluctuations over the past 12 hours.
     *
     * @return the pastTwelveHours value.
     */
    public PastHoursTemperature getPastTwelveHours() {
        return this.pastTwelveHours;
    }

    /**
     * Get the pastTwentyFourHours property: Summary of temperature fluctuations over the past 24 hours.
     *
     * @return the pastTwentyFourHours value.
     */
    public PastHoursTemperature getPastTwentyFourHours() {
        return this.pastTwentyFourHours;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("pastSixHours", this.pastSixHours);
        jsonWriter.writeJsonField("pastTwelveHours", this.pastTwelveHours);
        jsonWriter.writeJsonField("pastTwentyFourHours", this.pastTwentyFourHours);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TemperatureSummary from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TemperatureSummary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TemperatureSummary.
     */
    public static TemperatureSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TemperatureSummary deserializedTemperatureSummary = new TemperatureSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("pastSixHours".equals(fieldName)) {
                    deserializedTemperatureSummary.pastSixHours = PastHoursTemperature.fromJson(reader);
                } else if ("pastTwelveHours".equals(fieldName)) {
                    deserializedTemperatureSummary.pastTwelveHours = PastHoursTemperature.fromJson(reader);
                } else if ("pastTwentyFourHours".equals(fieldName)) {
                    deserializedTemperatureSummary.pastTwentyFourHours = PastHoursTemperature.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTemperatureSummary;
        });
    }
}
