// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The TemperatureSummary model.
 */
@Fluent
public final class TemperatureSummary implements JsonSerializable<TemperatureSummary> {

    /*
     * Summary of temperature fluctuations over the past 6 hours.
     */
    private PastHoursTemperature past6Hours;

    /*
     * Summary of temperature fluctuations over the past 12 hours.
     */
    private PastHoursTemperature past12Hours;

    /*
     * Summary of temperature fluctuations over the past 24 hours.
     */
    private PastHoursTemperature past24Hours;

    /**
     * Set default TemperatureSummary constructor to private
     */
    private TemperatureSummary() {
    }

    /**
     * Get the past6Hours property: Summary of temperature fluctuations over the past 6 hours.
     *
     * @return the past6Hours value.
     */
    public PastHoursTemperature getPast6Hours() {
        return this.past6Hours;
    }

    /**
     * Get the past12Hours property: Summary of temperature fluctuations over the past 12 hours.
     *
     * @return the past12Hours value.
     */
    public PastHoursTemperature getPast12Hours() {
        return this.past12Hours;
    }

    /**
     * Get the past24Hours property: Summary of temperature fluctuations over the past 24 hours.
     *
     * @return the past24Hours value.
     */
    public PastHoursTemperature getPast24Hours() {
        return this.past24Hours;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("past6Hours", this.past6Hours);
        jsonWriter.writeJsonField("past12Hours", this.past12Hours);
        jsonWriter.writeJsonField("past24Hours", this.past24Hours);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TemperatureSummary from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TemperatureSummary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TemperatureSummary.
     */
    public static TemperatureSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TemperatureSummary deserializedTemperatureSummary = new TemperatureSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("past6Hours".equals(fieldName)) {
                    deserializedTemperatureSummary.past6Hours = PastHoursTemperature.fromJson(reader);
                } else if ("past12Hours".equals(fieldName)) {
                    deserializedTemperatureSummary.past12Hours = PastHoursTemperature.fromJson(reader);
                } else if ("past24Hours".equals(fieldName)) {
                    deserializedTemperatureSummary.past24Hours = PastHoursTemperature.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTemperatureSummary;
        });
    }
}
