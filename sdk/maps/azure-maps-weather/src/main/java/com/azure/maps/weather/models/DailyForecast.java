// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The DailyForecast model.
 */
@Fluent
public final class DailyForecast implements JsonSerializable<DailyForecast> {

    /*
     * Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
     */
    private OffsetDateTime dateTime;

    /*
     * Temperature values for the day.
     */
    private WeatherValueRange temperature;

    /*
     * RealFeel™ Temperature being returned.
     */
    private WeatherValueRange realFeelTemperature;

    /*
     * RealFeel™ Temperature being returned. Describes what the temperature really feels like in the shade.
     */
    private WeatherValueRange realFeelTemperatureShade;

    /*
     * Hours of sun.
     */
    private Float hoursOfSun;

    /*
     * Summary for mean temperature of Heating Degree Day or Cooling Degree Day information
     */
    private DegreeDaySummary meanTemperatureDeviation;

    /*
     * Air quality
     */
    private List<AirAndPollen> airQuality;

    /*
     * Day forecast detail
     */
    private DailyForecastDetail daytimeForecast;

    /*
     * Night forecast detail
     */
    private DailyForecastDetail nighttimeForecast;

    /*
     * Source(s) of the forecast data.
     */
    private List<String> sources;

    /**
     * Set default DailyForecast constructor to private
     */
    private DailyForecast() {
    }

    /**
     * Get the dateTime property: Date and time of the current observation displayed in ISO 8601 format, for example,
     * 2019-10-27T19:39:57-08:00.
     *
     * @return the dateTime value.
     */
    public OffsetDateTime getDateTime() {
        return this.dateTime;
    }

    /**
     * Get the temperature property: Temperature values for the day.
     *
     * @return the temperature value.
     */
    public WeatherValueRange getTemperature() {
        return this.temperature;
    }

    /**
     * Get the realFeelTemperature property: RealFeel™ Temperature being returned.
     *
     * @return the realFeelTemperature value.
     */
    public WeatherValueRange getRealFeelTemperature() {
        return this.realFeelTemperature;
    }

    /**
     * Get the realFeelTemperatureShade property: RealFeel™ Temperature being returned. Describes what the temperature
     * really feels like in the shade.
     *
     * @return the realFeelTemperatureShade value.
     */
    public WeatherValueRange getRealFeelTemperatureShade() {
        return this.realFeelTemperatureShade;
    }

    /**
     * Get the hoursOfSun property: Hours of sun.
     *
     * @return the hoursOfSun value.
     */
    public Float getHoursOfSun() {
        return this.hoursOfSun;
    }

    /**
     * Get the meanTemperatureDeviation property: Summary for mean temperature of Heating Degree Day or Cooling Degree
     * Day information.
     *
     * @return the meanTemperatureDeviation value.
     */
    public DegreeDaySummary getMeanTemperatureDeviation() {
        return this.meanTemperatureDeviation;
    }

    /**
     * Get the airQuality property: Air quality.
     *
     * @return the airQuality value.
     */
    public List<AirAndPollen> getAirQuality() {
        return this.airQuality;
    }

    /**
     * Get the daytimeForecast property: Day forecast detail.
     *
     * @return the daytimeForecast value.
     */
    public DailyForecastDetail getDaytimeForecast() {
        return this.daytimeForecast;
    }

    /**
     * Get the nighttimeForecast property: Night forecast detail.
     *
     * @return the nighttimeForecast value.
     */
    public DailyForecastDetail getNighttimeForecast() {
        return this.nighttimeForecast;
    }

    /**
     * Get the sources property: Source(s) of the forecast data.
     *
     * @return the sources value.
     */
    public List<String> getSources() {
        return this.sources;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("date",
            this.dateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.dateTime));
        jsonWriter.writeJsonField("temperature", this.temperature);
        jsonWriter.writeJsonField("realFeelTemperature", this.realFeelTemperature);
        jsonWriter.writeJsonField("realFeelTemperatureShade", this.realFeelTemperatureShade);
        jsonWriter.writeNumberField("hoursOfSun", this.hoursOfSun);
        jsonWriter.writeJsonField("degreeDaySummary", this.meanTemperatureDeviation);
        jsonWriter.writeArrayField("airAndPollen", this.airQuality, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("day", this.daytimeForecast);
        jsonWriter.writeJsonField("night", this.nighttimeForecast);
        jsonWriter.writeArrayField("sources", this.sources, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DailyForecast from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DailyForecast if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DailyForecast.
     */
    public static DailyForecast fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DailyForecast deserializedDailyForecast = new DailyForecast();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("date".equals(fieldName)) {
                    deserializedDailyForecast.dateTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("temperature".equals(fieldName)) {
                    deserializedDailyForecast.temperature = WeatherValueRange.fromJson(reader);
                } else if ("realFeelTemperature".equals(fieldName)) {
                    deserializedDailyForecast.realFeelTemperature = WeatherValueRange.fromJson(reader);
                } else if ("realFeelTemperatureShade".equals(fieldName)) {
                    deserializedDailyForecast.realFeelTemperatureShade = WeatherValueRange.fromJson(reader);
                } else if ("hoursOfSun".equals(fieldName)) {
                    deserializedDailyForecast.hoursOfSun = reader.getNullable(JsonReader::getFloat);
                } else if ("degreeDaySummary".equals(fieldName)) {
                    deserializedDailyForecast.meanTemperatureDeviation = DegreeDaySummary.fromJson(reader);
                } else if ("airAndPollen".equals(fieldName)) {
                    List<AirAndPollen> airQuality = reader.readArray(reader1 -> AirAndPollen.fromJson(reader1));
                    deserializedDailyForecast.airQuality = airQuality;
                } else if ("day".equals(fieldName)) {
                    deserializedDailyForecast.daytimeForecast = DailyForecastDetail.fromJson(reader);
                } else if ("night".equals(fieldName)) {
                    deserializedDailyForecast.nighttimeForecast = DailyForecastDetail.fromJson(reader);
                } else if ("sources".equals(fieldName)) {
                    List<String> sources = reader.readArray(reader1 -> reader1.getString());
                    deserializedDailyForecast.sources = sources;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDailyForecast;
        });
    }
}
