// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.weather;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.maps.weather.implementation.WeathersImpl;

/** Initializes a new instance of the synchronous AzureMapsWeatherServiceClient type. */
@ServiceClient(builder = AzureMapsWeatherServiceClientBuilder.class)
public final class AzureMapsWeatherServiceClient {
    @Generated private final WeathersImpl serviceClient;

    /**
     * Initializes an instance of Weathers client.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    AzureMapsWeatherServiceClient(WeathersImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * **Get Hourly Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Request detailed weather forecast by the hour for the next 1, 12, 24 (1 day), 72 (3 days), 120 (5 days), and
     * 240 hours (10 days) for the given the given coordinate location. The API returns details such as temperature,
     * humidity, wind, precipitation, and ultraviolet (UV) index.
     *
     * <p>In S0 you can request hourly forecast for the next 1, 12, 24 hours (1 day), and 72 hours (3 days). In S1 you
     * can also request hourly forecast for the next 120 (5 days) and 240 hours (10 days).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>coordinates</td><td>String</td><td>Yes</td><td>The applicable query specified as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".</td></tr>
     *     <tr><td>unit</td><td>String</td><td>No</td><td>Specifies to return the data in either metric units or imperial units. Default value is metric.</td></tr>
     *     <tr><td>duration</td><td>String</td><td>No</td><td>Time frame of the returned weather forecast. By default, the forecast data for next hour will be returned. Available values are
     *   * `1` - Return forecast data for the next hour. Default value.
     *   * `12` - Return hourly forecast for next 12 hours.
     *   * `24` - Return hourly forecast for next 24 hours.
     *   * `72` - Return hourly forecast for next 72 hours (3 days).
     *   * `120` - Return hourly forecast for next 120 hours (5 days). Only available in S1 SKU.
     *   * `240` - Return hourly forecast for next 240 hours (10 days). Only available in S1 SKU.</td></tr>
     *     <tr><td>language</td><td>String</td><td>No</td><td>Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
     *
     * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     forecasts: [
     *         {
     *             timestamp: String
     *             iconCode: String(1/2/3/4/5/6/7/8/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/29/30/31/32/33/34/35/36/37/38/39/40/41/42/43/44)
     *             iconPhrase: String
     *             hasPrecipitation: Boolean
     *             isDaylight: Boolean
     *             temperature: {
     *                 value: Float
     *                 unitLabel: String
     *                 unitType: String(0/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/31)
     *             }
     *             realFeelTemperature: (recursive schema, see realFeelTemperature above)
     *             wetBulbTemperature: (recursive schema, see wetBulbTemperature above)
     *             dewPoint: (recursive schema, see dewPoint above)
     *             wind: {
     *                 direction: {
     *                     degrees: Integer
     *                     description: String
     *                 }
     *                 speed: (recursive schema, see speed above)
     *             }
     *             windGust: (recursive schema, see windGust above)
     *             relativeHumidity: Integer
     *             visibility: (recursive schema, see visibility above)
     *             cloudCeiling: (recursive schema, see cloudCeiling above)
     *             uvIndex: Integer
     *             uvIndexDescription: String
     *             precipitationProbability: Integer
     *             rainProbability: Integer
     *             snowProbability: Integer
     *             iceProbability: Integer
     *             totalLiquid: (recursive schema, see totalLiquid above)
     *             rain: (recursive schema, see rain above)
     *             snow: (recursive schema, see snow above)
     *             ice: (recursive schema, see ice above)
     *             cloudCover: Integer
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getHourlyForecastWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getHourlyForecastWithResponse(format, requestOptions);
    }

    /**
     * **Get Minute Forecast**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Minute Forecast service returns minute-by-minute forecasts for a given location for the next 120 minutes.
     * Users can request weather forecasts in the interval of 1, 5 and 15 minutes. The response will include details
     * such as the type of precipitation (including rain, snow, or a mixture of both), start time, and precipitation
     * intensity value (dBZ).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>coordinates</td><td>String</td><td>Yes</td><td>The applicable query specified as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".</td></tr>
     *     <tr><td>interval</td><td>String</td><td>No</td><td>Specifies time interval in minutes for the returned weather forecast. Supported values are
     *   * `1` -  Retrieve forecast for 1-minute intervals. Returned by default.
     *   * `5` - Retrieve forecasts for 5-minute intervals.
     *   * `15` - Retrieve forecasts for 15-minute intervals.</td></tr>
     *     <tr><td>language</td><td>String</td><td>No</td><td>Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
     *
     * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     summary: {
     *         briefPhrase60: String
     *         shortDescription: String
     *         briefDescription: String
     *         longPhrase: String
     *         iconCode: String(1/2/3/4/5/6/7/8/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/29/30/31/32/33/34/35/36/37/38/39/40/41/42/43/44)
     *     }
     *     intervalSummaries: [
     *         {
     *             startMinute: Integer
     *             endMinute: Integer
     *             totalMinutes: Integer
     *             shortDescription: String
     *             briefDescription: String
     *             longPhrase: String
     *             iconCode: String(1/2/3/4/5/6/7/8/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/29/30/31/32/33/34/35/36/37/38/39/40/41/42/43/44)
     *         }
     *     ]
     *     intervals: [
     *         {
     *             startTime: String
     *             minute: Integer
     *             decibelRelativeToZ: Double
     *             shortDescription: String
     *             threshold: String
     *             color: {
     *                 red: Integer
     *                 green: Integer
     *                 blue: Integer
     *                 hex: String
     *             }
     *             simplifiedColor: (recursive schema, see simplifiedColor above)
     *             precipitationType: String(Rain/Snow/Ice/Mix)
     *             iconCode: String(1/2/3/4/5/6/7/8/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/29/30/31/32/33/34/35/36/37/38/39/40/41/42/43/44)
     *             cloudCover: Integer
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMinuteForecastWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getMinuteForecastWithResponse(format, requestOptions);
    }

    /**
     * **Get Quarter-Day Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Service returns detailed weather forecast by quarter-day for the next 1, 5, 10, or 15 days for a given
     * location. Response data is presented by quarters of the day - morning, afternoon, evening, and overnight. Details
     * such as temperature, humidity, wind, precipitation, and UV index are returned.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>coordinates</td><td>String</td><td>Yes</td><td>The applicable query specified as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".</td></tr>
     *     <tr><td>unit</td><td>String</td><td>No</td><td>Specifies to return the data in either metric units or imperial units. Default value is metric.</td></tr>
     *     <tr><td>duration</td><td>String</td><td>No</td><td>Specifies for how many days the quester-day forecast responses are returned. Supported values are:
     *   * `1` - Return forecast data for the next day. Returned by default.
     *   * `5` - Return forecast data for the next 5 days.
     *   * `10` - Return forecast data for next 10 days.
     *   * `15` - Return forecast data for the next 15 days.</td></tr>
     *     <tr><td>language</td><td>String</td><td>No</td><td>Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
     *
     * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     forecasts: [
     *         {
     *             dateTime: String
     *             effectiveDate: String
     *             quarter: String(0/1/2/3)
     *             iconCode: String(1/2/3/4/5/6/7/8/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/29/30/31/32/33/34/35/36/37/38/39/40/41/42/43/44)
     *             iconPhrase: String
     *             phrase: String
     *             temperature: {
     *                 minimum: {
     *                     value: Float
     *                     unitLabel: String
     *                     unitType: String(0/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/31)
     *                 }
     *                 maximum: (recursive schema, see maximum above)
     *             }
     *             realFeelTemperature: (recursive schema, see realFeelTemperature above)
     *             dewPoint: (recursive schema, see dewPoint above)
     *             relativeHumidity: Integer
     *             wind: {
     *                 direction: {
     *                     degrees: Integer
     *                     description: String
     *                 }
     *                 speed: (recursive schema, see speed above)
     *             }
     *             windGust: (recursive schema, see windGust above)
     *             visibility: (recursive schema, see visibility above)
     *             cloudCover: Integer
     *             hasPrecipitation: Boolean
     *             precipitationType: String(Rain/Snow/Ice/Mix)
     *             precipitationIntensity: String
     *             precipitationProbability: Integer
     *             thunderstormProbability: Integer
     *             totalLiquid: (recursive schema, see totalLiquid above)
     *             rain: (recursive schema, see rain above)
     *             snow: (recursive schema, see snow above)
     *             ice: (recursive schema, see ice above)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getQuarterDayForecastWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getQuarterDayForecastWithResponse(format, requestOptions);
    }

    /**
     * **Get Current Conditions**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Get Current Conditions service returns detailed current weather conditions such as precipitation, temperature
     * and wind for a given coordinate location. Also, observations from the past 6 or 24 hours for a particular
     * location can be retrieved. The basic information returned with the response include details such as observation
     * date and time, brief description of the weather conditions, weather icon, precipitation indicator flags, and
     * temperature. Additional details such as RealFeel™ Temperature and UV index are also returned.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>coordinates</td><td>String</td><td>Yes</td><td>The applicable query specified as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".</td></tr>
     *     <tr><td>unit</td><td>String</td><td>No</td><td>Specifies to return the data in either metric units or imperial units. Default value is metric.</td></tr>
     *     <tr><td>details</td><td>String</td><td>No</td><td>Return full details for the current conditions. Available values are
     *   * `true` - Returns full details. By default all details are returned.
     *   * `false` - Returns a truncated version of the current condition data, which includes observation date time, weather phrase, icon code, precipitation indicator flag, and temperature.</td></tr>
     *     <tr><td>duration</td><td>String</td><td>No</td><td>Time frame of the returned weather conditions. By default, the most current weather conditions will be returned. Default value is 0. Supported values are:
     *    * `0` - Return the most current weather conditions.
     *    * `6` - Return weather conditions from past 6 hours.
     *    * `24` - Return weather conditions from past 24 hours.</td></tr>
     *     <tr><td>language</td><td>String</td><td>No</td><td>Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
     *
     * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     results: [
     *         {
     *             dateTime: String
     *             description: String
     *             iconCode: String(1/2/3/4/5/6/7/8/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/29/30/31/32/33/34/35/36/37/38/39/40/41/42/43/44)
     *             hasPrecipitation: Boolean
     *             isDaytime: Boolean
     *             temperature: {
     *                 value: Float
     *                 unitLabel: String
     *                 unitType: String(0/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/31)
     *             }
     *             realFeelTemperature: (recursive schema, see realFeelTemperature above)
     *             realFeelTemperatureShade: (recursive schema, see realFeelTemperatureShade above)
     *             relativeHumidity: Integer
     *             dewPoint: (recursive schema, see dewPoint above)
     *             wind: {
     *                 direction: {
     *                     degrees: Integer
     *                     description: String
     *                 }
     *                 speed: (recursive schema, see speed above)
     *             }
     *             windGust: (recursive schema, see windGust above)
     *             uvIndex: Integer
     *             uvIndexDescription: String
     *             visibility: (recursive schema, see visibility above)
     *             obstructionsToVisibility: String
     *             cloudCover: Integer
     *             cloudCeiling: (recursive schema, see cloudCeiling above)
     *             pressure: (recursive schema, see pressure above)
     *             pressureTendency: {
     *                 description: String
     *                 code: String
     *             }
     *             pastTwentyFourHourTemperatureDeparture: (recursive schema, see pastTwentyFourHourTemperatureDeparture above)
     *             apparentTemperature: (recursive schema, see apparentTemperature above)
     *             windChillTemperature: (recursive schema, see windChillTemperature above)
     *             wetBulbTemperature: (recursive schema, see wetBulbTemperature above)
     *             precipitationSummary: {
     *                 pastHour: (recursive schema, see pastHour above)
     *                 pastThreeHours: (recursive schema, see pastThreeHours above)
     *                 pastSixHours: (recursive schema, see pastSixHours above)
     *                 pastNineHours: (recursive schema, see pastNineHours above)
     *                 pastTwelveHours: (recursive schema, see pastTwelveHours above)
     *                 pastEighteenHours: (recursive schema, see pastEighteenHours above)
     *                 pastTwentyFourHours: (recursive schema, see pastTwentyFourHours above)
     *             }
     *             temperatureSummary: {
     *                 pastSixHours: {
     *                     minimum: (recursive schema, see minimum above)
     *                     maximum: (recursive schema, see maximum above)
     *                 }
     *                 pastTwelveHours: (recursive schema, see pastTwelveHours above)
     *                 pastTwentyFourHours: (recursive schema, see pastTwentyFourHours above)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCurrentConditionsWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getCurrentConditionsWithResponse(format, requestOptions);
    }

    /**
     * **Get Daily Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>The service returns detailed weather forecast such as temperature and wind by day for the next 1, 5, 10, 15,
     * 25, or 45 days for a given coordinate location. The response include details such as temperature, wind,
     * precipitation, air quality, and UV index.
     *
     * <p>In S0 you can request daily forecast for the next 1, 5, 10, and 15 days. In S1 you can also request daily
     * forecast for the next 25 days, and 45 days.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>coordinates</td><td>String</td><td>Yes</td><td>The applicable query specified as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".</td></tr>
     *     <tr><td>unit</td><td>String</td><td>No</td><td>Specifies to return the data in either metric units or imperial units. Default value is metric.</td></tr>
     *     <tr><td>duration</td><td>String</td><td>No</td><td>Specifies for how many days the daily forecast responses are returned. Available values are
     *   * `1` - Return forecast data for the next day. Returned by default.
     *   * `5` - Return forecast data for the next 5 days.
     *   * `10` - Return forecast data for the next 10 days.
     *   * `25` - Return forecast data for the next 25 days. Only available in S1 SKU.
     *   * `45` - Return forecast data for the next 45 days. Only available in S1 SKU.</td></tr>
     *     <tr><td>language</td><td>String</td><td>No</td><td>Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
     *
     * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     summary: {
     *         startDate: String
     *         endDate: String
     *         severity: Integer
     *         phrase: String
     *         category: String
     *     }
     *     forecasts: [
     *         {
     *             dateTime: String
     *             temperature: {
     *                 minimum: {
     *                     value: Float
     *                     unitLabel: String
     *                     unitType: String(0/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/31)
     *                 }
     *                 maximum: (recursive schema, see maximum above)
     *             }
     *             realFeelTemperature: (recursive schema, see realFeelTemperature above)
     *             realFeelTemperatureShade: (recursive schema, see realFeelTemperatureShade above)
     *             hoursOfSun: Float
     *             meanTemperatureDeviation: {
     *                 heating: (recursive schema, see heating above)
     *                 cooling: (recursive schema, see cooling above)
     *             }
     *             airQuality: [
     *                 {
     *                     description: String
     *                     value: Integer
     *                     category: String
     *                     categoryValue: Integer
     *                     airQualityType: String
     *                 }
     *             ]
     *             daytimeForecast: {
     *                 iconCode: String(1/2/3/4/5/6/7/8/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/29/30/31/32/33/34/35/36/37/38/39/40/41/42/43/44)
     *                 iconPhrase: String
     *                 localSource: {
     *                     id: Integer
     *                     name: String
     *                     weatherCode: String
     *                 }
     *                 hasPrecipitation: Boolean
     *                 precipitationType: String(Rain/Snow/Ice/Mix)
     *                 precipitationIntensity: String
     *                 shortDescription: String
     *                 longPhrase: String
     *                 precipitationProbability: Integer
     *                 thunderstormProbability: Integer
     *                 rainProbability: Integer
     *                 snowProbability: Integer
     *                 iceProbability: Integer
     *                 wind: {
     *                     direction: {
     *                         degrees: Integer
     *                         description: String
     *                     }
     *                     speed: (recursive schema, see speed above)
     *                 }
     *                 windGust: (recursive schema, see windGust above)
     *                 totalLiquid: (recursive schema, see totalLiquid above)
     *                 rain: (recursive schema, see rain above)
     *                 snow: (recursive schema, see snow above)
     *                 ice: (recursive schema, see ice above)
     *                 hoursOfPrecipitation: Float
     *                 hoursOfRain: Float
     *                 hoursOfSnow: Float
     *                 hoursOfIce: Float
     *                 cloudCover: Integer
     *             }
     *             nighttimeForecast: (recursive schema, see nighttimeForecast above)
     *             sources: [
     *                 String
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDailyForecastWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getDailyForecastWithResponse(format, requestOptions);
    }

    /**
     * **Get Weather along route**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Weather along a route API returns hyper local (one kilometer or less), up-to-the-minute weather nowcasts,
     * weather hazard assessments, and notifications along a route described as a sequence of waypoints. This includes a
     * list of weather hazards affecting the waypoint or route, and the aggregated hazard index for each waypoint might
     * be used to paint each portion of a route according to how safe it is for the driver. When submitting the
     * waypoints, it is recommended to stay within, or close to, the distance that can be traveled within 120-mins or
     * shortly after. Data is updated every five minutes.
     *
     * <p>The service supplements Azure Maps [Route Service](https://docs.microsoft.com/rest/api/maps/route) that allows
     * you to first request a route between an origin and a destination and use that as an input for Weather Along Route
     * endpoint.
     *
     * <p>In addition, the service supports scenarios to generate weather notifications for waypoints that experience an
     * increase in intensity of a weather hazard. For example, if the vehicle is expected to begin experiencing heavy
     * rain as it reaches a waypoint, a weather notification for heavy rain will be generated for that waypoint allowing
     * the end product to display a heavy rain notification before the driver reaches that waypoint. The trigger for
     * when to display the notification for a waypoint could be based, for example, on a
     * [geofence](https://docs.microsoft.com/azure/azure-maps/tutorial-iot-hub-maps), or selectable distance to the
     * waypoint.
     *
     * <p>The API covers all regions of the planet except latitudes above Greenland and Antarctica.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>query</td><td>String</td><td>Yes</td><td>Coordinates through which the route is calculated, separated by colon (:) and entered in chronological order. A minimum of two waypoints is required. A single API call may contain up to 60 waypoints.
     * A waypoint indicates location, ETA, and optional heading: latitude,longitude,ETA,heading, where
     *   * `Latitude` - Latitude coordinate in decimal degrees.
     *   * `Longitude` - Longitude coordinate in decimal degrees.
     *   * `ETA (estimated time of arrival)` - The number of minutes from the present time that it will take for the vehicle to reach the waypoint. Allowed range is from 0.0 to 120.0 minutes.
     *   * `Heading` - An optional value indicating the vehicle heading as it passes the waypoint. Expressed in clockwise degrees relative to true north. This is issued to calculate sun glare as a driving hazard. Allowed range is from 0.0 to 360.0 degrees. If not provided, a heading will automatically be derived based on the position of neighboring waypoints.
     *
     * It is recommended to stay within, or close to, the distance that can be traveled within 120-mins or shortly after. This way a more accurate assessment can be provided for the trip and prevent isolated events not being captured between waypoints.  Information can and should be updated along the route (especially for trips greater than 2 hours) to continuously pull new waypoints moving forward, but also to ensure that forecast information for content such as precipitation type and intensity is accurate as storms develop and dissipate over time.</td></tr>
     *     <tr><td>language</td><td>String</td><td>No</td><td>Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
     *
     * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     summary: {
     *         iconCode: String(1/2/3/4/5/6/7/8/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/29/30/31/32/33/34/35/36/37/38/39/40/41/42/43/44)
     *         hazards: {
     *             maxHazardIndex: String(0/1/2/3/4)
     *             details: [
     *                 {
     *                     hazardIndex: String(0/1/2/3/4)
     *                     hazardCode: String
     *                     shortDescription: String
     *                 }
     *             ]
     *         }
     *     }
     *     waypoints: [
     *         {
     *             iconCode: String(1/2/3/4/5/6/7/8/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/29/30/31/32/33/34/35/36/37/38/39/40/41/42/43/44)
     *             shortDescription: String
     *             isDaytime: Boolean
     *             cloudCover: Integer
     *             temperature: {
     *                 value: Float
     *                 unitLabel: String
     *                 unitType: String(0/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/31)
     *             }
     *             wind: {
     *                 direction: {
     *                     degrees: Integer
     *                     description: String
     *                 }
     *                 speed: (recursive schema, see speed above)
     *             }
     *             windGust: (recursive schema, see windGust above)
     *             precipitation: {
     *                 dbz: Double
     *                 type: String
     *             }
     *             lightningCount: Integer
     *             sunGlare: {
     *                 calculatedVehicleHeading: Integer
     *                 glareIndex: Integer
     *             }
     *             hazards: (recursive schema, see hazards above)
     *             notifications: [
     *                 {
     *                     type: String
     *                     hazardIndex: String(0/1/2/3/4)
     *                     hazardCode: String
     *                     shortDescription: String
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return this object is returned from a successful Weather Along Route along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWeatherAlongRouteWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getWeatherAlongRouteWithResponse(format, requestOptions);
    }

    /**
     * **Get Severe Weather Alerts**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Severe weather phenomenon can significantly impact our everyday life and business operations. For example,
     * severe weather conditions such as tropical storms, high winds or flooding can close roads and force logistics
     * companies to reroute their fleet causing delays in reaching destinations and breaking the cold chain of
     * refrigerated food products.  Azure Maps Severe Weather Alerts API returns the severe weather alerts that are
     * available worldwide from both official Government Meteorological Agencies and leading global to
     * regional weather alert providers. The service can return details such as alert type, category, level and detailed
     * description about the active severe alerts for the requested location, like hurricanes, thunderstorms, lightning,
     * heat waves or forest fires.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>coordinates</td><td>String</td><td>Yes</td><td>The applicable query specified as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".</td></tr>
     *     <tr><td>language</td><td>String</td><td>No</td><td>Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
     *
     * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.</td></tr>
     *     <tr><td>details</td><td>String</td><td>No</td><td>Return full details for the severe weather alerts. Available values are
     *   * `true` - Returns full details. By default all details are returned.
     *   * `false` - Returns a truncated version of the alerts data, which excludes the area-specific full description of alert details (`alertDetails`).</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     results: [
     *         {
     *             countryCode: String
     *             alertId: Integer
     *             description: {
     *                 description: String
     *                 status: String
     *             }
     *             category: String
     *             priority: Integer
     *             classification: String
     *             level: String
     *             source: String
     *             sourceId: Integer
     *             disclaimer: String
     *             alertDetails: [
     *                 {
     *                     name: String
     *                     description: String
     *                     startTime: String
     *                     endTime: String
     *                     latestStatus: {
     *                         localized: String
     *                         english: String(New/Extend/Cancel/Correct/Expire/Upgrade/Continue/Update)
     *                     }
     *                     details: String
     *                     language: String
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return this object is returned from a successful Get Severe Weather Alerts call along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSevereWeatherAlertsWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getSevereWeatherAlertsWithResponse(format, requestOptions);
    }

    /**
     * **Get Daily Indices**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>There may be times when you want to know if the weather conditions are optimal for a specific activity, for
     * example, for outdoor construction, indoor activities, running or farming including soil moisture information.
     * Azure Maps Indices API returns index values that will guide end users to plan future activities. For example, a
     * health mobile application can notify users that today is good weather for running or for other outdoors
     * activities like for playing golf, and retail stores can optimize their digital marketing campaigns based on
     * predicted index values. The service returns in daily indices values for current and next 5, 10 and 15 days
     * starting from current day.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>coordinates</td><td>String</td><td>Yes</td><td>The applicable query specified as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".</td></tr>
     *     <tr><td>language</td><td>String</td><td>No</td><td>Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
     *
     * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.</td></tr>
     *     <tr><td>duration</td><td>String</td><td>No</td><td>Specifies for how many days the daily indices are returned. By default, the indices data for the current day will be returned. When requesting future indices data, the current day is included in the response as day 1. Available values are
     *   * `1` - Return daily index data for the current day. Default value.
     *   * `5` - Return 5 days of daily index data starting from the current day.
     *   * `10` - Return 10 days of daily index data starting from the current day.
     *   * `15` - Return 15 days of daily index data starting from the current day.</td></tr>
     *     <tr><td>indexId</td><td>String</td><td>No</td><td>Numeric index identifier that can be used for restricting returned results to the corresponding index type. Cannot be paired with `indexGroupId`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported indices.</td></tr>
     *     <tr><td>indexGroupId</td><td>String</td><td>No</td><td>Numeric index group identifier that can be used for restricting returned results to the corresponding subset of indices (index group). Cannot be paired with `indexId`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported index groups.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     results: [
     *         {
     *             indexName: String
     *             indexId: Integer
     *             dateTime: String
     *             value: Float
     *             categoryDescription: String
     *             categoryValue: Integer
     *             isAscending: Boolean
     *             description: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return this object is returned from a successful Get Daily Indices call along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDailyIndicesWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getDailyIndicesWithResponse(format, requestOptions);
    }

    /**
     * **Get Tropical Storm Active**
     *
     * <p>**Applies to**: Gen 1 (S0 and S1) and Gen 2 pricing tiers.
     *
     * <p>Get all government-issued active tropical storms. Information about the tropical storms includes, government
     * ID, basin ID, year of origin, name and if it is subtropical.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     activeStorms: [
     *         {
     *             year: String
     *             basinId: String(AL/EP/SI/NI/CP/NP/SP)
     *             name: String
     *             isActive: Boolean
     *             isSubtropical: Boolean
     *             govId: Integer
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return all government-issued active storms along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTropicalStormActiveWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getTropicalStormActiveWithResponse(format, requestOptions);
    }

    /**
     * **Get Tropical Storm Search**
     *
     * <p>**Applies to**: Gen 1 (S0 and S1) and Gen 2 pricing tiers.
     *
     * <p>Search government-issued tropical storms by year, basin ID, and government ID. Information about the tropical
     * storms includes, government ID, basin ID, status, year, name and if it is subtropical.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>year</td><td>int</td><td>Yes</td><td>Year of the cyclone(s)</td></tr>
     *     <tr><td>basinId</td><td>String</td><td>No</td><td>Basin identifier</td></tr>
     *     <tr><td>governmentStormId</td><td>String</td><td>No</td><td>Government storm Id</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     storms: [
     *         {
     *             year: String
     *             basinId: String(AL/EP/SI/NI/CP/NP/SP)
     *             name: String
     *             isActive: Boolean
     *             isRetired: Boolean
     *             isSubtropical: Boolean
     *             govId: Integer
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return search government-issued storms along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> searchTropicalStormWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.searchTropicalStormWithResponse(format, requestOptions);
    }

    /**
     * **Get Tropical Storm Forecasts**
     *
     * <p>**Applies to**: Gen 1 (S0 and S1) and Gen 2 pricing tiers.
     *
     * <p>Get individual government-issued tropical storm forecasts. Information about the forecasted tropical storms
     * includes, location, status, date the forecast was created, window, wind speed and wind radii.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>year</td><td>int</td><td>Yes</td><td>Year of the cyclone(s)</td></tr>
     *     <tr><td>basinId</td><td>String</td><td>Yes</td><td>Basin identifier</td></tr>
     *     <tr><td>governmentStormId</td><td>int</td><td>Yes</td><td>Government storm Id</td></tr>
     *     <tr><td>unit</td><td>String</td><td>No</td><td>Specifies to return the data in either metric units or imperial units. Default value is metric.</td></tr>
     *     <tr><td>includeDetails</td><td>String</td><td>No</td><td>When true, wind radii summary data is included in the response</td></tr>
     *     <tr><td>includeGeometricDetails</td><td>String</td><td>No</td><td>When true, wind radii summary data and geoJSON details are included in the response</td></tr>
     *     <tr><td>includeWindowGeometry</td><td>String</td><td>No</td><td>When true, window geometry data (geoJSON) is included in the response</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     stormForecasts: [
     *         {
     *             timestamp: String
     *             initializedTimestamp: String
     *             coordinates: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             maxWindGust: {
     *                 value: Float
     *                 unitLabel: String
     *                 unitType: String(0/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/31)
     *             }
     *             sustainedWind: (recursive schema, see sustainedWind above)
     *             status: String
     *             weatherWindow: {
     *                 topLeft: (recursive schema, see topLeft above)
     *                 bottomRight: (recursive schema, see bottomRight above)
     *                 beginTimestamp: String
     *                 endTimestamp: String
     *                 beginStatus: String
     *                 endStatus: String
     *                 geometry: {
     *                 }
     *             }
     *             windRadiiSummary: [
     *                 {
     *                     timestamp: String
     *                     windSpeed: (recursive schema, see windSpeed above)
     *                     radiusSectorData: [
     *                         {
     *                             beginBearing: Double
     *                             endBearing: Double
     *                             radius: Double
     *                         }
     *                     ]
     *                     radiiGeometry: (recursive schema, see radiiGeometry above)
     *                 }
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the list of Government-issued forecasts along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTropicalStormForecastWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getTropicalStormForecastWithResponse(format, requestOptions);
    }

    /**
     * **Get Tropical Storm Locations**
     *
     * <p>**Applies to**: Gen 1 (S0 and S1) and Gen 2 pricing tiers.
     *
     * <p>Get location of individual government-issued tropical storms. Information about the tropical storms includes,
     * location coordinates, geometry, basin ID, date, wind details and wind radii.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>year</td><td>int</td><td>Yes</td><td>Year of the cyclone(s)</td></tr>
     *     <tr><td>basinId</td><td>String</td><td>Yes</td><td>Basin identifier</td></tr>
     *     <tr><td>governmentStormId</td><td>int</td><td>Yes</td><td>Government storm Id</td></tr>
     *     <tr><td>includeDetails</td><td>String</td><td>No</td><td>When true, wind radii summary data is included in the response</td></tr>
     *     <tr><td>includeGeometricDetails</td><td>String</td><td>No</td><td>When true, wind radii summary data and geoJSON details are included in the response</td></tr>
     *     <tr><td>unit</td><td>String</td><td>No</td><td>Specifies to return the data in either metric units or imperial units. Default value is metric.</td></tr>
     *     <tr><td>includeCurrentStorm</td><td>String</td><td>No</td><td>When true, return the current storm location</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     stormLocations: [
     *         {
     *             timestamp: String
     *             coordinates: {
     *                 latitude: Double
     *                 longitude: Double
     *             }
     *             maxWindGust: {
     *                 value: Float
     *                 unitLabel: String
     *                 unitType: String(0/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/31)
     *             }
     *             sustainedWind: (recursive schema, see sustainedWind above)
     *             minimumPressure: (recursive schema, see minimumPressure above)
     *             movement: {
     *                 direction: {
     *                     degrees: Integer
     *                     description: String
     *                 }
     *                 speed: (recursive schema, see speed above)
     *             }
     *             status: String
     *             isSubtropical: Boolean
     *             hasTropicalPotential: Boolean
     *             isPostTropical: Boolean
     *             windRadiiSummary: [
     *                 {
     *                     timestamp: String
     *                     windSpeed: (recursive schema, see windSpeed above)
     *                     radiusSectorData: [
     *                         {
     *                             beginBearing: Double
     *                             endBearing: Double
     *                             radius: Double
     *                         }
     *                     ]
     *                     radiiGeometry: {
     *                     }
     *                 }
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return locations for an individual government-issued storm along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTropicalStormLocationsWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getTropicalStormLocationsWithResponse(format, requestOptions);
    }

    /**
     * **Get Current Air Quality**
     *
     * <p>**Applies to**: Gen 1 (S0 and S1) and Gen 2 pricing tiers.
     *
     * <p>Get detailed information about the concentration of pollutants and overall status for current air quality.
     * Information includes, pollution levels, air quality index values, the dominant pollutant, and a brief statement
     * summarizing risk level and suggested precautions.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>language</td><td>String</td><td>No</td><td>Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
     *
     * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.</td></tr>
     *     <tr><td>coordinates</td><td>String</td><td>Yes</td><td>The applicable query specified as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".</td></tr>
     *     <tr><td>includePollutantDetails</td><td>String</td><td>No</td><td>Boolean value that returns detailed information about each pollutant. By default is True.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     airQualityResults: [
     *         {
     *             timestamp: String
     *             index: Float
     *             globalIndex: Float
     *             dominantPollutant: String(Carbon Monoxide/Nitrogen Dioxide/Ozone/Particulate Matter 2.5/Particulate Matter 10/Sulfur Dioxide)
     *             category: String
     *             categoryColor: String
     *             description: String
     *             pollutants: [
     *                 {
     *                     type: String(CO/NO2/O3/PM2.5/PM10/SO2)
     *                     name: String
     *                     index: Float
     *                     globalIndex: Float
     *                     concentration: {
     *                         value: Float
     *                         unitLabel: String
     *                         unitType: String(0/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/31)
     *                     }
     *                 }
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return this object is returned from a successful Get Air Quality call along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCurrentAirQualityWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getCurrentAirQualityWithResponse(format, requestOptions);
    }

    /**
     * **Get Air Quality Daily Forecasts**
     *
     * <p>**Applies to**: Gen 1 (S0 and S1) and Gen 2 pricing tiers.
     *
     * <p>Get detailed information about the concentration of pollutants and overall status of forecasted daily air
     * quality. The service can provide forecasted daily air quality information for the upcoming 1 to 7 days.
     * Information includes, pollution levels, air quality index values, the dominant pollutant, and a brief statement
     * summarizing risk level and suggested precautions.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>language</td><td>String</td><td>No</td><td>Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
     *
     * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.</td></tr>
     *     <tr><td>coordinates</td><td>String</td><td>Yes</td><td>The applicable query specified as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".</td></tr>
     *     <tr><td>duration</td><td>String</td><td>No</td><td>Specifies for how many days from now we would like to know about the air quality. Available values are 1, 2, 3, 4, 5, 6, and 7. Default value is 1.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     airQualityResults: [
     *         {
     *             timestamp: String
     *             index: Float
     *             globalIndex: Float
     *             dominantPollutant: String(Carbon Monoxide/Nitrogen Dioxide/Ozone/Particulate Matter 2.5/Particulate Matter 10/Sulfur Dioxide)
     *             category: String
     *             categoryColor: String
     *             description: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return this object is returned from a successful Get Daily Air Quality Forecast call along with {@link
     *     Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAirQualityDailyForecastsWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getAirQualityDailyForecastsWithResponse(format, requestOptions);
    }

    /**
     * **Get Air Quality Hourly Forecasts**
     *
     * <p>**Applies to**: Gen 1 (S0 and S1) and Gen 2 pricing tiers.
     *
     * <p>Get detailed information about the concentration of pollutants and overall status for forecasted upcoming
     * hourly air quality. The service can provide forecasted hourly air quality information for the upcoming time spans
     * of 1, 12, 24, 48, 72, and 96 hours. Information includes, pollution levels, air quality index values, the
     * dominant pollutant, and a brief statement summarizing risk level and suggested precautions.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>language</td><td>String</td><td>No</td><td>Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.
     *
     * Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.</td></tr>
     *     <tr><td>coordinates</td><td>String</td><td>Yes</td><td>The applicable query specified as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".</td></tr>
     *     <tr><td>duration</td><td>String</td><td>No</td><td>Specifies for how many hours from now we would like to know about the air quality. Available values are 1, 12, 24, 48, 72, 96. Default value is 1 hour.</td></tr>
     *     <tr><td>includePollutantDetails</td><td>String</td><td>No</td><td>Boolean value that returns detailed information about each pollutant. By default is True.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     airQualityResults: [
     *         {
     *             timestamp: String
     *             index: Float
     *             globalIndex: Float
     *             dominantPollutant: String(Carbon Monoxide/Nitrogen Dioxide/Ozone/Particulate Matter 2.5/Particulate Matter 10/Sulfur Dioxide)
     *             category: String
     *             categoryColor: String
     *             description: String
     *             pollutants: [
     *                 {
     *                     type: String(CO/NO2/O3/PM2.5/PM10/SO2)
     *                     name: String
     *                     index: Float
     *                     globalIndex: Float
     *                     concentration: {
     *                         value: Float
     *                         unitLabel: String
     *                         unitType: String(0/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/31)
     *                     }
     *                 }
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return this object is returned from a successful Get Air Quality call along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAirQualityHourlyForecastsWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getAirQualityHourlyForecastsWithResponse(format, requestOptions);
    }

    /**
     * **Get Daily Historical Actuals**
     *
     * <p>**Applies to**: Gen 1 (S0 and S1) and Gen 2 pricing tiers.
     *
     * <p>Get Daily Historical Actuals service returns climatology data such as past daily actual observed temperatures,
     * precipitation, snowfall, snow depth and cooling/heating degree day information, for the day at a given coordinate
     * location. The data is requested for a specified date range, up to 31 days in a single API request. Generally,
     * historical data may be available as far back as the last 5 to 40+ years, depending on the location.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>coordinates</td><td>String</td><td>Yes</td><td>The applicable query specified as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".</td></tr>
     *     <tr><td>startDate</td><td>String</td><td>Yes</td><td>Start date in ISO 8601 format, for example, 2019-10-27. The date range supported is 1 to 31 calendar days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.: startDate=2012-01-01&amp;endDate=2012-01-31).</td></tr>
     *     <tr><td>endDate</td><td>String</td><td>Yes</td><td>End date in ISO 8601 format, for example, 2019-10-28. The date range supported is 1 to 31 calendar days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.: startDate=2012-01-01&amp;endDate=2012-01-31).</td></tr>
     *     <tr><td>unit</td><td>String</td><td>No</td><td>Specifies to return the data in either metric units or imperial units. Default value is metric.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     historicalActuals: [
     *         {
     *             timestamp: String
     *             temperature: {
     *                 maximum: {
     *                     value: Float
     *                     unitLabel: String
     *                     unitType: String(0/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/31)
     *                 }
     *                 minimum: (recursive schema, see minimum above)
     *                 average: (recursive schema, see average above)
     *             }
     *             degreeDaySummary: {
     *                 heating: (recursive schema, see heating above)
     *                 cooling: (recursive schema, see cooling above)
     *             }
     *             precipitation: (recursive schema, see precipitation above)
     *             snowfall: (recursive schema, see snowfall above)
     *             snowDepth: (recursive schema, see snowDepth above)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDailyHistoricalActualsWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getDailyHistoricalActualsWithResponse(format, requestOptions);
    }

    /**
     * **Get Daily Historical Records**
     *
     * <p>**Applies to**: Gen 1 (S0 and S1) and Gen 2 pricing tiers.
     *
     * <p>Get Daily Historical Records service returns climatology data such as past daily record temperatures,
     * precipitation and snowfall at a given coordinate location. Availability of records data will vary by location.
     * Generally, historical data may be available as far back as the last 5 to 40+ years, depending on the location.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>coordinates</td><td>String</td><td>Yes</td><td>The applicable query specified as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".</td></tr>
     *     <tr><td>startDate</td><td>String</td><td>Yes</td><td>Start date in ISO 8601 format, for example, 2019-10-27. The date range supported is 1 to 31 calendar days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.: startDate=2012-01-01&amp;endDate=2012-01-31).</td></tr>
     *     <tr><td>endDate</td><td>String</td><td>Yes</td><td>End date in ISO 8601 format, for example, 2019-10-28. The date range supported is 1 to 31 calendar days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.: startDate=2012-01-01&amp;endDate=2012-01-31).</td></tr>
     *     <tr><td>unit</td><td>String</td><td>No</td><td>Specifies to return the data in either metric units or imperial units. Default value is metric.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     historicalRecords: [
     *         {
     *             timestamp: String
     *             temperature: {
     *                 maximum: {
     *                     value: Float
     *                     unit: String
     *                     unitType: Integer
     *                     year: Integer
     *                 }
     *                 minimum: (recursive schema, see minimum above)
     *                 average: {
     *                     value: Float
     *                     unitLabel: String
     *                     unitType: String(0/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/31)
     *                 }
     *             }
     *             precipitation: {
     *                 maximum: (recursive schema, see maximum above)
     *             }
     *             snowfall: (recursive schema, see snowfall above)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDailyHistoricalRecordsWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getDailyHistoricalRecordsWithResponse(format, requestOptions);
    }

    /**
     * **Get Daily Historical Normals**
     *
     * <p>**Applies to**: Gen 1 (S0 and S1) and Gen 2 pricing tiers.
     *
     * <p>Get Daily Historical Normals service returns climatology data such as past daily normal temperatures,
     * precipitation and cooling/heating degree day information for the day at a given coordinate location. Normals are
     * a 30-year average for temperatures and precipitation for a specific location. As is standard practice in
     * climatology, the 30-year average covers years 1991-2020, this data will be used for one decade and then will
     * reset in the year 2030. Generally, historical data may be available as far back as the last 5 to 40+ years,
     * depending on the location.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>coordinates</td><td>String</td><td>Yes</td><td>The applicable query specified as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".</td></tr>
     *     <tr><td>startDate</td><td>String</td><td>Yes</td><td>Start date in ISO 8601 format, for example, 2019-10-27. The date range supported is 1 to 31 calendar days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.: startDate=2012-01-01&amp;endDate=2012-01-31).</td></tr>
     *     <tr><td>endDate</td><td>String</td><td>Yes</td><td>End date in ISO 8601 format, for example, 2019-10-28. The date range supported is 1 to 31 calendar days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.: startDate=2012-01-01&amp;endDate=2012-01-31).</td></tr>
     *     <tr><td>unit</td><td>String</td><td>No</td><td>Specifies to return the data in either metric units or imperial units. Default value is metric.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>clientId</td><td>String</td><td>No</td><td>Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     historicalNormals: [
     *         {
     *             timestamp: String
     *             temperature: {
     *                 maximum: {
     *                     value: Float
     *                     unitLabel: String
     *                     unitType: String(0/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/31)
     *                 }
     *                 minimum: (recursive schema, see minimum above)
     *                 average: (recursive schema, see average above)
     *             }
     *             degreeDaySummary: {
     *                 heating: (recursive schema, see heating above)
     *                 cooling: (recursive schema, see cooling above)
     *             }
     *             precipitation: (recursive schema, see precipitation above)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDailyHistoricalNormalsWithResponse(String format, RequestOptions requestOptions) {
        return this.serviceClient.getDailyHistoricalNormalsWithResponse(format, requestOptions);
    }
}
