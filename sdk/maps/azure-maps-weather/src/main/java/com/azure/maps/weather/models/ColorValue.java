// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ColorValue model.
 */
@Fluent
public final class ColorValue implements JsonSerializable<ColorValue> {

    /*
     * Red component of the RGB value.
     */
    private Integer red;

    /*
     * Green component of the RGB value.
     */
    private Integer green;

    /*
     * Blue component of the RGB value
     */
    private Integer blue;

    /*
     * Hexadecimal color value.
     */
    private String hex;

    /**
     * Set default ColorValue constructor to private
     */
    private ColorValue() {
    }

    /**
     * Get the red property: Red component of the RGB value.
     *
     * @return the red value.
     */
    public Integer getRed() {
        return this.red;
    }

    /**
     * Get the green property: Green component of the RGB value.
     *
     * @return the green value.
     */
    public Integer getGreen() {
        return this.green;
    }

    /**
     * Get the blue property: Blue component of the RGB value.
     *
     * @return the blue value.
     */
    public Integer getBlue() {
        return this.blue;
    }

    /**
     * Get the hex property: Hexadecimal color value.
     *
     * @return the hex value.
     */
    public String getHex() {
        return this.hex;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("red", this.red);
        jsonWriter.writeNumberField("green", this.green);
        jsonWriter.writeNumberField("blue", this.blue);
        jsonWriter.writeStringField("hex", this.hex);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ColorValue from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ColorValue if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the ColorValue.
     */
    public static ColorValue fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ColorValue deserializedColorValue = new ColorValue();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("red".equals(fieldName)) {
                    deserializedColorValue.red = reader.getNullable(JsonReader::getInt);
                } else if ("green".equals(fieldName)) {
                    deserializedColorValue.green = reader.getNullable(JsonReader::getInt);
                } else if ("blue".equals(fieldName)) {
                    deserializedColorValue.blue = reader.getNullable(JsonReader::getInt);
                } else if ("hex".equals(fieldName)) {
                    deserializedColorValue.hex = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedColorValue;
        });
    }
}
