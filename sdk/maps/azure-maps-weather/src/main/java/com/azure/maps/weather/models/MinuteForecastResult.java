// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The MinuteForecastResult model.
 */
@Immutable
public final class MinuteForecastResult implements JsonSerializable<MinuteForecastResult> {

    /*
     * Phrase summaries for the entire forecast period.
     */
    private MinuteForecastSummary summary;

    /*
     * Summary information for each interval in the forecast. The Summaries breaks down each potential interval where precipitation starts and stops.
     */
    private List<IntervalSummary> intervalSummaries;

    /*
     * Forecast data for each interval in the forecast.
     */
    private List<ForecastInterval> intervals;

    /**
     * Set default MinuteForecastResult constructor to private
     */
    private MinuteForecastResult() {
    }

    /**
     * Get the summary property: Phrase summaries for the entire forecast period.
     *
     * @return the summary value.
     */
    public MinuteForecastSummary getSummary() {
        return this.summary;
    }

    /**
     * Get the intervalSummaries property: Summary information for each interval in the forecast. The Summaries breaks
     * down each potential interval where precipitation starts and stops.
     *
     * @return the intervalSummaries value.
     */
    public List<IntervalSummary> getIntervalSummaries() {
        return this.intervalSummaries;
    }

    /**
     * Get the intervals property: Forecast data for each interval in the forecast.
     *
     * @return the intervals value.
     */
    public List<ForecastInterval> getIntervals() {
        return this.intervals;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MinuteForecastResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MinuteForecastResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MinuteForecastResult.
     */
    public static MinuteForecastResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MinuteForecastResult deserializedMinuteForecastResult = new MinuteForecastResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("summary".equals(fieldName)) {
                    deserializedMinuteForecastResult.summary = MinuteForecastSummary.fromJson(reader);
                } else if ("intervalSummaries".equals(fieldName)) {
                    List<IntervalSummary> intervalSummaries
                        = reader.readArray(reader1 -> IntervalSummary.fromJson(reader1));
                    deserializedMinuteForecastResult.intervalSummaries = intervalSummaries;
                } else if ("intervals".equals(fieldName)) {
                    List<ForecastInterval> intervals = reader.readArray(reader1 -> ForecastInterval.fromJson(reader1));
                    deserializedMinuteForecastResult.intervals = intervals;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedMinuteForecastResult;
        });
    }
}
