// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Information about the air quality in a specific location at a specific time.
 */
@Fluent
public final class AirQuality implements JsonSerializable<AirQuality> {

    /*
     * Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
     */
    private OffsetDateTime timestamp;

    /*
     * Air quality rating on a scale set by local regulating bodies. Scales can vary widely based on location. See [Wikipedia](https://en.wikipedia.org/wiki/Air_quality_index) for more information.
     */
    private Float index;

    /*
     * Internationally normalized air quality rating on a scale from 0 to 300 and up, with higher numbers representing worse air quality.
     */
    private Float globalIndex;

    /*
     * The pollutant with the highest concentration.
     */
    private DominantPollutant dominantPollutant;

    /*
     * One-word description of the air quality in the requested language. For example, "Excellent".
     */
    private String category;

    /*
     * A unique color corresponding to the category of this air quality result.
     */
    private String categoryColor;

    /*
     * A textual explanation of this air quality result in the requested language.
     */
    private String description;

    /*
     * Information about individual pollutants.
     */
    private List<Pollutant> pollutants;

    /**
     * Set default AirQuality constructor to private
     */
    private AirQuality() {
    }

    /**
     * Get the timestamp property: Date and time of the current observation displayed in ISO 8601 format, for example,
     * 2019-10-27T19:39:57-08:00.
     *
     * @return the timestamp value.
     */
    public OffsetDateTime getTimestamp() {
        return this.timestamp;
    }

    /**
     * Get the index property: Air quality rating on a scale set by local regulating bodies. Scales can vary widely
     * based on location. See [Wikipedia](https://en.wikipedia.org/wiki/Air_quality_index) for more information.
     *
     * @return the index value.
     */
    public Float getIndex() {
        return this.index;
    }

    /**
     * Get the globalIndex property: Internationally normalized air quality rating on a scale from 0 to 300 and up, with
     * higher numbers representing worse air quality.
     *
     * @return the globalIndex value.
     */
    public Float getGlobalIndex() {
        return this.globalIndex;
    }

    /**
     * Get the dominantPollutant property: The pollutant with the highest concentration.
     *
     * @return the dominantPollutant value.
     */
    public DominantPollutant getDominantPollutant() {
        return this.dominantPollutant;
    }

    /**
     * Get the category property: One-word description of the air quality in the requested language. For example,
     * "Excellent".
     *
     * @return the category value.
     */
    public String getCategory() {
        return this.category;
    }

    /**
     * Get the categoryColor property: A unique color corresponding to the category of this air quality result.
     *
     * @return the categoryColor value.
     */
    public String getCategoryColor() {
        return this.categoryColor;
    }

    /**
     * Get the description property: A textual explanation of this air quality result in the requested language.
     *
     * @return the description value.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the pollutants property: Information about individual pollutants.
     *
     * @return the pollutants value.
     */
    public List<Pollutant> getPollutants() {
        return this.pollutants;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dateTime",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        jsonWriter.writeNumberField("index", this.index);
        jsonWriter.writeNumberField("globalIndex", this.globalIndex);
        jsonWriter.writeStringField("dominantPollutant",
            this.dominantPollutant == null ? null : this.dominantPollutant.toString());
        jsonWriter.writeStringField("category", this.category);
        jsonWriter.writeStringField("categoryColor", this.categoryColor);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("pollutants", this.pollutants, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AirQuality from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AirQuality if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the AirQuality.
     */
    public static AirQuality fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AirQuality deserializedAirQuality = new AirQuality();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("dateTime".equals(fieldName)) {
                    deserializedAirQuality.timestamp
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("index".equals(fieldName)) {
                    deserializedAirQuality.index = reader.getNullable(JsonReader::getFloat);
                } else if ("globalIndex".equals(fieldName)) {
                    deserializedAirQuality.globalIndex = reader.getNullable(JsonReader::getFloat);
                } else if ("dominantPollutant".equals(fieldName)) {
                    deserializedAirQuality.dominantPollutant = DominantPollutant.fromString(reader.getString());
                } else if ("category".equals(fieldName)) {
                    deserializedAirQuality.category = reader.getString();
                } else if ("categoryColor".equals(fieldName)) {
                    deserializedAirQuality.categoryColor = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAirQuality.description = reader.getString();
                } else if ("pollutants".equals(fieldName)) {
                    List<Pollutant> pollutants = reader.readArray(reader1 -> Pollutant.fromJson(reader1));
                    deserializedAirQuality.pollutants = pollutants;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedAirQuality;
        });
    }
}
