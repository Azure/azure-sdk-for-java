// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.util.ExpandableEnum;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Quarter of the day.
 */
public final class DayQuarter implements ExpandableEnum<Integer> {

    private static final Map<Integer, DayQuarter> VALUES = new ConcurrentHashMap<>();

    /**
     * 7:00 am - 1:00 pm / 7:00- 13:00.
     */
    public static final DayQuarter FIRST_QUARTER = fromValue(0);

    /**
     * 1:00 pm - 7:00 pm/ 13:00- 19:00.
     */
    public static final DayQuarter SECOND_QUARTER = fromValue(1);

    /**
     * 7:00 pm - 1:00 am/ 19:00 - 01:00.
     */
    public static final DayQuarter THIRD_QUARTER = fromValue(2);

    /**
     * 1:00 am - 7:00 am/ 01:00 - 07:00.
     */
    public static final DayQuarter FORTH_QUARTER = fromValue(3);

    private final Integer value;

    private DayQuarter(Integer value) {
        this.value = value;
    }

    /**
     * Creates or finds a DayQuarter.
     *
     * @param value a value to look for.
     * @return the corresponding DayQuarter.
     */
    public static DayQuarter fromValue(Integer value) {
        Objects.requireNonNull(value, "'value' cannot be null.");
        DayQuarter member = VALUES.get(value);
        if (member != null) {
            return member;
        }
        return VALUES.computeIfAbsent(value, key -> new DayQuarter(key));
    }

    /**
     * Gets known DayQuarter values.
     *
     * @return Known DayQuarter values.
     */
    public static Collection<DayQuarter> values() {
        return new ArrayList<>(VALUES.values());
    }

    /**
     * Gets the value of the DayQuarter instance.
     *
     * @return the value of the DayQuarter instance.
     */
    @Override
    public Integer getValue() {
        return this.value;
    }

    @Override
    public String toString() {
        return Objects.toString(this.value);
    }

    @Override
    public boolean equals(Object obj) {
        return Objects.equals(this.value, obj);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(this.value);
    }

    int toInt() {
        return Integer.parseInt(toString());
    }
}
