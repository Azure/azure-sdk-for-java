// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Local weather data provider information.
 */
@Fluent
public final class LocalSource implements JsonSerializable<LocalSource> {

    /*
     * Numeric identifier, unique to the local data provider.
     */
    private Integer id;

    /*
     * Name of the local data provider. Name is displayed in the language specified by language code in URL, if available. Otherwise, Name is displayed in English or the language in which the name was provided.
     */
    private String name;

    /*
     * Weather code provided by the local data provider. This weather code allows the forecast to be matched to icons provided by the local data provider instead of Azure Maps icons.
     */
    private String weatherCode;

    /**
     * Set default LocalSource constructor to private
     */
    private LocalSource() {
    }

    /**
     * Get the id property: Numeric identifier, unique to the local data provider.
     *
     * @return the id value.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Get the name property: Name of the local data provider. Name is displayed in the language specified by language
     * code in URL, if available. Otherwise, Name is displayed in English or the language in which the name was
     * provided.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Get the weatherCode property: Weather code provided by the local data provider. This weather code allows the
     * forecast to be matched to icons provided by the local data provider instead of Azure Maps icons.
     *
     * @return the weatherCode value.
     */
    public String getWeatherCode() {
        return this.weatherCode;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("weatherCode", this.weatherCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LocalSource from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of LocalSource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LocalSource.
     */
    public static LocalSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LocalSource deserializedLocalSource = new LocalSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    deserializedLocalSource.id = reader.getNullable(JsonReader::getInt);
                } else if ("name".equals(fieldName)) {
                    deserializedLocalSource.name = reader.getString();
                } else if ("weatherCode".equals(fieldName)) {
                    deserializedLocalSource.weatherCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedLocalSource;
        });
    }
}
