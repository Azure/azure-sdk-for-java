// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.maps.weather.implementation.models.LatLongPair;
import java.io.IOException;
import java.util.List;
import com.azure.core.models.GeoPosition;

/**
 * Government-issued storm forecast.
 */
@Fluent
public final class StormForecast implements JsonSerializable<StormForecast> {

    /*
     * Datetime the forecast is valid, displayed in ISO8601 format.
     */
    private String timestamp;

    /*
     * Datetime the forecast was created, displayed in ISO8601 format.
     */
    private String initializedTimestamp;

    /*
     * Coordinates of the storm
     */
    private LatLongPair coordinates;

    /*
     * Maximum wind gust speed associated with the storm. May be NULL.
     */
    private WeatherUnitDetails maxWindGust;

    /*
     * Maximum sustained wind speed associated with the storm. May be NULL.
     */
    private WeatherUnitDetails sustainedWind;

    /*
     * Possible status values include:<ul><li>Cyclonic storm</li><li>Deep depression</li><li>Depression</li><li>Extremely severe cyclonic storm</li><li>Hurricane category (1-5)</li><li>Intense tropical cyclone</li><li>Moderate tropical storm</li><li>Post-tropical cyclone</li><li>Potential tropical cyclone</li><li>Severe cyclonic storm</li><li>Severe tropical storm</li><li>Subtropical</li><li>Super cyclonic storm</li><li>Tropical cyclone</li><li>Tropical cyclone category (1-5)</li><li>Tropical depression</li><li>Tropical disturbance</li><li>Tropical storm</li><li>Typhoon</li><li>Very intense tropical cyclone</li><li>Very severe cyclonic storm</li><li>Very strong typhoon</li><li>Violent typhoon</li></ul>
     */
    private String status;

    /*
     * Contains information about the forecast window for the storm during the specified time period (not the entire cone). If windowGeometry=true in the request, this object will include geoJSON details for window geometry.
     */
    private WeatherWindow weatherWindow;

    /*
     * Displayed when details=true or radiiGeometry=true in the request.
     */
    private List<StormWindRadiiSummary> windRadiiSummary;

    /**
     * Set default StormForecast constructor to private
     */
    private StormForecast() {
    }

    /**
     * Get the timestamp property: Datetime the forecast is valid, displayed in ISO8601 format.
     *
     * @return the timestamp value.
     */
    public String getTimestamp() {
        return this.timestamp;
    }

    /**
     * Get the initializedTimestamp property: Datetime the forecast was created, displayed in ISO8601 format.
     *
     * @return the initializedTimestamp value.
     */
    public String getInitializedTimestamp() {
        return this.initializedTimestamp;
    }

    /**
     * Get the coordinates property: Coordinates of the storm.
     *
     * @return the coordinates value.
     */
    public GeoPosition getCoordinates() {
        return new GeoPosition(this.coordinates.getLongitude(), this.coordinates.getLatitude());
    }

    /**
     * Get the maxWindGust property: Maximum wind gust speed associated with the storm. May be NULL.
     *
     * @return the maxWindGust value.
     */
    public WeatherUnitDetails getMaxWindGust() {
        return this.maxWindGust;
    }

    /**
     * Get the sustainedWind property: Maximum sustained wind speed associated with the storm. May be NULL.
     *
     * @return the sustainedWind value.
     */
    public WeatherUnitDetails getSustainedWind() {
        return this.sustainedWind;
    }

    /**
     * Get the status property: Possible status values include:&lt;ul&gt;&lt;li&gt;Cyclonic
     * storm&lt;/li&gt;&lt;li&gt;Deep depression&lt;/li&gt;&lt;li&gt;Depression&lt;/li&gt;&lt;li&gt;Extremely severe
     * cyclonic storm&lt;/li&gt;&lt;li&gt;Hurricane category (1-5)&lt;/li&gt;&lt;li&gt;Intense tropical
     * cyclone&lt;/li&gt;&lt;li&gt;Moderate tropical storm&lt;/li&gt;&lt;li&gt;Post-tropical
     * cyclone&lt;/li&gt;&lt;li&gt;Potential tropical cyclone&lt;/li&gt;&lt;li&gt;Severe cyclonic
     * storm&lt;/li&gt;&lt;li&gt;Severe tropical storm&lt;/li&gt;&lt;li&gt;Subtropical&lt;/li&gt;&lt;li&gt;Super
     * cyclonic storm&lt;/li&gt;&lt;li&gt;Tropical cyclone&lt;/li&gt;&lt;li&gt;Tropical cyclone category
     * (1-5)&lt;/li&gt;&lt;li&gt;Tropical depression&lt;/li&gt;&lt;li&gt;Tropical
     * disturbance&lt;/li&gt;&lt;li&gt;Tropical storm&lt;/li&gt;&lt;li&gt;Typhoon&lt;/li&gt;&lt;li&gt;Very intense
     * tropical cyclone&lt;/li&gt;&lt;li&gt;Very severe cyclonic storm&lt;/li&gt;&lt;li&gt;Very strong
     * typhoon&lt;/li&gt;&lt;li&gt;Violent typhoon&lt;/li&gt;&lt;/ul&gt;.
     *
     * @return the status value.
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Get the weatherWindow property: Contains information about the forecast window for the storm during the specified
     * time period (not the entire cone). If windowGeometry=true in the request, this object will include geoJSON
     * details for window geometry.
     *
     * @return the weatherWindow value.
     */
    public WeatherWindow getWeatherWindow() {
        return this.weatherWindow;
    }

    /**
     * Get the windRadiiSummary property: Displayed when details=true or radiiGeometry=true in the request.
     *
     * @return the windRadiiSummary value.
     */
    public List<StormWindRadiiSummary> getWindRadiiSummary() {
        return this.windRadiiSummary;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dateTime", this.timestamp);
        jsonWriter.writeStringField("initializedDateTime", this.initializedTimestamp);
        jsonWriter.writeJsonField("location", this.coordinates);
        jsonWriter.writeJsonField("maxWindGust", this.maxWindGust);
        jsonWriter.writeJsonField("sustainedWind", this.sustainedWind);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeJsonField("window", this.weatherWindow);
        jsonWriter.writeArrayField("windRadiiSummary", this.windRadiiSummary,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StormForecast from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of StormForecast if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StormForecast.
     */
    public static StormForecast fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StormForecast deserializedStormForecast = new StormForecast();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("dateTime".equals(fieldName)) {
                    deserializedStormForecast.timestamp = reader.getString();
                } else if ("initializedDateTime".equals(fieldName)) {
                    deserializedStormForecast.initializedTimestamp = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedStormForecast.coordinates = LatLongPair.fromJson(reader);
                } else if ("maxWindGust".equals(fieldName)) {
                    deserializedStormForecast.maxWindGust = WeatherUnitDetails.fromJson(reader);
                } else if ("sustainedWind".equals(fieldName)) {
                    deserializedStormForecast.sustainedWind = WeatherUnitDetails.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedStormForecast.status = reader.getString();
                } else if ("window".equals(fieldName)) {
                    deserializedStormForecast.weatherWindow = WeatherWindow.fromJson(reader);
                } else if ("windRadiiSummary".equals(fieldName)) {
                    List<StormWindRadiiSummary> windRadiiSummary
                        = reader.readArray(reader1 -> StormWindRadiiSummary.fromJson(reader1));
                    deserializedStormForecast.windRadiiSummary = windRadiiSummary;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedStormForecast;
        });
    }
}
