// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Information about a daily index.
 */
@Fluent
public final class DailyIndex implements JsonSerializable<DailyIndex> {

    /*
     * Name of the index, for example, "Construction", "Outdoor Activity", "Flight Delays".
     */
    private String indexName;

    /*
     * Numeric ID used to identify the specific index. Please refer to [Weather services in Azure Maps](/azure/azure-maps/weather-services-concepts#daily-index-range-sets) for details and to see the supported index IDs. For example, the index ID can support UI visualization scenarios.
     */
    private Integer indexId;

    /*
     * Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
     */
    private OffsetDateTime dateTime;

    /*
     * Index value. Ranges from 0.0 to 10.0. Please refer to [Weather services in Azure Maps](/azure/azure-maps/weather-services-concepts#daily-index-range-sets) for details and to see the supported ranges.
     */
    private Float value;

    /*
     * Textual description for `categoryValue` corresponding to the level that the index value falls under, for example "Very Good".
     */
    private String categoryDescription;

    /*
     * Level that the index value falls under, represented by an integer. This value can be 1 through 5 and should be used in combination with the `ascending` flag because it can differ among indices. For example, the following values apply for Mosquito Activity: Low=1, Moderate=2, High=3, Very High=4, and Extreme=5.
     */
    private Integer categoryValue;

    /*
     * Describes the direction of the `value` and `categoryValue`. For example, when set to `true`, the poorest index value is 0 and the best index value is 10. When set to `true`, the poorest index value is 10 and the best index value is 0.
     */
    private Boolean isAscending;

    /*
     * A textual explanation that can be used for display purposes to summarize the index value and category. For example, when the index value for Flight Delays is very good, the description will be "Conditions are excellent for flying!".
     */
    private String description;

    /**
     * Set default DailyIndex constructor to private
     */
    private DailyIndex() {
    }

    /**
     * Get the indexName property: Name of the index, for example, "Construction", "Outdoor Activity", "Flight Delays".
     *
     * @return the indexName value.
     */
    public String getIndexName() {
        return this.indexName;
    }

    /**
     * Get the indexId property: Numeric ID used to identify the specific index. Please refer to [Weather services in
     * Azure Maps](/azure/azure-maps/weather-services-concepts#daily-index-range-sets) for details and to see the
     * supported index IDs. For example, the index ID can support UI visualization scenarios.
     *
     * @return the indexId value.
     */
    public Integer getIndexId() {
        return this.indexId;
    }

    /**
     * Get the dateTime property: Date and time of the current observation displayed in ISO 8601 format, for example,
     * 2019-10-27T19:39:57-08:00.
     *
     * @return the dateTime value.
     */
    public OffsetDateTime getDateTime() {
        return this.dateTime;
    }

    /**
     * Get the value property: Index value. Ranges from 0.0 to 10.0. Please refer to [Weather services in Azure
     * Maps](/azure/azure-maps/weather-services-concepts#daily-index-range-sets) for details and to see the supported
     * ranges.
     *
     * @return the value value.
     */
    public Float getValue() {
        return this.value;
    }

    /**
     * Get the categoryDescription property: Textual description for `categoryValue` corresponding to the level that the
     * index value falls under, for example "Very Good".
     *
     * @return the categoryDescription value.
     */
    public String getCategoryDescription() {
        return this.categoryDescription;
    }

    /**
     * Get the categoryValue property: Level that the index value falls under, represented by an integer. This value can
     * be 1 through 5 and should be used in combination with the `ascending` flag because it can differ among indices.
     * For example, the following values apply for Mosquito Activity: Low=1, Moderate=2, High=3, Very High=4, and
     * Extreme=5.
     *
     * @return the categoryValue value.
     */
    public Integer getCategoryValue() {
        return this.categoryValue;
    }

    /**
     * Get the isAscending property: Describes the direction of the `value` and `categoryValue`. For example, when set
     * to `true`, the poorest index value is 0 and the best index value is 10. When set to `true`, the poorest index
     * value is 10 and the best index value is 0.
     *
     * @return the isAscending value.
     */
    public Boolean isAscending() {
        return this.isAscending;
    }

    /**
     * Get the description property: A textual explanation that can be used for display purposes to summarize the index
     * value and category. For example, when the index value for Flight Delays is very good, the description will be
     * "Conditions are excellent for flying!".
     *
     * @return the description value.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("indexName", this.indexName);
        jsonWriter.writeNumberField("indexId", this.indexId);
        jsonWriter.writeStringField("dateTime",
            this.dateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.dateTime));
        jsonWriter.writeNumberField("value", this.value);
        jsonWriter.writeStringField("category", this.categoryDescription);
        jsonWriter.writeNumberField("categoryValue", this.categoryValue);
        jsonWriter.writeBooleanField("ascending", this.isAscending);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DailyIndex from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DailyIndex if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the DailyIndex.
     */
    public static DailyIndex fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DailyIndex deserializedDailyIndex = new DailyIndex();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("indexName".equals(fieldName)) {
                    deserializedDailyIndex.indexName = reader.getString();
                } else if ("indexId".equals(fieldName)) {
                    deserializedDailyIndex.indexId = reader.getNullable(JsonReader::getInt);
                } else if ("dateTime".equals(fieldName)) {
                    deserializedDailyIndex.dateTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("value".equals(fieldName)) {
                    deserializedDailyIndex.value = reader.getNullable(JsonReader::getFloat);
                } else if ("category".equals(fieldName)) {
                    deserializedDailyIndex.categoryDescription = reader.getString();
                } else if ("categoryValue".equals(fieldName)) {
                    deserializedDailyIndex.categoryValue = reader.getNullable(JsonReader::getInt);
                } else if ("ascending".equals(fieldName)) {
                    deserializedDailyIndex.isAscending = reader.getNullable(JsonReader::getBoolean);
                } else if ("description".equals(fieldName)) {
                    deserializedDailyIndex.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDailyIndex;
        });
    }
}
