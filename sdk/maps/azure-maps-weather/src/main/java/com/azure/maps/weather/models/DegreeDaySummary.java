// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The DegreeDaySummary model.
 */
@Fluent
public final class DegreeDaySummary implements JsonSerializable<DegreeDaySummary> {

    /*
     * Number of degrees that the mean temperature is below 65 degrees F/ 18 degree C.
     */
    private WeatherUnitDetails heating;

    /*
     * Number of degrees that the mean temperature is above 65 degrees F/ 18 degree C.
     */
    private WeatherUnitDetails cooling;

    /**
     * Set default DegreeDaySummary constructor to private
     */
    private DegreeDaySummary() {
    }

    /**
     * Get the heating property: Number of degrees that the mean temperature is below 65 degrees F/ 18 degree C.
     *
     * @return the heating value.
     */
    public WeatherUnitDetails getHeating() {
        return this.heating;
    }

    /**
     * Get the cooling property: Number of degrees that the mean temperature is above 65 degrees F/ 18 degree C.
     *
     * @return the cooling value.
     */
    public WeatherUnitDetails getCooling() {
        return this.cooling;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("heating", this.heating);
        jsonWriter.writeJsonField("cooling", this.cooling);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DegreeDaySummary from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DegreeDaySummary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DegreeDaySummary.
     */
    public static DegreeDaySummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DegreeDaySummary deserializedDegreeDaySummary = new DegreeDaySummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("heating".equals(fieldName)) {
                    deserializedDegreeDaySummary.heating = WeatherUnitDetails.fromJson(reader);
                } else if ("cooling".equals(fieldName)) {
                    deserializedDegreeDaySummary.cooling = WeatherUnitDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDegreeDaySummary;
        });
    }
}
