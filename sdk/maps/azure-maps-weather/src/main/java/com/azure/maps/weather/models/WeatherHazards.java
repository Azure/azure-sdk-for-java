// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.maps.weather.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Description of the weather hazard affecting the trip.
 */
@Fluent
public final class WeatherHazards implements JsonSerializable<WeatherHazards> {

    /*
     * A severity/hazard index.
     *   * `0` - No hazard.
     *   * `1` - Be informed, be aware.
     *   * `2` - Pay attention, be prepared.
     *   * `3` - Take action.
     *   * `4` - Life threatening, emergency.
     */
    private HazardIndex maxHazardIndex;

    /*
     * Details of the weather hazards affecting the trip.
     */
    private List<HazardDetail> details;

    /**
     * Set default WeatherHazards constructor to private
     */
    private WeatherHazards() {
    }

    /**
     * Get the maxHazardIndex property: A severity/hazard index.
     * * `0` - No hazard.
     * * `1` - Be informed, be aware.
     * * `2` - Pay attention, be prepared.
     * * `3` - Take action.
     * * `4` - Life threatening, emergency.
     *
     * @return the maxHazardIndex value.
     */
    public HazardIndex getMaxHazardIndex() {
        return this.maxHazardIndex;
    }

    /**
     * Get the details property: Details of the weather hazards affecting the trip.
     *
     * @return the details value.
     */
    public List<HazardDetail> getDetails() {
        return this.details;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("maxHazardIndex", this.maxHazardIndex == null ? null : this.maxHazardIndex.toInt());
        jsonWriter.writeArrayField("hazardDetails", this.details, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeatherHazards from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeatherHazards if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WeatherHazards.
     */
    public static WeatherHazards fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WeatherHazards deserializedWeatherHazards = new WeatherHazards();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("maxHazardIndex".equals(fieldName)) {
                    deserializedWeatherHazards.maxHazardIndex = HazardIndex.fromInt(reader.getInt());
                } else if ("hazardDetails".equals(fieldName)) {
                    List<HazardDetail> details = reader.readArray(reader1 -> HazardDetail.fromJson(reader1));
                    deserializedWeatherHazards.details = details;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedWeatherHazards;
        });
    }
}
