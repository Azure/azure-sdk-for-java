// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.microsoft.azure.maps.service.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The Waypoint model. */
@Fluent
public final class Waypoint {
    /*
     * Numeric value representing an image that displays the `iconPhrase`.
     * Please refer to [Weather Service
     * Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
     */
    @JsonProperty(value = "iconCode")
    private Integer iconCode;

    /*
     * A displayable short phrase describing the forecasted conditions and
     * precipitation intensity/type.
     */
    @JsonProperty(value = "shortPhrase")
    private String shortPhrase;

    /*
     * Indicates the time of the day. True indicates 'day',', false indicates
     * 'night.
     */
    @JsonProperty(value = "isDayTime")
    private Boolean isDayTime;

    /*
     * Percent representing cloud cover.
     */
    @JsonProperty(value = "cloudCover")
    private Integer cloudCover;

    /*
     * The temperature property.
     */
    @JsonProperty(value = "temperature")
    private WeatherUnit temperature;

    /*
     * Wind details being returned including speed and direction.
     */
    @JsonProperty(value = "wind")
    private Wind wind;

    /*
     * Wind details being returned including speed and direction.
     */
    @JsonProperty(value = "windGust")
    private Wind windGust;

    /*
     * The precipitation property.
     */
    @JsonProperty(value = "precipitation")
    private WeatherAlongRoutePrecipitation precipitation;

    /*
     * Estimation of thunderstorm intensity on an open scale. A value of 0
     * means there is no thunderstorm; values of 1 and higher mean there is a
     * thunderstorm in increasing intensity.
     */
    @JsonProperty(value = "lightningCount")
    private Integer lightningCount;

    /*
     * A rating that indicates how blinding the sun is for the driver.
     */
    @JsonProperty(value = "sunGlare")
    private SunGlare sunGlare;

    /*
     * The hazards property.
     */
    @JsonProperty(value = "hazards")
    private Hazards hazards;

    /*
     * The notifications property.
     */
    @JsonProperty(value = "notifications")
    private List<Notification> notifications;

    /**
     * Get the iconCode property: Numeric value representing an image that displays the `iconPhrase`. Please refer to
     * [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
     *
     * @return the iconCode value.
     */
    public Integer getIconCode() {
        return this.iconCode;
    }

    /**
     * Set the iconCode property: Numeric value representing an image that displays the `iconPhrase`. Please refer to
     * [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
     *
     * @param iconCode the iconCode value to set.
     * @return the Waypoint object itself.
     */
    public Waypoint setIconCode(Integer iconCode) {
        this.iconCode = iconCode;
        return this;
    }

    /**
     * Get the shortPhrase property: A displayable short phrase describing the forecasted conditions and precipitation
     * intensity/type.
     *
     * @return the shortPhrase value.
     */
    public String getShortPhrase() {
        return this.shortPhrase;
    }

    /**
     * Set the shortPhrase property: A displayable short phrase describing the forecasted conditions and precipitation
     * intensity/type.
     *
     * @param shortPhrase the shortPhrase value to set.
     * @return the Waypoint object itself.
     */
    public Waypoint setShortPhrase(String shortPhrase) {
        this.shortPhrase = shortPhrase;
        return this;
    }

    /**
     * Get the isDayTime property: Indicates the time of the day. True indicates 'day',', false indicates 'night.
     *
     * @return the isDayTime value.
     */
    public Boolean isDayTime() {
        return this.isDayTime;
    }

    /**
     * Set the isDayTime property: Indicates the time of the day. True indicates 'day',', false indicates 'night.
     *
     * @param isDayTime the isDayTime value to set.
     * @return the Waypoint object itself.
     */
    public Waypoint setIsDayTime(Boolean isDayTime) {
        this.isDayTime = isDayTime;
        return this;
    }

    /**
     * Get the cloudCover property: Percent representing cloud cover.
     *
     * @return the cloudCover value.
     */
    public Integer getCloudCover() {
        return this.cloudCover;
    }

    /**
     * Set the cloudCover property: Percent representing cloud cover.
     *
     * @param cloudCover the cloudCover value to set.
     * @return the Waypoint object itself.
     */
    public Waypoint setCloudCover(Integer cloudCover) {
        this.cloudCover = cloudCover;
        return this;
    }

    /**
     * Get the temperature property: The temperature property.
     *
     * @return the temperature value.
     */
    public WeatherUnit getTemperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: The temperature property.
     *
     * @param temperature the temperature value to set.
     * @return the Waypoint object itself.
     */
    public Waypoint setTemperature(WeatherUnit temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the wind property: Wind details being returned including speed and direction.
     *
     * @return the wind value.
     */
    public Wind getWind() {
        return this.wind;
    }

    /**
     * Set the wind property: Wind details being returned including speed and direction.
     *
     * @param wind the wind value to set.
     * @return the Waypoint object itself.
     */
    public Waypoint setWind(Wind wind) {
        this.wind = wind;
        return this;
    }

    /**
     * Get the windGust property: Wind details being returned including speed and direction.
     *
     * @return the windGust value.
     */
    public Wind getWindGust() {
        return this.windGust;
    }

    /**
     * Set the windGust property: Wind details being returned including speed and direction.
     *
     * @param windGust the windGust value to set.
     * @return the Waypoint object itself.
     */
    public Waypoint setWindGust(Wind windGust) {
        this.windGust = windGust;
        return this;
    }

    /**
     * Get the precipitation property: The precipitation property.
     *
     * @return the precipitation value.
     */
    public WeatherAlongRoutePrecipitation getPrecipitation() {
        return this.precipitation;
    }

    /**
     * Set the precipitation property: The precipitation property.
     *
     * @param precipitation the precipitation value to set.
     * @return the Waypoint object itself.
     */
    public Waypoint setPrecipitation(WeatherAlongRoutePrecipitation precipitation) {
        this.precipitation = precipitation;
        return this;
    }

    /**
     * Get the lightningCount property: Estimation of thunderstorm intensity on an open scale. A value of 0 means there
     * is no thunderstorm; values of 1 and higher mean there is a thunderstorm in increasing intensity.
     *
     * @return the lightningCount value.
     */
    public Integer getLightningCount() {
        return this.lightningCount;
    }

    /**
     * Set the lightningCount property: Estimation of thunderstorm intensity on an open scale. A value of 0 means there
     * is no thunderstorm; values of 1 and higher mean there is a thunderstorm in increasing intensity.
     *
     * @param lightningCount the lightningCount value to set.
     * @return the Waypoint object itself.
     */
    public Waypoint setLightningCount(Integer lightningCount) {
        this.lightningCount = lightningCount;
        return this;
    }

    /**
     * Get the sunGlare property: A rating that indicates how blinding the sun is for the driver.
     *
     * @return the sunGlare value.
     */
    public SunGlare getSunGlare() {
        return this.sunGlare;
    }

    /**
     * Set the sunGlare property: A rating that indicates how blinding the sun is for the driver.
     *
     * @param sunGlare the sunGlare value to set.
     * @return the Waypoint object itself.
     */
    public Waypoint setSunGlare(SunGlare sunGlare) {
        this.sunGlare = sunGlare;
        return this;
    }

    /**
     * Get the hazards property: The hazards property.
     *
     * @return the hazards value.
     */
    public Hazards getHazards() {
        return this.hazards;
    }

    /**
     * Set the hazards property: The hazards property.
     *
     * @param hazards the hazards value to set.
     * @return the Waypoint object itself.
     */
    public Waypoint setHazards(Hazards hazards) {
        this.hazards = hazards;
        return this;
    }

    /**
     * Get the notifications property: The notifications property.
     *
     * @return the notifications value.
     */
    public List<Notification> getNotifications() {
        return this.notifications;
    }

    /**
     * Set the notifications property: The notifications property.
     *
     * @param notifications the notifications value to set.
     * @return the Waypoint object itself.
     */
    public Waypoint setNotifications(List<Notification> notifications) {
        this.notifications = notifications;
        return this;
    }
}
