// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.microsoft.azure.maps.service;

import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.microsoft.azure.maps.service.models.ErrorResponseException;
import com.microsoft.azure.maps.service.models.LongRunningOperationResult;
import com.microsoft.azure.maps.service.models.TilesetListResponse;
import com.microsoft.azure.maps.service.models.TilesetsCreatePreviewResponse;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Tilesets. */
public final class Tilesets {
    /** The proxy service used to perform REST calls. */
    private final TilesetsService service;

    /** The service client containing this operation class. */
    private final MapsClient client;

    /**
     * Initializes an instance of Tilesets.
     *
     * @param client the instance of the service client containing this operation class.
     */
    Tilesets(MapsClient client) {
        this.service = RestProxy.create(TilesetsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MapsClientTilesets to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MapsClientTilesets")
    private interface TilesetsService {
        @Post("/tileset/create/vector")
        @ExpectedResponses({201, 201, 202})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<TilesetsCreatePreviewResponse> createPreview(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("datasetId") String datasetId,
                @QueryParam("description") String description,
                @HeaderParam("Accept") String accept);

        @Get("/tileset")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<TilesetListResponse>> listPreview(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept);

        @Delete("/tileset/{tilesetId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Object>> deletePreview(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @PathParam("tilesetId") String tilesetId,
                @HeaderParam("Accept") String accept);
    }

    /**
     * **Tileset Create API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Tileset API is part of Creator.
     *
     * <p>The Tileset Create API allows the caller to create a tileset from a dataset. A tileset contains a set of tiles
     * that can be consumed from the [Get Map Tile](/rest/api/maps/render/getmaptile) to retrieve custom tiles. To make
     * a dataset, use the [DataSet Create API](/rest/api/maps/dataset/createpreview).
     *
     * <p>## Submit Create Request
     *
     * <p>To create your tileset you will make a `POST` request with an empty body. The `datasetId` query parameter will
     * be used as the source of the tileset data.
     *
     * <p>The Create Tileset API is a [long-running request](https://aka.ms/am-creator-lrt).
     *
     * @param datasetId The unique `datasetId` that the tileset create API uses to retrieve features to generate tiles.
     *     The `datasetId` must have been obtained from a successful [Dataset Create
     *     API](/en-us/rest/api/maps/dataset/createpreview) call.
     * @param description User provided description of the tileset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TilesetsCreatePreviewResponse> createPreviewWithResponseAsync(String datasetId, String description) {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        return service.createPreview(
                this.client.getHost(),
                this.client.getXMsClientId(),
                this.client.getSubscriptionKey(),
                apiVersion,
                datasetId,
                description,
                accept);
    }

    /**
     * **Tileset Create API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Tileset API is part of Creator.
     *
     * <p>The Tileset Create API allows the caller to create a tileset from a dataset. A tileset contains a set of tiles
     * that can be consumed from the [Get Map Tile](/rest/api/maps/render/getmaptile) to retrieve custom tiles. To make
     * a dataset, use the [DataSet Create API](/rest/api/maps/dataset/createpreview).
     *
     * <p>## Submit Create Request
     *
     * <p>To create your tileset you will make a `POST` request with an empty body. The `datasetId` query parameter will
     * be used as the source of the tileset data.
     *
     * <p>The Create Tileset API is a [long-running request](https://aka.ms/am-creator-lrt).
     *
     * @param datasetId The unique `datasetId` that the tileset create API uses to retrieve features to generate tiles.
     *     The `datasetId` must have been obtained from a successful [Dataset Create
     *     API](/en-us/rest/api/maps/dataset/createpreview) call.
     * @param description User provided description of the tileset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LongRunningOperationResult> createPreviewAsync(String datasetId, String description) {
        return createPreviewWithResponseAsync(datasetId, description)
                .flatMap(
                        (TilesetsCreatePreviewResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Tileset List API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Tileset API is part of Creator. This API allows the caller to fetch a list of all tilesets created.
     * &lt;br&gt;.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Tileset List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TilesetListResponse>> listPreviewWithResponseAsync() {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        return service.listPreview(
                this.client.getHost(),
                this.client.getXMsClientId(),
                this.client.getSubscriptionKey(),
                apiVersion,
                accept);
    }

    /**
     * **Tileset List API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Tileset API is part of Creator. This API allows the caller to fetch a list of all tilesets created.
     * &lt;br&gt;.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Tileset List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TilesetListResponse> listPreviewAsync() {
        return listPreviewWithResponseAsync()
                .flatMap(
                        (Response<TilesetListResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Tileset Delete API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Tileset API is part of Creator. This API allows the caller to delete a created tileset.&lt;br&gt;
     * You can use this API if a tileset is no longer needed.
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your content you will issue a `DELETE` request where the path will contain the `tilesetId` of the
     * tileset to delete.&lt;br&gt;
     *
     * <p>#### Delete request "Successful"
     *
     * <p>The Tileset Delete API returns a HTTP `204 No Content` response with an empty body, if the tileset was deleted
     * successfully.&lt;br&gt;
     *
     * <p>#### Delete request "Failed"
     *
     * <p>A HTTP `400 Bad Request` error response will be returned if the tileset with the passed-in `tilesetId` is not
     * found.
     *
     * <p>Here is a sample error response:
     *
     * <p>&lt;br&gt;
     *
     * <p>```json { "error": { "code": "400 BadRequest", "message": "Bad request - Tileset Id:
     * d85b5b27-5fc4-4599-8b50-47160e90f8ce does not exist." } } ```.
     *
     * @param tilesetId The Tileset Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Object>> deletePreviewWithResponseAsync(String tilesetId) {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        return service.deletePreview(
                this.client.getHost(),
                this.client.getXMsClientId(),
                this.client.getSubscriptionKey(),
                apiVersion,
                tilesetId,
                accept);
    }

    /**
     * **Tileset Delete API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Tileset API is part of Creator. This API allows the caller to delete a created tileset.&lt;br&gt;
     * You can use this API if a tileset is no longer needed.
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your content you will issue a `DELETE` request where the path will contain the `tilesetId` of the
     * tileset to delete.&lt;br&gt;
     *
     * <p>#### Delete request "Successful"
     *
     * <p>The Tileset Delete API returns a HTTP `204 No Content` response with an empty body, if the tileset was deleted
     * successfully.&lt;br&gt;
     *
     * <p>#### Delete request "Failed"
     *
     * <p>A HTTP `400 Bad Request` error response will be returned if the tileset with the passed-in `tilesetId` is not
     * found.
     *
     * <p>Here is a sample error response:
     *
     * <p>&lt;br&gt;
     *
     * <p>```json { "error": { "code": "400 BadRequest", "message": "Bad request - Tileset Id:
     * d85b5b27-5fc4-4599-8b50-47160e90f8ce does not exist." } } ```.
     *
     * @param tilesetId The Tileset Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Object> deletePreviewAsync(String tilesetId) {
        return deletePreviewWithResponseAsync(tilesetId)
                .flatMap(
                        (Response<Object> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }
}
