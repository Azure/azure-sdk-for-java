// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.microsoft.azure.maps.service;

import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.microsoft.azure.maps.service.models.DatasetListResponse;
import com.microsoft.azure.maps.service.models.DatasetType;
import com.microsoft.azure.maps.service.models.DatasetsCreatePreviewResponse;
import com.microsoft.azure.maps.service.models.DatasetsImportPreviewResponse;
import com.microsoft.azure.maps.service.models.ErrorResponseException;
import com.microsoft.azure.maps.service.models.ImportDataType;
import com.microsoft.azure.maps.service.models.LongRunningOperationResult;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Datasets. */
public final class Datasets {
    /** The proxy service used to perform REST calls. */
    private final DatasetsService service;

    /** The service client containing this operation class. */
    private final MapsClient client;

    /**
     * Initializes an instance of Datasets.
     *
     * @param client the instance of the service client containing this operation class.
     */
    Datasets(MapsClient client) {
        this.service = RestProxy.create(DatasetsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MapsClientDatasets to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MapsClientDatasets")
    private interface DatasetsService {
        @Post("/dataset/create")
        @ExpectedResponses({201, 201, 202})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<DatasetsCreatePreviewResponse> createPreview(
                @HostParam("$host") String host,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("conversionId") String conversionId,
                @QueryParam("udid") String udid,
                @QueryParam("type") DatasetType type,
                @QueryParam("datasetId") String datasetId,
                @QueryParam("description") String description,
                @HeaderParam("Accept") String accept);

        @Patch("/dataset/import/{datasetId}")
        @ExpectedResponses({200, 200, 202})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<DatasetsImportPreviewResponse> importPreview(
                @HostParam("$host") String host,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @PathParam("datasetId") String datasetId,
                @QueryParam("udid") String udid,
                @QueryParam("type") ImportDataType type,
                @HeaderParam("Accept") String accept);

        @Delete("/dataset/{datasetId}")
        @ExpectedResponses({204, 204})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Object>> deletePreview(
                @HostParam("$host") String host,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @PathParam("datasetId") String datasetId,
                @HeaderParam("Accept") String accept);

        @Get("/dataset")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<DatasetListResponse>> listPreview(
                @HostParam("$host") String host,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept);
    }

    /**
     * **Dataset Create API**
     *
     * <p>**Applies to:** S1 pricing tier.
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Dataset APIs are part of Creator. This API allows the caller to create a dataset from data that was
     * uploaded to the Azure Maps Data Service.
     *
     * <p>You can use this API in a scenario like uploading a DWG zip package for a building, converting the zip package
     * using the Azure Maps Conversion Service, creating a dataset from the converted zip package. The created dataset
     * can be used to create tilesets using the Azure Maps Tileset Service and can be queried via the Azure Maps WFS
     * Service.
     *
     * <p>## Submit Create Request
     *
     * <p>To create your dataset, you will use a `POST` request where the `conversionId` query parameter is an id that
     * represents the converted DWG zip package, the `type` parameter will describe the data type to use for the
     * dataset, the `datasetId` parameter will describe if the provided data should be appended to a current dataset
     * and, optionally, the `description` query parameter will contain a description (if description is not provided a
     * default description will be given).
     *
     * <p>The Create API is a [long-running request](https://aka.ms/am-creator-lrt).
     *
     * @param type The type of data to create the dataset with.
     * @param conversionId The unique ID used to create the dataset. The `conversionId` must have been obtained from a
     *     successful call to the Conversion Service Convert API and must be provided with multiple query parameters
     *     with same name (if more than one is provided). May not be provided in conjunction with the `udid` query
     *     parameter.
     * @param udid The unique data ID used to create the dataset. The `udid` must have been obtained from a successful
     *     call to the Data Service Upload API and must be provided with multiple query parameters with the same name
     *     (if more than one is provided). May not be provided in conjunction with `conversionId` query parameter.
     * @param datasetId The ID for the dataset to append to.
     * @param description The description to be given to the dataset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DatasetsCreatePreviewResponse> createPreviewWithResponseAsync(
            DatasetType type, String conversionId, String udid, String datasetId, String description) {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        return service.createPreview(
                this.client.getHost(),
                this.client.getSubscriptionKey(),
                apiVersion,
                conversionId,
                udid,
                type,
                datasetId,
                description,
                accept);
    }

    /**
     * **Dataset Create API**
     *
     * <p>**Applies to:** S1 pricing tier.
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Dataset APIs are part of Creator. This API allows the caller to create a dataset from data that was
     * uploaded to the Azure Maps Data Service.
     *
     * <p>You can use this API in a scenario like uploading a DWG zip package for a building, converting the zip package
     * using the Azure Maps Conversion Service, creating a dataset from the converted zip package. The created dataset
     * can be used to create tilesets using the Azure Maps Tileset Service and can be queried via the Azure Maps WFS
     * Service.
     *
     * <p>## Submit Create Request
     *
     * <p>To create your dataset, you will use a `POST` request where the `conversionId` query parameter is an id that
     * represents the converted DWG zip package, the `type` parameter will describe the data type to use for the
     * dataset, the `datasetId` parameter will describe if the provided data should be appended to a current dataset
     * and, optionally, the `description` query parameter will contain a description (if description is not provided a
     * default description will be given).
     *
     * <p>The Create API is a [long-running request](https://aka.ms/am-creator-lrt).
     *
     * @param type The type of data to create the dataset with.
     * @param conversionId The unique ID used to create the dataset. The `conversionId` must have been obtained from a
     *     successful call to the Conversion Service Convert API and must be provided with multiple query parameters
     *     with same name (if more than one is provided). May not be provided in conjunction with the `udid` query
     *     parameter.
     * @param udid The unique data ID used to create the dataset. The `udid` must have been obtained from a successful
     *     call to the Data Service Upload API and must be provided with multiple query parameters with the same name
     *     (if more than one is provided). May not be provided in conjunction with `conversionId` query parameter.
     * @param datasetId The ID for the dataset to append to.
     * @param description The description to be given to the dataset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LongRunningOperationResult> createPreviewAsync(
            DatasetType type, String conversionId, String udid, String datasetId, String description) {
        return createPreviewWithResponseAsync(type, conversionId, udid, datasetId, description)
                .flatMap(
                        (DatasetsCreatePreviewResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Dataset Import API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Dataset APIs are part of Creator. This API allows the caller to bulk import data into a dataset from
     * data that was uploaded to the Azure Maps Data service.&lt;br&gt;
     *
     * <p>### Submit Import Request
     *
     * <p>To import data into your dataset, you will use a `PATCH` request where the `datasetId` query parameter is the
     * dataset you want to import your data into, the `udid` query parameter is the data you want to import, and the
     * `type` parameter will describe the data type to use for the import data.&lt;br&gt;
     *
     * <p>The Import API is a [long-running request](https://aka.ms/am-creator-lrt).
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param type The type of data to import into the dataset with.
     * @param udid The unique data ID used to import data into the dataset. The `udid` must have been obtained from a
     *     successful call to the Data Service Upload API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DatasetsImportPreviewResponse> importPreviewWithResponseAsync(
            String datasetId, ImportDataType type, String udid) {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        return service.importPreview(
                this.client.getHost(), this.client.getSubscriptionKey(), apiVersion, datasetId, udid, type, accept);
    }

    /**
     * **Dataset Import API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Dataset APIs are part of Creator. This API allows the caller to bulk import data into a dataset from
     * data that was uploaded to the Azure Maps Data service.&lt;br&gt;
     *
     * <p>### Submit Import Request
     *
     * <p>To import data into your dataset, you will use a `PATCH` request where the `datasetId` query parameter is the
     * dataset you want to import your data into, the `udid` query parameter is the data you want to import, and the
     * `type` parameter will describe the data type to use for the import data.&lt;br&gt;
     *
     * <p>The Import API is a [long-running request](https://aka.ms/am-creator-lrt).
     *
     * @param datasetId The identifier for the dataset to query from.
     * @param type The type of data to import into the dataset with.
     * @param udid The unique data ID used to import data into the dataset. The `udid` must have been obtained from a
     *     successful call to the Data Service Upload API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LongRunningOperationResult> importPreviewAsync(String datasetId, ImportDataType type, String udid) {
        return importPreviewWithResponseAsync(datasetId, type, udid)
                .flatMap(
                        (DatasetsImportPreviewResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Dataset Delete API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Dataset APIs are part of Creator. This API allows the caller to delete a previously created
     * dataset.&lt;br&gt; You can also use this API to delete old/unused datasets to create space for new Creator
     * content.
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your content you will issue a `DELETE` request where the path will contain the `datasetId` of the
     * dataset to delete.&lt;br&gt;
     *
     * <p>### Delete Data Response
     *
     * <p>The Delete API returns a HTTP `204 No Content` response if the dataset resource was deleted
     * successfully.&lt;br&gt;.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Object>> deletePreviewWithResponseAsync(String datasetId) {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        return service.deletePreview(
                this.client.getHost(), this.client.getSubscriptionKey(), apiVersion, datasetId, accept);
    }

    /**
     * **Dataset Delete API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Dataset APIs are part of Creator. This API allows the caller to delete a previously created
     * dataset.&lt;br&gt; You can also use this API to delete old/unused datasets to create space for new Creator
     * content.
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your content you will issue a `DELETE` request where the path will contain the `datasetId` of the
     * dataset to delete.&lt;br&gt;
     *
     * <p>### Delete Data Response
     *
     * <p>The Delete API returns a HTTP `204 No Content` response if the dataset resource was deleted
     * successfully.&lt;br&gt;.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Object> deletePreviewAsync(String datasetId) {
        return deletePreviewWithResponseAsync(datasetId)
                .flatMap(
                        (Response<Object> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Dataset List API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Dataset APIs are part of Creator. This API allows the caller to fetch a list of all previously
     * successfully created datasets.
     *
     * <p>### Submit List Request
     *
     * <p>To list all your datasets, you will issue a `GET` request with no additional parameters.&lt;br&gt;
     *
     * <p>### List Data Response
     *
     * <p>The List API returns the complete list of all datasets in `json` format. The response contains the following
     * fields (if they are not null or empty): &gt; created - The timestamp the dataset was created. &gt; datasetId -
     * The id for the dataset. &gt; description - The description for the dataset. &gt; datasetSources - The source data
     * that was used when the create request was issued.
     *
     * <p>The `datasetSources` describes the source data that was used when the create request was issued and contains
     * the following elements (if they are not null or empty): &gt; conversionIds - The list of `conversionId` (null if
     * none were provided). &gt; udids - The list of `udid` (null if none were provided). &gt; appendDatasetId - The
     * `datasetId` that was used for an append operation (null if none was used). &gt; type - The type of data stored in
     * the dataset that was created.
     *
     * <p>Here's a sample response returning the `timestamp`, `datasetId`, `description`, and `datasetSources` of 3
     * dataset resources:
     *
     * <p>&lt;br&gt;
     *
     * <p>```json { "datasets": [ { "timestamp": "2020-01-01T22:50:48+00:00", "datasetId":
     * "f6495f62-94f8-0ec2-c252-45626f82fcb2", "description": "Some description or comment for the dataset.",
     * "datasetSources": { "conversionIds": [ "15d21452-c9bb-27b6-5e79-743ca5c3205d" ], "type": "facility" }, "status":
     * "Succeeded" }, { "timestamp": "2020-01-01T22:57:53+00:00", "datasetId": "8b1288fa-1958-4a2b-b68e-13a7i5af7d7c",
     * "description": "Create from upload '0c1288fa-2058-4a1b-b68d-13a5f5af7d7c'.", "datasetSources": { "udids": [
     * "0c1288fa-2058-4a1b-b68d-13a5f5af7d7c" ], "type": "facility" }, "status": "Succeeded" }, { "timestamp":
     * "2020-01-01T20:39:36+00:00", "datasetId": "7c1288fa-2058-4a1b-b68f-13a6h5af7d7c", "description": "Some other
     * description or comment for the dataset.", "datasetSources": { "conversionIds": [
     * "15d21452-c9bb-27b6-5e79-743ca5c3205d" ], "appendDatasetId": "8b1288fa-1958-4a2b-b68e-13a7i5af7d7c", "type":
     * "facility" }, "status": "Succeeded" } ] } ``` &lt;br&gt;.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Dataset List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DatasetListResponse>> listPreviewWithResponseAsync() {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        return service.listPreview(this.client.getHost(), this.client.getSubscriptionKey(), apiVersion, accept);
    }

    /**
     * **Dataset List API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Dataset APIs are part of Creator. This API allows the caller to fetch a list of all previously
     * successfully created datasets.
     *
     * <p>### Submit List Request
     *
     * <p>To list all your datasets, you will issue a `GET` request with no additional parameters.&lt;br&gt;
     *
     * <p>### List Data Response
     *
     * <p>The List API returns the complete list of all datasets in `json` format. The response contains the following
     * fields (if they are not null or empty): &gt; created - The timestamp the dataset was created. &gt; datasetId -
     * The id for the dataset. &gt; description - The description for the dataset. &gt; datasetSources - The source data
     * that was used when the create request was issued.
     *
     * <p>The `datasetSources` describes the source data that was used when the create request was issued and contains
     * the following elements (if they are not null or empty): &gt; conversionIds - The list of `conversionId` (null if
     * none were provided). &gt; udids - The list of `udid` (null if none were provided). &gt; appendDatasetId - The
     * `datasetId` that was used for an append operation (null if none was used). &gt; type - The type of data stored in
     * the dataset that was created.
     *
     * <p>Here's a sample response returning the `timestamp`, `datasetId`, `description`, and `datasetSources` of 3
     * dataset resources:
     *
     * <p>&lt;br&gt;
     *
     * <p>```json { "datasets": [ { "timestamp": "2020-01-01T22:50:48+00:00", "datasetId":
     * "f6495f62-94f8-0ec2-c252-45626f82fcb2", "description": "Some description or comment for the dataset.",
     * "datasetSources": { "conversionIds": [ "15d21452-c9bb-27b6-5e79-743ca5c3205d" ], "type": "facility" }, "status":
     * "Succeeded" }, { "timestamp": "2020-01-01T22:57:53+00:00", "datasetId": "8b1288fa-1958-4a2b-b68e-13a7i5af7d7c",
     * "description": "Create from upload '0c1288fa-2058-4a1b-b68d-13a5f5af7d7c'.", "datasetSources": { "udids": [
     * "0c1288fa-2058-4a1b-b68d-13a5f5af7d7c" ], "type": "facility" }, "status": "Succeeded" }, { "timestamp":
     * "2020-01-01T20:39:36+00:00", "datasetId": "7c1288fa-2058-4a1b-b68f-13a6h5af7d7c", "description": "Some other
     * description or comment for the dataset.", "datasetSources": { "conversionIds": [
     * "15d21452-c9bb-27b6-5e79-743ca5c3205d" ], "appendDatasetId": "8b1288fa-1958-4a2b-b68e-13a7i5af7d7c", "type":
     * "facility" }, "status": "Succeeded" } ] } ``` &lt;br&gt;.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Dataset List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DatasetListResponse> listPreviewAsync() {
        return listPreviewWithResponseAsync()
                .flatMap(
                        (Response<DatasetListResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }
}
