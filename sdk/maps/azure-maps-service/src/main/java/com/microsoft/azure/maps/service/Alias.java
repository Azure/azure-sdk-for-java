// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.microsoft.azure.maps.service;

import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.microsoft.azure.maps.service.models.AliasCreatePreviewResponse;
import com.microsoft.azure.maps.service.models.AliasCreateResponse;
import com.microsoft.azure.maps.service.models.AliasListResponse;
import com.microsoft.azure.maps.service.models.ErrorResponseException;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Alias. */
public final class Alias {
    /** The proxy service used to perform REST calls. */
    private final AliasService service;

    /** The service client containing this operation class. */
    private final MapsClient client;

    /**
     * Initializes an instance of Alias.
     *
     * @param client the instance of the service client containing this operation class.
     */
    Alias(MapsClient client) {
        this.service = RestProxy.create(AliasService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MapsClientAlias to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MapsClientAlias")
    private interface AliasService {
        @Post("/alias")
        @ExpectedResponses({201, 201})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<AliasCreatePreviewResponse> createPreview(
                @HostParam("$host") String host,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept);

        @Get("/alias")
        @ExpectedResponses({200, 200})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<AliasListResponse>> listPreview(
                @HostParam("$host") String host,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept);

        @Patch("/alias/assign/{aliasId}")
        @ExpectedResponses({204, 204})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Object>> assignPreview(
                @HostParam("$host") String host,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @PathParam("aliasId") String aliasId,
                @QueryParam("resourceId") String resourceId,
                @HeaderParam("Accept") String accept);

        @Delete("/alias/{aliasId}")
        @ExpectedResponses({204, 204})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Object>> deletePreview(
                @HostParam("$host") String host,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @PathParam("aliasId") String aliasId,
                @HeaderParam("Accept") String accept);
    }

    /**
     * **Alias - Create API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>This API allows the caller to create an alias.&lt;br&gt; You can also assign the alias during the create
     * request as well.
     *
     * <p>### Submit Create Request
     *
     * <p>To create your alias, you will use a `POST` request. If you would like to assign the alias during the
     * creation, you will pass the `resourceId` query parameter.&lt;br&gt;
     *
     * <p>### Create Alias Response
     *
     * <p>The Create API returns a HTTP `201 Created` response the id of the alias, `aliasId`, in the body. The response
     * will look something like:
     *
     * <p>```json { "aliasId" : "d7e5efc8-2239-4387-a286-5bb51aa804e3" } ```
     *
     * <p>&lt;br&gt;.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Alias Create API for the case when the alias was successfully created.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AliasCreatePreviewResponse> createPreviewWithResponseAsync() {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        return service.createPreview(this.client.getHost(), this.client.getSubscriptionKey(), apiVersion, accept);
    }

    /**
     * **Alias - Create API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>This API allows the caller to create an alias.&lt;br&gt; You can also assign the alias during the create
     * request as well.
     *
     * <p>### Submit Create Request
     *
     * <p>To create your alias, you will use a `POST` request. If you would like to assign the alias during the
     * creation, you will pass the `resourceId` query parameter.&lt;br&gt;
     *
     * <p>### Create Alias Response
     *
     * <p>The Create API returns a HTTP `201 Created` response the id of the alias, `aliasId`, in the body. The response
     * will look something like:
     *
     * <p>```json { "aliasId" : "d7e5efc8-2239-4387-a286-5bb51aa804e3" } ```
     *
     * <p>&lt;br&gt;.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Alias Create API for the case when the alias was successfully created.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AliasCreateResponse> createPreviewAsync() {
        return createPreviewWithResponseAsync()
                .flatMap(
                        (AliasCreatePreviewResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Alias - List API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>This API allows the caller to fetch a list of all previously successfully created aliases.
     *
     * <p>### Submit List Request
     *
     * <p>To list all your aliases, you will issue a `GET` request with no additional parameters.&lt;br&gt;
     *
     * <p>### List Data Response
     *
     * <p>The List API returns the complete list of all aliases in `json` format. The response contains the following
     * details for each alias resource:
     *
     * <p>&gt; createdTimestamp - The timestamp that the alias was created. &gt; aliasId - The id for the alias. &gt;
     * resourceId - The id for the resource that this alias references (could be null if the alias has not been
     * assigned). &gt; lastUpdatedTimestamp - The last time the alias was assigned to a resource.
     *
     * <p>Here's a sample response returning 2 alias resources:
     *
     * <p>&lt;br&gt;
     *
     * <p>```json { "aliases": [ { "createdTimestamp": "2020-02-13T21:19:11+00:00", "aliasId":
     * "a8a4b8bb-ecf4-fb27-a618-f41721552766", "resourceId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
     * "lastUpdatedTimestamp": "2020-02-13T21:19:22+00:00" }, { "createdTimestamp": "2020-02-18T19:53:33+00:00",
     * "aliasId": "1856dbfc-7a66-ee5a-bf8d-51dbfe1906f6", "resourceId": null, "lastUpdatedTimestamp":
     * "2020-02-18T19:53:33+00:00" } ] } ```
     *
     * <p>&lt;br&gt;.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AliasListResponse>> listPreviewWithResponseAsync() {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        return service.listPreview(this.client.getHost(), this.client.getSubscriptionKey(), apiVersion, accept);
    }

    /**
     * **Alias - List API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>This API allows the caller to fetch a list of all previously successfully created aliases.
     *
     * <p>### Submit List Request
     *
     * <p>To list all your aliases, you will issue a `GET` request with no additional parameters.&lt;br&gt;
     *
     * <p>### List Data Response
     *
     * <p>The List API returns the complete list of all aliases in `json` format. The response contains the following
     * details for each alias resource:
     *
     * <p>&gt; createdTimestamp - The timestamp that the alias was created. &gt; aliasId - The id for the alias. &gt;
     * resourceId - The id for the resource that this alias references (could be null if the alias has not been
     * assigned). &gt; lastUpdatedTimestamp - The last time the alias was assigned to a resource.
     *
     * <p>Here's a sample response returning 2 alias resources:
     *
     * <p>&lt;br&gt;
     *
     * <p>```json { "aliases": [ { "createdTimestamp": "2020-02-13T21:19:11+00:00", "aliasId":
     * "a8a4b8bb-ecf4-fb27-a618-f41721552766", "resourceId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
     * "lastUpdatedTimestamp": "2020-02-13T21:19:22+00:00" }, { "createdTimestamp": "2020-02-18T19:53:33+00:00",
     * "aliasId": "1856dbfc-7a66-ee5a-bf8d-51dbfe1906f6", "resourceId": null, "lastUpdatedTimestamp":
     * "2020-02-18T19:53:33+00:00" } ] } ```
     *
     * <p>&lt;br&gt;.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AliasListResponse> listPreviewAsync() {
        return listPreviewWithResponseAsync()
                .flatMap(
                        (Response<AliasListResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Alias - Assign API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>This API allows the caller to assign an alias to reference a resource.&lt;br&gt;
     *
     * <p>### Submit Assign Request
     *
     * <p>To assign your alias to a resource, you will use a `PATCH` request with the `aliasId` in the path and the
     * `resourceId` passed as a query parameter.&lt;br&gt;
     *
     * <p>### Create Alias Response
     *
     * <p>The Assign API returns a HTTP `204 No Content` response with an empty body, if the alias was assigned
     * successfully.&lt;br&gt;.
     *
     * @param aliasId The unique id that references an existing alias.
     * @param resourceId The unique id that references a resource to be aliased.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Object>> assignPreviewWithResponseAsync(String aliasId, String resourceId) {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        return service.assignPreview(
                this.client.getHost(), this.client.getSubscriptionKey(), apiVersion, aliasId, resourceId, accept);
    }

    /**
     * **Alias - Assign API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>This API allows the caller to assign an alias to reference a resource.&lt;br&gt;
     *
     * <p>### Submit Assign Request
     *
     * <p>To assign your alias to a resource, you will use a `PATCH` request with the `aliasId` in the path and the
     * `resourceId` passed as a query parameter.&lt;br&gt;
     *
     * <p>### Create Alias Response
     *
     * <p>The Assign API returns a HTTP `204 No Content` response with an empty body, if the alias was assigned
     * successfully.&lt;br&gt;.
     *
     * @param aliasId The unique id that references an existing alias.
     * @param resourceId The unique id that references a resource to be aliased.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Object> assignPreviewAsync(String aliasId, String resourceId) {
        return assignPreviewWithResponseAsync(aliasId, resourceId)
                .flatMap(
                        (Response<Object> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Alias - Delete API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>This API allows the caller to delete a previously created alias.&lt;br&gt; You can also use this API to delete
     * old/unused aliases to create space for new content. This API does not delete the references resource, only the
     * alias referencing the resource.
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your alias you will issue a `DELETE` request where the path will contain the `aliasId` of the alias
     * to delete.&lt;br&gt;
     *
     * <p>### Delete Alias Response
     *
     * <p>The Delete API returns a HTTP `204 No Content` response with an empty body, if the alias was deleted
     * successfully.&lt;br&gt; A HTTP `400 Bad Request` error response will be returned if the alias with the passed-in
     * `aliasId` is not found.
     *
     * @param aliasId The unique id that references an existing alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Object>> deletePreviewWithResponseAsync(String aliasId) {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        return service.deletePreview(
                this.client.getHost(), this.client.getSubscriptionKey(), apiVersion, aliasId, accept);
    }

    /**
     * **Alias - Delete API**
     *
     * <p>**Applies to:** S1 pricing tier. &lt;br&gt;
     *
     * <p>This API allows the caller to delete a previously created alias.&lt;br&gt; You can also use this API to delete
     * old/unused aliases to create space for new content. This API does not delete the references resource, only the
     * alias referencing the resource.
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your alias you will issue a `DELETE` request where the path will contain the `aliasId` of the alias
     * to delete.&lt;br&gt;
     *
     * <p>### Delete Alias Response
     *
     * <p>The Delete API returns a HTTP `204 No Content` response with an empty body, if the alias was deleted
     * successfully.&lt;br&gt; A HTTP `400 Bad Request` error response will be returned if the alias with the passed-in
     * `aliasId` is not found.
     *
     * @param aliasId The unique id that references an existing alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Object> deletePreviewAsync(String aliasId) {
        return deletePreviewWithResponseAsync(aliasId)
                .flatMap(
                        (Response<Object> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }
}
