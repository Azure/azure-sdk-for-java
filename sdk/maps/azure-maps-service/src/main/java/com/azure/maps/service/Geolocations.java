// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.service;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.maps.service.models.ErrorResponseException;
import com.azure.maps.service.models.Geography;
import com.azure.maps.service.models.IpAddressToLocationResult;
import com.azure.maps.service.models.ResponseFormat;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Geolocations. */
public final class Geolocations {
    /** The proxy service used to perform REST calls. */
    private final GeolocationsService service;

    /** The service client containing this operation class. */
    private final MapsClient client;

    /**
     * Initializes an instance of Geolocations.
     *
     * @param client the instance of the service client containing this operation class.
     */
    Geolocations(MapsClient client) {
        this.service =
                RestProxy.create(GeolocationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MapsClientGeolocations to be used by the proxy service to perform
     * REST calls.
     */
    @Host("https://{geography}.atlas.microsoft.com")
    @ServiceInterface(name = "MapsClientGeolocatio")
    private interface GeolocationsService {
        @Get("/geolocation/ip/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<IpAddressToLocationResult>> getIPToLocationPreview(
                @HostParam("geography") Geography geography,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") ResponseFormat format,
                @QueryParam("ip") String ip,
                @HeaderParam("Accept") String accept);
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service will return the ISO country code for the provided IP address. Developers can use this information
     * to block or alter certain content based on geographical locations where the application is being viewed from.
     *
     * <p>__Note:__ This service returns results from IANA and does not necessarily reflect the views of Microsoft
     * Corporation.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param ip The IP address. Both IPv4 and IPv6 are allowed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful call to IP Address to country/region API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<IpAddressToLocationResult>> getIPToLocationPreviewWithResponseAsync(
            ResponseFormat format, String ip) {
        final String apiVersion = "1.0";
        final String accept = "application/json";
        return service.getIPToLocationPreview(
                this.client.getGeography(), this.client.getXMsClientId(), apiVersion, format, ip, accept);
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service will return the ISO country code for the provided IP address. Developers can use this information
     * to block or alter certain content based on geographical locations where the application is being viewed from.
     *
     * <p>__Note:__ This service returns results from IANA and does not necessarily reflect the views of Microsoft
     * Corporation.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param ip The IP address. Both IPv4 and IPv6 are allowed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful call to IP Address to country/region API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IpAddressToLocationResult> getIPToLocationPreviewAsync(ResponseFormat format, String ip) {
        return getIPToLocationPreviewWithResponseAsync(format, ip)
                .flatMap(
                        (Response<IpAddressToLocationResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Applies to**: S0 and S1 pricing tiers.
     *
     * <p>This service will return the ISO country code for the provided IP address. Developers can use this information
     * to block or alter certain content based on geographical locations where the application is being viewed from.
     *
     * <p>__Note:__ This service returns results from IANA and does not necessarily reflect the views of Microsoft
     * Corporation.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param ip The IP address. Both IPv4 and IPv6 are allowed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful call to IP Address to country/region API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IpAddressToLocationResult getIPToLocationPreview(ResponseFormat format, String ip) {
        return getIPToLocationPreviewAsync(format, ip).block();
    }
}
