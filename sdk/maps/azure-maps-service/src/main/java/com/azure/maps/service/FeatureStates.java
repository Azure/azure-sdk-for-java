// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.service;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.maps.service.models.ErrorResponseException;
import com.azure.maps.service.models.FeatureStatesStructure;
import com.azure.maps.service.models.Geography;
import com.azure.maps.service.models.StatesetCreatedResponse;
import com.azure.maps.service.models.StatesetGetResponse;
import com.azure.maps.service.models.StatesetInfoObject;
import com.azure.maps.service.models.StatesetListResponse;
import com.azure.maps.service.models.StylesObject;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in FeatureStates. */
public final class FeatureStates {
    /** The proxy service used to perform REST calls. */
    private final FeatureStatesService service;

    /** The service client containing this operation class. */
    private final MapsClient client;

    /**
     * Initializes an instance of FeatureStates.
     *
     * @param client the instance of the service client containing this operation class.
     */
    FeatureStates(MapsClient client) {
        this.service =
                RestProxy.create(FeatureStatesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MapsClientFeatureStates to be used by the proxy service to perform
     * REST calls.
     */
    @Host("https://{geography}.atlas.microsoft.com")
    @ServiceInterface(name = "MapsClientFeatureSta")
    private interface FeatureStatesService {
        @Post("/featureStateSets")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<StatesetCreatedResponse>> createStateset(
                @HostParam("geography") Geography geography,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("datasetId") String datasetId,
                @QueryParam("description") String description,
                @BodyParam("application/json") StylesObject statesetCreateRequestBody,
                @HeaderParam("Accept") String accept);

        @Get("/featureStateSets")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<StatesetListResponse>> listStateset(
                @HostParam("geography") Geography geography,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept);

        @Put("/featureStateSets/{statesetId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> putStateset(
                @HostParam("geography") Geography geography,
                @QueryParam("api-version") String apiVersion,
                @PathParam("statesetId") String statesetId,
                @BodyParam("application/json") StylesObject statesetStyleUpdateRequestBody,
                @HeaderParam("Accept") String accept);

        @Delete("/featureStateSets/{statesetId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> deleteStateset(
                @HostParam("geography") Geography geography,
                @QueryParam("api-version") String apiVersion,
                @PathParam("statesetId") String statesetId,
                @HeaderParam("Accept") String accept);

        @Get("/featureStateSets/{statesetId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<StatesetGetResponse>> getStateset(
                @HostParam("geography") Geography geography,
                @QueryParam("api-version") String apiVersion,
                @PathParam("statesetId") String statesetId,
                @HeaderParam("Accept") String accept);

        @Put("/featureStateSets/{statesetId}/featureStates/{featureId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> updateStates(
                @HostParam("geography") Geography geography,
                @QueryParam("api-version") String apiVersion,
                @PathParam("statesetId") String statesetId,
                @PathParam("featureId") String featureId,
                @BodyParam("application/json") FeatureStatesStructure featureStateUpdateRequestBody,
                @HeaderParam("Accept") String accept);

        @Delete("/featureStateSets/{statesetId}/featureStates/{featureId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> deleteState(
                @HostParam("geography") Geography geography,
                @QueryParam("api-version") String apiVersion,
                @PathParam("statesetId") String statesetId,
                @PathParam("featureId") String featureId,
                @QueryParam("stateKeyName") String stateKeyName,
                @HeaderParam("Accept") String accept);

        @Get("/featureStateSets/{statesetId}/featureStates/{featureId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<FeatureStatesStructure>> getStates(
                @HostParam("geography") Geography geography,
                @QueryParam("api-version") String apiVersion,
                @PathParam("statesetId") String statesetId,
                @PathParam("featureId") String featureId,
                @HeaderParam("Accept") String accept);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<StatesetListResponse>> listStatesetNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("geography") Geography geography,
                @HeaderParam("Accept") String accept);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This POST API allows the user to create a new Stateset and define stateset style using request body.
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Feature State API is part of Creator.
     *
     * <p>The Feature State service allows the user to update the states of a feature and query them to be used in other
     * services. The dynamic properties of a feature that don't belong to the dataset are referred to as *states* here.
     *
     * <p>This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism
     * for feature states for a dataset.
     *
     * <p>Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the
     * current feature states. A feature can have only one state at a given point in time.
     *
     * <p>Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to
     * Azure Maps, the state value gets updated only if the provided stateâ€™s timestamp is later than the stored
     * timestamp.
     *
     * <p>Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the
     * State Tile documentation for more information.
     *
     * @param datasetId The datasetId must have been obtained from a successful [Dataset Create
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call.
     * @param statesetCreateRequestBody The stateset style JSON data.
     * @param description Description for the stateset. Max length allowed is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Create API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<StatesetCreatedResponse>> createStatesetWithResponseAsync(
            String datasetId, StylesObject statesetCreateRequestBody, String description) {
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return service.createStateset(
                this.client.getGeography(), apiVersion, datasetId, description, statesetCreateRequestBody, accept);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This POST API allows the user to create a new Stateset and define stateset style using request body.
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Feature State API is part of Creator.
     *
     * <p>The Feature State service allows the user to update the states of a feature and query them to be used in other
     * services. The dynamic properties of a feature that don't belong to the dataset are referred to as *states* here.
     *
     * <p>This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism
     * for feature states for a dataset.
     *
     * <p>Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the
     * current feature states. A feature can have only one state at a given point in time.
     *
     * <p>Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to
     * Azure Maps, the state value gets updated only if the provided stateâ€™s timestamp is later than the stored
     * timestamp.
     *
     * <p>Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the
     * State Tile documentation for more information.
     *
     * @param datasetId The datasetId must have been obtained from a successful [Dataset Create
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call.
     * @param statesetCreateRequestBody The stateset style JSON data.
     * @param description Description for the stateset. Max length allowed is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Create API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StatesetCreatedResponse> createStatesetAsync(
            String datasetId, StylesObject statesetCreateRequestBody, String description) {
        return createStatesetWithResponseAsync(datasetId, statesetCreateRequestBody, description)
                .flatMap(
                        (Response<StatesetCreatedResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This POST API allows the user to create a new Stateset and define stateset style using request body.
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Feature State API is part of Creator.
     *
     * <p>The Feature State service allows the user to update the states of a feature and query them to be used in other
     * services. The dynamic properties of a feature that don't belong to the dataset are referred to as *states* here.
     *
     * <p>This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism
     * for feature states for a dataset.
     *
     * <p>Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the
     * current feature states. A feature can have only one state at a given point in time.
     *
     * <p>Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to
     * Azure Maps, the state value gets updated only if the provided stateâ€™s timestamp is later than the stored
     * timestamp.
     *
     * <p>Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the
     * State Tile documentation for more information.
     *
     * @param datasetId The datasetId must have been obtained from a successful [Dataset Create
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call.
     * @param statesetCreateRequestBody The stateset style JSON data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Create API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StatesetCreatedResponse> createStatesetAsync(String datasetId, StylesObject statesetCreateRequestBody) {
        final String description = null;
        return createStatesetWithResponseAsync(datasetId, statesetCreateRequestBody, description)
                .flatMap(
                        (Response<StatesetCreatedResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This POST API allows the user to create a new Stateset and define stateset style using request body.
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Feature State API is part of Creator.
     *
     * <p>The Feature State service allows the user to update the states of a feature and query them to be used in other
     * services. The dynamic properties of a feature that don't belong to the dataset are referred to as *states* here.
     *
     * <p>This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism
     * for feature states for a dataset.
     *
     * <p>Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the
     * current feature states. A feature can have only one state at a given point in time.
     *
     * <p>Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to
     * Azure Maps, the state value gets updated only if the provided stateâ€™s timestamp is later than the stored
     * timestamp.
     *
     * <p>Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the
     * State Tile documentation for more information.
     *
     * @param datasetId The datasetId must have been obtained from a successful [Dataset Create
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call.
     * @param statesetCreateRequestBody The stateset style JSON data.
     * @param description Description for the stateset. Max length allowed is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Create API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StatesetCreatedResponse createStateset(
            String datasetId, StylesObject statesetCreateRequestBody, String description) {
        return createStatesetAsync(datasetId, statesetCreateRequestBody, description).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This POST API allows the user to create a new Stateset and define stateset style using request body.
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. The Feature State API is part of Creator.
     *
     * <p>The Feature State service allows the user to update the states of a feature and query them to be used in other
     * services. The dynamic properties of a feature that don't belong to the dataset are referred to as *states* here.
     *
     * <p>This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism
     * for feature states for a dataset.
     *
     * <p>Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the
     * current feature states. A feature can have only one state at a given point in time.
     *
     * <p>Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to
     * Azure Maps, the state value gets updated only if the provided stateâ€™s timestamp is later than the stored
     * timestamp.
     *
     * <p>Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the
     * State Tile documentation for more information.
     *
     * @param datasetId The datasetId must have been obtained from a successful [Dataset Create
     *     API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call.
     * @param statesetCreateRequestBody The stateset style JSON data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Create API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StatesetCreatedResponse createStateset(String datasetId, StylesObject statesetCreateRequestBody) {
        final String description = null;
        return createStatesetAsync(datasetId, statesetCreateRequestBody, description).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all previously successfully created statesets.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<StatesetInfoObject>> listStatesetSinglePageAsync() {
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return service.listStateset(this.client.getGeography(), apiVersion, accept)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getStatesets(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all previously successfully created statesets.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset List API.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<StatesetInfoObject> listStatesetAsync() {
        return new PagedFlux<>(
                () -> listStatesetSinglePageAsync(), nextLink -> listStatesetNextSinglePageAsync(nextLink));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all previously successfully created statesets.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset List API.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<StatesetInfoObject> listStateset() {
        return new PagedIterable<>(listStatesetAsync());
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the stateset style rules.
     *
     * @param statesetId The stateset id that was created.
     * @param statesetStyleUpdateRequestBody The stateset style JSON data. Only style rules are allowed to be updated,
     *     update on keyname and type is not allowed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putStatesetWithResponseAsync(
            String statesetId, StylesObject statesetStyleUpdateRequestBody) {
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return service.putStateset(
                this.client.getGeography(), apiVersion, statesetId, statesetStyleUpdateRequestBody, accept);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the stateset style rules.
     *
     * @param statesetId The stateset id that was created.
     * @param statesetStyleUpdateRequestBody The stateset style JSON data. Only style rules are allowed to be updated,
     *     update on keyname and type is not allowed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putStatesetAsync(String statesetId, StylesObject statesetStyleUpdateRequestBody) {
        return putStatesetWithResponseAsync(statesetId, statesetStyleUpdateRequestBody)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the stateset style rules.
     *
     * @param statesetId The stateset id that was created.
     * @param statesetStyleUpdateRequestBody The stateset style JSON data. Only style rules are allowed to be updated,
     *     update on keyname and type is not allowed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putStateset(String statesetId, StylesObject statesetStyleUpdateRequestBody) {
        putStatesetAsync(statesetId, statesetStyleUpdateRequestBody).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This DELETE API allows the user to delete the stateset and the associated data.
     *
     * @param statesetId The stateset id that was created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteStatesetWithResponseAsync(String statesetId) {
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return service.deleteStateset(this.client.getGeography(), apiVersion, statesetId, accept);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This DELETE API allows the user to delete the stateset and the associated data.
     *
     * @param statesetId The stateset id that was created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteStatesetAsync(String statesetId) {
        return deleteStatesetWithResponseAsync(statesetId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This DELETE API allows the user to delete the stateset and the associated data.
     *
     * @param statesetId The stateset id that was created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteStateset(String statesetId) {
        deleteStatesetAsync(statesetId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This GET API allows the user to get the stateset Information.
     *
     * <p>The stateset Information includes the datasetId associated to the stateset, and the styles of that stateset.
     *
     * @param statesetId The stateset id that was created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Get API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<StatesetGetResponse>> getStatesetWithResponseAsync(String statesetId) {
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return service.getStateset(this.client.getGeography(), apiVersion, statesetId, accept);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This GET API allows the user to get the stateset Information.
     *
     * <p>The stateset Information includes the datasetId associated to the stateset, and the styles of that stateset.
     *
     * @param statesetId The stateset id that was created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Get API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StatesetGetResponse> getStatesetAsync(String statesetId) {
        return getStatesetWithResponseAsync(statesetId)
                .flatMap(
                        (Response<StatesetGetResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This GET API allows the user to get the stateset Information.
     *
     * <p>The stateset Information includes the datasetId associated to the stateset, and the styles of that stateset.
     *
     * @param statesetId The stateset id that was created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset Get API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StatesetGetResponse getStateset(String statesetId) {
        return getStatesetAsync(statesetId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the state of the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given dataset. If the featureId is not present in the dataset, Bad
     *     Request response will be returned.
     * @param featureStateUpdateRequestBody The feature state JSON data. A feature can have only one state at a given
     *     point in time. The specified state keyname must have been defined during the stateset creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateStatesWithResponseAsync(
            String statesetId, String featureId, FeatureStatesStructure featureStateUpdateRequestBody) {
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return service.updateStates(
                this.client.getGeography(), apiVersion, statesetId, featureId, featureStateUpdateRequestBody, accept);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the state of the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given dataset. If the featureId is not present in the dataset, Bad
     *     Request response will be returned.
     * @param featureStateUpdateRequestBody The feature state JSON data. A feature can have only one state at a given
     *     point in time. The specified state keyname must have been defined during the stateset creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateStatesAsync(
            String statesetId, String featureId, FeatureStatesStructure featureStateUpdateRequestBody) {
        return updateStatesWithResponseAsync(statesetId, featureId, featureStateUpdateRequestBody)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This PUT API allows the user to update the state of the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given dataset. If the featureId is not present in the dataset, Bad
     *     Request response will be returned.
     * @param featureStateUpdateRequestBody The feature state JSON data. A feature can have only one state at a given
     *     point in time. The specified state keyname must have been defined during the stateset creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateStates(
            String statesetId, String featureId, FeatureStatesStructure featureStateUpdateRequestBody) {
        updateStatesAsync(statesetId, featureId, featureStateUpdateRequestBody).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API deletes the state information identified by the StateKeyName parameter for the feature identified by
     * the FeatureId parameter in the the stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @param stateKeyName The Name of the state to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteStateWithResponseAsync(String statesetId, String featureId, String stateKeyName) {
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return service.deleteState(this.client.getGeography(), apiVersion, statesetId, featureId, stateKeyName, accept);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API deletes the state information identified by the StateKeyName parameter for the feature identified by
     * the FeatureId parameter in the the stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @param stateKeyName The Name of the state to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteStateAsync(String statesetId, String featureId, String stateKeyName) {
        return deleteStateWithResponseAsync(statesetId, featureId, stateKeyName)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API deletes the state information identified by the StateKeyName parameter for the feature identified by
     * the FeatureId parameter in the the stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @param stateKeyName The Name of the state to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteState(String statesetId, String featureId, String stateKeyName) {
        deleteStateAsync(statesetId, featureId, stateKeyName).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API returns the current state information associated with the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the feature states model for a feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<FeatureStatesStructure>> getStatesWithResponseAsync(String statesetId, String featureId) {
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return service.getStates(this.client.getGeography(), apiVersion, statesetId, featureId, accept);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API returns the current state information associated with the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the feature states model for a feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FeatureStatesStructure> getStatesAsync(String statesetId, String featureId) {
        return getStatesWithResponseAsync(statesetId, featureId)
                .flatMap(
                        (Response<FeatureStatesStructure> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API returns the current state information associated with the given feature in the given stateset.
     *
     * @param statesetId The stateset id that was created.
     * @param featureId The id of a feature in the given stateset. If no state was set for the featureId in the stateset
     *     earlier, Bad Request response will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the feature states model for a feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FeatureStatesStructure getStates(String statesetId, String featureId) {
        return getStatesAsync(statesetId, featureId).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the successful Stateset List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<StatesetInfoObject>> listStatesetNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return service.listStatesetNext(nextLink, this.client.getGeography(), accept)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getStatesets(),
                                        res.getValue().getNextLink(),
                                        null));
    }
}
