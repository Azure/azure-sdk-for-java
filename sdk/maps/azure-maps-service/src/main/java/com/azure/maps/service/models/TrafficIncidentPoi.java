// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.service.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The TrafficIncidentPoi model. */
@Immutable
public final class TrafficIncidentPoi {
    /*
     * ID of the traffic incident
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * The point where an icon of the cluster or raw incident should be drawn,
     * expressed in the requested projection. This is affected by traffic
     * style, zoom level and road type
     */
    @JsonProperty(value = "p", access = JsonProperty.Access.WRITE_ONLY)
    private TrafficIncidentPoiP p;

    /*
     * The icon category associated with this incident. Values are numbers in
     * the range 0-13, with the following meanings -- 0: Unknown, 1: Accident,
     * 2: Fog, 3: Dangerous Conditions, 4: Rain, 5: Ice, 6: Jam, 7: Lane
     * Closed, 8: Road Closed, 9: Road Works, 10: Wind, 11: Flooding, 12:
     * Detour, 13: Cluster
     */
    @JsonProperty(value = "ic", access = JsonProperty.Access.WRITE_ONLY)
    private Integer ic;

    /*
     * The magnitude of delay associated with incident. These values correspond
     * to incident colors in the traffic tiles
     */
    @JsonProperty(value = "ty", access = JsonProperty.Access.WRITE_ONLY)
    private Integer ty;

    /*
     * Bottom left coordinate of the cluster in the projection of the request
     */
    @JsonProperty(value = "cbl", access = JsonProperty.Access.WRITE_ONLY)
    private TrafficIncidentPoiCbl cbl;

    /*
     * Top right coordinate of the cluster in the projection of the request
     */
    @JsonProperty(value = "ctr", access = JsonProperty.Access.WRITE_ONLY)
    private TrafficIncidentPoiCtr ctr;

    /*
     * Cluster size: the number of incidents in the cluster
     */
    @JsonProperty(value = "cs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer cs;

    /*
     * Length of the incident in meters
     */
    @JsonProperty(value = "l", access = JsonProperty.Access.WRITE_ONLY)
    private Integer l;

    /*
     * The road number(s) affected by the incident. Multiple road numbers will
     * delimited by slashes
     */
    @JsonProperty(value = "r", access = JsonProperty.Access.WRITE_ONLY)
    private String r;

    /*
     * Delay caused by the incident in seconds (except in road closures)
     */
    @JsonProperty(value = "dl", access = JsonProperty.Access.WRITE_ONLY)
    private Integer dl;

    /*
     * To: the name of the intersection or location where the traffic due to
     * the incident ends
     */
    @JsonProperty(value = "t", access = JsonProperty.Access.WRITE_ONLY)
    private String t;

    /*
     * From: the name of the intersection or location where the traffic due to
     * the incident starts
     */
    @JsonProperty(value = "f", access = JsonProperty.Access.WRITE_ONLY)
    private String f;

    /*
     * Description of the incident in the language requested
     */
    @JsonProperty(value = "d", access = JsonProperty.Access.WRITE_ONLY)
    private String d;

    /*
     * Cause of the incident, where available, in the language requested
     */
    @JsonProperty(value = "c", access = JsonProperty.Access.WRITE_ONLY)
    private String c;

    /**
     * Get the id property: ID of the traffic incident.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the p property: The point where an icon of the cluster or raw incident should be drawn, expressed in the
     * requested projection. This is affected by traffic style, zoom level and road type.
     *
     * @return the p value.
     */
    public TrafficIncidentPoiP getP() {
        return this.p;
    }

    /**
     * Get the ic property: The icon category associated with this incident. Values are numbers in the range 0-13, with
     * the following meanings -- 0: Unknown, 1: Accident, 2: Fog, 3: Dangerous Conditions, 4: Rain, 5: Ice, 6: Jam, 7:
     * Lane Closed, 8: Road Closed, 9: Road Works, 10: Wind, 11: Flooding, 12: Detour, 13: Cluster.
     *
     * @return the ic value.
     */
    public Integer getIc() {
        return this.ic;
    }

    /**
     * Get the ty property: The magnitude of delay associated with incident. These values correspond to incident colors
     * in the traffic tiles.
     *
     * @return the ty value.
     */
    public Integer getTy() {
        return this.ty;
    }

    /**
     * Get the cbl property: Bottom left coordinate of the cluster in the projection of the request.
     *
     * @return the cbl value.
     */
    public TrafficIncidentPoiCbl getCbl() {
        return this.cbl;
    }

    /**
     * Get the ctr property: Top right coordinate of the cluster in the projection of the request.
     *
     * @return the ctr value.
     */
    public TrafficIncidentPoiCtr getCtr() {
        return this.ctr;
    }

    /**
     * Get the cs property: Cluster size: the number of incidents in the cluster.
     *
     * @return the cs value.
     */
    public Integer getCs() {
        return this.cs;
    }

    /**
     * Get the l property: Length of the incident in meters.
     *
     * @return the l value.
     */
    public Integer getL() {
        return this.l;
    }

    /**
     * Get the r property: The road number(s) affected by the incident. Multiple road numbers will delimited by slashes.
     *
     * @return the r value.
     */
    public String getR() {
        return this.r;
    }

    /**
     * Get the dl property: Delay caused by the incident in seconds (except in road closures).
     *
     * @return the dl value.
     */
    public Integer getDl() {
        return this.dl;
    }

    /**
     * Get the t property: To: the name of the intersection or location where the traffic due to the incident ends.
     *
     * @return the t value.
     */
    public String getT() {
        return this.t;
    }

    /**
     * Get the f property: From: the name of the intersection or location where the traffic due to the incident starts.
     *
     * @return the f value.
     */
    public String getF() {
        return this.f;
    }

    /**
     * Get the d property: Description of the incident in the language requested.
     *
     * @return the d value.
     */
    public String getD() {
        return this.d;
    }

    /**
     * Get the c property: Cause of the incident, where available, in the language requested.
     *
     * @return the c value.
     */
    public String getC() {
        return this.c;
    }
}
