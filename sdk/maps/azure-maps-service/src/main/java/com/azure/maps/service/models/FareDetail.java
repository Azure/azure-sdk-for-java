// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.service.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Detailed fare information for the leg. */
@Fluent
public final class FareDetail {
    /*
     * The price of the ticket when purchased for the individual leg, not
     * for the entire route at once.
     */
    @JsonProperty(value = "price")
    private FarePrice price;

    /*
     * Supported values are:
     *
     * * pay – user is expected to pay for this ticket in order to consume the
     * current leg
     * * transfer – user can use a ticket purchased in a previous leg in order
     * to consume the current leg. In general, when transfer is specified, the
     * number of transfers is counted, and has a limit.
     * * continue – user can use a ticket purchased in a previous leg in order
     * to consume the current leg. In general, when continue is specified, the
     * number of transfers isn’t incremented for this leg.
     * * upgrade – user is expected to upgrade a ticket purchased in a previous
     * leg in order to consume the current leg.
     */
    @JsonProperty(value = "usage")
    private String usage;

    /**
     * Get the price property: The price of the ticket when purchased for the individual leg, not for the entire route
     * at once.
     *
     * @return the price value.
     */
    public FarePrice getPrice() {
        return this.price;
    }

    /**
     * Set the price property: The price of the ticket when purchased for the individual leg, not for the entire route
     * at once.
     *
     * @param price the price value to set.
     * @return the FareDetail object itself.
     */
    public FareDetail setPrice(FarePrice price) {
        this.price = price;
        return this;
    }

    /**
     * Get the usage property: Supported values are:
     *
     * <p>* pay – user is expected to pay for this ticket in order to consume the current leg * transfer – user can use
     * a ticket purchased in a previous leg in order to consume the current leg. In general, when transfer is specified,
     * the number of transfers is counted, and has a limit. * continue – user can use a ticket purchased in a previous
     * leg in order to consume the current leg. In general, when continue is specified, the number of transfers isn’t
     * incremented for this leg. * upgrade – user is expected to upgrade a ticket purchased in a previous leg in order
     * to consume the current leg.
     *
     * @return the usage value.
     */
    public String getUsage() {
        return this.usage;
    }

    /**
     * Set the usage property: Supported values are:
     *
     * <p>* pay – user is expected to pay for this ticket in order to consume the current leg * transfer – user can use
     * a ticket purchased in a previous leg in order to consume the current leg. In general, when transfer is specified,
     * the number of transfers is counted, and has a limit. * continue – user can use a ticket purchased in a previous
     * leg in order to consume the current leg. In general, when continue is specified, the number of transfers isn’t
     * incremented for this leg. * upgrade – user is expected to upgrade a ticket purchased in a previous leg in order
     * to consume the current leg.
     *
     * @param usage the usage value to set.
     * @return the FareDetail object itself.
     */
    public FareDetail setUsage(String usage) {
        this.usage = usage;
        return this;
    }
}
