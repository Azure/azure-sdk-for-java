// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.service.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The numeric rule. The color is selected from the first range it falls into. */
@Fluent
public final class NumberRuleObject {
    /*
     * The numeric value range for this style rule. If the value is in the
     * range, all the conditions must hold true.
     */
    @JsonProperty(value = "range")
    private RangeObject range;

    /*
     * The color when value is within the range. Color is a JSON string in a
     * variety of permitted formats, HTML-style hex values, RGB ("#ff0",
     * "#ffff00", "rgb(255, 255, 0)"), RGBA ("rgba(255, 255, 0, 1)"),
     * HSL("hsl(100, 50%, 50%)"), and HSLA("hsla(100, 50%, 50%, 1)").
     * Predefined HTML colors names, like yellow and blue, are also permitted.
     */
    @JsonProperty(value = "color")
    private String color;

    /**
     * Get the range property: The numeric value range for this style rule. If the value is in the range, all the
     * conditions must hold true.
     *
     * @return the range value.
     */
    public RangeObject getRange() {
        return this.range;
    }

    /**
     * Set the range property: The numeric value range for this style rule. If the value is in the range, all the
     * conditions must hold true.
     *
     * @param range the range value to set.
     * @return the NumberRuleObject object itself.
     */
    public NumberRuleObject setRange(RangeObject range) {
        this.range = range;
        return this;
    }

    /**
     * Get the color property: The color when value is within the range. Color is a JSON string in a variety of
     * permitted formats, HTML-style hex values, RGB ("#ff0", "#ffff00", "rgb(255, 255, 0)"), RGBA ("rgba(255, 255, 0,
     * 1)"), HSL("hsl(100, 50%, 50%)"), and HSLA("hsla(100, 50%, 50%, 1)"). Predefined HTML colors names, like yellow
     * and blue, are also permitted.
     *
     * @return the color value.
     */
    public String getColor() {
        return this.color;
    }

    /**
     * Set the color property: The color when value is within the range. Color is a JSON string in a variety of
     * permitted formats, HTML-style hex values, RGB ("#ff0", "#ffff00", "rgb(255, 255, 0)"), RGBA ("rgba(255, 255, 0,
     * 1)"), HSL("hsl(100, 50%, 50%)"), and HSLA("hsla(100, 50%, 50%, 1)"). Predefined HTML colors names, like yellow
     * and blue, are also permitted.
     *
     * @param color the color value to set.
     * @return the NumberRuleObject object itself.
     */
    public NumberRuleObject setColor(String color) {
        this.color = color;
        return this;
    }
}
