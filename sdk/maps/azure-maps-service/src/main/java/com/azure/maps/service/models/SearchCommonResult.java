// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.service.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Result object for a Search API response. */
@Fluent
public final class SearchCommonResult {
    /*
     * One of:
     * * POI
     * * Street
     * * Geography
     * * Point Address
     * * Address Range
     * * Cross Street
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /*
     * Id property
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * The value within a result set to indicate the relative matching score
     * between results.  You can use this to  determine that result x is twice
     * as likely to be as relevant as result y if the value of x is 2x the
     * value of y.   The values vary between queries and is only meant as a
     * relative value for one result set.
     */
    @JsonProperty(value = "score", access = JsonProperty.Access.WRITE_ONLY)
    private Float score;

    /*
     * Straight line distance between the result and geobias location in
     * meters.
     */
    @JsonProperty(value = "dist", access = JsonProperty.Access.WRITE_ONLY)
    private Float dist;

    /*
     * Info property
     */
    @JsonProperty(value = "info", access = JsonProperty.Access.WRITE_ONLY)
    private String info;

    /*
     * Geography entity type. Present only when entityType was requested and is
     * available.
     */
    @JsonProperty(value = "entityType")
    private EntityType entityType;

    /*
     * Details of the returned POI including information such as the name,
     * phone, url address, and classifications.
     */
    @JsonProperty(value = "poi", access = JsonProperty.Access.WRITE_ONLY)
    private SearchResultPoi poi;

    /*
     * The address of the result
     */
    @JsonProperty(value = "address", access = JsonProperty.Access.WRITE_ONLY)
    private SearchResultAddress address;

    /*
     * A location represented as a latitude and longitude using short names
     * 'lat' & 'lon'.
     */
    @JsonProperty(value = "position")
    private CoordinatesPairAbbreviated position;

    /*
     * The viewport that covers the result represented by the top-left and
     * bottom-right coordinates of the  viewport.
     */
    @JsonProperty(value = "viewport", access = JsonProperty.Access.WRITE_ONLY)
    private SearchResultViewport viewport;

    /*
     * Entry Points array
     */
    @JsonProperty(value = "entryPoints", access = JsonProperty.Access.WRITE_ONLY)
    private List<SearchResultEntryPoint> entryPoints;

    /*
     * Describes the address range on both sides of the street for a search
     * result. Coordinates for the start and end locations of the address range
     * are included.
     */
    @JsonProperty(value = "addressRanges", access = JsonProperty.Access.WRITE_ONLY)
    private SearchResultAddressRanges addressRanges;

    /*
     * Optional section. Reference ids for use with the [Get Search
     * Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon)
     * API.
     */
    @JsonProperty(value = "dataSources", access = JsonProperty.Access.WRITE_ONLY)
    private DataSources dataSources;

    /*
     * Information on the type of match.
     *
     * One of:
     * * AddressPoint
     * * HouseNumberRange
     * * Street
     */
    @JsonProperty(value = "matchType", access = JsonProperty.Access.WRITE_ONLY)
    private String matchType;

    /*
     * Detour time in seconds
     */
    @JsonProperty(value = "detourTime", access = JsonProperty.Access.WRITE_ONLY)
    private Float detourTime;

    /**
     * Get the type property: One of: * POI * Street * Geography * Point Address * Address Range * Cross Street.
     *
     * @return the type value.
     */
    public String getType() {
        return this.type;
    }

    /**
     * Get the id property: Id property.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the score property: The value within a result set to indicate the relative matching score between results.
     * You can use this to determine that result x is twice as likely to be as relevant as result y if the value of x is
     * 2x the value of y. The values vary between queries and is only meant as a relative value for one result set.
     *
     * @return the score value.
     */
    public Float getScore() {
        return this.score;
    }

    /**
     * Get the dist property: Straight line distance between the result and geobias location in meters.
     *
     * @return the dist value.
     */
    public Float getDist() {
        return this.dist;
    }

    /**
     * Get the info property: Info property.
     *
     * @return the info value.
     */
    public String getInfo() {
        return this.info;
    }

    /**
     * Get the entityType property: Geography entity type. Present only when entityType was requested and is available.
     *
     * @return the entityType value.
     */
    public EntityType getEntityType() {
        return this.entityType;
    }

    /**
     * Set the entityType property: Geography entity type. Present only when entityType was requested and is available.
     *
     * @param entityType the entityType value to set.
     * @return the SearchCommonResult object itself.
     */
    public SearchCommonResult setEntityType(EntityType entityType) {
        this.entityType = entityType;
        return this;
    }

    /**
     * Get the poi property: Details of the returned POI including information such as the name, phone, url address, and
     * classifications.
     *
     * @return the poi value.
     */
    public SearchResultPoi getPoi() {
        return this.poi;
    }

    /**
     * Get the address property: The address of the result.
     *
     * @return the address value.
     */
    public SearchResultAddress getAddress() {
        return this.address;
    }

    /**
     * Get the position property: A location represented as a latitude and longitude using short names 'lat' &amp;
     * 'lon'.
     *
     * @return the position value.
     */
    public CoordinatesPairAbbreviated getPosition() {
        return this.position;
    }

    /**
     * Set the position property: A location represented as a latitude and longitude using short names 'lat' &amp;
     * 'lon'.
     *
     * @param position the position value to set.
     * @return the SearchCommonResult object itself.
     */
    public SearchCommonResult setPosition(CoordinatesPairAbbreviated position) {
        this.position = position;
        return this;
    }

    /**
     * Get the viewport property: The viewport that covers the result represented by the top-left and bottom-right
     * coordinates of the viewport.
     *
     * @return the viewport value.
     */
    public SearchResultViewport getViewport() {
        return this.viewport;
    }

    /**
     * Get the entryPoints property: Entry Points array.
     *
     * @return the entryPoints value.
     */
    public List<SearchResultEntryPoint> getEntryPoints() {
        return this.entryPoints;
    }

    /**
     * Get the addressRanges property: Describes the address range on both sides of the street for a search result.
     * Coordinates for the start and end locations of the address range are included.
     *
     * @return the addressRanges value.
     */
    public SearchResultAddressRanges getAddressRanges() {
        return this.addressRanges;
    }

    /**
     * Get the dataSources property: Optional section. Reference ids for use with the [Get Search
     * Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API.
     *
     * @return the dataSources value.
     */
    public DataSources getDataSources() {
        return this.dataSources;
    }

    /**
     * Get the matchType property: Information on the type of match.
     *
     * <p>One of: * AddressPoint * HouseNumberRange * Street.
     *
     * @return the matchType value.
     */
    public String getMatchType() {
        return this.matchType;
    }

    /**
     * Get the detourTime property: Detour time in seconds.
     *
     * @return the detourTime value.
     */
    public Float getDetourTime() {
        return this.detourTime;
    }
}
