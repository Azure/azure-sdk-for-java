// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.service;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.StreamResponse;
import com.azure.maps.service.implementation.DatasImpl;
import com.azure.maps.service.models.DatasGetOperationPreviewResponse;
import com.azure.maps.service.models.DatasUpdatePreviewResponse;
import com.azure.maps.service.models.DatasUploadPreviewResponse;
import com.azure.maps.service.models.ErrorResponseException;
import com.azure.maps.service.models.LongRunningOperationResult;
import com.azure.maps.service.models.MapDataListResponse;
import com.azure.maps.service.models.UploadDataFormat;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous MapsClient type. */
@ServiceClient(builder = MapsClientBuilder.class, isAsync = true)
public final class DataAsyncClient {
    private final DatasImpl serviceClient;

    /**
     * Initializes an instance of Datas client.
     *
     * @param serviceClient the service client implementation.
     */
    DataAsyncClient(DatasImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Data Upload API allows the caller to upload data content to the Azure Maps service. You can use this API
     * in a scenario like uploading a collection of Geofences in `GeoJSON` format, for use in our [Azure Maps Geofencing
     * Service](https://docs.microsoft.com/rest/api/maps/spatial).
     *
     * <p>## Submit Upload Request
     *
     * <p>To upload your content you will use a `POST` request. The request body will contain the data to upload. The
     * `dataFormat` query parameter will contain the format for the data, the `dataSharingLevel` query parameter can
     * contain the sharing level for the data. The `Content-Type` header will be set to the content type of the data.
     *
     * <p>For example, to upload a collection of geofences in `GeoJSON` format, set the request body to the geofence
     * content. Set the `dataFormat` query parameter to _geojson_, and set the `Content-Type` header to either one of
     * the following media types:
     *
     * <p>- `application/json` - `application/vnd.geo+json` - `application/octet-stream`
     *
     * <p>Here's a sample request body for uploading a simple Geofence represented as a circle geometry using a center
     * point and a radius. The sample below is in `GeoJSON`:
     *
     * <p>```json { "type": "FeatureCollection", "features": [{ "type": "Feature", "geometry": { "type": "Point",
     * "coordinates": [-122.126986, 47.639754] }, "properties": { "geometryId": "001", "radius": 500 } }] } ```
     *
     * <p>The Data Upload API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Data Upload Limits
     *
     * <p>Please, be aware that currently every Azure Maps account has a [data storage
     * limit](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-maps-limits).
     * Once the storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response.
     * You can always use the [Data Delete API](https://docs.microsoft.com/rest/api/maps/data%20v2/deletepreview) to
     * delete old/unused content and create space for new uploads.
     *
     * @param uploadDataFormat Data format of the content being uploaded.
     * @param uploadContent The content to upload.
     * @param uploadDataDescription The description to be given to the upload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DatasUploadPreviewResponse> uploadPreviewWithResponse(
            UploadDataFormat uploadDataFormat, Object uploadContent, String uploadDataDescription) {
        return this.serviceClient.uploadPreviewWithResponseAsync(
                uploadDataFormat, uploadContent, uploadDataDescription);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Data Upload API allows the caller to upload data content to the Azure Maps service. You can use this API
     * in a scenario like uploading a collection of Geofences in `GeoJSON` format, for use in our [Azure Maps Geofencing
     * Service](https://docs.microsoft.com/rest/api/maps/spatial).
     *
     * <p>## Submit Upload Request
     *
     * <p>To upload your content you will use a `POST` request. The request body will contain the data to upload. The
     * `dataFormat` query parameter will contain the format for the data, the `dataSharingLevel` query parameter can
     * contain the sharing level for the data. The `Content-Type` header will be set to the content type of the data.
     *
     * <p>For example, to upload a collection of geofences in `GeoJSON` format, set the request body to the geofence
     * content. Set the `dataFormat` query parameter to _geojson_, and set the `Content-Type` header to either one of
     * the following media types:
     *
     * <p>- `application/json` - `application/vnd.geo+json` - `application/octet-stream`
     *
     * <p>Here's a sample request body for uploading a simple Geofence represented as a circle geometry using a center
     * point and a radius. The sample below is in `GeoJSON`:
     *
     * <p>```json { "type": "FeatureCollection", "features": [{ "type": "Feature", "geometry": { "type": "Point",
     * "coordinates": [-122.126986, 47.639754] }, "properties": { "geometryId": "001", "radius": 500 } }] } ```
     *
     * <p>The Data Upload API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Data Upload Limits
     *
     * <p>Please, be aware that currently every Azure Maps account has a [data storage
     * limit](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-maps-limits).
     * Once the storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response.
     * You can always use the [Data Delete API](https://docs.microsoft.com/rest/api/maps/data%20v2/deletepreview) to
     * delete old/unused content and create space for new uploads.
     *
     * @param uploadDataFormat Data format of the content being uploaded.
     * @param uploadContent The content to upload.
     * @param uploadDataDescription The description to be given to the upload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LongRunningOperationResult> uploadPreview(
            UploadDataFormat uploadDataFormat, Object uploadContent, String uploadDataDescription) {
        return this.serviceClient.uploadPreviewAsync(uploadDataFormat, uploadContent, uploadDataDescription);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Data Upload API allows the caller to upload data content to the Azure Maps service. You can use this API
     * in a scenario like uploading a collection of Geofences in `GeoJSON` format, for use in our [Azure Maps Geofencing
     * Service](https://docs.microsoft.com/rest/api/maps/spatial).
     *
     * <p>## Submit Upload Request
     *
     * <p>To upload your content you will use a `POST` request. The request body will contain the data to upload. The
     * `dataFormat` query parameter will contain the format for the data, the `dataSharingLevel` query parameter can
     * contain the sharing level for the data. The `Content-Type` header will be set to the content type of the data.
     *
     * <p>For example, to upload a collection of geofences in `GeoJSON` format, set the request body to the geofence
     * content. Set the `dataFormat` query parameter to _geojson_, and set the `Content-Type` header to either one of
     * the following media types:
     *
     * <p>- `application/json` - `application/vnd.geo+json` - `application/octet-stream`
     *
     * <p>Here's a sample request body for uploading a simple Geofence represented as a circle geometry using a center
     * point and a radius. The sample below is in `GeoJSON`:
     *
     * <p>```json { "type": "FeatureCollection", "features": [{ "type": "Feature", "geometry": { "type": "Point",
     * "coordinates": [-122.126986, 47.639754] }, "properties": { "geometryId": "001", "radius": 500 } }] } ```
     *
     * <p>The Data Upload API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Data Upload Limits
     *
     * <p>Please, be aware that currently every Azure Maps account has a [data storage
     * limit](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-maps-limits).
     * Once the storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response.
     * You can always use the [Data Delete API](https://docs.microsoft.com/rest/api/maps/data%20v2/deletepreview) to
     * delete old/unused content and create space for new uploads.
     *
     * @param uploadDataFormat Data format of the content being uploaded.
     * @param uploadContent The content to upload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LongRunningOperationResult> uploadPreview(UploadDataFormat uploadDataFormat, Object uploadContent) {
        return this.serviceClient.uploadPreviewAsync(uploadDataFormat, uploadContent);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>This API allows the caller to fetch a list of all content uploaded previously using the [Data Upload
     * API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview).
     *
     * <p>### Submit List Request
     *
     * <p>To list all your map data content you will issue a `GET` request with no additional parameters.
     *
     * <p>### List Data Response
     *
     * <p>The Data List API returns the complete list of all data in `json` format. The response contains the following
     * details for each data resource:
     *
     * <p>&gt; udid - The unique data id for the data resource.
     *
     * <p>&gt; location - The location of the data resource. Execute a HTTP `GET` on this location to download the data.
     *
     * <p>Here's a sample response returning the `udid` and `location` of 3 data resources:
     *
     * <p>&lt;br&gt;
     *
     * <p>```json { "mapDataList": [ { "udid": "9a1288fa-1858-4a3b-b68d-13a8j5af7d7c", "location":
     * "https://us.atlas.microsoft.com/mapData/9a1288fa-1858-4a3b-b68d-13a8j5af7d7c?api-version=1.0", "sizeInBytes":
     * 29920, "uploadStatus": "Completed" }, { "udid": "8b1288fa-1958-4a2b-b68e-13a7i5af7d7c", "location":
     * "https://us.atlas.microsoft.com/mapData/8b1288fa-1958-4a2b-b68e-13a7i5af7d7c?api-version=1.0", "sizeInBytes":
     * 1339, "uploadStatus": "Completed" }, { "udid": "7c1288fa-2058-4a1b-b68f-13a6h5af7d7c", "location":
     * "https://us.atlas.microsoft.com/mapData/7c1288fa-2058-4a1b-b68f-13a6h5af7d7c?api-version=1.0", "sizeInBytes":
     * 1650, "uploadStatus": "Pending" }] } ```
     *
     * <p>&lt;br&gt;.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Data List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MapDataListResponse>> listPreviewWithResponse() {
        return this.serviceClient.listPreviewWithResponseAsync();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>This API allows the caller to fetch a list of all content uploaded previously using the [Data Upload
     * API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview).
     *
     * <p>### Submit List Request
     *
     * <p>To list all your map data content you will issue a `GET` request with no additional parameters.
     *
     * <p>### List Data Response
     *
     * <p>The Data List API returns the complete list of all data in `json` format. The response contains the following
     * details for each data resource:
     *
     * <p>&gt; udid - The unique data id for the data resource.
     *
     * <p>&gt; location - The location of the data resource. Execute a HTTP `GET` on this location to download the data.
     *
     * <p>Here's a sample response returning the `udid` and `location` of 3 data resources:
     *
     * <p>&lt;br&gt;
     *
     * <p>```json { "mapDataList": [ { "udid": "9a1288fa-1858-4a3b-b68d-13a8j5af7d7c", "location":
     * "https://us.atlas.microsoft.com/mapData/9a1288fa-1858-4a3b-b68d-13a8j5af7d7c?api-version=1.0", "sizeInBytes":
     * 29920, "uploadStatus": "Completed" }, { "udid": "8b1288fa-1958-4a2b-b68e-13a7i5af7d7c", "location":
     * "https://us.atlas.microsoft.com/mapData/8b1288fa-1958-4a2b-b68e-13a7i5af7d7c?api-version=1.0", "sizeInBytes":
     * 1339, "uploadStatus": "Completed" }, { "udid": "7c1288fa-2058-4a1b-b68f-13a6h5af7d7c", "location":
     * "https://us.atlas.microsoft.com/mapData/7c1288fa-2058-4a1b-b68f-13a6h5af7d7c?api-version=1.0", "sizeInBytes":
     * 1650, "uploadStatus": "Pending" }] } ```
     *
     * <p>&lt;br&gt;.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Data List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MapDataListResponse> listPreview() {
        return this.serviceClient.listPreviewAsync();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Data Update API allows the caller to update a previously uploaded data content.
     *
     * <p>You can use this API in a scenario like adding or removing geofences to or from an existing collection of
     * geofences. Geofences are uploaded using the [Data Upload
     * API](https://docs.microsoft.com/rest/api/maps/data%20v2/uploadpreview), for use in the [Azure Maps Geofencing
     * Service](https://docs.microsoft.com/rest/api/maps/spatial).
     *
     * <p>Please note that the Update API will *replace* and *override* the existing data content.
     *
     * <p>## Submit Update Request
     *
     * <p>To update your content you will use a `PUT` request. The request body will contain the new data that will
     * replace the existing data. The `Content-Type` header will be set to the content type of the data, and the path
     * will contain the `udid` of the data to be update.
     *
     * <p>For example, to update a collection of geofences that were previously uploaded using the Upload API, place the
     * new geofence content in the request body. Set the `udid` parameter in the path to the `udid` of the data received
     * previously in the upload API response. And set the `Content-Type` header to one of the following media types:
     *
     * <p>- `application/json` - `application/vnd.geo+json` - `application/octet-stream`
     *
     * <p>Here's a sample request body for updating a simple Geofence. It's represented as a circle geometry using a
     * center point and a radius. The sample below is in `GeoJSON`:
     *
     * <p>```json { "type": "FeatureCollection", "features": [{ "type": "Feature", "geometry": { "type": "Point",
     * "coordinates": [-122.126986, 47.639754] }, "properties": { "geometryId": "001", "radius": 500 } }] } ```
     *
     * <p>The previously uploaded geofence had a radius of 100m. The above request will update it to 500m.
     *
     * <p>The Data Update API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Data Update Limits
     *
     * <p>Please, be aware that currently every Azure Maps account has a [data storage
     * limit](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-maps-limits).
     * Once the storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response.
     * You can always use the [Data Delete API](https://docs.microsoft.com/rest/api/maps/data%20v2/deletepreview) to
     * delete old/unused content and create space for new uploads.
     *
     * @param uniqueDataId The unique data id for the content. The `udid` must have been obtained from a successful
     *     [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @param updateContent The new content that will update/replace the previously uploaded content.
     * @param uploadDataDescription The description to be given to the upload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DatasUpdatePreviewResponse> updatePreviewWithResponse(
            String uniqueDataId, Object updateContent, String uploadDataDescription) {
        return this.serviceClient.updatePreviewWithResponseAsync(uniqueDataId, updateContent, uploadDataDescription);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Data Update API allows the caller to update a previously uploaded data content.
     *
     * <p>You can use this API in a scenario like adding or removing geofences to or from an existing collection of
     * geofences. Geofences are uploaded using the [Data Upload
     * API](https://docs.microsoft.com/rest/api/maps/data%20v2/uploadpreview), for use in the [Azure Maps Geofencing
     * Service](https://docs.microsoft.com/rest/api/maps/spatial).
     *
     * <p>Please note that the Update API will *replace* and *override* the existing data content.
     *
     * <p>## Submit Update Request
     *
     * <p>To update your content you will use a `PUT` request. The request body will contain the new data that will
     * replace the existing data. The `Content-Type` header will be set to the content type of the data, and the path
     * will contain the `udid` of the data to be update.
     *
     * <p>For example, to update a collection of geofences that were previously uploaded using the Upload API, place the
     * new geofence content in the request body. Set the `udid` parameter in the path to the `udid` of the data received
     * previously in the upload API response. And set the `Content-Type` header to one of the following media types:
     *
     * <p>- `application/json` - `application/vnd.geo+json` - `application/octet-stream`
     *
     * <p>Here's a sample request body for updating a simple Geofence. It's represented as a circle geometry using a
     * center point and a radius. The sample below is in `GeoJSON`:
     *
     * <p>```json { "type": "FeatureCollection", "features": [{ "type": "Feature", "geometry": { "type": "Point",
     * "coordinates": [-122.126986, 47.639754] }, "properties": { "geometryId": "001", "radius": 500 } }] } ```
     *
     * <p>The previously uploaded geofence had a radius of 100m. The above request will update it to 500m.
     *
     * <p>The Data Update API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Data Update Limits
     *
     * <p>Please, be aware that currently every Azure Maps account has a [data storage
     * limit](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-maps-limits).
     * Once the storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response.
     * You can always use the [Data Delete API](https://docs.microsoft.com/rest/api/maps/data%20v2/deletepreview) to
     * delete old/unused content and create space for new uploads.
     *
     * @param uniqueDataId The unique data id for the content. The `udid` must have been obtained from a successful
     *     [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @param updateContent The new content that will update/replace the previously uploaded content.
     * @param uploadDataDescription The description to be given to the upload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LongRunningOperationResult> updatePreview(
            String uniqueDataId, Object updateContent, String uploadDataDescription) {
        return this.serviceClient.updatePreviewAsync(uniqueDataId, updateContent, uploadDataDescription);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>The Data Update API allows the caller to update a previously uploaded data content.
     *
     * <p>You can use this API in a scenario like adding or removing geofences to or from an existing collection of
     * geofences. Geofences are uploaded using the [Data Upload
     * API](https://docs.microsoft.com/rest/api/maps/data%20v2/uploadpreview), for use in the [Azure Maps Geofencing
     * Service](https://docs.microsoft.com/rest/api/maps/spatial).
     *
     * <p>Please note that the Update API will *replace* and *override* the existing data content.
     *
     * <p>## Submit Update Request
     *
     * <p>To update your content you will use a `PUT` request. The request body will contain the new data that will
     * replace the existing data. The `Content-Type` header will be set to the content type of the data, and the path
     * will contain the `udid` of the data to be update.
     *
     * <p>For example, to update a collection of geofences that were previously uploaded using the Upload API, place the
     * new geofence content in the request body. Set the `udid` parameter in the path to the `udid` of the data received
     * previously in the upload API response. And set the `Content-Type` header to one of the following media types:
     *
     * <p>- `application/json` - `application/vnd.geo+json` - `application/octet-stream`
     *
     * <p>Here's a sample request body for updating a simple Geofence. It's represented as a circle geometry using a
     * center point and a radius. The sample below is in `GeoJSON`:
     *
     * <p>```json { "type": "FeatureCollection", "features": [{ "type": "Feature", "geometry": { "type": "Point",
     * "coordinates": [-122.126986, 47.639754] }, "properties": { "geometryId": "001", "radius": 500 } }] } ```
     *
     * <p>The previously uploaded geofence had a radius of 100m. The above request will update it to 500m.
     *
     * <p>The Data Update API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * <p>## Data Update Limits
     *
     * <p>Please, be aware that currently every Azure Maps account has a [data storage
     * limit](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-maps-limits).
     * Once the storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response.
     * You can always use the [Data Delete API](https://docs.microsoft.com/rest/api/maps/data%20v2/deletepreview) to
     * delete old/unused content and create space for new uploads.
     *
     * @param uniqueDataId The unique data id for the content. The `udid` must have been obtained from a successful
     *     [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @param updateContent The new content that will update/replace the previously uploaded content.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LongRunningOperationResult> updatePreview(String uniqueDataId, Object updateContent) {
        return this.serviceClient.updatePreviewAsync(uniqueDataId, updateContent);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>This API allows the caller to download a previously uploaded data content.&lt;br&gt; You can use this API in a
     * scenario like downloading an existing collection of geofences uploaded previously using the [Data Upload
     * API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) for use in our [Azure Maps
     * Geofencing Service](https://docs.microsoft.com/en-us/rest/api/maps/spatial).
     *
     * <p>### Submit Download Request
     *
     * <p>To download your content you will use a `GET` request where the path will contain the `udid` of the data to
     * download. Optionally, you can also pass in an `Accept` header to specify a preference for the `Content-Type` of
     * the data response. &lt;br&gt; For example, to download a collection of geofences previously uploaded using the
     * Upload API, set the `udid` parameter in the path to the `udid` of the data received previously in the upload API
     * response and set the `Accept` header to either one of the following media types:
     *
     * <p>- `application/json` - `application/vnd.geo+json` - `application/octet-stream`
     *
     * <p>### Download Data Response
     *
     * <p>The Download API will return a HTTP `200 OK` response if the data resource with the passed-in `udid` is found,
     * where the response body will contain the content of the data resource.&lt;br&gt; A HTTP `400 Bad Request` error
     * response will be returned if the data resource with the passed-in `udid` is not found.&lt;br&gt;
     *
     * <p>Here's a sample response body for a simple geofence represented in `GeoJSON` uploaded previously using the
     * Upload API: &lt;br&gt;
     *
     * <p>```json { "type": "FeatureCollection", "features": [{ "type": "Feature", "geometry": { "type": "Point",
     * "coordinates": [-122.126986, 47.639754] }, "properties": { "geometryId": "001", "radius": 500 } }] } ```.
     *
     * @param uniqueDataId The unique data id for the content. The `udid` must have been obtained from a successful
     *     [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> downloadPreviewWithResponse(String uniqueDataId) {
        return this.serviceClient.downloadPreviewWithResponseAsync(uniqueDataId);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>This API allows the caller to download a previously uploaded data content.&lt;br&gt; You can use this API in a
     * scenario like downloading an existing collection of geofences uploaded previously using the [Data Upload
     * API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) for use in our [Azure Maps
     * Geofencing Service](https://docs.microsoft.com/en-us/rest/api/maps/spatial).
     *
     * <p>### Submit Download Request
     *
     * <p>To download your content you will use a `GET` request where the path will contain the `udid` of the data to
     * download. Optionally, you can also pass in an `Accept` header to specify a preference for the `Content-Type` of
     * the data response. &lt;br&gt; For example, to download a collection of geofences previously uploaded using the
     * Upload API, set the `udid` parameter in the path to the `udid` of the data received previously in the upload API
     * response and set the `Accept` header to either one of the following media types:
     *
     * <p>- `application/json` - `application/vnd.geo+json` - `application/octet-stream`
     *
     * <p>### Download Data Response
     *
     * <p>The Download API will return a HTTP `200 OK` response if the data resource with the passed-in `udid` is found,
     * where the response body will contain the content of the data resource.&lt;br&gt; A HTTP `400 Bad Request` error
     * response will be returned if the data resource with the passed-in `udid` is not found.&lt;br&gt;
     *
     * <p>Here's a sample response body for a simple geofence represented in `GeoJSON` uploaded previously using the
     * Upload API: &lt;br&gt;
     *
     * <p>```json { "type": "FeatureCollection", "features": [{ "type": "Feature", "geometry": { "type": "Point",
     * "coordinates": [-122.126986, 47.639754] }, "properties": { "geometryId": "001", "radius": 500 } }] } ```.
     *
     * @param uniqueDataId The unique data id for the content. The `udid` must have been obtained from a successful
     *     [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> downloadPreview(String uniqueDataId) {
        return this.serviceClient.downloadPreviewAsync(uniqueDataId);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>This API allows the caller to delete a previously uploaded data content.&lt;br&gt; You can use this API in a
     * scenario like removing geofences previously uploaded using the [Data Upload
     * API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) for use in our [Azure Maps
     * Geofencing Service](https://docs.microsoft.com/en-us/rest/api/maps/spatial). You can also use this API to delete
     * old/unused uploaded content and create space for new content.
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your content you will issue a `DELETE` request where the path will contain the `udid` of the data to
     * delete.&lt;br&gt; For example, to delete a collection of geofences previously uploaded using the Upload API, set
     * the `udid` parameter in the path to the `udid` of the data received previously in the upload API response.
     *
     * <p>### Delete Data Response
     *
     * <p>The Data Delete API returns a HTTP `204 No Content` response with an empty body, if the data resource was
     * deleted successfully.&lt;br&gt; A HTTP `400 Bad Request` error response will be returned if the data resource
     * with the passed-in `udid` is not found.
     *
     * @param uniqueDataId The unique data id for the content. The `udid` must have been obtained from a successful
     *     [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deletePreviewWithResponse(String uniqueDataId) {
        return this.serviceClient.deletePreviewWithResponseAsync(uniqueDataId);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>This API allows the caller to delete a previously uploaded data content.&lt;br&gt; You can use this API in a
     * scenario like removing geofences previously uploaded using the [Data Upload
     * API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) for use in our [Azure Maps
     * Geofencing Service](https://docs.microsoft.com/en-us/rest/api/maps/spatial). You can also use this API to delete
     * old/unused uploaded content and create space for new content.
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your content you will issue a `DELETE` request where the path will contain the `udid` of the data to
     * delete.&lt;br&gt; For example, to delete a collection of geofences previously uploaded using the Upload API, set
     * the `udid` parameter in the path to the `udid` of the data received previously in the upload API response.
     *
     * <p>### Delete Data Response
     *
     * <p>The Data Delete API returns a HTTP `204 No Content` response with an empty body, if the data resource was
     * deleted successfully.&lt;br&gt; A HTTP `400 Bad Request` error response will be returned if the data resource
     * with the passed-in `udid` is not found.
     *
     * @param uniqueDataId The unique data id for the content. The `udid` must have been obtained from a successful
     *     [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deletePreview(String uniqueDataId) {
        return this.serviceClient.deletePreviewAsync(uniqueDataId);
    }

    /**
     * This path will be obtained from a call to POST /mapData. While in progress, an http200 will be returned with no
     * extra headers - followed by an http200 with Resource-Location header once completed.
     *
     * @param operationId The ID to query the status for the data upload request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DatasGetOperationPreviewResponse> getOperationPreviewWithResponse(String operationId) {
        return this.serviceClient.getOperationPreviewWithResponseAsync(operationId);
    }

    /**
     * This path will be obtained from a call to POST /mapData. While in progress, an http200 will be returned with no
     * extra headers - followed by an http200 with Resource-Location header once completed.
     *
     * @param operationId The ID to query the status for the data upload request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LongRunningOperationResult> getOperationPreview(String operationId) {
        return this.serviceClient.getOperationPreviewAsync(operationId);
    }
}
