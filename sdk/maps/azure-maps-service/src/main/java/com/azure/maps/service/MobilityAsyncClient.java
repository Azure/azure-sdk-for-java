// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.service;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.maps.service.implementation.MobilitiesImpl;
import com.azure.maps.service.models.AgencyType;
import com.azure.maps.service.models.DestinationType;
import com.azure.maps.service.models.ErrorResponseException;
import com.azure.maps.service.models.MetroAreaDetailType;
import com.azure.maps.service.models.MetroAreaInfoResponse;
import com.azure.maps.service.models.MetroAreaQueryType;
import com.azure.maps.service.models.MetroAreaResponse;
import com.azure.maps.service.models.ModeType;
import com.azure.maps.service.models.NearbyTransitResponse;
import com.azure.maps.service.models.OriginType;
import com.azure.maps.service.models.RealTimeArrivalsQueryType;
import com.azure.maps.service.models.RealTimeArrivalsResponse;
import com.azure.maps.service.models.ResponseFormat;
import com.azure.maps.service.models.StopQueryType;
import com.azure.maps.service.models.TimeType;
import com.azure.maps.service.models.TransitItineraryDetailType;
import com.azure.maps.service.models.TransitItineraryResponse;
import com.azure.maps.service.models.TransitLineDetailType;
import com.azure.maps.service.models.TransitLineInfoResponse;
import com.azure.maps.service.models.TransitRouteResponse;
import com.azure.maps.service.models.TransitRouteType;
import com.azure.maps.service.models.TransitStopDetailType;
import com.azure.maps.service.models.TransitStopInfoResponse;
import com.azure.maps.service.models.TransitStopQueryType;
import com.azure.maps.service.models.TransitTypeFilter;
import java.util.List;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous MapsClient type. */
@ServiceClient(builder = MapsClientBuilder.class, isAsync = true)
public final class MobilityAsyncClient {
    private final MobilitiesImpl serviceClient;

    /**
     * Initializes an instance of Mobilities client.
     *
     * @param serviceClient the service client implementation.
     */
    MobilityAsyncClient(MobilitiesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * **Metro Area API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Service allows users to request metro areas in which the Azure Maps Mobility Service is available. The service
     * supports filtering results by country or coordinate location. Information returned includes Metro Area details
     * such as metro Id, name and a representation of the metro area geometry in GeoJSON format.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The applicable location input. Can be position (specified as a comma separated string composed by
     *     latitude followed by longitude e.g. "47.641268,-122.125679") or countryCode (2-character ISO country code).
     * @param queryType The type of the query. By default originType=position, specified as a comma separated string
     *     composed by latitude followed by longitude, e.g. "47.641268,-122.125679”.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Metro Area call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MetroAreaResponse>> getMetroAreaPreviewWithResponse(
            ResponseFormat format, String query, MetroAreaQueryType queryType, String language) {
        return this.serviceClient.getMetroAreaPreviewWithResponseAsync(format, query, queryType, language);
    }

    /**
     * **Metro Area API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Service allows users to request metro areas in which the Azure Maps Mobility Service is available. The service
     * supports filtering results by country or coordinate location. Information returned includes Metro Area details
     * such as metro Id, name and a representation of the metro area geometry in GeoJSON format.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The applicable location input. Can be position (specified as a comma separated string composed by
     *     latitude followed by longitude e.g. "47.641268,-122.125679") or countryCode (2-character ISO country code).
     * @param queryType The type of the query. By default originType=position, specified as a comma separated string
     *     composed by latitude followed by longitude, e.g. "47.641268,-122.125679”.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Metro Area call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MetroAreaResponse> getMetroAreaPreview(
            ResponseFormat format, String query, MetroAreaQueryType queryType, String language) {
        return this.serviceClient.getMetroAreaPreviewAsync(format, query, queryType, language);
    }

    /**
     * **Metro Area API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Service allows users to request metro areas in which the Azure Maps Mobility Service is available. The service
     * supports filtering results by country or coordinate location. Information returned includes Metro Area details
     * such as metro Id, name and a representation of the metro area geometry in GeoJSON format.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The applicable location input. Can be position (specified as a comma separated string composed by
     *     latitude followed by longitude e.g. "47.641268,-122.125679") or countryCode (2-character ISO country code).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Metro Area call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MetroAreaResponse> getMetroAreaPreview(ResponseFormat format, String query) {
        return this.serviceClient.getMetroAreaPreviewAsync(format, query);
    }

    /**
     * **Metro Area Info API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Service allows users to request additional information for metro areas in which the Azure Maps Mobility
     * services are available. Information such as supported transit types, transit agencies and active alerts is
     * available, depending on the options selected. Also, the service returns information if the public transit fare
     * information is available for the requested metro area.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query metroId. The unique id of the metro area. Required parameter specifying the required metro area to
     *     search in. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityTransitRoute).
     * @param detailType Specify details requested respective to the metro area as a comma separated list. Supported
     *     values are: * `agencies` - Return a list of all public transit agencies operating in the given metro area. *
     *     `alerts` - Returns a list of all active service alerts, that are defined in the metro or agency level, and
     *     are not connected to a specific line or stop. * `alertDetails` - Applicable only when alerts are requested.
     *     Returns details of the alerts. * `transitTypes` - Returns a list of all supported transit types in the given
     *     metro area.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Metro Area Info call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MetroAreaInfoResponse>> getMetroAreaInfoPreviewWithResponse(
            ResponseFormat format, int query, List<MetroAreaDetailType> detailType, String language) {
        return this.serviceClient.getMetroAreaInfoPreviewWithResponseAsync(format, query, detailType, language);
    }

    /**
     * **Metro Area Info API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Service allows users to request additional information for metro areas in which the Azure Maps Mobility
     * services are available. Information such as supported transit types, transit agencies and active alerts is
     * available, depending on the options selected. Also, the service returns information if the public transit fare
     * information is available for the requested metro area.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query metroId. The unique id of the metro area. Required parameter specifying the required metro area to
     *     search in. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityTransitRoute).
     * @param detailType Specify details requested respective to the metro area as a comma separated list. Supported
     *     values are: * `agencies` - Return a list of all public transit agencies operating in the given metro area. *
     *     `alerts` - Returns a list of all active service alerts, that are defined in the metro or agency level, and
     *     are not connected to a specific line or stop. * `alertDetails` - Applicable only when alerts are requested.
     *     Returns details of the alerts. * `transitTypes` - Returns a list of all supported transit types in the given
     *     metro area.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Metro Area Info call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MetroAreaInfoResponse> getMetroAreaInfoPreview(
            ResponseFormat format, int query, List<MetroAreaDetailType> detailType, String language) {
        return this.serviceClient.getMetroAreaInfoPreviewAsync(format, query, detailType, language);
    }

    /**
     * **Metro Area Info API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Service allows users to request additional information for metro areas in which the Azure Maps Mobility
     * services are available. Information such as supported transit types, transit agencies and active alerts is
     * available, depending on the options selected. Also, the service returns information if the public transit fare
     * information is available for the requested metro area.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query metroId. The unique id of the metro area. Required parameter specifying the required metro area to
     *     search in. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityTransitRoute).
     * @param detailType Specify details requested respective to the metro area as a comma separated list. Supported
     *     values are: * `agencies` - Return a list of all public transit agencies operating in the given metro area. *
     *     `alerts` - Returns a list of all active service alerts, that are defined in the metro or agency level, and
     *     are not connected to a specific line or stop. * `alertDetails` - Applicable only when alerts are requested.
     *     Returns details of the alerts. * `transitTypes` - Returns a list of all supported transit types in the given
     *     metro area.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Metro Area Info call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MetroAreaInfoResponse> getMetroAreaInfoPreview(
            ResponseFormat format, int query, List<MetroAreaDetailType> detailType) {
        return this.serviceClient.getMetroAreaInfoPreviewAsync(format, query, detailType);
    }

    /**
     * **Find Nearby Transit API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Nearby Transit service allows you to search public transit stops around a given location returning the
     * transit object details. Service allows users to search for public transit stops within a given radius returning a
     * set of stops with stop details. Additional information such as transit operator information is returned depending
     * on the options selected. The returned information can be used for further processing such as requesting
     * [real-time arrivals](https://aka.ms/AzureMapsMobilityRealTimeArrivals) for the stop or [transit stop
     * details](https://aka.ms/AzureMapsMobilityTransitStop) such as main transit type of most lines stopping for a
     * given public, active service alerts or main transport agency.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Location input from user. The applicable location query specified as a comma separated string
     *     composed by latitude followed by longitude e.g. "47.641268,-122.125679".
     * @param metroId The unique id of the metro area. Can be retrieved via [Get Metro Area
     *     API](https://aka.ms/AzureMapsMobilityMetro).
     * @param limit Maximum number of responses that will be returned. Default is 3, minimum 1 and maximum 100. Sort
     *     order is based on distance from input location.
     * @param radius Specifies the search area to constrain a search. The radius in meters to for the results to be
     *     constrained to the defined area. Default value is 30 meters, minimum 1 meter and maximum 5000 meters (5km).
     * @param objectType The transit object type. By default, objectType is set to `stop`.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Nearby Transit call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<NearbyTransitResponse>> getNearbyTransitPreviewWithResponse(
            ResponseFormat format,
            String query,
            Integer metroId,
            Integer limit,
            Integer radius,
            String objectType,
            String language) {
        return this.serviceClient.getNearbyTransitPreviewWithResponseAsync(
                format, query, metroId, limit, radius, objectType, language);
    }

    /**
     * **Find Nearby Transit API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Nearby Transit service allows you to search public transit stops around a given location returning the
     * transit object details. Service allows users to search for public transit stops within a given radius returning a
     * set of stops with stop details. Additional information such as transit operator information is returned depending
     * on the options selected. The returned information can be used for further processing such as requesting
     * [real-time arrivals](https://aka.ms/AzureMapsMobilityRealTimeArrivals) for the stop or [transit stop
     * details](https://aka.ms/AzureMapsMobilityTransitStop) such as main transit type of most lines stopping for a
     * given public, active service alerts or main transport agency.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Location input from user. The applicable location query specified as a comma separated string
     *     composed by latitude followed by longitude e.g. "47.641268,-122.125679".
     * @param metroId The unique id of the metro area. Can be retrieved via [Get Metro Area
     *     API](https://aka.ms/AzureMapsMobilityMetro).
     * @param limit Maximum number of responses that will be returned. Default is 3, minimum 1 and maximum 100. Sort
     *     order is based on distance from input location.
     * @param radius Specifies the search area to constrain a search. The radius in meters to for the results to be
     *     constrained to the defined area. Default value is 30 meters, minimum 1 meter and maximum 5000 meters (5km).
     * @param objectType The transit object type. By default, objectType is set to `stop`.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Nearby Transit call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NearbyTransitResponse> getNearbyTransitPreview(
            ResponseFormat format,
            String query,
            Integer metroId,
            Integer limit,
            Integer radius,
            String objectType,
            String language) {
        return this.serviceClient.getNearbyTransitPreviewAsync(
                format, query, metroId, limit, radius, objectType, language);
    }

    /**
     * **Find Nearby Transit API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Nearby Transit service allows you to search public transit stops around a given location returning the
     * transit object details. Service allows users to search for public transit stops within a given radius returning a
     * set of stops with stop details. Additional information such as transit operator information is returned depending
     * on the options selected. The returned information can be used for further processing such as requesting
     * [real-time arrivals](https://aka.ms/AzureMapsMobilityRealTimeArrivals) for the stop or [transit stop
     * details](https://aka.ms/AzureMapsMobilityTransitStop) such as main transit type of most lines stopping for a
     * given public, active service alerts or main transport agency.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Location input from user. The applicable location query specified as a comma separated string
     *     composed by latitude followed by longitude e.g. "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Nearby Transit call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NearbyTransitResponse> getNearbyTransitPreview(ResponseFormat format, String query) {
        return this.serviceClient.getNearbyTransitPreviewAsync(format, query);
    }

    /**
     * **Transit Line Info API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Your scenario might require requesting transit line specific data such as stops and line geometry. Transit
     * Line Info service allows you to request line group by line group id returning a line group comprised a set of
     * lines. Additional information such as 24 hours static schedule, active alerts for the line group and line
     * patterns is also available, depending on the options selected. Mobility services uses a parallel data model for
     * public transit lines and line groups. Usually line group contains 2 lines, one going from A to B, and the other
     * returning from B to A, both operating by the same Public Transport Agency having the same line number. We
     * recommend you review our guidance [article](https://aka.ms/AMapsPublicTRansitConcepts) to understand the concepts
     * of lines and line groups.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query lineGroupId, for example,'666074'. Typically contains 2 lines having the same agency and line, one
     *     going from A to B, and the other from B to A.
     * @param metroId The unique id of the metro area. Can be retrieved via [Get Metro Area
     *     API](https://aka.ms/AzureMapsMobilityMetro).
     * @param detailType Specify additional details requested respective to the line group as a comma separated list. As
     *     a default service returns line basic info. Supported values are: * `alerts` - Return any active service
     *     alerts for the specified stop. Response provides brief information for disruption in service and all basic
     *     data associated with the alert. * `alertDetails` - Can only be used in conjunction with
     *     detailType=alerts.Return additional details associated with the active service alerts. * `lines` - Return
     *     transit lines that stops at the specified stop. * `stops` - Return list of stops the line group goes through.
     *     * `schedule` - Return a 24h static schedule for the specified line group from the current time of the day to
     *     the end of the current day. * `patterns` - Return list of patterns this group is comprised of. A pattern
     *     consists of a stop sequence and shape per line.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Transit Line Info call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TransitLineInfoResponse>> getTransitLineInfoPreviewWithResponse(
            ResponseFormat format,
            String query,
            Integer metroId,
            List<TransitLineDetailType> detailType,
            String language) {
        return this.serviceClient.getTransitLineInfoPreviewWithResponseAsync(
                format, query, metroId, detailType, language);
    }

    /**
     * **Transit Line Info API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Your scenario might require requesting transit line specific data such as stops and line geometry. Transit
     * Line Info service allows you to request line group by line group id returning a line group comprised a set of
     * lines. Additional information such as 24 hours static schedule, active alerts for the line group and line
     * patterns is also available, depending on the options selected. Mobility services uses a parallel data model for
     * public transit lines and line groups. Usually line group contains 2 lines, one going from A to B, and the other
     * returning from B to A, both operating by the same Public Transport Agency having the same line number. We
     * recommend you review our guidance [article](https://aka.ms/AMapsPublicTRansitConcepts) to understand the concepts
     * of lines and line groups.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query lineGroupId, for example,'666074'. Typically contains 2 lines having the same agency and line, one
     *     going from A to B, and the other from B to A.
     * @param metroId The unique id of the metro area. Can be retrieved via [Get Metro Area
     *     API](https://aka.ms/AzureMapsMobilityMetro).
     * @param detailType Specify additional details requested respective to the line group as a comma separated list. As
     *     a default service returns line basic info. Supported values are: * `alerts` - Return any active service
     *     alerts for the specified stop. Response provides brief information for disruption in service and all basic
     *     data associated with the alert. * `alertDetails` - Can only be used in conjunction with
     *     detailType=alerts.Return additional details associated with the active service alerts. * `lines` - Return
     *     transit lines that stops at the specified stop. * `stops` - Return list of stops the line group goes through.
     *     * `schedule` - Return a 24h static schedule for the specified line group from the current time of the day to
     *     the end of the current day. * `patterns` - Return list of patterns this group is comprised of. A pattern
     *     consists of a stop sequence and shape per line.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Transit Line Info call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TransitLineInfoResponse> getTransitLineInfoPreview(
            ResponseFormat format,
            String query,
            Integer metroId,
            List<TransitLineDetailType> detailType,
            String language) {
        return this.serviceClient.getTransitLineInfoPreviewAsync(format, query, metroId, detailType, language);
    }

    /**
     * **Transit Line Info API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Your scenario might require requesting transit line specific data such as stops and line geometry. Transit
     * Line Info service allows you to request line group by line group id returning a line group comprised a set of
     * lines. Additional information such as 24 hours static schedule, active alerts for the line group and line
     * patterns is also available, depending on the options selected. Mobility services uses a parallel data model for
     * public transit lines and line groups. Usually line group contains 2 lines, one going from A to B, and the other
     * returning from B to A, both operating by the same Public Transport Agency having the same line number. We
     * recommend you review our guidance [article](https://aka.ms/AMapsPublicTRansitConcepts) to understand the concepts
     * of lines and line groups.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query lineGroupId, for example,'666074'. Typically contains 2 lines having the same agency and line, one
     *     going from A to B, and the other from B to A.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Transit Line Info call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TransitLineInfoResponse> getTransitLineInfoPreview(ResponseFormat format, String query) {
        return this.serviceClient.getTransitLineInfoPreviewAsync(format, query);
    }

    /**
     * **Transit Stop Info API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Transit Stop Info service allows you to request information for a given public transit stop. Basic
     * information returned includes details such as main transit type of most lines stopping for a given public and
     * main transport agency. Additional details such as stop lines and active service alerts for specified stop are
     * also available, depending on the options selected.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The stopId or stopKey for which the user is requesting transit stop details.
     * @param metroId The unique id of the metro area. Can be retrieved via [Get Metro Area
     *     API](https://aka.ms/AzureMapsMobilityMetro).
     * @param queryType The type of the unique query parameter of the stop. By default queryType=stopId.
     * @param detailType Specify additional details requested respective to the transit stop as a comma separated list.
     *     Supported values are: * `alerts` - Return any active service alerts for the specified stop. Response provides
     *     brief information for disruption in service and all basic data associated with the alert. * `alertDetails` -
     *     Can only be used in conjunction with detailType=alerts.Return additional details associated with the active
     *     service alerts. * `lines` - Return transit lines that stops at the specified stop. * `lineGroups` - Return
     *     line groups that stops at the specified stop.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Transit Stop Info call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TransitStopInfoResponse>> getTransitStopInfoPreviewWithResponse(
            ResponseFormat format,
            String query,
            Integer metroId,
            TransitStopQueryType queryType,
            List<TransitStopDetailType> detailType,
            String language) {
        return this.serviceClient.getTransitStopInfoPreviewWithResponseAsync(
                format, query, metroId, queryType, detailType, language);
    }

    /**
     * **Transit Stop Info API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Transit Stop Info service allows you to request information for a given public transit stop. Basic
     * information returned includes details such as main transit type of most lines stopping for a given public and
     * main transport agency. Additional details such as stop lines and active service alerts for specified stop are
     * also available, depending on the options selected.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The stopId or stopKey for which the user is requesting transit stop details.
     * @param metroId The unique id of the metro area. Can be retrieved via [Get Metro Area
     *     API](https://aka.ms/AzureMapsMobilityMetro).
     * @param queryType The type of the unique query parameter of the stop. By default queryType=stopId.
     * @param detailType Specify additional details requested respective to the transit stop as a comma separated list.
     *     Supported values are: * `alerts` - Return any active service alerts for the specified stop. Response provides
     *     brief information for disruption in service and all basic data associated with the alert. * `alertDetails` -
     *     Can only be used in conjunction with detailType=alerts.Return additional details associated with the active
     *     service alerts. * `lines` - Return transit lines that stops at the specified stop. * `lineGroups` - Return
     *     line groups that stops at the specified stop.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Transit Stop Info call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TransitStopInfoResponse> getTransitStopInfoPreview(
            ResponseFormat format,
            String query,
            Integer metroId,
            TransitStopQueryType queryType,
            List<TransitStopDetailType> detailType,
            String language) {
        return this.serviceClient.getTransitStopInfoPreviewAsync(
                format, query, metroId, queryType, detailType, language);
    }

    /**
     * **Transit Stop Info API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Transit Stop Info service allows you to request information for a given public transit stop. Basic
     * information returned includes details such as main transit type of most lines stopping for a given public and
     * main transport agency. Additional details such as stop lines and active service alerts for specified stop are
     * also available, depending on the options selected.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The stopId or stopKey for which the user is requesting transit stop details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Transit Stop Info call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TransitStopInfoResponse> getTransitStopInfoPreview(ResponseFormat format, String query) {
        return this.serviceClient.getTransitStopInfoPreviewAsync(format, query);
    }

    /**
     * **Transit Route API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Transit Route API will allow trip planning returning the best possible route options between an origin and
     * destination by using multi-modal search. Service provides a variety of travel modes, including walk, bike, and
     * public transit. The API supports parameters to request one or multiple public transit types such as bus, tram and
     * subway, and prefer a specific transit agency operating in the area. Also, service provides transit fare details
     * and options to choose optimal route with least walk or transfers and specify arrival or departure times when user
     * need to be at a specific destination by a certain time.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param origin The origin of the route. By default originType=position, specified as a comma separated string
     *     composed by latitude followed by longitude, e.g. "47.641268,-122.125679”.
     * @param destination The destination of the route. By default the destinationType=position, specified as a comma
     *     separated string composed by latitude followed by longitude, e.g. "47.641268,-122.125679”.
     * @param metroId The unique id of the metro area. Can be retrieved via [Get Metro Area
     *     API](https://aka.ms/AzureMapsMobilityMetro).
     * @param originType The type of the origin. By default originType=position, specified as a comma separated string
     *     composed by latitude followed by longitude, e.g., "47.641268,-122.125679”.
     * @param destinationType The type of the destination.
     * @param modeType The mode of travel for the requested route; as comma separated list. If not specified, all modes
     *     will be allowed. All modes might not be available in all metro areas. If valid trip is not found, empty
     *     result will be returned. Supported values are: * `walk` - Walk (pedestrian) * `bike` - Bike * `publicTransit`
     *     - Public transit.
     * @param transitType Applicable only with modeType = publicTransit. Allow only a specific set of public transit
     *     types (as a comma separated list) to be returned for the route. Note that the requested transitType may not
     *     be available for the entire route. If not specified, all modes will be allowed. Supported values are: * `bus`
     *     - Bus * `cableCar` - Cable car * `ferry` - Ferry * `funicular` - Funicular * `gondola` - Gondola * `rail` -
     *     Rail * `tram` - Tram * `subway` - Subway/Metro.
     * @param agency Specifies whether to prefer routes from a specific set of agencies if possible; as a comma
     *     separated list. If valid trip isn’t found with the preferred agency, or only one with very long trips or with
     *     large number of transfers, itineraries with other agencies will be returned.
     * @param agencyType Specifies the agency identifier to request routes from preferred agencies. By default the
     *     agencyType=agencyId.
     * @param time The time of departure or arrival in the local time in ISO format (2019-04-05T14:24:18-04:00). If
     *     timeType is not specified, it will be assumed to be 'departure' and time is the current local time at the
     *     origin point.
     * @param timeType Specifies whether the time signifies departure time or arrival time. If not defined, default
     *     value is 'departure'.
     * @param routeType The type of route requested. If not specified, 'optimal' will be used.
     * @param bikeType Bike type of the bike. Specifies which type of bikes will be used. Only private bikes are
     *     supported.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Transit Stop Info call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TransitRouteResponse>> getTransitRoutePreviewWithResponse(
            ResponseFormat format,
            String origin,
            String destination,
            Integer metroId,
            OriginType originType,
            DestinationType destinationType,
            List<ModeType> modeType,
            List<TransitTypeFilter> transitType,
            List<String> agency,
            AgencyType agencyType,
            String time,
            TimeType timeType,
            TransitRouteType routeType,
            String bikeType,
            String language) {
        return this.serviceClient.getTransitRoutePreviewWithResponseAsync(
                format,
                origin,
                destination,
                metroId,
                originType,
                destinationType,
                modeType,
                transitType,
                agency,
                agencyType,
                time,
                timeType,
                routeType,
                bikeType,
                language);
    }

    /**
     * **Transit Route API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Transit Route API will allow trip planning returning the best possible route options between an origin and
     * destination by using multi-modal search. Service provides a variety of travel modes, including walk, bike, and
     * public transit. The API supports parameters to request one or multiple public transit types such as bus, tram and
     * subway, and prefer a specific transit agency operating in the area. Also, service provides transit fare details
     * and options to choose optimal route with least walk or transfers and specify arrival or departure times when user
     * need to be at a specific destination by a certain time.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param origin The origin of the route. By default originType=position, specified as a comma separated string
     *     composed by latitude followed by longitude, e.g. "47.641268,-122.125679”.
     * @param destination The destination of the route. By default the destinationType=position, specified as a comma
     *     separated string composed by latitude followed by longitude, e.g. "47.641268,-122.125679”.
     * @param metroId The unique id of the metro area. Can be retrieved via [Get Metro Area
     *     API](https://aka.ms/AzureMapsMobilityMetro).
     * @param originType The type of the origin. By default originType=position, specified as a comma separated string
     *     composed by latitude followed by longitude, e.g., "47.641268,-122.125679”.
     * @param destinationType The type of the destination.
     * @param modeType The mode of travel for the requested route; as comma separated list. If not specified, all modes
     *     will be allowed. All modes might not be available in all metro areas. If valid trip is not found, empty
     *     result will be returned. Supported values are: * `walk` - Walk (pedestrian) * `bike` - Bike * `publicTransit`
     *     - Public transit.
     * @param transitType Applicable only with modeType = publicTransit. Allow only a specific set of public transit
     *     types (as a comma separated list) to be returned for the route. Note that the requested transitType may not
     *     be available for the entire route. If not specified, all modes will be allowed. Supported values are: * `bus`
     *     - Bus * `cableCar` - Cable car * `ferry` - Ferry * `funicular` - Funicular * `gondola` - Gondola * `rail` -
     *     Rail * `tram` - Tram * `subway` - Subway/Metro.
     * @param agency Specifies whether to prefer routes from a specific set of agencies if possible; as a comma
     *     separated list. If valid trip isn’t found with the preferred agency, or only one with very long trips or with
     *     large number of transfers, itineraries with other agencies will be returned.
     * @param agencyType Specifies the agency identifier to request routes from preferred agencies. By default the
     *     agencyType=agencyId.
     * @param time The time of departure or arrival in the local time in ISO format (2019-04-05T14:24:18-04:00). If
     *     timeType is not specified, it will be assumed to be 'departure' and time is the current local time at the
     *     origin point.
     * @param timeType Specifies whether the time signifies departure time or arrival time. If not defined, default
     *     value is 'departure'.
     * @param routeType The type of route requested. If not specified, 'optimal' will be used.
     * @param bikeType Bike type of the bike. Specifies which type of bikes will be used. Only private bikes are
     *     supported.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Transit Stop Info call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TransitRouteResponse> getTransitRoutePreview(
            ResponseFormat format,
            String origin,
            String destination,
            Integer metroId,
            OriginType originType,
            DestinationType destinationType,
            List<ModeType> modeType,
            List<TransitTypeFilter> transitType,
            List<String> agency,
            AgencyType agencyType,
            String time,
            TimeType timeType,
            TransitRouteType routeType,
            String bikeType,
            String language) {
        return this.serviceClient.getTransitRoutePreviewAsync(
                format,
                origin,
                destination,
                metroId,
                originType,
                destinationType,
                modeType,
                transitType,
                agency,
                agencyType,
                time,
                timeType,
                routeType,
                bikeType,
                language);
    }

    /**
     * **Transit Route API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Transit Route API will allow trip planning returning the best possible route options between an origin and
     * destination by using multi-modal search. Service provides a variety of travel modes, including walk, bike, and
     * public transit. The API supports parameters to request one or multiple public transit types such as bus, tram and
     * subway, and prefer a specific transit agency operating in the area. Also, service provides transit fare details
     * and options to choose optimal route with least walk or transfers and specify arrival or departure times when user
     * need to be at a specific destination by a certain time.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param origin The origin of the route. By default originType=position, specified as a comma separated string
     *     composed by latitude followed by longitude, e.g. "47.641268,-122.125679”.
     * @param destination The destination of the route. By default the destinationType=position, specified as a comma
     *     separated string composed by latitude followed by longitude, e.g. "47.641268,-122.125679”.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Transit Stop Info call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TransitRouteResponse> getTransitRoutePreview(ResponseFormat format, String origin, String destination) {
        return this.serviceClient.getTransitRoutePreviewAsync(format, origin, destination);
    }

    /**
     * **Transit Itinerary API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Returns data according to an itinerary Id previously returned by [Transit Route
     * API](https://aka.ms/AzureMapsMobilityTransitRoute). The basic info contains data as to the various legs
     * comprising the itinerary, including the locations, public transit lines, start and end times and fare
     * information. Users can request additional routing information such as the shape of the itinerary and detailed
     * itinerary schedules is also available, depending on the options selected. An itinerary is available up to 24
     * hours following a search request.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The unique id (itineraryId) of an itinerary previously returned by [Transit Route
     *     API](https://aka.ms/AzureMapsMobilityTransitRoute).
     * @param detailType Specify additional details returned in the transit route itinerary response, as a comma
     *     separated list. Supported values are: * `geometry` - Shape of an in GeoJSON format. For public transit legs
     *     will return also the stops that the leg passes through. For walk and bike legs, will return also the
     *     turn-by-turn navigation data. * `schedule` - Static schedule data as to all departures of Public Transit legs
     *     from the current time of the day to the end of the current day.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Transit Itinerary call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TransitItineraryResponse>> getTransitItineraryPreviewWithResponse(
            ResponseFormat format, String query, List<TransitItineraryDetailType> detailType, String language) {
        return this.serviceClient.getTransitItineraryPreviewWithResponseAsync(format, query, detailType, language);
    }

    /**
     * **Transit Itinerary API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Returns data according to an itinerary Id previously returned by [Transit Route
     * API](https://aka.ms/AzureMapsMobilityTransitRoute). The basic info contains data as to the various legs
     * comprising the itinerary, including the locations, public transit lines, start and end times and fare
     * information. Users can request additional routing information such as the shape of the itinerary and detailed
     * itinerary schedules is also available, depending on the options selected. An itinerary is available up to 24
     * hours following a search request.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The unique id (itineraryId) of an itinerary previously returned by [Transit Route
     *     API](https://aka.ms/AzureMapsMobilityTransitRoute).
     * @param detailType Specify additional details returned in the transit route itinerary response, as a comma
     *     separated list. Supported values are: * `geometry` - Shape of an in GeoJSON format. For public transit legs
     *     will return also the stops that the leg passes through. For walk and bike legs, will return also the
     *     turn-by-turn navigation data. * `schedule` - Static schedule data as to all departures of Public Transit legs
     *     from the current time of the day to the end of the current day.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Transit Itinerary call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TransitItineraryResponse> getTransitItineraryPreview(
            ResponseFormat format, String query, List<TransitItineraryDetailType> detailType, String language) {
        return this.serviceClient.getTransitItineraryPreviewAsync(format, query, detailType, language);
    }

    /**
     * **Transit Itinerary API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Returns data according to an itinerary Id previously returned by [Transit Route
     * API](https://aka.ms/AzureMapsMobilityTransitRoute). The basic info contains data as to the various legs
     * comprising the itinerary, including the locations, public transit lines, start and end times and fare
     * information. Users can request additional routing information such as the shape of the itinerary and detailed
     * itinerary schedules is also available, depending on the options selected. An itinerary is available up to 24
     * hours following a search request.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query The unique id (itineraryId) of an itinerary previously returned by [Transit Route
     *     API](https://aka.ms/AzureMapsMobilityTransitRoute).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Transit Itinerary call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TransitItineraryResponse> getTransitItineraryPreview(ResponseFormat format, String query) {
        return this.serviceClient.getTransitItineraryPreviewAsync(format, query);
    }

    /**
     * **Real-time Arrivals API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Real Time Arrivals API returns for a given a stop, line or location the requested number of real-time
     * arrivals. Endpoint support different modes to request real-time arrivals such as number of live arrivals for all
     * lines arriving at the specified stop or all arrivals of a line to stops near the user’s location. The API
     * supports parameters to request one or multiple public transit types such as bus, tram and subway, maximum number
     * if arrivals, and prefer a specific transit agency operating in the area. In some cases real-time arrivals may not
     * be available, for example, if arrival is too far in the future or transit vehicle does not have capability to
     * share the real-time location. This is symbolized in a scheduleType field present in all responses.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Stop, line or location identifier.
     * @param metroId The unique id of the metro area. Can be retrieved via [Get Metro Area
     *     API](https://aka.ms/AzureMapsMobilityMetro).
     * @param queryType The type of the query parameter. Defines the mode of the request. Only one mode per request is
     *     supported. By default queryType is set to be ‘stops’ returning the requested number of Live Arrivals for all
     *     lines arriving at the specified stop.
     * @param stopQueryType The type of the unique query parameter of the stop. By default stopQueryType=stopId. This
     *     parameter can only be used in conjunction with queryType=stops or queryType=lineAndStop.
     * @param limit The maximum arrivals to return. If not specified, the system default will be used. For stops max
     *     number of arrivals per stop. For lines max arrivals per stop on the line. For everything else max arrivals
     *     overall.
     * @param maxMinutesInFuture The maximum time (in minutes) in the future to return arrivals for. If not specified,
     *     the system default (30 minutes) will be used. The minimum value is 0 and maximum value is 60 minutes.
     * @param transitType Type of public transit user is requesting respective transit stop, as a comma separated list.
     *     For example, transitType=Bus,Subway. If not specified, all will be allowed. This parameter can only be used
     *     in conjunction with queryType=stops. Supported values are: * `bus` - Bus * `cableCar` - Cable car * `ferry` -
     *     Ferry * `funicular` - Funicular * `gondola` - Gondola * `rail` - Rail * `tram` - Tram * `subway` -
     *     Subway/Metro.
     * @param agency In case you prefer routes from a specific set of agencies to be returned. Specified as a comma
     *     separated string.
     * @param agencyType Specifies the agency identifier to request routes from a specific set of agencies to be
     *     returned. By default the agencyType=agencyId.
     * @param timeoutInSeconds Time in seconds within which if the provider doesn’t respond, end point will return
     *     static data.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Real Time Arrival Info call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RealTimeArrivalsResponse>> getRealTimeArrivalsPreviewWithResponse(
            ResponseFormat format,
            String query,
            Integer metroId,
            RealTimeArrivalsQueryType queryType,
            StopQueryType stopQueryType,
            Integer limit,
            Integer maxMinutesInFuture,
            List<TransitTypeFilter> transitType,
            List<String> agency,
            AgencyType agencyType,
            Integer timeoutInSeconds,
            String language) {
        return this.serviceClient.getRealTimeArrivalsPreviewWithResponseAsync(
                format,
                query,
                metroId,
                queryType,
                stopQueryType,
                limit,
                maxMinutesInFuture,
                transitType,
                agency,
                agencyType,
                timeoutInSeconds,
                language);
    }

    /**
     * **Real-time Arrivals API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Real Time Arrivals API returns for a given a stop, line or location the requested number of real-time
     * arrivals. Endpoint support different modes to request real-time arrivals such as number of live arrivals for all
     * lines arriving at the specified stop or all arrivals of a line to stops near the user’s location. The API
     * supports parameters to request one or multiple public transit types such as bus, tram and subway, maximum number
     * if arrivals, and prefer a specific transit agency operating in the area. In some cases real-time arrivals may not
     * be available, for example, if arrival is too far in the future or transit vehicle does not have capability to
     * share the real-time location. This is symbolized in a scheduleType field present in all responses.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Stop, line or location identifier.
     * @param metroId The unique id of the metro area. Can be retrieved via [Get Metro Area
     *     API](https://aka.ms/AzureMapsMobilityMetro).
     * @param queryType The type of the query parameter. Defines the mode of the request. Only one mode per request is
     *     supported. By default queryType is set to be ‘stops’ returning the requested number of Live Arrivals for all
     *     lines arriving at the specified stop.
     * @param stopQueryType The type of the unique query parameter of the stop. By default stopQueryType=stopId. This
     *     parameter can only be used in conjunction with queryType=stops or queryType=lineAndStop.
     * @param limit The maximum arrivals to return. If not specified, the system default will be used. For stops max
     *     number of arrivals per stop. For lines max arrivals per stop on the line. For everything else max arrivals
     *     overall.
     * @param maxMinutesInFuture The maximum time (in minutes) in the future to return arrivals for. If not specified,
     *     the system default (30 minutes) will be used. The minimum value is 0 and maximum value is 60 minutes.
     * @param transitType Type of public transit user is requesting respective transit stop, as a comma separated list.
     *     For example, transitType=Bus,Subway. If not specified, all will be allowed. This parameter can only be used
     *     in conjunction with queryType=stops. Supported values are: * `bus` - Bus * `cableCar` - Cable car * `ferry` -
     *     Ferry * `funicular` - Funicular * `gondola` - Gondola * `rail` - Rail * `tram` - Tram * `subway` -
     *     Subway/Metro.
     * @param agency In case you prefer routes from a specific set of agencies to be returned. Specified as a comma
     *     separated string.
     * @param agencyType Specifies the agency identifier to request routes from a specific set of agencies to be
     *     returned. By default the agencyType=agencyId.
     * @param timeoutInSeconds Time in seconds within which if the provider doesn’t respond, end point will return
     *     static data.
     * @param language Language in which search results will be returned. Only NGT is supported. Please refer to
     *     [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Real Time Arrival Info call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RealTimeArrivalsResponse> getRealTimeArrivalsPreview(
            ResponseFormat format,
            String query,
            Integer metroId,
            RealTimeArrivalsQueryType queryType,
            StopQueryType stopQueryType,
            Integer limit,
            Integer maxMinutesInFuture,
            List<TransitTypeFilter> transitType,
            List<String> agency,
            AgencyType agencyType,
            Integer timeoutInSeconds,
            String language) {
        return this.serviceClient.getRealTimeArrivalsPreviewAsync(
                format,
                query,
                metroId,
                queryType,
                stopQueryType,
                limit,
                maxMinutesInFuture,
                transitType,
                agency,
                agencyType,
                timeoutInSeconds,
                language);
    }

    /**
     * **Real-time Arrivals API**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Real Time Arrivals API returns for a given a stop, line or location the requested number of real-time
     * arrivals. Endpoint support different modes to request real-time arrivals such as number of live arrivals for all
     * lines arriving at the specified stop or all arrivals of a line to stops near the user’s location. The API
     * supports parameters to request one or multiple public transit types such as bus, tram and subway, maximum number
     * if arrivals, and prefer a specific transit agency operating in the area. In some cases real-time arrivals may not
     * be available, for example, if arrival is too far in the future or transit vehicle does not have capability to
     * share the real-time location. This is symbolized in a scheduleType field present in all responses.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Stop, line or location identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Real Time Arrival Info call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RealTimeArrivalsResponse> getRealTimeArrivalsPreview(ResponseFormat format, String query) {
        return this.serviceClient.getRealTimeArrivalsPreviewAsync(format, query);
    }
}
