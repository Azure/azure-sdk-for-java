// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.service.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The geofencing geometry. */
@Immutable
public final class GeofenceGeometry {
    /*
     * ID of the device.
     */
    @JsonProperty(value = "deviceId", access = JsonProperty.Access.WRITE_ONLY)
    private String deviceId;

    /*
     * The unique id returned from [Data Upload
     * API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview)
     * after uploading a valid GeoJSON FeatureCollection object. Please refer
     * to  [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for
     * details. All the feature's properties should  contain `geometryId`,
     * which is used for identifying the geometry and is case-sensitive.
     */
    @JsonProperty(value = "udId", access = JsonProperty.Access.WRITE_ONLY)
    private String udId;

    /*
     * The unique id identifies a geometry.
     */
    @JsonProperty(value = "geometryId", access = JsonProperty.Access.WRITE_ONLY)
    private String geometryId;

    /*
     * Distance from the coordinate to the closest border of the geofence.
     * Positive means the  coordinate is outside of the geofence. If the
     * coordinate is outside of the geofence, but more than the value of
     * searchBuffer away from the closest geofence border, then the value is
     * 999. Negative means the coordinate is inside of the geofence. If the
     * coordinate is inside the polygon, but more than the value of
     * searchBuffer away from the closest geofencing border, then the value is
     * -999. A value of 999 means that there is great confidence the coordinate
     * is well outside the geofence. A value of -999 means that there is great
     * confidence the coordinate is well within the geofence.
     */
    @JsonProperty(value = "distance", access = JsonProperty.Access.WRITE_ONLY)
    private Float distance;

    /*
     * Latitude of the nearest point of the geometry.
     */
    @JsonProperty(value = "nearestLat", access = JsonProperty.Access.WRITE_ONLY)
    private Float nearestLat;

    /*
     * Longitude of the nearest point of the geometry.
     */
    @JsonProperty(value = "nearestLon", access = JsonProperty.Access.WRITE_ONLY)
    private Float nearestLon;

    /*
     * Sea level in meter of the nearest point on the 2D extrusion geometry.
     * This will only be presented in response when value is provided for
     * 'zInMeter' in the request.
     */
    @JsonProperty(value = "nearestZ", access = JsonProperty.Access.WRITE_ONLY)
    private Float nearestZ;

    /**
     * Get the deviceId property: ID of the device.
     *
     * @return the deviceId value.
     */
    public String getDeviceId() {
        return this.deviceId;
    }

    /**
     * Get the udId property: The unique id returned from [Data Upload
     * API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) after uploading a valid GeoJSON
     * FeatureCollection object. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for
     * details. All the feature's properties should contain `geometryId`, which is used for identifying the geometry and
     * is case-sensitive.
     *
     * @return the udId value.
     */
    public String getUdId() {
        return this.udId;
    }

    /**
     * Get the geometryId property: The unique id identifies a geometry.
     *
     * @return the geometryId value.
     */
    public String getGeometryId() {
        return this.geometryId;
    }

    /**
     * Get the distance property: Distance from the coordinate to the closest border of the geofence. Positive means the
     * coordinate is outside of the geofence. If the coordinate is outside of the geofence, but more than the value of
     * searchBuffer away from the closest geofence border, then the value is 999. Negative means the coordinate is
     * inside of the geofence. If the coordinate is inside the polygon, but more than the value of searchBuffer away
     * from the closest geofencing border, then the value is -999. A value of 999 means that there is great confidence
     * the coordinate is well outside the geofence. A value of -999 means that there is great confidence the coordinate
     * is well within the geofence.
     *
     * @return the distance value.
     */
    public Float getDistance() {
        return this.distance;
    }

    /**
     * Get the nearestLat property: Latitude of the nearest point of the geometry.
     *
     * @return the nearestLat value.
     */
    public Float getNearestLat() {
        return this.nearestLat;
    }

    /**
     * Get the nearestLon property: Longitude of the nearest point of the geometry.
     *
     * @return the nearestLon value.
     */
    public Float getNearestLon() {
        return this.nearestLon;
    }

    /**
     * Get the nearestZ property: Sea level in meter of the nearest point on the 2D extrusion geometry. This will only
     * be presented in response when value is provided for 'zInMeter' in the request.
     *
     * @return the nearestZ value.
     */
    public Float getNearestZ() {
        return this.nearestZ;
    }
}
