// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.service.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The ForecastInterval model. */
@Fluent
public final class ForecastInterval {
    /*
     * The date and time for the start of the interval in ISO 8601 format, for
     * example, 2019-10-27T19:39:57-08:00.
     */
    @JsonProperty(value = "startTime")
    private String startTime;

    /*
     * The first minute for the interval.
     */
    @JsonProperty(value = "minute")
    private Integer minute;

    /*
     * A unit that represents forecasted precipitation intensity.
     */
    @JsonProperty(value = "dbz")
    private Double dbz;

    /*
     * A short phrase describing precipitation condition for the interval.
     */
    @JsonProperty(value = "shortPhrase")
    private String shortPhrase;

    /*
     * Key that specifies the threshold value. Along with precipitationType,
     * can be used to determine the simplifiedColor. If dbz is zero, not
     * present in the response.
     */
    @JsonProperty(value = "threshold")
    private String threshold;

    /*
     * The full spectrum color that maps to the dBZ (decibel relative to Z). If
     * dbz is zero, color is not present in the response.
     */
    @JsonProperty(value = "color")
    private ColorValue color;

    /*
     * The band color that maps to the precipitation type and threshold. If dbz
     * is zero, not present in the response.
     */
    @JsonProperty(value = "simplifiedColor")
    private ColorValue simplifiedColor;

    /*
     * Specifies the type of precipitation ("rain" "snow" "ice" or "mix"). If
     * dbz is zero, precipitationType is not present in the response.
     */
    @JsonProperty(value = "precipitationType")
    private String precipitationType;

    /*
     * Numeric value representing an image that displays the `iconPhrase`.
     * Please refer to [Weather Service
     * Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
     */
    @JsonProperty(value = "iconCode")
    private Integer iconCode;

    /*
     * Percent representing cloud cover.
     */
    @JsonProperty(value = "cloudCover")
    private Integer cloudCover;

    /**
     * Get the startTime property: The date and time for the start of the interval in ISO 8601 format, for example,
     * 2019-10-27T19:39:57-08:00.
     *
     * @return the startTime value.
     */
    public String getStartTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The date and time for the start of the interval in ISO 8601 format, for example,
     * 2019-10-27T19:39:57-08:00.
     *
     * @param startTime the startTime value to set.
     * @return the ForecastInterval object itself.
     */
    public ForecastInterval setStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the minute property: The first minute for the interval.
     *
     * @return the minute value.
     */
    public Integer getMinute() {
        return this.minute;
    }

    /**
     * Set the minute property: The first minute for the interval.
     *
     * @param minute the minute value to set.
     * @return the ForecastInterval object itself.
     */
    public ForecastInterval setMinute(Integer minute) {
        this.minute = minute;
        return this;
    }

    /**
     * Get the dbz property: A unit that represents forecasted precipitation intensity.
     *
     * @return the dbz value.
     */
    public Double getDbz() {
        return this.dbz;
    }

    /**
     * Set the dbz property: A unit that represents forecasted precipitation intensity.
     *
     * @param dbz the dbz value to set.
     * @return the ForecastInterval object itself.
     */
    public ForecastInterval setDbz(Double dbz) {
        this.dbz = dbz;
        return this;
    }

    /**
     * Get the shortPhrase property: A short phrase describing precipitation condition for the interval.
     *
     * @return the shortPhrase value.
     */
    public String getShortPhrase() {
        return this.shortPhrase;
    }

    /**
     * Set the shortPhrase property: A short phrase describing precipitation condition for the interval.
     *
     * @param shortPhrase the shortPhrase value to set.
     * @return the ForecastInterval object itself.
     */
    public ForecastInterval setShortPhrase(String shortPhrase) {
        this.shortPhrase = shortPhrase;
        return this;
    }

    /**
     * Get the threshold property: Key that specifies the threshold value. Along with precipitationType, can be used to
     * determine the simplifiedColor. If dbz is zero, not present in the response.
     *
     * @return the threshold value.
     */
    public String getThreshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: Key that specifies the threshold value. Along with precipitationType, can be used to
     * determine the simplifiedColor. If dbz is zero, not present in the response.
     *
     * @param threshold the threshold value to set.
     * @return the ForecastInterval object itself.
     */
    public ForecastInterval setThreshold(String threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Get the color property: The full spectrum color that maps to the dBZ (decibel relative to Z). If dbz is zero,
     * color is not present in the response.
     *
     * @return the color value.
     */
    public ColorValue getColor() {
        return this.color;
    }

    /**
     * Set the color property: The full spectrum color that maps to the dBZ (decibel relative to Z). If dbz is zero,
     * color is not present in the response.
     *
     * @param color the color value to set.
     * @return the ForecastInterval object itself.
     */
    public ForecastInterval setColor(ColorValue color) {
        this.color = color;
        return this;
    }

    /**
     * Get the simplifiedColor property: The band color that maps to the precipitation type and threshold. If dbz is
     * zero, not present in the response.
     *
     * @return the simplifiedColor value.
     */
    public ColorValue getSimplifiedColor() {
        return this.simplifiedColor;
    }

    /**
     * Set the simplifiedColor property: The band color that maps to the precipitation type and threshold. If dbz is
     * zero, not present in the response.
     *
     * @param simplifiedColor the simplifiedColor value to set.
     * @return the ForecastInterval object itself.
     */
    public ForecastInterval setSimplifiedColor(ColorValue simplifiedColor) {
        this.simplifiedColor = simplifiedColor;
        return this;
    }

    /**
     * Get the precipitationType property: Specifies the type of precipitation ("rain" "snow" "ice" or "mix"). If dbz is
     * zero, precipitationType is not present in the response.
     *
     * @return the precipitationType value.
     */
    public String getPrecipitationType() {
        return this.precipitationType;
    }

    /**
     * Set the precipitationType property: Specifies the type of precipitation ("rain" "snow" "ice" or "mix"). If dbz is
     * zero, precipitationType is not present in the response.
     *
     * @param precipitationType the precipitationType value to set.
     * @return the ForecastInterval object itself.
     */
    public ForecastInterval setPrecipitationType(String precipitationType) {
        this.precipitationType = precipitationType;
        return this;
    }

    /**
     * Get the iconCode property: Numeric value representing an image that displays the `iconPhrase`. Please refer to
     * [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
     *
     * @return the iconCode value.
     */
    public Integer getIconCode() {
        return this.iconCode;
    }

    /**
     * Set the iconCode property: Numeric value representing an image that displays the `iconPhrase`. Please refer to
     * [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
     *
     * @param iconCode the iconCode value to set.
     * @return the ForecastInterval object itself.
     */
    public ForecastInterval setIconCode(Integer iconCode) {
        this.iconCode = iconCode;
        return this;
    }

    /**
     * Get the cloudCover property: Percent representing cloud cover.
     *
     * @return the cloudCover value.
     */
    public Integer getCloudCover() {
        return this.cloudCover;
    }

    /**
     * Set the cloudCover property: Percent representing cloud cover.
     *
     * @param cloudCover the cloudCover value to set.
     * @return the ForecastInterval object itself.
     */
    public ForecastInterval setCloudCover(Integer cloudCover) {
        this.cloudCover = cloudCover;
        return this;
    }
}
