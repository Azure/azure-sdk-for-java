// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.service;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.maps.service.models.CoordinatesPairAbbreviated;
import com.azure.maps.service.models.ElevationResult;
import com.azure.maps.service.models.ErrorResponseException;
import com.azure.maps.service.models.JsonFormat;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Elevations. */
public final class Elevations {
    /** The proxy service used to perform REST calls. */
    private final ElevationsService service;

    /** The service client containing this operation class. */
    private final MapsClient client;

    /**
     * Initializes an instance of Elevations.
     *
     * @param client the instance of the service client containing this operation class.
     */
    Elevations(MapsClient client) {
        this.service =
                RestProxy.create(ElevationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MapsClientElevations to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MapsClientElevations")
    private interface ElevationsService {
        @Get("/elevation/point/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ElevationResult>> getDataForPoints(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") JsonFormat format,
                @QueryParam("points") String points,
                @HeaderParam("Accept") String accept);

        @Post("/elevation/point/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ElevationResult>> postDataForPoints(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") JsonFormat format,
                @BodyParam("application/json") List<CoordinatesPairAbbreviated> pointsRequestBody,
                @HeaderParam("Accept") String accept);

        @Get("/elevation/line/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ElevationResult>> getDataForPolyline(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") JsonFormat format,
                @QueryParam("lines") String lines,
                @QueryParam("samples") Float samples,
                @HeaderParam("Accept") String accept);

        @Post("/elevation/line/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ElevationResult>> postDataForPolyline(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") JsonFormat format,
                @QueryParam("samples") Float samples,
                @BodyParam("application/json") List<CoordinatesPairAbbreviated> linesRequestBody,
                @HeaderParam("Accept") String accept);

        @Get("/elevation/lattice/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ErrorResponseException.class,
                code = {400, 400, 401, 401, 403, 403, 404, 404, 500, 500})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ElevationResult>> getDataForBoundingBox(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("subscription-key") String subscriptionKey,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") JsonFormat format,
                @QueryParam("bounds") String bounds,
                @QueryParam("rows") float rows,
                @QueryParam("columns") float columns,
                @HeaderParam("Accept") String accept);
    }

    /**
     * **Applies to**: S1 pricing tier. The Get Data for Points API provides elevation data for one or more points. A
     * point is defined in lat,long coordinate format. Due to the URL character length limit of 2048, it's not possible
     * to pass more than 100 coordinates as a pipeline delimited string in a URL GET request. If you intend to pass more
     * than 100 coordinates as a pipeline delimited string, use the [POST Data For
     * Points](https://docs.microsoft.com/en-us/rest/api/maps/elevation/postdataforpoints).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param points The string representation of a list of points. A point is defined in lon/lat WGS84 coordinate
     *     reference system format. If multiple points are requested, each of the points in a list should be separated
     *     by the pipe ('|') character. The maximum number of points that can be requested in a single request is 2,000.
     *     The resolution of the elevation data will be the highest for a single point and will decrease if multiple
     *     points are spread further apart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ElevationResult>> getDataForPointsWithResponseAsync(JsonFormat format, List<String> points) {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        String pointsConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(points, CollectionFormat.PIPES);
        return service.getDataForPoints(
                this.client.getHost(),
                this.client.getXMsClientId(),
                this.client.getSubscriptionKey(),
                apiVersion,
                format,
                pointsConverted,
                accept);
    }

    /**
     * **Applies to**: S1 pricing tier. The Get Data for Points API provides elevation data for one or more points. A
     * point is defined in lat,long coordinate format. Due to the URL character length limit of 2048, it's not possible
     * to pass more than 100 coordinates as a pipeline delimited string in a URL GET request. If you intend to pass more
     * than 100 coordinates as a pipeline delimited string, use the [POST Data For
     * Points](https://docs.microsoft.com/en-us/rest/api/maps/elevation/postdataforpoints).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param points The string representation of a list of points. A point is defined in lon/lat WGS84 coordinate
     *     reference system format. If multiple points are requested, each of the points in a list should be separated
     *     by the pipe ('|') character. The maximum number of points that can be requested in a single request is 2,000.
     *     The resolution of the elevation data will be the highest for a single point and will decrease if multiple
     *     points are spread further apart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ElevationResult> getDataForPointsAsync(JsonFormat format, List<String> points) {
        return getDataForPointsWithResponseAsync(format, points)
                .flatMap(
                        (Response<ElevationResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Applies to**: S1 pricing tier. The Post Data for Points API provides elevation data for multiple points. A
     * point is defined lon/lat coordinate format. Use the POST endpoint only if you intend to pass multiple points in
     * the request. If you intend to pass a single coordinate into the API, use the [GET Data For Points
     * API](https://docs.microsoft.com/en-us/rest/api/maps/elevation/getdataforpoints).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param pointsRequestBody The string representation of a list of points. A point is defined in lon/lat WGS84
     *     coordinate reference system format. Each points in a list should be separated by the pipe ('|') character.
     *     The number of points that can be requested in a POST request ranges from 2 to 2,000. The resolution of the
     *     elevation data will be the highest for a single point and will decrease if multiple points are spread further
     *     apart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ElevationResult>> postDataForPointsWithResponseAsync(
            JsonFormat format, List<CoordinatesPairAbbreviated> pointsRequestBody) {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        return service.postDataForPoints(
                this.client.getHost(),
                this.client.getXMsClientId(),
                this.client.getSubscriptionKey(),
                apiVersion,
                format,
                pointsRequestBody,
                accept);
    }

    /**
     * **Applies to**: S1 pricing tier. The Post Data for Points API provides elevation data for multiple points. A
     * point is defined lon/lat coordinate format. Use the POST endpoint only if you intend to pass multiple points in
     * the request. If you intend to pass a single coordinate into the API, use the [GET Data For Points
     * API](https://docs.microsoft.com/en-us/rest/api/maps/elevation/getdataforpoints).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param pointsRequestBody The string representation of a list of points. A point is defined in lon/lat WGS84
     *     coordinate reference system format. Each points in a list should be separated by the pipe ('|') character.
     *     The number of points that can be requested in a POST request ranges from 2 to 2,000. The resolution of the
     *     elevation data will be the highest for a single point and will decrease if multiple points are spread further
     *     apart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ElevationResult> postDataForPointsAsync(
            JsonFormat format, List<CoordinatesPairAbbreviated> pointsRequestBody) {
        return postDataForPointsWithResponseAsync(format, pointsRequestBody)
                .flatMap(
                        (Response<ElevationResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Polyline API provides elevation data along a polyline. A polyline is defined by passing in
     * between 2 and N endpoint coordinates separated by a pipe ('|') character. In addition to passing in endpoints,
     * customers can specify number of sample points that will be used to divide polyline into equally spaced segments.
     * Elevation data at both start and end points and equally spaced points along the polyline will be returned. A line
     * between two endpoints is a straight Cartesian line, the shortest line between those two points in the coordinate
     * reference system. Note that the point is chosen based on Euclidean distance and may markedly differ from the
     * geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param lines The string representation of a polyline path. A polyline is defined by endpoint coordinates, with
     *     each endpoint separated by a pipe ('|') character. The polyline should be defined in the following format:
     *     [longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ..., longitude_pointN,
     *     latitude_pointN]. The longitude and latitude values refer to the World Geodetic System (WGS84) coordinate
     *     reference system. The resolution of the data used to compute the elevation will depend on the distance
     *     between the endpoints.
     * @param samples The samples parameter specifies the number of equally spaced points at which elevation values
     *     should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value
     *     is 10 if not provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ElevationResult>> getDataForPolylineWithResponseAsync(
            JsonFormat format, List<List<String>> lines, Float samples) {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        String linesConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(lines, CollectionFormat.PIPES);
        return service.getDataForPolyline(
                this.client.getHost(),
                this.client.getXMsClientId(),
                this.client.getSubscriptionKey(),
                apiVersion,
                format,
                linesConverted,
                samples,
                accept);
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Polyline API provides elevation data along a polyline. A polyline is defined by passing in
     * between 2 and N endpoint coordinates separated by a pipe ('|') character. In addition to passing in endpoints,
     * customers can specify number of sample points that will be used to divide polyline into equally spaced segments.
     * Elevation data at both start and end points and equally spaced points along the polyline will be returned. A line
     * between two endpoints is a straight Cartesian line, the shortest line between those two points in the coordinate
     * reference system. Note that the point is chosen based on Euclidean distance and may markedly differ from the
     * geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param lines The string representation of a polyline path. A polyline is defined by endpoint coordinates, with
     *     each endpoint separated by a pipe ('|') character. The polyline should be defined in the following format:
     *     [longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ..., longitude_pointN,
     *     latitude_pointN]. The longitude and latitude values refer to the World Geodetic System (WGS84) coordinate
     *     reference system. The resolution of the data used to compute the elevation will depend on the distance
     *     between the endpoints.
     * @param samples The samples parameter specifies the number of equally spaced points at which elevation values
     *     should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value
     *     is 10 if not provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ElevationResult> getDataForPolylineAsync(JsonFormat format, List<List<String>> lines, Float samples) {
        return getDataForPolylineWithResponseAsync(format, lines, samples)
                .flatMap(
                        (Response<ElevationResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Applies to**: S1 pricing tier. The Post Data for Polyline API provides elevation data along a polyline. A
     * polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character. In
     * addition to passing in endpoints, customers can specify number of sample points that will be used to divide
     * polyline into equally spaced segments. Elevation data at both start and end points and equally spaced points
     * along the polyline will be returned. A line between two endpoints is a straight Cartesian line, the shortest line
     * between those two points in the coordinate reference system. Note that the point is chosen based on Euclidean
     * distance and may markedly differ from the geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param linesRequestBody The string representation of a polyline path. A polyline is defined by endpoint
     *     coordinates, with each endpoint separated by a pipe ('|') character. The polyline should be defined in the
     *     following format: [longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ...,
     *     longitude_pointN, latitude_pointN]. The longitude and latitude values refer to the World Geodetic System
     *     (WGS84) coordinate reference system. The resolution of the data used to compute the elevation will depend on
     *     the distance between the endpoints.
     * @param samples The samples parameter specifies the number of equally spaced points at which elevation values
     *     should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value
     *     is 10 if not provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ElevationResult>> postDataForPolylineWithResponseAsync(
            JsonFormat format, List<CoordinatesPairAbbreviated> linesRequestBody, Float samples) {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        return service.postDataForPolyline(
                this.client.getHost(),
                this.client.getXMsClientId(),
                this.client.getSubscriptionKey(),
                apiVersion,
                format,
                samples,
                linesRequestBody,
                accept);
    }

    /**
     * **Applies to**: S1 pricing tier. The Post Data for Polyline API provides elevation data along a polyline. A
     * polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character. In
     * addition to passing in endpoints, customers can specify number of sample points that will be used to divide
     * polyline into equally spaced segments. Elevation data at both start and end points and equally spaced points
     * along the polyline will be returned. A line between two endpoints is a straight Cartesian line, the shortest line
     * between those two points in the coordinate reference system. Note that the point is chosen based on Euclidean
     * distance and may markedly differ from the geodesic path along the curved surface of the reference ellipsoid.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param linesRequestBody The string representation of a polyline path. A polyline is defined by endpoint
     *     coordinates, with each endpoint separated by a pipe ('|') character. The polyline should be defined in the
     *     following format: [longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ...,
     *     longitude_pointN, latitude_pointN]. The longitude and latitude values refer to the World Geodetic System
     *     (WGS84) coordinate reference system. The resolution of the data used to compute the elevation will depend on
     *     the distance between the endpoints.
     * @param samples The samples parameter specifies the number of equally spaced points at which elevation values
     *     should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value
     *     is 10 if not provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ElevationResult> postDataForPolylineAsync(
            JsonFormat format, List<CoordinatesPairAbbreviated> linesRequestBody, Float samples) {
        return postDataForPolylineWithResponseAsync(format, linesRequestBody, samples)
                .flatMap(
                        (Response<ElevationResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Bounding Box API provides elevation data at equally-spaced locations within a bounding box. A
     * bounding box is defined by the coordinates for two corners (southwest, northeast) and then subsequently divided
     * into rows and columns. Elevations are returned for the vertices of the grid created by the rows and columns. Up
     * to 2000 elevations can be returned in a single request. The returned elevation values are ordered, starting at
     * the southwest corner, and then proceeding west to east along the row. At the end of the row, it moves north to
     * the next row, and repeats the process until it reaches the far northeast corner.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param bounds The string that represents the rectangular area of a bounding box. The bounds parameter is defined
     *     by the 4 bounding box coordinates, with WGS84 longitude and latitude of the southwest corner followed by
     *     WGS84 longitude and latitude of the northeast corner. The string is presented in the following format:
     *     [SouthwestCorner_Longitude, SouthwestCorner_Latitude, NortheastCorner_Longitude, NortheastCorner_Latitude].
     * @param rows Specifies the number of rows to use to divide the bounding box area into a grid. The number of
     *     vertices in the grid should be less than 2000.
     * @param columns Specifies the number of columns to use to divide the bounding box area into a grid. The number of
     *     vertices in the grid should be less than 2000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ElevationResult>> getDataForBoundingBoxWithResponseAsync(
            JsonFormat format, List<String> bounds, float rows, float columns) {
        final String apiVersion = "1.0";
        final String accept = "application/json, application/xml";
        String boundsConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(bounds, CollectionFormat.CSV);
        return service.getDataForBoundingBox(
                this.client.getHost(),
                this.client.getXMsClientId(),
                this.client.getSubscriptionKey(),
                apiVersion,
                format,
                boundsConverted,
                rows,
                columns,
                accept);
    }

    /**
     * **Applies to**: S1 pricing tier.
     *
     * <p>The Get Data for Bounding Box API provides elevation data at equally-spaced locations within a bounding box. A
     * bounding box is defined by the coordinates for two corners (southwest, northeast) and then subsequently divided
     * into rows and columns. Elevations are returned for the vertices of the grid created by the rows and columns. Up
     * to 2000 elevations can be returned in a single request. The returned elevation values are ordered, starting at
     * the southwest corner, and then proceeding west to east along the row. At the end of the row, it moves north to
     * the next row, and repeats the process until it reaches the far northeast corner.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param bounds The string that represents the rectangular area of a bounding box. The bounds parameter is defined
     *     by the 4 bounding box coordinates, with WGS84 longitude and latitude of the southwest corner followed by
     *     WGS84 longitude and latitude of the northeast corner. The string is presented in the following format:
     *     [SouthwestCorner_Longitude, SouthwestCorner_Latitude, NortheastCorner_Longitude, NortheastCorner_Latitude].
     * @param rows Specifies the number of rows to use to divide the bounding box area into a grid. The number of
     *     vertices in the grid should be less than 2000.
     * @param columns Specifies the number of columns to use to divide the bounding box area into a grid. The number of
     *     vertices in the grid should be less than 2000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws ErrorResponseException thrown if the request is rejected by server on status code 400, 400, 401, 401,
     *     403, 403, 404, 404, 500, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a successful Elevation Points request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ElevationResult> getDataForBoundingBoxAsync(
            JsonFormat format, List<String> bounds, float rows, float columns) {
        return getDataForBoundingBoxWithResponseAsync(format, bounds, rows, columns)
                .flatMap(
                        (Response<ElevationResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }
}
