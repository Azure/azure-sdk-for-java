// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.service;

import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.maps.service.models.AliasCreateResponse;
import com.azure.maps.service.models.AliasListItem;
import com.azure.maps.service.models.AliasListResponse;
import com.azure.maps.service.models.AliasesCreateResponse;
import com.azure.maps.service.models.ErrorResponseException;
import com.azure.maps.service.models.Geography;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Alias. */
public final class Alias {
    /** The proxy service used to perform REST calls. */
    private final AliasService service;

    /** The service client containing this operation class. */
    private final MapsClient client;

    /**
     * Initializes an instance of Alias.
     *
     * @param client the instance of the service client containing this operation class.
     */
    Alias(MapsClient client) {
        this.service = RestProxy.create(AliasService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MapsClientAlias to be used by the proxy service to perform REST
     * calls.
     */
    @Host("https://{geography}.atlas.microsoft.com")
    @ServiceInterface(name = "MapsClientAlias")
    private interface AliasService {
        @Post("/aliases")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<AliasCreateResponse> create(
                @HostParam("geography") Geography geography,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("creatorDataItemId") String creatorDataItemId,
                @HeaderParam("Accept") String accept);

        @Get("/aliases")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<AliasListResponse>> list(
                @HostParam("geography") Geography geography,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept);

        @Put("/aliases/{aliasId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<AliasListItem>> assign(
                @HostParam("geography") Geography geography,
                @PathParam("aliasId") String aliasId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("creatorDataItemId") String creatorDataItemId,
                @HeaderParam("Accept") String accept);

        @Delete("/aliases/{aliasId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> delete(
                @HostParam("geography") Geography geography,
                @PathParam("aliasId") String aliasId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept);

        @Get("/aliases/{aliasId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<AliasListItem>> getDetails(
                @HostParam("geography") Geography geography,
                @PathParam("aliasId") String aliasId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<AliasListResponse>> listNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("geography") Geography geography,
                @HeaderParam("Accept") String accept);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to create an alias. You can also assign the alias during the create request. An
     * alias can reference an ID generated by a creator service, but cannot reference another alias ID.
     *
     * <p>### Submit Create Request
     *
     * <p>To create your alias, you will use a `POST` request. If you would like to assign the alias during the
     * creation, you will pass the `resourceId` query parameter.
     *
     * <p>### Create Alias Response
     *
     * <p>The Create API returns a HTTP `201 Created` response with the alias resource in the body.
     *
     * <p>A sample response from creating an alias:
     *
     * <p>```json { "createdTimestamp": "2020-02-13T21:19:11.123Z", "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
     * "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14", "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z" }
     * ```.
     *
     * @param creatorDataItemId The unique id that references a creator data item to be aliased.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Alias Create API for the case when the alias was successfully created.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AliasCreateResponse> createWithResponseAsync(String creatorDataItemId) {
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return service.create(this.client.getGeography(), apiVersion, creatorDataItemId, accept);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to create an alias. You can also assign the alias during the create request. An
     * alias can reference an ID generated by a creator service, but cannot reference another alias ID.
     *
     * <p>### Submit Create Request
     *
     * <p>To create your alias, you will use a `POST` request. If you would like to assign the alias during the
     * creation, you will pass the `resourceId` query parameter.
     *
     * <p>### Create Alias Response
     *
     * <p>The Create API returns a HTTP `201 Created` response with the alias resource in the body.
     *
     * <p>A sample response from creating an alias:
     *
     * <p>```json { "createdTimestamp": "2020-02-13T21:19:11.123Z", "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
     * "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14", "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z" }
     * ```.
     *
     * @param creatorDataItemId The unique id that references a creator data item to be aliased.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Alias Create API for the case when the alias was successfully created.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AliasesCreateResponse> createAsync(String creatorDataItemId) {
        return createWithResponseAsync(creatorDataItemId)
                .flatMap(
                        (AliasCreateResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to create an alias. You can also assign the alias during the create request. An
     * alias can reference an ID generated by a creator service, but cannot reference another alias ID.
     *
     * <p>### Submit Create Request
     *
     * <p>To create your alias, you will use a `POST` request. If you would like to assign the alias during the
     * creation, you will pass the `resourceId` query parameter.
     *
     * <p>### Create Alias Response
     *
     * <p>The Create API returns a HTTP `201 Created` response with the alias resource in the body.
     *
     * <p>A sample response from creating an alias:
     *
     * <p>```json { "createdTimestamp": "2020-02-13T21:19:11.123Z", "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
     * "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14", "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z" }
     * ```.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Alias Create API for the case when the alias was successfully created.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AliasesCreateResponse> createAsync() {
        final String creatorDataItemId = null;
        return createWithResponseAsync(creatorDataItemId)
                .flatMap(
                        (AliasCreateResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to create an alias. You can also assign the alias during the create request. An
     * alias can reference an ID generated by a creator service, but cannot reference another alias ID.
     *
     * <p>### Submit Create Request
     *
     * <p>To create your alias, you will use a `POST` request. If you would like to assign the alias during the
     * creation, you will pass the `resourceId` query parameter.
     *
     * <p>### Create Alias Response
     *
     * <p>The Create API returns a HTTP `201 Created` response with the alias resource in the body.
     *
     * <p>A sample response from creating an alias:
     *
     * <p>```json { "createdTimestamp": "2020-02-13T21:19:11.123Z", "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
     * "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14", "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z" }
     * ```.
     *
     * @param creatorDataItemId The unique id that references a creator data item to be aliased.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Alias Create API for the case when the alias was successfully created.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AliasesCreateResponse create(String creatorDataItemId) {
        return createAsync(creatorDataItemId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to create an alias. You can also assign the alias during the create request. An
     * alias can reference an ID generated by a creator service, but cannot reference another alias ID.
     *
     * <p>### Submit Create Request
     *
     * <p>To create your alias, you will use a `POST` request. If you would like to assign the alias during the
     * creation, you will pass the `resourceId` query parameter.
     *
     * <p>### Create Alias Response
     *
     * <p>The Create API returns a HTTP `201 Created` response with the alias resource in the body.
     *
     * <p>A sample response from creating an alias:
     *
     * <p>```json { "createdTimestamp": "2020-02-13T21:19:11.123Z", "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
     * "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14", "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z" }
     * ```.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Alias Create API for the case when the alias was successfully created.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AliasesCreateResponse create() {
        final String creatorDataItemId = null;
        return createAsync(creatorDataItemId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all previously successfully created aliases.
     *
     * <p>### Submit List Request
     *
     * <p>To list all your aliases, you will issue a `GET` request with no additional parameters.
     *
     * <p>### List Data Response
     *
     * <p>The List API returns the complete list of all aliases in `json` format. The response contains the following
     * details for each alias resource: &gt; createdTimestamp - The timestamp that the alias was created. Format
     * yyyy-MM-ddTHH:mm:ss.sssZ &gt; aliasId - The id for the alias. &gt; creatorDataItemId - The id for the creator
     * data item that this alias references (could be null if the alias has not been assigned). &gt;
     * lastUpdatedTimestamp - The last time the alias was assigned to a resource. Format yyyy-MM-ddTHH:mm:ss.sssZ
     *
     * <p>A sample response returning 2 alias resources:
     *
     * <p>```json { "aliases": [ { "createdTimestamp": "2020-02-13T21:19:11.123Z", "aliasId":
     * "a8a4b8bb-ecf4-fb27-a618-f41721552766", "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
     * "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z" }, { "createdTimestamp": "2020-02-18T19:53:33.123Z",
     * "aliasId": "1856dbfc-7a66-ee5a-bf8d-51dbfe1906f6", "creatorDataItemId": null, "lastUpdatedTimestamp":
     * "2020-02-18T19:53:33.123Z" } ] } ```.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AliasListItem>> listSinglePageAsync() {
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return service.list(this.client.getGeography(), apiVersion, accept)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getAliases(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all previously successfully created aliases.
     *
     * <p>### Submit List Request
     *
     * <p>To list all your aliases, you will issue a `GET` request with no additional parameters.
     *
     * <p>### List Data Response
     *
     * <p>The List API returns the complete list of all aliases in `json` format. The response contains the following
     * details for each alias resource: &gt; createdTimestamp - The timestamp that the alias was created. Format
     * yyyy-MM-ddTHH:mm:ss.sssZ &gt; aliasId - The id for the alias. &gt; creatorDataItemId - The id for the creator
     * data item that this alias references (could be null if the alias has not been assigned). &gt;
     * lastUpdatedTimestamp - The last time the alias was assigned to a resource. Format yyyy-MM-ddTHH:mm:ss.sssZ
     *
     * <p>A sample response returning 2 alias resources:
     *
     * <p>```json { "aliases": [ { "createdTimestamp": "2020-02-13T21:19:11.123Z", "aliasId":
     * "a8a4b8bb-ecf4-fb27-a618-f41721552766", "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
     * "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z" }, { "createdTimestamp": "2020-02-18T19:53:33.123Z",
     * "aliasId": "1856dbfc-7a66-ee5a-bf8d-51dbfe1906f6", "creatorDataItemId": null, "lastUpdatedTimestamp":
     * "2020-02-18T19:53:33.123Z" } ] } ```.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the List API.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<AliasListItem> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all previously successfully created aliases.
     *
     * <p>### Submit List Request
     *
     * <p>To list all your aliases, you will issue a `GET` request with no additional parameters.
     *
     * <p>### List Data Response
     *
     * <p>The List API returns the complete list of all aliases in `json` format. The response contains the following
     * details for each alias resource: &gt; createdTimestamp - The timestamp that the alias was created. Format
     * yyyy-MM-ddTHH:mm:ss.sssZ &gt; aliasId - The id for the alias. &gt; creatorDataItemId - The id for the creator
     * data item that this alias references (could be null if the alias has not been assigned). &gt;
     * lastUpdatedTimestamp - The last time the alias was assigned to a resource. Format yyyy-MM-ddTHH:mm:ss.sssZ
     *
     * <p>A sample response returning 2 alias resources:
     *
     * <p>```json { "aliases": [ { "createdTimestamp": "2020-02-13T21:19:11.123Z", "aliasId":
     * "a8a4b8bb-ecf4-fb27-a618-f41721552766", "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
     * "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z" }, { "createdTimestamp": "2020-02-18T19:53:33.123Z",
     * "aliasId": "1856dbfc-7a66-ee5a-bf8d-51dbfe1906f6", "creatorDataItemId": null, "lastUpdatedTimestamp":
     * "2020-02-18T19:53:33.123Z" } ] } ```.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the List API.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AliasListItem> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to assign an alias to reference a resource.
     *
     * <p>### Submit Assign Request
     *
     * <p>To assign your alias to a resource, you will use a `PUT` request with the `aliasId` in the path and the
     * `creatorDataItemId` passed as a query parameter.
     *
     * <p>### Assign Alias Response
     *
     * <p>The Assign API returns a HTTP `200 OK` response with the updated alias resource in the body, if the alias was
     * assigned successfully. A sample of the assign response is
     *
     * <p>```json { "createdTimestamp": "2020-02-13T21:19:11.123Z", "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
     * "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14", "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z" }
     * ```.
     *
     * @param aliasId The unique id that references an existing alias.
     * @param creatorDataItemId The unique id that references a creator data item to be aliased.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information for the alias.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AliasListItem>> assignWithResponseAsync(String aliasId, String creatorDataItemId) {
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return service.assign(this.client.getGeography(), aliasId, apiVersion, creatorDataItemId, accept);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to assign an alias to reference a resource.
     *
     * <p>### Submit Assign Request
     *
     * <p>To assign your alias to a resource, you will use a `PUT` request with the `aliasId` in the path and the
     * `creatorDataItemId` passed as a query parameter.
     *
     * <p>### Assign Alias Response
     *
     * <p>The Assign API returns a HTTP `200 OK` response with the updated alias resource in the body, if the alias was
     * assigned successfully. A sample of the assign response is
     *
     * <p>```json { "createdTimestamp": "2020-02-13T21:19:11.123Z", "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
     * "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14", "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z" }
     * ```.
     *
     * @param aliasId The unique id that references an existing alias.
     * @param creatorDataItemId The unique id that references a creator data item to be aliased.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information for the alias.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AliasListItem> assignAsync(String aliasId, String creatorDataItemId) {
        return assignWithResponseAsync(aliasId, creatorDataItemId)
                .flatMap(
                        (Response<AliasListItem> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to assign an alias to reference a resource.
     *
     * <p>### Submit Assign Request
     *
     * <p>To assign your alias to a resource, you will use a `PUT` request with the `aliasId` in the path and the
     * `creatorDataItemId` passed as a query parameter.
     *
     * <p>### Assign Alias Response
     *
     * <p>The Assign API returns a HTTP `200 OK` response with the updated alias resource in the body, if the alias was
     * assigned successfully. A sample of the assign response is
     *
     * <p>```json { "createdTimestamp": "2020-02-13T21:19:11.123Z", "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
     * "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14", "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z" }
     * ```.
     *
     * @param aliasId The unique id that references an existing alias.
     * @param creatorDataItemId The unique id that references a creator data item to be aliased.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information for the alias.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AliasListItem assign(String aliasId, String creatorDataItemId) {
        return assignAsync(aliasId, creatorDataItemId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to delete a previously created alias. You can also use this API to delete
     * old/unused aliases to create space for new content.This API does not delete the references resource, only the
     * alias referencing the resource.
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your alias you will issue a `DELETE` request where the path will contain the `aliasId` of the alias
     * to delete.
     *
     * <p>### Delete Alias Response
     *
     * <p>The Delete API returns a HTTP `204 No Content` response with an empty body, if the alias was deleted
     * successfully.
     *
     * @param aliasId The unique id that references an existing alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String aliasId) {
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return service.delete(this.client.getGeography(), aliasId, apiVersion, accept);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to delete a previously created alias. You can also use this API to delete
     * old/unused aliases to create space for new content.This API does not delete the references resource, only the
     * alias referencing the resource.
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your alias you will issue a `DELETE` request where the path will contain the `aliasId` of the alias
     * to delete.
     *
     * <p>### Delete Alias Response
     *
     * <p>The Delete API returns a HTTP `204 No Content` response with an empty body, if the alias was deleted
     * successfully.
     *
     * @param aliasId The unique id that references an existing alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String aliasId) {
        return deleteWithResponseAsync(aliasId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to delete a previously created alias. You can also use this API to delete
     * old/unused aliases to create space for new content.This API does not delete the references resource, only the
     * alias referencing the resource.
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your alias you will issue a `DELETE` request where the path will contain the `aliasId` of the alias
     * to delete.
     *
     * <p>### Delete Alias Response
     *
     * <p>The Delete API returns a HTTP `204 No Content` response with an empty body, if the alias was deleted
     * successfully.
     *
     * @param aliasId The unique id that references an existing alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String aliasId) {
        deleteAsync(aliasId).block();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch the details of a previously created alias.
     *
     * <p>### Submit Get Details Request
     *
     * <p>To get the details of your alias, you will issue a `GET` request with the `aliasId` in the path.
     *
     * <p>### Get Details Response
     *
     * <p>The Get Details API returns the previously created alias in `json` format. The response contains the following
     * details for the alias resource: &gt; createdTimestamp - The timestamp that the alias was created. &gt; aliasId -
     * The id for the alias. &gt; creatorDataItemId - The id for the creator data item that this alias references (could
     * be null if the alias has not been assigned). &gt; lastUpdatedTimestamp - The last time the alias was assigned to
     * a resource.
     *
     * <p>Here's a sample response: ```json { "createdTimestamp": "2020-02-13T21:19:11.123Z", "aliasId":
     * "a8a4b8bb-ecf4-fb27-a618-f41721552766", "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
     * "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z" } ```.
     *
     * @param aliasId The unique id that references an existing alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information for the alias.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AliasListItem>> getDetailsWithResponseAsync(String aliasId) {
        final String apiVersion = "2.0";
        final String accept = "application/json";
        return service.getDetails(this.client.getGeography(), aliasId, apiVersion, accept);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch the details of a previously created alias.
     *
     * <p>### Submit Get Details Request
     *
     * <p>To get the details of your alias, you will issue a `GET` request with the `aliasId` in the path.
     *
     * <p>### Get Details Response
     *
     * <p>The Get Details API returns the previously created alias in `json` format. The response contains the following
     * details for the alias resource: &gt; createdTimestamp - The timestamp that the alias was created. &gt; aliasId -
     * The id for the alias. &gt; creatorDataItemId - The id for the creator data item that this alias references (could
     * be null if the alias has not been assigned). &gt; lastUpdatedTimestamp - The last time the alias was assigned to
     * a resource.
     *
     * <p>Here's a sample response: ```json { "createdTimestamp": "2020-02-13T21:19:11.123Z", "aliasId":
     * "a8a4b8bb-ecf4-fb27-a618-f41721552766", "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
     * "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z" } ```.
     *
     * @param aliasId The unique id that references an existing alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information for the alias.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AliasListItem> getDetailsAsync(String aliasId) {
        return getDetailsWithResponseAsync(aliasId)
                .flatMap(
                        (Response<AliasListItem> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch the details of a previously created alias.
     *
     * <p>### Submit Get Details Request
     *
     * <p>To get the details of your alias, you will issue a `GET` request with the `aliasId` in the path.
     *
     * <p>### Get Details Response
     *
     * <p>The Get Details API returns the previously created alias in `json` format. The response contains the following
     * details for the alias resource: &gt; createdTimestamp - The timestamp that the alias was created. &gt; aliasId -
     * The id for the alias. &gt; creatorDataItemId - The id for the creator data item that this alias references (could
     * be null if the alias has not been assigned). &gt; lastUpdatedTimestamp - The last time the alias was assigned to
     * a resource.
     *
     * <p>Here's a sample response: ```json { "createdTimestamp": "2020-02-13T21:19:11.123Z", "aliasId":
     * "a8a4b8bb-ecf4-fb27-a618-f41721552766", "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
     * "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z" } ```.
     *
     * @param aliasId The unique id that references an existing alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information for the alias.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AliasListItem getDetails(String aliasId) {
        return getDetailsAsync(aliasId).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the List API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AliasListItem>> listNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return service.listNext(nextLink, this.client.getGeography(), accept)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getAliases(),
                                        res.getValue().getNextLink(),
                                        null));
    }
}
