// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.service;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.maps.service.models.CurrentConditionsResponse;
import com.azure.maps.service.models.DailyForecastResponse;
import com.azure.maps.service.models.DailyIndicesResponse;
import com.azure.maps.service.models.ErrorResponseException;
import com.azure.maps.service.models.Geography;
import com.azure.maps.service.models.HourlyForecastResponse;
import com.azure.maps.service.models.MinuteForecastResponse;
import com.azure.maps.service.models.QuarterDayForecastResponse;
import com.azure.maps.service.models.ResponseFormat;
import com.azure.maps.service.models.SevereWeatherAlertsResponse;
import com.azure.maps.service.models.WeatherAlongRouteResponse;
import com.azure.maps.service.models.WeatherDataUnit;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Weathers. */
public final class Weathers {
    /** The proxy service used to perform REST calls. */
    private final WeathersService service;

    /** The service client containing this operation class. */
    private final MapsClient client;

    /**
     * Initializes an instance of Weathers.
     *
     * @param client the instance of the service client containing this operation class.
     */
    Weathers(MapsClient client) {
        this.service = RestProxy.create(WeathersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MapsClientWeathers to be used by the proxy service to perform REST
     * calls.
     */
    @Host("https://{geography}.atlas.microsoft.com")
    @ServiceInterface(name = "MapsClientWeathers")
    private interface WeathersService {
        @Get("/weather/forecast/hourly/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<HourlyForecastResponse>> getHourlyForecast(
                @HostParam("geography") Geography geography,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") ResponseFormat format,
                @QueryParam("query") String query,
                @QueryParam("unit") WeatherDataUnit unit,
                @QueryParam("duration") Integer duration,
                @QueryParam("language") String language,
                @HeaderParam("Accept") String accept);

        @Get("/weather/forecast/minute/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<MinuteForecastResponse>> getMinuteForecast(
                @HostParam("geography") Geography geography,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") ResponseFormat format,
                @QueryParam("query") String query,
                @QueryParam("interval") Integer interval,
                @QueryParam("language") String language,
                @HeaderParam("Accept") String accept);

        @Get("/weather/forecast/quarterDay/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<QuarterDayForecastResponse>> getQuarterDayForecast(
                @HostParam("geography") Geography geography,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") ResponseFormat format,
                @QueryParam("query") String query,
                @QueryParam("unit") WeatherDataUnit unit,
                @QueryParam("duration") Integer duration,
                @QueryParam("language") String language,
                @HeaderParam("Accept") String accept);

        @Get("/weather/currentConditions/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<CurrentConditionsResponse>> getCurrentConditions(
                @HostParam("geography") Geography geography,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") ResponseFormat format,
                @QueryParam("query") String query,
                @QueryParam("unit") WeatherDataUnit unit,
                @QueryParam("details") String details,
                @QueryParam("duration") Integer duration,
                @QueryParam("language") String language,
                @HeaderParam("Accept") String accept);

        @Get("/weather/forecast/daily/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<DailyForecastResponse>> getDailyForecast(
                @HostParam("geography") Geography geography,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") ResponseFormat format,
                @QueryParam("query") String query,
                @QueryParam("unit") WeatherDataUnit unit,
                @QueryParam("duration") Integer duration,
                @QueryParam("language") String language,
                @HeaderParam("Accept") String accept);

        @Get("/weather/route/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<WeatherAlongRouteResponse>> getWeatherAlongRoute(
                @HostParam("geography") Geography geography,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") ResponseFormat format,
                @QueryParam("query") String query,
                @QueryParam("language") String language,
                @HeaderParam("Accept") String accept);

        @Get("/weather/severe/alerts/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<SevereWeatherAlertsResponse>> getSevereWeatherAlerts(
                @HostParam("geography") Geography geography,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") ResponseFormat format,
                @QueryParam("query") String query,
                @QueryParam("language") String language,
                @QueryParam("details") String details,
                @HeaderParam("Accept") String accept);

        @Get("/weather/indices/daily/{format}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<DailyIndicesResponse>> getDailyIndices(
                @HostParam("geography") Geography geography,
                @HeaderParam("x-ms-client-id") String xMsClientId,
                @QueryParam("api-version") String apiVersion,
                @PathParam("format") ResponseFormat format,
                @QueryParam("query") String query,
                @QueryParam("language") String language,
                @QueryParam("duration") Integer duration,
                @QueryParam("indexId") Integer indexId,
                @QueryParam("indexGroupId") Integer indexGroupId,
                @HeaderParam("Accept") String accept);
    }

    /**
     * **Get Hourly Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Request detailed weather forecast by the hour for the next 1, 12, 24 (1 day), 72 (3 days), 120 (5 days), and
     * 240 hours (10 days) for the given the given coordinate location. The API returns details such as temperature,
     * humidity, wind, precipitation, and ultraviolet (UV) index.
     *
     * <p>In S0 you can request hourly forecast for the next 1, 12, 24 hours (1 day), and 72 hours (3 days). In S1 you
     * can also request hourly forecast for the next 120 (5 days) and 240 hours (10 days).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which hourly forecast information is requested. The applicable query
     *     is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param unit Specifies to return the data in either metric units or imperial units. Default value is metric.
     * @param duration Time frame of the returned weather forecast. By default, the forecast data for next hour will be
     *     returned. Available values are * `1` - Return forecast data for the next hour. Default value. * `12` - Return
     *     hourly forecast for next 12 hours. * `24` - Return hourly forecast for next 24 hours. * `72` - Return hourly
     *     forecast for next 72 hours (3 days). * `120` - Return hourly forecast for next 120 hours (5 days). Only
     *     available in S1 SKU. * `240` - Return hourly forecast for next 240 hours (10 days). Only available in S1 SKU.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<HourlyForecastResponse>> getHourlyForecastWithResponseAsync(
            ResponseFormat format, String query, WeatherDataUnit unit, Integer duration, String language) {
        final String apiVersion = "1.0";
        final String accept = "application/json";
        return service.getHourlyForecast(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                apiVersion,
                format,
                query,
                unit,
                duration,
                language,
                accept);
    }

    /**
     * **Get Hourly Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Request detailed weather forecast by the hour for the next 1, 12, 24 (1 day), 72 (3 days), 120 (5 days), and
     * 240 hours (10 days) for the given the given coordinate location. The API returns details such as temperature,
     * humidity, wind, precipitation, and ultraviolet (UV) index.
     *
     * <p>In S0 you can request hourly forecast for the next 1, 12, 24 hours (1 day), and 72 hours (3 days). In S1 you
     * can also request hourly forecast for the next 120 (5 days) and 240 hours (10 days).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which hourly forecast information is requested. The applicable query
     *     is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param unit Specifies to return the data in either metric units or imperial units. Default value is metric.
     * @param duration Time frame of the returned weather forecast. By default, the forecast data for next hour will be
     *     returned. Available values are * `1` - Return forecast data for the next hour. Default value. * `12` - Return
     *     hourly forecast for next 12 hours. * `24` - Return hourly forecast for next 24 hours. * `72` - Return hourly
     *     forecast for next 72 hours (3 days). * `120` - Return hourly forecast for next 120 hours (5 days). Only
     *     available in S1 SKU. * `240` - Return hourly forecast for next 240 hours (10 days). Only available in S1 SKU.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HourlyForecastResponse> getHourlyForecastAsync(
            ResponseFormat format, String query, WeatherDataUnit unit, Integer duration, String language) {
        return getHourlyForecastWithResponseAsync(format, query, unit, duration, language)
                .flatMap(
                        (Response<HourlyForecastResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Hourly Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Request detailed weather forecast by the hour for the next 1, 12, 24 (1 day), 72 (3 days), 120 (5 days), and
     * 240 hours (10 days) for the given the given coordinate location. The API returns details such as temperature,
     * humidity, wind, precipitation, and ultraviolet (UV) index.
     *
     * <p>In S0 you can request hourly forecast for the next 1, 12, 24 hours (1 day), and 72 hours (3 days). In S1 you
     * can also request hourly forecast for the next 120 (5 days) and 240 hours (10 days).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which hourly forecast information is requested. The applicable query
     *     is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HourlyForecastResponse> getHourlyForecastAsync(ResponseFormat format, String query) {
        final WeatherDataUnit unit = null;
        final Integer duration = null;
        final String language = null;
        return getHourlyForecastWithResponseAsync(format, query, unit, duration, language)
                .flatMap(
                        (Response<HourlyForecastResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Hourly Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Request detailed weather forecast by the hour for the next 1, 12, 24 (1 day), 72 (3 days), 120 (5 days), and
     * 240 hours (10 days) for the given the given coordinate location. The API returns details such as temperature,
     * humidity, wind, precipitation, and ultraviolet (UV) index.
     *
     * <p>In S0 you can request hourly forecast for the next 1, 12, 24 hours (1 day), and 72 hours (3 days). In S1 you
     * can also request hourly forecast for the next 120 (5 days) and 240 hours (10 days).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which hourly forecast information is requested. The applicable query
     *     is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param unit Specifies to return the data in either metric units or imperial units. Default value is metric.
     * @param duration Time frame of the returned weather forecast. By default, the forecast data for next hour will be
     *     returned. Available values are * `1` - Return forecast data for the next hour. Default value. * `12` - Return
     *     hourly forecast for next 12 hours. * `24` - Return hourly forecast for next 24 hours. * `72` - Return hourly
     *     forecast for next 72 hours (3 days). * `120` - Return hourly forecast for next 120 hours (5 days). Only
     *     available in S1 SKU. * `240` - Return hourly forecast for next 240 hours (10 days). Only available in S1 SKU.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HourlyForecastResponse getHourlyForecast(
            ResponseFormat format, String query, WeatherDataUnit unit, Integer duration, String language) {
        return getHourlyForecastAsync(format, query, unit, duration, language).block();
    }

    /**
     * **Get Hourly Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Request detailed weather forecast by the hour for the next 1, 12, 24 (1 day), 72 (3 days), 120 (5 days), and
     * 240 hours (10 days) for the given the given coordinate location. The API returns details such as temperature,
     * humidity, wind, precipitation, and ultraviolet (UV) index.
     *
     * <p>In S0 you can request hourly forecast for the next 1, 12, 24 hours (1 day), and 72 hours (3 days). In S1 you
     * can also request hourly forecast for the next 120 (5 days) and 240 hours (10 days).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which hourly forecast information is requested. The applicable query
     *     is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HourlyForecastResponse getHourlyForecast(ResponseFormat format, String query) {
        final WeatherDataUnit unit = null;
        final Integer duration = null;
        final String language = null;
        return getHourlyForecastAsync(format, query, unit, duration, language).block();
    }

    /**
     * **Get Minute Forecast**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Minute Forecast service returns minute-by-minute forecasts for a given location for the next 120 minutes.
     * Users can request weather forecasts in the interval of 1, 5 and 15 minutes. The response will include details
     * such as the type of precipitation (including rain, snow, or a mixture of both), start time, and precipitation
     * intensity value (dBZ).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which minute forecast information is requested. The applicable query
     *     is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param interval Specifies time interval in minutes for the returned weather forecast. Supported values are * `1`
     *     - Retrieve forecast for 1-minute intervals. Returned by default. * `5` - Retrieve forecasts for 5-minute
     *     intervals. * `15` - Retrieve forecasts for 15-minute intervals.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MinuteForecastResponse>> getMinuteForecastWithResponseAsync(
            ResponseFormat format, String query, Integer interval, String language) {
        final String apiVersion = "1.0";
        final String accept = "application/json";
        return service.getMinuteForecast(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                apiVersion,
                format,
                query,
                interval,
                language,
                accept);
    }

    /**
     * **Get Minute Forecast**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Minute Forecast service returns minute-by-minute forecasts for a given location for the next 120 minutes.
     * Users can request weather forecasts in the interval of 1, 5 and 15 minutes. The response will include details
     * such as the type of precipitation (including rain, snow, or a mixture of both), start time, and precipitation
     * intensity value (dBZ).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which minute forecast information is requested. The applicable query
     *     is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param interval Specifies time interval in minutes for the returned weather forecast. Supported values are * `1`
     *     - Retrieve forecast for 1-minute intervals. Returned by default. * `5` - Retrieve forecasts for 5-minute
     *     intervals. * `15` - Retrieve forecasts for 15-minute intervals.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MinuteForecastResponse> getMinuteForecastAsync(
            ResponseFormat format, String query, Integer interval, String language) {
        return getMinuteForecastWithResponseAsync(format, query, interval, language)
                .flatMap(
                        (Response<MinuteForecastResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Minute Forecast**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Minute Forecast service returns minute-by-minute forecasts for a given location for the next 120 minutes.
     * Users can request weather forecasts in the interval of 1, 5 and 15 minutes. The response will include details
     * such as the type of precipitation (including rain, snow, or a mixture of both), start time, and precipitation
     * intensity value (dBZ).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which minute forecast information is requested. The applicable query
     *     is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MinuteForecastResponse> getMinuteForecastAsync(ResponseFormat format, String query) {
        final Integer interval = null;
        final String language = null;
        return getMinuteForecastWithResponseAsync(format, query, interval, language)
                .flatMap(
                        (Response<MinuteForecastResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Minute Forecast**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Minute Forecast service returns minute-by-minute forecasts for a given location for the next 120 minutes.
     * Users can request weather forecasts in the interval of 1, 5 and 15 minutes. The response will include details
     * such as the type of precipitation (including rain, snow, or a mixture of both), start time, and precipitation
     * intensity value (dBZ).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which minute forecast information is requested. The applicable query
     *     is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param interval Specifies time interval in minutes for the returned weather forecast. Supported values are * `1`
     *     - Retrieve forecast for 1-minute intervals. Returned by default. * `5` - Retrieve forecasts for 5-minute
     *     intervals. * `15` - Retrieve forecasts for 15-minute intervals.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MinuteForecastResponse getMinuteForecast(
            ResponseFormat format, String query, Integer interval, String language) {
        return getMinuteForecastAsync(format, query, interval, language).block();
    }

    /**
     * **Get Minute Forecast**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Get Minute Forecast service returns minute-by-minute forecasts for a given location for the next 120 minutes.
     * Users can request weather forecasts in the interval of 1, 5 and 15 minutes. The response will include details
     * such as the type of precipitation (including rain, snow, or a mixture of both), start time, and precipitation
     * intensity value (dBZ).
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which minute forecast information is requested. The applicable query
     *     is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MinuteForecastResponse getMinuteForecast(ResponseFormat format, String query) {
        final Integer interval = null;
        final String language = null;
        return getMinuteForecastAsync(format, query, interval, language).block();
    }

    /**
     * **Get Quarter-Day Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Service returns detailed weather forecast by quarter-day for the next 1, 5, 10, or 15 days for a given
     * location. Response data is presented by quarters of the day - morning, afternoon, evening, and overnight. Details
     * such as temperature, humidity, wind, precipitation, and UV index are returned.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which quarter-day forecast information is requested. The applicable
     *     query is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param unit Specifies to return the data in either metric units or imperial units. Default value is metric.
     * @param duration Specifies for how many days the quester-day forecast responses are returned. Supported values
     *     are: * `1` - Return forecast data for the next day. Returned by default. * `5` - Return forecast data for the
     *     next 5 days. * `10` - Return forecast data for next 10 days. * `15` - Return forecast data for the next 15
     *     days.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<QuarterDayForecastResponse>> getQuarterDayForecastWithResponseAsync(
            ResponseFormat format, String query, WeatherDataUnit unit, Integer duration, String language) {
        final String apiVersion = "1.0";
        final String accept = "application/json";
        return service.getQuarterDayForecast(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                apiVersion,
                format,
                query,
                unit,
                duration,
                language,
                accept);
    }

    /**
     * **Get Quarter-Day Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Service returns detailed weather forecast by quarter-day for the next 1, 5, 10, or 15 days for a given
     * location. Response data is presented by quarters of the day - morning, afternoon, evening, and overnight. Details
     * such as temperature, humidity, wind, precipitation, and UV index are returned.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which quarter-day forecast information is requested. The applicable
     *     query is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param unit Specifies to return the data in either metric units or imperial units. Default value is metric.
     * @param duration Specifies for how many days the quester-day forecast responses are returned. Supported values
     *     are: * `1` - Return forecast data for the next day. Returned by default. * `5` - Return forecast data for the
     *     next 5 days. * `10` - Return forecast data for next 10 days. * `15` - Return forecast data for the next 15
     *     days.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QuarterDayForecastResponse> getQuarterDayForecastAsync(
            ResponseFormat format, String query, WeatherDataUnit unit, Integer duration, String language) {
        return getQuarterDayForecastWithResponseAsync(format, query, unit, duration, language)
                .flatMap(
                        (Response<QuarterDayForecastResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Quarter-Day Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Service returns detailed weather forecast by quarter-day for the next 1, 5, 10, or 15 days for a given
     * location. Response data is presented by quarters of the day - morning, afternoon, evening, and overnight. Details
     * such as temperature, humidity, wind, precipitation, and UV index are returned.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which quarter-day forecast information is requested. The applicable
     *     query is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<QuarterDayForecastResponse> getQuarterDayForecastAsync(ResponseFormat format, String query) {
        final WeatherDataUnit unit = null;
        final Integer duration = null;
        final String language = null;
        return getQuarterDayForecastWithResponseAsync(format, query, unit, duration, language)
                .flatMap(
                        (Response<QuarterDayForecastResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Quarter-Day Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Service returns detailed weather forecast by quarter-day for the next 1, 5, 10, or 15 days for a given
     * location. Response data is presented by quarters of the day - morning, afternoon, evening, and overnight. Details
     * such as temperature, humidity, wind, precipitation, and UV index are returned.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which quarter-day forecast information is requested. The applicable
     *     query is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param unit Specifies to return the data in either metric units or imperial units. Default value is metric.
     * @param duration Specifies for how many days the quester-day forecast responses are returned. Supported values
     *     are: * `1` - Return forecast data for the next day. Returned by default. * `5` - Return forecast data for the
     *     next 5 days. * `10` - Return forecast data for next 10 days. * `15` - Return forecast data for the next 15
     *     days.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QuarterDayForecastResponse getQuarterDayForecast(
            ResponseFormat format, String query, WeatherDataUnit unit, Integer duration, String language) {
        return getQuarterDayForecastAsync(format, query, unit, duration, language).block();
    }

    /**
     * **Get Quarter-Day Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Service returns detailed weather forecast by quarter-day for the next 1, 5, 10, or 15 days for a given
     * location. Response data is presented by quarters of the day - morning, afternoon, evening, and overnight. Details
     * such as temperature, humidity, wind, precipitation, and UV index are returned.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which quarter-day forecast information is requested. The applicable
     *     query is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QuarterDayForecastResponse getQuarterDayForecast(ResponseFormat format, String query) {
        final WeatherDataUnit unit = null;
        final Integer duration = null;
        final String language = null;
        return getQuarterDayForecastAsync(format, query, unit, duration, language).block();
    }

    /**
     * **Get Current Conditions**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Get Current Conditions service returns detailed current weather conditions such as precipitation, temperature
     * and wind for a given coordinate location. Also, observations from the past 6 or 24 hours for a particular
     * location can be retrieved. The basic information returned with the response include details such as observation
     * date and time, brief description of the weather conditions, weather icon, precipitation indicator flags, and
     * temperature. Additional details such as RealFeel™ Temperature and UV index are also returned.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which current conditions information is requested. The applicable
     *     query is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param unit Specifies to return the data in either metric units or imperial units. Default value is metric.
     * @param details Return full details for the current conditions. Available values are * `true` - Returns full
     *     details. By default all details are returned. * `false` - Returns a truncated version of the current
     *     condition data, which includes observation date time, weather phrase, icon code, precipitation indicator
     *     flag, and temperature.
     * @param duration Time frame of the returned weather conditions. By default, the most current weather conditions
     *     will be returned. Default value is 0. Supported values are: * `0` - Return the most current weather
     *     conditions. * `6` - Return weather conditions from past 6 hours. * `24` - Return weather conditions from past
     *     24 hours.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CurrentConditionsResponse>> getCurrentConditionsWithResponseAsync(
            ResponseFormat format,
            String query,
            WeatherDataUnit unit,
            String details,
            Integer duration,
            String language) {
        final String apiVersion = "1.0";
        final String accept = "application/json";
        return service.getCurrentConditions(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                apiVersion,
                format,
                query,
                unit,
                details,
                duration,
                language,
                accept);
    }

    /**
     * **Get Current Conditions**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Get Current Conditions service returns detailed current weather conditions such as precipitation, temperature
     * and wind for a given coordinate location. Also, observations from the past 6 or 24 hours for a particular
     * location can be retrieved. The basic information returned with the response include details such as observation
     * date and time, brief description of the weather conditions, weather icon, precipitation indicator flags, and
     * temperature. Additional details such as RealFeel™ Temperature and UV index are also returned.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which current conditions information is requested. The applicable
     *     query is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param unit Specifies to return the data in either metric units or imperial units. Default value is metric.
     * @param details Return full details for the current conditions. Available values are * `true` - Returns full
     *     details. By default all details are returned. * `false` - Returns a truncated version of the current
     *     condition data, which includes observation date time, weather phrase, icon code, precipitation indicator
     *     flag, and temperature.
     * @param duration Time frame of the returned weather conditions. By default, the most current weather conditions
     *     will be returned. Default value is 0. Supported values are: * `0` - Return the most current weather
     *     conditions. * `6` - Return weather conditions from past 6 hours. * `24` - Return weather conditions from past
     *     24 hours.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CurrentConditionsResponse> getCurrentConditionsAsync(
            ResponseFormat format,
            String query,
            WeatherDataUnit unit,
            String details,
            Integer duration,
            String language) {
        return getCurrentConditionsWithResponseAsync(format, query, unit, details, duration, language)
                .flatMap(
                        (Response<CurrentConditionsResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Current Conditions**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Get Current Conditions service returns detailed current weather conditions such as precipitation, temperature
     * and wind for a given coordinate location. Also, observations from the past 6 or 24 hours for a particular
     * location can be retrieved. The basic information returned with the response include details such as observation
     * date and time, brief description of the weather conditions, weather icon, precipitation indicator flags, and
     * temperature. Additional details such as RealFeel™ Temperature and UV index are also returned.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which current conditions information is requested. The applicable
     *     query is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CurrentConditionsResponse> getCurrentConditionsAsync(ResponseFormat format, String query) {
        final WeatherDataUnit unit = null;
        final String details = null;
        final Integer duration = null;
        final String language = null;
        return getCurrentConditionsWithResponseAsync(format, query, unit, details, duration, language)
                .flatMap(
                        (Response<CurrentConditionsResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Current Conditions**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Get Current Conditions service returns detailed current weather conditions such as precipitation, temperature
     * and wind for a given coordinate location. Also, observations from the past 6 or 24 hours for a particular
     * location can be retrieved. The basic information returned with the response include details such as observation
     * date and time, brief description of the weather conditions, weather icon, precipitation indicator flags, and
     * temperature. Additional details such as RealFeel™ Temperature and UV index are also returned.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which current conditions information is requested. The applicable
     *     query is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param unit Specifies to return the data in either metric units or imperial units. Default value is metric.
     * @param details Return full details for the current conditions. Available values are * `true` - Returns full
     *     details. By default all details are returned. * `false` - Returns a truncated version of the current
     *     condition data, which includes observation date time, weather phrase, icon code, precipitation indicator
     *     flag, and temperature.
     * @param duration Time frame of the returned weather conditions. By default, the most current weather conditions
     *     will be returned. Default value is 0. Supported values are: * `0` - Return the most current weather
     *     conditions. * `6` - Return weather conditions from past 6 hours. * `24` - Return weather conditions from past
     *     24 hours.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CurrentConditionsResponse getCurrentConditions(
            ResponseFormat format,
            String query,
            WeatherDataUnit unit,
            String details,
            Integer duration,
            String language) {
        return getCurrentConditionsAsync(format, query, unit, details, duration, language).block();
    }

    /**
     * **Get Current Conditions**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Get Current Conditions service returns detailed current weather conditions such as precipitation, temperature
     * and wind for a given coordinate location. Also, observations from the past 6 or 24 hours for a particular
     * location can be retrieved. The basic information returned with the response include details such as observation
     * date and time, brief description of the weather conditions, weather icon, precipitation indicator flags, and
     * temperature. Additional details such as RealFeel™ Temperature and UV index are also returned.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which current conditions information is requested. The applicable
     *     query is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CurrentConditionsResponse getCurrentConditions(ResponseFormat format, String query) {
        final WeatherDataUnit unit = null;
        final String details = null;
        final Integer duration = null;
        final String language = null;
        return getCurrentConditionsAsync(format, query, unit, details, duration, language).block();
    }

    /**
     * **Get Daily Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>The service returns detailed weather forecast such as temperature and wind by day for the next 1, 5, 10, 15,
     * 25, or 45 days for a given coordinate location. The response include details such as temperature, wind,
     * precipitation, air quality, and UV index.
     *
     * <p>In S0 you can request daily forecast for the next 1, 5, 10, and 15 days. In S1 you can also request daily
     * forecast for the next 25 days, and 45 days.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which current conditions information is requested. The applicable
     *     query is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param unit Specifies to return the data in either metric units or imperial units. Default value is metric.
     * @param duration Specifies for how many days the daily forecast responses are returned. Available values are * `1`
     *     - Return forecast data for the next day. Returned by default. * `5` - Return forecast data for the next 5
     *     days. * `10` - Return forecast data for the next 10 days. * `25` - Return forecast data for the next 25 days.
     *     Only available in S1 SKU. * `45` - Return forecast data for the next 45 days. Only available in S1 SKU.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DailyForecastResponse>> getDailyForecastWithResponseAsync(
            ResponseFormat format, String query, WeatherDataUnit unit, Integer duration, String language) {
        final String apiVersion = "1.0";
        final String accept = "application/json";
        return service.getDailyForecast(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                apiVersion,
                format,
                query,
                unit,
                duration,
                language,
                accept);
    }

    /**
     * **Get Daily Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>The service returns detailed weather forecast such as temperature and wind by day for the next 1, 5, 10, 15,
     * 25, or 45 days for a given coordinate location. The response include details such as temperature, wind,
     * precipitation, air quality, and UV index.
     *
     * <p>In S0 you can request daily forecast for the next 1, 5, 10, and 15 days. In S1 you can also request daily
     * forecast for the next 25 days, and 45 days.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which current conditions information is requested. The applicable
     *     query is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param unit Specifies to return the data in either metric units or imperial units. Default value is metric.
     * @param duration Specifies for how many days the daily forecast responses are returned. Available values are * `1`
     *     - Return forecast data for the next day. Returned by default. * `5` - Return forecast data for the next 5
     *     days. * `10` - Return forecast data for the next 10 days. * `25` - Return forecast data for the next 25 days.
     *     Only available in S1 SKU. * `45` - Return forecast data for the next 45 days. Only available in S1 SKU.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DailyForecastResponse> getDailyForecastAsync(
            ResponseFormat format, String query, WeatherDataUnit unit, Integer duration, String language) {
        return getDailyForecastWithResponseAsync(format, query, unit, duration, language)
                .flatMap(
                        (Response<DailyForecastResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Daily Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>The service returns detailed weather forecast such as temperature and wind by day for the next 1, 5, 10, 15,
     * 25, or 45 days for a given coordinate location. The response include details such as temperature, wind,
     * precipitation, air quality, and UV index.
     *
     * <p>In S0 you can request daily forecast for the next 1, 5, 10, and 15 days. In S1 you can also request daily
     * forecast for the next 25 days, and 45 days.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which current conditions information is requested. The applicable
     *     query is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DailyForecastResponse> getDailyForecastAsync(ResponseFormat format, String query) {
        final WeatherDataUnit unit = null;
        final Integer duration = null;
        final String language = null;
        return getDailyForecastWithResponseAsync(format, query, unit, duration, language)
                .flatMap(
                        (Response<DailyForecastResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Daily Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>The service returns detailed weather forecast such as temperature and wind by day for the next 1, 5, 10, 15,
     * 25, or 45 days for a given coordinate location. The response include details such as temperature, wind,
     * precipitation, air quality, and UV index.
     *
     * <p>In S0 you can request daily forecast for the next 1, 5, 10, and 15 days. In S1 you can also request daily
     * forecast for the next 25 days, and 45 days.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which current conditions information is requested. The applicable
     *     query is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param unit Specifies to return the data in either metric units or imperial units. Default value is metric.
     * @param duration Specifies for how many days the daily forecast responses are returned. Available values are * `1`
     *     - Return forecast data for the next day. Returned by default. * `5` - Return forecast data for the next 5
     *     days. * `10` - Return forecast data for the next 10 days. * `25` - Return forecast data for the next 25 days.
     *     Only available in S1 SKU. * `45` - Return forecast data for the next 45 days. Only available in S1 SKU.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DailyForecastResponse getDailyForecast(
            ResponseFormat format, String query, WeatherDataUnit unit, Integer duration, String language) {
        return getDailyForecastAsync(format, query, unit, duration, language).block();
    }

    /**
     * **Get Daily Forecast**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>The service returns detailed weather forecast such as temperature and wind by day for the next 1, 5, 10, 15,
     * 25, or 45 days for a given coordinate location. The response include details such as temperature, wind,
     * precipitation, air quality, and UV index.
     *
     * <p>In S0 you can request daily forecast for the next 1, 5, 10, and 15 days. In S1 you can also request daily
     * forecast for the next 25 days, and 45 days.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which current conditions information is requested. The applicable
     *     query is specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DailyForecastResponse getDailyForecast(ResponseFormat format, String query) {
        final WeatherDataUnit unit = null;
        final Integer duration = null;
        final String language = null;
        return getDailyForecastAsync(format, query, unit, duration, language).block();
    }

    /**
     * **Get Weather along route**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Weather along a route API returns hyper local (one kilometer or less), up-to-the-minute weather nowcasts,
     * weather hazard assessments, and notifications along a route described as a sequence of waypoints. This includes a
     * list of weather hazards affecting the waypoint or route, and the aggregated hazard index for each waypoint might
     * be used to paint each portion of a route according to how safe it is for the driver. When submitting the
     * waypoints, it is recommended to stay within, or close to, the distance that can be traveled within 120-mins or
     * shortly after. Data is updated every five minutes.
     *
     * <p>The service supplements Azure Maps [Route Service](https://docs.microsoft.com/rest/api/maps/route) that allows
     * you to first request a route between an origin and a destination and use that as an input for Weather Along Route
     * endpoint.
     *
     * <p>In addition, the service supports scenarios to generate weather notifications for waypoints that experience an
     * increase in intensity of a weather hazard. For example, if the vehicle is expected to begin experiencing heavy
     * rain as it reaches a waypoint, a weather notification for heavy rain will be generated for that waypoint allowing
     * the end product to display a heavy rain notification before the driver reaches that waypoint. The trigger for
     * when to display the notification for a waypoint could be based, for example, on a
     * [geofence](https://docs.microsoft.com/azure/azure-maps/tutorial-iot-hub-maps), or selectable distance to the
     * waypoint.
     *
     * <p>The API covers all regions of the planet except latitudes above Greenland and Antarctica.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates through which the route is calculated, separated by colon (:) and entered in
     *     chronological order. A minimum of two waypoints is required. A single API call may contain up to 60
     *     waypoints. A waypoint indicates location, ETA, and optional heading: latitude,longitude,ETA,heading, where *
     *     `Latitude` - Latitude coordinate in decimal degrees. * `Longitude` - Longitude coordinate in decimal degrees.
     *     * `ETA (estimated time of arrival)` - The number of minutes from the present time that it will take for the
     *     vehicle to reach the waypoint. Allowed range is from 0.0 to 120.0 minutes. * `Heading` - An optional value
     *     indicating the vehicle heading as it passes the waypoint. Expressed in clockwise degrees relative to true
     *     north. This is issued to calculate sun glare as a driving hazard. Allowed range is from 0.0 to 360.0 degrees.
     *     If not provided, a heading will automatically be derived based on the position of neighboring waypoints.
     *     <p>It is recommended to stay within, or close to, the distance that can be traveled within 120-mins or
     *     shortly after. This way a more accurate assessment can be provided for the trip and prevent isolated events
     *     not being captured between waypoints. Information can and should be updated along the route (especially for
     *     trips greater than 2 hours) to continuously pull new waypoints moving forward, but also to ensure that
     *     forecast information for content such as precipitation type and intensity is accurate as storms develop and
     *     dissipate over time.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Weather Along Route.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<WeatherAlongRouteResponse>> getWeatherAlongRouteWithResponseAsync(
            ResponseFormat format, String query, String language) {
        final String apiVersion = "1.0";
        final String accept = "application/json";
        return service.getWeatherAlongRoute(
                this.client.getGeography(), this.client.getXMsClientId(), apiVersion, format, query, language, accept);
    }

    /**
     * **Get Weather along route**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Weather along a route API returns hyper local (one kilometer or less), up-to-the-minute weather nowcasts,
     * weather hazard assessments, and notifications along a route described as a sequence of waypoints. This includes a
     * list of weather hazards affecting the waypoint or route, and the aggregated hazard index for each waypoint might
     * be used to paint each portion of a route according to how safe it is for the driver. When submitting the
     * waypoints, it is recommended to stay within, or close to, the distance that can be traveled within 120-mins or
     * shortly after. Data is updated every five minutes.
     *
     * <p>The service supplements Azure Maps [Route Service](https://docs.microsoft.com/rest/api/maps/route) that allows
     * you to first request a route between an origin and a destination and use that as an input for Weather Along Route
     * endpoint.
     *
     * <p>In addition, the service supports scenarios to generate weather notifications for waypoints that experience an
     * increase in intensity of a weather hazard. For example, if the vehicle is expected to begin experiencing heavy
     * rain as it reaches a waypoint, a weather notification for heavy rain will be generated for that waypoint allowing
     * the end product to display a heavy rain notification before the driver reaches that waypoint. The trigger for
     * when to display the notification for a waypoint could be based, for example, on a
     * [geofence](https://docs.microsoft.com/azure/azure-maps/tutorial-iot-hub-maps), or selectable distance to the
     * waypoint.
     *
     * <p>The API covers all regions of the planet except latitudes above Greenland and Antarctica.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates through which the route is calculated, separated by colon (:) and entered in
     *     chronological order. A minimum of two waypoints is required. A single API call may contain up to 60
     *     waypoints. A waypoint indicates location, ETA, and optional heading: latitude,longitude,ETA,heading, where *
     *     `Latitude` - Latitude coordinate in decimal degrees. * `Longitude` - Longitude coordinate in decimal degrees.
     *     * `ETA (estimated time of arrival)` - The number of minutes from the present time that it will take for the
     *     vehicle to reach the waypoint. Allowed range is from 0.0 to 120.0 minutes. * `Heading` - An optional value
     *     indicating the vehicle heading as it passes the waypoint. Expressed in clockwise degrees relative to true
     *     north. This is issued to calculate sun glare as a driving hazard. Allowed range is from 0.0 to 360.0 degrees.
     *     If not provided, a heading will automatically be derived based on the position of neighboring waypoints.
     *     <p>It is recommended to stay within, or close to, the distance that can be traveled within 120-mins or
     *     shortly after. This way a more accurate assessment can be provided for the trip and prevent isolated events
     *     not being captured between waypoints. Information can and should be updated along the route (especially for
     *     trips greater than 2 hours) to continuously pull new waypoints moving forward, but also to ensure that
     *     forecast information for content such as precipitation type and intensity is accurate as storms develop and
     *     dissipate over time.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Weather Along Route.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<WeatherAlongRouteResponse> getWeatherAlongRouteAsync(
            ResponseFormat format, String query, String language) {
        return getWeatherAlongRouteWithResponseAsync(format, query, language)
                .flatMap(
                        (Response<WeatherAlongRouteResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Weather along route**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Weather along a route API returns hyper local (one kilometer or less), up-to-the-minute weather nowcasts,
     * weather hazard assessments, and notifications along a route described as a sequence of waypoints. This includes a
     * list of weather hazards affecting the waypoint or route, and the aggregated hazard index for each waypoint might
     * be used to paint each portion of a route according to how safe it is for the driver. When submitting the
     * waypoints, it is recommended to stay within, or close to, the distance that can be traveled within 120-mins or
     * shortly after. Data is updated every five minutes.
     *
     * <p>The service supplements Azure Maps [Route Service](https://docs.microsoft.com/rest/api/maps/route) that allows
     * you to first request a route between an origin and a destination and use that as an input for Weather Along Route
     * endpoint.
     *
     * <p>In addition, the service supports scenarios to generate weather notifications for waypoints that experience an
     * increase in intensity of a weather hazard. For example, if the vehicle is expected to begin experiencing heavy
     * rain as it reaches a waypoint, a weather notification for heavy rain will be generated for that waypoint allowing
     * the end product to display a heavy rain notification before the driver reaches that waypoint. The trigger for
     * when to display the notification for a waypoint could be based, for example, on a
     * [geofence](https://docs.microsoft.com/azure/azure-maps/tutorial-iot-hub-maps), or selectable distance to the
     * waypoint.
     *
     * <p>The API covers all regions of the planet except latitudes above Greenland and Antarctica.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates through which the route is calculated, separated by colon (:) and entered in
     *     chronological order. A minimum of two waypoints is required. A single API call may contain up to 60
     *     waypoints. A waypoint indicates location, ETA, and optional heading: latitude,longitude,ETA,heading, where *
     *     `Latitude` - Latitude coordinate in decimal degrees. * `Longitude` - Longitude coordinate in decimal degrees.
     *     * `ETA (estimated time of arrival)` - The number of minutes from the present time that it will take for the
     *     vehicle to reach the waypoint. Allowed range is from 0.0 to 120.0 minutes. * `Heading` - An optional value
     *     indicating the vehicle heading as it passes the waypoint. Expressed in clockwise degrees relative to true
     *     north. This is issued to calculate sun glare as a driving hazard. Allowed range is from 0.0 to 360.0 degrees.
     *     If not provided, a heading will automatically be derived based on the position of neighboring waypoints.
     *     <p>It is recommended to stay within, or close to, the distance that can be traveled within 120-mins or
     *     shortly after. This way a more accurate assessment can be provided for the trip and prevent isolated events
     *     not being captured between waypoints. Information can and should be updated along the route (especially for
     *     trips greater than 2 hours) to continuously pull new waypoints moving forward, but also to ensure that
     *     forecast information for content such as precipitation type and intensity is accurate as storms develop and
     *     dissipate over time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Weather Along Route.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<WeatherAlongRouteResponse> getWeatherAlongRouteAsync(ResponseFormat format, String query) {
        final String language = null;
        return getWeatherAlongRouteWithResponseAsync(format, query, language)
                .flatMap(
                        (Response<WeatherAlongRouteResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Weather along route**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Weather along a route API returns hyper local (one kilometer or less), up-to-the-minute weather nowcasts,
     * weather hazard assessments, and notifications along a route described as a sequence of waypoints. This includes a
     * list of weather hazards affecting the waypoint or route, and the aggregated hazard index for each waypoint might
     * be used to paint each portion of a route according to how safe it is for the driver. When submitting the
     * waypoints, it is recommended to stay within, or close to, the distance that can be traveled within 120-mins or
     * shortly after. Data is updated every five minutes.
     *
     * <p>The service supplements Azure Maps [Route Service](https://docs.microsoft.com/rest/api/maps/route) that allows
     * you to first request a route between an origin and a destination and use that as an input for Weather Along Route
     * endpoint.
     *
     * <p>In addition, the service supports scenarios to generate weather notifications for waypoints that experience an
     * increase in intensity of a weather hazard. For example, if the vehicle is expected to begin experiencing heavy
     * rain as it reaches a waypoint, a weather notification for heavy rain will be generated for that waypoint allowing
     * the end product to display a heavy rain notification before the driver reaches that waypoint. The trigger for
     * when to display the notification for a waypoint could be based, for example, on a
     * [geofence](https://docs.microsoft.com/azure/azure-maps/tutorial-iot-hub-maps), or selectable distance to the
     * waypoint.
     *
     * <p>The API covers all regions of the planet except latitudes above Greenland and Antarctica.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates through which the route is calculated, separated by colon (:) and entered in
     *     chronological order. A minimum of two waypoints is required. A single API call may contain up to 60
     *     waypoints. A waypoint indicates location, ETA, and optional heading: latitude,longitude,ETA,heading, where *
     *     `Latitude` - Latitude coordinate in decimal degrees. * `Longitude` - Longitude coordinate in decimal degrees.
     *     * `ETA (estimated time of arrival)` - The number of minutes from the present time that it will take for the
     *     vehicle to reach the waypoint. Allowed range is from 0.0 to 120.0 minutes. * `Heading` - An optional value
     *     indicating the vehicle heading as it passes the waypoint. Expressed in clockwise degrees relative to true
     *     north. This is issued to calculate sun glare as a driving hazard. Allowed range is from 0.0 to 360.0 degrees.
     *     If not provided, a heading will automatically be derived based on the position of neighboring waypoints.
     *     <p>It is recommended to stay within, or close to, the distance that can be traveled within 120-mins or
     *     shortly after. This way a more accurate assessment can be provided for the trip and prevent isolated events
     *     not being captured between waypoints. Information can and should be updated along the route (especially for
     *     trips greater than 2 hours) to continuously pull new waypoints moving forward, but also to ensure that
     *     forecast information for content such as precipitation type and intensity is accurate as storms develop and
     *     dissipate over time.
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Weather Along Route.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WeatherAlongRouteResponse getWeatherAlongRoute(ResponseFormat format, String query, String language) {
        return getWeatherAlongRouteAsync(format, query, language).block();
    }

    /**
     * **Get Weather along route**
     *
     * <p>**Applies to**: S1 pricing tier.
     *
     * <p>Weather along a route API returns hyper local (one kilometer or less), up-to-the-minute weather nowcasts,
     * weather hazard assessments, and notifications along a route described as a sequence of waypoints. This includes a
     * list of weather hazards affecting the waypoint or route, and the aggregated hazard index for each waypoint might
     * be used to paint each portion of a route according to how safe it is for the driver. When submitting the
     * waypoints, it is recommended to stay within, or close to, the distance that can be traveled within 120-mins or
     * shortly after. Data is updated every five minutes.
     *
     * <p>The service supplements Azure Maps [Route Service](https://docs.microsoft.com/rest/api/maps/route) that allows
     * you to first request a route between an origin and a destination and use that as an input for Weather Along Route
     * endpoint.
     *
     * <p>In addition, the service supports scenarios to generate weather notifications for waypoints that experience an
     * increase in intensity of a weather hazard. For example, if the vehicle is expected to begin experiencing heavy
     * rain as it reaches a waypoint, a weather notification for heavy rain will be generated for that waypoint allowing
     * the end product to display a heavy rain notification before the driver reaches that waypoint. The trigger for
     * when to display the notification for a waypoint could be based, for example, on a
     * [geofence](https://docs.microsoft.com/azure/azure-maps/tutorial-iot-hub-maps), or selectable distance to the
     * waypoint.
     *
     * <p>The API covers all regions of the planet except latitudes above Greenland and Antarctica.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates through which the route is calculated, separated by colon (:) and entered in
     *     chronological order. A minimum of two waypoints is required. A single API call may contain up to 60
     *     waypoints. A waypoint indicates location, ETA, and optional heading: latitude,longitude,ETA,heading, where *
     *     `Latitude` - Latitude coordinate in decimal degrees. * `Longitude` - Longitude coordinate in decimal degrees.
     *     * `ETA (estimated time of arrival)` - The number of minutes from the present time that it will take for the
     *     vehicle to reach the waypoint. Allowed range is from 0.0 to 120.0 minutes. * `Heading` - An optional value
     *     indicating the vehicle heading as it passes the waypoint. Expressed in clockwise degrees relative to true
     *     north. This is issued to calculate sun glare as a driving hazard. Allowed range is from 0.0 to 360.0 degrees.
     *     If not provided, a heading will automatically be derived based on the position of neighboring waypoints.
     *     <p>It is recommended to stay within, or close to, the distance that can be traveled within 120-mins or
     *     shortly after. This way a more accurate assessment can be provided for the trip and prevent isolated events
     *     not being captured between waypoints. Information can and should be updated along the route (especially for
     *     trips greater than 2 hours) to continuously pull new waypoints moving forward, but also to ensure that
     *     forecast information for content such as precipitation type and intensity is accurate as storms develop and
     *     dissipate over time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Weather Along Route.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WeatherAlongRouteResponse getWeatherAlongRoute(ResponseFormat format, String query) {
        final String language = null;
        return getWeatherAlongRouteAsync(format, query, language).block();
    }

    /**
     * **Get Severe Weather Alerts**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Severe weather phenomenon can significantly impact our everyday life and business operations. For example,
     * severe weather conditions such as tropical storms, high winds or flooding can close roads and force logistics
     * companies to reroute their fleet causing delays in reaching destinations and breaking the cold chain of
     * refrigerated food products.  Azure Maps Severe Weather Alerts API returns the severe weather alerts that are
     * available worldwide from both official Government Meteorological Agencies and leading global to
     * regional weather alert providers. The service can return details such as alert type, category, level and detailed
     * description about the active severe alerts for the requested location, like hurricanes, thunderstorms, lightning,
     * heat waves or forest fires.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which severe weather alerts are requested. The applicable query is
     *     specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @param details Return full details for the severe weather alerts. Available values are * `true` - Returns full
     *     details. By default all details are returned. * `false` - Returns a truncated version of the alerts data,
     *     which excludes the area-specific full description of alert details (`alertDetails`).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Severe Weather Alerts call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SevereWeatherAlertsResponse>> getSevereWeatherAlertsWithResponseAsync(
            ResponseFormat format, String query, String language, String details) {
        final String apiVersion = "1.0";
        final String accept = "application/json";
        return service.getSevereWeatherAlerts(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                apiVersion,
                format,
                query,
                language,
                details,
                accept);
    }

    /**
     * **Get Severe Weather Alerts**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Severe weather phenomenon can significantly impact our everyday life and business operations. For example,
     * severe weather conditions such as tropical storms, high winds or flooding can close roads and force logistics
     * companies to reroute their fleet causing delays in reaching destinations and breaking the cold chain of
     * refrigerated food products.  Azure Maps Severe Weather Alerts API returns the severe weather alerts that are
     * available worldwide from both official Government Meteorological Agencies and leading global to
     * regional weather alert providers. The service can return details such as alert type, category, level and detailed
     * description about the active severe alerts for the requested location, like hurricanes, thunderstorms, lightning,
     * heat waves or forest fires.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which severe weather alerts are requested. The applicable query is
     *     specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @param details Return full details for the severe weather alerts. Available values are * `true` - Returns full
     *     details. By default all details are returned. * `false` - Returns a truncated version of the alerts data,
     *     which excludes the area-specific full description of alert details (`alertDetails`).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Severe Weather Alerts call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SevereWeatherAlertsResponse> getSevereWeatherAlertsAsync(
            ResponseFormat format, String query, String language, String details) {
        return getSevereWeatherAlertsWithResponseAsync(format, query, language, details)
                .flatMap(
                        (Response<SevereWeatherAlertsResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Severe Weather Alerts**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Severe weather phenomenon can significantly impact our everyday life and business operations. For example,
     * severe weather conditions such as tropical storms, high winds or flooding can close roads and force logistics
     * companies to reroute their fleet causing delays in reaching destinations and breaking the cold chain of
     * refrigerated food products.  Azure Maps Severe Weather Alerts API returns the severe weather alerts that are
     * available worldwide from both official Government Meteorological Agencies and leading global to
     * regional weather alert providers. The service can return details such as alert type, category, level and detailed
     * description about the active severe alerts for the requested location, like hurricanes, thunderstorms, lightning,
     * heat waves or forest fires.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which severe weather alerts are requested. The applicable query is
     *     specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Severe Weather Alerts call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SevereWeatherAlertsResponse> getSevereWeatherAlertsAsync(ResponseFormat format, String query) {
        final String language = null;
        final String details = null;
        return getSevereWeatherAlertsWithResponseAsync(format, query, language, details)
                .flatMap(
                        (Response<SevereWeatherAlertsResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Severe Weather Alerts**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Severe weather phenomenon can significantly impact our everyday life and business operations. For example,
     * severe weather conditions such as tropical storms, high winds or flooding can close roads and force logistics
     * companies to reroute their fleet causing delays in reaching destinations and breaking the cold chain of
     * refrigerated food products.  Azure Maps Severe Weather Alerts API returns the severe weather alerts that are
     * available worldwide from both official Government Meteorological Agencies and leading global to
     * regional weather alert providers. The service can return details such as alert type, category, level and detailed
     * description about the active severe alerts for the requested location, like hurricanes, thunderstorms, lightning,
     * heat waves or forest fires.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which severe weather alerts are requested. The applicable query is
     *     specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @param details Return full details for the severe weather alerts. Available values are * `true` - Returns full
     *     details. By default all details are returned. * `false` - Returns a truncated version of the alerts data,
     *     which excludes the area-specific full description of alert details (`alertDetails`).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Severe Weather Alerts call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SevereWeatherAlertsResponse getSevereWeatherAlerts(
            ResponseFormat format, String query, String language, String details) {
        return getSevereWeatherAlertsAsync(format, query, language, details).block();
    }

    /**
     * **Get Severe Weather Alerts**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>Severe weather phenomenon can significantly impact our everyday life and business operations. For example,
     * severe weather conditions such as tropical storms, high winds or flooding can close roads and force logistics
     * companies to reroute their fleet causing delays in reaching destinations and breaking the cold chain of
     * refrigerated food products.  Azure Maps Severe Weather Alerts API returns the severe weather alerts that are
     * available worldwide from both official Government Meteorological Agencies and leading global to
     * regional weather alert providers. The service can return details such as alert type, category, level and detailed
     * description about the active severe alerts for the requested location, like hurricanes, thunderstorms, lightning,
     * heat waves or forest fires.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which severe weather alerts are requested. The applicable query is
     *     specified as a comma separated string composed by latitude followed by longitude e.g.
     *     "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Severe Weather Alerts call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SevereWeatherAlertsResponse getSevereWeatherAlerts(ResponseFormat format, String query) {
        final String language = null;
        final String details = null;
        return getSevereWeatherAlertsAsync(format, query, language, details).block();
    }

    /**
     * **Get Daily Indices**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>There may be times when you want to know if the weather conditions are optimal for a specific activity, for
     * example, for outdoor construction, indoor activities, running or farming including soil moisture information.
     * Azure Maps Indices API returns index values that will guide end users to plan future activities. For example, a
     * health mobile application can notify users that today is good weather for running or for other outdoors
     * activities like for playing golf, and retail stores can optimize their digital marketing campaigns based on
     * predicted index values. The service returns in daily indices values for current and next 5, 10 and 15 days
     * starting from current day.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which daily indices are requested. The applicable query is specified
     *     as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @param duration Specifies for how many days the daily indices are returned. By default, the indices data for the
     *     current day will be returned. When requesting future indices data, the current day is included in the
     *     response as day 1. Available values are * `1` - Return daily index data for the current day. Default value. *
     *     `5` - Return 5 days of daily index data starting from the current day. * `10` - Return 10 days of daily index
     *     data starting from the current day. * `15` - Return 15 days of daily index data starting from the current
     *     day.
     * @param indexId Numeric index identifier that can be used for restricting returned results to the corresponding
     *     index type. Cannot be paired with `indexGroupId`. Please refer to [Weather Service
     *     Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported indices.
     * @param indexGroupId Numeric index group identifier that can be used for restricting returned results to the
     *     corresponding subset of indices (index group). Cannot be paired with `indexId`. Please refer to [Weather
     *     Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported index groups.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Daily Indices call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DailyIndicesResponse>> getDailyIndicesWithResponseAsync(
            ResponseFormat format,
            String query,
            String language,
            Integer duration,
            Integer indexId,
            Integer indexGroupId) {
        final String apiVersion = "1.0";
        final String accept = "application/json";
        return service.getDailyIndices(
                this.client.getGeography(),
                this.client.getXMsClientId(),
                apiVersion,
                format,
                query,
                language,
                duration,
                indexId,
                indexGroupId,
                accept);
    }

    /**
     * **Get Daily Indices**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>There may be times when you want to know if the weather conditions are optimal for a specific activity, for
     * example, for outdoor construction, indoor activities, running or farming including soil moisture information.
     * Azure Maps Indices API returns index values that will guide end users to plan future activities. For example, a
     * health mobile application can notify users that today is good weather for running or for other outdoors
     * activities like for playing golf, and retail stores can optimize their digital marketing campaigns based on
     * predicted index values. The service returns in daily indices values for current and next 5, 10 and 15 days
     * starting from current day.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which daily indices are requested. The applicable query is specified
     *     as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @param duration Specifies for how many days the daily indices are returned. By default, the indices data for the
     *     current day will be returned. When requesting future indices data, the current day is included in the
     *     response as day 1. Available values are * `1` - Return daily index data for the current day. Default value. *
     *     `5` - Return 5 days of daily index data starting from the current day. * `10` - Return 10 days of daily index
     *     data starting from the current day. * `15` - Return 15 days of daily index data starting from the current
     *     day.
     * @param indexId Numeric index identifier that can be used for restricting returned results to the corresponding
     *     index type. Cannot be paired with `indexGroupId`. Please refer to [Weather Service
     *     Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported indices.
     * @param indexGroupId Numeric index group identifier that can be used for restricting returned results to the
     *     corresponding subset of indices (index group). Cannot be paired with `indexId`. Please refer to [Weather
     *     Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported index groups.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Daily Indices call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DailyIndicesResponse> getDailyIndicesAsync(
            ResponseFormat format,
            String query,
            String language,
            Integer duration,
            Integer indexId,
            Integer indexGroupId) {
        return getDailyIndicesWithResponseAsync(format, query, language, duration, indexId, indexGroupId)
                .flatMap(
                        (Response<DailyIndicesResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Daily Indices**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>There may be times when you want to know if the weather conditions are optimal for a specific activity, for
     * example, for outdoor construction, indoor activities, running or farming including soil moisture information.
     * Azure Maps Indices API returns index values that will guide end users to plan future activities. For example, a
     * health mobile application can notify users that today is good weather for running or for other outdoors
     * activities like for playing golf, and retail stores can optimize their digital marketing campaigns based on
     * predicted index values. The service returns in daily indices values for current and next 5, 10 and 15 days
     * starting from current day.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which daily indices are requested. The applicable query is specified
     *     as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Daily Indices call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DailyIndicesResponse> getDailyIndicesAsync(ResponseFormat format, String query) {
        final String language = null;
        final Integer duration = null;
        final Integer indexId = null;
        final Integer indexGroupId = null;
        return getDailyIndicesWithResponseAsync(format, query, language, duration, indexId, indexGroupId)
                .flatMap(
                        (Response<DailyIndicesResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * **Get Daily Indices**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>There may be times when you want to know if the weather conditions are optimal for a specific activity, for
     * example, for outdoor construction, indoor activities, running or farming including soil moisture information.
     * Azure Maps Indices API returns index values that will guide end users to plan future activities. For example, a
     * health mobile application can notify users that today is good weather for running or for other outdoors
     * activities like for playing golf, and retail stores can optimize their digital marketing campaigns based on
     * predicted index values. The service returns in daily indices values for current and next 5, 10 and 15 days
     * starting from current day.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which daily indices are requested. The applicable query is specified
     *     as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".
     * @param language Language in which search results should be returned. Should be one of supported IETF language
     *     tags, case insensitive. When data in specified language is not available for a specific field, default
     *     language is used. Default value is en-us.
     *     <p>Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
     *     details.
     * @param duration Specifies for how many days the daily indices are returned. By default, the indices data for the
     *     current day will be returned. When requesting future indices data, the current day is included in the
     *     response as day 1. Available values are * `1` - Return daily index data for the current day. Default value. *
     *     `5` - Return 5 days of daily index data starting from the current day. * `10` - Return 10 days of daily index
     *     data starting from the current day. * `15` - Return 15 days of daily index data starting from the current
     *     day.
     * @param indexId Numeric index identifier that can be used for restricting returned results to the corresponding
     *     index type. Cannot be paired with `indexGroupId`. Please refer to [Weather Service
     *     Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported indices.
     * @param indexGroupId Numeric index group identifier that can be used for restricting returned results to the
     *     corresponding subset of indices (index group). Cannot be paired with `indexId`. Please refer to [Weather
     *     Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported index groups.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Daily Indices call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DailyIndicesResponse getDailyIndices(
            ResponseFormat format,
            String query,
            String language,
            Integer duration,
            Integer indexId,
            Integer indexGroupId) {
        return getDailyIndicesAsync(format, query, language, duration, indexId, indexGroupId).block();
    }

    /**
     * **Get Daily Indices**
     *
     * <p>**Applies to**: S0 and S1 pricing tiers.
     *
     * <p>There may be times when you want to know if the weather conditions are optimal for a specific activity, for
     * example, for outdoor construction, indoor activities, running or farming including soil moisture information.
     * Azure Maps Indices API returns index values that will guide end users to plan future activities. For example, a
     * health mobile application can notify users that today is good weather for running or for other outdoors
     * activities like for playing golf, and retail stores can optimize their digital marketing campaigns based on
     * predicted index values. The service returns in daily indices values for current and next 5, 10 and 15 days
     * starting from current day.
     *
     * @param format Desired format of the response. Only `json` format is supported.
     * @param query Coordinates of the location for which daily indices are requested. The applicable query is specified
     *     as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this object is returned from a successful Get Daily Indices call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DailyIndicesResponse getDailyIndices(ResponseFormat format, String query) {
        final String language = null;
        final Integer duration = null;
        final Integer indexId = null;
        final Integer indexGroupId = null;
        return getDailyIndicesAsync(format, query, language, duration, indexId, indexGroupId).block();
    }
}
