// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.maps.service;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.maps.service.implementation.DatasetsImpl;
import com.azure.maps.service.models.DatasetDetailInfo;
import com.azure.maps.service.models.ErrorResponseException;
import com.azure.maps.service.models.LongRunningOperationResult;

/** Initializes a new instance of the synchronous MapsClient type. */
@ServiceClient(builder = MapsClientBuilder.class)
public final class DatasetClient {
    private final DatasetsImpl serviceClient;

    /**
     * Initializes an instance of Datasets client.
     *
     * @param serviceClient the service client implementation.
     */
    DatasetClient(DatasetsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to create a dataset from data that was uploaded to the Azure Maps Data Service and
     * converted using the Azure Maps Conversion Service.
     *
     * <p>You can use this API in a scenario like uploading a DWG zip package for a building, converting the zip package
     * using the Azure Maps Conversion Service, and creating a dataset from the converted zip package. The created
     * dataset can be used to create tilesets using the Azure Maps Tileset Service and can be queried via the Azure Maps
     * WFS Service.
     *
     * <p>### Submit Create Request
     *
     * <p>To create your dataset, you will use a `POST` request where the `conversionId` query parameter is an ID that
     * represents the converted DWG zip package, the `datasetId` parameter will be the ID of a previously created
     * dataset to append with the current dataset and, optionally, the `description` query parameter will contain a
     * description (if description is not provided a default description will be given).
     *
     * <p>The Create API is a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * @param conversionId The unique ID used to create the dataset. The `conversionId` must have been obtained from a
     *     successful call to the Conversion Service Convert API and may be provided with multiple query parameters with
     *     same name (if more than one is provided).
     * @param datasetId The ID for the dataset to append with. The dataset must originate from a previous dataset
     *     creation call that matches the datasetId.
     * @param descriptionDataset The description to be given to the dataset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void create(String conversionId, String datasetId, String descriptionDataset) {
        this.serviceClient.create(conversionId, datasetId, descriptionDataset);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to create a dataset from data that was uploaded to the Azure Maps Data Service and
     * converted using the Azure Maps Conversion Service.
     *
     * <p>You can use this API in a scenario like uploading a DWG zip package for a building, converting the zip package
     * using the Azure Maps Conversion Service, and creating a dataset from the converted zip package. The created
     * dataset can be used to create tilesets using the Azure Maps Tileset Service and can be queried via the Azure Maps
     * WFS Service.
     *
     * <p>### Submit Create Request
     *
     * <p>To create your dataset, you will use a `POST` request where the `conversionId` query parameter is an ID that
     * represents the converted DWG zip package, the `datasetId` parameter will be the ID of a previously created
     * dataset to append with the current dataset and, optionally, the `description` query parameter will contain a
     * description (if description is not provided a default description will be given).
     *
     * <p>The Create API is a [long-running request](https://aka.ms/am-creator-lrt-v2).
     *
     * @param conversionId The unique ID used to create the dataset. The `conversionId` must have been obtained from a
     *     successful call to the Conversion Service Convert API and may be provided with multiple query parameters with
     *     same name (if more than one is provided).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void create(String conversionId) {
        this.serviceClient.create(conversionId);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a list of all previously successfully created datasets.
     *
     * <p>### Submit List Request
     *
     * <p>To list all your datasets, you will issue a `GET` request with no additional parameters.
     *
     * <p>### List Data Response
     *
     * <p>The List API returns the complete list of all datasets in `json` format. The response contains the following
     * fields (if they are not null or empty): &gt; created - The timestamp the dataset was created. &gt; datasetId -
     * The id for the dataset. &gt; description - The description for the dataset. &gt; datasetSources - The source data
     * that was used when the create request was issued. &gt; ontology - The source
     * [ontology](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) that was used in the
     * conversion service for the input data.&lt;br/&gt;
     *
     * <p>The `datasetSources` describes the source data that was used when the create request was issued and contains
     * the following elements (if they are not null or empty):
     *
     * <p>&gt; conversionIds - The list of `conversionId` (null if none were provided). &gt; appendDatasetId - The
     * `datasetId` that was used for an append operation (null if none was used). &gt;featureCounts - The counts for
     * each feature type in the dataset.&lt;br/&gt;
     *
     * <p>Here's a sample response returning the `timestamp`, `datasetId`, `description`, `datasetSources`, and
     * `ontology` of 3 dataset resources:
     *
     * <p>```json { "datasets": [ { "timestamp": "2020-01-01T22:50:48.123Z", "datasetId":
     * "f6495f62-94f8-0ec2-c252-45626f82fcb2", "description": "Some description or comment for the dataset.",
     * "datasetSources": { "conversionIds": [ "15d21452-c9bb-27b6-5e79-743ca5c3205d" ], }, "ontology": "facility-2.0",
     * "featureCounts": { "directoryInfo": 2, "category": 10, "facility": 1, "level": 3, "unit": 183, "zone": 3,
     * "verticalPenetration": 6, "opening": 48, "areaElement": 108 } }, { "timestamp": "2020-01-01T22:57:53.123Z",
     * "datasetId": "8b1288fa-1958-4a2b-b68e-13a7i5af7d7c", "description": "Create from upload
     * '0c1288fa-2058-4a1b-b68d-13a5f5af7d7c'.", "datasetSources": { "conversionIds": [
     * "0c1288fa-2058-4a1b-b68d-13a5f5af7d7c" ], "appendDatasetId": "46d1edb6-d29e-4786-9589-dbd4efd7a977" },
     * "ontology": "facility-2.0", "featureCounts": { "directoryInfo": 2, "category": 10, "facility": 1, "level": 3,
     * "unit": 183, "zone": 3, "verticalPenetration": 6, "opening": 48, "areaElement": 108 } } ] } ```.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for the Dataset List API.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DatasetDetailInfo> list() {
        return this.serviceClient.list();
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>This API allows the caller to fetch a previously successfully created dataset.
     *
     * <p>### Submit Get Details Request
     *
     * <p>To get the details for a previously created dataset, you will issue a `GET` request with the `datasetId` in
     * the path.
     *
     * <p>### Get Details Response
     *
     * <p>The Get Details API returns the details for a dataset in `json` format. The response contains the following
     * fields (if they are not null or empty): &gt; created - The timestamp the dataset was created. &gt; datasetId -
     * The id for the dataset. &gt; description - The description for the dataset. &gt; datasetSources - The source data
     * that was used when the create request was issued. &gt; ontology - The source
     * [ontology](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) that was used in the
     * conversion service for the input data.&lt;br/&gt;
     *
     * <p>The `datasetSources` describes the source data that was used when the create request was issued and contains
     * the following elements (if they are not null or empty): &gt; conversionIds - The list of `conversionId` (null if
     * none were provided). &gt; appendDatasetId - The `datasetId` that was used for an append operation (null if none
     * was used). &gt;featureCounts - The counts for each feature type in the dataset.&lt;br/&gt;
     *
     * <p>Here's a sample response returning the `timestamp`, `datasetId`, `description`, `datasetSources`, and
     * `ontology` of a dataset resource:
     *
     * <p>```json { "timestamp": "2020-01-01T22:50:48.123Z", "datasetId": "f6495f62-94f8-0ec2-c252-45626f82fcb2",
     * "description": "Some description or comment for the dataset.", "datasetSources": { "conversionIds": [
     * "15d21452-c9bb-27b6-5e79-743ca5c3205d" ], }, "ontology": "facility-2.0", "featureCounts": { "directoryInfo": 2,
     * "category": 10, "facility": 1, "level": 3, "unit": 183, "zone": 3, "verticalPenetration": 6, "opening": 48,
     * "areaElement": 108 } } ```.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detail information for the dataset.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DatasetDetailInfo get(String datasetId) {
        return this.serviceClient.get(datasetId);
    }

    /**
     * **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
     *
     * <p>Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
     * and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and
     * tools that apply to Azure Maps Creator.
     *
     * <p>You can also use this API to delete old/unused datasets to create space for new Creator content.
     *
     * <p>### Submit Delete Request
     *
     * <p>To delete your content you will issue a `DELETE` request where the path will contain the `datasetId` of the
     * dataset to delete.
     *
     * @param datasetId The identifier for the dataset to query from.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String datasetId) {
        this.serviceClient.delete(datasetId);
    }

    /**
     * This API allows the caller to view the current progress of a dataset operation and the path is obtained from a
     * call to the Create API.
     *
     * <p>### Submit Operations Request
     *
     * <p>To view the current progress of a dataset operation, you will use a `GET` request where the `operationId`
     * given the path is the ID that represents the operation.
     *
     * <p>### Operation Response
     *
     * <p>While in progress, a `200-OK` http status code will be returned with no extra headers. If the operation
     * succeeds, a `200-OK` http status code with Resource-Location header will be returned.
     *
     * @param operationId The ID to query the status for the dataset create/import request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a Long-Running Operations API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LongRunningOperationResult getOperation(String operationId) {
        return this.serviceClient.getOperation(operationId);
    }
}
