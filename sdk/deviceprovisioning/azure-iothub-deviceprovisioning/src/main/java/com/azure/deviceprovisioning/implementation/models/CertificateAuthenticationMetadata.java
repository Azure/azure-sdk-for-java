// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.deviceprovisioning.implementation.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** The CertificateAuthenticationMetadata model. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "authenticationMetadataKind")
@JsonTypeName("CertificateAuthenticationMetadata")
@Immutable
public final class CertificateAuthenticationMetadata extends AuthenticationMetadata {
    /*
     * Device certificate metadata.
     */
    @JsonProperty(value = "deviceCertificateMetadata", access = JsonProperty.Access.WRITE_ONLY)
    private CertificateMetadata deviceCertificateMetadata;

    /*
     * Certificate authority metadata.
     */
    @JsonProperty(value = "certificateAuthorityMetadata", access = JsonProperty.Access.WRITE_ONLY)
    private CertificateMetadata certificateAuthorityMetadata;

    /**
     * Get the deviceCertificateMetadata property: Device certificate metadata.
     *
     * @return the deviceCertificateMetadata value.
     */
    public CertificateMetadata getDeviceCertificateMetadata() {
        return this.deviceCertificateMetadata;
    }

    /**
     * Get the certificateAuthorityMetadata property: Certificate authority metadata.
     *
     * @return the certificateAuthorityMetadata value.
     */
    public CertificateMetadata getCertificateAuthorityMetadata() {
        return this.certificateAuthorityMetadata;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (getDeviceCertificateMetadata() != null) {
            getDeviceCertificateMetadata().validate();
        }
        if (getCertificateAuthorityMetadata() != null) {
            getCertificateAuthorityMetadata().validate();
        }
    }
}
