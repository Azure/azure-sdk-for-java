// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.deviceprovisioning.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.deviceprovisioning.implementation.models.AcceptDeviceRecordTransferResponse;
import com.azure.deviceprovisioning.implementation.models.DeleteDeviceGroupResponse;
import com.azure.deviceprovisioning.implementation.models.DeleteDeviceRecordResponse;
import com.azure.deviceprovisioning.implementation.models.DeviceGroup;
import com.azure.deviceprovisioning.implementation.models.DeviceGroupQueryResponse;
import com.azure.deviceprovisioning.implementation.models.DeviceRecord;
import com.azure.deviceprovisioning.implementation.models.DeviceRecordQueryResponse;
import com.azure.deviceprovisioning.implementation.models.DeviceTransferInfo;
import com.azure.deviceprovisioning.implementation.models.Enum1;
import com.azure.deviceprovisioning.implementation.models.Enum6;
import com.azure.deviceprovisioning.implementation.models.GetDeviceGroupResponse;
import com.azure.deviceprovisioning.implementation.models.GetDeviceRecordResponse;
import com.azure.deviceprovisioning.implementation.models.GetDeviceTransferResponse;
import com.azure.deviceprovisioning.implementation.models.GetLinkedHubResponse;
import com.azure.deviceprovisioning.implementation.models.GetOperationStatusResponse;
import com.azure.deviceprovisioning.implementation.models.GetProvisioningRecordResponse;
import com.azure.deviceprovisioning.implementation.models.GetProvisioningSettingsResponse;
import com.azure.deviceprovisioning.implementation.models.LinkedHub;
import com.azure.deviceprovisioning.implementation.models.LinkedHubQueryResponse;
import com.azure.deviceprovisioning.implementation.models.ProvisioningServiceErrorDetailsException;
import com.azure.deviceprovisioning.implementation.models.ProvisioningSettings;
import com.azure.deviceprovisioning.implementation.models.ProvisioningSettingsQueryResponse;
import com.azure.deviceprovisioning.implementation.models.Query;
import com.azure.deviceprovisioning.implementation.models.TransferToken;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the ProvisioningServiceClient type. */
public final class ProvisioningServiceClientImpl {
    /** The proxy service used to perform REST calls. */
    private final ProvisioningServiceClientService service;

    /** server parameter. */
    private final String host;

    /**
     * Gets server parameter.
     *
     * @return the host value.
     */
    public String getHost() {
        return this.host;
    }

    /** Api Version. */
    private final String apiVersion;

    /**
     * Gets Api Version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of ProvisioningServiceClient client.
     *
     * @param host server parameter.
     * @param apiVersion Api Version.
     */
    ProvisioningServiceClientImpl(String host, String apiVersion) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                host,
                apiVersion);
    }

    /**
     * Initializes an instance of ProvisioningServiceClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param host server parameter.
     * @param apiVersion Api Version.
     */
    ProvisioningServiceClientImpl(HttpPipeline httpPipeline, String host, String apiVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), host, apiVersion);
    }

    /**
     * Initializes an instance of ProvisioningServiceClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param host server parameter.
     * @param apiVersion Api Version.
     */
    ProvisioningServiceClientImpl(
            HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String host, String apiVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.host = host;
        this.apiVersion = apiVersion;
        this.service =
                RestProxy.create(
                        ProvisioningServiceClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for ProvisioningServiceClient to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ProvisioningServiceC")
    private interface ProvisioningServiceClientService {
        @Get("/deviceGroups/{deviceGroupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<GetDeviceGroupResponse> getDeviceGroup(
                @HostParam("$host") String host,
                @PathParam("deviceGroupId") String deviceGroupId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Put("/deviceGroups/{deviceGroupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<Response<DeviceGroup>> createOrReplaceDeviceGroup(
                @HostParam("$host") String host,
                @PathParam("deviceGroupId") String deviceGroupId,
                @HeaderParam("If-Match") String ifMatch,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") DeviceGroup deviceGroup,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/deviceGroups/{deviceGroupId}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<DeleteDeviceGroupResponse> deleteDeviceGroup(
                @HostParam("$host") String host,
                @PathParam("deviceGroupId") String deviceGroupId,
                @HeaderParam("If-Match") String ifMatch,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/deviceGroups/{deviceGroupId}/deviceRecords/{deviceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<GetDeviceRecordResponse> getDeviceRecord(
                @HostParam("$host") String host,
                @PathParam("deviceGroupId") String deviceGroupId,
                @PathParam("deviceId") String deviceId,
                @QueryParam("$expand") Enum1 expand,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Put("/deviceGroups/{deviceGroupId}/deviceRecords/{deviceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<Response<DeviceRecord>> createOrReplaceDeviceRecord(
                @HostParam("$host") String host,
                @PathParam("deviceGroupId") String deviceGroupId,
                @PathParam("deviceId") String deviceId,
                @HeaderParam("If-Match") String ifMatch,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") DeviceRecord deviceRecord,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/deviceGroups/{deviceGroupId}/deviceRecords/{deviceId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<DeleteDeviceRecordResponse> deleteDeviceRecord(
                @HostParam("$host") String host,
                @PathParam("deviceGroupId") String deviceGroupId,
                @PathParam("deviceId") String deviceId,
                @HeaderParam("If-Match") String ifMatch,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/deviceGroups/{deviceGroupId}/deviceRecords/{deviceId}/deviceTransfer")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<GetDeviceTransferResponse> getDeviceTransfer(
                @HostParam("$host") String host,
                @PathParam("deviceGroupId") String deviceGroupId,
                @PathParam("deviceId") String deviceId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Put("/deviceGroups/{deviceGroupId}/deviceRecords/{deviceId}/deviceTransfer")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<Response<DeviceTransferInfo>> createOrReplaceDeviceTransfer(
                @HostParam("$host") String host,
                @PathParam("deviceGroupId") String deviceGroupId,
                @PathParam("deviceId") String deviceId,
                @HeaderParam("If-Match") String ifMatch,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") DeviceTransferInfo deviceTransferInfo,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/deviceGroups/{deviceGroupId}/deviceRecords/{deviceId}/deviceTransfer")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<Response<Void>> deleteDeviceTransfer(
                @HostParam("$host") String host,
                @PathParam("deviceGroupId") String deviceGroupId,
                @PathParam("deviceId") String deviceId,
                @HeaderParam("If-Match") String ifMatch,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/linkedHubs/{linkedHubId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<GetLinkedHubResponse> getLinkedHub(
                @HostParam("$host") String host,
                @PathParam("linkedHubId") String linkedHubId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Put("/linkedHubs/{linkedHubId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<Response<LinkedHub>> createOrReplaceLinkedHub(
                @HostParam("$host") String host,
                @PathParam("linkedHubId") String linkedHubId,
                @HeaderParam("If-Match") String ifMatch,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") LinkedHub linkedHub,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/linkedHubs/{linkedHubId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<Response<Void>> deleteLinkedHub(
                @HostParam("$host") String host,
                @PathParam("linkedHubId") String linkedHubId,
                @HeaderParam("If-Match") String ifMatch,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/provisioningSettings/{provisioningSettingsId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<GetProvisioningSettingsResponse> getProvisioningSettings(
                @HostParam("$host") String host,
                @PathParam("provisioningSettingsId") String provisioningSettingsId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Put("/provisioningSettings/{provisioningSettingsId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<Response<ProvisioningSettings>> createOrReplaceProvisioningSettings(
                @HostParam("$host") String host,
                @PathParam("provisioningSettingsId") String provisioningSettingsId,
                @HeaderParam("If-Match") String ifMatch,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") ProvisioningSettings provisioningSettings,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/provisioningSettings/{provisioningSettingsId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<Response<Void>> deleteProvisioningSettings(
                @HostParam("$host") String host,
                @PathParam("provisioningSettingsId") String provisioningSettingsId,
                @HeaderParam("If-Match") String ifMatch,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/deviceGroups/{deviceGroupId}/deviceRecords/{deviceId}/provisioningRecord")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<GetProvisioningRecordResponse> getProvisioningRecord(
                @HostParam("$host") String host,
                @PathParam("deviceGroupId") String deviceGroupId,
                @PathParam("deviceId") String deviceId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/operations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<GetOperationStatusResponse> getOperationStatus(
                @HostParam("$host") String host,
                @PathParam("operationId") String operationId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/deviceGroups/{deviceGroupId}/:acceptTransfer")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<AcceptDeviceRecordTransferResponse> acceptDeviceRecordTransfer(
                @HostParam("$host") String host,
                @PathParam("deviceGroupId") String deviceGroupId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") TransferToken transferToken,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/deviceGroups/:query")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<Response<DeviceGroupQueryResponse>> queryDeviceGroups(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-max-item-count") Integer xMsMaxItemCount,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") Query query,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/deviceGroups/{deviceGroupId}/deviceRecords/:query")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<Response<DeviceRecordQueryResponse>> queryDeviceRecords(
                @HostParam("$host") String host,
                @PathParam("deviceGroupId") String deviceGroupId,
                @HeaderParam("x-ms-max-item-count") Integer xMsMaxItemCount,
                @QueryParam("$expand") Enum6 expand,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") Query query,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/linkedHubs/:query")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<Response<LinkedHubQueryResponse>> queryLinkedHubs(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-max-item-count") Integer xMsMaxItemCount,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") Query query,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/provisioningSettings/:query")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ProvisioningServiceErrorDetailsException.class)
        Mono<Response<ProvisioningSettingsQueryResponse>> queryProvisioningSettings(
                @HostParam("$host") String host,
                @HeaderParam("x-ms-max-item-count") Integer xMsMaxItemCount,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") Query query,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Get a device group. This operation requires the deviceGroups/read permission.
     *
     * @param deviceGroupId The device group ID. A case-insensitive string (up to 128 characters long) of alphanumeric
     *     characters plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a device group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GetDeviceGroupResponse> getDeviceGroupWithResponseAsync(String deviceGroupId, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (deviceGroupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceGroupId is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getDeviceGroup(this.getHost(), deviceGroupId, this.getApiVersion(), accept, context);
    }

    /**
     * Create or replace the device group. This operation requires the deviceGroups/write permission.
     *
     * @param deviceGroupId The device group ID. A case-insensitive string (up to 128 characters long) of alphanumeric
     *     characters plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param deviceGroup The device group.
     * @param ifMatch The ETag of the device group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeviceGroup>> createOrReplaceDeviceGroupWithResponseAsync(
            String deviceGroupId, DeviceGroup deviceGroup, String ifMatch, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (deviceGroupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceGroupId is required and cannot be null."));
        }
        if (deviceGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceGroup is required and cannot be null."));
        } else {
            deviceGroup.validate();
        }
        final String accept = "application/json";
        return service.createOrReplaceDeviceGroup(
                this.getHost(), deviceGroupId, ifMatch, this.getApiVersion(), deviceGroup, accept, context);
    }

    /**
     * Delete the device group. This operation requires the deviceGroups/delete permission.
     *
     * @param deviceGroupId The device group ID. A case-insensitive string (up to 128 characters long) of alphanumeric
     *     characters plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param ifMatch The ETag of the device group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeleteDeviceGroupResponse> deleteDeviceGroupWithResponseAsync(
            String deviceGroupId, String ifMatch, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (deviceGroupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceGroupId is required and cannot be null."));
        }
        if (ifMatch == null) {
            return Mono.error(new IllegalArgumentException("Parameter ifMatch is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteDeviceGroup(this.getHost(), deviceGroupId, ifMatch, this.getApiVersion(), accept, context);
    }

    /**
     * Get a device authentication record. This operation requires the deviceRecords/read or deviceRecords/write
     * permission.
     *
     * @param deviceGroupId The device group ID. A case-insensitive string (up to 128 characters long) of alphanumeric
     *     characters plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param deviceId The device ID. A case-insensitive string (up to 128 characters long) of alphanumeric characters
     *     plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param expand Properties to optionally expand in response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a device authentication record.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GetDeviceRecordResponse> getDeviceRecordWithResponseAsync(
            String deviceGroupId, String deviceId, Enum1 expand, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (deviceGroupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceGroupId is required and cannot be null."));
        }
        if (deviceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceId is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getDeviceRecord(
                this.getHost(), deviceGroupId, deviceId, expand, this.getApiVersion(), accept, context);
    }

    /**
     * Create or replace the device authentication record. This operation requires the deviceRecords/write permission.
     *
     * @param deviceGroupId The device group ID. A case-insensitive string (up to 128 characters long) of alphanumeric
     *     characters plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param deviceId The device ID. A case-insensitive string (up to 128 characters long) of alphanumeric characters
     *     plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param deviceRecord The device Record.
     * @param ifMatch The ETag of the device Record.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeviceRecord>> createOrReplaceDeviceRecordWithResponseAsync(
            String deviceGroupId, String deviceId, DeviceRecord deviceRecord, String ifMatch, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (deviceGroupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceGroupId is required and cannot be null."));
        }
        if (deviceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceId is required and cannot be null."));
        }
        if (deviceRecord == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceRecord is required and cannot be null."));
        } else {
            deviceRecord.validate();
        }
        final String accept = "application/json";
        return service.createOrReplaceDeviceRecord(
                this.getHost(), deviceGroupId, deviceId, ifMatch, this.getApiVersion(), deviceRecord, accept, context);
    }

    /**
     * Delete the device record. This operation requires the deviceRecords/delete permission.
     *
     * @param deviceGroupId The device group ID. A case-insensitive string (up to 128 characters long) of alphanumeric
     *     characters plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param deviceId The device ID. A case-insensitive string (up to 128 characters long) of alphanumeric characters
     *     plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param ifMatch The ETag of the device record.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeleteDeviceRecordResponse> deleteDeviceRecordWithResponseAsync(
            String deviceGroupId, String deviceId, String ifMatch, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (deviceGroupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceGroupId is required and cannot be null."));
        }
        if (deviceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceId is required and cannot be null."));
        }
        if (ifMatch == null) {
            return Mono.error(new IllegalArgumentException("Parameter ifMatch is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteDeviceRecord(
                this.getHost(), deviceGroupId, deviceId, ifMatch, this.getApiVersion(), accept, context);
    }

    /**
     * Get a device transfer information. This operation requires the deviceTransfers/read permission.
     *
     * @param deviceGroupId The device group ID. A case-insensitive string (up to 128 characters long) of alphanumeric
     *     characters plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param deviceId The device ID. A case-insensitive string (up to 128 characters long) of alphanumeric characters
     *     plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a device transfer information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GetDeviceTransferResponse> getDeviceTransferWithResponseAsync(
            String deviceGroupId, String deviceId, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (deviceGroupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceGroupId is required and cannot be null."));
        }
        if (deviceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceId is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getDeviceTransfer(
                this.getHost(), deviceGroupId, deviceId, this.getApiVersion(), accept, context);
    }

    /**
     * Create or replace the device transfer record. This operation requires the deviceTransfers/write permission.
     *
     * @param deviceGroupId The device group ID. A case-insensitive string (up to 128 characters long) of alphanumeric
     *     characters plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param deviceId The device ID. A case-insensitive string (up to 128 characters long) of alphanumeric characters
     *     plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param deviceTransferInfo The device transfer info.
     * @param ifMatch The ETag of the device transfer info.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeviceTransferInfo>> createOrReplaceDeviceTransferWithResponseAsync(
            String deviceGroupId,
            String deviceId,
            DeviceTransferInfo deviceTransferInfo,
            String ifMatch,
            Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (deviceGroupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceGroupId is required and cannot be null."));
        }
        if (deviceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceId is required and cannot be null."));
        }
        if (deviceTransferInfo == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter deviceTransferInfo is required and cannot be null."));
        } else {
            deviceTransferInfo.validate();
        }
        final String accept = "application/json";
        return service.createOrReplaceDeviceTransfer(
                this.getHost(),
                deviceGroupId,
                deviceId,
                ifMatch,
                this.getApiVersion(),
                deviceTransferInfo,
                accept,
                context);
    }

    /**
     * Delete the device record. This operation requires the deviceTransfers/delete permission.
     *
     * @param deviceGroupId The device group ID. A case-insensitive string (up to 128 characters long) of alphanumeric
     *     characters plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param deviceId The device ID. A case-insensitive string (up to 128 characters long) of alphanumeric characters
     *     plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param ifMatch The ETag of the device record.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeviceTransferWithResponseAsync(
            String deviceGroupId, String deviceId, String ifMatch, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (deviceGroupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceGroupId is required and cannot be null."));
        }
        if (deviceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceId is required and cannot be null."));
        }
        if (ifMatch == null) {
            return Mono.error(new IllegalArgumentException("Parameter ifMatch is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteDeviceTransfer(
                this.getHost(), deviceGroupId, deviceId, ifMatch, this.getApiVersion(), accept, context);
    }

    /**
     * Get a linked hub. This operation requires the linkedHubs/read permission.
     *
     * @param linkedHubId The linked hub ID. A case-insensitive string (up to 128 characters long) of alphanumeric
     *     characters plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a linked hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GetLinkedHubResponse> getLinkedHubWithResponseAsync(String linkedHubId, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (linkedHubId == null) {
            return Mono.error(new IllegalArgumentException("Parameter linkedHubId is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getLinkedHub(this.getHost(), linkedHubId, this.getApiVersion(), accept, context);
    }

    /**
     * Create or replace the linked hub. This operation requires the linkedHubs/write permission.
     *
     * @param linkedHubId The linked hub ID. A case-insensitive string (up to 128 characters long) of alphanumeric
     *     characters plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param linkedHub The linked hub.
     * @param ifMatch The ETag of the linked hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IoT hub(s) linked to this device provisioning service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<LinkedHub>> createOrReplaceLinkedHubWithResponseAsync(
            String linkedHubId, LinkedHub linkedHub, String ifMatch, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (linkedHubId == null) {
            return Mono.error(new IllegalArgumentException("Parameter linkedHubId is required and cannot be null."));
        }
        if (linkedHub == null) {
            return Mono.error(new IllegalArgumentException("Parameter linkedHub is required and cannot be null."));
        } else {
            linkedHub.validate();
        }
        final String accept = "application/json";
        return service.createOrReplaceLinkedHub(
                this.getHost(), linkedHubId, ifMatch, this.getApiVersion(), linkedHub, accept, context);
    }

    /**
     * Delete the linked hub record. This operation requires the linkedHubs/delete permission.
     *
     * @param linkedHubId The linked hub ID. A case-insensitive string (up to 128 characters long) of alphanumeric
     *     characters plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param ifMatch The ETag of the linked hub record.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteLinkedHubWithResponseAsync(String linkedHubId, String ifMatch, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (linkedHubId == null) {
            return Mono.error(new IllegalArgumentException("Parameter linkedHubId is required and cannot be null."));
        }
        if (ifMatch == null) {
            return Mono.error(new IllegalArgumentException("Parameter ifMatch is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteLinkedHub(this.getHost(), linkedHubId, ifMatch, this.getApiVersion(), accept, context);
    }

    /**
     * Get a provisioning settings. This operation requires the provisioningSettings/read permissions.
     *
     * @param provisioningSettingsId The provisioning settings ID. A case-insensitive string (up to 128 characters long)
     *     of alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or
     *     end.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provisioning settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GetProvisioningSettingsResponse> getProvisioningSettingsWithResponseAsync(
            String provisioningSettingsId, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (provisioningSettingsId == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter provisioningSettingsId is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getProvisioningSettings(
                this.getHost(), provisioningSettingsId, this.getApiVersion(), accept, context);
    }

    /**
     * Create or replace the provisioning settings. This operation requires the provisioningSettings/write permission.
     *
     * @param provisioningSettingsId The provisioning settings ID. A case-insensitive string (up to 128 characters long)
     *     of alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or
     *     end..
     * @param provisioningSettings The provisioning settings.
     * @param ifMatch The ETag of the provisioning settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the provisioning settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ProvisioningSettings>> createOrReplaceProvisioningSettingsWithResponseAsync(
            String provisioningSettingsId, ProvisioningSettings provisioningSettings, String ifMatch, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (provisioningSettingsId == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter provisioningSettingsId is required and cannot be null."));
        }
        if (provisioningSettings == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter provisioningSettings is required and cannot be null."));
        } else {
            provisioningSettings.validate();
        }
        final String accept = "application/json";
        return service.createOrReplaceProvisioningSettings(
                this.getHost(),
                provisioningSettingsId,
                ifMatch,
                this.getApiVersion(),
                provisioningSettings,
                accept,
                context);
    }

    /**
     * Delete the provisioning settings. This operation requires the provisioningSettings/delete permission.
     *
     * @param provisioningSettingsId The provisioning settings ID. A case-insensitive string (up to 128 characters long)
     *     of alphanumeric characters plus certain special characters : . _ -. No special characters allowed at start or
     *     end.
     * @param ifMatch The ETag of the provisioning settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteProvisioningSettingsWithResponseAsync(
            String provisioningSettingsId, String ifMatch, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (provisioningSettingsId == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter provisioningSettingsId is required and cannot be null."));
        }
        if (ifMatch == null) {
            return Mono.error(new IllegalArgumentException("Parameter ifMatch is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteProvisioningSettings(
                this.getHost(), provisioningSettingsId, ifMatch, this.getApiVersion(), accept, context);
    }

    /**
     * Get a device provisioning record. This operation requires the provisioningRecords/read permission.
     *
     * @param deviceGroupId The device group ID. A case-insensitive string (up to 128 characters long) of alphanumeric
     *     characters plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param deviceId The device ID. A case-insensitive string (up to 128 characters long) of alphanumeric characters
     *     plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a device provisioning record.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GetProvisioningRecordResponse> getProvisioningRecordWithResponseAsync(
            String deviceGroupId, String deviceId, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (deviceGroupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceGroupId is required and cannot be null."));
        }
        if (deviceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceId is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getProvisioningRecord(
                this.getHost(), deviceGroupId, deviceId, this.getApiVersion(), accept, context);
    }

    /**
     * @param operationId The operationId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GetOperationStatusResponse> getOperationStatusWithResponseAsync(String operationId, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getOperationStatus(this.getHost(), operationId, this.getApiVersion(), accept, context);
    }

    /**
     * Redeem the device record transfer token at the target DPS. This operation requires the deviceRecords/write
     * permission.
     *
     * @param deviceGroupId The device group ID. A case-insensitive string (up to 128 characters long) of alphanumeric
     *     characters plus certain special characters : . _ -. No special characters allowed at start or end.
     * @param transferToken Device record transfer token to redeem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcceptDeviceRecordTransferResponse> acceptDeviceRecordTransferWithResponseAsync(
            String deviceGroupId, TransferToken transferToken, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (deviceGroupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceGroupId is required and cannot be null."));
        }
        if (transferToken == null) {
            return Mono.error(new IllegalArgumentException("Parameter transferToken is required and cannot be null."));
        } else {
            transferToken.validate();
        }
        final String accept = "application/json";
        return service.acceptDeviceRecordTransfer(
                this.getHost(), deviceGroupId, this.getApiVersion(), transferToken, accept, context);
    }

    /**
     * Retrieves a list of the device groups and a continuation token to retrieve the next page. This operation requires
     * the deviceGroup/read permission.
     *
     * @param query The {Query} to match the device groups.
     * @param xMsMaxItemCount Maximum number of results to return in a page. If not specified with {Query} the service
     *     will return up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeviceGroupQueryResponse>> queryDeviceGroupsWithResponseAsync(
            Query query, Integer xMsMaxItemCount, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (query == null) {
            return Mono.error(new IllegalArgumentException("Parameter query is required and cannot be null."));
        } else {
            query.validate();
        }
        final String accept = "application/json";
        return service.queryDeviceGroups(this.getHost(), xMsMaxItemCount, this.getApiVersion(), query, accept, context);
    }

    /**
     * Retrieves a list of the device record in the specified device group and a continuation token to retrieve the next
     * page. This operation requires the deviceRecords/read or deviceRecords/write permission.
     *
     * @param deviceGroupId The device group in which the query operation is performed.
     * @param query The {Query} to match the device records.
     * @param xMsMaxItemCount Maximum number of results to return in a page. If not specified with {Query} the service
     *     will return up to 100 results.
     * @param expand Properties to optionally expand in the response. If not specified the service will not expand the
     *     optional properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeviceRecordQueryResponse>> queryDeviceRecordsWithResponseAsync(
            String deviceGroupId, Query query, Integer xMsMaxItemCount, Enum6 expand, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (deviceGroupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceGroupId is required and cannot be null."));
        }
        if (query == null) {
            return Mono.error(new IllegalArgumentException("Parameter query is required and cannot be null."));
        } else {
            query.validate();
        }
        final String accept = "application/json";
        return service.queryDeviceRecords(
                this.getHost(), deviceGroupId, xMsMaxItemCount, expand, this.getApiVersion(), query, accept, context);
    }

    /**
     * Retrieves a list of the linked IoTHubs and a continuation token to retrieve the next page. This operation
     * requires the linkedHubs/read permission.
     *
     * @param query The {Query} to match the linked IoTHubs.
     * @param xMsMaxItemCount Maximum number of results to return in a page. If not specified with {Query} the service
     *     will return up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<LinkedHubQueryResponse>> queryLinkedHubsWithResponseAsync(
            Query query, Integer xMsMaxItemCount, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (query == null) {
            return Mono.error(new IllegalArgumentException("Parameter query is required and cannot be null."));
        } else {
            query.validate();
        }
        final String accept = "application/json";
        return service.queryLinkedHubs(this.getHost(), xMsMaxItemCount, this.getApiVersion(), query, accept, context);
    }

    /**
     * Retrieves a list of the provisioning settings and a continuation token to retrieve the next page. This operation
     * requires the provisioningSettings/read permission.
     *
     * @param query The {Query} to match the provisioning settings.
     * @param xMsMaxItemCount Maximum number of results to return in a page. If not specified with {Query} the service
     *     will return up to 100 results.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ProvisioningSettingsQueryResponse>> queryProvisioningSettingsWithResponseAsync(
            Query query, Integer xMsMaxItemCount, Context context) {
        if (this.getHost() == null) {
            return Mono.error(new IllegalArgumentException("Parameter this.getHost() is required and cannot be null."));
        }
        if (query == null) {
            return Mono.error(new IllegalArgumentException("Parameter query is required and cannot be null."));
        } else {
            query.validate();
        }
        final String accept = "application/json";
        return service.queryProvisioningSettings(
                this.getHost(), xMsMaxItemCount, this.getApiVersion(), query, accept, context);
    }
}
