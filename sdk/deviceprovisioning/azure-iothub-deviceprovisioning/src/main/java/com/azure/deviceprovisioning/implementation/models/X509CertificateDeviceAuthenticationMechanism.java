// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.deviceprovisioning.implementation.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** Device identity is matched with X509 certificate presented to the service. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "deviceAuthenticationKind")
@JsonTypeName("X509CertificateDeviceAuthenticationMechanism")
@Fluent
public final class X509CertificateDeviceAuthenticationMechanism extends DeviceAuthenticationMechanism {
    /*
     * Device identity is matched with X509 certificate presented to the
     * service.
     */
    @JsonProperty(value = "certificate", required = true)
    private String certificate;

    /*
     * The certificate metadata.
     */
    @JsonProperty(value = "certificateMetadata", access = JsonProperty.Access.WRITE_ONLY)
    private CertificateMetadata certificateMetadata;

    /**
     * Creates an instance of X509CertificateDeviceAuthenticationMechanism class.
     *
     * @param id the id value to set.
     * @param certificate the certificate value to set.
     */
    @JsonCreator
    public X509CertificateDeviceAuthenticationMechanism(
            @JsonProperty(value = "id", required = true) String id,
            @JsonProperty(value = "certificate", required = true) String certificate) {
        super(id);
        this.certificate = certificate;
    }

    /**
     * Get the certificate property: Device identity is matched with X509 certificate presented to the service.
     *
     * @return the certificate value.
     */
    public String getCertificate() {
        return this.certificate;
    }

    /**
     * Get the certificateMetadata property: The certificate metadata.
     *
     * @return the certificateMetadata value.
     */
    public CertificateMetadata getCertificateMetadata() {
        return this.certificateMetadata;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (getCertificate() == null) {
            throw new IllegalArgumentException(
                    "Missing required property certificate in model X509CertificateDeviceAuthenticationMechanism");
        }
        if (getCertificateMetadata() != null) {
            getCertificateMetadata().validate();
        }
    }
}
