// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcloud.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridcloud.fluent.models.CloudConnectionInner;
import com.azure.resourcemanager.hybridcloud.models.CloudConnection;
import com.azure.resourcemanager.hybridcloud.models.ProvisioningState;
import com.azure.resourcemanager.hybridcloud.models.ResourceReference;
import com.azure.resourcemanager.hybridcloud.models.TagsObject;
import java.util.Collections;
import java.util.Map;

public final class CloudConnectionImpl implements CloudConnection, CloudConnection.Definition, CloudConnection.Update {
    private CloudConnectionInner innerObject;

    private final com.azure.resourcemanager.hybridcloud.HybridCloudManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ResourceReference cloudConnector() {
        return this.innerModel().cloudConnector();
    }

    public String remoteResourceId() {
        return this.innerModel().remoteResourceId();
    }

    public ResourceReference virtualHub() {
        return this.innerModel().virtualHub();
    }

    public String sharedKey() {
        return this.innerModel().sharedKey();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public CloudConnectionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybridcloud.HybridCloudManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String cloudConnectionName;

    private TagsObject updateParameters;

    public CloudConnectionImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public CloudConnection create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCloudConnections()
                .createOrUpdate(resourceGroupName, cloudConnectionName, this.innerModel(), Context.NONE);
        return this;
    }

    public CloudConnection create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCloudConnections()
                .createOrUpdate(resourceGroupName, cloudConnectionName, this.innerModel(), context);
        return this;
    }

    CloudConnectionImpl(String name, com.azure.resourcemanager.hybridcloud.HybridCloudManager serviceManager) {
        this.innerObject = new CloudConnectionInner();
        this.serviceManager = serviceManager;
        this.cloudConnectionName = name;
    }

    public CloudConnectionImpl update() {
        this.updateParameters = new TagsObject();
        return this;
    }

    public CloudConnection apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCloudConnections()
                .updateTagsWithResponse(resourceGroupName, cloudConnectionName, updateParameters, Context.NONE)
                .getValue();
        return this;
    }

    public CloudConnection apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCloudConnections()
                .updateTagsWithResponse(resourceGroupName, cloudConnectionName, updateParameters, context)
                .getValue();
        return this;
    }

    CloudConnectionImpl(
        CloudConnectionInner innerObject, com.azure.resourcemanager.hybridcloud.HybridCloudManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.cloudConnectionName = Utils.getValueFromIdByName(innerObject.id(), "cloudConnections");
    }

    public CloudConnection refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCloudConnections()
                .getByResourceGroupWithResponse(resourceGroupName, cloudConnectionName, Context.NONE)
                .getValue();
        return this;
    }

    public CloudConnection refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCloudConnections()
                .getByResourceGroupWithResponse(resourceGroupName, cloudConnectionName, context)
                .getValue();
        return this;
    }

    public CloudConnectionImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public CloudConnectionImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public CloudConnectionImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public CloudConnectionImpl withCloudConnector(ResourceReference cloudConnector) {
        this.innerModel().withCloudConnector(cloudConnector);
        return this;
    }

    public CloudConnectionImpl withRemoteResourceId(String remoteResourceId) {
        this.innerModel().withRemoteResourceId(remoteResourceId);
        return this;
    }

    public CloudConnectionImpl withVirtualHub(ResourceReference virtualHub) {
        this.innerModel().withVirtualHub(virtualHub);
        return this;
    }

    public CloudConnectionImpl withSharedKey(String sharedKey) {
        this.innerModel().withSharedKey(sharedKey);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
