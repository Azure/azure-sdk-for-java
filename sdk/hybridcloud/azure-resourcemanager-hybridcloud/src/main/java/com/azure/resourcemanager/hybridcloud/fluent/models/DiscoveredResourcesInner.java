// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.hybridcloud.models.DiscoveredResource;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** API to discover resources in remote cloud referred by the connector. */
@Fluent
public final class DiscoveredResourcesInner {
    /*
     * Remote cloud resource filter.
     */
    @JsonProperty(value = "resourceFilter")
    private ResourceFilter innerResourceFilter;

    /*
     * List of discovered remote cloud resources.
     */
    @JsonProperty(value = "discoveredResources")
    private List<DiscoveredResource> discoveredResources;

    /** Creates an instance of DiscoveredResourcesInner class. */
    public DiscoveredResourcesInner() {
    }

    /**
     * Get the innerResourceFilter property: Remote cloud resource filter.
     *
     * @return the innerResourceFilter value.
     */
    private ResourceFilter innerResourceFilter() {
        return this.innerResourceFilter;
    }

    /**
     * Get the discoveredResources property: List of discovered remote cloud resources.
     *
     * @return the discoveredResources value.
     */
    public List<DiscoveredResource> discoveredResources() {
        return this.discoveredResources;
    }

    /**
     * Set the discoveredResources property: List of discovered remote cloud resources.
     *
     * @param discoveredResources the discoveredResources value to set.
     * @return the DiscoveredResourcesInner object itself.
     */
    public DiscoveredResourcesInner withDiscoveredResources(List<DiscoveredResource> discoveredResources) {
        this.discoveredResources = discoveredResources;
        return this;
    }

    /**
     * Get the name property: Remote Resource name to filter on.
     *
     * @return the name value.
     */
    public String name() {
        return this.innerResourceFilter() == null ? null : this.innerResourceFilter().name();
    }

    /**
     * Set the name property: Remote Resource name to filter on.
     *
     * @param name the name value to set.
     * @return the DiscoveredResourcesInner object itself.
     */
    public DiscoveredResourcesInner withName(String name) {
        if (this.innerResourceFilter() == null) {
            this.innerResourceFilter = new ResourceFilter();
        }
        this.innerResourceFilter().withName(name);
        return this;
    }

    /**
     * Get the type property: Remote Resource type to filter on.
     *
     * @return the type value.
     */
    public String type() {
        return this.innerResourceFilter() == null ? null : this.innerResourceFilter().type();
    }

    /**
     * Set the type property: Remote Resource type to filter on.
     *
     * @param type the type value to set.
     * @return the DiscoveredResourcesInner object itself.
     */
    public DiscoveredResourcesInner withType(String type) {
        if (this.innerResourceFilter() == null) {
            this.innerResourceFilter = new ResourceFilter();
        }
        this.innerResourceFilter().withType(type);
        return this;
    }

    /**
     * Get the region property: Remote Resource location/region to filter on.
     *
     * @return the region value.
     */
    public String region() {
        return this.innerResourceFilter() == null ? null : this.innerResourceFilter().region();
    }

    /**
     * Set the region property: Remote Resource location/region to filter on.
     *
     * @param region the region value to set.
     * @return the DiscoveredResourcesInner object itself.
     */
    public DiscoveredResourcesInner withRegion(String region) {
        if (this.innerResourceFilter() == null) {
            this.innerResourceFilter = new ResourceFilter();
        }
        this.innerResourceFilter().withRegion(region);
        return this;
    }

    /**
     * Get the tag property: Remote Resource tags to filter on in key:value format.
     *
     * @return the tag value.
     */
    public String tag() {
        return this.innerResourceFilter() == null ? null : this.innerResourceFilter().tag();
    }

    /**
     * Set the tag property: Remote Resource tags to filter on in key:value format.
     *
     * @param tag the tag value to set.
     * @return the DiscoveredResourcesInner object itself.
     */
    public DiscoveredResourcesInner withTag(String tag) {
        if (this.innerResourceFilter() == null) {
            this.innerResourceFilter = new ResourceFilter();
        }
        this.innerResourceFilter().withTag(tag);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerResourceFilter() != null) {
            innerResourceFilter().validate();
        }
        if (discoveredResources() != null) {
            discoveredResources().forEach(e -> e.validate());
        }
    }
}
