// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.hybridcloud.models.ProvisioningState;
import com.azure.resourcemanager.hybridcloud.models.ResourceReference;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Cloud connection resource properties. */
@Fluent
public final class CloudConnectionProperties {
    /*
     * The cloud connector which discovered the remote resource.
     */
    @JsonProperty(value = "cloudConnector")
    private ResourceReference cloudConnector;

    /*
     * Identifier for the remote cloud resource
     */
    @JsonProperty(value = "remoteResourceId")
    private String remoteResourceId;

    /*
     * The virtualHub to which the cloud connection belongs.
     */
    @JsonProperty(value = "virtualHub")
    private ResourceReference virtualHub;

    /*
     * Shared key of the cloud connection.
     */
    @JsonProperty(value = "sharedKey")
    private String sharedKey;

    /*
     * The provisioning state of the cloud collection resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of CloudConnectionProperties class. */
    public CloudConnectionProperties() {
    }

    /**
     * Get the cloudConnector property: The cloud connector which discovered the remote resource.
     *
     * @return the cloudConnector value.
     */
    public ResourceReference cloudConnector() {
        return this.cloudConnector;
    }

    /**
     * Set the cloudConnector property: The cloud connector which discovered the remote resource.
     *
     * @param cloudConnector the cloudConnector value to set.
     * @return the CloudConnectionProperties object itself.
     */
    public CloudConnectionProperties withCloudConnector(ResourceReference cloudConnector) {
        this.cloudConnector = cloudConnector;
        return this;
    }

    /**
     * Get the remoteResourceId property: Identifier for the remote cloud resource.
     *
     * @return the remoteResourceId value.
     */
    public String remoteResourceId() {
        return this.remoteResourceId;
    }

    /**
     * Set the remoteResourceId property: Identifier for the remote cloud resource.
     *
     * @param remoteResourceId the remoteResourceId value to set.
     * @return the CloudConnectionProperties object itself.
     */
    public CloudConnectionProperties withRemoteResourceId(String remoteResourceId) {
        this.remoteResourceId = remoteResourceId;
        return this;
    }

    /**
     * Get the virtualHub property: The virtualHub to which the cloud connection belongs.
     *
     * @return the virtualHub value.
     */
    public ResourceReference virtualHub() {
        return this.virtualHub;
    }

    /**
     * Set the virtualHub property: The virtualHub to which the cloud connection belongs.
     *
     * @param virtualHub the virtualHub value to set.
     * @return the CloudConnectionProperties object itself.
     */
    public CloudConnectionProperties withVirtualHub(ResourceReference virtualHub) {
        this.virtualHub = virtualHub;
        return this;
    }

    /**
     * Get the sharedKey property: Shared key of the cloud connection.
     *
     * @return the sharedKey value.
     */
    public String sharedKey() {
        return this.sharedKey;
    }

    /**
     * Set the sharedKey property: Shared key of the cloud connection.
     *
     * @param sharedKey the sharedKey value to set.
     * @return the CloudConnectionProperties object itself.
     */
    public CloudConnectionProperties withSharedKey(String sharedKey) {
        this.sharedKey = sharedKey;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the cloud collection resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (cloudConnector() != null) {
            cloudConnector().validate();
        }
        if (virtualHub() != null) {
            virtualHub().validate();
        }
    }
}
