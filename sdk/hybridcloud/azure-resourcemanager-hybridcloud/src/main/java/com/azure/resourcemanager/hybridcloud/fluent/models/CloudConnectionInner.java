// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.hybridcloud.models.ProvisioningState;
import com.azure.resourcemanager.hybridcloud.models.ResourceReference;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Resource which represents the managed network connection between Azure Gateways and remote cloud gateways. */
@Fluent
public final class CloudConnectionInner extends Resource {
    /*
     * Properties of the cloud connection.
     */
    @JsonProperty(value = "properties")
    private CloudConnectionProperties innerProperties;

    /*
     * A unique read-only string that changes whenever the resource is updated.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of CloudConnectionInner class. */
    public CloudConnectionInner() {
    }

    /**
     * Get the innerProperties property: Properties of the cloud connection.
     *
     * @return the innerProperties value.
     */
    private CloudConnectionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public CloudConnectionInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CloudConnectionInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the cloudConnector property: The cloud connector which discovered the remote resource.
     *
     * @return the cloudConnector value.
     */
    public ResourceReference cloudConnector() {
        return this.innerProperties() == null ? null : this.innerProperties().cloudConnector();
    }

    /**
     * Set the cloudConnector property: The cloud connector which discovered the remote resource.
     *
     * @param cloudConnector the cloudConnector value to set.
     * @return the CloudConnectionInner object itself.
     */
    public CloudConnectionInner withCloudConnector(ResourceReference cloudConnector) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudConnectionProperties();
        }
        this.innerProperties().withCloudConnector(cloudConnector);
        return this;
    }

    /**
     * Get the remoteResourceId property: Identifier for the remote cloud resource.
     *
     * @return the remoteResourceId value.
     */
    public String remoteResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().remoteResourceId();
    }

    /**
     * Set the remoteResourceId property: Identifier for the remote cloud resource.
     *
     * @param remoteResourceId the remoteResourceId value to set.
     * @return the CloudConnectionInner object itself.
     */
    public CloudConnectionInner withRemoteResourceId(String remoteResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudConnectionProperties();
        }
        this.innerProperties().withRemoteResourceId(remoteResourceId);
        return this;
    }

    /**
     * Get the virtualHub property: The virtualHub to which the cloud connection belongs.
     *
     * @return the virtualHub value.
     */
    public ResourceReference virtualHub() {
        return this.innerProperties() == null ? null : this.innerProperties().virtualHub();
    }

    /**
     * Set the virtualHub property: The virtualHub to which the cloud connection belongs.
     *
     * @param virtualHub the virtualHub value to set.
     * @return the CloudConnectionInner object itself.
     */
    public CloudConnectionInner withVirtualHub(ResourceReference virtualHub) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudConnectionProperties();
        }
        this.innerProperties().withVirtualHub(virtualHub);
        return this;
    }

    /**
     * Get the sharedKey property: Shared key of the cloud connection.
     *
     * @return the sharedKey value.
     */
    public String sharedKey() {
        return this.innerProperties() == null ? null : this.innerProperties().sharedKey();
    }

    /**
     * Set the sharedKey property: Shared key of the cloud connection.
     *
     * @param sharedKey the sharedKey value to set.
     * @return the CloudConnectionInner object itself.
     */
    public CloudConnectionInner withSharedKey(String sharedKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CloudConnectionProperties();
        }
        this.innerProperties().withSharedKey(sharedKey);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the cloud collection resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
