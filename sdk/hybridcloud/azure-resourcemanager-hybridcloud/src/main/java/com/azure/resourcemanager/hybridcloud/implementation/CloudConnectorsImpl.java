// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcloud.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridcloud.fluent.CloudConnectorsClient;
import com.azure.resourcemanager.hybridcloud.fluent.models.CloudConnectorInner;
import com.azure.resourcemanager.hybridcloud.fluent.models.DiscoveredResourcesInner;
import com.azure.resourcemanager.hybridcloud.models.CloudConnector;
import com.azure.resourcemanager.hybridcloud.models.CloudConnectors;
import com.azure.resourcemanager.hybridcloud.models.DiscoveredResources;

public final class CloudConnectorsImpl implements CloudConnectors {
    private static final ClientLogger LOGGER = new ClientLogger(CloudConnectorsImpl.class);

    private final CloudConnectorsClient innerClient;

    private final com.azure.resourcemanager.hybridcloud.HybridCloudManager serviceManager;

    public CloudConnectorsImpl(
        CloudConnectorsClient innerClient, com.azure.resourcemanager.hybridcloud.HybridCloudManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<CloudConnector> list() {
        PagedIterable<CloudConnectorInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new CloudConnectorImpl(inner1, this.manager()));
    }

    public PagedIterable<CloudConnector> list(Context context) {
        PagedIterable<CloudConnectorInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new CloudConnectorImpl(inner1, this.manager()));
    }

    public PagedIterable<CloudConnector> listByResourceGroup(String resourceGroupName) {
        PagedIterable<CloudConnectorInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new CloudConnectorImpl(inner1, this.manager()));
    }

    public PagedIterable<CloudConnector> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<CloudConnectorInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new CloudConnectorImpl(inner1, this.manager()));
    }

    public Response<CloudConnector> getByResourceGroupWithResponse(
        String resourceGroupName, String cloudConnectorName, Context context) {
        Response<CloudConnectorInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, cloudConnectorName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CloudConnectorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CloudConnector getByResourceGroup(String resourceGroupName, String cloudConnectorName) {
        CloudConnectorInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, cloudConnectorName);
        if (inner != null) {
            return new CloudConnectorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String cloudConnectorName) {
        this.serviceClient().delete(resourceGroupName, cloudConnectorName);
    }

    public void delete(String resourceGroupName, String cloudConnectorName, Context context) {
        this.serviceClient().delete(resourceGroupName, cloudConnectorName, context);
    }

    public DiscoveredResources discoverResources(String resourceGroupName, String cloudConnectorName) {
        DiscoveredResourcesInner inner = this.serviceClient().discoverResources(resourceGroupName, cloudConnectorName);
        if (inner != null) {
            return new DiscoveredResourcesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DiscoveredResources discoverResources(String resourceGroupName, String cloudConnectorName, Context context) {
        DiscoveredResourcesInner inner =
            this.serviceClient().discoverResources(resourceGroupName, cloudConnectorName, context);
        if (inner != null) {
            return new DiscoveredResourcesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CloudConnector getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cloudConnectorName = Utils.getValueFromIdByName(id, "cloudConnectors");
        if (cloudConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'cloudConnectors'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, cloudConnectorName, Context.NONE).getValue();
    }

    public Response<CloudConnector> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cloudConnectorName = Utils.getValueFromIdByName(id, "cloudConnectors");
        if (cloudConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'cloudConnectors'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, cloudConnectorName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cloudConnectorName = Utils.getValueFromIdByName(id, "cloudConnectors");
        if (cloudConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'cloudConnectors'.", id)));
        }
        this.delete(resourceGroupName, cloudConnectorName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cloudConnectorName = Utils.getValueFromIdByName(id, "cloudConnectors");
        if (cloudConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'cloudConnectors'.", id)));
        }
        this.delete(resourceGroupName, cloudConnectorName, context);
    }

    private CloudConnectorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridcloud.HybridCloudManager manager() {
        return this.serviceManager;
    }

    public CloudConnectorImpl define(String name) {
        return new CloudConnectorImpl(name, this.manager());
    }
}
