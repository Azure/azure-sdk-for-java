// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The AzureAsyncOperationResult model. */
@Fluent
public final class AzureAsyncOperationResult {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AzureAsyncOperationResult.class);

    /*
     * Status of the Azure async operation.
     */
    @JsonProperty(value = "status")
    private NetworkOperationStatus status;

    /*
     * Details of the error occurred during specified asynchronous operation.
     */
    @JsonProperty(value = "error")
    private Error error;

    /**
     * Get the status property: Status of the Azure async operation.
     *
     * @return the status value.
     */
    public NetworkOperationStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the Azure async operation.
     *
     * @param status the status value to set.
     * @return the AzureAsyncOperationResult object itself.
     */
    public AzureAsyncOperationResult withStatus(NetworkOperationStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the error property: Details of the error occurred during specified asynchronous operation.
     *
     * @return the error value.
     */
    public Error error() {
        return this.error;
    }

    /**
     * Set the error property: Details of the error occurred during specified asynchronous operation.
     *
     * @param error the error value to set.
     * @return the AzureAsyncOperationResult object itself.
     */
    public AzureAsyncOperationResult withError(Error error) {
        this.error = error;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (error() != null) {
            error().validate();
        }
    }
}
