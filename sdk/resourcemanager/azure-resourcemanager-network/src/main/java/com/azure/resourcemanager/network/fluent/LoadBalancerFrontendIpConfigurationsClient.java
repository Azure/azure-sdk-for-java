// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.fluent.models.FrontendIpConfigurationInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * LoadBalancerFrontendIpConfigurationsClient.
 */
public interface LoadBalancerFrontendIpConfigurationsClient {
    /**
     * Gets all the load balancer frontend IP configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the load balancer frontend IP configurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<FrontendIpConfigurationInner> listAsync(String resourceGroupName, String loadBalancerName);

    /**
     * Gets all the load balancer frontend IP configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the load balancer frontend IP configurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FrontendIpConfigurationInner> list(String resourceGroupName, String loadBalancerName);

    /**
     * Gets all the load balancer frontend IP configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the load balancer frontend IP configurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FrontendIpConfigurationInner> list(
        String resourceGroupName, String loadBalancerName, Context context);

    /**
     * Gets load balancer frontend IP configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param frontendIpConfigurationName The name of the frontend IP configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load balancer frontend IP configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<FrontendIpConfigurationInner>> getWithResponseAsync(
        String resourceGroupName, String loadBalancerName, String frontendIpConfigurationName);

    /**
     * Gets load balancer frontend IP configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param frontendIpConfigurationName The name of the frontend IP configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load balancer frontend IP configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<FrontendIpConfigurationInner> getAsync(
        String resourceGroupName, String loadBalancerName, String frontendIpConfigurationName);

    /**
     * Gets load balancer frontend IP configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param frontendIpConfigurationName The name of the frontend IP configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load balancer frontend IP configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FrontendIpConfigurationInner get(
        String resourceGroupName, String loadBalancerName, String frontendIpConfigurationName);

    /**
     * Gets load balancer frontend IP configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param loadBalancerName The name of the load balancer.
     * @param frontendIpConfigurationName The name of the frontend IP configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load balancer frontend IP configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FrontendIpConfigurationInner> getWithResponse(
        String resourceGroupName, String loadBalancerName, String frontendIpConfigurationName, Context context);
}
