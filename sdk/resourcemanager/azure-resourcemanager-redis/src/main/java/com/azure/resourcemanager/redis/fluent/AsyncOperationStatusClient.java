// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redis.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.redis.fluent.models.OperationStatusInner;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in AsyncOperationStatusClient. */
public interface AsyncOperationStatusClient {
    /**
     * For checking the ongoing status of an operation.
     *
     * @param location The location at which operation was triggered.
     * @param operationId The ID of asynchronous operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return asynchronous operation status along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<OperationStatusInner>> getWithResponseAsync(String location, String operationId);

    /**
     * For checking the ongoing status of an operation.
     *
     * @param location The location at which operation was triggered.
     * @param operationId The ID of asynchronous operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return asynchronous operation status on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<OperationStatusInner> getAsync(String location, String operationId);

    /**
     * For checking the ongoing status of an operation.
     *
     * @param location The location at which operation was triggered.
     * @param operationId The ID of asynchronous operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return asynchronous operation status along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<OperationStatusInner> getWithResponse(String location, String operationId, Context context);

    /**
     * For checking the ongoing status of an operation.
     *
     * @param location The location at which operation was triggered.
     * @param operationId The ID of asynchronous operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return asynchronous operation status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusInner get(String location, String operationId);
}
