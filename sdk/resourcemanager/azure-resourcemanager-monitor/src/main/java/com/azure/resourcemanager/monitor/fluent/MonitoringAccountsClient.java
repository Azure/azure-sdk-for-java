// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.monitor.fluent.models.MonitoringAccountResourceInner;
import com.azure.resourcemanager.monitor.models.MonitoringAccountResourceForUpdate;
import com.azure.resourcemanager.resources.fluentcore.collection.InnerSupportsDelete;
import com.azure.resourcemanager.resources.fluentcore.collection.InnerSupportsGet;
import com.azure.resourcemanager.resources.fluentcore.collection.InnerSupportsListing;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in MonitoringAccountsClient. */
public interface MonitoringAccountsClient
    extends InnerSupportsGet<MonitoringAccountResourceInner>,
        InnerSupportsListing<MonitoringAccountResourceInner>,
        InnerSupportsDelete<Void> {
    /**
     * Lists all monitoring accounts in the specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pageable list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<MonitoringAccountResourceInner> listByResourceGroupAsync(String resourceGroupName);

    /**
     * Lists all monitoring accounts in the specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pageable list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MonitoringAccountResourceInner> listByResourceGroup(String resourceGroupName);

    /**
     * Lists all monitoring accounts in the specified resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pageable list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MonitoringAccountResourceInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Lists all monitoring accounts in the specified subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pageable list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<MonitoringAccountResourceInner> listAsync();

    /**
     * Lists all monitoring accounts in the specified subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pageable list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MonitoringAccountResourceInner> list();

    /**
     * Lists all monitoring accounts in the specified subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pageable list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MonitoringAccountResourceInner> list(Context context);

    /**
     * Returns the specific monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Monitoring Account definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MonitoringAccountResourceInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String monitoringAccountName);

    /**
     * Returns the specific monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Monitoring Account definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MonitoringAccountResourceInner> getByResourceGroupAsync(
        String resourceGroupName, String monitoringAccountName);

    /**
     * Returns the specific monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Monitoring Account definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MonitoringAccountResourceInner> getByResourceGroupWithResponse(
        String resourceGroupName, String monitoringAccountName, Context context);

    /**
     * Returns the specific monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Monitoring Account definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MonitoringAccountResourceInner getByResourceGroup(String resourceGroupName, String monitoringAccountName);

    /**
     * Create or update a monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @param monitoringAccountProperties Properties that need to be specified to create a new monitoring account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Monitoring Account definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MonitoringAccountResourceInner>> createWithResponseAsync(
        String resourceGroupName,
        String monitoringAccountName,
        MonitoringAccountResourceInner monitoringAccountProperties);

    /**
     * Create or update a monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @param monitoringAccountProperties Properties that need to be specified to create a new monitoring account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Monitoring Account definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MonitoringAccountResourceInner> createAsync(
        String resourceGroupName,
        String monitoringAccountName,
        MonitoringAccountResourceInner monitoringAccountProperties);

    /**
     * Create or update a monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @param monitoringAccountProperties Properties that need to be specified to create a new monitoring account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Monitoring Account definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MonitoringAccountResourceInner> createWithResponse(
        String resourceGroupName,
        String monitoringAccountName,
        MonitoringAccountResourceInner monitoringAccountProperties,
        Context context);

    /**
     * Create or update a monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @param monitoringAccountProperties Properties that need to be specified to create a new monitoring account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Monitoring Account definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MonitoringAccountResourceInner create(
        String resourceGroupName,
        String monitoringAccountName,
        MonitoringAccountResourceInner monitoringAccountProperties);

    /**
     * Updates part of a monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @param monitoringAccountProperties The payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Monitoring Account definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MonitoringAccountResourceInner>> updateWithResponseAsync(
        String resourceGroupName,
        String monitoringAccountName,
        MonitoringAccountResourceForUpdate monitoringAccountProperties);

    /**
     * Updates part of a monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Monitoring Account definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MonitoringAccountResourceInner> updateAsync(String resourceGroupName, String monitoringAccountName);

    /**
     * Updates part of a monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @param monitoringAccountProperties The payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Monitoring Account definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MonitoringAccountResourceInner> updateWithResponse(
        String resourceGroupName,
        String monitoringAccountName,
        MonitoringAccountResourceForUpdate monitoringAccountProperties,
        Context context);

    /**
     * Updates part of a monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Monitoring Account definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MonitoringAccountResourceInner update(String resourceGroupName, String monitoringAccountName);

    /**
     * Delete an monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String monitoringAccountName);

    /**
     * Delete an monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteAsync(String resourceGroupName, String monitoringAccountName);

    /**
     * Delete an monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String monitoringAccountName, Context context);

    /**
     * Delete an monitoring account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitoringAccountName The name of the monitoring account. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String monitoringAccountName);
}
