// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.generated;

import com.azure.resourcemanager.containerservice.fluent.models.JwtAuthenticatorInner;
import com.azure.resourcemanager.containerservice.models.JwtAuthenticatorClaimMappingExpression;
import com.azure.resourcemanager.containerservice.models.JwtAuthenticatorClaimMappings;
import com.azure.resourcemanager.containerservice.models.JwtAuthenticatorExtraClaimMappingExpression;
import com.azure.resourcemanager.containerservice.models.JwtAuthenticatorIssuer;
import com.azure.resourcemanager.containerservice.models.JwtAuthenticatorProperties;
import com.azure.resourcemanager.containerservice.models.JwtAuthenticatorValidationRule;
import java.util.Arrays;

/**
 * Samples for JwtAuthenticators CreateOrUpdate.
 */
public final class JwtAuthenticatorsCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-08-02-preview/
     * examples/JWTAuthenticators_Create_Or_Update.json
     */
    /**
     * Sample code: Create or update JWT Authenticator.
     * 
     * @param azure The entry point for accessing resource management APIs in Azure.
     */
    public static void createOrUpdateJWTAuthenticator(com.azure.resourcemanager.AzureResourceManager azure) {
        azure.kubernetesClusters()
            .manager()
            .serviceClient()
            .getJwtAuthenticators()
            .createOrUpdate("rg1", "clustername1", "jwt1",
                new JwtAuthenticatorInner()
                    .withProperties(
                        new JwtAuthenticatorProperties()
                            .withIssuer(
                                new JwtAuthenticatorIssuer().withUrl("https://example.com")
                                    .withAudiences(Arrays.asList("https://example.com/audience1",
                                        "https://example.com/audience2")))
                            .withClaimValidationRules(Arrays.asList(
                                new JwtAuthenticatorValidationRule().withExpression("has(claims.sub)")
                                    .withMessage("Sub is required"),
                                new JwtAuthenticatorValidationRule().withExpression("claims.sub != ''")
                                    .withMessage("Sub cannot be empty")))
                            .withClaimMappings(new JwtAuthenticatorClaimMappings()
                                .withUsername(new JwtAuthenticatorClaimMappingExpression()
                                    .withExpression("'aks:jwt:' + claims.sub"))
                                .withGroups(new JwtAuthenticatorClaimMappingExpression()
                                    .withExpression("claims.groups.split(',').map(group, 'aks:jwt:' + group)"))
                                .withExtra(Arrays.asList(
                                    new JwtAuthenticatorExtraClaimMappingExpression().withKey("fakeTokenPlaceholder")
                                        .withValueExpression("claims.customfield"))))
                            .withUserValidationRules(Arrays.asList(new JwtAuthenticatorValidationRule()
                                .withExpression("user.groups.all(group, group.startsWith('aks:jwt:admin:'))")
                                .withMessage("Must be in admin user group")))),
                com.azure.core.util.Context.NONE);
    }
}
