// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.generated;

import com.azure.resourcemanager.containerservice.fluent.models.MachineInner;
import com.azure.resourcemanager.containerservice.models.AgentPoolMode;
import com.azure.resourcemanager.containerservice.models.KubeletDiskType;
import com.azure.resourcemanager.containerservice.models.MachineHardwareProfile;
import com.azure.resourcemanager.containerservice.models.MachineKubernetesProfile;
import com.azure.resourcemanager.containerservice.models.MachineOSProfile;
import com.azure.resourcemanager.containerservice.models.MachineProperties;
import com.azure.resourcemanager.containerservice.models.OSSku;
import com.azure.resourcemanager.containerservice.models.OSType;
import com.azure.resourcemanager.containerservice.models.ScaleSetPriority;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Machines CreateOrUpdate.
 */
public final class MachinesCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/containerservice/resource-manager/Microsoft.ContainerService/aks/preview/2025-08-02-preview/
     * examples/MachineCreate_Update.json
     */
    /**
     * Sample code: Create/Update Machine.
     * 
     * @param azure The entry point for accessing resource management APIs in Azure.
     */
    public static void createUpdateMachine(com.azure.resourcemanager.AzureResourceManager azure) {
        azure.kubernetesClusters()
            .manager()
            .serviceClient()
            .getMachines()
            .createOrUpdate("rg1", "clustername1", "agentpool1", "machine1", new MachineInner()
                .withZones(Arrays.asList("1"))
                .withProperties(new MachineProperties()
                    .withHardware(new MachineHardwareProfile().withVmSize("Standard_DS1_v2"))
                    .withOperatingSystem(
                        new MachineOSProfile().withOsType(OSType.LINUX).withOsSku(OSSku.UBUNTU).withEnableFips(false))
                    .withKubernetes(new MachineKubernetesProfile().withNodeLabels(mapOf("key1", "fakeTokenPlaceholder"))
                        .withOrchestratorVersion("1.30")
                        .withKubeletDiskType(KubeletDiskType.OS)
                        .withNodeTaints(Arrays.asList("Key1=Value1:NoSchedule"))
                        .withMaxPods(110))
                    .withMode(AgentPoolMode.USER)
                    .withPriority(ScaleSetPriority.SPOT)
                    .withTags(mapOf("name1", "val1"))),
                null, null, com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
