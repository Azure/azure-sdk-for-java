// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resources.generated;

import com.azure.core.management.serializer.SerializerFactory;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.resources.fluent.models.PolicySetDefinitionVersionInner;
import com.azure.resourcemanager.resources.models.ParameterDefinitionsValue;
import com.azure.resourcemanager.resources.models.ParameterDefinitionsValueMetadata;
import com.azure.resourcemanager.resources.models.ParameterType;
import com.azure.resourcemanager.resources.models.ParameterValuesValue;
import com.azure.resourcemanager.resources.models.PolicyDefinitionReference;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for PolicySetDefinitionVersions CreateOrUpdate.
 */
public final class PolicySetDefinitionVersionsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/resources/resource-manager/Microsoft.Authorization/stable/2023-04-01/examples/
     * createOrUpdatePolicySetDefinitionVersion.json
     */
    /**
     * Sample code: Create or update a policy set definition version.
     * 
     * @param azure The entry point for accessing resource management APIs in Azure.
     */
    public static void createOrUpdateAPolicySetDefinitionVersion(com.azure.resourcemanager.AzureResourceManager azure)
        throws IOException {
        azure.genericResources()
            .manager()
            .policyClient()
            .getPolicySetDefinitionVersions()
            .createOrUpdateWithResponse("CostManagement", "1.2.1",
                new PolicySetDefinitionVersionInner().withDisplayName("Cost Management")
                    .withDescription("Policies to enforce low cost storage SKUs")
                    .withMetadata(SerializerFactory.createDefaultManagementSerializerAdapter()
                        .deserialize("{\"category\":\"Cost Management\"}", Object.class, SerializerEncoding.JSON))
                    .withParameters(mapOf("namePrefix",
                        new ParameterDefinitionsValue().withType(ParameterType.STRING)
                            .withDefaultValue("myPrefix")
                            .withMetadata(new ParameterDefinitionsValueMetadata()
                                .withDisplayName("Prefix to enforce on resource names")
                                .withAdditionalProperties(mapOf()))))
                    .withPolicyDefinitions(Arrays.asList(new PolicyDefinitionReference().withPolicyDefinitionId(
                        "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/7433c107-6db4-4ad1-b57a-a76dce0154a1")
                        .withParameters(mapOf("listOfAllowedSKUs",
                            new ParameterValuesValue()
                                .withValue(SerializerFactory.createDefaultManagementSerializerAdapter()
                                    .deserialize("[\"Standard_GRS\",\"Standard_LRS\"]", Object.class,
                                        SerializerEncoding.JSON))))
                        .withPolicyDefinitionReferenceId("Limit_Skus"),
                        new PolicyDefinitionReference().withPolicyDefinitionId(
                            "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/ResourceNaming")
                            .withParameters(
                                mapOf("prefix", new ParameterValuesValue().withValue("[parameters('namePrefix')]"),
                                    "suffix", new ParameterValuesValue().withValue("-LC")))
                            .withPolicyDefinitionReferenceId("Resource_Naming")))
                    .withVersion("1.2.1"),
                com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
