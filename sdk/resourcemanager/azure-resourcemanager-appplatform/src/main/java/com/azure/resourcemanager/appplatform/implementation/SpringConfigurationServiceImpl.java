// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.implementation;

import com.azure.resourcemanager.appplatform.AppPlatformManager;
import com.azure.resourcemanager.appplatform.fluent.models.ConfigurationServiceResourceInner;
import com.azure.resourcemanager.appplatform.models.ConfigurationServiceGitProperty;
import com.azure.resourcemanager.appplatform.models.ConfigurationServiceGitRepository;
import com.azure.resourcemanager.appplatform.models.SpringConfigurationService;
import com.azure.resourcemanager.appplatform.models.SpringService;
import com.azure.resourcemanager.resources.fluentcore.arm.models.implementation.ExternalChildResourceImpl;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class SpringConfigurationServiceImpl
    extends ExternalChildResourceImpl<SpringConfigurationService, ConfigurationServiceResourceInner, SpringServiceImpl, SpringService>
    implements SpringConfigurationService {
    protected SpringConfigurationServiceImpl(String name, SpringServiceImpl parent, ConfigurationServiceResourceInner innerObject) {
        super(name, parent, innerObject);
    }

    @Override
    public String cpu() {
        return innerModel().properties().resourceRequests().cpu();
    }

    @Override
    public String memory() {
        return innerModel().properties().resourceRequests().memory();
    }

    @Override
    public String gitUri() {
        return findDefaultRepo()
            .map(ConfigurationServiceGitRepository::uri)
            .orElse(null);
    }

    @Override
    public List<String> filePatterns() {
        return findDefaultRepo()
            .map(ConfigurationServiceGitRepository::patterns)
            .orElse(new ArrayList<>());
    }

    private Optional<ConfigurationServiceGitRepository> findDefaultRepo() {
        ConfigurationServiceGitProperty property = innerModel().properties().settings().gitProperty();
        if (property != null && property.repositories() != null) {
            return property.repositories()
                .stream()
                .filter(repository -> "default".equals(repository.name()))
                .findFirst();
        } else {
            return Optional.empty();
        }
    }

    @Override
    public String id() {
        return innerModel().id();
    }

    @Override
    public Mono<SpringConfigurationService> createResourceAsync() {
        return manager().serviceClient().getConfigurationServices()
            .createOrUpdateAsync(parent().resourceGroupName(), parent().name(), name(), innerModel())
            .map(inner -> {
                setInner(inner);
                return this;
            });
    }

    @Override
    public Mono<SpringConfigurationService> updateResourceAsync() {
        return createResourceAsync();
    }

    @Override
    public Mono<Void> deleteResourceAsync() {
        return manager().serviceClient().getConfigurationServices().deleteAsync(parent().resourceGroupName(), parent().name(), name());
    }

    @Override
    protected Mono<ConfigurationServiceResourceInner> getInnerAsync() {
        return manager().serviceClient().getConfigurationServices().getAsync(parent().resourceGroupName(), parent().name(), name());
    }

    public AppPlatformManager manager() {
        return parent().manager();
    }
}
