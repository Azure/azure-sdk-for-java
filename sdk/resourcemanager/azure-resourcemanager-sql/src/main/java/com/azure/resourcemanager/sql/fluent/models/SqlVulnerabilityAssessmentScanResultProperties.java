// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sql.models.BaselineAdjustedResult;
import com.azure.resourcemanager.sql.models.Remediation;
import com.azure.resourcemanager.sql.models.RuleStatus;
import com.azure.resourcemanager.sql.models.VaRule;
import java.io.IOException;
import java.util.List;

/**
 * SQL Vulnerability Assessment scan result properties for a single rule.
 */
@Immutable
public final class SqlVulnerabilityAssessmentScanResultProperties
    implements JsonSerializable<SqlVulnerabilityAssessmentScanResultProperties> {
    /*
     * SQL Vulnerability Assessment rule Id.
     */
    private String ruleId;

    /*
     * SQL Vulnerability Assessment rule result status.
     */
    private RuleStatus status;

    /*
     * SQL Vulnerability Assessment error message.
     */
    private String errorMessage;

    /*
     * SQL Vulnerability Assessment is the query results trimmed.
     */
    private Boolean isTrimmed;

    /*
     * SQL Vulnerability Assessment query results that was run.
     */
    private List<List<String>> queryResults;

    /*
     * SQL Vulnerability Assessment the remediation details.
     */
    private Remediation remediation;

    /*
     * SQL Vulnerability Assessment rule result adjusted with baseline.
     */
    private BaselineAdjustedResult baselineAdjustedResult;

    /*
     * SQL Vulnerability Assessment rule metadata.
     */
    private VaRule ruleMetadata;

    /**
     * Creates an instance of SqlVulnerabilityAssessmentScanResultProperties class.
     */
    public SqlVulnerabilityAssessmentScanResultProperties() {
    }

    /**
     * Get the ruleId property: SQL Vulnerability Assessment rule Id.
     * 
     * @return the ruleId value.
     */
    public String ruleId() {
        return this.ruleId;
    }

    /**
     * Get the status property: SQL Vulnerability Assessment rule result status.
     * 
     * @return the status value.
     */
    public RuleStatus status() {
        return this.status;
    }

    /**
     * Get the errorMessage property: SQL Vulnerability Assessment error message.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the isTrimmed property: SQL Vulnerability Assessment is the query results trimmed.
     * 
     * @return the isTrimmed value.
     */
    public Boolean isTrimmed() {
        return this.isTrimmed;
    }

    /**
     * Get the queryResults property: SQL Vulnerability Assessment query results that was run.
     * 
     * @return the queryResults value.
     */
    public List<List<String>> queryResults() {
        return this.queryResults;
    }

    /**
     * Get the remediation property: SQL Vulnerability Assessment the remediation details.
     * 
     * @return the remediation value.
     */
    public Remediation remediation() {
        return this.remediation;
    }

    /**
     * Get the baselineAdjustedResult property: SQL Vulnerability Assessment rule result adjusted with baseline.
     * 
     * @return the baselineAdjustedResult value.
     */
    public BaselineAdjustedResult baselineAdjustedResult() {
        return this.baselineAdjustedResult;
    }

    /**
     * Get the ruleMetadata property: SQL Vulnerability Assessment rule metadata.
     * 
     * @return the ruleMetadata value.
     */
    public VaRule ruleMetadata() {
        return this.ruleMetadata;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (remediation() != null) {
            remediation().validate();
        }
        if (baselineAdjustedResult() != null) {
            baselineAdjustedResult().validate();
        }
        if (ruleMetadata() != null) {
            ruleMetadata().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlVulnerabilityAssessmentScanResultProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlVulnerabilityAssessmentScanResultProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlVulnerabilityAssessmentScanResultProperties.
     */
    public static SqlVulnerabilityAssessmentScanResultProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlVulnerabilityAssessmentScanResultProperties deserializedSqlVulnerabilityAssessmentScanResultProperties
                = new SqlVulnerabilityAssessmentScanResultProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ruleId".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanResultProperties.ruleId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanResultProperties.status
                        = RuleStatus.fromString(reader.getString());
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanResultProperties.errorMessage = reader.getString();
                } else if ("isTrimmed".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanResultProperties.isTrimmed
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("queryResults".equals(fieldName)) {
                    List<List<String>> queryResults
                        = reader.readArray(reader1 -> reader1.readArray(reader2 -> reader2.getString()));
                    deserializedSqlVulnerabilityAssessmentScanResultProperties.queryResults = queryResults;
                } else if ("remediation".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanResultProperties.remediation
                        = Remediation.fromJson(reader);
                } else if ("baselineAdjustedResult".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanResultProperties.baselineAdjustedResult
                        = BaselineAdjustedResult.fromJson(reader);
                } else if ("ruleMetadata".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanResultProperties.ruleMetadata = VaRule.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlVulnerabilityAssessmentScanResultProperties;
        });
    }
}
