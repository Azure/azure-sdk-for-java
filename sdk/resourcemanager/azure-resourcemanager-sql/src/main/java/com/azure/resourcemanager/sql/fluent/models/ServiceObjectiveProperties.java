// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the properties of a database service objective.
 */
@Immutable
public final class ServiceObjectiveProperties implements JsonSerializable<ServiceObjectiveProperties> {
    /*
     * The name for the service objective.
     */
    private String serviceObjectiveName;

    /*
     * Gets whether the service level objective is the default service objective.
     */
    private Boolean isDefault;

    /*
     * Gets whether the service level objective is a system service objective.
     */
    private Boolean isSystem;

    /*
     * The description for the service level objective.
     */
    private String description;

    /*
     * Gets whether the service level objective is enabled.
     */
    private Boolean enabled;

    /**
     * Creates an instance of ServiceObjectiveProperties class.
     */
    public ServiceObjectiveProperties() {
    }

    /**
     * Get the serviceObjectiveName property: The name for the service objective.
     * 
     * @return the serviceObjectiveName value.
     */
    public String serviceObjectiveName() {
        return this.serviceObjectiveName;
    }

    /**
     * Get the isDefault property: Gets whether the service level objective is the default service objective.
     * 
     * @return the isDefault value.
     */
    public Boolean isDefault() {
        return this.isDefault;
    }

    /**
     * Get the isSystem property: Gets whether the service level objective is a system service objective.
     * 
     * @return the isSystem value.
     */
    public Boolean isSystem() {
        return this.isSystem;
    }

    /**
     * Get the description property: The description for the service level objective.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the enabled property: Gets whether the service level objective is enabled.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceObjectiveProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceObjectiveProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceObjectiveProperties.
     */
    public static ServiceObjectiveProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceObjectiveProperties deserializedServiceObjectiveProperties = new ServiceObjectiveProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceObjectiveName".equals(fieldName)) {
                    deserializedServiceObjectiveProperties.serviceObjectiveName = reader.getString();
                } else if ("isDefault".equals(fieldName)) {
                    deserializedServiceObjectiveProperties.isDefault = reader.getNullable(JsonReader::getBoolean);
                } else if ("isSystem".equals(fieldName)) {
                    deserializedServiceObjectiveProperties.isSystem = reader.getNullable(JsonReader::getBoolean);
                } else if ("description".equals(fieldName)) {
                    deserializedServiceObjectiveProperties.description = reader.getString();
                } else if ("enabled".equals(fieldName)) {
                    deserializedServiceObjectiveProperties.enabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceObjectiveProperties;
        });
    }
}
