// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sql.models.DistributedAvailabilityGroupDatabase;
import com.azure.resourcemanager.sql.models.FailoverModeType;
import com.azure.resourcemanager.sql.models.LinkRole;
import com.azure.resourcemanager.sql.models.ReplicationModeType;
import com.azure.resourcemanager.sql.models.SeedingModeType;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

/**
 * Distributed availability group between box and Sql Managed Instance.
 */
@Fluent
public final class DistributedAvailabilityGroupInner extends ProxyResource {
    /*
     * Resource properties.
     */
    private DistributedAvailabilityGroupProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of DistributedAvailabilityGroupInner class.
     */
    public DistributedAvailabilityGroupInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     * 
     * @return the innerProperties value.
     */
    private DistributedAvailabilityGroupProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the distributedAvailabilityGroupName property: Name of the distributed availability group.
     * 
     * @return the distributedAvailabilityGroupName value.
     */
    public String distributedAvailabilityGroupName() {
        return this.innerProperties() == null ? null : this.innerProperties().distributedAvailabilityGroupName();
    }

    /**
     * Get the distributedAvailabilityGroupId property: ID of the distributed availability group.
     * 
     * @return the distributedAvailabilityGroupId value.
     */
    public UUID distributedAvailabilityGroupId() {
        return this.innerProperties() == null ? null : this.innerProperties().distributedAvailabilityGroupId();
    }

    /**
     * Get the replicationMode property: Replication mode of the link.
     * 
     * @return the replicationMode value.
     */
    public ReplicationModeType replicationMode() {
        return this.innerProperties() == null ? null : this.innerProperties().replicationMode();
    }

    /**
     * Set the replicationMode property: Replication mode of the link.
     * 
     * @param replicationMode the replicationMode value to set.
     * @return the DistributedAvailabilityGroupInner object itself.
     */
    public DistributedAvailabilityGroupInner withReplicationMode(ReplicationModeType replicationMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DistributedAvailabilityGroupProperties();
        }
        this.innerProperties().withReplicationMode(replicationMode);
        return this;
    }

    /**
     * Get the partnerLinkRole property: SQL server side link role.
     * 
     * @return the partnerLinkRole value.
     */
    public LinkRole partnerLinkRole() {
        return this.innerProperties() == null ? null : this.innerProperties().partnerLinkRole();
    }

    /**
     * Get the partnerAvailabilityGroupName property: SQL server side availability group name.
     * 
     * @return the partnerAvailabilityGroupName value.
     */
    public String partnerAvailabilityGroupName() {
        return this.innerProperties() == null ? null : this.innerProperties().partnerAvailabilityGroupName();
    }

    /**
     * Set the partnerAvailabilityGroupName property: SQL server side availability group name.
     * 
     * @param partnerAvailabilityGroupName the partnerAvailabilityGroupName value to set.
     * @return the DistributedAvailabilityGroupInner object itself.
     */
    public DistributedAvailabilityGroupInner withPartnerAvailabilityGroupName(String partnerAvailabilityGroupName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DistributedAvailabilityGroupProperties();
        }
        this.innerProperties().withPartnerAvailabilityGroupName(partnerAvailabilityGroupName);
        return this;
    }

    /**
     * Get the partnerEndpoint property: SQL server side endpoint - IP or DNS resolvable name.
     * 
     * @return the partnerEndpoint value.
     */
    public String partnerEndpoint() {
        return this.innerProperties() == null ? null : this.innerProperties().partnerEndpoint();
    }

    /**
     * Set the partnerEndpoint property: SQL server side endpoint - IP or DNS resolvable name.
     * 
     * @param partnerEndpoint the partnerEndpoint value to set.
     * @return the DistributedAvailabilityGroupInner object itself.
     */
    public DistributedAvailabilityGroupInner withPartnerEndpoint(String partnerEndpoint) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DistributedAvailabilityGroupProperties();
        }
        this.innerProperties().withPartnerEndpoint(partnerEndpoint);
        return this;
    }

    /**
     * Get the instanceLinkRole property: Managed instance side link role.
     * 
     * @return the instanceLinkRole value.
     */
    public LinkRole instanceLinkRole() {
        return this.innerProperties() == null ? null : this.innerProperties().instanceLinkRole();
    }

    /**
     * Set the instanceLinkRole property: Managed instance side link role.
     * 
     * @param instanceLinkRole the instanceLinkRole value to set.
     * @return the DistributedAvailabilityGroupInner object itself.
     */
    public DistributedAvailabilityGroupInner withInstanceLinkRole(LinkRole instanceLinkRole) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DistributedAvailabilityGroupProperties();
        }
        this.innerProperties().withInstanceLinkRole(instanceLinkRole);
        return this;
    }

    /**
     * Get the instanceAvailabilityGroupName property: Managed instance side availability group name.
     * 
     * @return the instanceAvailabilityGroupName value.
     */
    public String instanceAvailabilityGroupName() {
        return this.innerProperties() == null ? null : this.innerProperties().instanceAvailabilityGroupName();
    }

    /**
     * Set the instanceAvailabilityGroupName property: Managed instance side availability group name.
     * 
     * @param instanceAvailabilityGroupName the instanceAvailabilityGroupName value to set.
     * @return the DistributedAvailabilityGroupInner object itself.
     */
    public DistributedAvailabilityGroupInner withInstanceAvailabilityGroupName(String instanceAvailabilityGroupName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DistributedAvailabilityGroupProperties();
        }
        this.innerProperties().withInstanceAvailabilityGroupName(instanceAvailabilityGroupName);
        return this;
    }

    /**
     * Get the failoverMode property: The link failover mode - can be Manual if intended to be used for two-way failover
     * with a supported SQL Server, or None for one-way failover to Azure.
     * 
     * @return the failoverMode value.
     */
    public FailoverModeType failoverMode() {
        return this.innerProperties() == null ? null : this.innerProperties().failoverMode();
    }

    /**
     * Set the failoverMode property: The link failover mode - can be Manual if intended to be used for two-way failover
     * with a supported SQL Server, or None for one-way failover to Azure.
     * 
     * @param failoverMode the failoverMode value to set.
     * @return the DistributedAvailabilityGroupInner object itself.
     */
    public DistributedAvailabilityGroupInner withFailoverMode(FailoverModeType failoverMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DistributedAvailabilityGroupProperties();
        }
        this.innerProperties().withFailoverMode(failoverMode);
        return this;
    }

    /**
     * Get the seedingMode property: Database seeding mode – can be Automatic (default), or Manual for supported
     * scenarios.
     * 
     * @return the seedingMode value.
     */
    public SeedingModeType seedingMode() {
        return this.innerProperties() == null ? null : this.innerProperties().seedingMode();
    }

    /**
     * Set the seedingMode property: Database seeding mode – can be Automatic (default), or Manual for supported
     * scenarios.
     * 
     * @param seedingMode the seedingMode value to set.
     * @return the DistributedAvailabilityGroupInner object itself.
     */
    public DistributedAvailabilityGroupInner withSeedingMode(SeedingModeType seedingMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DistributedAvailabilityGroupProperties();
        }
        this.innerProperties().withSeedingMode(seedingMode);
        return this;
    }

    /**
     * Get the databases property: Databases in the distributed availability group.
     * 
     * @return the databases value.
     */
    public List<DistributedAvailabilityGroupDatabase> databases() {
        return this.innerProperties() == null ? null : this.innerProperties().databases();
    }

    /**
     * Set the databases property: Databases in the distributed availability group.
     * 
     * @param databases the databases value to set.
     * @return the DistributedAvailabilityGroupInner object itself.
     */
    public DistributedAvailabilityGroupInner withDatabases(List<DistributedAvailabilityGroupDatabase> databases) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DistributedAvailabilityGroupProperties();
        }
        this.innerProperties().withDatabases(databases);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DistributedAvailabilityGroupInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DistributedAvailabilityGroupInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DistributedAvailabilityGroupInner.
     */
    public static DistributedAvailabilityGroupInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DistributedAvailabilityGroupInner deserializedDistributedAvailabilityGroupInner
                = new DistributedAvailabilityGroupInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupInner.innerProperties
                        = DistributedAvailabilityGroupProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDistributedAvailabilityGroupInner;
        });
    }
}
