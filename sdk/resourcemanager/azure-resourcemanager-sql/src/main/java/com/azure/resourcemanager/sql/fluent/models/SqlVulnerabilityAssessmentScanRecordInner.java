// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sql.models.SqlVulnerabilityAssessmentScanError;
import com.azure.resourcemanager.sql.models.VulnerabilityAssessmentScanState;
import com.azure.resourcemanager.sql.models.VulnerabilityAssessmentScanTriggerType;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * A vulnerability assessment scan record.
 */
@Immutable
public final class SqlVulnerabilityAssessmentScanRecordInner extends ProxyResource {
    /*
     * SystemData of SqlVulnerabilityAssessmentScanRecordResource.
     */
    private SystemData systemData;

    /*
     * Resource properties.
     */
    private SqlVulnerabilityAssessmentScanRecordProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of SqlVulnerabilityAssessmentScanRecordInner class.
     */
    public SqlVulnerabilityAssessmentScanRecordInner() {
    }

    /**
     * Get the systemData property: SystemData of SqlVulnerabilityAssessmentScanRecordResource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the innerProperties property: Resource properties.
     * 
     * @return the innerProperties value.
     */
    private SqlVulnerabilityAssessmentScanRecordProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the scanId property: The scan ID.
     * 
     * @return the scanId value.
     */
    public String scanId() {
        return this.innerProperties() == null ? null : this.innerProperties().scanId();
    }

    /**
     * Get the triggerType property: The scan trigger type.
     * 
     * @return the triggerType value.
     */
    public VulnerabilityAssessmentScanTriggerType triggerType() {
        return this.innerProperties() == null ? null : this.innerProperties().triggerType();
    }

    /**
     * Get the state property: The scan status.
     * 
     * @return the state value.
     */
    public VulnerabilityAssessmentScanState state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Get the startTime property: The scan start time (UTC).
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.innerProperties() == null ? null : this.innerProperties().startTime();
    }

    /**
     * Get the endTime property: The scan end time (UTC).
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.innerProperties() == null ? null : this.innerProperties().endTime();
    }

    /**
     * Get the errors property: The scan errors.
     * 
     * @return the errors value.
     */
    public List<SqlVulnerabilityAssessmentScanError> errors() {
        return this.innerProperties() == null ? null : this.innerProperties().errors();
    }

    /**
     * Get the server property: The server name.
     * 
     * @return the server value.
     */
    public String server() {
        return this.innerProperties() == null ? null : this.innerProperties().server();
    }

    /**
     * Get the database property: The database name.
     * 
     * @return the database value.
     */
    public String database() {
        return this.innerProperties() == null ? null : this.innerProperties().database();
    }

    /**
     * Get the sqlVersion property: The SQL version.
     * 
     * @return the sqlVersion value.
     */
    public String sqlVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().sqlVersion();
    }

    /**
     * Get the highSeverityFailedRulesCount property: The number of failed rules with high severity.
     * 
     * @return the highSeverityFailedRulesCount value.
     */
    public Integer highSeverityFailedRulesCount() {
        return this.innerProperties() == null ? null : this.innerProperties().highSeverityFailedRulesCount();
    }

    /**
     * Get the mediumSeverityFailedRulesCount property: The number of failed rules with medium severity.
     * 
     * @return the mediumSeverityFailedRulesCount value.
     */
    public Integer mediumSeverityFailedRulesCount() {
        return this.innerProperties() == null ? null : this.innerProperties().mediumSeverityFailedRulesCount();
    }

    /**
     * Get the lowSeverityFailedRulesCount property: The number of failed rules with low severity.
     * 
     * @return the lowSeverityFailedRulesCount value.
     */
    public Integer lowSeverityFailedRulesCount() {
        return this.innerProperties() == null ? null : this.innerProperties().lowSeverityFailedRulesCount();
    }

    /**
     * Get the totalPassedRulesCount property: The number of total passed rules.
     * 
     * @return the totalPassedRulesCount value.
     */
    public Integer totalPassedRulesCount() {
        return this.innerProperties() == null ? null : this.innerProperties().totalPassedRulesCount();
    }

    /**
     * Get the totalFailedRulesCount property: The number of total failed rules.
     * 
     * @return the totalFailedRulesCount value.
     */
    public Integer totalFailedRulesCount() {
        return this.innerProperties() == null ? null : this.innerProperties().totalFailedRulesCount();
    }

    /**
     * Get the totalRulesCount property: The number of total rules assessed.
     * 
     * @return the totalRulesCount value.
     */
    public Integer totalRulesCount() {
        return this.innerProperties() == null ? null : this.innerProperties().totalRulesCount();
    }

    /**
     * Get the isBaselineApplied property: Baseline created for this database, and has one or more rules.
     * 
     * @return the isBaselineApplied value.
     */
    public Boolean isBaselineApplied() {
        return this.innerProperties() == null ? null : this.innerProperties().isBaselineApplied();
    }

    /**
     * Get the lastScanTime property: The last scan time.
     * 
     * @return the lastScanTime value.
     */
    public OffsetDateTime lastScanTime() {
        return this.innerProperties() == null ? null : this.innerProperties().lastScanTime();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlVulnerabilityAssessmentScanRecordInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlVulnerabilityAssessmentScanRecordInner if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SqlVulnerabilityAssessmentScanRecordInner.
     */
    public static SqlVulnerabilityAssessmentScanRecordInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlVulnerabilityAssessmentScanRecordInner deserializedSqlVulnerabilityAssessmentScanRecordInner
                = new SqlVulnerabilityAssessmentScanRecordInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordInner.type = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordInner.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordInner.innerProperties
                        = SqlVulnerabilityAssessmentScanRecordProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlVulnerabilityAssessmentScanRecordInner;
        });
    }
}
