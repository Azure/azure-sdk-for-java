// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sql.models.MetricAvailability;
import com.azure.resourcemanager.sql.models.MetricName;
import com.azure.resourcemanager.sql.models.PrimaryAggregationType;
import com.azure.resourcemanager.sql.models.UnitDefinitionType;
import java.io.IOException;
import java.util.List;

/**
 * A database metric definition.
 */
@Immutable
public final class MetricDefinitionInner implements JsonSerializable<MetricDefinitionInner> {
    /*
     * The name information for the metric.
     */
    private MetricName name;

    /*
     * The primary aggregation type defining how metric values are displayed.
     */
    private PrimaryAggregationType primaryAggregationType;

    /*
     * The resource uri of the database.
     */
    private String resourceUri;

    /*
     * The unit of the metric.
     */
    private UnitDefinitionType unit;

    /*
     * The list of database metric availabilities for the metric.
     */
    private List<MetricAvailability> metricAvailabilities;

    /**
     * Creates an instance of MetricDefinitionInner class.
     */
    public MetricDefinitionInner() {
    }

    /**
     * Get the name property: The name information for the metric.
     * 
     * @return the name value.
     */
    public MetricName name() {
        return this.name;
    }

    /**
     * Get the primaryAggregationType property: The primary aggregation type defining how metric values are displayed.
     * 
     * @return the primaryAggregationType value.
     */
    public PrimaryAggregationType primaryAggregationType() {
        return this.primaryAggregationType;
    }

    /**
     * Get the resourceUri property: The resource uri of the database.
     * 
     * @return the resourceUri value.
     */
    public String resourceUri() {
        return this.resourceUri;
    }

    /**
     * Get the unit property: The unit of the metric.
     * 
     * @return the unit value.
     */
    public UnitDefinitionType unit() {
        return this.unit;
    }

    /**
     * Get the metricAvailabilities property: The list of database metric availabilities for the metric.
     * 
     * @return the metricAvailabilities value.
     */
    public List<MetricAvailability> metricAvailabilities() {
        return this.metricAvailabilities;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() != null) {
            name().validate();
        }
        if (metricAvailabilities() != null) {
            metricAvailabilities().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricDefinitionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricDefinitionInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetricDefinitionInner.
     */
    public static MetricDefinitionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricDefinitionInner deserializedMetricDefinitionInner = new MetricDefinitionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedMetricDefinitionInner.name = MetricName.fromJson(reader);
                } else if ("primaryAggregationType".equals(fieldName)) {
                    deserializedMetricDefinitionInner.primaryAggregationType
                        = PrimaryAggregationType.fromString(reader.getString());
                } else if ("resourceUri".equals(fieldName)) {
                    deserializedMetricDefinitionInner.resourceUri = reader.getString();
                } else if ("unit".equals(fieldName)) {
                    deserializedMetricDefinitionInner.unit = UnitDefinitionType.fromString(reader.getString());
                } else if ("metricAvailabilities".equals(fieldName)) {
                    List<MetricAvailability> metricAvailabilities
                        = reader.readArray(reader1 -> MetricAvailability.fromJson(reader1));
                    deserializedMetricDefinitionInner.metricAvailabilities = metricAvailabilities;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricDefinitionInner;
        });
    }
}
