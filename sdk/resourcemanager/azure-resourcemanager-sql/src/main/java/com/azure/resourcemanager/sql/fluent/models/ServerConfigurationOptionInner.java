// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.resourcemanager.sql.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A server configuration option.
 */
@Fluent
public final class ServerConfigurationOptionInner extends ProxyResource {
    /*
     * Resource properties.
     */
    @JsonProperty(value = "properties")
    private ServerConfigurationOptionProperties innerProperties;

    /**
     * Creates an instance of ServerConfigurationOptionInner class.
     */
    public ServerConfigurationOptionInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     * 
     * @return the innerProperties value.
     */
    private ServerConfigurationOptionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the serverConfigurationOptionValue property: Value of the server configuration option.
     * 
     * @return the serverConfigurationOptionValue value.
     */
    public Integer serverConfigurationOptionValue() {
        return this.innerProperties() == null ? null : this.innerProperties().serverConfigurationOptionValue();
    }

    /**
     * Set the serverConfigurationOptionValue property: Value of the server configuration option.
     * 
     * @param serverConfigurationOptionValue the serverConfigurationOptionValue value to set.
     * @return the ServerConfigurationOptionInner object itself.
     */
    public ServerConfigurationOptionInner withServerConfigurationOptionValue(Integer serverConfigurationOptionValue) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServerConfigurationOptionProperties();
        }
        this.innerProperties().withServerConfigurationOptionValue(serverConfigurationOptionValue);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of server configuration option.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
