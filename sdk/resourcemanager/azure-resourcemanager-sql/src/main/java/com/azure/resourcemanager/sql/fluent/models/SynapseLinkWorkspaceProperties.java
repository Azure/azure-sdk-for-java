// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sql.models.SynapseLinkWorkspaceInfoProperties;
import java.io.IOException;
import java.util.List;

/**
 * Properties of a Synapse link workspaces.
 */
@Fluent
public final class SynapseLinkWorkspaceProperties implements JsonSerializable<SynapseLinkWorkspaceProperties> {
    /*
     * List of all synapselink workspaces
     */
    private List<SynapseLinkWorkspaceInfoProperties> workspaces;

    /**
     * Creates an instance of SynapseLinkWorkspaceProperties class.
     */
    public SynapseLinkWorkspaceProperties() {
    }

    /**
     * Get the workspaces property: List of all synapselink workspaces.
     * 
     * @return the workspaces value.
     */
    public List<SynapseLinkWorkspaceInfoProperties> workspaces() {
        return this.workspaces;
    }

    /**
     * Set the workspaces property: List of all synapselink workspaces.
     * 
     * @param workspaces the workspaces value to set.
     * @return the SynapseLinkWorkspaceProperties object itself.
     */
    public SynapseLinkWorkspaceProperties withWorkspaces(List<SynapseLinkWorkspaceInfoProperties> workspaces) {
        this.workspaces = workspaces;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (workspaces() != null) {
            workspaces().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("workspaces", this.workspaces, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SynapseLinkWorkspaceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SynapseLinkWorkspaceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SynapseLinkWorkspaceProperties.
     */
    public static SynapseLinkWorkspaceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SynapseLinkWorkspaceProperties deserializedSynapseLinkWorkspaceProperties
                = new SynapseLinkWorkspaceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("workspaces".equals(fieldName)) {
                    List<SynapseLinkWorkspaceInfoProperties> workspaces
                        = reader.readArray(reader1 -> SynapseLinkWorkspaceInfoProperties.fromJson(reader1));
                    deserializedSynapseLinkWorkspaceProperties.workspaces = workspaces;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSynapseLinkWorkspaceProperties;
        });
    }
}
