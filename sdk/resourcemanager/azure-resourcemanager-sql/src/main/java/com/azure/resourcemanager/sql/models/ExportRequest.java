// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The ExportRequest model. */
@Fluent
public class ExportRequest {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ExportRequest.class);

    /*
     * The type of the storage key to use.
     */
    @JsonProperty(value = "storageKeyType", required = true)
    private StorageKeyType storageKeyType;

    /*
     * The storage key to use.  If storage key type is SharedAccessKey, it must
     * be preceded with a "?."
     */
    @JsonProperty(value = "storageKey", required = true)
    private String storageKey;

    /*
     * The storage uri to use.
     */
    @JsonProperty(value = "storageUri", required = true)
    private String storageUri;

    /*
     * The name of the SQL administrator.
     */
    @JsonProperty(value = "administratorLogin", required = true)
    private String administratorLogin;

    /*
     * The password of the SQL administrator.
     */
    @JsonProperty(value = "administratorLoginPassword", required = true)
    private String administratorLoginPassword;

    /*
     * The authentication type.
     */
    @JsonProperty(value = "authenticationType")
    private AuthenticationType authenticationType;

    /**
     * Get the storageKeyType property: The type of the storage key to use.
     *
     * @return the storageKeyType value.
     */
    public StorageKeyType storageKeyType() {
        return this.storageKeyType;
    }

    /**
     * Set the storageKeyType property: The type of the storage key to use.
     *
     * @param storageKeyType the storageKeyType value to set.
     * @return the ExportRequest object itself.
     */
    public ExportRequest withStorageKeyType(StorageKeyType storageKeyType) {
        this.storageKeyType = storageKeyType;
        return this;
    }

    /**
     * Get the storageKey property: The storage key to use. If storage key type is SharedAccessKey, it must be preceded
     * with a "?.".
     *
     * @return the storageKey value.
     */
    public String storageKey() {
        return this.storageKey;
    }

    /**
     * Set the storageKey property: The storage key to use. If storage key type is SharedAccessKey, it must be preceded
     * with a "?.".
     *
     * @param storageKey the storageKey value to set.
     * @return the ExportRequest object itself.
     */
    public ExportRequest withStorageKey(String storageKey) {
        this.storageKey = storageKey;
        return this;
    }

    /**
     * Get the storageUri property: The storage uri to use.
     *
     * @return the storageUri value.
     */
    public String storageUri() {
        return this.storageUri;
    }

    /**
     * Set the storageUri property: The storage uri to use.
     *
     * @param storageUri the storageUri value to set.
     * @return the ExportRequest object itself.
     */
    public ExportRequest withStorageUri(String storageUri) {
        this.storageUri = storageUri;
        return this;
    }

    /**
     * Get the administratorLogin property: The name of the SQL administrator.
     *
     * @return the administratorLogin value.
     */
    public String administratorLogin() {
        return this.administratorLogin;
    }

    /**
     * Set the administratorLogin property: The name of the SQL administrator.
     *
     * @param administratorLogin the administratorLogin value to set.
     * @return the ExportRequest object itself.
     */
    public ExportRequest withAdministratorLogin(String administratorLogin) {
        this.administratorLogin = administratorLogin;
        return this;
    }

    /**
     * Get the administratorLoginPassword property: The password of the SQL administrator.
     *
     * @return the administratorLoginPassword value.
     */
    public String administratorLoginPassword() {
        return this.administratorLoginPassword;
    }

    /**
     * Set the administratorLoginPassword property: The password of the SQL administrator.
     *
     * @param administratorLoginPassword the administratorLoginPassword value to set.
     * @return the ExportRequest object itself.
     */
    public ExportRequest withAdministratorLoginPassword(String administratorLoginPassword) {
        this.administratorLoginPassword = administratorLoginPassword;
        return this;
    }

    /**
     * Get the authenticationType property: The authentication type.
     *
     * @return the authenticationType value.
     */
    public AuthenticationType authenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: The authentication type.
     *
     * @param authenticationType the authenticationType value to set.
     * @return the ExportRequest object itself.
     */
    public ExportRequest withAuthenticationType(AuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageKeyType() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property storageKeyType in model ExportRequest"));
        }
        if (storageKey() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property storageKey in model ExportRequest"));
        }
        if (storageUri() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property storageUri in model ExportRequest"));
        }
        if (administratorLogin() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property administratorLogin in model ExportRequest"));
        }
        if (administratorLoginPassword() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property administratorLoginPassword in model ExportRequest"));
        }
    }
}
