// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sql.models.SqlVulnerabilityAssessmentScanError;
import com.azure.resourcemanager.sql.models.VulnerabilityAssessmentScanState;
import com.azure.resourcemanager.sql.models.VulnerabilityAssessmentScanTriggerType;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Properties of a vulnerability assessment scan record.
 */
@Immutable
public final class SqlVulnerabilityAssessmentScanRecordProperties
    implements JsonSerializable<SqlVulnerabilityAssessmentScanRecordProperties> {
    /*
     * The scan ID.
     */
    private String scanId;

    /*
     * The scan trigger type.
     */
    private VulnerabilityAssessmentScanTriggerType triggerType;

    /*
     * The scan status.
     */
    private VulnerabilityAssessmentScanState state;

    /*
     * The scan start time (UTC).
     */
    private OffsetDateTime startTime;

    /*
     * The scan end time (UTC).
     */
    private OffsetDateTime endTime;

    /*
     * The scan errors.
     */
    private List<SqlVulnerabilityAssessmentScanError> errors;

    /*
     * The server name.
     */
    private String server;

    /*
     * The database name.
     */
    private String database;

    /*
     * The SQL version.
     */
    private String sqlVersion;

    /*
     * The number of failed rules with high severity.
     */
    private Integer highSeverityFailedRulesCount;

    /*
     * The number of failed rules with medium severity.
     */
    private Integer mediumSeverityFailedRulesCount;

    /*
     * The number of failed rules with low severity.
     */
    private Integer lowSeverityFailedRulesCount;

    /*
     * The number of total passed rules.
     */
    private Integer totalPassedRulesCount;

    /*
     * The number of total failed rules.
     */
    private Integer totalFailedRulesCount;

    /*
     * The number of total rules assessed.
     */
    private Integer totalRulesCount;

    /*
     * Baseline created for this database, and has one or more rules.
     */
    private Boolean isBaselineApplied;

    /*
     * The last scan time.
     */
    private OffsetDateTime lastScanTime;

    /**
     * Creates an instance of SqlVulnerabilityAssessmentScanRecordProperties class.
     */
    public SqlVulnerabilityAssessmentScanRecordProperties() {
    }

    /**
     * Get the scanId property: The scan ID.
     * 
     * @return the scanId value.
     */
    public String scanId() {
        return this.scanId;
    }

    /**
     * Get the triggerType property: The scan trigger type.
     * 
     * @return the triggerType value.
     */
    public VulnerabilityAssessmentScanTriggerType triggerType() {
        return this.triggerType;
    }

    /**
     * Get the state property: The scan status.
     * 
     * @return the state value.
     */
    public VulnerabilityAssessmentScanState state() {
        return this.state;
    }

    /**
     * Get the startTime property: The scan start time (UTC).
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: The scan end time (UTC).
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the errors property: The scan errors.
     * 
     * @return the errors value.
     */
    public List<SqlVulnerabilityAssessmentScanError> errors() {
        return this.errors;
    }

    /**
     * Get the server property: The server name.
     * 
     * @return the server value.
     */
    public String server() {
        return this.server;
    }

    /**
     * Get the database property: The database name.
     * 
     * @return the database value.
     */
    public String database() {
        return this.database;
    }

    /**
     * Get the sqlVersion property: The SQL version.
     * 
     * @return the sqlVersion value.
     */
    public String sqlVersion() {
        return this.sqlVersion;
    }

    /**
     * Get the highSeverityFailedRulesCount property: The number of failed rules with high severity.
     * 
     * @return the highSeverityFailedRulesCount value.
     */
    public Integer highSeverityFailedRulesCount() {
        return this.highSeverityFailedRulesCount;
    }

    /**
     * Get the mediumSeverityFailedRulesCount property: The number of failed rules with medium severity.
     * 
     * @return the mediumSeverityFailedRulesCount value.
     */
    public Integer mediumSeverityFailedRulesCount() {
        return this.mediumSeverityFailedRulesCount;
    }

    /**
     * Get the lowSeverityFailedRulesCount property: The number of failed rules with low severity.
     * 
     * @return the lowSeverityFailedRulesCount value.
     */
    public Integer lowSeverityFailedRulesCount() {
        return this.lowSeverityFailedRulesCount;
    }

    /**
     * Get the totalPassedRulesCount property: The number of total passed rules.
     * 
     * @return the totalPassedRulesCount value.
     */
    public Integer totalPassedRulesCount() {
        return this.totalPassedRulesCount;
    }

    /**
     * Get the totalFailedRulesCount property: The number of total failed rules.
     * 
     * @return the totalFailedRulesCount value.
     */
    public Integer totalFailedRulesCount() {
        return this.totalFailedRulesCount;
    }

    /**
     * Get the totalRulesCount property: The number of total rules assessed.
     * 
     * @return the totalRulesCount value.
     */
    public Integer totalRulesCount() {
        return this.totalRulesCount;
    }

    /**
     * Get the isBaselineApplied property: Baseline created for this database, and has one or more rules.
     * 
     * @return the isBaselineApplied value.
     */
    public Boolean isBaselineApplied() {
        return this.isBaselineApplied;
    }

    /**
     * Get the lastScanTime property: The last scan time.
     * 
     * @return the lastScanTime value.
     */
    public OffsetDateTime lastScanTime() {
        return this.lastScanTime;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlVulnerabilityAssessmentScanRecordProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlVulnerabilityAssessmentScanRecordProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlVulnerabilityAssessmentScanRecordProperties.
     */
    public static SqlVulnerabilityAssessmentScanRecordProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlVulnerabilityAssessmentScanRecordProperties deserializedSqlVulnerabilityAssessmentScanRecordProperties
                = new SqlVulnerabilityAssessmentScanRecordProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scanId".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.scanId = reader.getString();
                } else if ("triggerType".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.triggerType
                        = VulnerabilityAssessmentScanTriggerType.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.state
                        = VulnerabilityAssessmentScanState.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("errors".equals(fieldName)) {
                    List<SqlVulnerabilityAssessmentScanError> errors
                        = reader.readArray(reader1 -> SqlVulnerabilityAssessmentScanError.fromJson(reader1));
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.errors = errors;
                } else if ("server".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.server = reader.getString();
                } else if ("database".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.database = reader.getString();
                } else if ("sqlVersion".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.sqlVersion = reader.getString();
                } else if ("highSeverityFailedRulesCount".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.highSeverityFailedRulesCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("mediumSeverityFailedRulesCount".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.mediumSeverityFailedRulesCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("lowSeverityFailedRulesCount".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.lowSeverityFailedRulesCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("totalPassedRulesCount".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.totalPassedRulesCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("totalFailedRulesCount".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.totalFailedRulesCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("totalRulesCount".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.totalRulesCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("isBaselineApplied".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.isBaselineApplied
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("lastScanTime".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentScanRecordProperties.lastScanTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlVulnerabilityAssessmentScanRecordProperties;
        });
    }
}
