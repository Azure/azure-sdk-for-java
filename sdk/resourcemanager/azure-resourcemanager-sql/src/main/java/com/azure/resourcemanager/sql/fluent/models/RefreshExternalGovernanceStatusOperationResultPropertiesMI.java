// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.UUID;

/**
 * Contains the operation result properties for refresh external governance status operation.
 */
@Immutable
public final class RefreshExternalGovernanceStatusOperationResultPropertiesMI
    implements JsonSerializable<RefreshExternalGovernanceStatusOperationResultPropertiesMI> {
    /*
     * Request Id.
     */
    private UUID requestId;

    /*
     * Request type.
     */
    private String requestType;

    /*
     * Queued time.
     */
    private String queuedTime;

    /*
     * Managed instance name.
     */
    private String managedInstanceName;

    /*
     * Operation status.
     */
    private String status;

    /*
     * Error message.
     */
    private String errorMessage;

    /**
     * Creates an instance of RefreshExternalGovernanceStatusOperationResultPropertiesMI class.
     */
    public RefreshExternalGovernanceStatusOperationResultPropertiesMI() {
    }

    /**
     * Get the requestId property: Request Id.
     * 
     * @return the requestId value.
     */
    public UUID requestId() {
        return this.requestId;
    }

    /**
     * Get the requestType property: Request type.
     * 
     * @return the requestType value.
     */
    public String requestType() {
        return this.requestType;
    }

    /**
     * Get the queuedTime property: Queued time.
     * 
     * @return the queuedTime value.
     */
    public String queuedTime() {
        return this.queuedTime;
    }

    /**
     * Get the managedInstanceName property: Managed instance name.
     * 
     * @return the managedInstanceName value.
     */
    public String managedInstanceName() {
        return this.managedInstanceName;
    }

    /**
     * Get the status property: Operation status.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the errorMessage property: Error message.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RefreshExternalGovernanceStatusOperationResultPropertiesMI from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RefreshExternalGovernanceStatusOperationResultPropertiesMI if the JsonReader was pointing
     * to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * RefreshExternalGovernanceStatusOperationResultPropertiesMI.
     */
    public static RefreshExternalGovernanceStatusOperationResultPropertiesMI fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            RefreshExternalGovernanceStatusOperationResultPropertiesMI deserializedRefreshExternalGovernanceStatusOperationResultPropertiesMI
                = new RefreshExternalGovernanceStatusOperationResultPropertiesMI();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("requestId".equals(fieldName)) {
                    deserializedRefreshExternalGovernanceStatusOperationResultPropertiesMI.requestId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("requestType".equals(fieldName)) {
                    deserializedRefreshExternalGovernanceStatusOperationResultPropertiesMI.requestType
                        = reader.getString();
                } else if ("queuedTime".equals(fieldName)) {
                    deserializedRefreshExternalGovernanceStatusOperationResultPropertiesMI.queuedTime
                        = reader.getString();
                } else if ("managedInstanceName".equals(fieldName)) {
                    deserializedRefreshExternalGovernanceStatusOperationResultPropertiesMI.managedInstanceName
                        = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedRefreshExternalGovernanceStatusOperationResultPropertiesMI.status = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedRefreshExternalGovernanceStatusOperationResultPropertiesMI.errorMessage
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRefreshExternalGovernanceStatusOperationResultPropertiesMI;
        });
    }
}
