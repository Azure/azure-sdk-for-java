// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Read-only endpoint of the failover group instance.
 */
@Fluent
public final class FailoverGroupReadOnlyEndpoint implements JsonSerializable<FailoverGroupReadOnlyEndpoint> {
    /*
     * Failover policy of the read-only endpoint for the failover group.
     */
    private ReadOnlyEndpointFailoverPolicy failoverPolicy;

    /*
     * The target partner server where the read-only endpoint points to.
     */
    private String targetServer;

    /**
     * Creates an instance of FailoverGroupReadOnlyEndpoint class.
     */
    public FailoverGroupReadOnlyEndpoint() {
    }

    /**
     * Get the failoverPolicy property: Failover policy of the read-only endpoint for the failover group.
     * 
     * @return the failoverPolicy value.
     */
    public ReadOnlyEndpointFailoverPolicy failoverPolicy() {
        return this.failoverPolicy;
    }

    /**
     * Set the failoverPolicy property: Failover policy of the read-only endpoint for the failover group.
     * 
     * @param failoverPolicy the failoverPolicy value to set.
     * @return the FailoverGroupReadOnlyEndpoint object itself.
     */
    public FailoverGroupReadOnlyEndpoint withFailoverPolicy(ReadOnlyEndpointFailoverPolicy failoverPolicy) {
        this.failoverPolicy = failoverPolicy;
        return this;
    }

    /**
     * Get the targetServer property: The target partner server where the read-only endpoint points to.
     * 
     * @return the targetServer value.
     */
    public String targetServer() {
        return this.targetServer;
    }

    /**
     * Set the targetServer property: The target partner server where the read-only endpoint points to.
     * 
     * @param targetServer the targetServer value to set.
     * @return the FailoverGroupReadOnlyEndpoint object itself.
     */
    public FailoverGroupReadOnlyEndpoint withTargetServer(String targetServer) {
        this.targetServer = targetServer;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("failoverPolicy",
            this.failoverPolicy == null ? null : this.failoverPolicy.toString());
        jsonWriter.writeStringField("targetServer", this.targetServer);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FailoverGroupReadOnlyEndpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FailoverGroupReadOnlyEndpoint if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FailoverGroupReadOnlyEndpoint.
     */
    public static FailoverGroupReadOnlyEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FailoverGroupReadOnlyEndpoint deserializedFailoverGroupReadOnlyEndpoint
                = new FailoverGroupReadOnlyEndpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("failoverPolicy".equals(fieldName)) {
                    deserializedFailoverGroupReadOnlyEndpoint.failoverPolicy
                        = ReadOnlyEndpointFailoverPolicy.fromString(reader.getString());
                } else if ("targetServer".equals(fieldName)) {
                    deserializedFailoverGroupReadOnlyEndpoint.targetServer = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFailoverGroupReadOnlyEndpoint;
        });
    }
}
