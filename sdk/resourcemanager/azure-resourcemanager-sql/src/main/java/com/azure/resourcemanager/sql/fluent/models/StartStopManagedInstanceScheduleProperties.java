// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.models.ScheduleItem;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Properties of managed instance's Start/Stop schedule.
 */
@Fluent
public final class StartStopManagedInstanceScheduleProperties {
    /*
     * The description of the schedule.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * The time zone of the schedule.
     */
    @JsonProperty(value = "timeZoneId")
    private String timeZoneId;

    /*
     * Schedule list.
     */
    @JsonProperty(value = "scheduleList", required = true)
    private List<ScheduleItem> scheduleList;

    /*
     * Next action to be executed (Start or Stop)
     */
    @JsonProperty(value = "nextRunAction", access = JsonProperty.Access.WRITE_ONLY)
    private String nextRunAction;

    /*
     * Timestamp when the next action will be executed in the corresponding schedule time zone.
     */
    @JsonProperty(value = "nextExecutionTime", access = JsonProperty.Access.WRITE_ONLY)
    private String nextExecutionTime;

    /**
     * Creates an instance of StartStopManagedInstanceScheduleProperties class.
     */
    public StartStopManagedInstanceScheduleProperties() {
    }

    /**
     * Get the description property: The description of the schedule.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the schedule.
     * 
     * @param description the description value to set.
     * @return the StartStopManagedInstanceScheduleProperties object itself.
     */
    public StartStopManagedInstanceScheduleProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the timeZoneId property: The time zone of the schedule.
     * 
     * @return the timeZoneId value.
     */
    public String timeZoneId() {
        return this.timeZoneId;
    }

    /**
     * Set the timeZoneId property: The time zone of the schedule.
     * 
     * @param timeZoneId the timeZoneId value to set.
     * @return the StartStopManagedInstanceScheduleProperties object itself.
     */
    public StartStopManagedInstanceScheduleProperties withTimeZoneId(String timeZoneId) {
        this.timeZoneId = timeZoneId;
        return this;
    }

    /**
     * Get the scheduleList property: Schedule list.
     * 
     * @return the scheduleList value.
     */
    public List<ScheduleItem> scheduleList() {
        return this.scheduleList;
    }

    /**
     * Set the scheduleList property: Schedule list.
     * 
     * @param scheduleList the scheduleList value to set.
     * @return the StartStopManagedInstanceScheduleProperties object itself.
     */
    public StartStopManagedInstanceScheduleProperties withScheduleList(List<ScheduleItem> scheduleList) {
        this.scheduleList = scheduleList;
        return this;
    }

    /**
     * Get the nextRunAction property: Next action to be executed (Start or Stop).
     * 
     * @return the nextRunAction value.
     */
    public String nextRunAction() {
        return this.nextRunAction;
    }

    /**
     * Get the nextExecutionTime property: Timestamp when the next action will be executed in the corresponding schedule
     * time zone.
     * 
     * @return the nextExecutionTime value.
     */
    public String nextExecutionTime() {
        return this.nextExecutionTime;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scheduleList() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property scheduleList in model StartStopManagedInstanceScheduleProperties"));
        } else {
            scheduleList().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StartStopManagedInstanceScheduleProperties.class);
}
