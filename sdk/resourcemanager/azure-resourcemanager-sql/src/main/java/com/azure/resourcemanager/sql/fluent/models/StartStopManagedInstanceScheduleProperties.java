// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sql.models.ScheduleItem;
import java.io.IOException;
import java.util.List;

/**
 * Properties of managed instance's Start/Stop schedule.
 */
@Fluent
public final class StartStopManagedInstanceScheduleProperties
    implements JsonSerializable<StartStopManagedInstanceScheduleProperties> {
    /*
     * The description of the schedule.
     */
    private String description;

    /*
     * The time zone of the schedule.
     */
    private String timeZoneId;

    /*
     * Schedule list.
     */
    private List<ScheduleItem> scheduleList;

    /*
     * Next action to be executed (Start or Stop)
     */
    private String nextRunAction;

    /*
     * Timestamp when the next action will be executed in the corresponding schedule time zone.
     */
    private String nextExecutionTime;

    /**
     * Creates an instance of StartStopManagedInstanceScheduleProperties class.
     */
    public StartStopManagedInstanceScheduleProperties() {
    }

    /**
     * Get the description property: The description of the schedule.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the schedule.
     * 
     * @param description the description value to set.
     * @return the StartStopManagedInstanceScheduleProperties object itself.
     */
    public StartStopManagedInstanceScheduleProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the timeZoneId property: The time zone of the schedule.
     * 
     * @return the timeZoneId value.
     */
    public String timeZoneId() {
        return this.timeZoneId;
    }

    /**
     * Set the timeZoneId property: The time zone of the schedule.
     * 
     * @param timeZoneId the timeZoneId value to set.
     * @return the StartStopManagedInstanceScheduleProperties object itself.
     */
    public StartStopManagedInstanceScheduleProperties withTimeZoneId(String timeZoneId) {
        this.timeZoneId = timeZoneId;
        return this;
    }

    /**
     * Get the scheduleList property: Schedule list.
     * 
     * @return the scheduleList value.
     */
    public List<ScheduleItem> scheduleList() {
        return this.scheduleList;
    }

    /**
     * Set the scheduleList property: Schedule list.
     * 
     * @param scheduleList the scheduleList value to set.
     * @return the StartStopManagedInstanceScheduleProperties object itself.
     */
    public StartStopManagedInstanceScheduleProperties withScheduleList(List<ScheduleItem> scheduleList) {
        this.scheduleList = scheduleList;
        return this;
    }

    /**
     * Get the nextRunAction property: Next action to be executed (Start or Stop).
     * 
     * @return the nextRunAction value.
     */
    public String nextRunAction() {
        return this.nextRunAction;
    }

    /**
     * Get the nextExecutionTime property: Timestamp when the next action will be executed in the corresponding schedule
     * time zone.
     * 
     * @return the nextExecutionTime value.
     */
    public String nextExecutionTime() {
        return this.nextExecutionTime;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scheduleList() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property scheduleList in model StartStopManagedInstanceScheduleProperties"));
        } else {
            scheduleList().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StartStopManagedInstanceScheduleProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("scheduleList", this.scheduleList, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("timeZoneId", this.timeZoneId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StartStopManagedInstanceScheduleProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StartStopManagedInstanceScheduleProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StartStopManagedInstanceScheduleProperties.
     */
    public static StartStopManagedInstanceScheduleProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StartStopManagedInstanceScheduleProperties deserializedStartStopManagedInstanceScheduleProperties
                = new StartStopManagedInstanceScheduleProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scheduleList".equals(fieldName)) {
                    List<ScheduleItem> scheduleList = reader.readArray(reader1 -> ScheduleItem.fromJson(reader1));
                    deserializedStartStopManagedInstanceScheduleProperties.scheduleList = scheduleList;
                } else if ("description".equals(fieldName)) {
                    deserializedStartStopManagedInstanceScheduleProperties.description = reader.getString();
                } else if ("timeZoneId".equals(fieldName)) {
                    deserializedStartStopManagedInstanceScheduleProperties.timeZoneId = reader.getString();
                } else if ("nextRunAction".equals(fieldName)) {
                    deserializedStartStopManagedInstanceScheduleProperties.nextRunAction = reader.getString();
                } else if ("nextExecutionTime".equals(fieldName)) {
                    deserializedStartStopManagedInstanceScheduleProperties.nextExecutionTime = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStartStopManagedInstanceScheduleProperties;
        });
    }
}
