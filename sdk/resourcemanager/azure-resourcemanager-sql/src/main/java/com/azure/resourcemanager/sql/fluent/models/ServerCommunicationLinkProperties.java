// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of a server communication link.
 */
@Fluent
public final class ServerCommunicationLinkProperties implements JsonSerializable<ServerCommunicationLinkProperties> {
    /*
     * The state.
     */
    private String state;

    /*
     * The name of the partner server.
     */
    private String partnerServer;

    /**
     * Creates an instance of ServerCommunicationLinkProperties class.
     */
    public ServerCommunicationLinkProperties() {
    }

    /**
     * Get the state property: The state.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Get the partnerServer property: The name of the partner server.
     * 
     * @return the partnerServer value.
     */
    public String partnerServer() {
        return this.partnerServer;
    }

    /**
     * Set the partnerServer property: The name of the partner server.
     * 
     * @param partnerServer the partnerServer value to set.
     * @return the ServerCommunicationLinkProperties object itself.
     */
    public ServerCommunicationLinkProperties withPartnerServer(String partnerServer) {
        this.partnerServer = partnerServer;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (partnerServer() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property partnerServer in model ServerCommunicationLinkProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ServerCommunicationLinkProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("partnerServer", this.partnerServer);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerCommunicationLinkProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerCommunicationLinkProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServerCommunicationLinkProperties.
     */
    public static ServerCommunicationLinkProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerCommunicationLinkProperties deserializedServerCommunicationLinkProperties
                = new ServerCommunicationLinkProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("partnerServer".equals(fieldName)) {
                    deserializedServerCommunicationLinkProperties.partnerServer = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedServerCommunicationLinkProperties.state = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerCommunicationLinkProperties;
        });
    }
}
