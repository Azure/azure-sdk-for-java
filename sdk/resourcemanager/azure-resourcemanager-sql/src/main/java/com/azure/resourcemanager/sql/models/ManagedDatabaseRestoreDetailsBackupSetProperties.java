// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The managed database's restore details backup set properties.
 */
@Immutable
public final class ManagedDatabaseRestoreDetailsBackupSetProperties
    implements JsonSerializable<ManagedDatabaseRestoreDetailsBackupSetProperties> {
    /*
     * Backup set status.
     */
    private String status;

    /*
     * First stripe name.
     */
    private String firstStripeName;

    /*
     * Number of stripes.
     */
    private Integer numberOfStripes;

    /*
     * Backup size.
     */
    private Integer backupSizeMB;

    /*
     * Last restored file time.
     */
    private OffsetDateTime restoreStartedTimestampUtc;

    /*
     * Last restored file time.
     */
    private OffsetDateTime restoreFinishedTimestampUtc;

    /**
     * Creates an instance of ManagedDatabaseRestoreDetailsBackupSetProperties class.
     */
    public ManagedDatabaseRestoreDetailsBackupSetProperties() {
    }

    /**
     * Get the status property: Backup set status.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the firstStripeName property: First stripe name.
     * 
     * @return the firstStripeName value.
     */
    public String firstStripeName() {
        return this.firstStripeName;
    }

    /**
     * Get the numberOfStripes property: Number of stripes.
     * 
     * @return the numberOfStripes value.
     */
    public Integer numberOfStripes() {
        return this.numberOfStripes;
    }

    /**
     * Get the backupSizeMB property: Backup size.
     * 
     * @return the backupSizeMB value.
     */
    public Integer backupSizeMB() {
        return this.backupSizeMB;
    }

    /**
     * Get the restoreStartedTimestampUtc property: Last restored file time.
     * 
     * @return the restoreStartedTimestampUtc value.
     */
    public OffsetDateTime restoreStartedTimestampUtc() {
        return this.restoreStartedTimestampUtc;
    }

    /**
     * Get the restoreFinishedTimestampUtc property: Last restored file time.
     * 
     * @return the restoreFinishedTimestampUtc value.
     */
    public OffsetDateTime restoreFinishedTimestampUtc() {
        return this.restoreFinishedTimestampUtc;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedDatabaseRestoreDetailsBackupSetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedDatabaseRestoreDetailsBackupSetProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedDatabaseRestoreDetailsBackupSetProperties.
     */
    public static ManagedDatabaseRestoreDetailsBackupSetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedDatabaseRestoreDetailsBackupSetProperties deserializedManagedDatabaseRestoreDetailsBackupSetProperties
                = new ManagedDatabaseRestoreDetailsBackupSetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedManagedDatabaseRestoreDetailsBackupSetProperties.status = reader.getString();
                } else if ("firstStripeName".equals(fieldName)) {
                    deserializedManagedDatabaseRestoreDetailsBackupSetProperties.firstStripeName = reader.getString();
                } else if ("numberOfStripes".equals(fieldName)) {
                    deserializedManagedDatabaseRestoreDetailsBackupSetProperties.numberOfStripes
                        = reader.getNullable(JsonReader::getInt);
                } else if ("backupSizeMB".equals(fieldName)) {
                    deserializedManagedDatabaseRestoreDetailsBackupSetProperties.backupSizeMB
                        = reader.getNullable(JsonReader::getInt);
                } else if ("restoreStartedTimestampUtc".equals(fieldName)) {
                    deserializedManagedDatabaseRestoreDetailsBackupSetProperties.restoreStartedTimestampUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("restoreFinishedTimestampUtc".equals(fieldName)) {
                    deserializedManagedDatabaseRestoreDetailsBackupSetProperties.restoreFinishedTimestampUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedDatabaseRestoreDetailsBackupSetProperties;
        });
    }
}
