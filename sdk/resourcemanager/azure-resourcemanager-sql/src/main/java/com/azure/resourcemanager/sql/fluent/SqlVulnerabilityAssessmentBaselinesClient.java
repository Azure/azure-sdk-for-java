// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.fluent.models.DatabaseSqlVulnerabilityAssessmentBaselineSetInner;
import com.azure.resourcemanager.sql.models.BaselineName;
import com.azure.resourcemanager.sql.models.VulnerabilityAssessmentName;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * SqlVulnerabilityAssessmentBaselinesClient.
 */
public interface SqlVulnerabilityAssessmentBaselinesClient {
    /**
     * Gets a list of database's sql vulnerability assessment rule baselines.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of database's sql vulnerability assessment rule baselines as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<DatabaseSqlVulnerabilityAssessmentBaselineSetInner> listBySqlVulnerabilityAssessmentAsync(
        String resourceGroupName, String serverName, VulnerabilityAssessmentName vulnerabilityAssessmentName);

    /**
     * Gets a list of database's sql vulnerability assessment rule baselines.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of database's sql vulnerability assessment rule baselines as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DatabaseSqlVulnerabilityAssessmentBaselineSetInner> listBySqlVulnerabilityAssessment(
        String resourceGroupName, String serverName, VulnerabilityAssessmentName vulnerabilityAssessmentName);

    /**
     * Gets a list of database's sql vulnerability assessment rule baselines.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of database's sql vulnerability assessment rule baselines as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DatabaseSqlVulnerabilityAssessmentBaselineSetInner> listBySqlVulnerabilityAssessment(
        String resourceGroupName, String serverName, VulnerabilityAssessmentName vulnerabilityAssessmentName,
        Context context);

    /**
     * Gets a list of database's sql vulnerability assessment rule baselines.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of database's sql vulnerability assessment rule baselines along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<DatabaseSqlVulnerabilityAssessmentBaselineSetInner>> getWithResponseAsync(String resourceGroupName,
        String serverName, VulnerabilityAssessmentName vulnerabilityAssessmentName, BaselineName baselineName);

    /**
     * Gets a list of database's sql vulnerability assessment rule baselines.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of database's sql vulnerability assessment rule baselines on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<DatabaseSqlVulnerabilityAssessmentBaselineSetInner> getAsync(String resourceGroupName, String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName, BaselineName baselineName);

    /**
     * Gets a list of database's sql vulnerability assessment rule baselines.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of database's sql vulnerability assessment rule baselines along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DatabaseSqlVulnerabilityAssessmentBaselineSetInner> getWithResponse(String resourceGroupName,
        String serverName, VulnerabilityAssessmentName vulnerabilityAssessmentName, BaselineName baselineName,
        Context context);

    /**
     * Gets a list of database's sql vulnerability assessment rule baselines.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of database's sql vulnerability assessment rule baselines.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DatabaseSqlVulnerabilityAssessmentBaselineSetInner get(String resourceGroupName, String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName, BaselineName baselineName);
}
