// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * Represents the properties of an elastic pool database activity.
 */
@Immutable
public final class ElasticPoolDatabaseActivityProperties
    implements JsonSerializable<ElasticPoolDatabaseActivityProperties> {
    /*
     * The database name.
     */
    private String databaseName;

    /*
     * The time the operation finished (ISO8601 format).
     */
    private OffsetDateTime endTime;

    /*
     * The error code if available.
     */
    private Integer errorCode;

    /*
     * The error message if available.
     */
    private String errorMessage;

    /*
     * The error severity if available.
     */
    private Integer errorSeverity;

    /*
     * The operation name.
     */
    private String operation;

    /*
     * The unique operation ID.
     */
    private UUID operationId;

    /*
     * The percentage complete if available.
     */
    private Integer percentComplete;

    /*
     * The name for the elastic pool the database is moving into if available.
     */
    private String requestedElasticPoolName;

    /*
     * The name of the current elastic pool the database is in if available.
     */
    private String currentElasticPoolName;

    /*
     * The name of the current service objective if available.
     */
    private String currentServiceObjective;

    /*
     * The name of the requested service objective if available.
     */
    private String requestedServiceObjective;

    /*
     * The name of the server the elastic pool is in.
     */
    private String serverName;

    /*
     * The time the operation started (ISO8601 format).
     */
    private OffsetDateTime startTime;

    /*
     * The current state of the operation.
     */
    private String state;

    /**
     * Creates an instance of ElasticPoolDatabaseActivityProperties class.
     */
    public ElasticPoolDatabaseActivityProperties() {
    }

    /**
     * Get the databaseName property: The database name.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Get the endTime property: The time the operation finished (ISO8601 format).
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the errorCode property: The error code if available.
     * 
     * @return the errorCode value.
     */
    public Integer errorCode() {
        return this.errorCode;
    }

    /**
     * Get the errorMessage property: The error message if available.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the errorSeverity property: The error severity if available.
     * 
     * @return the errorSeverity value.
     */
    public Integer errorSeverity() {
        return this.errorSeverity;
    }

    /**
     * Get the operation property: The operation name.
     * 
     * @return the operation value.
     */
    public String operation() {
        return this.operation;
    }

    /**
     * Get the operationId property: The unique operation ID.
     * 
     * @return the operationId value.
     */
    public UUID operationId() {
        return this.operationId;
    }

    /**
     * Get the percentComplete property: The percentage complete if available.
     * 
     * @return the percentComplete value.
     */
    public Integer percentComplete() {
        return this.percentComplete;
    }

    /**
     * Get the requestedElasticPoolName property: The name for the elastic pool the database is moving into if
     * available.
     * 
     * @return the requestedElasticPoolName value.
     */
    public String requestedElasticPoolName() {
        return this.requestedElasticPoolName;
    }

    /**
     * Get the currentElasticPoolName property: The name of the current elastic pool the database is in if available.
     * 
     * @return the currentElasticPoolName value.
     */
    public String currentElasticPoolName() {
        return this.currentElasticPoolName;
    }

    /**
     * Get the currentServiceObjective property: The name of the current service objective if available.
     * 
     * @return the currentServiceObjective value.
     */
    public String currentServiceObjective() {
        return this.currentServiceObjective;
    }

    /**
     * Get the requestedServiceObjective property: The name of the requested service objective if available.
     * 
     * @return the requestedServiceObjective value.
     */
    public String requestedServiceObjective() {
        return this.requestedServiceObjective;
    }

    /**
     * Get the serverName property: The name of the server the elastic pool is in.
     * 
     * @return the serverName value.
     */
    public String serverName() {
        return this.serverName;
    }

    /**
     * Get the startTime property: The time the operation started (ISO8601 format).
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the state property: The current state of the operation.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ElasticPoolDatabaseActivityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ElasticPoolDatabaseActivityProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ElasticPoolDatabaseActivityProperties.
     */
    public static ElasticPoolDatabaseActivityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ElasticPoolDatabaseActivityProperties deserializedElasticPoolDatabaseActivityProperties
                = new ElasticPoolDatabaseActivityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("databaseName".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityProperties.databaseName = reader.getString();
                } else if ("endTime".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityProperties.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("errorCode".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityProperties.errorCode
                        = reader.getNullable(JsonReader::getInt);
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityProperties.errorMessage = reader.getString();
                } else if ("errorSeverity".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityProperties.errorSeverity
                        = reader.getNullable(JsonReader::getInt);
                } else if ("operation".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityProperties.operation = reader.getString();
                } else if ("operationId".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityProperties.operationId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("percentComplete".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityProperties.percentComplete
                        = reader.getNullable(JsonReader::getInt);
                } else if ("requestedElasticPoolName".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityProperties.requestedElasticPoolName = reader.getString();
                } else if ("currentElasticPoolName".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityProperties.currentElasticPoolName = reader.getString();
                } else if ("currentServiceObjective".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityProperties.currentServiceObjective = reader.getString();
                } else if ("requestedServiceObjective".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityProperties.requestedServiceObjective = reader.getString();
                } else if ("serverName".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityProperties.serverName = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("state".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityProperties.state = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedElasticPoolDatabaseActivityProperties;
        });
    }
}
