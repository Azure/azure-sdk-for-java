// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * Database specific information.
 */
@Fluent
public final class DistributedAvailabilityGroupDatabase
    implements JsonSerializable<DistributedAvailabilityGroupDatabase> {
    /*
     * The name of the database in link
     */
    private String databaseName;

    /*
     * Managed instance replica id
     */
    private UUID instanceReplicaId;

    /*
     * SQL server replica id
     */
    private UUID partnerReplicaId;

    /*
     * Current link state
     */
    private String replicaState;

    /*
     * Seeding progress
     */
    private String seedingProgress;

    /*
     * Link health state
     */
    private ReplicaSynchronizationHealth synchronizationHealth;

    /*
     * Link connected state
     */
    private ReplicaConnectedState connectedState;

    /*
     * Last received LSN
     */
    private String lastReceivedLsn;

    /*
     * Last received LSN time
     */
    private OffsetDateTime lastReceivedTime;

    /*
     * Last sent LSN
     */
    private String lastSentLsn;

    /*
     * Last sent LSN time
     */
    private OffsetDateTime lastSentTime;

    /*
     * Last commit LSN
     */
    private String lastCommitLsn;

    /*
     * Last commit LSN time
     */
    private OffsetDateTime lastCommitTime;

    /*
     * Last hardened LSN
     */
    private String lastHardenedLsn;

    /*
     * Last hardened LSN time
     */
    private OffsetDateTime lastHardenedTime;

    /*
     * Last backup LSN
     */
    private String lastBackupLsn;

    /*
     * Last backup LSN time
     */
    private OffsetDateTime lastBackupTime;

    /*
     * The most recent link connection error description
     */
    private String mostRecentLinkError;

    /*
     * SQL server certificate validity
     */
    private CertificateInfo partnerAuthCertValidity;

    /*
     * Replication lag when Managed Instance link side is primary
     */
    private Integer instanceSendReplicationLagSeconds;

    /*
     * Redo lag when Managed Instance link side is primary
     */
    private Integer instanceRedoReplicationLagSeconds;

    /**
     * Creates an instance of DistributedAvailabilityGroupDatabase class.
     */
    public DistributedAvailabilityGroupDatabase() {
    }

    /**
     * Get the databaseName property: The name of the database in link.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: The name of the database in link.
     * 
     * @param databaseName the databaseName value to set.
     * @return the DistributedAvailabilityGroupDatabase object itself.
     */
    public DistributedAvailabilityGroupDatabase withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the instanceReplicaId property: Managed instance replica id.
     * 
     * @return the instanceReplicaId value.
     */
    public UUID instanceReplicaId() {
        return this.instanceReplicaId;
    }

    /**
     * Get the partnerReplicaId property: SQL server replica id.
     * 
     * @return the partnerReplicaId value.
     */
    public UUID partnerReplicaId() {
        return this.partnerReplicaId;
    }

    /**
     * Get the replicaState property: Current link state.
     * 
     * @return the replicaState value.
     */
    public String replicaState() {
        return this.replicaState;
    }

    /**
     * Get the seedingProgress property: Seeding progress.
     * 
     * @return the seedingProgress value.
     */
    public String seedingProgress() {
        return this.seedingProgress;
    }

    /**
     * Get the synchronizationHealth property: Link health state.
     * 
     * @return the synchronizationHealth value.
     */
    public ReplicaSynchronizationHealth synchronizationHealth() {
        return this.synchronizationHealth;
    }

    /**
     * Get the connectedState property: Link connected state.
     * 
     * @return the connectedState value.
     */
    public ReplicaConnectedState connectedState() {
        return this.connectedState;
    }

    /**
     * Get the lastReceivedLsn property: Last received LSN.
     * 
     * @return the lastReceivedLsn value.
     */
    public String lastReceivedLsn() {
        return this.lastReceivedLsn;
    }

    /**
     * Get the lastReceivedTime property: Last received LSN time.
     * 
     * @return the lastReceivedTime value.
     */
    public OffsetDateTime lastReceivedTime() {
        return this.lastReceivedTime;
    }

    /**
     * Get the lastSentLsn property: Last sent LSN.
     * 
     * @return the lastSentLsn value.
     */
    public String lastSentLsn() {
        return this.lastSentLsn;
    }

    /**
     * Get the lastSentTime property: Last sent LSN time.
     * 
     * @return the lastSentTime value.
     */
    public OffsetDateTime lastSentTime() {
        return this.lastSentTime;
    }

    /**
     * Get the lastCommitLsn property: Last commit LSN.
     * 
     * @return the lastCommitLsn value.
     */
    public String lastCommitLsn() {
        return this.lastCommitLsn;
    }

    /**
     * Get the lastCommitTime property: Last commit LSN time.
     * 
     * @return the lastCommitTime value.
     */
    public OffsetDateTime lastCommitTime() {
        return this.lastCommitTime;
    }

    /**
     * Get the lastHardenedLsn property: Last hardened LSN.
     * 
     * @return the lastHardenedLsn value.
     */
    public String lastHardenedLsn() {
        return this.lastHardenedLsn;
    }

    /**
     * Get the lastHardenedTime property: Last hardened LSN time.
     * 
     * @return the lastHardenedTime value.
     */
    public OffsetDateTime lastHardenedTime() {
        return this.lastHardenedTime;
    }

    /**
     * Get the lastBackupLsn property: Last backup LSN.
     * 
     * @return the lastBackupLsn value.
     */
    public String lastBackupLsn() {
        return this.lastBackupLsn;
    }

    /**
     * Get the lastBackupTime property: Last backup LSN time.
     * 
     * @return the lastBackupTime value.
     */
    public OffsetDateTime lastBackupTime() {
        return this.lastBackupTime;
    }

    /**
     * Get the mostRecentLinkError property: The most recent link connection error description.
     * 
     * @return the mostRecentLinkError value.
     */
    public String mostRecentLinkError() {
        return this.mostRecentLinkError;
    }

    /**
     * Get the partnerAuthCertValidity property: SQL server certificate validity.
     * 
     * @return the partnerAuthCertValidity value.
     */
    public CertificateInfo partnerAuthCertValidity() {
        return this.partnerAuthCertValidity;
    }

    /**
     * Get the instanceSendReplicationLagSeconds property: Replication lag when Managed Instance link side is primary.
     * 
     * @return the instanceSendReplicationLagSeconds value.
     */
    public Integer instanceSendReplicationLagSeconds() {
        return this.instanceSendReplicationLagSeconds;
    }

    /**
     * Get the instanceRedoReplicationLagSeconds property: Redo lag when Managed Instance link side is primary.
     * 
     * @return the instanceRedoReplicationLagSeconds value.
     */
    public Integer instanceRedoReplicationLagSeconds() {
        return this.instanceRedoReplicationLagSeconds;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (partnerAuthCertValidity() != null) {
            partnerAuthCertValidity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("databaseName", this.databaseName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DistributedAvailabilityGroupDatabase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DistributedAvailabilityGroupDatabase if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DistributedAvailabilityGroupDatabase.
     */
    public static DistributedAvailabilityGroupDatabase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DistributedAvailabilityGroupDatabase deserializedDistributedAvailabilityGroupDatabase
                = new DistributedAvailabilityGroupDatabase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("databaseName".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.databaseName = reader.getString();
                } else if ("instanceReplicaId".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.instanceReplicaId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("partnerReplicaId".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.partnerReplicaId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("replicaState".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.replicaState = reader.getString();
                } else if ("seedingProgress".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.seedingProgress = reader.getString();
                } else if ("synchronizationHealth".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.synchronizationHealth
                        = ReplicaSynchronizationHealth.fromString(reader.getString());
                } else if ("connectedState".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.connectedState
                        = ReplicaConnectedState.fromString(reader.getString());
                } else if ("lastReceivedLsn".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.lastReceivedLsn = reader.getString();
                } else if ("lastReceivedTime".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.lastReceivedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSentLsn".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.lastSentLsn = reader.getString();
                } else if ("lastSentTime".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.lastSentTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastCommitLsn".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.lastCommitLsn = reader.getString();
                } else if ("lastCommitTime".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.lastCommitTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastHardenedLsn".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.lastHardenedLsn = reader.getString();
                } else if ("lastHardenedTime".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.lastHardenedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastBackupLsn".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.lastBackupLsn = reader.getString();
                } else if ("lastBackupTime".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.lastBackupTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("mostRecentLinkError".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.mostRecentLinkError = reader.getString();
                } else if ("partnerAuthCertValidity".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.partnerAuthCertValidity
                        = CertificateInfo.fromJson(reader);
                } else if ("instanceSendReplicationLagSeconds".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.instanceSendReplicationLagSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else if ("instanceRedoReplicationLagSeconds".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupDatabase.instanceRedoReplicationLagSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDistributedAvailabilityGroupDatabase;
        });
    }
}
