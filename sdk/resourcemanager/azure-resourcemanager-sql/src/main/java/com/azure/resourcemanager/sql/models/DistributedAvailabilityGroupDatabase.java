// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * Database specific information.
 */
@Fluent
public final class DistributedAvailabilityGroupDatabase {
    /*
     * The name of the database in link
     */
    @JsonProperty(value = "databaseName")
    private String databaseName;

    /*
     * Managed instance replica id
     */
    @JsonProperty(value = "instanceReplicaId", access = JsonProperty.Access.WRITE_ONLY)
    private UUID instanceReplicaId;

    /*
     * SQL server replica id
     */
    @JsonProperty(value = "partnerReplicaId", access = JsonProperty.Access.WRITE_ONLY)
    private UUID partnerReplicaId;

    /*
     * Current link state
     */
    @JsonProperty(value = "replicaState", access = JsonProperty.Access.WRITE_ONLY)
    private String replicaState;

    /*
     * Seeding progress
     */
    @JsonProperty(value = "seedingProgress", access = JsonProperty.Access.WRITE_ONLY)
    private String seedingProgress;

    /*
     * Link health state
     */
    @JsonProperty(value = "synchronizationHealth", access = JsonProperty.Access.WRITE_ONLY)
    private ReplicaSynchronizationHealth synchronizationHealth;

    /*
     * Link connected state
     */
    @JsonProperty(value = "connectedState", access = JsonProperty.Access.WRITE_ONLY)
    private ReplicaConnectedState connectedState;

    /*
     * Last received LSN
     */
    @JsonProperty(value = "lastReceivedLsn", access = JsonProperty.Access.WRITE_ONLY)
    private String lastReceivedLsn;

    /*
     * Last received LSN time
     */
    @JsonProperty(value = "lastReceivedTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastReceivedTime;

    /*
     * Last sent LSN
     */
    @JsonProperty(value = "lastSentLsn", access = JsonProperty.Access.WRITE_ONLY)
    private String lastSentLsn;

    /*
     * Last sent LSN time
     */
    @JsonProperty(value = "lastSentTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastSentTime;

    /*
     * Last commit LSN
     */
    @JsonProperty(value = "lastCommitLsn", access = JsonProperty.Access.WRITE_ONLY)
    private String lastCommitLsn;

    /*
     * Last commit LSN time
     */
    @JsonProperty(value = "lastCommitTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastCommitTime;

    /*
     * Last hardened LSN
     */
    @JsonProperty(value = "lastHardenedLsn", access = JsonProperty.Access.WRITE_ONLY)
    private String lastHardenedLsn;

    /*
     * Last hardened LSN time
     */
    @JsonProperty(value = "lastHardenedTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastHardenedTime;

    /*
     * Last backup LSN
     */
    @JsonProperty(value = "lastBackupLsn", access = JsonProperty.Access.WRITE_ONLY)
    private String lastBackupLsn;

    /*
     * Last backup LSN time
     */
    @JsonProperty(value = "lastBackupTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastBackupTime;

    /*
     * The most recent link connection error description
     */
    @JsonProperty(value = "mostRecentLinkError", access = JsonProperty.Access.WRITE_ONLY)
    private String mostRecentLinkError;

    /*
     * SQL server certificate validity
     */
    @JsonProperty(value = "partnerAuthCertValidity", access = JsonProperty.Access.WRITE_ONLY)
    private CertificateInfo partnerAuthCertValidity;

    /*
     * Replication lag when Managed Instance link side is primary
     */
    @JsonProperty(value = "instanceSendReplicationLagSeconds", access = JsonProperty.Access.WRITE_ONLY)
    private Integer instanceSendReplicationLagSeconds;

    /*
     * Redo lag when Managed Instance link side is primary
     */
    @JsonProperty(value = "instanceRedoReplicationLagSeconds", access = JsonProperty.Access.WRITE_ONLY)
    private Integer instanceRedoReplicationLagSeconds;

    /**
     * Creates an instance of DistributedAvailabilityGroupDatabase class.
     */
    public DistributedAvailabilityGroupDatabase() {
    }

    /**
     * Get the databaseName property: The name of the database in link.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: The name of the database in link.
     * 
     * @param databaseName the databaseName value to set.
     * @return the DistributedAvailabilityGroupDatabase object itself.
     */
    public DistributedAvailabilityGroupDatabase withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the instanceReplicaId property: Managed instance replica id.
     * 
     * @return the instanceReplicaId value.
     */
    public UUID instanceReplicaId() {
        return this.instanceReplicaId;
    }

    /**
     * Get the partnerReplicaId property: SQL server replica id.
     * 
     * @return the partnerReplicaId value.
     */
    public UUID partnerReplicaId() {
        return this.partnerReplicaId;
    }

    /**
     * Get the replicaState property: Current link state.
     * 
     * @return the replicaState value.
     */
    public String replicaState() {
        return this.replicaState;
    }

    /**
     * Get the seedingProgress property: Seeding progress.
     * 
     * @return the seedingProgress value.
     */
    public String seedingProgress() {
        return this.seedingProgress;
    }

    /**
     * Get the synchronizationHealth property: Link health state.
     * 
     * @return the synchronizationHealth value.
     */
    public ReplicaSynchronizationHealth synchronizationHealth() {
        return this.synchronizationHealth;
    }

    /**
     * Get the connectedState property: Link connected state.
     * 
     * @return the connectedState value.
     */
    public ReplicaConnectedState connectedState() {
        return this.connectedState;
    }

    /**
     * Get the lastReceivedLsn property: Last received LSN.
     * 
     * @return the lastReceivedLsn value.
     */
    public String lastReceivedLsn() {
        return this.lastReceivedLsn;
    }

    /**
     * Get the lastReceivedTime property: Last received LSN time.
     * 
     * @return the lastReceivedTime value.
     */
    public OffsetDateTime lastReceivedTime() {
        return this.lastReceivedTime;
    }

    /**
     * Get the lastSentLsn property: Last sent LSN.
     * 
     * @return the lastSentLsn value.
     */
    public String lastSentLsn() {
        return this.lastSentLsn;
    }

    /**
     * Get the lastSentTime property: Last sent LSN time.
     * 
     * @return the lastSentTime value.
     */
    public OffsetDateTime lastSentTime() {
        return this.lastSentTime;
    }

    /**
     * Get the lastCommitLsn property: Last commit LSN.
     * 
     * @return the lastCommitLsn value.
     */
    public String lastCommitLsn() {
        return this.lastCommitLsn;
    }

    /**
     * Get the lastCommitTime property: Last commit LSN time.
     * 
     * @return the lastCommitTime value.
     */
    public OffsetDateTime lastCommitTime() {
        return this.lastCommitTime;
    }

    /**
     * Get the lastHardenedLsn property: Last hardened LSN.
     * 
     * @return the lastHardenedLsn value.
     */
    public String lastHardenedLsn() {
        return this.lastHardenedLsn;
    }

    /**
     * Get the lastHardenedTime property: Last hardened LSN time.
     * 
     * @return the lastHardenedTime value.
     */
    public OffsetDateTime lastHardenedTime() {
        return this.lastHardenedTime;
    }

    /**
     * Get the lastBackupLsn property: Last backup LSN.
     * 
     * @return the lastBackupLsn value.
     */
    public String lastBackupLsn() {
        return this.lastBackupLsn;
    }

    /**
     * Get the lastBackupTime property: Last backup LSN time.
     * 
     * @return the lastBackupTime value.
     */
    public OffsetDateTime lastBackupTime() {
        return this.lastBackupTime;
    }

    /**
     * Get the mostRecentLinkError property: The most recent link connection error description.
     * 
     * @return the mostRecentLinkError value.
     */
    public String mostRecentLinkError() {
        return this.mostRecentLinkError;
    }

    /**
     * Get the partnerAuthCertValidity property: SQL server certificate validity.
     * 
     * @return the partnerAuthCertValidity value.
     */
    public CertificateInfo partnerAuthCertValidity() {
        return this.partnerAuthCertValidity;
    }

    /**
     * Get the instanceSendReplicationLagSeconds property: Replication lag when Managed Instance link side is primary.
     * 
     * @return the instanceSendReplicationLagSeconds value.
     */
    public Integer instanceSendReplicationLagSeconds() {
        return this.instanceSendReplicationLagSeconds;
    }

    /**
     * Get the instanceRedoReplicationLagSeconds property: Redo lag when Managed Instance link side is primary.
     * 
     * @return the instanceRedoReplicationLagSeconds value.
     */
    public Integer instanceRedoReplicationLagSeconds() {
        return this.instanceRedoReplicationLagSeconds;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (partnerAuthCertValidity() != null) {
            partnerAuthCertValidity().validate();
        }
    }
}
