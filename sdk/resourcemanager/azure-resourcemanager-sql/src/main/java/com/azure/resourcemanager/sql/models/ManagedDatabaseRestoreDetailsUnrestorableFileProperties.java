// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The managed database's restore details unrestorable file properties.
 */
@Immutable
public final class ManagedDatabaseRestoreDetailsUnrestorableFileProperties
    implements JsonSerializable<ManagedDatabaseRestoreDetailsUnrestorableFileProperties> {
    /*
     * File name.
     */
    private String name;

    /**
     * Creates an instance of ManagedDatabaseRestoreDetailsUnrestorableFileProperties class.
     */
    public ManagedDatabaseRestoreDetailsUnrestorableFileProperties() {
    }

    /**
     * Get the name property: File name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedDatabaseRestoreDetailsUnrestorableFileProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedDatabaseRestoreDetailsUnrestorableFileProperties if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedDatabaseRestoreDetailsUnrestorableFileProperties.
     */
    public static ManagedDatabaseRestoreDetailsUnrestorableFileProperties fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedDatabaseRestoreDetailsUnrestorableFileProperties deserializedManagedDatabaseRestoreDetailsUnrestorableFileProperties
                = new ManagedDatabaseRestoreDetailsUnrestorableFileProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedManagedDatabaseRestoreDetailsUnrestorableFileProperties.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedDatabaseRestoreDetailsUnrestorableFileProperties;
        });
    }
}
