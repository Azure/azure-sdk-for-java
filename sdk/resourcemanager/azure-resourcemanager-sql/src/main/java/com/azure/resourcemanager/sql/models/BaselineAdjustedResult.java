// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * SQL Vulnerability Assessment baseline adjusted results.
 */
@Immutable
public final class BaselineAdjustedResult implements JsonSerializable<BaselineAdjustedResult> {
    /*
     * SQL Vulnerability Assessment baseline details
     */
    private Baseline baseline;

    /*
     * SQL Vulnerability Assessment baseline status
     */
    private RuleStatus status;

    /*
     * SQL Vulnerability Assessment results that are not in baseline
     */
    private List<List<String>> resultsNotInBaseline;

    /*
     * SQL Vulnerability Assessment results that are in baseline.
     */
    private List<List<String>> resultsOnlyInBaseline;

    /**
     * Creates an instance of BaselineAdjustedResult class.
     */
    public BaselineAdjustedResult() {
    }

    /**
     * Get the baseline property: SQL Vulnerability Assessment baseline details.
     * 
     * @return the baseline value.
     */
    public Baseline baseline() {
        return this.baseline;
    }

    /**
     * Get the status property: SQL Vulnerability Assessment baseline status.
     * 
     * @return the status value.
     */
    public RuleStatus status() {
        return this.status;
    }

    /**
     * Get the resultsNotInBaseline property: SQL Vulnerability Assessment results that are not in baseline.
     * 
     * @return the resultsNotInBaseline value.
     */
    public List<List<String>> resultsNotInBaseline() {
        return this.resultsNotInBaseline;
    }

    /**
     * Get the resultsOnlyInBaseline property: SQL Vulnerability Assessment results that are in baseline.
     * 
     * @return the resultsOnlyInBaseline value.
     */
    public List<List<String>> resultsOnlyInBaseline() {
        return this.resultsOnlyInBaseline;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (baseline() != null) {
            baseline().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BaselineAdjustedResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BaselineAdjustedResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BaselineAdjustedResult.
     */
    public static BaselineAdjustedResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BaselineAdjustedResult deserializedBaselineAdjustedResult = new BaselineAdjustedResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("baseline".equals(fieldName)) {
                    deserializedBaselineAdjustedResult.baseline = Baseline.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedBaselineAdjustedResult.status = RuleStatus.fromString(reader.getString());
                } else if ("resultsNotInBaseline".equals(fieldName)) {
                    List<List<String>> resultsNotInBaseline
                        = reader.readArray(reader1 -> reader1.readArray(reader2 -> reader2.getString()));
                    deserializedBaselineAdjustedResult.resultsNotInBaseline = resultsNotInBaseline;
                } else if ("resultsOnlyInBaseline".equals(fieldName)) {
                    List<List<String>> resultsOnlyInBaseline
                        = reader.readArray(reader1 -> reader1.readArray(reader2 -> reader2.getString()));
                    deserializedBaselineAdjustedResult.resultsOnlyInBaseline = resultsOnlyInBaseline;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBaselineAdjustedResult;
        });
    }
}
