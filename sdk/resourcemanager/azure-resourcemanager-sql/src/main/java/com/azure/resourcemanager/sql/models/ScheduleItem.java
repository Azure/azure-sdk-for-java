// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schedule info describing when the server should be started or stopped.
 */
@Fluent
public final class ScheduleItem implements JsonSerializable<ScheduleItem> {
    /*
     * Start day.
     */
    private DayOfWeek startDay;

    /*
     * Start time.
     */
    private String startTime;

    /*
     * Stop day.
     */
    private DayOfWeek stopDay;

    /*
     * Stop time.
     */
    private String stopTime;

    /**
     * Creates an instance of ScheduleItem class.
     */
    public ScheduleItem() {
    }

    /**
     * Get the startDay property: Start day.
     * 
     * @return the startDay value.
     */
    public DayOfWeek startDay() {
        return this.startDay;
    }

    /**
     * Set the startDay property: Start day.
     * 
     * @param startDay the startDay value to set.
     * @return the ScheduleItem object itself.
     */
    public ScheduleItem withStartDay(DayOfWeek startDay) {
        this.startDay = startDay;
        return this;
    }

    /**
     * Get the startTime property: Start time.
     * 
     * @return the startTime value.
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Start time.
     * 
     * @param startTime the startTime value to set.
     * @return the ScheduleItem object itself.
     */
    public ScheduleItem withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the stopDay property: Stop day.
     * 
     * @return the stopDay value.
     */
    public DayOfWeek stopDay() {
        return this.stopDay;
    }

    /**
     * Set the stopDay property: Stop day.
     * 
     * @param stopDay the stopDay value to set.
     * @return the ScheduleItem object itself.
     */
    public ScheduleItem withStopDay(DayOfWeek stopDay) {
        this.stopDay = stopDay;
        return this;
    }

    /**
     * Get the stopTime property: Stop time.
     * 
     * @return the stopTime value.
     */
    public String stopTime() {
        return this.stopTime;
    }

    /**
     * Set the stopTime property: Stop time.
     * 
     * @param stopTime the stopTime value to set.
     * @return the ScheduleItem object itself.
     */
    public ScheduleItem withStopTime(String stopTime) {
        this.stopTime = stopTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (startDay() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property startDay in model ScheduleItem"));
        }
        if (startTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property startTime in model ScheduleItem"));
        }
        if (stopDay() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property stopDay in model ScheduleItem"));
        }
        if (stopTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property stopTime in model ScheduleItem"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ScheduleItem.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startDay", this.startDay == null ? null : this.startDay.toString());
        jsonWriter.writeStringField("startTime", this.startTime);
        jsonWriter.writeStringField("stopDay", this.stopDay == null ? null : this.stopDay.toString());
        jsonWriter.writeStringField("stopTime", this.stopTime);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScheduleItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScheduleItem if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ScheduleItem.
     */
    public static ScheduleItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScheduleItem deserializedScheduleItem = new ScheduleItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startDay".equals(fieldName)) {
                    deserializedScheduleItem.startDay = DayOfWeek.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedScheduleItem.startTime = reader.getString();
                } else if ("stopDay".equals(fieldName)) {
                    deserializedScheduleItem.stopDay = DayOfWeek.fromString(reader.getString());
                } else if ("stopTime".equals(fieldName)) {
                    deserializedScheduleItem.stopTime = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScheduleItem;
        });
    }
}
