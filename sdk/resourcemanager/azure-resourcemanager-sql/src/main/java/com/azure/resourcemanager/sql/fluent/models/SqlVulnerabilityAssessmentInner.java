// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.sql.models.SqlVulnerabilityAssessmentState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** A SQL Vulnerability Assessment. */
@Fluent
public final class SqlVulnerabilityAssessmentInner extends ProxyResource {
    /*
     * SystemData of SqlVulnerabilityAssessmentResource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * Resource properties.
     */
    @JsonProperty(value = "properties")
    private SqlVulnerabilityAssessmentPolicyProperties innerProperties;

    /** Creates an instance of SqlVulnerabilityAssessmentInner class. */
    public SqlVulnerabilityAssessmentInner() {
    }

    /**
     * Get the systemData property: SystemData of SqlVulnerabilityAssessmentResource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the innerProperties property: Resource properties.
     *
     * @return the innerProperties value.
     */
    private SqlVulnerabilityAssessmentPolicyProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the state property: Specifies the state of the SQL Vulnerability Assessment, whether it is enabled or
     * disabled or a state has not been applied yet on the specific database or server.
     *
     * @return the state value.
     */
    public SqlVulnerabilityAssessmentState state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Set the state property: Specifies the state of the SQL Vulnerability Assessment, whether it is enabled or
     * disabled or a state has not been applied yet on the specific database or server.
     *
     * @param state the state value to set.
     * @return the SqlVulnerabilityAssessmentInner object itself.
     */
    public SqlVulnerabilityAssessmentInner withState(SqlVulnerabilityAssessmentState state) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SqlVulnerabilityAssessmentPolicyProperties();
        }
        this.innerProperties().withState(state);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
