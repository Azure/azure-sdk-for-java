// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * SQL Vulnerability Assessment baseline Details.
 */
@Immutable
public final class Baseline implements JsonSerializable<Baseline> {
    /*
     * SQL Vulnerability Assessment baseline expected results
     */
    private List<List<String>> expectedResults;

    /*
     * SQL Vulnerability Assessment baseline update time (UTC)
     */
    private OffsetDateTime updatedTime;

    /**
     * Creates an instance of Baseline class.
     */
    public Baseline() {
    }

    /**
     * Get the expectedResults property: SQL Vulnerability Assessment baseline expected results.
     * 
     * @return the expectedResults value.
     */
    public List<List<String>> expectedResults() {
        return this.expectedResults;
    }

    /**
     * Get the updatedTime property: SQL Vulnerability Assessment baseline update time (UTC).
     * 
     * @return the updatedTime value.
     */
    public OffsetDateTime updatedTime() {
        return this.updatedTime;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Baseline from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Baseline if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Baseline.
     */
    public static Baseline fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Baseline deserializedBaseline = new Baseline();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("expectedResults".equals(fieldName)) {
                    List<List<String>> expectedResults
                        = reader.readArray(reader1 -> reader1.readArray(reader2 -> reader2.getString()));
                    deserializedBaseline.expectedResults = expectedResults;
                } else if ("updatedTime".equals(fieldName)) {
                    deserializedBaseline.updatedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBaseline;
        });
    }
}
