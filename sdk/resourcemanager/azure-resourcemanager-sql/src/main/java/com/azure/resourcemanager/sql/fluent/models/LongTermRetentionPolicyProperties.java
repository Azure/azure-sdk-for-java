// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sql.models.TimeBasedImmutability;
import com.azure.resourcemanager.sql.models.TimeBasedImmutabilityMode;
import java.io.IOException;

/**
 * Properties of a long term retention policy.
 */
@Fluent
public final class LongTermRetentionPolicyProperties implements JsonSerializable<LongTermRetentionPolicyProperties> {
    /*
     * The setting for whether to enable time-based immutability for future backups. When set, future backups will have
     * TimeBasedImmutability enabled.
     */
    private TimeBasedImmutability timeBasedImmutability;

    /*
     * The setting for time-based immutability mode for future backup (Value can be either Locked or UnLocked. Only
     * effective if TimeBasedImmutability is enabled). Caution: Immutability of LTR backup cannot be removed if
     * TimeBasedImmutabilityMode is Locked.
     */
    private TimeBasedImmutabilityMode timeBasedImmutabilityMode;

    /*
     * The weekly retention policy for an LTR backup in an ISO 8601 format.
     */
    private String weeklyRetention;

    /*
     * The monthly retention policy for an LTR backup in an ISO 8601 format.
     */
    private String monthlyRetention;

    /*
     * The yearly retention policy for an LTR backup in an ISO 8601 format.
     */
    private String yearlyRetention;

    /*
     * The week of year to take the yearly backup in an ISO 8601 format.
     */
    private Integer weekOfYear;

    /**
     * Creates an instance of LongTermRetentionPolicyProperties class.
     */
    public LongTermRetentionPolicyProperties() {
    }

    /**
     * Get the timeBasedImmutability property: The setting for whether to enable time-based immutability for future
     * backups. When set, future backups will have TimeBasedImmutability enabled.
     * 
     * @return the timeBasedImmutability value.
     */
    public TimeBasedImmutability timeBasedImmutability() {
        return this.timeBasedImmutability;
    }

    /**
     * Set the timeBasedImmutability property: The setting for whether to enable time-based immutability for future
     * backups. When set, future backups will have TimeBasedImmutability enabled.
     * 
     * @param timeBasedImmutability the timeBasedImmutability value to set.
     * @return the LongTermRetentionPolicyProperties object itself.
     */
    public LongTermRetentionPolicyProperties withTimeBasedImmutability(TimeBasedImmutability timeBasedImmutability) {
        this.timeBasedImmutability = timeBasedImmutability;
        return this;
    }

    /**
     * Get the timeBasedImmutabilityMode property: The setting for time-based immutability mode for future backup (Value
     * can be either Locked or UnLocked. Only effective if TimeBasedImmutability is enabled). Caution: Immutability of
     * LTR backup cannot be removed if TimeBasedImmutabilityMode is Locked.
     * 
     * @return the timeBasedImmutabilityMode value.
     */
    public TimeBasedImmutabilityMode timeBasedImmutabilityMode() {
        return this.timeBasedImmutabilityMode;
    }

    /**
     * Set the timeBasedImmutabilityMode property: The setting for time-based immutability mode for future backup (Value
     * can be either Locked or UnLocked. Only effective if TimeBasedImmutability is enabled). Caution: Immutability of
     * LTR backup cannot be removed if TimeBasedImmutabilityMode is Locked.
     * 
     * @param timeBasedImmutabilityMode the timeBasedImmutabilityMode value to set.
     * @return the LongTermRetentionPolicyProperties object itself.
     */
    public LongTermRetentionPolicyProperties
        withTimeBasedImmutabilityMode(TimeBasedImmutabilityMode timeBasedImmutabilityMode) {
        this.timeBasedImmutabilityMode = timeBasedImmutabilityMode;
        return this;
    }

    /**
     * Get the weeklyRetention property: The weekly retention policy for an LTR backup in an ISO 8601 format.
     * 
     * @return the weeklyRetention value.
     */
    public String weeklyRetention() {
        return this.weeklyRetention;
    }

    /**
     * Set the weeklyRetention property: The weekly retention policy for an LTR backup in an ISO 8601 format.
     * 
     * @param weeklyRetention the weeklyRetention value to set.
     * @return the LongTermRetentionPolicyProperties object itself.
     */
    public LongTermRetentionPolicyProperties withWeeklyRetention(String weeklyRetention) {
        this.weeklyRetention = weeklyRetention;
        return this;
    }

    /**
     * Get the monthlyRetention property: The monthly retention policy for an LTR backup in an ISO 8601 format.
     * 
     * @return the monthlyRetention value.
     */
    public String monthlyRetention() {
        return this.monthlyRetention;
    }

    /**
     * Set the monthlyRetention property: The monthly retention policy for an LTR backup in an ISO 8601 format.
     * 
     * @param monthlyRetention the monthlyRetention value to set.
     * @return the LongTermRetentionPolicyProperties object itself.
     */
    public LongTermRetentionPolicyProperties withMonthlyRetention(String monthlyRetention) {
        this.monthlyRetention = monthlyRetention;
        return this;
    }

    /**
     * Get the yearlyRetention property: The yearly retention policy for an LTR backup in an ISO 8601 format.
     * 
     * @return the yearlyRetention value.
     */
    public String yearlyRetention() {
        return this.yearlyRetention;
    }

    /**
     * Set the yearlyRetention property: The yearly retention policy for an LTR backup in an ISO 8601 format.
     * 
     * @param yearlyRetention the yearlyRetention value to set.
     * @return the LongTermRetentionPolicyProperties object itself.
     */
    public LongTermRetentionPolicyProperties withYearlyRetention(String yearlyRetention) {
        this.yearlyRetention = yearlyRetention;
        return this;
    }

    /**
     * Get the weekOfYear property: The week of year to take the yearly backup in an ISO 8601 format.
     * 
     * @return the weekOfYear value.
     */
    public Integer weekOfYear() {
        return this.weekOfYear;
    }

    /**
     * Set the weekOfYear property: The week of year to take the yearly backup in an ISO 8601 format.
     * 
     * @param weekOfYear the weekOfYear value to set.
     * @return the LongTermRetentionPolicyProperties object itself.
     */
    public LongTermRetentionPolicyProperties withWeekOfYear(Integer weekOfYear) {
        this.weekOfYear = weekOfYear;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timeBasedImmutability",
            this.timeBasedImmutability == null ? null : this.timeBasedImmutability.toString());
        jsonWriter.writeStringField("timeBasedImmutabilityMode",
            this.timeBasedImmutabilityMode == null ? null : this.timeBasedImmutabilityMode.toString());
        jsonWriter.writeStringField("weeklyRetention", this.weeklyRetention);
        jsonWriter.writeStringField("monthlyRetention", this.monthlyRetention);
        jsonWriter.writeStringField("yearlyRetention", this.yearlyRetention);
        jsonWriter.writeNumberField("weekOfYear", this.weekOfYear);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LongTermRetentionPolicyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LongTermRetentionPolicyProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LongTermRetentionPolicyProperties.
     */
    public static LongTermRetentionPolicyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LongTermRetentionPolicyProperties deserializedLongTermRetentionPolicyProperties
                = new LongTermRetentionPolicyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timeBasedImmutability".equals(fieldName)) {
                    deserializedLongTermRetentionPolicyProperties.timeBasedImmutability
                        = TimeBasedImmutability.fromString(reader.getString());
                } else if ("timeBasedImmutabilityMode".equals(fieldName)) {
                    deserializedLongTermRetentionPolicyProperties.timeBasedImmutabilityMode
                        = TimeBasedImmutabilityMode.fromString(reader.getString());
                } else if ("weeklyRetention".equals(fieldName)) {
                    deserializedLongTermRetentionPolicyProperties.weeklyRetention = reader.getString();
                } else if ("monthlyRetention".equals(fieldName)) {
                    deserializedLongTermRetentionPolicyProperties.monthlyRetention = reader.getString();
                } else if ("yearlyRetention".equals(fieldName)) {
                    deserializedLongTermRetentionPolicyProperties.yearlyRetention = reader.getString();
                } else if ("weekOfYear".equals(fieldName)) {
                    deserializedLongTermRetentionPolicyProperties.weekOfYear = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLongTermRetentionPolicyProperties;
        });
    }
}
