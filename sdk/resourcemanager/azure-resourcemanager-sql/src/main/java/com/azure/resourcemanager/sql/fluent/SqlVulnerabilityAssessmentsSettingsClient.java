// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.fluent.models.SqlVulnerabilityAssessmentInner;
import com.azure.resourcemanager.sql.models.SqlVulnerabilityAssessmentName;
import com.azure.resourcemanager.sql.models.VulnerabilityAssessmentName;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SqlVulnerabilityAssessmentsSettingsClient.
 */
public interface SqlVulnerabilityAssessmentsSettingsClient {
    /**
     * Lists SQL Vulnerability Assessment policies associated with a server.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL Vulnerability Assessments as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<SqlVulnerabilityAssessmentInner> listByServerAsync(String resourceGroupName, String serverName);

    /**
     * Lists SQL Vulnerability Assessment policies associated with a server.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL Vulnerability Assessments as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlVulnerabilityAssessmentInner> listByServer(String resourceGroupName, String serverName);

    /**
     * Lists SQL Vulnerability Assessment policies associated with a server.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL Vulnerability Assessments as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlVulnerabilityAssessmentInner> listByServer(String resourceGroupName, String serverName,
        Context context);

    /**
     * Gets SQL Vulnerability Assessment policy.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the SQL Vulnerability Assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sQL Vulnerability Assessment policy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<SqlVulnerabilityAssessmentInner>> getWithResponseAsync(String resourceGroupName, String serverName,
        SqlVulnerabilityAssessmentName vulnerabilityAssessmentName);

    /**
     * Gets SQL Vulnerability Assessment policy.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the SQL Vulnerability Assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sQL Vulnerability Assessment policy on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SqlVulnerabilityAssessmentInner> getAsync(String resourceGroupName, String serverName,
        SqlVulnerabilityAssessmentName vulnerabilityAssessmentName);

    /**
     * Gets SQL Vulnerability Assessment policy.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the SQL Vulnerability Assessment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sQL Vulnerability Assessment policy along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlVulnerabilityAssessmentInner> getWithResponse(String resourceGroupName, String serverName,
        SqlVulnerabilityAssessmentName vulnerabilityAssessmentName, Context context);

    /**
     * Gets SQL Vulnerability Assessment policy.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the SQL Vulnerability Assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sQL Vulnerability Assessment policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlVulnerabilityAssessmentInner get(String resourceGroupName, String serverName,
        SqlVulnerabilityAssessmentName vulnerabilityAssessmentName);

    /**
     * Creates or updates SQL Vulnerability Assessment policy.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the SQL Vulnerability Assessment.
     * @param parameters The requested resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Vulnerability Assessment along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<SqlVulnerabilityAssessmentInner>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String serverName, VulnerabilityAssessmentName vulnerabilityAssessmentName,
        SqlVulnerabilityAssessmentInner parameters);

    /**
     * Creates or updates SQL Vulnerability Assessment policy.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the SQL Vulnerability Assessment.
     * @param parameters The requested resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Vulnerability Assessment on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SqlVulnerabilityAssessmentInner> createOrUpdateAsync(String resourceGroupName, String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName, SqlVulnerabilityAssessmentInner parameters);

    /**
     * Creates or updates SQL Vulnerability Assessment policy.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the SQL Vulnerability Assessment.
     * @param parameters The requested resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Vulnerability Assessment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlVulnerabilityAssessmentInner> createOrUpdateWithResponse(String resourceGroupName, String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName, SqlVulnerabilityAssessmentInner parameters,
        Context context);

    /**
     * Creates or updates SQL Vulnerability Assessment policy.
     * 
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     * from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the SQL Vulnerability Assessment.
     * @param parameters The requested resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Vulnerability Assessment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlVulnerabilityAssessmentInner createOrUpdate(String resourceGroupName, String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName, SqlVulnerabilityAssessmentInner parameters);
}
