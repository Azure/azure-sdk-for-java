// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SQL Vulnerability Assessment benchmark reference.
 */
@Immutable
public final class BenchmarkReference implements JsonSerializable<BenchmarkReference> {
    /*
     * SQL Vulnerability Assessment benchmark name
     */
    private String benchmark;

    /*
     * SQL Vulnerability Assessment benchmark reference.
     */
    private String reference;

    /**
     * Creates an instance of BenchmarkReference class.
     */
    public BenchmarkReference() {
    }

    /**
     * Get the benchmark property: SQL Vulnerability Assessment benchmark name.
     * 
     * @return the benchmark value.
     */
    public String benchmark() {
        return this.benchmark;
    }

    /**
     * Get the reference property: SQL Vulnerability Assessment benchmark reference.
     * 
     * @return the reference value.
     */
    public String reference() {
        return this.reference;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BenchmarkReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BenchmarkReference if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BenchmarkReference.
     */
    public static BenchmarkReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BenchmarkReference deserializedBenchmarkReference = new BenchmarkReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("benchmark".equals(fieldName)) {
                    deserializedBenchmarkReference.benchmark = reader.getString();
                } else if ("reference".equals(fieldName)) {
                    deserializedBenchmarkReference.reference = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBenchmarkReference;
        });
    }
}
