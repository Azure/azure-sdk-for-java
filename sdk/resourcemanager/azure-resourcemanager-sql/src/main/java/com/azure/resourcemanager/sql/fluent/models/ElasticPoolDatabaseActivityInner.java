// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * Represents the activity on an elastic pool.
 */
@Fluent
public final class ElasticPoolDatabaseActivityInner extends ProxyResource {
    /*
     * The geo-location where the resource lives
     */
    private String location;

    /*
     * The properties representing the resource.
     */
    private ElasticPoolDatabaseActivityProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ElasticPoolDatabaseActivityInner class.
     */
    public ElasticPoolDatabaseActivityInner() {
    }

    /**
     * Get the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The geo-location where the resource lives.
     * 
     * @param location the location value to set.
     * @return the ElasticPoolDatabaseActivityInner object itself.
     */
    public ElasticPoolDatabaseActivityInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the innerProperties property: The properties representing the resource.
     * 
     * @return the innerProperties value.
     */
    private ElasticPoolDatabaseActivityProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the databaseName property: The database name.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.innerProperties() == null ? null : this.innerProperties().databaseName();
    }

    /**
     * Get the endTime property: The time the operation finished (ISO8601 format).
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.innerProperties() == null ? null : this.innerProperties().endTime();
    }

    /**
     * Get the errorCode property: The error code if available.
     * 
     * @return the errorCode value.
     */
    public Integer errorCode() {
        return this.innerProperties() == null ? null : this.innerProperties().errorCode();
    }

    /**
     * Get the errorMessage property: The error message if available.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.innerProperties() == null ? null : this.innerProperties().errorMessage();
    }

    /**
     * Get the errorSeverity property: The error severity if available.
     * 
     * @return the errorSeverity value.
     */
    public Integer errorSeverity() {
        return this.innerProperties() == null ? null : this.innerProperties().errorSeverity();
    }

    /**
     * Get the operation property: The operation name.
     * 
     * @return the operation value.
     */
    public String operation() {
        return this.innerProperties() == null ? null : this.innerProperties().operation();
    }

    /**
     * Get the operationId property: The unique operation ID.
     * 
     * @return the operationId value.
     */
    public UUID operationId() {
        return this.innerProperties() == null ? null : this.innerProperties().operationId();
    }

    /**
     * Get the percentComplete property: The percentage complete if available.
     * 
     * @return the percentComplete value.
     */
    public Integer percentComplete() {
        return this.innerProperties() == null ? null : this.innerProperties().percentComplete();
    }

    /**
     * Get the requestedElasticPoolName property: The name for the elastic pool the database is moving into if
     * available.
     * 
     * @return the requestedElasticPoolName value.
     */
    public String requestedElasticPoolName() {
        return this.innerProperties() == null ? null : this.innerProperties().requestedElasticPoolName();
    }

    /**
     * Get the currentElasticPoolName property: The name of the current elastic pool the database is in if available.
     * 
     * @return the currentElasticPoolName value.
     */
    public String currentElasticPoolName() {
        return this.innerProperties() == null ? null : this.innerProperties().currentElasticPoolName();
    }

    /**
     * Get the currentServiceObjective property: The name of the current service objective if available.
     * 
     * @return the currentServiceObjective value.
     */
    public String currentServiceObjective() {
        return this.innerProperties() == null ? null : this.innerProperties().currentServiceObjective();
    }

    /**
     * Get the requestedServiceObjective property: The name of the requested service objective if available.
     * 
     * @return the requestedServiceObjective value.
     */
    public String requestedServiceObjective() {
        return this.innerProperties() == null ? null : this.innerProperties().requestedServiceObjective();
    }

    /**
     * Get the serverName property: The name of the server the elastic pool is in.
     * 
     * @return the serverName value.
     */
    public String serverName() {
        return this.innerProperties() == null ? null : this.innerProperties().serverName();
    }

    /**
     * Get the startTime property: The time the operation started (ISO8601 format).
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.innerProperties() == null ? null : this.innerProperties().startTime();
    }

    /**
     * Get the state property: The current state of the operation.
     * 
     * @return the state value.
     */
    public String state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ElasticPoolDatabaseActivityInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ElasticPoolDatabaseActivityInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ElasticPoolDatabaseActivityInner.
     */
    public static ElasticPoolDatabaseActivityInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ElasticPoolDatabaseActivityInner deserializedElasticPoolDatabaseActivityInner
                = new ElasticPoolDatabaseActivityInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityInner.location = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedElasticPoolDatabaseActivityInner.innerProperties
                        = ElasticPoolDatabaseActivityProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedElasticPoolDatabaseActivityInner;
        });
    }
}
