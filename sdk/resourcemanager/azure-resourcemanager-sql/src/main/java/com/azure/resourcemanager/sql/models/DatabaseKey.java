// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Database level key used for encryption at rest.
 */
@Immutable
public final class DatabaseKey implements JsonSerializable<DatabaseKey> {
    /*
     * The database key type. Only supported value is 'AzureKeyVault'.
     */
    private DatabaseKeyType type;

    /*
     * Thumbprint of the database key.
     */
    private String thumbprint;

    /*
     * The database key creation date.
     */
    private OffsetDateTime creationDate;

    /*
     * Subregion of the server key.
     */
    private String subregion;

    /**
     * Creates an instance of DatabaseKey class.
     */
    public DatabaseKey() {
    }

    /**
     * Get the type property: The database key type. Only supported value is 'AzureKeyVault'.
     * 
     * @return the type value.
     */
    public DatabaseKeyType type() {
        return this.type;
    }

    /**
     * Get the thumbprint property: Thumbprint of the database key.
     * 
     * @return the thumbprint value.
     */
    public String thumbprint() {
        return this.thumbprint;
    }

    /**
     * Get the creationDate property: The database key creation date.
     * 
     * @return the creationDate value.
     */
    public OffsetDateTime creationDate() {
        return this.creationDate;
    }

    /**
     * Get the subregion property: Subregion of the server key.
     * 
     * @return the subregion value.
     */
    public String subregion() {
        return this.subregion;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseKey from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseKey if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabaseKey.
     */
    public static DatabaseKey fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseKey deserializedDatabaseKey = new DatabaseKey();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedDatabaseKey.type = DatabaseKeyType.fromString(reader.getString());
                } else if ("thumbprint".equals(fieldName)) {
                    deserializedDatabaseKey.thumbprint = reader.getString();
                } else if ("creationDate".equals(fieldName)) {
                    deserializedDatabaseKey.creationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("subregion".equals(fieldName)) {
                    deserializedDatabaseKey.subregion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseKey;
        });
    }
}
