// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Certificate information.
 */
@Immutable
public final class CertificateInfo implements JsonSerializable<CertificateInfo> {
    /*
     * The certificate name
     */
    private String certificateName;

    /*
     * The certificate expiry date
     */
    private OffsetDateTime expiryDate;

    /**
     * Creates an instance of CertificateInfo class.
     */
    public CertificateInfo() {
    }

    /**
     * Get the certificateName property: The certificate name.
     * 
     * @return the certificateName value.
     */
    public String certificateName() {
        return this.certificateName;
    }

    /**
     * Get the expiryDate property: The certificate expiry date.
     * 
     * @return the expiryDate value.
     */
    public OffsetDateTime expiryDate() {
        return this.expiryDate;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CertificateInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CertificateInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CertificateInfo.
     */
    public static CertificateInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CertificateInfo deserializedCertificateInfo = new CertificateInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("certificateName".equals(fieldName)) {
                    deserializedCertificateInfo.certificateName = reader.getString();
                } else if ("expiryDate".equals(fieldName)) {
                    deserializedCertificateInfo.expiryDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertificateInfo;
        });
    }
}
