// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.sql.fluent.SqlVulnerabilityAssessmentRuleBaselinesClient;
import com.azure.resourcemanager.sql.fluent.models.DatabaseSqlVulnerabilityAssessmentRuleBaselineInner;
import com.azure.resourcemanager.sql.models.BaselineName;
import com.azure.resourcemanager.sql.models.DatabaseSqlVulnerabilityAssessmentRuleBaselineInput;
import com.azure.resourcemanager.sql.models.DatabaseSqlVulnerabilityAssessmentRuleBaselineListResult;
import com.azure.resourcemanager.sql.models.VulnerabilityAssessmentName;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * SqlVulnerabilityAssessmentRuleBaselinesClient.
 */
public final class SqlVulnerabilityAssessmentRuleBaselinesClientImpl
    implements SqlVulnerabilityAssessmentRuleBaselinesClient {
    /** The proxy service used to perform REST calls. */
    private final SqlVulnerabilityAssessmentRuleBaselinesService service;

    /** The service client containing this operation class. */
    private final SqlManagementClientImpl client;

    /**
     * Initializes an instance of SqlVulnerabilityAssessmentRuleBaselinesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SqlVulnerabilityAssessmentRuleBaselinesClientImpl(SqlManagementClientImpl client) {
        this.service =
            RestProxy
                .create(
                    SqlVulnerabilityAssessmentRuleBaselinesService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SqlManagementClientSqlVulnerabilityAssessmentRuleBaselines to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SqlManagementClientS")
    public interface SqlVulnerabilityAssessmentRuleBaselinesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}/rules")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DatabaseSqlVulnerabilityAssessmentRuleBaselineListResult>> listByBaseline(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("serverName") String serverName,
            @PathParam("vulnerabilityAssessmentName") VulnerabilityAssessmentName vulnerabilityAssessmentName,
            @PathParam("baselineName") BaselineName baselineName,
            @QueryParam("systemDatabaseName") String systemDatabaseName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}/rules/{ruleId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("serverName") String serverName,
            @PathParam("vulnerabilityAssessmentName") VulnerabilityAssessmentName vulnerabilityAssessmentName,
            @PathParam("baselineName") BaselineName baselineName,
            @PathParam("ruleId") String ruleId,
            @QueryParam("systemDatabaseName") String systemDatabaseName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}/rules/{ruleId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("serverName") String serverName,
            @PathParam("vulnerabilityAssessmentName") VulnerabilityAssessmentName vulnerabilityAssessmentName,
            @PathParam("baselineName") BaselineName baselineName,
            @PathParam("ruleId") String ruleId,
            @QueryParam("systemDatabaseName") String systemDatabaseName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DatabaseSqlVulnerabilityAssessmentRuleBaselineInput parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DatabaseSqlVulnerabilityAssessmentRuleBaselineListResult>> listByBaselineNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets a system database's sql vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a system database's sql vulnerability assessment rule baseline along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner>> listByBaselineSinglePageAsync(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        if (vulnerabilityAssessmentName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter vulnerabilityAssessmentName is required and cannot be null."));
        }
        if (baselineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter baselineName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String systemDatabaseName = "master";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByBaseline(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            serverName,
                            vulnerabilityAssessmentName,
                            baselineName,
                            systemDatabaseName,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a system database's sql vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a system database's sql vulnerability assessment rule baseline along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner>> listByBaselineSinglePageAsync(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        if (vulnerabilityAssessmentName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter vulnerabilityAssessmentName is required and cannot be null."));
        }
        if (baselineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter baselineName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String systemDatabaseName = "master";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByBaseline(
                this.client.getEndpoint(),
                resourceGroupName,
                serverName,
                vulnerabilityAssessmentName,
                baselineName,
                systemDatabaseName,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets a system database's sql vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a system database's sql vulnerability assessment rule baseline as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner> listByBaselineAsync(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName) {
        return new PagedFlux<>(
            () ->
                listByBaselineSinglePageAsync(resourceGroupName, serverName, vulnerabilityAssessmentName, baselineName),
            nextLink -> listByBaselineNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a system database's sql vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a system database's sql vulnerability assessment rule baseline as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner> listByBaselineAsync(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName,
        Context context) {
        return new PagedFlux<>(
            () ->
                listByBaselineSinglePageAsync(
                    resourceGroupName, serverName, vulnerabilityAssessmentName, baselineName, context),
            nextLink -> listByBaselineNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets a system database's sql vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a system database's sql vulnerability assessment rule baseline as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner> listByBaseline(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName) {
        return new PagedIterable<>(
            listByBaselineAsync(resourceGroupName, serverName, vulnerabilityAssessmentName, baselineName));
    }

    /**
     * Gets a system database's sql vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a system database's sql vulnerability assessment rule baseline as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner> listByBaseline(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName,
        Context context) {
        return new PagedIterable<>(
            listByBaselineAsync(resourceGroupName, serverName, vulnerabilityAssessmentName, baselineName, context));
    }

    /**
     * Gets a system database's sql vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a system database's sql vulnerability assessment rule baseline along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner>> getWithResponseAsync(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName,
        String ruleId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        if (vulnerabilityAssessmentName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter vulnerabilityAssessmentName is required and cannot be null."));
        }
        if (baselineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter baselineName is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String systemDatabaseName = "master";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            serverName,
                            vulnerabilityAssessmentName,
                            baselineName,
                            ruleId,
                            systemDatabaseName,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a system database's sql vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a system database's sql vulnerability assessment rule baseline along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner>> getWithResponseAsync(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName,
        String ruleId,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        if (vulnerabilityAssessmentName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter vulnerabilityAssessmentName is required and cannot be null."));
        }
        if (baselineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter baselineName is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String systemDatabaseName = "master";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                resourceGroupName,
                serverName,
                vulnerabilityAssessmentName,
                baselineName,
                ruleId,
                systemDatabaseName,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets a system database's sql vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a system database's sql vulnerability assessment rule baseline on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner> getAsync(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName,
        String ruleId) {
        return getWithResponseAsync(resourceGroupName, serverName, vulnerabilityAssessmentName, baselineName, ruleId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a system database's sql vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a system database's sql vulnerability assessment rule baseline along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner> getWithResponse(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName,
        String ruleId,
        Context context) {
        return getWithResponseAsync(
                resourceGroupName, serverName, vulnerabilityAssessmentName, baselineName, ruleId, context)
            .block();
    }

    /**
     * Gets a system database's sql vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a system database's sql vulnerability assessment rule baseline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DatabaseSqlVulnerabilityAssessmentRuleBaselineInner get(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName,
        String ruleId) {
        return getWithResponse(
                resourceGroupName, serverName, vulnerabilityAssessmentName, baselineName, ruleId, Context.NONE)
            .getValue();
    }

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @param parameters The requested rule baseline resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database sql vulnerability assessment rule baseline along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName,
        String ruleId,
        DatabaseSqlVulnerabilityAssessmentRuleBaselineInput parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        if (vulnerabilityAssessmentName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter vulnerabilityAssessmentName is required and cannot be null."));
        }
        if (baselineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter baselineName is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String systemDatabaseName = "master";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            serverName,
                            vulnerabilityAssessmentName,
                            baselineName,
                            ruleId,
                            systemDatabaseName,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @param parameters The requested rule baseline resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database sql vulnerability assessment rule baseline along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName,
        String ruleId,
        DatabaseSqlVulnerabilityAssessmentRuleBaselineInput parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (serverName == null) {
            return Mono.error(new IllegalArgumentException("Parameter serverName is required and cannot be null."));
        }
        if (vulnerabilityAssessmentName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter vulnerabilityAssessmentName is required and cannot be null."));
        }
        if (baselineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter baselineName is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String systemDatabaseName = "master";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                resourceGroupName,
                serverName,
                vulnerabilityAssessmentName,
                baselineName,
                ruleId,
                systemDatabaseName,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                parameters,
                accept,
                context);
    }

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @param parameters The requested rule baseline resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database sql vulnerability assessment rule baseline on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner> createOrUpdateAsync(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName,
        String ruleId,
        DatabaseSqlVulnerabilityAssessmentRuleBaselineInput parameters) {
        return createOrUpdateWithResponseAsync(
                resourceGroupName, serverName, vulnerabilityAssessmentName, baselineName, ruleId, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @param parameters The requested rule baseline resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database sql vulnerability assessment rule baseline along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName,
        String ruleId,
        DatabaseSqlVulnerabilityAssessmentRuleBaselineInput parameters,
        Context context) {
        return createOrUpdateWithResponseAsync(
                resourceGroupName, serverName, vulnerabilityAssessmentName, baselineName, ruleId, parameters, context)
            .block();
    }

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param baselineName The baselineName parameter.
     * @param ruleId The vulnerability assessment rule ID.
     * @param parameters The requested rule baseline resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a database sql vulnerability assessment rule baseline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DatabaseSqlVulnerabilityAssessmentRuleBaselineInner createOrUpdate(
        String resourceGroupName,
        String serverName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        BaselineName baselineName,
        String ruleId,
        DatabaseSqlVulnerabilityAssessmentRuleBaselineInput parameters) {
        return createOrUpdateWithResponse(
                resourceGroupName,
                serverName,
                vulnerabilityAssessmentName,
                baselineName,
                ruleId,
                parameters,
                Context.NONE)
            .getValue();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL Vulnerability Assessments rule baseline along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner>> listByBaselineNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByBaselineNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL Vulnerability Assessments rule baseline along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DatabaseSqlVulnerabilityAssessmentRuleBaselineInner>> listByBaselineNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByBaselineNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
