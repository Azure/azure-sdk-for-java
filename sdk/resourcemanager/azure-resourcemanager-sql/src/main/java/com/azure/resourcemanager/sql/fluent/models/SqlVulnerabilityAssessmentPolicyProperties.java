// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sql.models.SqlVulnerabilityAssessmentState;
import java.io.IOException;

/**
 * The SqlVulnerabilityAssessmentPolicyProperties model.
 */
@Fluent
public final class SqlVulnerabilityAssessmentPolicyProperties
    implements JsonSerializable<SqlVulnerabilityAssessmentPolicyProperties> {
    /*
     * Specifies the state of the SQL Vulnerability Assessment, whether it is enabled or disabled or a state has not
     * been applied yet on the specific database or server.
     */
    private SqlVulnerabilityAssessmentState state;

    /**
     * Creates an instance of SqlVulnerabilityAssessmentPolicyProperties class.
     */
    public SqlVulnerabilityAssessmentPolicyProperties() {
    }

    /**
     * Get the state property: Specifies the state of the SQL Vulnerability Assessment, whether it is enabled or
     * disabled or a state has not been applied yet on the specific database or server.
     * 
     * @return the state value.
     */
    public SqlVulnerabilityAssessmentState state() {
        return this.state;
    }

    /**
     * Set the state property: Specifies the state of the SQL Vulnerability Assessment, whether it is enabled or
     * disabled or a state has not been applied yet on the specific database or server.
     * 
     * @param state the state value to set.
     * @return the SqlVulnerabilityAssessmentPolicyProperties object itself.
     */
    public SqlVulnerabilityAssessmentPolicyProperties withState(SqlVulnerabilityAssessmentState state) {
        this.state = state;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlVulnerabilityAssessmentPolicyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlVulnerabilityAssessmentPolicyProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlVulnerabilityAssessmentPolicyProperties.
     */
    public static SqlVulnerabilityAssessmentPolicyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlVulnerabilityAssessmentPolicyProperties deserializedSqlVulnerabilityAssessmentPolicyProperties
                = new SqlVulnerabilityAssessmentPolicyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedSqlVulnerabilityAssessmentPolicyProperties.state
                        = SqlVulnerabilityAssessmentState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlVulnerabilityAssessmentPolicyProperties;
        });
    }
}
