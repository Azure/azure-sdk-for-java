// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sql.models.DistributedAvailabilityGroupDatabase;
import com.azure.resourcemanager.sql.models.FailoverModeType;
import com.azure.resourcemanager.sql.models.LinkRole;
import com.azure.resourcemanager.sql.models.ReplicationModeType;
import com.azure.resourcemanager.sql.models.SeedingModeType;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

/**
 * The properties of a distributed availability group.
 */
@Fluent
public final class DistributedAvailabilityGroupProperties
    implements JsonSerializable<DistributedAvailabilityGroupProperties> {
    /*
     * Name of the distributed availability group
     */
    private String distributedAvailabilityGroupName;

    /*
     * ID of the distributed availability group
     */
    private UUID distributedAvailabilityGroupId;

    /*
     * Replication mode of the link
     */
    private ReplicationModeType replicationMode;

    /*
     * SQL server side link role
     */
    private LinkRole partnerLinkRole;

    /*
     * SQL server side availability group name
     */
    private String partnerAvailabilityGroupName;

    /*
     * SQL server side endpoint - IP or DNS resolvable name
     */
    private String partnerEndpoint;

    /*
     * Managed instance side link role
     */
    private LinkRole instanceLinkRole;

    /*
     * Managed instance side availability group name
     */
    private String instanceAvailabilityGroupName;

    /*
     * The link failover mode - can be Manual if intended to be used for two-way failover with a supported SQL Server,
     * or None for one-way failover to Azure.
     */
    private FailoverModeType failoverMode;

    /*
     * Database seeding mode – can be Automatic (default), or Manual for supported scenarios.
     */
    private SeedingModeType seedingMode;

    /*
     * Databases in the distributed availability group
     */
    private List<DistributedAvailabilityGroupDatabase> databases;

    /**
     * Creates an instance of DistributedAvailabilityGroupProperties class.
     */
    public DistributedAvailabilityGroupProperties() {
    }

    /**
     * Get the distributedAvailabilityGroupName property: Name of the distributed availability group.
     * 
     * @return the distributedAvailabilityGroupName value.
     */
    public String distributedAvailabilityGroupName() {
        return this.distributedAvailabilityGroupName;
    }

    /**
     * Get the distributedAvailabilityGroupId property: ID of the distributed availability group.
     * 
     * @return the distributedAvailabilityGroupId value.
     */
    public UUID distributedAvailabilityGroupId() {
        return this.distributedAvailabilityGroupId;
    }

    /**
     * Get the replicationMode property: Replication mode of the link.
     * 
     * @return the replicationMode value.
     */
    public ReplicationModeType replicationMode() {
        return this.replicationMode;
    }

    /**
     * Set the replicationMode property: Replication mode of the link.
     * 
     * @param replicationMode the replicationMode value to set.
     * @return the DistributedAvailabilityGroupProperties object itself.
     */
    public DistributedAvailabilityGroupProperties withReplicationMode(ReplicationModeType replicationMode) {
        this.replicationMode = replicationMode;
        return this;
    }

    /**
     * Get the partnerLinkRole property: SQL server side link role.
     * 
     * @return the partnerLinkRole value.
     */
    public LinkRole partnerLinkRole() {
        return this.partnerLinkRole;
    }

    /**
     * Get the partnerAvailabilityGroupName property: SQL server side availability group name.
     * 
     * @return the partnerAvailabilityGroupName value.
     */
    public String partnerAvailabilityGroupName() {
        return this.partnerAvailabilityGroupName;
    }

    /**
     * Set the partnerAvailabilityGroupName property: SQL server side availability group name.
     * 
     * @param partnerAvailabilityGroupName the partnerAvailabilityGroupName value to set.
     * @return the DistributedAvailabilityGroupProperties object itself.
     */
    public DistributedAvailabilityGroupProperties
        withPartnerAvailabilityGroupName(String partnerAvailabilityGroupName) {
        this.partnerAvailabilityGroupName = partnerAvailabilityGroupName;
        return this;
    }

    /**
     * Get the partnerEndpoint property: SQL server side endpoint - IP or DNS resolvable name.
     * 
     * @return the partnerEndpoint value.
     */
    public String partnerEndpoint() {
        return this.partnerEndpoint;
    }

    /**
     * Set the partnerEndpoint property: SQL server side endpoint - IP or DNS resolvable name.
     * 
     * @param partnerEndpoint the partnerEndpoint value to set.
     * @return the DistributedAvailabilityGroupProperties object itself.
     */
    public DistributedAvailabilityGroupProperties withPartnerEndpoint(String partnerEndpoint) {
        this.partnerEndpoint = partnerEndpoint;
        return this;
    }

    /**
     * Get the instanceLinkRole property: Managed instance side link role.
     * 
     * @return the instanceLinkRole value.
     */
    public LinkRole instanceLinkRole() {
        return this.instanceLinkRole;
    }

    /**
     * Set the instanceLinkRole property: Managed instance side link role.
     * 
     * @param instanceLinkRole the instanceLinkRole value to set.
     * @return the DistributedAvailabilityGroupProperties object itself.
     */
    public DistributedAvailabilityGroupProperties withInstanceLinkRole(LinkRole instanceLinkRole) {
        this.instanceLinkRole = instanceLinkRole;
        return this;
    }

    /**
     * Get the instanceAvailabilityGroupName property: Managed instance side availability group name.
     * 
     * @return the instanceAvailabilityGroupName value.
     */
    public String instanceAvailabilityGroupName() {
        return this.instanceAvailabilityGroupName;
    }

    /**
     * Set the instanceAvailabilityGroupName property: Managed instance side availability group name.
     * 
     * @param instanceAvailabilityGroupName the instanceAvailabilityGroupName value to set.
     * @return the DistributedAvailabilityGroupProperties object itself.
     */
    public DistributedAvailabilityGroupProperties
        withInstanceAvailabilityGroupName(String instanceAvailabilityGroupName) {
        this.instanceAvailabilityGroupName = instanceAvailabilityGroupName;
        return this;
    }

    /**
     * Get the failoverMode property: The link failover mode - can be Manual if intended to be used for two-way failover
     * with a supported SQL Server, or None for one-way failover to Azure.
     * 
     * @return the failoverMode value.
     */
    public FailoverModeType failoverMode() {
        return this.failoverMode;
    }

    /**
     * Set the failoverMode property: The link failover mode - can be Manual if intended to be used for two-way failover
     * with a supported SQL Server, or None for one-way failover to Azure.
     * 
     * @param failoverMode the failoverMode value to set.
     * @return the DistributedAvailabilityGroupProperties object itself.
     */
    public DistributedAvailabilityGroupProperties withFailoverMode(FailoverModeType failoverMode) {
        this.failoverMode = failoverMode;
        return this;
    }

    /**
     * Get the seedingMode property: Database seeding mode – can be Automatic (default), or Manual for supported
     * scenarios.
     * 
     * @return the seedingMode value.
     */
    public SeedingModeType seedingMode() {
        return this.seedingMode;
    }

    /**
     * Set the seedingMode property: Database seeding mode – can be Automatic (default), or Manual for supported
     * scenarios.
     * 
     * @param seedingMode the seedingMode value to set.
     * @return the DistributedAvailabilityGroupProperties object itself.
     */
    public DistributedAvailabilityGroupProperties withSeedingMode(SeedingModeType seedingMode) {
        this.seedingMode = seedingMode;
        return this;
    }

    /**
     * Get the databases property: Databases in the distributed availability group.
     * 
     * @return the databases value.
     */
    public List<DistributedAvailabilityGroupDatabase> databases() {
        return this.databases;
    }

    /**
     * Set the databases property: Databases in the distributed availability group.
     * 
     * @param databases the databases value to set.
     * @return the DistributedAvailabilityGroupProperties object itself.
     */
    public DistributedAvailabilityGroupProperties withDatabases(List<DistributedAvailabilityGroupDatabase> databases) {
        this.databases = databases;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (databases() != null) {
            databases().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("replicationMode",
            this.replicationMode == null ? null : this.replicationMode.toString());
        jsonWriter.writeStringField("partnerAvailabilityGroupName", this.partnerAvailabilityGroupName);
        jsonWriter.writeStringField("partnerEndpoint", this.partnerEndpoint);
        jsonWriter.writeStringField("instanceLinkRole",
            this.instanceLinkRole == null ? null : this.instanceLinkRole.toString());
        jsonWriter.writeStringField("instanceAvailabilityGroupName", this.instanceAvailabilityGroupName);
        jsonWriter.writeStringField("failoverMode", this.failoverMode == null ? null : this.failoverMode.toString());
        jsonWriter.writeStringField("seedingMode", this.seedingMode == null ? null : this.seedingMode.toString());
        jsonWriter.writeArrayField("databases", this.databases, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DistributedAvailabilityGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DistributedAvailabilityGroupProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DistributedAvailabilityGroupProperties.
     */
    public static DistributedAvailabilityGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DistributedAvailabilityGroupProperties deserializedDistributedAvailabilityGroupProperties
                = new DistributedAvailabilityGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("distributedAvailabilityGroupName".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupProperties.distributedAvailabilityGroupName
                        = reader.getString();
                } else if ("distributedAvailabilityGroupId".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupProperties.distributedAvailabilityGroupId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("replicationMode".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupProperties.replicationMode
                        = ReplicationModeType.fromString(reader.getString());
                } else if ("partnerLinkRole".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupProperties.partnerLinkRole
                        = LinkRole.fromString(reader.getString());
                } else if ("partnerAvailabilityGroupName".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupProperties.partnerAvailabilityGroupName
                        = reader.getString();
                } else if ("partnerEndpoint".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupProperties.partnerEndpoint = reader.getString();
                } else if ("instanceLinkRole".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupProperties.instanceLinkRole
                        = LinkRole.fromString(reader.getString());
                } else if ("instanceAvailabilityGroupName".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupProperties.instanceAvailabilityGroupName
                        = reader.getString();
                } else if ("failoverMode".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupProperties.failoverMode
                        = FailoverModeType.fromString(reader.getString());
                } else if ("seedingMode".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupProperties.seedingMode
                        = SeedingModeType.fromString(reader.getString());
                } else if ("databases".equals(fieldName)) {
                    List<DistributedAvailabilityGroupDatabase> databases
                        = reader.readArray(reader1 -> DistributedAvailabilityGroupDatabase.fromJson(reader1));
                    deserializedDistributedAvailabilityGroupProperties.databases = databases;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDistributedAvailabilityGroupProperties;
        });
    }
}
