// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.resourcemanager.sql.models.SynapseLinkWorkspaceInfoProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Synapse link workspace resource.
 */
@Fluent
public final class SynapseLinkWorkspaceInner extends ProxyResource {
    /*
     * Resource properties.
     */
    @JsonProperty(value = "properties")
    private SynapseLinkWorkspaceProperties innerProperties;

    /**
     * Creates an instance of SynapseLinkWorkspaceInner class.
     */
    public SynapseLinkWorkspaceInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     * 
     * @return the innerProperties value.
     */
    private SynapseLinkWorkspaceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the workspaces property: List of all synapselink workspaces.
     * 
     * @return the workspaces value.
     */
    public List<SynapseLinkWorkspaceInfoProperties> workspaces() {
        return this.innerProperties() == null ? null : this.innerProperties().workspaces();
    }

    /**
     * Set the workspaces property: List of all synapselink workspaces.
     * 
     * @param workspaces the workspaces value to set.
     * @return the SynapseLinkWorkspaceInner object itself.
     */
    public SynapseLinkWorkspaceInner withWorkspaces(List<SynapseLinkWorkspaceInfoProperties> workspaces) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SynapseLinkWorkspaceProperties();
        }
        this.innerProperties().withWorkspaces(workspaces);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
