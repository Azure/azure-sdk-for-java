// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sql.models.ManagementOperationState;
import com.azure.resourcemanager.sql.models.MoveOperationMode;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Contains the operation result properties for managed database move operation.
 */
@Immutable
public final class ManagedDatabaseMoveOperationResultProperties
    implements JsonSerializable<ManagedDatabaseMoveOperationResultProperties> {
    /*
     * The name of operation.
     */
    private String operation;

    /*
     * The friendly name of operation.
     */
    private String operationFriendlyName;

    /*
     * The operation start time.
     */
    private OffsetDateTime startTime;

    /*
     * The operation state.
     */
    private ManagementOperationState state;

    /*
     * Operation mode.
     */
    private MoveOperationMode operationMode;

    /*
     * Source Managed Instance name.
     */
    private String sourceManagedInstanceName;

    /*
     * Target Managed Instance name.
     */
    private String targetManagedInstanceName;

    /*
     * Source Managed Instance resource id.
     */
    private String sourceManagedInstanceId;

    /*
     * Target Managed instance resource id.
     */
    private String targetManagedInstanceId;

    /*
     * Source database name.
     */
    private String sourceDatabaseName;

    /*
     * Target database name.
     */
    private String targetDatabaseName;

    /*
     * Is move operation cancellable.
     */
    private Boolean isCancellable;

    /*
     * The operation error code.
     */
    private Integer errorCode;

    /*
     * The operation error description.
     */
    private String errorDescription;

    /*
     * The operation error severity.
     */
    private Integer errorSeverity;

    /*
     * Whether or not the error is a user error.
     */
    private Boolean isUserError;

    /**
     * Creates an instance of ManagedDatabaseMoveOperationResultProperties class.
     */
    public ManagedDatabaseMoveOperationResultProperties() {
    }

    /**
     * Get the operation property: The name of operation.
     * 
     * @return the operation value.
     */
    public String operation() {
        return this.operation;
    }

    /**
     * Get the operationFriendlyName property: The friendly name of operation.
     * 
     * @return the operationFriendlyName value.
     */
    public String operationFriendlyName() {
        return this.operationFriendlyName;
    }

    /**
     * Get the startTime property: The operation start time.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the state property: The operation state.
     * 
     * @return the state value.
     */
    public ManagementOperationState state() {
        return this.state;
    }

    /**
     * Get the operationMode property: Operation mode.
     * 
     * @return the operationMode value.
     */
    public MoveOperationMode operationMode() {
        return this.operationMode;
    }

    /**
     * Get the sourceManagedInstanceName property: Source Managed Instance name.
     * 
     * @return the sourceManagedInstanceName value.
     */
    public String sourceManagedInstanceName() {
        return this.sourceManagedInstanceName;
    }

    /**
     * Get the targetManagedInstanceName property: Target Managed Instance name.
     * 
     * @return the targetManagedInstanceName value.
     */
    public String targetManagedInstanceName() {
        return this.targetManagedInstanceName;
    }

    /**
     * Get the sourceManagedInstanceId property: Source Managed Instance resource id.
     * 
     * @return the sourceManagedInstanceId value.
     */
    public String sourceManagedInstanceId() {
        return this.sourceManagedInstanceId;
    }

    /**
     * Get the targetManagedInstanceId property: Target Managed instance resource id.
     * 
     * @return the targetManagedInstanceId value.
     */
    public String targetManagedInstanceId() {
        return this.targetManagedInstanceId;
    }

    /**
     * Get the sourceDatabaseName property: Source database name.
     * 
     * @return the sourceDatabaseName value.
     */
    public String sourceDatabaseName() {
        return this.sourceDatabaseName;
    }

    /**
     * Get the targetDatabaseName property: Target database name.
     * 
     * @return the targetDatabaseName value.
     */
    public String targetDatabaseName() {
        return this.targetDatabaseName;
    }

    /**
     * Get the isCancellable property: Is move operation cancellable.
     * 
     * @return the isCancellable value.
     */
    public Boolean isCancellable() {
        return this.isCancellable;
    }

    /**
     * Get the errorCode property: The operation error code.
     * 
     * @return the errorCode value.
     */
    public Integer errorCode() {
        return this.errorCode;
    }

    /**
     * Get the errorDescription property: The operation error description.
     * 
     * @return the errorDescription value.
     */
    public String errorDescription() {
        return this.errorDescription;
    }

    /**
     * Get the errorSeverity property: The operation error severity.
     * 
     * @return the errorSeverity value.
     */
    public Integer errorSeverity() {
        return this.errorSeverity;
    }

    /**
     * Get the isUserError property: Whether or not the error is a user error.
     * 
     * @return the isUserError value.
     */
    public Boolean isUserError() {
        return this.isUserError;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedDatabaseMoveOperationResultProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedDatabaseMoveOperationResultProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedDatabaseMoveOperationResultProperties.
     */
    public static ManagedDatabaseMoveOperationResultProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedDatabaseMoveOperationResultProperties deserializedManagedDatabaseMoveOperationResultProperties
                = new ManagedDatabaseMoveOperationResultProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operation".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.operation = reader.getString();
                } else if ("operationFriendlyName".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.operationFriendlyName = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("state".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.state
                        = ManagementOperationState.fromString(reader.getString());
                } else if ("operationMode".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.operationMode
                        = MoveOperationMode.fromString(reader.getString());
                } else if ("sourceManagedInstanceName".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.sourceManagedInstanceName
                        = reader.getString();
                } else if ("targetManagedInstanceName".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.targetManagedInstanceName
                        = reader.getString();
                } else if ("sourceManagedInstanceId".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.sourceManagedInstanceId
                        = reader.getString();
                } else if ("targetManagedInstanceId".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.targetManagedInstanceId
                        = reader.getString();
                } else if ("sourceDatabaseName".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.sourceDatabaseName = reader.getString();
                } else if ("targetDatabaseName".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.targetDatabaseName = reader.getString();
                } else if ("isCancellable".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.isCancellable
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("errorCode".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.errorCode
                        = reader.getNullable(JsonReader::getInt);
                } else if ("errorDescription".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.errorDescription = reader.getString();
                } else if ("errorSeverity".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.errorSeverity
                        = reader.getNullable(JsonReader::getInt);
                } else if ("isUserError".equals(fieldName)) {
                    deserializedManagedDatabaseMoveOperationResultProperties.isUserError
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedDatabaseMoveOperationResultProperties;
        });
    }
}
