// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Distributed availability group failover request.
 */
@Fluent
public final class DistributedAvailabilityGroupSetRole
    implements JsonSerializable<DistributedAvailabilityGroupSetRole> {
    /*
     * New role of managed instance in a distributed availability group, can be Primary or Secondary.
     */
    private InstanceRole instanceRole;

    /*
     * The type of the role change, can be Planned or Forced.
     */
    private RoleChangeType roleChangeType;

    /**
     * Creates an instance of DistributedAvailabilityGroupSetRole class.
     */
    public DistributedAvailabilityGroupSetRole() {
    }

    /**
     * Get the instanceRole property: New role of managed instance in a distributed availability group, can be Primary
     * or Secondary.
     * 
     * @return the instanceRole value.
     */
    public InstanceRole instanceRole() {
        return this.instanceRole;
    }

    /**
     * Set the instanceRole property: New role of managed instance in a distributed availability group, can be Primary
     * or Secondary.
     * 
     * @param instanceRole the instanceRole value to set.
     * @return the DistributedAvailabilityGroupSetRole object itself.
     */
    public DistributedAvailabilityGroupSetRole withInstanceRole(InstanceRole instanceRole) {
        this.instanceRole = instanceRole;
        return this;
    }

    /**
     * Get the roleChangeType property: The type of the role change, can be Planned or Forced.
     * 
     * @return the roleChangeType value.
     */
    public RoleChangeType roleChangeType() {
        return this.roleChangeType;
    }

    /**
     * Set the roleChangeType property: The type of the role change, can be Planned or Forced.
     * 
     * @param roleChangeType the roleChangeType value to set.
     * @return the DistributedAvailabilityGroupSetRole object itself.
     */
    public DistributedAvailabilityGroupSetRole withRoleChangeType(RoleChangeType roleChangeType) {
        this.roleChangeType = roleChangeType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (instanceRole() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property instanceRole in model DistributedAvailabilityGroupSetRole"));
        }
        if (roleChangeType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property roleChangeType in model DistributedAvailabilityGroupSetRole"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DistributedAvailabilityGroupSetRole.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceRole", this.instanceRole == null ? null : this.instanceRole.toString());
        jsonWriter.writeStringField("roleChangeType",
            this.roleChangeType == null ? null : this.roleChangeType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DistributedAvailabilityGroupSetRole from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DistributedAvailabilityGroupSetRole if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DistributedAvailabilityGroupSetRole.
     */
    public static DistributedAvailabilityGroupSetRole fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DistributedAvailabilityGroupSetRole deserializedDistributedAvailabilityGroupSetRole
                = new DistributedAvailabilityGroupSetRole();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceRole".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupSetRole.instanceRole
                        = InstanceRole.fromString(reader.getString());
                } else if ("roleChangeType".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupSetRole.roleChangeType
                        = RoleChangeType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDistributedAvailabilityGroupSetRole;
        });
    }
}
