// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sql.models.OperationMode;
import com.azure.resourcemanager.sql.models.StorageKeyType;
import java.io.IOException;

/**
 * Contains the database information after successful export.
 */
@Fluent
public final class DatabaseExtensionsProperties implements JsonSerializable<DatabaseExtensionsProperties> {
    /*
     * Operation Mode.
     */
    private OperationMode operationMode;

    /*
     * Storage key type.
     */
    private StorageKeyType storageKeyType;

    /*
     * Storage key.
     */
    private String storageKey;

    /*
     * Storage Uri.
     */
    private String storageUri;

    /**
     * Creates an instance of DatabaseExtensionsProperties class.
     */
    public DatabaseExtensionsProperties() {
    }

    /**
     * Get the operationMode property: Operation Mode.
     * 
     * @return the operationMode value.
     */
    public OperationMode operationMode() {
        return this.operationMode;
    }

    /**
     * Set the operationMode property: Operation Mode.
     * 
     * @param operationMode the operationMode value to set.
     * @return the DatabaseExtensionsProperties object itself.
     */
    public DatabaseExtensionsProperties withOperationMode(OperationMode operationMode) {
        this.operationMode = operationMode;
        return this;
    }

    /**
     * Get the storageKeyType property: Storage key type.
     * 
     * @return the storageKeyType value.
     */
    public StorageKeyType storageKeyType() {
        return this.storageKeyType;
    }

    /**
     * Set the storageKeyType property: Storage key type.
     * 
     * @param storageKeyType the storageKeyType value to set.
     * @return the DatabaseExtensionsProperties object itself.
     */
    public DatabaseExtensionsProperties withStorageKeyType(StorageKeyType storageKeyType) {
        this.storageKeyType = storageKeyType;
        return this;
    }

    /**
     * Get the storageKey property: Storage key.
     * 
     * @return the storageKey value.
     */
    public String storageKey() {
        return this.storageKey;
    }

    /**
     * Set the storageKey property: Storage key.
     * 
     * @param storageKey the storageKey value to set.
     * @return the DatabaseExtensionsProperties object itself.
     */
    public DatabaseExtensionsProperties withStorageKey(String storageKey) {
        this.storageKey = storageKey;
        return this;
    }

    /**
     * Get the storageUri property: Storage Uri.
     * 
     * @return the storageUri value.
     */
    public String storageUri() {
        return this.storageUri;
    }

    /**
     * Set the storageUri property: Storage Uri.
     * 
     * @param storageUri the storageUri value to set.
     * @return the DatabaseExtensionsProperties object itself.
     */
    public DatabaseExtensionsProperties withStorageUri(String storageUri) {
        this.storageUri = storageUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operationMode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property operationMode in model DatabaseExtensionsProperties"));
        }
        if (storageKeyType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property storageKeyType in model DatabaseExtensionsProperties"));
        }
        if (storageKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property storageKey in model DatabaseExtensionsProperties"));
        }
        if (storageUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property storageUri in model DatabaseExtensionsProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DatabaseExtensionsProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operationMode", this.operationMode == null ? null : this.operationMode.toString());
        jsonWriter.writeStringField("storageKeyType",
            this.storageKeyType == null ? null : this.storageKeyType.toString());
        jsonWriter.writeStringField("storageKey", this.storageKey);
        jsonWriter.writeStringField("storageUri", this.storageUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseExtensionsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseExtensionsProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DatabaseExtensionsProperties.
     */
    public static DatabaseExtensionsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseExtensionsProperties deserializedDatabaseExtensionsProperties = new DatabaseExtensionsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operationMode".equals(fieldName)) {
                    deserializedDatabaseExtensionsProperties.operationMode
                        = OperationMode.fromString(reader.getString());
                } else if ("storageKeyType".equals(fieldName)) {
                    deserializedDatabaseExtensionsProperties.storageKeyType
                        = StorageKeyType.fromString(reader.getString());
                } else if ("storageKey".equals(fieldName)) {
                    deserializedDatabaseExtensionsProperties.storageKey = reader.getString();
                } else if ("storageUri".equals(fieldName)) {
                    deserializedDatabaseExtensionsProperties.storageUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseExtensionsProperties;
        });
    }
}
