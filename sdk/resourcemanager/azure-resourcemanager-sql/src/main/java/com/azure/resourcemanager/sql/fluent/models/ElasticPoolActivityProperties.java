// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * Represents the properties of an elastic pool.
 */
@Immutable
public final class ElasticPoolActivityProperties implements JsonSerializable<ElasticPoolActivityProperties> {
    /*
     * The time the operation finished (ISO8601 format).
     */
    private OffsetDateTime endTime;

    /*
     * The error code if available.
     */
    private Integer errorCode;

    /*
     * The error message if available.
     */
    private String errorMessage;

    /*
     * The error severity if available.
     */
    private Integer errorSeverity;

    /*
     * The operation name.
     */
    private String operation;

    /*
     * The unique operation ID.
     */
    private UUID operationId;

    /*
     * The percentage complete if available.
     */
    private Integer percentComplete;

    /*
     * The requested max DTU per database if available.
     */
    private Integer requestedDatabaseDtuMax;

    /*
     * The requested min DTU per database if available.
     */
    private Integer requestedDatabaseDtuMin;

    /*
     * The requested DTU for the pool if available.
     */
    private Integer requestedDtu;

    /*
     * The requested name for the elastic pool if available.
     */
    private String requestedElasticPoolName;

    /*
     * The requested storage limit for the pool in GB if available.
     */
    private Long requestedStorageLimitInGB;

    /*
     * The name of the elastic pool.
     */
    private String elasticPoolName;

    /*
     * The name of the server the elastic pool is in.
     */
    private String serverName;

    /*
     * The time the operation started (ISO8601 format).
     */
    private OffsetDateTime startTime;

    /*
     * The current state of the operation.
     */
    private String state;

    /*
     * The requested storage limit in MB.
     */
    private Integer requestedStorageLimitInMB;

    /*
     * The requested per database DTU guarantee.
     */
    private Integer requestedDatabaseDtuGuarantee;

    /*
     * The requested per database DTU cap.
     */
    private Integer requestedDatabaseDtuCap;

    /*
     * The requested DTU guarantee.
     */
    private Integer requestedDtuGuarantee;

    /**
     * Creates an instance of ElasticPoolActivityProperties class.
     */
    public ElasticPoolActivityProperties() {
    }

    /**
     * Get the endTime property: The time the operation finished (ISO8601 format).
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the errorCode property: The error code if available.
     * 
     * @return the errorCode value.
     */
    public Integer errorCode() {
        return this.errorCode;
    }

    /**
     * Get the errorMessage property: The error message if available.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the errorSeverity property: The error severity if available.
     * 
     * @return the errorSeverity value.
     */
    public Integer errorSeverity() {
        return this.errorSeverity;
    }

    /**
     * Get the operation property: The operation name.
     * 
     * @return the operation value.
     */
    public String operation() {
        return this.operation;
    }

    /**
     * Get the operationId property: The unique operation ID.
     * 
     * @return the operationId value.
     */
    public UUID operationId() {
        return this.operationId;
    }

    /**
     * Get the percentComplete property: The percentage complete if available.
     * 
     * @return the percentComplete value.
     */
    public Integer percentComplete() {
        return this.percentComplete;
    }

    /**
     * Get the requestedDatabaseDtuMax property: The requested max DTU per database if available.
     * 
     * @return the requestedDatabaseDtuMax value.
     */
    public Integer requestedDatabaseDtuMax() {
        return this.requestedDatabaseDtuMax;
    }

    /**
     * Get the requestedDatabaseDtuMin property: The requested min DTU per database if available.
     * 
     * @return the requestedDatabaseDtuMin value.
     */
    public Integer requestedDatabaseDtuMin() {
        return this.requestedDatabaseDtuMin;
    }

    /**
     * Get the requestedDtu property: The requested DTU for the pool if available.
     * 
     * @return the requestedDtu value.
     */
    public Integer requestedDtu() {
        return this.requestedDtu;
    }

    /**
     * Get the requestedElasticPoolName property: The requested name for the elastic pool if available.
     * 
     * @return the requestedElasticPoolName value.
     */
    public String requestedElasticPoolName() {
        return this.requestedElasticPoolName;
    }

    /**
     * Get the requestedStorageLimitInGB property: The requested storage limit for the pool in GB if available.
     * 
     * @return the requestedStorageLimitInGB value.
     */
    public Long requestedStorageLimitInGB() {
        return this.requestedStorageLimitInGB;
    }

    /**
     * Get the elasticPoolName property: The name of the elastic pool.
     * 
     * @return the elasticPoolName value.
     */
    public String elasticPoolName() {
        return this.elasticPoolName;
    }

    /**
     * Get the serverName property: The name of the server the elastic pool is in.
     * 
     * @return the serverName value.
     */
    public String serverName() {
        return this.serverName;
    }

    /**
     * Get the startTime property: The time the operation started (ISO8601 format).
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the state property: The current state of the operation.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Get the requestedStorageLimitInMB property: The requested storage limit in MB.
     * 
     * @return the requestedStorageLimitInMB value.
     */
    public Integer requestedStorageLimitInMB() {
        return this.requestedStorageLimitInMB;
    }

    /**
     * Get the requestedDatabaseDtuGuarantee property: The requested per database DTU guarantee.
     * 
     * @return the requestedDatabaseDtuGuarantee value.
     */
    public Integer requestedDatabaseDtuGuarantee() {
        return this.requestedDatabaseDtuGuarantee;
    }

    /**
     * Get the requestedDatabaseDtuCap property: The requested per database DTU cap.
     * 
     * @return the requestedDatabaseDtuCap value.
     */
    public Integer requestedDatabaseDtuCap() {
        return this.requestedDatabaseDtuCap;
    }

    /**
     * Get the requestedDtuGuarantee property: The requested DTU guarantee.
     * 
     * @return the requestedDtuGuarantee value.
     */
    public Integer requestedDtuGuarantee() {
        return this.requestedDtuGuarantee;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ElasticPoolActivityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ElasticPoolActivityProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ElasticPoolActivityProperties.
     */
    public static ElasticPoolActivityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ElasticPoolActivityProperties deserializedElasticPoolActivityProperties
                = new ElasticPoolActivityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endTime".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("errorCode".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.errorCode = reader.getNullable(JsonReader::getInt);
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.errorMessage = reader.getString();
                } else if ("errorSeverity".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.errorSeverity = reader.getNullable(JsonReader::getInt);
                } else if ("operation".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.operation = reader.getString();
                } else if ("operationId".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.operationId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("percentComplete".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.percentComplete = reader.getNullable(JsonReader::getInt);
                } else if ("requestedDatabaseDtuMax".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.requestedDatabaseDtuMax
                        = reader.getNullable(JsonReader::getInt);
                } else if ("requestedDatabaseDtuMin".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.requestedDatabaseDtuMin
                        = reader.getNullable(JsonReader::getInt);
                } else if ("requestedDtu".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.requestedDtu = reader.getNullable(JsonReader::getInt);
                } else if ("requestedElasticPoolName".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.requestedElasticPoolName = reader.getString();
                } else if ("requestedStorageLimitInGB".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.requestedStorageLimitInGB
                        = reader.getNullable(JsonReader::getLong);
                } else if ("elasticPoolName".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.elasticPoolName = reader.getString();
                } else if ("serverName".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.serverName = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("state".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.state = reader.getString();
                } else if ("requestedStorageLimitInMB".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.requestedStorageLimitInMB
                        = reader.getNullable(JsonReader::getInt);
                } else if ("requestedDatabaseDtuGuarantee".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.requestedDatabaseDtuGuarantee
                        = reader.getNullable(JsonReader::getInt);
                } else if ("requestedDatabaseDtuCap".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.requestedDatabaseDtuCap
                        = reader.getNullable(JsonReader::getInt);
                } else if ("requestedDtuGuarantee".equals(fieldName)) {
                    deserializedElasticPoolActivityProperties.requestedDtuGuarantee
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedElasticPoolActivityProperties;
        });
    }
}
