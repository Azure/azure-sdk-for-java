// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.sql.models.ReplicationLinkType;
import java.io.IOException;

/**
 * Properties of a replication link update.
 */
@Fluent
public final class ReplicationLinkUpdateProperties implements JsonSerializable<ReplicationLinkUpdateProperties> {
    /*
     * Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
     */
    private ReplicationLinkType linkType;

    /**
     * Creates an instance of ReplicationLinkUpdateProperties class.
     */
    public ReplicationLinkUpdateProperties() {
    }

    /**
     * Get the linkType property: Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
     * 
     * @return the linkType value.
     */
    public ReplicationLinkType linkType() {
        return this.linkType;
    }

    /**
     * Set the linkType property: Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
     * 
     * @param linkType the linkType value to set.
     * @return the ReplicationLinkUpdateProperties object itself.
     */
    public ReplicationLinkUpdateProperties withLinkType(ReplicationLinkType linkType) {
        this.linkType = linkType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("linkType", this.linkType == null ? null : this.linkType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplicationLinkUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplicationLinkUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReplicationLinkUpdateProperties.
     */
    public static ReplicationLinkUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplicationLinkUpdateProperties deserializedReplicationLinkUpdateProperties
                = new ReplicationLinkUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("linkType".equals(fieldName)) {
                    deserializedReplicationLinkUpdateProperties.linkType
                        = ReplicationLinkType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplicationLinkUpdateProperties;
        });
    }
}
