// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Transaction Manager Communication Settings of managed instance DTC.
 */
@Fluent
public final class ManagedInstanceDtcTransactionManagerCommunicationSettings
    implements JsonSerializable<ManagedInstanceDtcTransactionManagerCommunicationSettings> {
    /*
     * Allow Inbound traffic to managed instance DTC.
     */
    private Boolean allowInboundEnabled;

    /*
     * Allow Outbound traffic of managed instance DTC.
     */
    private Boolean allowOutboundEnabled;

    /*
     * Authentication type of managed instance DTC.
     */
    private String authentication;

    /**
     * Creates an instance of ManagedInstanceDtcTransactionManagerCommunicationSettings class.
     */
    public ManagedInstanceDtcTransactionManagerCommunicationSettings() {
    }

    /**
     * Get the allowInboundEnabled property: Allow Inbound traffic to managed instance DTC.
     * 
     * @return the allowInboundEnabled value.
     */
    public Boolean allowInboundEnabled() {
        return this.allowInboundEnabled;
    }

    /**
     * Set the allowInboundEnabled property: Allow Inbound traffic to managed instance DTC.
     * 
     * @param allowInboundEnabled the allowInboundEnabled value to set.
     * @return the ManagedInstanceDtcTransactionManagerCommunicationSettings object itself.
     */
    public ManagedInstanceDtcTransactionManagerCommunicationSettings
        withAllowInboundEnabled(Boolean allowInboundEnabled) {
        this.allowInboundEnabled = allowInboundEnabled;
        return this;
    }

    /**
     * Get the allowOutboundEnabled property: Allow Outbound traffic of managed instance DTC.
     * 
     * @return the allowOutboundEnabled value.
     */
    public Boolean allowOutboundEnabled() {
        return this.allowOutboundEnabled;
    }

    /**
     * Set the allowOutboundEnabled property: Allow Outbound traffic of managed instance DTC.
     * 
     * @param allowOutboundEnabled the allowOutboundEnabled value to set.
     * @return the ManagedInstanceDtcTransactionManagerCommunicationSettings object itself.
     */
    public ManagedInstanceDtcTransactionManagerCommunicationSettings
        withAllowOutboundEnabled(Boolean allowOutboundEnabled) {
        this.allowOutboundEnabled = allowOutboundEnabled;
        return this;
    }

    /**
     * Get the authentication property: Authentication type of managed instance DTC.
     * 
     * @return the authentication value.
     */
    public String authentication() {
        return this.authentication;
    }

    /**
     * Set the authentication property: Authentication type of managed instance DTC.
     * 
     * @param authentication the authentication value to set.
     * @return the ManagedInstanceDtcTransactionManagerCommunicationSettings object itself.
     */
    public ManagedInstanceDtcTransactionManagerCommunicationSettings withAuthentication(String authentication) {
        this.authentication = authentication;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("allowInboundEnabled", this.allowInboundEnabled);
        jsonWriter.writeBooleanField("allowOutboundEnabled", this.allowOutboundEnabled);
        jsonWriter.writeStringField("authentication", this.authentication);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedInstanceDtcTransactionManagerCommunicationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedInstanceDtcTransactionManagerCommunicationSettings if the JsonReader was pointing
     * to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * ManagedInstanceDtcTransactionManagerCommunicationSettings.
     */
    public static ManagedInstanceDtcTransactionManagerCommunicationSettings fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedInstanceDtcTransactionManagerCommunicationSettings deserializedManagedInstanceDtcTransactionManagerCommunicationSettings
                = new ManagedInstanceDtcTransactionManagerCommunicationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowInboundEnabled".equals(fieldName)) {
                    deserializedManagedInstanceDtcTransactionManagerCommunicationSettings.allowInboundEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("allowOutboundEnabled".equals(fieldName)) {
                    deserializedManagedInstanceDtcTransactionManagerCommunicationSettings.allowOutboundEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("authentication".equals(fieldName)) {
                    deserializedManagedInstanceDtcTransactionManagerCommunicationSettings.authentication
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedInstanceDtcTransactionManagerCommunicationSettings;
        });
    }
}
