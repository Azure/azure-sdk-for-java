// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Contains the information necessary to change long term retention backup access tier and related operation mode.
 */
@Fluent
public final class ChangeLongTermRetentionBackupAccessTierParameters
    implements JsonSerializable<ChangeLongTermRetentionBackupAccessTierParameters> {
    /*
     * The long term retention backup storage access tier
     */
    private String backupStorageAccessTier;

    /*
     * The operation mode when updating ltr backup storage access tier
     */
    private String operationMode;

    /**
     * Creates an instance of ChangeLongTermRetentionBackupAccessTierParameters class.
     */
    public ChangeLongTermRetentionBackupAccessTierParameters() {
    }

    /**
     * Get the backupStorageAccessTier property: The long term retention backup storage access tier.
     * 
     * @return the backupStorageAccessTier value.
     */
    public String backupStorageAccessTier() {
        return this.backupStorageAccessTier;
    }

    /**
     * Set the backupStorageAccessTier property: The long term retention backup storage access tier.
     * 
     * @param backupStorageAccessTier the backupStorageAccessTier value to set.
     * @return the ChangeLongTermRetentionBackupAccessTierParameters object itself.
     */
    public ChangeLongTermRetentionBackupAccessTierParameters
        withBackupStorageAccessTier(String backupStorageAccessTier) {
        this.backupStorageAccessTier = backupStorageAccessTier;
        return this;
    }

    /**
     * Get the operationMode property: The operation mode when updating ltr backup storage access tier.
     * 
     * @return the operationMode value.
     */
    public String operationMode() {
        return this.operationMode;
    }

    /**
     * Set the operationMode property: The operation mode when updating ltr backup storage access tier.
     * 
     * @param operationMode the operationMode value to set.
     * @return the ChangeLongTermRetentionBackupAccessTierParameters object itself.
     */
    public ChangeLongTermRetentionBackupAccessTierParameters withOperationMode(String operationMode) {
        this.operationMode = operationMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (backupStorageAccessTier() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property backupStorageAccessTier in model ChangeLongTermRetentionBackupAccessTierParameters"));
        }
        if (operationMode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property operationMode in model ChangeLongTermRetentionBackupAccessTierParameters"));
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(ChangeLongTermRetentionBackupAccessTierParameters.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("backupStorageAccessTier", this.backupStorageAccessTier);
        jsonWriter.writeStringField("operationMode", this.operationMode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChangeLongTermRetentionBackupAccessTierParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChangeLongTermRetentionBackupAccessTierParameters if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChangeLongTermRetentionBackupAccessTierParameters.
     */
    public static ChangeLongTermRetentionBackupAccessTierParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChangeLongTermRetentionBackupAccessTierParameters deserializedChangeLongTermRetentionBackupAccessTierParameters
                = new ChangeLongTermRetentionBackupAccessTierParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backupStorageAccessTier".equals(fieldName)) {
                    deserializedChangeLongTermRetentionBackupAccessTierParameters.backupStorageAccessTier
                        = reader.getString();
                } else if ("operationMode".equals(fieldName)) {
                    deserializedChangeLongTermRetentionBackupAccessTierParameters.operationMode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChangeLongTermRetentionBackupAccessTierParameters;
        });
    }
}
