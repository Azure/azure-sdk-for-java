// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The standby pool profile reference.
 */
@Fluent
public final class StandbyPoolProfileDefinition implements JsonSerializable<StandbyPoolProfileDefinition> {
    /*
     * The standby pool profile reference id.This will be an ARM resource id in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StandbyPool/
     * standbyContainerGroupPools/{standbyPoolName}'.
     */
    private String id;

    /*
     * The flag to determine whether ACI should fail the create request if the container group can not be obtained from
     * standby pool.
     */
    private Boolean failContainerGroupCreateOnReuseFailure;

    /**
     * Creates an instance of StandbyPoolProfileDefinition class.
     */
    public StandbyPoolProfileDefinition() {
    }

    /**
     * Get the id property: The standby pool profile reference id.This will be an ARM resource id in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StandbyPool/standbyContainerGroupPools/{standbyPoolName}'.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The standby pool profile reference id.This will be an ARM resource id in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StandbyPool/standbyContainerGroupPools/{standbyPoolName}'.
     * 
     * @param id the id value to set.
     * @return the StandbyPoolProfileDefinition object itself.
     */
    public StandbyPoolProfileDefinition withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the failContainerGroupCreateOnReuseFailure property: The flag to determine whether ACI should fail the create
     * request if the container group can not be obtained from standby pool.
     * 
     * @return the failContainerGroupCreateOnReuseFailure value.
     */
    public Boolean failContainerGroupCreateOnReuseFailure() {
        return this.failContainerGroupCreateOnReuseFailure;
    }

    /**
     * Set the failContainerGroupCreateOnReuseFailure property: The flag to determine whether ACI should fail the create
     * request if the container group can not be obtained from standby pool.
     * 
     * @param failContainerGroupCreateOnReuseFailure the failContainerGroupCreateOnReuseFailure value to set.
     * @return the StandbyPoolProfileDefinition object itself.
     */
    public StandbyPoolProfileDefinition
        withFailContainerGroupCreateOnReuseFailure(Boolean failContainerGroupCreateOnReuseFailure) {
        this.failContainerGroupCreateOnReuseFailure = failContainerGroupCreateOnReuseFailure;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeBooleanField("failContainerGroupCreateOnReuseFailure",
            this.failContainerGroupCreateOnReuseFailure);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StandbyPoolProfileDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StandbyPoolProfileDefinition if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StandbyPoolProfileDefinition.
     */
    public static StandbyPoolProfileDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StandbyPoolProfileDefinition deserializedStandbyPoolProfileDefinition = new StandbyPoolProfileDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedStandbyPoolProfileDefinition.id = reader.getString();
                } else if ("failContainerGroupCreateOnReuseFailure".equals(fieldName)) {
                    deserializedStandbyPoolProfileDefinition.failContainerGroupCreateOnReuseFailure
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStandbyPoolProfileDefinition;
        });
    }
}
