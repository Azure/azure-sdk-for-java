// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The container config map.
 */
@Fluent
public final class ConfigMap implements JsonSerializable<ConfigMap> {
    /*
     * The key value pairs dictionary in the config map.
     */
    private Map<String, String> keyValuePairs;

    /**
     * Creates an instance of ConfigMap class.
     */
    public ConfigMap() {
    }

    /**
     * Get the keyValuePairs property: The key value pairs dictionary in the config map.
     * 
     * @return the keyValuePairs value.
     */
    public Map<String, String> keyValuePairs() {
        return this.keyValuePairs;
    }

    /**
     * Set the keyValuePairs property: The key value pairs dictionary in the config map.
     * 
     * @param keyValuePairs the keyValuePairs value to set.
     * @return the ConfigMap object itself.
     */
    public ConfigMap withKeyValuePairs(Map<String, String> keyValuePairs) {
        this.keyValuePairs = keyValuePairs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("keyValuePairs", this.keyValuePairs, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigMap from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigMap if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the ConfigMap.
     */
    public static ConfigMap fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigMap deserializedConfigMap = new ConfigMap();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyValuePairs".equals(fieldName)) {
                    Map<String, String> keyValuePairs = reader.readMap(reader1 -> reader1.getString());
                    deserializedConfigMap.keyValuePairs = keyValuePairs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigMap;
        });
    }
}
