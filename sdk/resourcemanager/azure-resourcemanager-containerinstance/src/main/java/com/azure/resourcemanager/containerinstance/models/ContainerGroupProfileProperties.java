// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerinstance.fluent.models.ContainerGroupProfilePropertiesProperties;
import java.io.IOException;
import java.util.List;

/**
 * The container group profile properties.
 */
@Fluent
public class ContainerGroupProfileProperties implements JsonSerializable<ContainerGroupProfileProperties> {
    /*
     * The container group profile properties
     */
    private ContainerGroupProfilePropertiesProperties innerProperties = new ContainerGroupProfilePropertiesProperties();

    /**
     * Creates an instance of ContainerGroupProfileProperties class.
     */
    public ContainerGroupProfileProperties() {
    }

    /**
     * Get the innerProperties property: The container group profile properties.
     * 
     * @return the innerProperties value.
     */
    private ContainerGroupProfilePropertiesProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Set the innerProperties property: The container group profile properties.
     * 
     * @param innerProperties the innerProperties value to set.
     * @return the ContainerGroupProfileProperties object itself.
     */
    ContainerGroupProfileProperties withInnerProperties(ContainerGroupProfilePropertiesProperties innerProperties) {
        this.innerProperties = innerProperties;
        return this;
    }

    /**
     * Get the containers property: The containers within the container group.
     * 
     * @return the containers value.
     */
    public List<Container> containers() {
        return this.innerProperties() == null ? null : this.innerProperties().containers();
    }

    /**
     * Set the containers property: The containers within the container group.
     * 
     * @param containers the containers value to set.
     * @return the ContainerGroupProfileProperties object itself.
     */
    public ContainerGroupProfileProperties withContainers(List<Container> containers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfilePropertiesProperties();
        }
        this.innerProperties().withContainers(containers);
        return this;
    }

    /**
     * Get the imageRegistryCredentials property: The image registry credentials by which the container group is created
     * from.
     * 
     * @return the imageRegistryCredentials value.
     */
    public List<ImageRegistryCredential> imageRegistryCredentials() {
        return this.innerProperties() == null ? null : this.innerProperties().imageRegistryCredentials();
    }

    /**
     * Set the imageRegistryCredentials property: The image registry credentials by which the container group is created
     * from.
     * 
     * @param imageRegistryCredentials the imageRegistryCredentials value to set.
     * @return the ContainerGroupProfileProperties object itself.
     */
    public ContainerGroupProfileProperties
        withImageRegistryCredentials(List<ImageRegistryCredential> imageRegistryCredentials) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfilePropertiesProperties();
        }
        this.innerProperties().withImageRegistryCredentials(imageRegistryCredentials);
        return this;
    }

    /**
     * Get the restartPolicy property: Restart policy for all containers within the container group.
     * - `Always` Always restart
     * - `OnFailure` Restart on failure
     * - `Never` Never restart.
     * 
     * @return the restartPolicy value.
     */
    public ContainerGroupRestartPolicy restartPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().restartPolicy();
    }

    /**
     * Set the restartPolicy property: Restart policy for all containers within the container group.
     * - `Always` Always restart
     * - `OnFailure` Restart on failure
     * - `Never` Never restart.
     * 
     * @param restartPolicy the restartPolicy value to set.
     * @return the ContainerGroupProfileProperties object itself.
     */
    public ContainerGroupProfileProperties withRestartPolicy(ContainerGroupRestartPolicy restartPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfilePropertiesProperties();
        }
        this.innerProperties().withRestartPolicy(restartPolicy);
        return this;
    }

    /**
     * Get the ipAddress property: The IP address type of the container group.
     * 
     * @return the ipAddress value.
     */
    public IpAddress ipAddress() {
        return this.innerProperties() == null ? null : this.innerProperties().ipAddress();
    }

    /**
     * Set the ipAddress property: The IP address type of the container group.
     * 
     * @param ipAddress the ipAddress value to set.
     * @return the ContainerGroupProfileProperties object itself.
     */
    public ContainerGroupProfileProperties withIpAddress(IpAddress ipAddress) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfilePropertiesProperties();
        }
        this.innerProperties().withIpAddress(ipAddress);
        return this;
    }

    /**
     * Get the osType property: The operating system type required by the containers in the container group.
     * 
     * @return the osType value.
     */
    public OperatingSystemTypes osType() {
        return this.innerProperties() == null ? null : this.innerProperties().osType();
    }

    /**
     * Set the osType property: The operating system type required by the containers in the container group.
     * 
     * @param osType the osType value to set.
     * @return the ContainerGroupProfileProperties object itself.
     */
    public ContainerGroupProfileProperties withOsType(OperatingSystemTypes osType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfilePropertiesProperties();
        }
        this.innerProperties().withOsType(osType);
        return this;
    }

    /**
     * Get the volumes property: The list of volumes that can be mounted by containers in this container group.
     * 
     * @return the volumes value.
     */
    public List<Volume> volumes() {
        return this.innerProperties() == null ? null : this.innerProperties().volumes();
    }

    /**
     * Set the volumes property: The list of volumes that can be mounted by containers in this container group.
     * 
     * @param volumes the volumes value to set.
     * @return the ContainerGroupProfileProperties object itself.
     */
    public ContainerGroupProfileProperties withVolumes(List<Volume> volumes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfilePropertiesProperties();
        }
        this.innerProperties().withVolumes(volumes);
        return this;
    }

    /**
     * Get the diagnostics property: The diagnostic information for a container group.
     * 
     * @return the diagnostics value.
     */
    public ContainerGroupDiagnostics diagnostics() {
        return this.innerProperties() == null ? null : this.innerProperties().diagnostics();
    }

    /**
     * Set the diagnostics property: The diagnostic information for a container group.
     * 
     * @param diagnostics the diagnostics value to set.
     * @return the ContainerGroupProfileProperties object itself.
     */
    public ContainerGroupProfileProperties withDiagnostics(ContainerGroupDiagnostics diagnostics) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfilePropertiesProperties();
        }
        this.innerProperties().withDiagnostics(diagnostics);
        return this;
    }

    /**
     * Get the sku property: The SKU for a container group.
     * 
     * @return the sku value.
     */
    public ContainerGroupSku sku() {
        return this.innerProperties() == null ? null : this.innerProperties().sku();
    }

    /**
     * Set the sku property: The SKU for a container group.
     * 
     * @param sku the sku value to set.
     * @return the ContainerGroupProfileProperties object itself.
     */
    public ContainerGroupProfileProperties withSku(ContainerGroupSku sku) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfilePropertiesProperties();
        }
        this.innerProperties().withSku(sku);
        return this;
    }

    /**
     * Get the encryptionProperties property: The encryption properties for a container group.
     * 
     * @return the encryptionProperties value.
     */
    public EncryptionProperties encryptionProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().encryptionProperties();
    }

    /**
     * Set the encryptionProperties property: The encryption properties for a container group.
     * 
     * @param encryptionProperties the encryptionProperties value to set.
     * @return the ContainerGroupProfileProperties object itself.
     */
    public ContainerGroupProfileProperties withEncryptionProperties(EncryptionProperties encryptionProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfilePropertiesProperties();
        }
        this.innerProperties().withEncryptionProperties(encryptionProperties);
        return this;
    }

    /**
     * Get the initContainers property: The init containers for a container group.
     * 
     * @return the initContainers value.
     */
    public List<InitContainerDefinition> initContainers() {
        return this.innerProperties() == null ? null : this.innerProperties().initContainers();
    }

    /**
     * Set the initContainers property: The init containers for a container group.
     * 
     * @param initContainers the initContainers value to set.
     * @return the ContainerGroupProfileProperties object itself.
     */
    public ContainerGroupProfileProperties withInitContainers(List<InitContainerDefinition> initContainers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfilePropertiesProperties();
        }
        this.innerProperties().withInitContainers(initContainers);
        return this;
    }

    /**
     * Get the extensions property: extensions used by virtual kubelet.
     * 
     * @return the extensions value.
     */
    public List<DeploymentExtensionSpec> extensions() {
        return this.innerProperties() == null ? null : this.innerProperties().extensions();
    }

    /**
     * Set the extensions property: extensions used by virtual kubelet.
     * 
     * @param extensions the extensions value to set.
     * @return the ContainerGroupProfileProperties object itself.
     */
    public ContainerGroupProfileProperties withExtensions(List<DeploymentExtensionSpec> extensions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfilePropertiesProperties();
        }
        this.innerProperties().withExtensions(extensions);
        return this;
    }

    /**
     * Get the confidentialComputeProperties property: The properties for confidential container group.
     * 
     * @return the confidentialComputeProperties value.
     */
    public ConfidentialComputeProperties confidentialComputeProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().confidentialComputeProperties();
    }

    /**
     * Set the confidentialComputeProperties property: The properties for confidential container group.
     * 
     * @param confidentialComputeProperties the confidentialComputeProperties value to set.
     * @return the ContainerGroupProfileProperties object itself.
     */
    public ContainerGroupProfileProperties
        withConfidentialComputeProperties(ConfidentialComputeProperties confidentialComputeProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfilePropertiesProperties();
        }
        this.innerProperties().withConfidentialComputeProperties(confidentialComputeProperties);
        return this;
    }

    /**
     * Get the priority property: The priority of the container group.
     * 
     * @return the priority value.
     */
    public ContainerGroupPriority priority() {
        return this.innerProperties() == null ? null : this.innerProperties().priority();
    }

    /**
     * Set the priority property: The priority of the container group.
     * 
     * @param priority the priority value to set.
     * @return the ContainerGroupProfileProperties object itself.
     */
    public ContainerGroupProfileProperties withPriority(ContainerGroupPriority priority) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfilePropertiesProperties();
        }
        this.innerProperties().withPriority(priority);
        return this;
    }

    /**
     * Get the revision property: The container group profile current revision number. This only appears in the
     * response.
     * 
     * @return the revision value.
     */
    public Integer revision() {
        return this.innerProperties() == null ? null : this.innerProperties().revision();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model ContainerGroupProfileProperties"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ContainerGroupProfileProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerGroupProfileProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerGroupProfileProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContainerGroupProfileProperties.
     */
    public static ContainerGroupProfileProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContainerGroupProfileProperties deserializedContainerGroupProfileProperties
                = new ContainerGroupProfileProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedContainerGroupProfileProperties.innerProperties
                        = ContainerGroupProfilePropertiesProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContainerGroupProfileProperties;
        });
    }
}
