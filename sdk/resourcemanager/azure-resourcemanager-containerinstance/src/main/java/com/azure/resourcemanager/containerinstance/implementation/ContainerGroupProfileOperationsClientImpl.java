// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.containerinstance.fluent.ContainerGroupProfileOperationsClient;
import com.azure.resourcemanager.containerinstance.fluent.models.ContainerGroupProfileInner;
import com.azure.resourcemanager.containerinstance.models.ContainerGroupProfileListResult;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ContainerGroupProfileOperationsClient.
 */
public final class ContainerGroupProfileOperationsClientImpl implements ContainerGroupProfileOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ContainerGroupProfileOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final ContainerInstanceManagementClientImpl client;

    /**
     * Initializes an instance of ContainerGroupProfileOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ContainerGroupProfileOperationsClientImpl(ContainerInstanceManagementClientImpl client) {
        this.service = RestProxy.create(ContainerGroupProfileOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ContainerInstanceManagementClientContainerGroupProfileOperations to
     * be used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ContainerInstanceMan")
    public interface ContainerGroupProfileOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}/revisions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ContainerGroupProfileListResult>> listAllRevisions(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("containerGroupProfileName") String containerGroupProfileName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}/revisions/{revisionNumber}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ContainerGroupProfileInner>> getByRevisionNumber(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("containerGroupProfileName") String containerGroupProfileName,
            @PathParam("revisionNumber") String revisionNumber, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ContainerGroupProfileListResult>> listAllRevisionsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group.
     * 
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group. This operation returns properties of each revision of the specified container group profile including
     * containers, image registry credentials, restart policy, IP address type, OS type volumes, revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName The name of the container group profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the revisions of the specified container group profile in the given subscription and
     * resource group along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ContainerGroupProfileInner>> listAllRevisionsSinglePageAsync(String resourceGroupName,
        String containerGroupProfileName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listAllRevisions(this.client.getEndpoint(), this.client.getSubscriptionId(),
                this.client.getApiVersion(), resourceGroupName, containerGroupProfileName, accept, context))
            .<PagedResponse<ContainerGroupProfileInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group.
     * 
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group. This operation returns properties of each revision of the specified container group profile including
     * containers, image registry credentials, restart policy, IP address type, OS type volumes, revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName The name of the container group profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the revisions of the specified container group profile in the given subscription and
     * resource group along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ContainerGroupProfileInner>> listAllRevisionsSinglePageAsync(String resourceGroupName,
        String containerGroupProfileName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listAllRevisions(this.client.getEndpoint(), this.client.getSubscriptionId(), this.client.getApiVersion(),
                resourceGroupName, containerGroupProfileName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group.
     * 
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group. This operation returns properties of each revision of the specified container group profile including
     * containers, image registry credentials, restart policy, IP address type, OS type volumes, revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName The name of the container group profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the revisions of the specified container group profile in the given subscription and
     * resource group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ContainerGroupProfileInner> listAllRevisionsAsync(String resourceGroupName,
        String containerGroupProfileName) {
        return new PagedFlux<>(() -> listAllRevisionsSinglePageAsync(resourceGroupName, containerGroupProfileName),
            nextLink -> listAllRevisionsNextSinglePageAsync(nextLink));
    }

    /**
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group.
     * 
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group. This operation returns properties of each revision of the specified container group profile including
     * containers, image registry credentials, restart policy, IP address type, OS type volumes, revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName The name of the container group profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the revisions of the specified container group profile in the given subscription and
     * resource group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ContainerGroupProfileInner> listAllRevisionsAsync(String resourceGroupName,
        String containerGroupProfileName, Context context) {
        return new PagedFlux<>(
            () -> listAllRevisionsSinglePageAsync(resourceGroupName, containerGroupProfileName, context),
            nextLink -> listAllRevisionsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group.
     * 
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group. This operation returns properties of each revision of the specified container group profile including
     * containers, image registry credentials, restart policy, IP address type, OS type volumes, revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName The name of the container group profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the revisions of the specified container group profile in the given subscription and
     * resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ContainerGroupProfileInner> listAllRevisions(String resourceGroupName,
        String containerGroupProfileName) {
        return new PagedIterable<>(listAllRevisionsAsync(resourceGroupName, containerGroupProfileName));
    }

    /**
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group.
     * 
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group. This operation returns properties of each revision of the specified container group profile including
     * containers, image registry credentials, restart policy, IP address type, OS type volumes, revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName The name of the container group profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the revisions of the specified container group profile in the given subscription and
     * resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ContainerGroupProfileInner> listAllRevisions(String resourceGroupName,
        String containerGroupProfileName, Context context) {
        return new PagedIterable<>(listAllRevisionsAsync(resourceGroupName, containerGroupProfileName, context));
    }

    /**
     * Get the properties of the specified revision of the container group profile.
     * 
     * Gets the properties of the specified revision of the container group profile in the given subscription and
     * resource group. The operation returns the properties of container group profile including containers, image
     * registry credentials, restart policy, IP address type, OS type, volumes, current revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName The name of the container group profile.
     * @param revisionNumber The revision number of the container group profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified revision of the container group profile in the given subscription and
     * resource group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ContainerGroupProfileInner>> getByRevisionNumberWithResponseAsync(String resourceGroupName,
        String containerGroupProfileName, String revisionNumber) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        if (revisionNumber == null) {
            return Mono.error(new IllegalArgumentException("Parameter revisionNumber is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByRevisionNumber(this.client.getEndpoint(),
                this.client.getSubscriptionId(), this.client.getApiVersion(), resourceGroupName,
                containerGroupProfileName, revisionNumber, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the properties of the specified revision of the container group profile.
     * 
     * Gets the properties of the specified revision of the container group profile in the given subscription and
     * resource group. The operation returns the properties of container group profile including containers, image
     * registry credentials, restart policy, IP address type, OS type, volumes, current revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName The name of the container group profile.
     * @param revisionNumber The revision number of the container group profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified revision of the container group profile in the given subscription and
     * resource group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ContainerGroupProfileInner>> getByRevisionNumberWithResponseAsync(String resourceGroupName,
        String containerGroupProfileName, String revisionNumber, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        if (revisionNumber == null) {
            return Mono.error(new IllegalArgumentException("Parameter revisionNumber is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getByRevisionNumber(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getApiVersion(), resourceGroupName, containerGroupProfileName, revisionNumber, accept, context);
    }

    /**
     * Get the properties of the specified revision of the container group profile.
     * 
     * Gets the properties of the specified revision of the container group profile in the given subscription and
     * resource group. The operation returns the properties of container group profile including containers, image
     * registry credentials, restart policy, IP address type, OS type, volumes, current revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName The name of the container group profile.
     * @param revisionNumber The revision number of the container group profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified revision of the container group profile in the given subscription and
     * resource group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ContainerGroupProfileInner> getByRevisionNumberAsync(String resourceGroupName,
        String containerGroupProfileName, String revisionNumber) {
        return getByRevisionNumberWithResponseAsync(resourceGroupName, containerGroupProfileName, revisionNumber)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the properties of the specified revision of the container group profile.
     * 
     * Gets the properties of the specified revision of the container group profile in the given subscription and
     * resource group. The operation returns the properties of container group profile including containers, image
     * registry credentials, restart policy, IP address type, OS type, volumes, current revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName The name of the container group profile.
     * @param revisionNumber The revision number of the container group profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified revision of the container group profile in the given subscription and
     * resource group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ContainerGroupProfileInner> getByRevisionNumberWithResponse(String resourceGroupName,
        String containerGroupProfileName, String revisionNumber, Context context) {
        return getByRevisionNumberWithResponseAsync(resourceGroupName, containerGroupProfileName, revisionNumber,
            context).block();
    }

    /**
     * Get the properties of the specified revision of the container group profile.
     * 
     * Gets the properties of the specified revision of the container group profile in the given subscription and
     * resource group. The operation returns the properties of container group profile including containers, image
     * registry credentials, restart policy, IP address type, OS type, volumes, current revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName The name of the container group profile.
     * @param revisionNumber The revision number of the container group profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified revision of the container group profile in the given subscription and
     * resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ContainerGroupProfileInner getByRevisionNumber(String resourceGroupName, String containerGroupProfileName,
        String revisionNumber) {
        return getByRevisionNumberWithResponse(resourceGroupName, containerGroupProfileName, revisionNumber,
            Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the container group profile list response that contains the container group profile properties along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ContainerGroupProfileInner>> listAllRevisionsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listAllRevisionsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ContainerGroupProfileInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the container group profile list response that contains the container group profile properties along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ContainerGroupProfileInner>> listAllRevisionsNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listAllRevisionsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
