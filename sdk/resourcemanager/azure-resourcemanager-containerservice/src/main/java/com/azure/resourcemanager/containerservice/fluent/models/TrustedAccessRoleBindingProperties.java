// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerservice.models.TrustedAccessRoleBindingProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Properties for trusted access role binding.
 */
@Fluent
public final class TrustedAccessRoleBindingProperties implements JsonSerializable<TrustedAccessRoleBindingProperties> {
    /*
     * The current provisioning state of trusted access role binding.
     */
    private TrustedAccessRoleBindingProvisioningState provisioningState;

    /*
     * The ARM resource ID of source resource that trusted access is configured for.
     */
    private String sourceResourceId;

    /*
     * A list of roles to bind, each item is a resource type qualified role name. For example:
     * 'Microsoft.MachineLearningServices/workspaces/reader'.
     */
    private List<String> roles;

    /**
     * Creates an instance of TrustedAccessRoleBindingProperties class.
     */
    public TrustedAccessRoleBindingProperties() {
    }

    /**
     * Get the provisioningState property: The current provisioning state of trusted access role binding.
     * 
     * @return the provisioningState value.
     */
    public TrustedAccessRoleBindingProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the sourceResourceId property: The ARM resource ID of source resource that trusted access is configured for.
     * 
     * @return the sourceResourceId value.
     */
    public String sourceResourceId() {
        return this.sourceResourceId;
    }

    /**
     * Set the sourceResourceId property: The ARM resource ID of source resource that trusted access is configured for.
     * 
     * @param sourceResourceId the sourceResourceId value to set.
     * @return the TrustedAccessRoleBindingProperties object itself.
     */
    public TrustedAccessRoleBindingProperties withSourceResourceId(String sourceResourceId) {
        this.sourceResourceId = sourceResourceId;
        return this;
    }

    /**
     * Get the roles property: A list of roles to bind, each item is a resource type qualified role name. For example:
     * 'Microsoft.MachineLearningServices/workspaces/reader'.
     * 
     * @return the roles value.
     */
    public List<String> roles() {
        return this.roles;
    }

    /**
     * Set the roles property: A list of roles to bind, each item is a resource type qualified role name. For example:
     * 'Microsoft.MachineLearningServices/workspaces/reader'.
     * 
     * @param roles the roles value to set.
     * @return the TrustedAccessRoleBindingProperties object itself.
     */
    public TrustedAccessRoleBindingProperties withRoles(List<String> roles) {
        this.roles = roles;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceResourceId in model TrustedAccessRoleBindingProperties"));
        }
        if (roles() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property roles in model TrustedAccessRoleBindingProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TrustedAccessRoleBindingProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceResourceId", this.sourceResourceId);
        jsonWriter.writeArrayField("roles", this.roles, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrustedAccessRoleBindingProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrustedAccessRoleBindingProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TrustedAccessRoleBindingProperties.
     */
    public static TrustedAccessRoleBindingProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrustedAccessRoleBindingProperties deserializedTrustedAccessRoleBindingProperties
                = new TrustedAccessRoleBindingProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceResourceId".equals(fieldName)) {
                    deserializedTrustedAccessRoleBindingProperties.sourceResourceId = reader.getString();
                } else if ("roles".equals(fieldName)) {
                    List<String> roles = reader.readArray(reader1 -> reader1.getString());
                    deserializedTrustedAccessRoleBindingProperties.roles = roles;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedTrustedAccessRoleBindingProperties.provisioningState
                        = TrustedAccessRoleBindingProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrustedAccessRoleBindingProperties;
        });
    }
}
