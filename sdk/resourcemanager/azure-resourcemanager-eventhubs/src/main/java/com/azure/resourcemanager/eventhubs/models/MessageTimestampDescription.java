// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventhubs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of MessageTimestamp Description.
 */
@Fluent
public final class MessageTimestampDescription implements JsonSerializable<MessageTimestampDescription> {
    /*
     * Denotes the type of timestamp the message will hold.Two types of timestamp types - "AppendTime" and "CreateTime".
     * AppendTime refers the time in which message got appended inside broker log. CreateTime refers to the time in
     * which the message was generated on source side and producers can set this timestamp while sending the message.
     * Default value is AppendTime. If you are using AMQP protocol, CreateTime equals AppendTime and its behavior
     * remains the same.
     */
    private TimestampType timestampType;

    /**
     * Creates an instance of MessageTimestampDescription class.
     */
    public MessageTimestampDescription() {
    }

    /**
     * Get the timestampType property: Denotes the type of timestamp the message will hold.Two types of timestamp types
     * - "AppendTime" and "CreateTime". AppendTime refers the time in which message got appended inside broker log.
     * CreateTime refers to the time in which the message was generated on source side and producers can set this
     * timestamp while sending the message. Default value is AppendTime. If you are using AMQP protocol, CreateTime
     * equals AppendTime and its behavior remains the same.
     * 
     * @return the timestampType value.
     */
    public TimestampType timestampType() {
        return this.timestampType;
    }

    /**
     * Set the timestampType property: Denotes the type of timestamp the message will hold.Two types of timestamp types
     * - "AppendTime" and "CreateTime". AppendTime refers the time in which message got appended inside broker log.
     * CreateTime refers to the time in which the message was generated on source side and producers can set this
     * timestamp while sending the message. Default value is AppendTime. If you are using AMQP protocol, CreateTime
     * equals AppendTime and its behavior remains the same.
     * 
     * @param timestampType the timestampType value to set.
     * @return the MessageTimestampDescription object itself.
     */
    public MessageTimestampDescription withTimestampType(TimestampType timestampType) {
        this.timestampType = timestampType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timestampType", this.timestampType == null ? null : this.timestampType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageTimestampDescription from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageTimestampDescription if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MessageTimestampDescription.
     */
    public static MessageTimestampDescription fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MessageTimestampDescription deserializedMessageTimestampDescription = new MessageTimestampDescription();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timestampType".equals(fieldName)) {
                    deserializedMessageTimestampDescription.timestampType
                        = TimestampType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMessageTimestampDescription;
        });
    }
}
