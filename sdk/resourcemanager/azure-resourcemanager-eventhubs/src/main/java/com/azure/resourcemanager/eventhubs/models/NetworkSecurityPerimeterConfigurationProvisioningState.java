// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventhubs.models;

import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Provisioning state of NetworkSecurityPerimeter configuration propagation.
 */
public final class NetworkSecurityPerimeterConfigurationProvisioningState
    extends ExpandableStringEnum<NetworkSecurityPerimeterConfigurationProvisioningState> {
    /**
     * Static value Unknown for NetworkSecurityPerimeterConfigurationProvisioningState.
     */
    public static final NetworkSecurityPerimeterConfigurationProvisioningState UNKNOWN = fromString("Unknown");

    /**
     * Static value Creating for NetworkSecurityPerimeterConfigurationProvisioningState.
     */
    public static final NetworkSecurityPerimeterConfigurationProvisioningState CREATING = fromString("Creating");

    /**
     * Static value Updating for NetworkSecurityPerimeterConfigurationProvisioningState.
     */
    public static final NetworkSecurityPerimeterConfigurationProvisioningState UPDATING = fromString("Updating");

    /**
     * Static value Accepted for NetworkSecurityPerimeterConfigurationProvisioningState.
     */
    public static final NetworkSecurityPerimeterConfigurationProvisioningState ACCEPTED = fromString("Accepted");

    /**
     * Static value InvalidResponse for NetworkSecurityPerimeterConfigurationProvisioningState.
     */
    public static final NetworkSecurityPerimeterConfigurationProvisioningState INVALID_RESPONSE
        = fromString("InvalidResponse");

    /**
     * Static value Succeeded for NetworkSecurityPerimeterConfigurationProvisioningState.
     */
    public static final NetworkSecurityPerimeterConfigurationProvisioningState SUCCEEDED = fromString("Succeeded");

    /**
     * Static value SucceededWithIssues for NetworkSecurityPerimeterConfigurationProvisioningState.
     */
    public static final NetworkSecurityPerimeterConfigurationProvisioningState SUCCEEDED_WITH_ISSUES
        = fromString("SucceededWithIssues");

    /**
     * Static value Failed for NetworkSecurityPerimeterConfigurationProvisioningState.
     */
    public static final NetworkSecurityPerimeterConfigurationProvisioningState FAILED = fromString("Failed");

    /**
     * Static value Deleting for NetworkSecurityPerimeterConfigurationProvisioningState.
     */
    public static final NetworkSecurityPerimeterConfigurationProvisioningState DELETING = fromString("Deleting");

    /**
     * Static value Deleted for NetworkSecurityPerimeterConfigurationProvisioningState.
     */
    public static final NetworkSecurityPerimeterConfigurationProvisioningState DELETED = fromString("Deleted");

    /**
     * Static value Canceled for NetworkSecurityPerimeterConfigurationProvisioningState.
     */
    public static final NetworkSecurityPerimeterConfigurationProvisioningState CANCELED = fromString("Canceled");

    /**
     * Creates a new instance of NetworkSecurityPerimeterConfigurationProvisioningState value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Deprecated
    public NetworkSecurityPerimeterConfigurationProvisioningState() {
    }

    /**
     * Creates or finds a NetworkSecurityPerimeterConfigurationProvisioningState from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding NetworkSecurityPerimeterConfigurationProvisioningState.
     */
    public static NetworkSecurityPerimeterConfigurationProvisioningState fromString(String name) {
        return fromString(name, NetworkSecurityPerimeterConfigurationProvisioningState.class);
    }

    /**
     * Gets known NetworkSecurityPerimeterConfigurationProvisioningState values.
     * 
     * @return known NetworkSecurityPerimeterConfigurationProvisioningState values.
     */
    public static Collection<NetworkSecurityPerimeterConfigurationProvisioningState> values() {
        return values(NetworkSecurityPerimeterConfigurationProvisioningState.class);
    }
}
