// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventhubs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * GeoDR Replication properties.
 */
@Fluent
public final class GeoDataReplicationProperties implements JsonSerializable<GeoDataReplicationProperties> {
    /*
     * The maximum acceptable lag for data replication operations from the primary replica to a quorum of secondary
     * replicas. When the lag exceeds the configured amount, operations on the primary replica will be failed. The
     * allowed values are 0 and 5 minutes to 1 day.
     */
    private Integer maxReplicationLagDurationInSeconds;

    /*
     * A list of regions where replicas of the namespace are maintained.
     */
    private List<NamespaceReplicaLocation> locations;

    /**
     * Creates an instance of GeoDataReplicationProperties class.
     */
    public GeoDataReplicationProperties() {
    }

    /**
     * Get the maxReplicationLagDurationInSeconds property: The maximum acceptable lag for data replication operations
     * from the primary replica to a quorum of secondary replicas. When the lag exceeds the configured amount,
     * operations on the primary replica will be failed. The allowed values are 0 and 5 minutes to 1 day.
     * 
     * @return the maxReplicationLagDurationInSeconds value.
     */
    public Integer maxReplicationLagDurationInSeconds() {
        return this.maxReplicationLagDurationInSeconds;
    }

    /**
     * Set the maxReplicationLagDurationInSeconds property: The maximum acceptable lag for data replication operations
     * from the primary replica to a quorum of secondary replicas. When the lag exceeds the configured amount,
     * operations on the primary replica will be failed. The allowed values are 0 and 5 minutes to 1 day.
     * 
     * @param maxReplicationLagDurationInSeconds the maxReplicationLagDurationInSeconds value to set.
     * @return the GeoDataReplicationProperties object itself.
     */
    public GeoDataReplicationProperties
        withMaxReplicationLagDurationInSeconds(Integer maxReplicationLagDurationInSeconds) {
        this.maxReplicationLagDurationInSeconds = maxReplicationLagDurationInSeconds;
        return this;
    }

    /**
     * Get the locations property: A list of regions where replicas of the namespace are maintained.
     * 
     * @return the locations value.
     */
    public List<NamespaceReplicaLocation> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: A list of regions where replicas of the namespace are maintained.
     * 
     * @param locations the locations value to set.
     * @return the GeoDataReplicationProperties object itself.
     */
    public GeoDataReplicationProperties withLocations(List<NamespaceReplicaLocation> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (locations() != null) {
            locations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("maxReplicationLagDurationInSeconds", this.maxReplicationLagDurationInSeconds);
        jsonWriter.writeArrayField("locations", this.locations, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeoDataReplicationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeoDataReplicationProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GeoDataReplicationProperties.
     */
    public static GeoDataReplicationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeoDataReplicationProperties deserializedGeoDataReplicationProperties = new GeoDataReplicationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxReplicationLagDurationInSeconds".equals(fieldName)) {
                    deserializedGeoDataReplicationProperties.maxReplicationLagDurationInSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else if ("locations".equals(fieldName)) {
                    List<NamespaceReplicaLocation> locations
                        = reader.readArray(reader1 -> NamespaceReplicaLocation.fromJson(reader1));
                    deserializedGeoDataReplicationProperties.locations = locations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGeoDataReplicationProperties;
        });
    }
}
