// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventhubs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The FailOver model.
 */
@Fluent
public final class FailOverInner implements JsonSerializable<FailOverInner> {
    /*
     * The properties property.
     */
    private FailOverProperties innerProperties;

    /**
     * Creates an instance of FailOverInner class.
     */
    public FailOverInner() {
    }

    /**
     * Get the innerProperties property: The properties property.
     * 
     * @return the innerProperties value.
     */
    private FailOverProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the primaryLocation property: Query parameter for the new primary location after failover.
     * 
     * @return the primaryLocation value.
     */
    public String primaryLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().primaryLocation();
    }

    /**
     * Set the primaryLocation property: Query parameter for the new primary location after failover.
     * 
     * @param primaryLocation the primaryLocation value to set.
     * @return the FailOverInner object itself.
     */
    public FailOverInner withPrimaryLocation(String primaryLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FailOverProperties();
        }
        this.innerProperties().withPrimaryLocation(primaryLocation);
        return this;
    }

    /**
     * Get the force property: If Force is false then graceful failover is attempted after ensuring no data loss. If
     * Force flag is set to true, Forced failover is attempted with possible data loss.
     * 
     * @return the force value.
     */
    public Boolean force() {
        return this.innerProperties() == null ? null : this.innerProperties().force();
    }

    /**
     * Set the force property: If Force is false then graceful failover is attempted after ensuring no data loss. If
     * Force flag is set to true, Forced failover is attempted with possible data loss.
     * 
     * @param force the force value to set.
     * @return the FailOverInner object itself.
     */
    public FailOverInner withForce(Boolean force) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FailOverProperties();
        }
        this.innerProperties().withForce(force);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FailOverInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FailOverInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FailOverInner.
     */
    public static FailOverInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FailOverInner deserializedFailOverInner = new FailOverInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedFailOverInner.innerProperties = FailOverProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFailOverInner;
        });
    }
}
