// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventhubs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Namespace replication properties.
 */
@Fluent
public final class NamespaceReplicaLocation implements JsonSerializable<NamespaceReplicaLocation> {
    /*
     * Azure regions where a replica of the namespace is maintained
     */
    private String locationName;

    /*
     * GeoDR Role Types
     */
    private GeoDRRoleType roleType;

    /*
     * state of Namespace replica.
     */
    private String replicaState;

    /*
     * Optional property that denotes the ARM ID of the Cluster. This is required, if a namespace replica should be
     * placed in a Dedicated Event Hub Cluster
     */
    private String clusterArmId;

    /**
     * Creates an instance of NamespaceReplicaLocation class.
     */
    public NamespaceReplicaLocation() {
    }

    /**
     * Get the locationName property: Azure regions where a replica of the namespace is maintained.
     * 
     * @return the locationName value.
     */
    public String locationName() {
        return this.locationName;
    }

    /**
     * Set the locationName property: Azure regions where a replica of the namespace is maintained.
     * 
     * @param locationName the locationName value to set.
     * @return the NamespaceReplicaLocation object itself.
     */
    public NamespaceReplicaLocation withLocationName(String locationName) {
        this.locationName = locationName;
        return this;
    }

    /**
     * Get the roleType property: GeoDR Role Types.
     * 
     * @return the roleType value.
     */
    public GeoDRRoleType roleType() {
        return this.roleType;
    }

    /**
     * Set the roleType property: GeoDR Role Types.
     * 
     * @param roleType the roleType value to set.
     * @return the NamespaceReplicaLocation object itself.
     */
    public NamespaceReplicaLocation withRoleType(GeoDRRoleType roleType) {
        this.roleType = roleType;
        return this;
    }

    /**
     * Get the replicaState property: state of Namespace replica.
     * 
     * @return the replicaState value.
     */
    public String replicaState() {
        return this.replicaState;
    }

    /**
     * Get the clusterArmId property: Optional property that denotes the ARM ID of the Cluster. This is required, if a
     * namespace replica should be placed in a Dedicated Event Hub Cluster.
     * 
     * @return the clusterArmId value.
     */
    public String clusterArmId() {
        return this.clusterArmId;
    }

    /**
     * Set the clusterArmId property: Optional property that denotes the ARM ID of the Cluster. This is required, if a
     * namespace replica should be placed in a Dedicated Event Hub Cluster.
     * 
     * @param clusterArmId the clusterArmId value to set.
     * @return the NamespaceReplicaLocation object itself.
     */
    public NamespaceReplicaLocation withClusterArmId(String clusterArmId) {
        this.clusterArmId = clusterArmId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("locationName", this.locationName);
        jsonWriter.writeStringField("roleType", this.roleType == null ? null : this.roleType.toString());
        jsonWriter.writeStringField("clusterArmId", this.clusterArmId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceReplicaLocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceReplicaLocation if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NamespaceReplicaLocation.
     */
    public static NamespaceReplicaLocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceReplicaLocation deserializedNamespaceReplicaLocation = new NamespaceReplicaLocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("locationName".equals(fieldName)) {
                    deserializedNamespaceReplicaLocation.locationName = reader.getString();
                } else if ("roleType".equals(fieldName)) {
                    deserializedNamespaceReplicaLocation.roleType = GeoDRRoleType.fromString(reader.getString());
                } else if ("replicaState".equals(fieldName)) {
                    deserializedNamespaceReplicaLocation.replicaState = reader.getString();
                } else if ("clusterArmId".equals(fieldName)) {
                    deserializedNamespaceReplicaLocation.clusterArmId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceReplicaLocation;
        });
    }
}
