// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.cosmos.models.BackupState;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * A restorable backup of a Cassandra cluster.
 */
@Fluent
public final class BackupResourceInner implements JsonSerializable<BackupResourceInner> {
    /*
     * The unique identifier of backup.
     */
    private String backupId;

    /*
     * The current state of the backup.
     */
    private BackupState backupState;

    /*
     * The time at which the backup process begins.
     */
    private OffsetDateTime backupStartTimestamp;

    /*
     * The time at which the backup process ends.
     */
    private OffsetDateTime backupStopTimestamp;

    /*
     * The time at which the backup will expire.
     */
    private OffsetDateTime backupExpiryTimestamp;

    /**
     * Creates an instance of BackupResourceInner class.
     */
    public BackupResourceInner() {
    }

    /**
     * Get the backupId property: The unique identifier of backup.
     * 
     * @return the backupId value.
     */
    public String backupId() {
        return this.backupId;
    }

    /**
     * Set the backupId property: The unique identifier of backup.
     * 
     * @param backupId the backupId value to set.
     * @return the BackupResourceInner object itself.
     */
    public BackupResourceInner withBackupId(String backupId) {
        this.backupId = backupId;
        return this;
    }

    /**
     * Get the backupState property: The current state of the backup.
     * 
     * @return the backupState value.
     */
    public BackupState backupState() {
        return this.backupState;
    }

    /**
     * Set the backupState property: The current state of the backup.
     * 
     * @param backupState the backupState value to set.
     * @return the BackupResourceInner object itself.
     */
    public BackupResourceInner withBackupState(BackupState backupState) {
        this.backupState = backupState;
        return this;
    }

    /**
     * Get the backupStartTimestamp property: The time at which the backup process begins.
     * 
     * @return the backupStartTimestamp value.
     */
    public OffsetDateTime backupStartTimestamp() {
        return this.backupStartTimestamp;
    }

    /**
     * Set the backupStartTimestamp property: The time at which the backup process begins.
     * 
     * @param backupStartTimestamp the backupStartTimestamp value to set.
     * @return the BackupResourceInner object itself.
     */
    public BackupResourceInner withBackupStartTimestamp(OffsetDateTime backupStartTimestamp) {
        this.backupStartTimestamp = backupStartTimestamp;
        return this;
    }

    /**
     * Get the backupStopTimestamp property: The time at which the backup process ends.
     * 
     * @return the backupStopTimestamp value.
     */
    public OffsetDateTime backupStopTimestamp() {
        return this.backupStopTimestamp;
    }

    /**
     * Set the backupStopTimestamp property: The time at which the backup process ends.
     * 
     * @param backupStopTimestamp the backupStopTimestamp value to set.
     * @return the BackupResourceInner object itself.
     */
    public BackupResourceInner withBackupStopTimestamp(OffsetDateTime backupStopTimestamp) {
        this.backupStopTimestamp = backupStopTimestamp;
        return this;
    }

    /**
     * Get the backupExpiryTimestamp property: The time at which the backup will expire.
     * 
     * @return the backupExpiryTimestamp value.
     */
    public OffsetDateTime backupExpiryTimestamp() {
        return this.backupExpiryTimestamp;
    }

    /**
     * Set the backupExpiryTimestamp property: The time at which the backup will expire.
     * 
     * @param backupExpiryTimestamp the backupExpiryTimestamp value to set.
     * @return the BackupResourceInner object itself.
     */
    public BackupResourceInner withBackupExpiryTimestamp(OffsetDateTime backupExpiryTimestamp) {
        this.backupExpiryTimestamp = backupExpiryTimestamp;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("backupId", this.backupId);
        jsonWriter.writeStringField("backupState", this.backupState == null ? null : this.backupState.toString());
        jsonWriter.writeStringField("backupStartTimestamp",
            this.backupStartTimestamp == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.backupStartTimestamp));
        jsonWriter.writeStringField("backupStopTimestamp",
            this.backupStopTimestamp == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.backupStopTimestamp));
        jsonWriter.writeStringField("backupExpiryTimestamp",
            this.backupExpiryTimestamp == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.backupExpiryTimestamp));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackupResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackupResourceInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BackupResourceInner.
     */
    public static BackupResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackupResourceInner deserializedBackupResourceInner = new BackupResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backupId".equals(fieldName)) {
                    deserializedBackupResourceInner.backupId = reader.getString();
                } else if ("backupState".equals(fieldName)) {
                    deserializedBackupResourceInner.backupState = BackupState.fromString(reader.getString());
                } else if ("backupStartTimestamp".equals(fieldName)) {
                    deserializedBackupResourceInner.backupStartTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("backupStopTimestamp".equals(fieldName)) {
                    deserializedBackupResourceInner.backupStopTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("backupExpiryTimestamp".equals(fieldName)) {
                    deserializedBackupResourceInner.backupExpiryTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackupResourceInner;
        });
    }
}
