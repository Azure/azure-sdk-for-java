// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.cosmos.models.Status;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Map;

/**
 * An Azure Cosmos DB Throughputpool.
 */
@Fluent
public final class ThroughputPoolResourceInner extends Resource {
    /*
     * Properties to update Azure Cosmos DB throughput pool.
     */
    @JsonProperty(value = "properties")
    private ThroughputPoolProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of ThroughputPoolResourceInner class.
     */
    public ThroughputPoolResourceInner() {
    }

    /**
     * Get the innerProperties property: Properties to update Azure Cosmos DB throughput pool.
     *
     * @return the innerProperties value.
     */
    private ThroughputPoolProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ThroughputPoolResourceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ThroughputPoolResourceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: A provisioning state of the ThroughputPool.
     *
     * @return the provisioningState value.
     */
    public Status provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Set the provisioningState property: A provisioning state of the ThroughputPool.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the ThroughputPoolResourceInner object itself.
     */
    public ThroughputPoolResourceInner withProvisioningState(Status provisioningState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ThroughputPoolProperties();
        }
        this.innerProperties().withProvisioningState(provisioningState);
        return this;
    }

    /**
     * Get the maxThroughput property: Value for throughput to be shared among CosmosDB resources in the pool.
     *
     * @return the maxThroughput value.
     */
    public Integer maxThroughput() {
        return this.innerProperties() == null ? null : this.innerProperties().maxThroughput();
    }

    /**
     * Set the maxThroughput property: Value for throughput to be shared among CosmosDB resources in the pool.
     *
     * @param maxThroughput the maxThroughput value to set.
     * @return the ThroughputPoolResourceInner object itself.
     */
    public ThroughputPoolResourceInner withMaxThroughput(Integer maxThroughput) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ThroughputPoolProperties();
        }
        this.innerProperties().withMaxThroughput(maxThroughput);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
