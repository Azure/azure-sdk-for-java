// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.cosmos.models.SupportedActions;
import java.io.IOException;

/**
 * A request object to enable/disable the chaos fault.
 */
@Fluent
public final class ChaosFaultProperties implements JsonSerializable<ChaosFaultProperties> {
    /*
     * Indicates whether what action to take for the Chaos Fault.
     */
    private SupportedActions action;

    /*
     * Region of the account where the Chaos Fault is to be enabled/disabled.
     */
    private String region;

    /*
     * Database name.
     */
    private String databaseName;

    /*
     * Container name.
     */
    private String containerName;

    /*
     * A provisioning state of the Chaos Fault.
     */
    private String provisioningState;

    /**
     * Creates an instance of ChaosFaultProperties class.
     */
    public ChaosFaultProperties() {
    }

    /**
     * Get the action property: Indicates whether what action to take for the Chaos Fault.
     * 
     * @return the action value.
     */
    public SupportedActions action() {
        return this.action;
    }

    /**
     * Set the action property: Indicates whether what action to take for the Chaos Fault.
     * 
     * @param action the action value to set.
     * @return the ChaosFaultProperties object itself.
     */
    public ChaosFaultProperties withAction(SupportedActions action) {
        this.action = action;
        return this;
    }

    /**
     * Get the region property: Region of the account where the Chaos Fault is to be enabled/disabled.
     * 
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Set the region property: Region of the account where the Chaos Fault is to be enabled/disabled.
     * 
     * @param region the region value to set.
     * @return the ChaosFaultProperties object itself.
     */
    public ChaosFaultProperties withRegion(String region) {
        this.region = region;
        return this;
    }

    /**
     * Get the databaseName property: Database name.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: Database name.
     * 
     * @param databaseName the databaseName value to set.
     * @return the ChaosFaultProperties object itself.
     */
    public ChaosFaultProperties withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the containerName property: Container name.
     * 
     * @return the containerName value.
     */
    public String containerName() {
        return this.containerName;
    }

    /**
     * Set the containerName property: Container name.
     * 
     * @param containerName the containerName value to set.
     * @return the ChaosFaultProperties object itself.
     */
    public ChaosFaultProperties withContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    /**
     * Get the provisioningState property: A provisioning state of the Chaos Fault.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
        jsonWriter.writeStringField("region", this.region);
        jsonWriter.writeStringField("databaseName", this.databaseName);
        jsonWriter.writeStringField("containerName", this.containerName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChaosFaultProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChaosFaultProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ChaosFaultProperties.
     */
    public static ChaosFaultProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChaosFaultProperties deserializedChaosFaultProperties = new ChaosFaultProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("action".equals(fieldName)) {
                    deserializedChaosFaultProperties.action = SupportedActions.fromString(reader.getString());
                } else if ("region".equals(fieldName)) {
                    deserializedChaosFaultProperties.region = reader.getString();
                } else if ("databaseName".equals(fieldName)) {
                    deserializedChaosFaultProperties.databaseName = reader.getString();
                } else if ("containerName".equals(fieldName)) {
                    deserializedChaosFaultProperties.containerName = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedChaosFaultProperties.provisioningState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChaosFaultProperties;
        });
    }
}
