// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Indicates what diagnostic log settings are to be enabled.
 */
@Fluent
public final class DiagnosticLogSettings implements JsonSerializable<DiagnosticLogSettings> {
    /*
     * Describe the level of detail with which queries are to be logged.
     */
    private EnableFullTextQuery enableFullTextQuery;

    /**
     * Creates an instance of DiagnosticLogSettings class.
     */
    public DiagnosticLogSettings() {
    }

    /**
     * Get the enableFullTextQuery property: Describe the level of detail with which queries are to be logged.
     * 
     * @return the enableFullTextQuery value.
     */
    public EnableFullTextQuery enableFullTextQuery() {
        return this.enableFullTextQuery;
    }

    /**
     * Set the enableFullTextQuery property: Describe the level of detail with which queries are to be logged.
     * 
     * @param enableFullTextQuery the enableFullTextQuery value to set.
     * @return the DiagnosticLogSettings object itself.
     */
    public DiagnosticLogSettings withEnableFullTextQuery(EnableFullTextQuery enableFullTextQuery) {
        this.enableFullTextQuery = enableFullTextQuery;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("enableFullTextQuery",
            this.enableFullTextQuery == null ? null : this.enableFullTextQuery.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiagnosticLogSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiagnosticLogSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiagnosticLogSettings.
     */
    public static DiagnosticLogSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiagnosticLogSettings deserializedDiagnosticLogSettings = new DiagnosticLogSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableFullTextQuery".equals(fieldName)) {
                    deserializedDiagnosticLogSettings.enableFullTextQuery
                        = EnableFullTextQuery.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiagnosticLogSettings;
        });
    }
}
