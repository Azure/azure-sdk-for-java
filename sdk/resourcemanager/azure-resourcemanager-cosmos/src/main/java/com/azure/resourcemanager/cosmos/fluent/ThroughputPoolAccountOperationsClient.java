// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.cosmos.fluent.models.ThroughputPoolAccountResourceInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ThroughputPoolAccountOperationsClient.
 */
public interface ThroughputPoolAccountOperationsClient {
    /**
     * Retrieves the properties of an existing Azure Cosmos DB Throughput Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool Account along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<ThroughputPoolAccountResourceInner>> getWithResponseAsync(String resourceGroupName,
        String throughputPoolName, String throughputPoolAccountName);

    /**
     * Retrieves the properties of an existing Azure Cosmos DB Throughput Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool Account on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ThroughputPoolAccountResourceInner> getAsync(String resourceGroupName, String throughputPoolName,
        String throughputPoolAccountName);

    /**
     * Retrieves the properties of an existing Azure Cosmos DB Throughput Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool Account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ThroughputPoolAccountResourceInner> getWithResponse(String resourceGroupName, String throughputPoolName,
        String throughputPoolAccountName, Context context);

    /**
     * Retrieves the properties of an existing Azure Cosmos DB Throughput Pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ThroughputPoolAccountResourceInner get(String resourceGroupName, String throughputPoolName,
        String throughputPoolAccountName);

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @param body The parameters to provide for the current ThroughputPoolAccount.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool Account along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String throughputPoolName,
        String throughputPoolAccountName, ThroughputPoolAccountResourceInner body);

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @param body The parameters to provide for the current ThroughputPoolAccount.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an Azure Cosmos DB Throughputpool Account.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    PollerFlux<PollResult<ThroughputPoolAccountResourceInner>, ThroughputPoolAccountResourceInner> beginCreateAsync(
        String resourceGroupName, String throughputPoolName, String throughputPoolAccountName,
        ThroughputPoolAccountResourceInner body);

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @param body The parameters to provide for the current ThroughputPoolAccount.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an Azure Cosmos DB Throughputpool Account.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ThroughputPoolAccountResourceInner>, ThroughputPoolAccountResourceInner> beginCreate(
        String resourceGroupName, String throughputPoolName, String throughputPoolAccountName,
        ThroughputPoolAccountResourceInner body);

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @param body The parameters to provide for the current ThroughputPoolAccount.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an Azure Cosmos DB Throughputpool Account.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ThroughputPoolAccountResourceInner>, ThroughputPoolAccountResourceInner> beginCreate(
        String resourceGroupName, String throughputPoolName, String throughputPoolAccountName,
        ThroughputPoolAccountResourceInner body, Context context);

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @param body The parameters to provide for the current ThroughputPoolAccount.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool Account on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ThroughputPoolAccountResourceInner> createAsync(String resourceGroupName, String throughputPoolName,
        String throughputPoolAccountName, ThroughputPoolAccountResourceInner body);

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @param body The parameters to provide for the current ThroughputPoolAccount.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ThroughputPoolAccountResourceInner create(String resourceGroupName, String throughputPoolName,
        String throughputPoolAccountName, ThroughputPoolAccountResourceInner body);

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @param body The parameters to provide for the current ThroughputPoolAccount.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ThroughputPoolAccountResourceInner create(String resourceGroupName, String throughputPoolName,
        String throughputPoolAccountName, ThroughputPoolAccountResourceInner body, Context context);

    /**
     * Removes an existing Azure Cosmos DB database account from a throughput pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String throughputPoolName,
        String throughputPoolAccountName);

    /**
     * Removes an existing Azure Cosmos DB database account from a throughput pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String throughputPoolName,
        String throughputPoolAccountName);

    /**
     * Removes an existing Azure Cosmos DB database account from a throughput pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String throughputPoolName,
        String throughputPoolAccountName);

    /**
     * Removes an existing Azure Cosmos DB database account from a throughput pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String throughputPoolName,
        String throughputPoolAccountName, Context context);

    /**
     * Removes an existing Azure Cosmos DB database account from a throughput pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteAsync(String resourceGroupName, String throughputPoolName, String throughputPoolAccountName);

    /**
     * Removes an existing Azure Cosmos DB database account from a throughput pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String throughputPoolName, String throughputPoolAccountName);

    /**
     * Removes an existing Azure Cosmos DB database account from a throughput pool.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param throughputPoolAccountName Cosmos DB global database account in a Throughput Pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String throughputPoolName, String throughputPoolAccountName, Context context);
}
