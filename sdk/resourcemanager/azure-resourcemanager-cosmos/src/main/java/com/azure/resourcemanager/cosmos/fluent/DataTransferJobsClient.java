// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cosmos.fluent.models.DataTransferJobGetResultsInner;
import com.azure.resourcemanager.cosmos.models.CreateJobRequest;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in DataTransferJobsClient. */
public interface DataTransferJobsClient {
    /**
     * Creates a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @param jobCreateParameters Parameters to create Data Transfer Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<DataTransferJobGetResultsInner>> createWithResponseAsync(
        String resourceGroupName, String accountName, String jobName, CreateJobRequest jobCreateParameters);

    /**
     * Creates a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @param jobCreateParameters Parameters to create Data Transfer Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<DataTransferJobGetResultsInner> createAsync(
        String resourceGroupName, String accountName, String jobName, CreateJobRequest jobCreateParameters);

    /**
     * Creates a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @param jobCreateParameters Parameters to create Data Transfer Job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DataTransferJobGetResultsInner> createWithResponse(
        String resourceGroupName,
        String accountName,
        String jobName,
        CreateJobRequest jobCreateParameters,
        Context context);

    /**
     * Creates a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @param jobCreateParameters Parameters to create Data Transfer Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DataTransferJobGetResultsInner create(
        String resourceGroupName, String accountName, String jobName, CreateJobRequest jobCreateParameters);

    /**
     * Get a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Data Transfer Job along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<DataTransferJobGetResultsInner>> getWithResponseAsync(
        String resourceGroupName, String accountName, String jobName);

    /**
     * Get a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Data Transfer Job on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<DataTransferJobGetResultsInner> getAsync(String resourceGroupName, String accountName, String jobName);

    /**
     * Get a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Data Transfer Job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DataTransferJobGetResultsInner> getWithResponse(
        String resourceGroupName, String accountName, String jobName, Context context);

    /**
     * Get a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Data Transfer Job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DataTransferJobGetResultsInner get(String resourceGroupName, String accountName, String jobName);

    /**
     * Pause a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<DataTransferJobGetResultsInner>> pauseWithResponseAsync(
        String resourceGroupName, String accountName, String jobName);

    /**
     * Pause a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<DataTransferJobGetResultsInner> pauseAsync(String resourceGroupName, String accountName, String jobName);

    /**
     * Pause a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DataTransferJobGetResultsInner> pauseWithResponse(
        String resourceGroupName, String accountName, String jobName, Context context);

    /**
     * Pause a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DataTransferJobGetResultsInner pause(String resourceGroupName, String accountName, String jobName);

    /**
     * Resumes a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<DataTransferJobGetResultsInner>> resumeWithResponseAsync(
        String resourceGroupName, String accountName, String jobName);

    /**
     * Resumes a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<DataTransferJobGetResultsInner> resumeAsync(String resourceGroupName, String accountName, String jobName);

    /**
     * Resumes a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DataTransferJobGetResultsInner> resumeWithResponse(
        String resourceGroupName, String accountName, String jobName, Context context);

    /**
     * Resumes a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DataTransferJobGetResultsInner resume(String resourceGroupName, String accountName, String jobName);

    /**
     * Cancels a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<DataTransferJobGetResultsInner>> cancelWithResponseAsync(
        String resourceGroupName, String accountName, String jobName);

    /**
     * Cancels a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<DataTransferJobGetResultsInner> cancelAsync(String resourceGroupName, String accountName, String jobName);

    /**
     * Cancels a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DataTransferJobGetResultsInner> cancelWithResponse(
        String resourceGroupName, String accountName, String jobName, Context context);

    /**
     * Cancels a Data Transfer Job.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param jobName Name of the Data Transfer Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Cosmos DB Data Transfer Job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DataTransferJobGetResultsInner cancel(String resourceGroupName, String accountName, String jobName);

    /**
     * Get a list of Data Transfer jobs.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Data Transfer jobs as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<DataTransferJobGetResultsInner> listByDatabaseAccountAsync(String resourceGroupName, String accountName);

    /**
     * Get a list of Data Transfer jobs.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Data Transfer jobs as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DataTransferJobGetResultsInner> listByDatabaseAccount(String resourceGroupName, String accountName);

    /**
     * Get a list of Data Transfer jobs.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Data Transfer jobs as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DataTransferJobGetResultsInner> listByDatabaseAccount(
        String resourceGroupName, String accountName, Context context);
}
