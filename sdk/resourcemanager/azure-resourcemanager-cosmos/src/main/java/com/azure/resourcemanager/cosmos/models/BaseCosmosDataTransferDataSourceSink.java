// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A base CosmosDB data source/sink.
 */
@Fluent
public class BaseCosmosDataTransferDataSourceSink extends DataTransferDataSourceSink {
    /*
     * The component property.
     */
    private DataTransferComponent component = DataTransferComponent.fromString("BaseCosmosDataTransferDataSourceSink");

    /*
     * The remoteAccountName property.
     */
    private String remoteAccountName;

    /**
     * Creates an instance of BaseCosmosDataTransferDataSourceSink class.
     */
    public BaseCosmosDataTransferDataSourceSink() {
    }

    /**
     * Get the component property: The component property.
     * 
     * @return the component value.
     */
    @Override
    public DataTransferComponent component() {
        return this.component;
    }

    /**
     * Get the remoteAccountName property: The remoteAccountName property.
     * 
     * @return the remoteAccountName value.
     */
    public String remoteAccountName() {
        return this.remoteAccountName;
    }

    /**
     * Set the remoteAccountName property: The remoteAccountName property.
     * 
     * @param remoteAccountName the remoteAccountName value to set.
     * @return the BaseCosmosDataTransferDataSourceSink object itself.
     */
    public BaseCosmosDataTransferDataSourceSink withRemoteAccountName(String remoteAccountName) {
        this.remoteAccountName = remoteAccountName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("component", this.component == null ? null : this.component.toString());
        jsonWriter.writeStringField("remoteAccountName", this.remoteAccountName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BaseCosmosDataTransferDataSourceSink from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BaseCosmosDataTransferDataSourceSink if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BaseCosmosDataTransferDataSourceSink.
     */
    public static BaseCosmosDataTransferDataSourceSink fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("component".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("CosmosDBCassandra".equals(discriminatorValue)) {
                    return CosmosCassandraDataTransferDataSourceSink.fromJson(readerToUse.reset());
                } else if ("CosmosDBMongo".equals(discriminatorValue)) {
                    return CosmosMongoDataTransferDataSourceSink.fromJson(readerToUse.reset());
                } else if ("CosmosDBSql".equals(discriminatorValue)) {
                    return CosmosSqlDataTransferDataSourceSink.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static BaseCosmosDataTransferDataSourceSink fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BaseCosmosDataTransferDataSourceSink deserializedBaseCosmosDataTransferDataSourceSink
                = new BaseCosmosDataTransferDataSourceSink();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("component".equals(fieldName)) {
                    deserializedBaseCosmosDataTransferDataSourceSink.component
                        = DataTransferComponent.fromString(reader.getString());
                } else if ("remoteAccountName".equals(fieldName)) {
                    deserializedBaseCosmosDataTransferDataSourceSink.remoteAccountName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBaseCosmosDataTransferDataSourceSink;
        });
    }
}
