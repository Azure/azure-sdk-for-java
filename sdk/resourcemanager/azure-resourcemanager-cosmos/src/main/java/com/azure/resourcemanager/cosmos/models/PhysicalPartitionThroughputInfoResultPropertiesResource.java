// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * properties of physical partition throughput info.
 */
@Fluent
public final class PhysicalPartitionThroughputInfoResultPropertiesResource
    extends PhysicalPartitionThroughputInfoProperties {
    /**
     * Creates an instance of PhysicalPartitionThroughputInfoResultPropertiesResource class.
     */
    public PhysicalPartitionThroughputInfoResultPropertiesResource() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PhysicalPartitionThroughputInfoResultPropertiesResource withPhysicalPartitionThroughputInfo(
        List<PhysicalPartitionThroughputInfoResource> physicalPartitionThroughputInfo) {
        super.withPhysicalPartitionThroughputInfo(physicalPartitionThroughputInfo);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (physicalPartitionThroughputInfo() != null) {
            physicalPartitionThroughputInfo().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("physicalPartitionThroughputInfo", physicalPartitionThroughputInfo(),
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PhysicalPartitionThroughputInfoResultPropertiesResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PhysicalPartitionThroughputInfoResultPropertiesResource if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PhysicalPartitionThroughputInfoResultPropertiesResource.
     */
    public static PhysicalPartitionThroughputInfoResultPropertiesResource fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            PhysicalPartitionThroughputInfoResultPropertiesResource deserializedPhysicalPartitionThroughputInfoResultPropertiesResource
                = new PhysicalPartitionThroughputInfoResultPropertiesResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("physicalPartitionThroughputInfo".equals(fieldName)) {
                    List<PhysicalPartitionThroughputInfoResource> physicalPartitionThroughputInfo
                        = reader.readArray(reader1 -> PhysicalPartitionThroughputInfoResource.fromJson(reader1));
                    deserializedPhysicalPartitionThroughputInfoResultPropertiesResource
                        .withPhysicalPartitionThroughputInfo(physicalPartitionThroughputInfo);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPhysicalPartitionThroughputInfoResultPropertiesResource;
        });
    }
}
