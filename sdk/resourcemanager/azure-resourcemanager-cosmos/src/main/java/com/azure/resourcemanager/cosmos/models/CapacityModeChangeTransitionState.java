// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The transition state information related capacity mode change with update request.
 */
@Fluent
public final class CapacityModeChangeTransitionState implements JsonSerializable<CapacityModeChangeTransitionState> {
    /*
     * The transition status of capacity mode.
     */
    private CapacityModeTransitionStatus capacityModeTransitionStatus;

    /*
     * Indicates the current capacity mode of the account.
     */
    private CapacityMode currentCapacityMode;

    /*
     * Indicates the previous capacity mode of the account before successful transition.
     */
    private CapacityMode previousCapacityMode;

    /*
     * Begin time in UTC of the capacity mode change.
     */
    private OffsetDateTime capacityModeTransitionBeginTimestamp;

    /*
     * End time in UTC of the capacity mode change.
     */
    private OffsetDateTime capacityModeTransitionEndTimestamp;

    /*
     * End time in UTC of the last successful capacity mode change.
     */
    private OffsetDateTime capacityModeLastSuccessfulTransitionEndTimestamp;

    /**
     * Creates an instance of CapacityModeChangeTransitionState class.
     */
    public CapacityModeChangeTransitionState() {
    }

    /**
     * Get the capacityModeTransitionStatus property: The transition status of capacity mode.
     * 
     * @return the capacityModeTransitionStatus value.
     */
    public CapacityModeTransitionStatus capacityModeTransitionStatus() {
        return this.capacityModeTransitionStatus;
    }

    /**
     * Set the capacityModeTransitionStatus property: The transition status of capacity mode.
     * 
     * @param capacityModeTransitionStatus the capacityModeTransitionStatus value to set.
     * @return the CapacityModeChangeTransitionState object itself.
     */
    public CapacityModeChangeTransitionState
        withCapacityModeTransitionStatus(CapacityModeTransitionStatus capacityModeTransitionStatus) {
        this.capacityModeTransitionStatus = capacityModeTransitionStatus;
        return this;
    }

    /**
     * Get the currentCapacityMode property: Indicates the current capacity mode of the account.
     * 
     * @return the currentCapacityMode value.
     */
    public CapacityMode currentCapacityMode() {
        return this.currentCapacityMode;
    }

    /**
     * Set the currentCapacityMode property: Indicates the current capacity mode of the account.
     * 
     * @param currentCapacityMode the currentCapacityMode value to set.
     * @return the CapacityModeChangeTransitionState object itself.
     */
    public CapacityModeChangeTransitionState withCurrentCapacityMode(CapacityMode currentCapacityMode) {
        this.currentCapacityMode = currentCapacityMode;
        return this;
    }

    /**
     * Get the previousCapacityMode property: Indicates the previous capacity mode of the account before successful
     * transition.
     * 
     * @return the previousCapacityMode value.
     */
    public CapacityMode previousCapacityMode() {
        return this.previousCapacityMode;
    }

    /**
     * Set the previousCapacityMode property: Indicates the previous capacity mode of the account before successful
     * transition.
     * 
     * @param previousCapacityMode the previousCapacityMode value to set.
     * @return the CapacityModeChangeTransitionState object itself.
     */
    public CapacityModeChangeTransitionState withPreviousCapacityMode(CapacityMode previousCapacityMode) {
        this.previousCapacityMode = previousCapacityMode;
        return this;
    }

    /**
     * Get the capacityModeTransitionBeginTimestamp property: Begin time in UTC of the capacity mode change.
     * 
     * @return the capacityModeTransitionBeginTimestamp value.
     */
    public OffsetDateTime capacityModeTransitionBeginTimestamp() {
        return this.capacityModeTransitionBeginTimestamp;
    }

    /**
     * Get the capacityModeTransitionEndTimestamp property: End time in UTC of the capacity mode change.
     * 
     * @return the capacityModeTransitionEndTimestamp value.
     */
    public OffsetDateTime capacityModeTransitionEndTimestamp() {
        return this.capacityModeTransitionEndTimestamp;
    }

    /**
     * Get the capacityModeLastSuccessfulTransitionEndTimestamp property: End time in UTC of the last successful
     * capacity mode change.
     * 
     * @return the capacityModeLastSuccessfulTransitionEndTimestamp value.
     */
    public OffsetDateTime capacityModeLastSuccessfulTransitionEndTimestamp() {
        return this.capacityModeLastSuccessfulTransitionEndTimestamp;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("capacityModeTransitionStatus",
            this.capacityModeTransitionStatus == null ? null : this.capacityModeTransitionStatus.toString());
        jsonWriter.writeStringField("currentCapacityMode",
            this.currentCapacityMode == null ? null : this.currentCapacityMode.toString());
        jsonWriter.writeStringField("previousCapacityMode",
            this.previousCapacityMode == null ? null : this.previousCapacityMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CapacityModeChangeTransitionState from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CapacityModeChangeTransitionState if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CapacityModeChangeTransitionState.
     */
    public static CapacityModeChangeTransitionState fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CapacityModeChangeTransitionState deserializedCapacityModeChangeTransitionState
                = new CapacityModeChangeTransitionState();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("capacityModeTransitionStatus".equals(fieldName)) {
                    deserializedCapacityModeChangeTransitionState.capacityModeTransitionStatus
                        = CapacityModeTransitionStatus.fromString(reader.getString());
                } else if ("currentCapacityMode".equals(fieldName)) {
                    deserializedCapacityModeChangeTransitionState.currentCapacityMode
                        = CapacityMode.fromString(reader.getString());
                } else if ("previousCapacityMode".equals(fieldName)) {
                    deserializedCapacityModeChangeTransitionState.previousCapacityMode
                        = CapacityMode.fromString(reader.getString());
                } else if ("capacityModeTransitionBeginTimestamp".equals(fieldName)) {
                    deserializedCapacityModeChangeTransitionState.capacityModeTransitionBeginTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("capacityModeTransitionEndTimestamp".equals(fieldName)) {
                    deserializedCapacityModeChangeTransitionState.capacityModeTransitionEndTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("capacityModeLastSuccessfulTransitionEndTimestamp".equals(fieldName)) {
                    deserializedCapacityModeChangeTransitionState.capacityModeLastSuccessfulTransitionEndTimestamp
                        = reader
                            .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCapacityModeChangeTransitionState;
        });
    }
}
