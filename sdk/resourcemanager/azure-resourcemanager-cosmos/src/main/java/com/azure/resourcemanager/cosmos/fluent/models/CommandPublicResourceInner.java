// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.cosmos.models.CommandStatus;
import java.io.IOException;

/**
 * resource representing a command.
 */
@Fluent
public final class CommandPublicResourceInner implements JsonSerializable<CommandPublicResourceInner> {
    /*
     * The command which should be run
     */
    private String command;

    /*
     * The unique id of command
     */
    private String commandId;

    /*
     * The arguments for the command to be run
     */
    private Object arguments;

    /*
     * IP address of the cassandra host to run the command on
     */
    private String host;

    /*
     * Whether command has admin privileges
     */
    private Boolean isAdmin;

    /*
     * If true, stops cassandra before executing the command and then start it again
     */
    private Boolean cassandraStopStart;

    /*
     * If true, allows the command to *write* to the cassandra directory, otherwise read-only.
     */
    private Boolean readWrite;

    /*
     * Result output of the command.
     */
    private String result;

    /*
     * Status of the command.
     */
    private CommandStatus status;

    /*
     * The name of the file where the result is written.
     */
    private String outputFile;

    /**
     * Creates an instance of CommandPublicResourceInner class.
     */
    public CommandPublicResourceInner() {
    }

    /**
     * Get the command property: The command which should be run.
     * 
     * @return the command value.
     */
    public String command() {
        return this.command;
    }

    /**
     * Set the command property: The command which should be run.
     * 
     * @param command the command value to set.
     * @return the CommandPublicResourceInner object itself.
     */
    public CommandPublicResourceInner withCommand(String command) {
        this.command = command;
        return this;
    }

    /**
     * Get the commandId property: The unique id of command.
     * 
     * @return the commandId value.
     */
    public String commandId() {
        return this.commandId;
    }

    /**
     * Set the commandId property: The unique id of command.
     * 
     * @param commandId the commandId value to set.
     * @return the CommandPublicResourceInner object itself.
     */
    public CommandPublicResourceInner withCommandId(String commandId) {
        this.commandId = commandId;
        return this;
    }

    /**
     * Get the arguments property: The arguments for the command to be run.
     * 
     * @return the arguments value.
     */
    public Object arguments() {
        return this.arguments;
    }

    /**
     * Set the arguments property: The arguments for the command to be run.
     * 
     * @param arguments the arguments value to set.
     * @return the CommandPublicResourceInner object itself.
     */
    public CommandPublicResourceInner withArguments(Object arguments) {
        this.arguments = arguments;
        return this;
    }

    /**
     * Get the host property: IP address of the cassandra host to run the command on.
     * 
     * @return the host value.
     */
    public String host() {
        return this.host;
    }

    /**
     * Set the host property: IP address of the cassandra host to run the command on.
     * 
     * @param host the host value to set.
     * @return the CommandPublicResourceInner object itself.
     */
    public CommandPublicResourceInner withHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Get the isAdmin property: Whether command has admin privileges.
     * 
     * @return the isAdmin value.
     */
    public Boolean isAdmin() {
        return this.isAdmin;
    }

    /**
     * Set the isAdmin property: Whether command has admin privileges.
     * 
     * @param isAdmin the isAdmin value to set.
     * @return the CommandPublicResourceInner object itself.
     */
    public CommandPublicResourceInner withIsAdmin(Boolean isAdmin) {
        this.isAdmin = isAdmin;
        return this;
    }

    /**
     * Get the cassandraStopStart property: If true, stops cassandra before executing the command and then start it
     * again.
     * 
     * @return the cassandraStopStart value.
     */
    public Boolean cassandraStopStart() {
        return this.cassandraStopStart;
    }

    /**
     * Set the cassandraStopStart property: If true, stops cassandra before executing the command and then start it
     * again.
     * 
     * @param cassandraStopStart the cassandraStopStart value to set.
     * @return the CommandPublicResourceInner object itself.
     */
    public CommandPublicResourceInner withCassandraStopStart(Boolean cassandraStopStart) {
        this.cassandraStopStart = cassandraStopStart;
        return this;
    }

    /**
     * Get the readWrite property: If true, allows the command to *write* to the cassandra directory, otherwise
     * read-only.
     * 
     * @return the readWrite value.
     */
    public Boolean readWrite() {
        return this.readWrite;
    }

    /**
     * Set the readWrite property: If true, allows the command to *write* to the cassandra directory, otherwise
     * read-only.
     * 
     * @param readWrite the readWrite value to set.
     * @return the CommandPublicResourceInner object itself.
     */
    public CommandPublicResourceInner withReadWrite(Boolean readWrite) {
        this.readWrite = readWrite;
        return this;
    }

    /**
     * Get the result property: Result output of the command.
     * 
     * @return the result value.
     */
    public String result() {
        return this.result;
    }

    /**
     * Set the result property: Result output of the command.
     * 
     * @param result the result value to set.
     * @return the CommandPublicResourceInner object itself.
     */
    public CommandPublicResourceInner withResult(String result) {
        this.result = result;
        return this;
    }

    /**
     * Get the status property: Status of the command.
     * 
     * @return the status value.
     */
    public CommandStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the command.
     * 
     * @param status the status value to set.
     * @return the CommandPublicResourceInner object itself.
     */
    public CommandPublicResourceInner withStatus(CommandStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the outputFile property: The name of the file where the result is written.
     * 
     * @return the outputFile value.
     */
    public String outputFile() {
        return this.outputFile;
    }

    /**
     * Set the outputFile property: The name of the file where the result is written.
     * 
     * @param outputFile the outputFile value to set.
     * @return the CommandPublicResourceInner object itself.
     */
    public CommandPublicResourceInner withOutputFile(String outputFile) {
        this.outputFile = outputFile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("command", this.command);
        jsonWriter.writeStringField("commandId", this.commandId);
        jsonWriter.writeUntypedField("arguments", this.arguments);
        jsonWriter.writeStringField("host", this.host);
        jsonWriter.writeBooleanField("isAdmin", this.isAdmin);
        jsonWriter.writeBooleanField("cassandraStopStart", this.cassandraStopStart);
        jsonWriter.writeBooleanField("readWrite", this.readWrite);
        jsonWriter.writeStringField("result", this.result);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("outputFile", this.outputFile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommandPublicResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommandPublicResourceInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CommandPublicResourceInner.
     */
    public static CommandPublicResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommandPublicResourceInner deserializedCommandPublicResourceInner = new CommandPublicResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("command".equals(fieldName)) {
                    deserializedCommandPublicResourceInner.command = reader.getString();
                } else if ("commandId".equals(fieldName)) {
                    deserializedCommandPublicResourceInner.commandId = reader.getString();
                } else if ("arguments".equals(fieldName)) {
                    deserializedCommandPublicResourceInner.arguments = reader.readUntyped();
                } else if ("host".equals(fieldName)) {
                    deserializedCommandPublicResourceInner.host = reader.getString();
                } else if ("isAdmin".equals(fieldName)) {
                    deserializedCommandPublicResourceInner.isAdmin = reader.getNullable(JsonReader::getBoolean);
                } else if ("cassandraStopStart".equals(fieldName)) {
                    deserializedCommandPublicResourceInner.cassandraStopStart
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("readWrite".equals(fieldName)) {
                    deserializedCommandPublicResourceInner.readWrite = reader.getNullable(JsonReader::getBoolean);
                } else if ("result".equals(fieldName)) {
                    deserializedCommandPublicResourceInner.result = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedCommandPublicResourceInner.status = CommandStatus.fromString(reader.getString());
                } else if ("outputFile".equals(fieldName)) {
                    deserializedCommandPublicResourceInner.outputFile = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommandPublicResourceInner;
        });
    }
}
