// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.cosmos.fluent.ThroughputPoolOperationsClient;
import com.azure.resourcemanager.cosmos.fluent.models.ThroughputPoolResourceInner;
import com.azure.resourcemanager.cosmos.models.ThroughputPoolUpdate;
import com.azure.resourcemanager.resources.fluentcore.collection.InnerSupportsDelete;
import com.azure.resourcemanager.resources.fluentcore.collection.InnerSupportsGet;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.nio.ByteBuffer;

/**
 * An instance of this class provides access to all the operations defined in ThroughputPoolOperationsClient.
 */
public final class ThroughputPoolOperationsClientImpl implements InnerSupportsGet<ThroughputPoolResourceInner>,
    InnerSupportsDelete<Void>, ThroughputPoolOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ThroughputPoolOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final CosmosDBManagementClientImpl client;

    /**
     * Initializes an instance of ThroughputPoolOperationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ThroughputPoolOperationsClientImpl(CosmosDBManagementClientImpl client) {
        this.service = RestProxy.create(ThroughputPoolOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for CosmosDBManagementClientThroughputPoolOperations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "CosmosDBManagementCl")
    public interface ThroughputPoolOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputPools/{throughputPoolName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ThroughputPoolResourceInner>> getByResourceGroup(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("throughputPoolName") String throughputPoolName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputPools/{throughputPoolName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("throughputPoolName") String throughputPoolName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ThroughputPoolResourceInner body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputPools/{throughputPoolName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("throughputPoolName") String throughputPoolName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ThroughputPoolUpdate body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/throughputPools/{throughputPoolName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("throughputPoolName") String throughputPoolName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ThroughputPoolResourceInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String throughputPoolName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (throughputPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter throughputPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    resourceGroupName, throughputPoolName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ThroughputPoolResourceInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String throughputPoolName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (throughputPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter throughputPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            throughputPoolName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThroughputPoolResourceInner> getByResourceGroupAsync(String resourceGroupName,
        String throughputPoolName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, throughputPoolName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ThroughputPoolResourceInner> getByResourceGroupWithResponse(String resourceGroupName,
        String throughputPoolName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, throughputPoolName, context).block();
    }

    /**
     * Retrieves the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThroughputPoolResourceInner getByResourceGroup(String resourceGroupName, String throughputPoolName) {
        return getByResourceGroupWithResponse(resourceGroupName, throughputPoolName, Context.NONE).getValue();
    }

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current ThroughputPool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String throughputPoolName, ThroughputPoolResourceInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (throughputPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter throughputPoolName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, throughputPoolName, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current ThroughputPool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String throughputPoolName, ThroughputPoolResourceInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (throughputPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter throughputPoolName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            throughputPoolName, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current ThroughputPool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an Azure Cosmos DB Throughputpool.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PollResult<ThroughputPoolResourceInner>, ThroughputPoolResourceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String throughputPoolName, ThroughputPoolResourceInner body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, throughputPoolName, body);
        return this.client.<ThroughputPoolResourceInner, ThroughputPoolResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), ThroughputPoolResourceInner.class, ThroughputPoolResourceInner.class,
            this.client.getContext());
    }

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current ThroughputPool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an Azure Cosmos DB Throughputpool.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ThroughputPoolResourceInner>, ThroughputPoolResourceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String throughputPoolName, ThroughputPoolResourceInner body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, throughputPoolName, body, context);
        return this.client.<ThroughputPoolResourceInner, ThroughputPoolResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), ThroughputPoolResourceInner.class, ThroughputPoolResourceInner.class,
            context);
    }

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current ThroughputPool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an Azure Cosmos DB Throughputpool.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ThroughputPoolResourceInner>, ThroughputPoolResourceInner>
        beginCreateOrUpdate(String resourceGroupName, String throughputPoolName, ThroughputPoolResourceInner body) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, throughputPoolName, body).getSyncPoller();
    }

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current ThroughputPool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an Azure Cosmos DB Throughputpool.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ThroughputPoolResourceInner>, ThroughputPoolResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String throughputPoolName, ThroughputPoolResourceInner body, Context context) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, throughputPoolName, body, context).getSyncPoller();
    }

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current ThroughputPool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThroughputPoolResourceInner> createOrUpdateAsync(String resourceGroupName, String throughputPoolName,
        ThroughputPoolResourceInner body) {
        return beginCreateOrUpdateAsync(resourceGroupName, throughputPoolName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current ThroughputPool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ThroughputPoolResourceInner> createOrUpdateAsync(String resourceGroupName, String throughputPoolName,
        ThroughputPoolResourceInner body, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, throughputPoolName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current ThroughputPool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThroughputPoolResourceInner createOrUpdate(String resourceGroupName, String throughputPoolName,
        ThroughputPoolResourceInner body) {
        return createOrUpdateAsync(resourceGroupName, throughputPoolName, body).block();
    }

    /**
     * Creates or updates an Azure Cosmos DB ThroughputPool account. The "Update" method is preferred when performing
     * updates on an account.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current ThroughputPool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThroughputPoolResourceInner createOrUpdate(String resourceGroupName, String throughputPoolName,
        ThroughputPoolResourceInner body, Context context) {
        return createOrUpdateAsync(resourceGroupName, throughputPoolName, body, context).block();
    }

    /**
     * Updates the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current Throughput Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String throughputPoolName,
        ThroughputPoolUpdate body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (throughputPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter throughputPoolName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, throughputPoolName, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current Throughput Pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String throughputPoolName, ThroughputPoolUpdate body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (throughputPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter throughputPoolName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            throughputPoolName, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Updates the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current Throughput Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an Azure Cosmos DB Throughputpool.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PollResult<ThroughputPoolResourceInner>, ThroughputPoolResourceInner>
        beginUpdateAsync(String resourceGroupName, String throughputPoolName, ThroughputPoolUpdate body) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, throughputPoolName, body);
        return this.client.<ThroughputPoolResourceInner, ThroughputPoolResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), ThroughputPoolResourceInner.class, ThroughputPoolResourceInner.class,
            this.client.getContext());
    }

    /**
     * Updates the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an Azure Cosmos DB Throughputpool.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PollResult<ThroughputPoolResourceInner>, ThroughputPoolResourceInner>
        beginUpdateAsync(String resourceGroupName, String throughputPoolName) {
        final ThroughputPoolUpdate body = null;
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, throughputPoolName, body);
        return this.client.<ThroughputPoolResourceInner, ThroughputPoolResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), ThroughputPoolResourceInner.class, ThroughputPoolResourceInner.class,
            this.client.getContext());
    }

    /**
     * Updates the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current Throughput Pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an Azure Cosmos DB Throughputpool.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ThroughputPoolResourceInner>, ThroughputPoolResourceInner> beginUpdateAsync(
        String resourceGroupName, String throughputPoolName, ThroughputPoolUpdate body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, throughputPoolName, body, context);
        return this.client.<ThroughputPoolResourceInner, ThroughputPoolResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), ThroughputPoolResourceInner.class, ThroughputPoolResourceInner.class,
            context);
    }

    /**
     * Updates the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an Azure Cosmos DB Throughputpool.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ThroughputPoolResourceInner>, ThroughputPoolResourceInner>
        beginUpdate(String resourceGroupName, String throughputPoolName) {
        final ThroughputPoolUpdate body = null;
        return this.beginUpdateAsync(resourceGroupName, throughputPoolName, body).getSyncPoller();
    }

    /**
     * Updates the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current Throughput Pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an Azure Cosmos DB Throughputpool.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ThroughputPoolResourceInner>, ThroughputPoolResourceInner>
        beginUpdate(String resourceGroupName, String throughputPoolName, ThroughputPoolUpdate body, Context context) {
        return this.beginUpdateAsync(resourceGroupName, throughputPoolName, body, context).getSyncPoller();
    }

    /**
     * Updates the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current Throughput Pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThroughputPoolResourceInner> updateAsync(String resourceGroupName, String throughputPoolName,
        ThroughputPoolUpdate body) {
        return beginUpdateAsync(resourceGroupName, throughputPoolName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ThroughputPoolResourceInner> updateAsync(String resourceGroupName, String throughputPoolName) {
        final ThroughputPoolUpdate body = null;
        return beginUpdateAsync(resourceGroupName, throughputPoolName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current Throughput Pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ThroughputPoolResourceInner> updateAsync(String resourceGroupName, String throughputPoolName,
        ThroughputPoolUpdate body, Context context) {
        return beginUpdateAsync(resourceGroupName, throughputPoolName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThroughputPoolResourceInner update(String resourceGroupName, String throughputPoolName) {
        final ThroughputPoolUpdate body = null;
        return updateAsync(resourceGroupName, throughputPoolName, body).block();
    }

    /**
     * Updates the properties of an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param body The parameters to provide for the current Throughput Pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Cosmos DB Throughputpool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ThroughputPoolResourceInner update(String resourceGroupName, String throughputPoolName,
        ThroughputPoolUpdate body, Context context) {
        return updateAsync(resourceGroupName, throughputPoolName, body, context).block();
    }

    /**
     * Deletes an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String throughputPoolName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (throughputPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter throughputPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, throughputPoolName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String throughputPoolName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (throughputPoolName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter throughputPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            throughputPoolName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Deletes an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String throughputPoolName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, throughputPoolName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String throughputPoolName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, throughputPoolName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String throughputPoolName) {
        return this.beginDeleteAsync(resourceGroupName, throughputPoolName).getSyncPoller();
    }

    /**
     * Deletes an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String throughputPoolName,
        Context context) {
        return this.beginDeleteAsync(resourceGroupName, throughputPoolName, context).getSyncPoller();
    }

    /**
     * Deletes an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String resourceGroupName, String throughputPoolName) {
        return beginDeleteAsync(resourceGroupName, throughputPoolName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String throughputPoolName, Context context) {
        return beginDeleteAsync(resourceGroupName, throughputPoolName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String throughputPoolName) {
        deleteAsync(resourceGroupName, throughputPoolName).block();
    }

    /**
     * Deletes an existing Azure Cosmos DB Throughput Pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param throughputPoolName Cosmos DB Throughput Pool name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String throughputPoolName, Context context) {
        deleteAsync(resourceGroupName, throughputPoolName, context).block();
    }
}
