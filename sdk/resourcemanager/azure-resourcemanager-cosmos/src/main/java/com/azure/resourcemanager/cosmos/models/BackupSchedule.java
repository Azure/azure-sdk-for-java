// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The BackupSchedule model.
 */
@Fluent
public final class BackupSchedule implements JsonSerializable<BackupSchedule> {
    /*
     * The unique identifier of backup schedule.
     */
    private String scheduleName;

    /*
     * The cron expression that defines when you want to back up your data.
     */
    private String cronExpression;

    /*
     * The retention period (hours) of the backups. If you want to retain data forever, set retention to 0.
     */
    private Integer retentionInHours;

    /**
     * Creates an instance of BackupSchedule class.
     */
    public BackupSchedule() {
    }

    /**
     * Get the scheduleName property: The unique identifier of backup schedule.
     * 
     * @return the scheduleName value.
     */
    public String scheduleName() {
        return this.scheduleName;
    }

    /**
     * Set the scheduleName property: The unique identifier of backup schedule.
     * 
     * @param scheduleName the scheduleName value to set.
     * @return the BackupSchedule object itself.
     */
    public BackupSchedule withScheduleName(String scheduleName) {
        this.scheduleName = scheduleName;
        return this;
    }

    /**
     * Get the cronExpression property: The cron expression that defines when you want to back up your data.
     * 
     * @return the cronExpression value.
     */
    public String cronExpression() {
        return this.cronExpression;
    }

    /**
     * Set the cronExpression property: The cron expression that defines when you want to back up your data.
     * 
     * @param cronExpression the cronExpression value to set.
     * @return the BackupSchedule object itself.
     */
    public BackupSchedule withCronExpression(String cronExpression) {
        this.cronExpression = cronExpression;
        return this;
    }

    /**
     * Get the retentionInHours property: The retention period (hours) of the backups. If you want to retain data
     * forever, set retention to 0.
     * 
     * @return the retentionInHours value.
     */
    public Integer retentionInHours() {
        return this.retentionInHours;
    }

    /**
     * Set the retentionInHours property: The retention period (hours) of the backups. If you want to retain data
     * forever, set retention to 0.
     * 
     * @param retentionInHours the retentionInHours value to set.
     * @return the BackupSchedule object itself.
     */
    public BackupSchedule withRetentionInHours(Integer retentionInHours) {
        this.retentionInHours = retentionInHours;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scheduleName", this.scheduleName);
        jsonWriter.writeStringField("cronExpression", this.cronExpression);
        jsonWriter.writeNumberField("retentionInHours", this.retentionInHours);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackupSchedule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackupSchedule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BackupSchedule.
     */
    public static BackupSchedule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackupSchedule deserializedBackupSchedule = new BackupSchedule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scheduleName".equals(fieldName)) {
                    deserializedBackupSchedule.scheduleName = reader.getString();
                } else if ("cronExpression".equals(fieldName)) {
                    deserializedBackupSchedule.cronExpression = reader.getString();
                } else if ("retentionInHours".equals(fieldName)) {
                    deserializedBackupSchedule.retentionInHours = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackupSchedule;
        });
    }
}
