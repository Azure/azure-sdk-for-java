// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A CosmosDB Cassandra API data source/sink.
 */
@Fluent
public final class CosmosCassandraDataTransferDataSourceSink extends BaseCosmosDataTransferDataSourceSink {
    /*
     * The component property.
     */
    private DataTransferComponent component = DataTransferComponent.COSMOS_DBCASSANDRA;

    /*
     * The keyspaceName property.
     */
    private String keyspaceName;

    /*
     * The tableName property.
     */
    private String tableName;

    /**
     * Creates an instance of CosmosCassandraDataTransferDataSourceSink class.
     */
    public CosmosCassandraDataTransferDataSourceSink() {
    }

    /**
     * Get the component property: The component property.
     * 
     * @return the component value.
     */
    @Override
    public DataTransferComponent component() {
        return this.component;
    }

    /**
     * Get the keyspaceName property: The keyspaceName property.
     * 
     * @return the keyspaceName value.
     */
    public String keyspaceName() {
        return this.keyspaceName;
    }

    /**
     * Set the keyspaceName property: The keyspaceName property.
     * 
     * @param keyspaceName the keyspaceName value to set.
     * @return the CosmosCassandraDataTransferDataSourceSink object itself.
     */
    public CosmosCassandraDataTransferDataSourceSink withKeyspaceName(String keyspaceName) {
        this.keyspaceName = keyspaceName;
        return this;
    }

    /**
     * Get the tableName property: The tableName property.
     * 
     * @return the tableName value.
     */
    public String tableName() {
        return this.tableName;
    }

    /**
     * Set the tableName property: The tableName property.
     * 
     * @param tableName the tableName value to set.
     * @return the CosmosCassandraDataTransferDataSourceSink object itself.
     */
    public CosmosCassandraDataTransferDataSourceSink withTableName(String tableName) {
        this.tableName = tableName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CosmosCassandraDataTransferDataSourceSink withRemoteAccountName(String remoteAccountName) {
        super.withRemoteAccountName(remoteAccountName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (keyspaceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property keyspaceName in model CosmosCassandraDataTransferDataSourceSink"));
        }
        if (tableName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tableName in model CosmosCassandraDataTransferDataSourceSink"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CosmosCassandraDataTransferDataSourceSink.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("remoteAccountName", remoteAccountName());
        jsonWriter.writeStringField("keyspaceName", this.keyspaceName);
        jsonWriter.writeStringField("tableName", this.tableName);
        jsonWriter.writeStringField("component", this.component == null ? null : this.component.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CosmosCassandraDataTransferDataSourceSink from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CosmosCassandraDataTransferDataSourceSink if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CosmosCassandraDataTransferDataSourceSink.
     */
    public static CosmosCassandraDataTransferDataSourceSink fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CosmosCassandraDataTransferDataSourceSink deserializedCosmosCassandraDataTransferDataSourceSink
                = new CosmosCassandraDataTransferDataSourceSink();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("remoteAccountName".equals(fieldName)) {
                    deserializedCosmosCassandraDataTransferDataSourceSink.withRemoteAccountName(reader.getString());
                } else if ("keyspaceName".equals(fieldName)) {
                    deserializedCosmosCassandraDataTransferDataSourceSink.keyspaceName = reader.getString();
                } else if ("tableName".equals(fieldName)) {
                    deserializedCosmosCassandraDataTransferDataSourceSink.tableName = reader.getString();
                } else if ("component".equals(fieldName)) {
                    deserializedCosmosCassandraDataTransferDataSourceSink.component
                        = DataTransferComponent.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCosmosCassandraDataTransferDataSourceSink;
        });
    }
}
