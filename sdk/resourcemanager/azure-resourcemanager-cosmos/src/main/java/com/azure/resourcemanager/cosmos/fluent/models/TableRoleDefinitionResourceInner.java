// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.cosmos.models.PermissionAutoGenerated;
import com.azure.resourcemanager.cosmos.models.RoleDefinitionType;
import java.io.IOException;
import java.util.List;

/**
 * Parameters to create and update an Azure Cosmos DB Table Role Definition.
 */
@Fluent
public final class TableRoleDefinitionResourceInner extends ProxyResource {
    /*
     * Properties to create and update an Azure Cosmos DB Table Role Definition.
     */
    private TableRoleDefinitionResourceProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of TableRoleDefinitionResourceInner class.
     */
    public TableRoleDefinitionResourceInner() {
    }

    /**
     * Get the innerProperties property: Properties to create and update an Azure Cosmos DB Table Role Definition.
     * 
     * @return the innerProperties value.
     */
    private TableRoleDefinitionResourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the id property: The path id for the Role Definition.
     * 
     * @return the id value.
     */
    public String idPropertiesId() {
        return this.innerProperties() == null ? null : this.innerProperties().id();
    }

    /**
     * Set the id property: The path id for the Role Definition.
     * 
     * @param id the id value to set.
     * @return the TableRoleDefinitionResourceInner object itself.
     */
    public TableRoleDefinitionResourceInner withIdPropertiesId(String id) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TableRoleDefinitionResourceProperties();
        }
        this.innerProperties().withId(id);
        return this;
    }

    /**
     * Get the roleName property: A user-friendly name for the Role Definition. Must be unique for the database account.
     * 
     * @return the roleName value.
     */
    public String roleName() {
        return this.innerProperties() == null ? null : this.innerProperties().roleName();
    }

    /**
     * Set the roleName property: A user-friendly name for the Role Definition. Must be unique for the database account.
     * 
     * @param roleName the roleName value to set.
     * @return the TableRoleDefinitionResourceInner object itself.
     */
    public TableRoleDefinitionResourceInner withRoleName(String roleName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TableRoleDefinitionResourceProperties();
        }
        this.innerProperties().withRoleName(roleName);
        return this;
    }

    /**
     * Get the type property: Indicates whether the Role Definition was built-in or user created.
     * 
     * @return the type value.
     */
    public RoleDefinitionType typePropertiesType() {
        return this.innerProperties() == null ? null : this.innerProperties().type();
    }

    /**
     * Set the type property: Indicates whether the Role Definition was built-in or user created.
     * 
     * @param type the type value to set.
     * @return the TableRoleDefinitionResourceInner object itself.
     */
    public TableRoleDefinitionResourceInner withTypePropertiesType(RoleDefinitionType type) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TableRoleDefinitionResourceProperties();
        }
        this.innerProperties().withType(type);
        return this;
    }

    /**
     * Get the assignableScopes property: A set of fully qualified Scopes at or below which Table Role Assignments may
     * be created using this Role Definition. This will allow application of this Role Definition on the entire database
     * account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database
     * account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not
     * exist.
     * 
     * @return the assignableScopes value.
     */
    public List<String> assignableScopes() {
        return this.innerProperties() == null ? null : this.innerProperties().assignableScopes();
    }

    /**
     * Set the assignableScopes property: A set of fully qualified Scopes at or below which Table Role Assignments may
     * be created using this Role Definition. This will allow application of this Role Definition on the entire database
     * account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database
     * account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not
     * exist.
     * 
     * @param assignableScopes the assignableScopes value to set.
     * @return the TableRoleDefinitionResourceInner object itself.
     */
    public TableRoleDefinitionResourceInner withAssignableScopes(List<String> assignableScopes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TableRoleDefinitionResourceProperties();
        }
        this.innerProperties().withAssignableScopes(assignableScopes);
        return this;
    }

    /**
     * Get the permissions property: The set of operations allowed through this Role Definition.
     * 
     * @return the permissions value.
     */
    public List<PermissionAutoGenerated> permissions() {
        return this.innerProperties() == null ? null : this.innerProperties().permissions();
    }

    /**
     * Set the permissions property: The set of operations allowed through this Role Definition.
     * 
     * @param permissions the permissions value to set.
     * @return the TableRoleDefinitionResourceInner object itself.
     */
    public TableRoleDefinitionResourceInner withPermissions(List<PermissionAutoGenerated> permissions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TableRoleDefinitionResourceProperties();
        }
        this.innerProperties().withPermissions(permissions);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TableRoleDefinitionResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TableRoleDefinitionResourceInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TableRoleDefinitionResourceInner.
     */
    public static TableRoleDefinitionResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TableRoleDefinitionResourceInner deserializedTableRoleDefinitionResourceInner
                = new TableRoleDefinitionResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedTableRoleDefinitionResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedTableRoleDefinitionResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedTableRoleDefinitionResourceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedTableRoleDefinitionResourceInner.innerProperties
                        = TableRoleDefinitionResourceProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedTableRoleDefinitionResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTableRoleDefinitionResourceInner;
        });
    }
}
