// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Resource to retrieve throughput information for Cosmos DB resource.
 */
@Fluent
public final class RetrieveThroughputPropertiesResource
    implements JsonSerializable<RetrieveThroughputPropertiesResource> {
    /*
     * Array of PhysicalPartitionId objects.
     */
    private List<PhysicalPartitionId> physicalPartitionIds;

    /**
     * Creates an instance of RetrieveThroughputPropertiesResource class.
     */
    public RetrieveThroughputPropertiesResource() {
    }

    /**
     * Get the physicalPartitionIds property: Array of PhysicalPartitionId objects.
     * 
     * @return the physicalPartitionIds value.
     */
    public List<PhysicalPartitionId> physicalPartitionIds() {
        return this.physicalPartitionIds;
    }

    /**
     * Set the physicalPartitionIds property: Array of PhysicalPartitionId objects.
     * 
     * @param physicalPartitionIds the physicalPartitionIds value to set.
     * @return the RetrieveThroughputPropertiesResource object itself.
     */
    public RetrieveThroughputPropertiesResource
        withPhysicalPartitionIds(List<PhysicalPartitionId> physicalPartitionIds) {
        this.physicalPartitionIds = physicalPartitionIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (physicalPartitionIds() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property physicalPartitionIds in model RetrieveThroughputPropertiesResource"));
        } else {
            physicalPartitionIds().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RetrieveThroughputPropertiesResource.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("physicalPartitionIds", this.physicalPartitionIds,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RetrieveThroughputPropertiesResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RetrieveThroughputPropertiesResource if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RetrieveThroughputPropertiesResource.
     */
    public static RetrieveThroughputPropertiesResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RetrieveThroughputPropertiesResource deserializedRetrieveThroughputPropertiesResource
                = new RetrieveThroughputPropertiesResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("physicalPartitionIds".equals(fieldName)) {
                    List<PhysicalPartitionId> physicalPartitionIds
                        = reader.readArray(reader1 -> PhysicalPartitionId.fromJson(reader1));
                    deserializedRetrieveThroughputPropertiesResource.physicalPartitionIds = physicalPartitionIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRetrieveThroughputPropertiesResource;
        });
    }
}
