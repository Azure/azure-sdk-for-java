// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.cosmos.models.DataTransferDataSourceSink;
import com.azure.resourcemanager.cosmos.models.DataTransferJobMode;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The properties of a DataTransfer Job.
 */
@Fluent
public final class DataTransferJobProperties implements JsonSerializable<DataTransferJobProperties> {
    /*
     * Job Name
     */
    private String jobName;

    /*
     * Source DataStore details
     */
    private DataTransferDataSourceSink source;

    /*
     * Destination DataStore details
     */
    private DataTransferDataSourceSink destination;

    /*
     * Job Status
     */
    private String status;

    /*
     * Processed Count.
     */
    private Long processedCount;

    /*
     * Total Count.
     */
    private Long totalCount;

    /*
     * Last Updated Time (ISO-8601 format).
     */
    private OffsetDateTime lastUpdatedUtcTime;

    /*
     * Worker count
     */
    private Integer workerCount;

    /*
     * Error response for Faulted job
     */
    private ManagementError error;

    /*
     * Total Duration of Job
     */
    private String duration;

    /*
     * Mode of job execution
     */
    private DataTransferJobMode mode;

    /**
     * Creates an instance of DataTransferJobProperties class.
     */
    public DataTransferJobProperties() {
    }

    /**
     * Get the jobName property: Job Name.
     * 
     * @return the jobName value.
     */
    public String jobName() {
        return this.jobName;
    }

    /**
     * Get the source property: Source DataStore details.
     * 
     * @return the source value.
     */
    public DataTransferDataSourceSink source() {
        return this.source;
    }

    /**
     * Set the source property: Source DataStore details.
     * 
     * @param source the source value to set.
     * @return the DataTransferJobProperties object itself.
     */
    public DataTransferJobProperties withSource(DataTransferDataSourceSink source) {
        this.source = source;
        return this;
    }

    /**
     * Get the destination property: Destination DataStore details.
     * 
     * @return the destination value.
     */
    public DataTransferDataSourceSink destination() {
        return this.destination;
    }

    /**
     * Set the destination property: Destination DataStore details.
     * 
     * @param destination the destination value to set.
     * @return the DataTransferJobProperties object itself.
     */
    public DataTransferJobProperties withDestination(DataTransferDataSourceSink destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get the status property: Job Status.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the processedCount property: Processed Count.
     * 
     * @return the processedCount value.
     */
    public Long processedCount() {
        return this.processedCount;
    }

    /**
     * Get the totalCount property: Total Count.
     * 
     * @return the totalCount value.
     */
    public Long totalCount() {
        return this.totalCount;
    }

    /**
     * Get the lastUpdatedUtcTime property: Last Updated Time (ISO-8601 format).
     * 
     * @return the lastUpdatedUtcTime value.
     */
    public OffsetDateTime lastUpdatedUtcTime() {
        return this.lastUpdatedUtcTime;
    }

    /**
     * Get the workerCount property: Worker count.
     * 
     * @return the workerCount value.
     */
    public Integer workerCount() {
        return this.workerCount;
    }

    /**
     * Set the workerCount property: Worker count.
     * 
     * @param workerCount the workerCount value to set.
     * @return the DataTransferJobProperties object itself.
     */
    public DataTransferJobProperties withWorkerCount(Integer workerCount) {
        this.workerCount = workerCount;
        return this;
    }

    /**
     * Get the error property: Error response for Faulted job.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Get the duration property: Total Duration of Job.
     * 
     * @return the duration value.
     */
    public String duration() {
        return this.duration;
    }

    /**
     * Get the mode property: Mode of job execution.
     * 
     * @return the mode value.
     */
    public DataTransferJobMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Mode of job execution.
     * 
     * @param mode the mode value to set.
     * @return the DataTransferJobProperties object itself.
     */
    public DataTransferJobProperties withMode(DataTransferJobMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (source() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property source in model DataTransferJobProperties"));
        } else {
            source().validate();
        }
        if (destination() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property destination in model DataTransferJobProperties"));
        } else {
            destination().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataTransferJobProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("source", this.source);
        jsonWriter.writeJsonField("destination", this.destination);
        jsonWriter.writeNumberField("workerCount", this.workerCount);
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataTransferJobProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataTransferJobProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataTransferJobProperties.
     */
    public static DataTransferJobProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataTransferJobProperties deserializedDataTransferJobProperties = new DataTransferJobProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("source".equals(fieldName)) {
                    deserializedDataTransferJobProperties.source = DataTransferDataSourceSink.fromJson(reader);
                } else if ("destination".equals(fieldName)) {
                    deserializedDataTransferJobProperties.destination = DataTransferDataSourceSink.fromJson(reader);
                } else if ("jobName".equals(fieldName)) {
                    deserializedDataTransferJobProperties.jobName = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedDataTransferJobProperties.status = reader.getString();
                } else if ("processedCount".equals(fieldName)) {
                    deserializedDataTransferJobProperties.processedCount = reader.getNullable(JsonReader::getLong);
                } else if ("totalCount".equals(fieldName)) {
                    deserializedDataTransferJobProperties.totalCount = reader.getNullable(JsonReader::getLong);
                } else if ("lastUpdatedUtcTime".equals(fieldName)) {
                    deserializedDataTransferJobProperties.lastUpdatedUtcTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("workerCount".equals(fieldName)) {
                    deserializedDataTransferJobProperties.workerCount = reader.getNullable(JsonReader::getInt);
                } else if ("error".equals(fieldName)) {
                    deserializedDataTransferJobProperties.error = ManagementError.fromJson(reader);
                } else if ("duration".equals(fieldName)) {
                    deserializedDataTransferJobProperties.duration = reader.getString();
                } else if ("mode".equals(fieldName)) {
                    deserializedDataTransferJobProperties.mode = DataTransferJobMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataTransferJobProperties;
        });
    }
}
