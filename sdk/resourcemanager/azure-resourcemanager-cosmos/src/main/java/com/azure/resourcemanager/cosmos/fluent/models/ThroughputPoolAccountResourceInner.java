// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.cosmos.models.Status;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * An Azure Cosmos DB Throughputpool Account.
 */
@Fluent
public final class ThroughputPoolAccountResourceInner extends ProxyResource {
    /*
     * An Azure Cosmos DB Global Database Account which is part of a Throughputpool.
     */
    @JsonProperty(value = "properties")
    private ThroughputPoolAccountProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of ThroughputPoolAccountResourceInner class.
     */
    public ThroughputPoolAccountResourceInner() {
    }

    /**
     * Get the innerProperties property: An Azure Cosmos DB Global Database Account which is part of a Throughputpool.
     * 
     * @return the innerProperties value.
     */
    private ThroughputPoolAccountProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the provisioningState property: A provisioning state of the ThroughputPool Account.
     * 
     * @return the provisioningState value.
     */
    public Status provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Set the provisioningState property: A provisioning state of the ThroughputPool Account.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the ThroughputPoolAccountResourceInner object itself.
     */
    public ThroughputPoolAccountResourceInner withProvisioningState(Status provisioningState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ThroughputPoolAccountProperties();
        }
        this.innerProperties().withProvisioningState(provisioningState);
        return this;
    }

    /**
     * Get the accountResourceIdentifier property: The resource identifier of global database account in the
     * throughputPool.
     * 
     * @return the accountResourceIdentifier value.
     */
    public String accountResourceIdentifier() {
        return this.innerProperties() == null ? null : this.innerProperties().accountResourceIdentifier();
    }

    /**
     * Set the accountResourceIdentifier property: The resource identifier of global database account in the
     * throughputPool.
     * 
     * @param accountResourceIdentifier the accountResourceIdentifier value to set.
     * @return the ThroughputPoolAccountResourceInner object itself.
     */
    public ThroughputPoolAccountResourceInner withAccountResourceIdentifier(String accountResourceIdentifier) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ThroughputPoolAccountProperties();
        }
        this.innerProperties().withAccountResourceIdentifier(accountResourceIdentifier);
        return this;
    }

    /**
     * Get the accountLocation property: The location of global database account in the throughputPool.
     * 
     * @return the accountLocation value.
     */
    public String accountLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().accountLocation();
    }

    /**
     * Set the accountLocation property: The location of global database account in the throughputPool.
     * 
     * @param accountLocation the accountLocation value to set.
     * @return the ThroughputPoolAccountResourceInner object itself.
     */
    public ThroughputPoolAccountResourceInner withAccountLocation(String accountLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ThroughputPoolAccountProperties();
        }
        this.innerProperties().withAccountLocation(accountLocation);
        return this;
    }

    /**
     * Get the accountInstanceId property: The instance id of global database account in the throughputPool.
     * 
     * @return the accountInstanceId value.
     */
    public String accountInstanceId() {
        return this.innerProperties() == null ? null : this.innerProperties().accountInstanceId();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
