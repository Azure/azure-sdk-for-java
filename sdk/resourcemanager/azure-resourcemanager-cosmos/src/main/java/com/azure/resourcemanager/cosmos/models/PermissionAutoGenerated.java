// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The set of data plane operations permitted through this Role Definition.
 */
@Fluent
public final class PermissionAutoGenerated implements JsonSerializable<PermissionAutoGenerated> {
    /*
     * The id for the permission.
     */
    private String id;

    /*
     * An array of data actions that are allowed.
     */
    private List<String> dataActions;

    /*
     * An array of data actions that are denied.
     */
    private List<String> notDataActions;

    /**
     * Creates an instance of PermissionAutoGenerated class.
     */
    public PermissionAutoGenerated() {
    }

    /**
     * Get the id property: The id for the permission.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The id for the permission.
     * 
     * @param id the id value to set.
     * @return the PermissionAutoGenerated object itself.
     */
    public PermissionAutoGenerated withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the dataActions property: An array of data actions that are allowed.
     * 
     * @return the dataActions value.
     */
    public List<String> dataActions() {
        return this.dataActions;
    }

    /**
     * Set the dataActions property: An array of data actions that are allowed.
     * 
     * @param dataActions the dataActions value to set.
     * @return the PermissionAutoGenerated object itself.
     */
    public PermissionAutoGenerated withDataActions(List<String> dataActions) {
        this.dataActions = dataActions;
        return this;
    }

    /**
     * Get the notDataActions property: An array of data actions that are denied.
     * 
     * @return the notDataActions value.
     */
    public List<String> notDataActions() {
        return this.notDataActions;
    }

    /**
     * Set the notDataActions property: An array of data actions that are denied.
     * 
     * @param notDataActions the notDataActions value to set.
     * @return the PermissionAutoGenerated object itself.
     */
    public PermissionAutoGenerated withNotDataActions(List<String> notDataActions) {
        this.notDataActions = notDataActions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeArrayField("dataActions", this.dataActions, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("notDataActions", this.notDataActions,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PermissionAutoGenerated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PermissionAutoGenerated if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PermissionAutoGenerated.
     */
    public static PermissionAutoGenerated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PermissionAutoGenerated deserializedPermissionAutoGenerated = new PermissionAutoGenerated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedPermissionAutoGenerated.id = reader.getString();
                } else if ("dataActions".equals(fieldName)) {
                    List<String> dataActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedPermissionAutoGenerated.dataActions = dataActions;
                } else if ("notDataActions".equals(fieldName)) {
                    List<String> notDataActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedPermissionAutoGenerated.notDataActions = notDataActions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPermissionAutoGenerated;
        });
    }
}
