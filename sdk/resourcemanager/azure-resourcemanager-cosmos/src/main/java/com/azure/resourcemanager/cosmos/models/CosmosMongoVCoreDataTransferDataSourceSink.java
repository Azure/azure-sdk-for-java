// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A CosmosDB Mongo vCore API data source/sink.
 */
@Fluent
public final class CosmosMongoVCoreDataTransferDataSourceSink extends DataTransferDataSourceSink {
    /*
     * The component property.
     */
    private DataTransferComponent component = DataTransferComponent.COSMOS_DBMONGO_VCORE;

    /*
     * The databaseName property.
     */
    private String databaseName;

    /*
     * The collectionName property.
     */
    private String collectionName;

    /*
     * The hostName property.
     */
    private String hostname;

    /*
     * The connectionStringKeyVaultUri property.
     */
    private String connectionStringKeyVaultUri;

    /**
     * Creates an instance of CosmosMongoVCoreDataTransferDataSourceSink class.
     */
    public CosmosMongoVCoreDataTransferDataSourceSink() {
    }

    /**
     * Get the component property: The component property.
     * 
     * @return the component value.
     */
    @Override
    public DataTransferComponent component() {
        return this.component;
    }

    /**
     * Get the databaseName property: The databaseName property.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: The databaseName property.
     * 
     * @param databaseName the databaseName value to set.
     * @return the CosmosMongoVCoreDataTransferDataSourceSink object itself.
     */
    public CosmosMongoVCoreDataTransferDataSourceSink withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the collectionName property: The collectionName property.
     * 
     * @return the collectionName value.
     */
    public String collectionName() {
        return this.collectionName;
    }

    /**
     * Set the collectionName property: The collectionName property.
     * 
     * @param collectionName the collectionName value to set.
     * @return the CosmosMongoVCoreDataTransferDataSourceSink object itself.
     */
    public CosmosMongoVCoreDataTransferDataSourceSink withCollectionName(String collectionName) {
        this.collectionName = collectionName;
        return this;
    }

    /**
     * Get the hostname property: The hostName property.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The hostName property.
     * 
     * @param hostname the hostname value to set.
     * @return the CosmosMongoVCoreDataTransferDataSourceSink object itself.
     */
    public CosmosMongoVCoreDataTransferDataSourceSink withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the connectionStringKeyVaultUri property: The connectionStringKeyVaultUri property.
     * 
     * @return the connectionStringKeyVaultUri value.
     */
    public String connectionStringKeyVaultUri() {
        return this.connectionStringKeyVaultUri;
    }

    /**
     * Set the connectionStringKeyVaultUri property: The connectionStringKeyVaultUri property.
     * 
     * @param connectionStringKeyVaultUri the connectionStringKeyVaultUri value to set.
     * @return the CosmosMongoVCoreDataTransferDataSourceSink object itself.
     */
    public CosmosMongoVCoreDataTransferDataSourceSink
        withConnectionStringKeyVaultUri(String connectionStringKeyVaultUri) {
        this.connectionStringKeyVaultUri = connectionStringKeyVaultUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (databaseName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property databaseName in model CosmosMongoVCoreDataTransferDataSourceSink"));
        }
        if (collectionName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property collectionName in model CosmosMongoVCoreDataTransferDataSourceSink"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CosmosMongoVCoreDataTransferDataSourceSink.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("databaseName", this.databaseName);
        jsonWriter.writeStringField("collectionName", this.collectionName);
        jsonWriter.writeStringField("component", this.component == null ? null : this.component.toString());
        jsonWriter.writeStringField("hostName", this.hostname);
        jsonWriter.writeStringField("connectionStringKeyVaultUri", this.connectionStringKeyVaultUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CosmosMongoVCoreDataTransferDataSourceSink from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CosmosMongoVCoreDataTransferDataSourceSink if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CosmosMongoVCoreDataTransferDataSourceSink.
     */
    public static CosmosMongoVCoreDataTransferDataSourceSink fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CosmosMongoVCoreDataTransferDataSourceSink deserializedCosmosMongoVCoreDataTransferDataSourceSink
                = new CosmosMongoVCoreDataTransferDataSourceSink();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("databaseName".equals(fieldName)) {
                    deserializedCosmosMongoVCoreDataTransferDataSourceSink.databaseName = reader.getString();
                } else if ("collectionName".equals(fieldName)) {
                    deserializedCosmosMongoVCoreDataTransferDataSourceSink.collectionName = reader.getString();
                } else if ("component".equals(fieldName)) {
                    deserializedCosmosMongoVCoreDataTransferDataSourceSink.component
                        = DataTransferComponent.fromString(reader.getString());
                } else if ("hostName".equals(fieldName)) {
                    deserializedCosmosMongoVCoreDataTransferDataSourceSink.hostname = reader.getString();
                } else if ("connectionStringKeyVaultUri".equals(fieldName)) {
                    deserializedCosmosMongoVCoreDataTransferDataSourceSink.connectionStringKeyVaultUri
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCosmosMongoVCoreDataTransferDataSourceSink;
        });
    }
}
