// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cosmos DB throughput bucket object.
 */
@Fluent
public final class ThroughputBucketResource implements JsonSerializable<ThroughputBucketResource> {
    /*
     * Represents the throughput bucket id
     */
    private int id;

    /*
     * Represents maximum percentage throughput that can be used by the bucket
     */
    private int maxThroughputPercentage;

    /**
     * Creates an instance of ThroughputBucketResource class.
     */
    public ThroughputBucketResource() {
    }

    /**
     * Get the id property: Represents the throughput bucket id.
     * 
     * @return the id value.
     */
    public int id() {
        return this.id;
    }

    /**
     * Set the id property: Represents the throughput bucket id.
     * 
     * @param id the id value to set.
     * @return the ThroughputBucketResource object itself.
     */
    public ThroughputBucketResource withId(int id) {
        this.id = id;
        return this;
    }

    /**
     * Get the maxThroughputPercentage property: Represents maximum percentage throughput that can be used by the
     * bucket.
     * 
     * @return the maxThroughputPercentage value.
     */
    public int maxThroughputPercentage() {
        return this.maxThroughputPercentage;
    }

    /**
     * Set the maxThroughputPercentage property: Represents maximum percentage throughput that can be used by the
     * bucket.
     * 
     * @param maxThroughputPercentage the maxThroughputPercentage value to set.
     * @return the ThroughputBucketResource object itself.
     */
    public ThroughputBucketResource withMaxThroughputPercentage(int maxThroughputPercentage) {
        this.maxThroughputPercentage = maxThroughputPercentage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("id", this.id);
        jsonWriter.writeIntField("maxThroughputPercentage", this.maxThroughputPercentage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ThroughputBucketResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ThroughputBucketResource if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ThroughputBucketResource.
     */
    public static ThroughputBucketResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ThroughputBucketResource deserializedThroughputBucketResource = new ThroughputBucketResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedThroughputBucketResource.id = reader.getInt();
                } else if ("maxThroughputPercentage".equals(fieldName)) {
                    deserializedThroughputBucketResource.maxThroughputPercentage = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedThroughputBucketResource;
        });
    }
}
