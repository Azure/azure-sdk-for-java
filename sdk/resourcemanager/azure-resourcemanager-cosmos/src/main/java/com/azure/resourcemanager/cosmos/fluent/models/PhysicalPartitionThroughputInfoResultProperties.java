// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.cosmos.models.PhysicalPartitionThroughputInfoResultPropertiesResource;
import java.io.IOException;

/**
 * The properties of an Azure Cosmos DB PhysicalPartitionThroughputInfoResult object.
 */
@Fluent
public final class PhysicalPartitionThroughputInfoResultProperties
    implements JsonSerializable<PhysicalPartitionThroughputInfoResultProperties> {
    /*
     * properties of physical partition throughput info
     */
    private PhysicalPartitionThroughputInfoResultPropertiesResource resource;

    /**
     * Creates an instance of PhysicalPartitionThroughputInfoResultProperties class.
     */
    public PhysicalPartitionThroughputInfoResultProperties() {
    }

    /**
     * Get the resource property: properties of physical partition throughput info.
     * 
     * @return the resource value.
     */
    public PhysicalPartitionThroughputInfoResultPropertiesResource resource() {
        return this.resource;
    }

    /**
     * Set the resource property: properties of physical partition throughput info.
     * 
     * @param resource the resource value to set.
     * @return the PhysicalPartitionThroughputInfoResultProperties object itself.
     */
    public PhysicalPartitionThroughputInfoResultProperties
        withResource(PhysicalPartitionThroughputInfoResultPropertiesResource resource) {
        this.resource = resource;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resource() != null) {
            resource().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("resource", this.resource);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PhysicalPartitionThroughputInfoResultProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PhysicalPartitionThroughputInfoResultProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PhysicalPartitionThroughputInfoResultProperties.
     */
    public static PhysicalPartitionThroughputInfoResultProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PhysicalPartitionThroughputInfoResultProperties deserializedPhysicalPartitionThroughputInfoResultProperties
                = new PhysicalPartitionThroughputInfoResultProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resource".equals(fieldName)) {
                    deserializedPhysicalPartitionThroughputInfoResultProperties.resource
                        = PhysicalPartitionThroughputInfoResultPropertiesResource.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPhysicalPartitionThroughputInfoResultProperties;
        });
    }
}
