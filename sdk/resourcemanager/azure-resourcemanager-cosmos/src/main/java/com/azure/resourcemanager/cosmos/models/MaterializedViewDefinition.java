// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Materialized View definition for the container. */
@Fluent
public final class MaterializedViewDefinition {
    /*
     * An unique identifier for the source collection. This is a system generated property.
     */
    @JsonProperty(value = "sourceCollectionRid", access = JsonProperty.Access.WRITE_ONLY)
    private String sourceCollectionRid;

    /*
     * The name of the source container on which the Materialized View will be created.
     */
    @JsonProperty(value = "sourceCollectionId", required = true)
    private String sourceCollectionId;

    /*
     * The definition should be an SQL query which would be used to fetch data from the source container to populate
     * into the Materialized View container.
     */
    @JsonProperty(value = "definition", required = true)
    private String definition;

    /** Creates an instance of MaterializedViewDefinition class. */
    public MaterializedViewDefinition() {
    }

    /**
     * Get the sourceCollectionRid property: An unique identifier for the source collection. This is a system generated
     * property.
     *
     * @return the sourceCollectionRid value.
     */
    public String sourceCollectionRid() {
        return this.sourceCollectionRid;
    }

    /**
     * Get the sourceCollectionId property: The name of the source container on which the Materialized View will be
     * created.
     *
     * @return the sourceCollectionId value.
     */
    public String sourceCollectionId() {
        return this.sourceCollectionId;
    }

    /**
     * Set the sourceCollectionId property: The name of the source container on which the Materialized View will be
     * created.
     *
     * @param sourceCollectionId the sourceCollectionId value to set.
     * @return the MaterializedViewDefinition object itself.
     */
    public MaterializedViewDefinition withSourceCollectionId(String sourceCollectionId) {
        this.sourceCollectionId = sourceCollectionId;
        return this;
    }

    /**
     * Get the definition property: The definition should be an SQL query which would be used to fetch data from the
     * source container to populate into the Materialized View container.
     *
     * @return the definition value.
     */
    public String definition() {
        return this.definition;
    }

    /**
     * Set the definition property: The definition should be an SQL query which would be used to fetch data from the
     * source container to populate into the Materialized View container.
     *
     * @param definition the definition value to set.
     * @return the MaterializedViewDefinition object itself.
     */
    public MaterializedViewDefinition withDefinition(String definition) {
        this.definition = definition;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceCollectionId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property sourceCollectionId in model MaterializedViewDefinition"));
        }
        if (definition() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property definition in model MaterializedViewDefinition"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MaterializedViewDefinition.class);
}
