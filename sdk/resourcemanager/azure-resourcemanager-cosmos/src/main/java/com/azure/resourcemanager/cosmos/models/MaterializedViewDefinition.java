// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Materialized View definition for the container.
 */
@Fluent
public final class MaterializedViewDefinition implements JsonSerializable<MaterializedViewDefinition> {
    /*
     * An unique identifier for the source collection. This is a system generated property.
     */
    private String sourceCollectionRid;

    /*
     * The name of the source container on which the Materialized View will be created.
     */
    private String sourceCollectionId;

    /*
     * The definition should be an SQL query which would be used to fetch data from the source container to populate
     * into the Materialized View container.
     */
    private String definition;

    /**
     * Creates an instance of MaterializedViewDefinition class.
     */
    public MaterializedViewDefinition() {
    }

    /**
     * Get the sourceCollectionRid property: An unique identifier for the source collection. This is a system generated
     * property.
     * 
     * @return the sourceCollectionRid value.
     */
    public String sourceCollectionRid() {
        return this.sourceCollectionRid;
    }

    /**
     * Get the sourceCollectionId property: The name of the source container on which the Materialized View will be
     * created.
     * 
     * @return the sourceCollectionId value.
     */
    public String sourceCollectionId() {
        return this.sourceCollectionId;
    }

    /**
     * Set the sourceCollectionId property: The name of the source container on which the Materialized View will be
     * created.
     * 
     * @param sourceCollectionId the sourceCollectionId value to set.
     * @return the MaterializedViewDefinition object itself.
     */
    public MaterializedViewDefinition withSourceCollectionId(String sourceCollectionId) {
        this.sourceCollectionId = sourceCollectionId;
        return this;
    }

    /**
     * Get the definition property: The definition should be an SQL query which would be used to fetch data from the
     * source container to populate into the Materialized View container.
     * 
     * @return the definition value.
     */
    public String definition() {
        return this.definition;
    }

    /**
     * Set the definition property: The definition should be an SQL query which would be used to fetch data from the
     * source container to populate into the Materialized View container.
     * 
     * @param definition the definition value to set.
     * @return the MaterializedViewDefinition object itself.
     */
    public MaterializedViewDefinition withDefinition(String definition) {
        this.definition = definition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceCollectionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceCollectionId in model MaterializedViewDefinition"));
        }
        if (definition() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property definition in model MaterializedViewDefinition"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MaterializedViewDefinition.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceCollectionId", this.sourceCollectionId);
        jsonWriter.writeStringField("definition", this.definition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MaterializedViewDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MaterializedViewDefinition if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MaterializedViewDefinition.
     */
    public static MaterializedViewDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MaterializedViewDefinition deserializedMaterializedViewDefinition = new MaterializedViewDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceCollectionId".equals(fieldName)) {
                    deserializedMaterializedViewDefinition.sourceCollectionId = reader.getString();
                } else if ("definition".equals(fieldName)) {
                    deserializedMaterializedViewDefinition.definition = reader.getString();
                } else if ("sourceCollectionRid".equals(fieldName)) {
                    deserializedMaterializedViewDefinition.sourceCollectionRid = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMaterializedViewDefinition;
        });
    }
}
