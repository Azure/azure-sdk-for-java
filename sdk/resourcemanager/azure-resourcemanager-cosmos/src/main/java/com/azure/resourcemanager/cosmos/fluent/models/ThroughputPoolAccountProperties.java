// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.cosmos.models.Status;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * An Azure Cosmos DB Global Database Account which is part of a Throughputpool.
 */
@Fluent
public final class ThroughputPoolAccountProperties {
    /*
     * A provisioning state of the ThroughputPool Account.
     */
    @JsonProperty(value = "provisioningState")
    private Status provisioningState;

    /*
     * The resource identifier of global database account in the throughputPool.
     */
    @JsonProperty(value = "accountResourceIdentifier")
    private String accountResourceIdentifier;

    /*
     * The location of global database account in the throughputPool.
     */
    @JsonProperty(value = "accountLocation")
    private String accountLocation;

    /*
     * The instance id of global database account in the throughputPool.
     */
    @JsonProperty(value = "accountInstanceId", access = JsonProperty.Access.WRITE_ONLY)
    private String accountInstanceId;

    /**
     * Creates an instance of ThroughputPoolAccountProperties class.
     */
    public ThroughputPoolAccountProperties() {
    }

    /**
     * Get the provisioningState property: A provisioning state of the ThroughputPool Account.
     * 
     * @return the provisioningState value.
     */
    public Status provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: A provisioning state of the ThroughputPool Account.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the ThroughputPoolAccountProperties object itself.
     */
    public ThroughputPoolAccountProperties withProvisioningState(Status provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the accountResourceIdentifier property: The resource identifier of global database account in the
     * throughputPool.
     * 
     * @return the accountResourceIdentifier value.
     */
    public String accountResourceIdentifier() {
        return this.accountResourceIdentifier;
    }

    /**
     * Set the accountResourceIdentifier property: The resource identifier of global database account in the
     * throughputPool.
     * 
     * @param accountResourceIdentifier the accountResourceIdentifier value to set.
     * @return the ThroughputPoolAccountProperties object itself.
     */
    public ThroughputPoolAccountProperties withAccountResourceIdentifier(String accountResourceIdentifier) {
        this.accountResourceIdentifier = accountResourceIdentifier;
        return this;
    }

    /**
     * Get the accountLocation property: The location of global database account in the throughputPool.
     * 
     * @return the accountLocation value.
     */
    public String accountLocation() {
        return this.accountLocation;
    }

    /**
     * Set the accountLocation property: The location of global database account in the throughputPool.
     * 
     * @param accountLocation the accountLocation value to set.
     * @return the ThroughputPoolAccountProperties object itself.
     */
    public ThroughputPoolAccountProperties withAccountLocation(String accountLocation) {
        this.accountLocation = accountLocation;
        return this;
    }

    /**
     * Get the accountInstanceId property: The instance id of global database account in the throughputPool.
     * 
     * @return the accountInstanceId value.
     */
    public String accountInstanceId() {
        return this.accountInstanceId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
