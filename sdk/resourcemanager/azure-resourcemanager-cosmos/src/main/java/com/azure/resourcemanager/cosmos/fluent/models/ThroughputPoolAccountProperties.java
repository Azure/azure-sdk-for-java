// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.cosmos.models.Status;
import java.io.IOException;

/**
 * An Azure Cosmos DB Global Database Account which is part of a Throughputpool.
 */
@Fluent
public final class ThroughputPoolAccountProperties implements JsonSerializable<ThroughputPoolAccountProperties> {
    /*
     * A provisioning state of the ThroughputPool Account.
     */
    private Status provisioningState;

    /*
     * The resource identifier of global database account in the throughputPool.
     */
    private String accountResourceIdentifier;

    /*
     * The location of global database account in the throughputPool.
     */
    private String accountLocation;

    /*
     * The instance id of global database account in the throughputPool.
     */
    private String accountInstanceId;

    /**
     * Creates an instance of ThroughputPoolAccountProperties class.
     */
    public ThroughputPoolAccountProperties() {
    }

    /**
     * Get the provisioningState property: A provisioning state of the ThroughputPool Account.
     * 
     * @return the provisioningState value.
     */
    public Status provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: A provisioning state of the ThroughputPool Account.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the ThroughputPoolAccountProperties object itself.
     */
    public ThroughputPoolAccountProperties withProvisioningState(Status provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the accountResourceIdentifier property: The resource identifier of global database account in the
     * throughputPool.
     * 
     * @return the accountResourceIdentifier value.
     */
    public String accountResourceIdentifier() {
        return this.accountResourceIdentifier;
    }

    /**
     * Set the accountResourceIdentifier property: The resource identifier of global database account in the
     * throughputPool.
     * 
     * @param accountResourceIdentifier the accountResourceIdentifier value to set.
     * @return the ThroughputPoolAccountProperties object itself.
     */
    public ThroughputPoolAccountProperties withAccountResourceIdentifier(String accountResourceIdentifier) {
        this.accountResourceIdentifier = accountResourceIdentifier;
        return this;
    }

    /**
     * Get the accountLocation property: The location of global database account in the throughputPool.
     * 
     * @return the accountLocation value.
     */
    public String accountLocation() {
        return this.accountLocation;
    }

    /**
     * Set the accountLocation property: The location of global database account in the throughputPool.
     * 
     * @param accountLocation the accountLocation value to set.
     * @return the ThroughputPoolAccountProperties object itself.
     */
    public ThroughputPoolAccountProperties withAccountLocation(String accountLocation) {
        this.accountLocation = accountLocation;
        return this;
    }

    /**
     * Get the accountInstanceId property: The instance id of global database account in the throughputPool.
     * 
     * @return the accountInstanceId value.
     */
    public String accountInstanceId() {
        return this.accountInstanceId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        jsonWriter.writeStringField("accountResourceIdentifier", this.accountResourceIdentifier);
        jsonWriter.writeStringField("accountLocation", this.accountLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ThroughputPoolAccountProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ThroughputPoolAccountProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ThroughputPoolAccountProperties.
     */
    public static ThroughputPoolAccountProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ThroughputPoolAccountProperties deserializedThroughputPoolAccountProperties
                = new ThroughputPoolAccountProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedThroughputPoolAccountProperties.provisioningState
                        = Status.fromString(reader.getString());
                } else if ("accountResourceIdentifier".equals(fieldName)) {
                    deserializedThroughputPoolAccountProperties.accountResourceIdentifier = reader.getString();
                } else if ("accountLocation".equals(fieldName)) {
                    deserializedThroughputPoolAccountProperties.accountLocation = reader.getString();
                } else if ("accountInstanceId".equals(fieldName)) {
                    deserializedThroughputPoolAccountProperties.accountInstanceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedThroughputPoolAccountProperties;
        });
    }
}
