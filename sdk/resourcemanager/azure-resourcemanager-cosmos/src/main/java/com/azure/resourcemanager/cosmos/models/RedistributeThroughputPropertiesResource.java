// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Resource to redistribute throughput for Azure Cosmos DB resource.
 */
@Fluent
public final class RedistributeThroughputPropertiesResource
    implements JsonSerializable<RedistributeThroughputPropertiesResource> {
    /*
     * ThroughputPolicy to apply for throughput redistribution
     */
    private ThroughputPolicyType throughputPolicy;

    /*
     * Array of PhysicalPartitionThroughputInfoResource objects.
     */
    private List<PhysicalPartitionThroughputInfoResource> targetPhysicalPartitionThroughputInfo;

    /*
     * Array of PhysicalPartitionThroughputInfoResource objects.
     */
    private List<PhysicalPartitionThroughputInfoResource> sourcePhysicalPartitionThroughputInfo;

    /**
     * Creates an instance of RedistributeThroughputPropertiesResource class.
     */
    public RedistributeThroughputPropertiesResource() {
    }

    /**
     * Get the throughputPolicy property: ThroughputPolicy to apply for throughput redistribution.
     * 
     * @return the throughputPolicy value.
     */
    public ThroughputPolicyType throughputPolicy() {
        return this.throughputPolicy;
    }

    /**
     * Set the throughputPolicy property: ThroughputPolicy to apply for throughput redistribution.
     * 
     * @param throughputPolicy the throughputPolicy value to set.
     * @return the RedistributeThroughputPropertiesResource object itself.
     */
    public RedistributeThroughputPropertiesResource withThroughputPolicy(ThroughputPolicyType throughputPolicy) {
        this.throughputPolicy = throughputPolicy;
        return this;
    }

    /**
     * Get the targetPhysicalPartitionThroughputInfo property: Array of PhysicalPartitionThroughputInfoResource objects.
     * 
     * @return the targetPhysicalPartitionThroughputInfo value.
     */
    public List<PhysicalPartitionThroughputInfoResource> targetPhysicalPartitionThroughputInfo() {
        return this.targetPhysicalPartitionThroughputInfo;
    }

    /**
     * Set the targetPhysicalPartitionThroughputInfo property: Array of PhysicalPartitionThroughputInfoResource objects.
     * 
     * @param targetPhysicalPartitionThroughputInfo the targetPhysicalPartitionThroughputInfo value to set.
     * @return the RedistributeThroughputPropertiesResource object itself.
     */
    public RedistributeThroughputPropertiesResource withTargetPhysicalPartitionThroughputInfo(
        List<PhysicalPartitionThroughputInfoResource> targetPhysicalPartitionThroughputInfo) {
        this.targetPhysicalPartitionThroughputInfo = targetPhysicalPartitionThroughputInfo;
        return this;
    }

    /**
     * Get the sourcePhysicalPartitionThroughputInfo property: Array of PhysicalPartitionThroughputInfoResource objects.
     * 
     * @return the sourcePhysicalPartitionThroughputInfo value.
     */
    public List<PhysicalPartitionThroughputInfoResource> sourcePhysicalPartitionThroughputInfo() {
        return this.sourcePhysicalPartitionThroughputInfo;
    }

    /**
     * Set the sourcePhysicalPartitionThroughputInfo property: Array of PhysicalPartitionThroughputInfoResource objects.
     * 
     * @param sourcePhysicalPartitionThroughputInfo the sourcePhysicalPartitionThroughputInfo value to set.
     * @return the RedistributeThroughputPropertiesResource object itself.
     */
    public RedistributeThroughputPropertiesResource withSourcePhysicalPartitionThroughputInfo(
        List<PhysicalPartitionThroughputInfoResource> sourcePhysicalPartitionThroughputInfo) {
        this.sourcePhysicalPartitionThroughputInfo = sourcePhysicalPartitionThroughputInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (throughputPolicy() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property throughputPolicy in model RedistributeThroughputPropertiesResource"));
        }
        if (targetPhysicalPartitionThroughputInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetPhysicalPartitionThroughputInfo in model RedistributeThroughputPropertiesResource"));
        } else {
            targetPhysicalPartitionThroughputInfo().forEach(e -> e.validate());
        }
        if (sourcePhysicalPartitionThroughputInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourcePhysicalPartitionThroughputInfo in model RedistributeThroughputPropertiesResource"));
        } else {
            sourcePhysicalPartitionThroughputInfo().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RedistributeThroughputPropertiesResource.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("throughputPolicy",
            this.throughputPolicy == null ? null : this.throughputPolicy.toString());
        jsonWriter.writeArrayField("targetPhysicalPartitionThroughputInfo", this.targetPhysicalPartitionThroughputInfo,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("sourcePhysicalPartitionThroughputInfo", this.sourcePhysicalPartitionThroughputInfo,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedistributeThroughputPropertiesResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedistributeThroughputPropertiesResource if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RedistributeThroughputPropertiesResource.
     */
    public static RedistributeThroughputPropertiesResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedistributeThroughputPropertiesResource deserializedRedistributeThroughputPropertiesResource
                = new RedistributeThroughputPropertiesResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("throughputPolicy".equals(fieldName)) {
                    deserializedRedistributeThroughputPropertiesResource.throughputPolicy
                        = ThroughputPolicyType.fromString(reader.getString());
                } else if ("targetPhysicalPartitionThroughputInfo".equals(fieldName)) {
                    List<PhysicalPartitionThroughputInfoResource> targetPhysicalPartitionThroughputInfo
                        = reader.readArray(reader1 -> PhysicalPartitionThroughputInfoResource.fromJson(reader1));
                    deserializedRedistributeThroughputPropertiesResource.targetPhysicalPartitionThroughputInfo
                        = targetPhysicalPartitionThroughputInfo;
                } else if ("sourcePhysicalPartitionThroughputInfo".equals(fieldName)) {
                    List<PhysicalPartitionThroughputInfoResource> sourcePhysicalPartitionThroughputInfo
                        = reader.readArray(reader1 -> PhysicalPartitionThroughputInfoResource.fromJson(reader1));
                    deserializedRedistributeThroughputPropertiesResource.sourcePhysicalPartitionThroughputInfo
                        = sourcePhysicalPartitionThroughputInfo;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRedistributeThroughputPropertiesResource;
        });
    }
}
