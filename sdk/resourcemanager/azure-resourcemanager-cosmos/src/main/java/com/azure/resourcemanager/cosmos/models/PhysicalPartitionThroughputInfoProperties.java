// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of an Azure Cosmos DB PhysicalPartitionThroughputInfoProperties object.
 */
@Fluent
public class PhysicalPartitionThroughputInfoProperties
    implements JsonSerializable<PhysicalPartitionThroughputInfoProperties> {
    /*
     * Array of physical partition throughput info objects
     */
    private List<PhysicalPartitionThroughputInfoResource> physicalPartitionThroughputInfo;

    /**
     * Creates an instance of PhysicalPartitionThroughputInfoProperties class.
     */
    public PhysicalPartitionThroughputInfoProperties() {
    }

    /**
     * Get the physicalPartitionThroughputInfo property: Array of physical partition throughput info objects.
     * 
     * @return the physicalPartitionThroughputInfo value.
     */
    public List<PhysicalPartitionThroughputInfoResource> physicalPartitionThroughputInfo() {
        return this.physicalPartitionThroughputInfo;
    }

    /**
     * Set the physicalPartitionThroughputInfo property: Array of physical partition throughput info objects.
     * 
     * @param physicalPartitionThroughputInfo the physicalPartitionThroughputInfo value to set.
     * @return the PhysicalPartitionThroughputInfoProperties object itself.
     */
    public PhysicalPartitionThroughputInfoProperties withPhysicalPartitionThroughputInfo(
        List<PhysicalPartitionThroughputInfoResource> physicalPartitionThroughputInfo) {
        this.physicalPartitionThroughputInfo = physicalPartitionThroughputInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (physicalPartitionThroughputInfo() != null) {
            physicalPartitionThroughputInfo().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("physicalPartitionThroughputInfo", this.physicalPartitionThroughputInfo,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PhysicalPartitionThroughputInfoProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PhysicalPartitionThroughputInfoProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PhysicalPartitionThroughputInfoProperties.
     */
    public static PhysicalPartitionThroughputInfoProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PhysicalPartitionThroughputInfoProperties deserializedPhysicalPartitionThroughputInfoProperties
                = new PhysicalPartitionThroughputInfoProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("physicalPartitionThroughputInfo".equals(fieldName)) {
                    List<PhysicalPartitionThroughputInfoResource> physicalPartitionThroughputInfo
                        = reader.readArray(reader1 -> PhysicalPartitionThroughputInfoResource.fromJson(reader1));
                    deserializedPhysicalPartitionThroughputInfoProperties.physicalPartitionThroughputInfo
                        = physicalPartitionThroughputInfo;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPhysicalPartitionThroughputInfoProperties;
        });
    }
}
