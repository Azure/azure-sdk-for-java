// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The properties of an Azure Cosmos DB PhysicalPartitionThroughputInfoProperties object. */
@Fluent
public class PhysicalPartitionThroughputInfoProperties {
    /*
     * Array of physical partition throughput info objects
     */
    @JsonProperty(value = "physicalPartitionThroughputInfo")
    private List<PhysicalPartitionThroughputInfoResource> physicalPartitionThroughputInfo;

    /** Creates an instance of PhysicalPartitionThroughputInfoProperties class. */
    public PhysicalPartitionThroughputInfoProperties() {
    }

    /**
     * Get the physicalPartitionThroughputInfo property: Array of physical partition throughput info objects.
     *
     * @return the physicalPartitionThroughputInfo value.
     */
    public List<PhysicalPartitionThroughputInfoResource> physicalPartitionThroughputInfo() {
        return this.physicalPartitionThroughputInfo;
    }

    /**
     * Set the physicalPartitionThroughputInfo property: Array of physical partition throughput info objects.
     *
     * @param physicalPartitionThroughputInfo the physicalPartitionThroughputInfo value to set.
     * @return the PhysicalPartitionThroughputInfoProperties object itself.
     */
    public PhysicalPartitionThroughputInfoProperties withPhysicalPartitionThroughputInfo(
        List<PhysicalPartitionThroughputInfoResource> physicalPartitionThroughputInfo) {
        this.physicalPartitionThroughputInfo = physicalPartitionThroughputInfo;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (physicalPartitionThroughputInfo() != null) {
            physicalPartitionThroughputInfo().forEach(e -> e.validate());
        }
    }
}
