// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.cosmos.models.ArmProxyResource;
import com.azure.resourcemanager.cosmos.models.DataTransferDataSourceSink;
import com.azure.resourcemanager.cosmos.models.DataTransferJobMode;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * A Cosmos DB Data Transfer Job.
 */
@Fluent
public final class DataTransferJobGetResultsInner extends ArmProxyResource {
    /*
     * The properties of a DataTransfer Job
     */
    private DataTransferJobProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of DataTransferJobGetResultsInner class.
     */
    public DataTransferJobGetResultsInner() {
    }

    /**
     * Get the innerProperties property: The properties of a DataTransfer Job.
     * 
     * @return the innerProperties value.
     */
    private DataTransferJobProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the jobName property: Job Name.
     * 
     * @return the jobName value.
     */
    public String jobName() {
        return this.innerProperties() == null ? null : this.innerProperties().jobName();
    }

    /**
     * Get the source property: Source DataStore details.
     * 
     * @return the source value.
     */
    public DataTransferDataSourceSink source() {
        return this.innerProperties() == null ? null : this.innerProperties().source();
    }

    /**
     * Set the source property: Source DataStore details.
     * 
     * @param source the source value to set.
     * @return the DataTransferJobGetResultsInner object itself.
     */
    public DataTransferJobGetResultsInner withSource(DataTransferDataSourceSink source) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataTransferJobProperties();
        }
        this.innerProperties().withSource(source);
        return this;
    }

    /**
     * Get the destination property: Destination DataStore details.
     * 
     * @return the destination value.
     */
    public DataTransferDataSourceSink destination() {
        return this.innerProperties() == null ? null : this.innerProperties().destination();
    }

    /**
     * Set the destination property: Destination DataStore details.
     * 
     * @param destination the destination value to set.
     * @return the DataTransferJobGetResultsInner object itself.
     */
    public DataTransferJobGetResultsInner withDestination(DataTransferDataSourceSink destination) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataTransferJobProperties();
        }
        this.innerProperties().withDestination(destination);
        return this;
    }

    /**
     * Get the status property: Job Status.
     * 
     * @return the status value.
     */
    public String status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the processedCount property: Processed Count.
     * 
     * @return the processedCount value.
     */
    public Long processedCount() {
        return this.innerProperties() == null ? null : this.innerProperties().processedCount();
    }

    /**
     * Get the totalCount property: Total Count.
     * 
     * @return the totalCount value.
     */
    public Long totalCount() {
        return this.innerProperties() == null ? null : this.innerProperties().totalCount();
    }

    /**
     * Get the lastUpdatedUtcTime property: Last Updated Time (ISO-8601 format).
     * 
     * @return the lastUpdatedUtcTime value.
     */
    public OffsetDateTime lastUpdatedUtcTime() {
        return this.innerProperties() == null ? null : this.innerProperties().lastUpdatedUtcTime();
    }

    /**
     * Get the workerCount property: Worker count.
     * 
     * @return the workerCount value.
     */
    public Integer workerCount() {
        return this.innerProperties() == null ? null : this.innerProperties().workerCount();
    }

    /**
     * Set the workerCount property: Worker count.
     * 
     * @param workerCount the workerCount value to set.
     * @return the DataTransferJobGetResultsInner object itself.
     */
    public DataTransferJobGetResultsInner withWorkerCount(Integer workerCount) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataTransferJobProperties();
        }
        this.innerProperties().withWorkerCount(workerCount);
        return this;
    }

    /**
     * Get the error property: Error response for Faulted job.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.innerProperties() == null ? null : this.innerProperties().error();
    }

    /**
     * Get the duration property: Total Duration of Job.
     * 
     * @return the duration value.
     */
    public String duration() {
        return this.innerProperties() == null ? null : this.innerProperties().duration();
    }

    /**
     * Get the mode property: Mode of job execution.
     * 
     * @return the mode value.
     */
    public DataTransferJobMode mode() {
        return this.innerProperties() == null ? null : this.innerProperties().mode();
    }

    /**
     * Set the mode property: Mode of job execution.
     * 
     * @param mode the mode value to set.
     * @return the DataTransferJobGetResultsInner object itself.
     */
    public DataTransferJobGetResultsInner withMode(DataTransferJobMode mode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataTransferJobProperties();
        }
        this.innerProperties().withMode(mode);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataTransferJobGetResultsInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataTransferJobGetResultsInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataTransferJobGetResultsInner.
     */
    public static DataTransferJobGetResultsInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataTransferJobGetResultsInner deserializedDataTransferJobGetResultsInner
                = new DataTransferJobGetResultsInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDataTransferJobGetResultsInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDataTransferJobGetResultsInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDataTransferJobGetResultsInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedDataTransferJobGetResultsInner.innerProperties
                        = DataTransferJobProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataTransferJobGetResultsInner;
        });
    }
}
