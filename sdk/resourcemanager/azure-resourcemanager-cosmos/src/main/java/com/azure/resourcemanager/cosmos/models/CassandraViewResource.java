// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cosmos DB Cassandra view resource object.
 */
@Fluent
public class CassandraViewResource implements JsonSerializable<CassandraViewResource> {
    /*
     * Name of the Cosmos DB Cassandra view
     */
    private String id;

    /*
     * View Definition of the Cosmos DB Cassandra view
     */
    private String viewDefinition;

    /**
     * Creates an instance of CassandraViewResource class.
     */
    public CassandraViewResource() {
    }

    /**
     * Get the id property: Name of the Cosmos DB Cassandra view.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Name of the Cosmos DB Cassandra view.
     * 
     * @param id the id value to set.
     * @return the CassandraViewResource object itself.
     */
    public CassandraViewResource withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the viewDefinition property: View Definition of the Cosmos DB Cassandra view.
     * 
     * @return the viewDefinition value.
     */
    public String viewDefinition() {
        return this.viewDefinition;
    }

    /**
     * Set the viewDefinition property: View Definition of the Cosmos DB Cassandra view.
     * 
     * @param viewDefinition the viewDefinition value to set.
     * @return the CassandraViewResource object itself.
     */
    public CassandraViewResource withViewDefinition(String viewDefinition) {
        this.viewDefinition = viewDefinition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model CassandraViewResource"));
        }
        if (viewDefinition() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property viewDefinition in model CassandraViewResource"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CassandraViewResource.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("viewDefinition", this.viewDefinition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CassandraViewResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CassandraViewResource if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CassandraViewResource.
     */
    public static CassandraViewResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CassandraViewResource deserializedCassandraViewResource = new CassandraViewResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedCassandraViewResource.id = reader.getString();
                } else if ("viewDefinition".equals(fieldName)) {
                    deserializedCassandraViewResource.viewDefinition = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCassandraViewResource;
        });
    }
}
