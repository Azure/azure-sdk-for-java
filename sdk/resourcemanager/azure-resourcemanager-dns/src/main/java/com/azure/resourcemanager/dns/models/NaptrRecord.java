// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dns.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A NAPTR record. For more information about the NAPTR record format, see RFC 3403:
 * https://www.rfc-editor.org/rfc/rfc3403.
 */
@Fluent
public final class NaptrRecord implements JsonSerializable<NaptrRecord> {
    /*
     * The order in which the NAPTR records MUST be processed in order to accurately represent the ordered list of
     * rules. The ordering is from lowest to highest. Valid values: 0-65535.
     */
    private Integer order;

    /*
     * The preference specifies the order in which NAPTR records with equal 'order' values should be processed, low
     * numbers being processed before high numbers. Valid values: 0-65535.
     */
    private Integer preference;

    /*
     * The flags specific to DDDS applications. Values currently defined in RFC 3404 are uppercase and lowercase letters
     * "A", "P", "S", and "U", and the empty string, "". Enclose Flags in quotation marks.
     */
    private String flags;

    /*
     * The services specific to DDDS applications. Enclose Services in quotation marks.
     */
    private String services;

    /*
     * The regular expression that the DDDS application uses to convert an input value into an output value. For
     * example: an IP phone system might use a regular expression to convert a phone number that is entered by a user
     * into a SIP URI. Enclose the regular expression in quotation marks. Specify either a value for 'regexp' or a value
     * for 'replacement'.
     */
    private String regexp;

    /*
     * The replacement is a fully qualified domain name (FQDN) of the next domain name that you want the DDDS
     * application to submit a DNS query for. The DDDS application replaces the input value with the value specified for
     * replacement. Specify either a value for 'regexp' or a value for 'replacement'. If you specify a value for
     * 'regexp', specify a dot (.) for 'replacement'.
     */
    private String replacement;

    /**
     * Creates an instance of NaptrRecord class.
     */
    public NaptrRecord() {
    }

    /**
     * Get the order property: The order in which the NAPTR records MUST be processed in order to accurately represent
     * the ordered list of rules. The ordering is from lowest to highest. Valid values: 0-65535.
     * 
     * @return the order value.
     */
    public Integer order() {
        return this.order;
    }

    /**
     * Set the order property: The order in which the NAPTR records MUST be processed in order to accurately represent
     * the ordered list of rules. The ordering is from lowest to highest. Valid values: 0-65535.
     * 
     * @param order the order value to set.
     * @return the NaptrRecord object itself.
     */
    public NaptrRecord withOrder(Integer order) {
        this.order = order;
        return this;
    }

    /**
     * Get the preference property: The preference specifies the order in which NAPTR records with equal 'order' values
     * should be processed, low numbers being processed before high numbers. Valid values: 0-65535.
     * 
     * @return the preference value.
     */
    public Integer preference() {
        return this.preference;
    }

    /**
     * Set the preference property: The preference specifies the order in which NAPTR records with equal 'order' values
     * should be processed, low numbers being processed before high numbers. Valid values: 0-65535.
     * 
     * @param preference the preference value to set.
     * @return the NaptrRecord object itself.
     */
    public NaptrRecord withPreference(Integer preference) {
        this.preference = preference;
        return this;
    }

    /**
     * Get the flags property: The flags specific to DDDS applications. Values currently defined in RFC 3404 are
     * uppercase and lowercase letters "A", "P", "S", and "U", and the empty string, "". Enclose Flags in quotation
     * marks.
     * 
     * @return the flags value.
     */
    public String flags() {
        return this.flags;
    }

    /**
     * Set the flags property: The flags specific to DDDS applications. Values currently defined in RFC 3404 are
     * uppercase and lowercase letters "A", "P", "S", and "U", and the empty string, "". Enclose Flags in quotation
     * marks.
     * 
     * @param flags the flags value to set.
     * @return the NaptrRecord object itself.
     */
    public NaptrRecord withFlags(String flags) {
        this.flags = flags;
        return this;
    }

    /**
     * Get the services property: The services specific to DDDS applications. Enclose Services in quotation marks.
     * 
     * @return the services value.
     */
    public String services() {
        return this.services;
    }

    /**
     * Set the services property: The services specific to DDDS applications. Enclose Services in quotation marks.
     * 
     * @param services the services value to set.
     * @return the NaptrRecord object itself.
     */
    public NaptrRecord withServices(String services) {
        this.services = services;
        return this;
    }

    /**
     * Get the regexp property: The regular expression that the DDDS application uses to convert an input value into an
     * output value. For example: an IP phone system might use a regular expression to convert a phone number that is
     * entered by a user into a SIP URI. Enclose the regular expression in quotation marks. Specify either a value for
     * 'regexp' or a value for 'replacement'.
     * 
     * @return the regexp value.
     */
    public String regexp() {
        return this.regexp;
    }

    /**
     * Set the regexp property: The regular expression that the DDDS application uses to convert an input value into an
     * output value. For example: an IP phone system might use a regular expression to convert a phone number that is
     * entered by a user into a SIP URI. Enclose the regular expression in quotation marks. Specify either a value for
     * 'regexp' or a value for 'replacement'.
     * 
     * @param regexp the regexp value to set.
     * @return the NaptrRecord object itself.
     */
    public NaptrRecord withRegexp(String regexp) {
        this.regexp = regexp;
        return this;
    }

    /**
     * Get the replacement property: The replacement is a fully qualified domain name (FQDN) of the next domain name
     * that you want the DDDS application to submit a DNS query for. The DDDS application replaces the input value with
     * the value specified for replacement. Specify either a value for 'regexp' or a value for 'replacement'. If you
     * specify a value for 'regexp', specify a dot (.) for 'replacement'.
     * 
     * @return the replacement value.
     */
    public String replacement() {
        return this.replacement;
    }

    /**
     * Set the replacement property: The replacement is a fully qualified domain name (FQDN) of the next domain name
     * that you want the DDDS application to submit a DNS query for. The DDDS application replaces the input value with
     * the value specified for replacement. Specify either a value for 'regexp' or a value for 'replacement'. If you
     * specify a value for 'regexp', specify a dot (.) for 'replacement'.
     * 
     * @param replacement the replacement value to set.
     * @return the NaptrRecord object itself.
     */
    public NaptrRecord withReplacement(String replacement) {
        this.replacement = replacement;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("order", this.order);
        jsonWriter.writeNumberField("preference", this.preference);
        jsonWriter.writeStringField("flags", this.flags);
        jsonWriter.writeStringField("services", this.services);
        jsonWriter.writeStringField("regexp", this.regexp);
        jsonWriter.writeStringField("replacement", this.replacement);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NaptrRecord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NaptrRecord if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NaptrRecord.
     */
    public static NaptrRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NaptrRecord deserializedNaptrRecord = new NaptrRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("order".equals(fieldName)) {
                    deserializedNaptrRecord.order = reader.getNullable(JsonReader::getInt);
                } else if ("preference".equals(fieldName)) {
                    deserializedNaptrRecord.preference = reader.getNullable(JsonReader::getInt);
                } else if ("flags".equals(fieldName)) {
                    deserializedNaptrRecord.flags = reader.getString();
                } else if ("services".equals(fieldName)) {
                    deserializedNaptrRecord.services = reader.getString();
                } else if ("regexp".equals(fieldName)) {
                    deserializedNaptrRecord.regexp = reader.getString();
                } else if ("replacement".equals(fieldName)) {
                    deserializedNaptrRecord.replacement = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNaptrRecord;
        });
    }
}
