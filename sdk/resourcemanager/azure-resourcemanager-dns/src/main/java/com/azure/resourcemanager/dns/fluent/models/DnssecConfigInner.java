// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dns.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dns.models.SigningKey;
import java.io.IOException;
import java.util.List;

/**
 * Represents the DNSSEC configuration.
 */
@Fluent
public final class DnssecConfigInner extends ProxyResource {
    /*
     * The DNSSEC properties.
     */
    private DnssecProperties innerProperties;

    /*
     * The etag of the DNSSEC configuration.
     */
    private String etag;

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of DnssecConfigInner class.
     */
    public DnssecConfigInner() {
    }

    /**
     * Get the innerProperties property: The DNSSEC properties.
     * 
     * @return the innerProperties value.
     */
    private DnssecProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the etag property: The etag of the DNSSEC configuration.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: The etag of the DNSSEC configuration.
     * 
     * @param etag the etag value to set.
     * @return the DnssecConfigInner object itself.
     */
    public DnssecConfigInner withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the provisioningState property: Provisioning State of the DNSSEC configuration.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the signingKeys property: The list of signing keys.
     * 
     * @return the signingKeys value.
     */
    public List<SigningKey> signingKeys() {
        return this.innerProperties() == null ? null : this.innerProperties().signingKeys();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("etag", this.etag);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DnssecConfigInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DnssecConfigInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DnssecConfigInner.
     */
    public static DnssecConfigInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DnssecConfigInner deserializedDnssecConfigInner = new DnssecConfigInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDnssecConfigInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDnssecConfigInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDnssecConfigInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedDnssecConfigInner.innerProperties = DnssecProperties.fromJson(reader);
                } else if ("etag".equals(fieldName)) {
                    deserializedDnssecConfigInner.etag = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedDnssecConfigInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDnssecConfigInner;
        });
    }
}
