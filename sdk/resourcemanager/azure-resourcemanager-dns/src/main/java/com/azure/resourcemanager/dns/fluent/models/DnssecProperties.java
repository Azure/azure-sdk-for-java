// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dns.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dns.models.SigningKey;
import java.io.IOException;
import java.util.List;

/**
 * Represents the DNSSEC properties.
 */
@Immutable
public final class DnssecProperties implements JsonSerializable<DnssecProperties> {
    /*
     * Provisioning State of the DNSSEC configuration.
     */
    private String provisioningState;

    /*
     * The list of signing keys.
     */
    private List<SigningKey> signingKeys;

    /**
     * Creates an instance of DnssecProperties class.
     */
    public DnssecProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning State of the DNSSEC configuration.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the signingKeys property: The list of signing keys.
     * 
     * @return the signingKeys value.
     */
    public List<SigningKey> signingKeys() {
        return this.signingKeys;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (signingKeys() != null) {
            signingKeys().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DnssecProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DnssecProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DnssecProperties.
     */
    public static DnssecProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DnssecProperties deserializedDnssecProperties = new DnssecProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedDnssecProperties.provisioningState = reader.getString();
                } else if ("signingKeys".equals(fieldName)) {
                    List<SigningKey> signingKeys = reader.readArray(reader1 -> SigningKey.fromJson(reader1));
                    deserializedDnssecProperties.signingKeys = signingKeys;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDnssecProperties;
        });
    }
}
