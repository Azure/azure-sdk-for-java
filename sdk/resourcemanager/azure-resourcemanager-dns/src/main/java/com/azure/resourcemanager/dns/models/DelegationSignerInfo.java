// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dns.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The delegation signer information.
 */
@Immutable
public final class DelegationSignerInfo implements JsonSerializable<DelegationSignerInfo> {
    /*
     * The digest algorithm type represents the standard digest algorithm number used to construct the digest. See:
     * https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml
     */
    private Integer digestAlgorithmType;

    /*
     * The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record.
     */
    private String digestValue;

    /*
     * The record represents a delegation signer (DS) record.
     */
    private String record;

    /**
     * Creates an instance of DelegationSignerInfo class.
     */
    private DelegationSignerInfo() {
    }

    /**
     * Get the digestAlgorithmType property: The digest algorithm type represents the standard digest algorithm number
     * used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml.
     * 
     * @return the digestAlgorithmType value.
     */
    public Integer digestAlgorithmType() {
        return this.digestAlgorithmType;
    }

    /**
     * Get the digestValue property: The digest value is a cryptographic hash value of the referenced DNSKEY Resource
     * Record.
     * 
     * @return the digestValue value.
     */
    public String digestValue() {
        return this.digestValue;
    }

    /**
     * Get the record property: The record represents a delegation signer (DS) record.
     * 
     * @return the record value.
     */
    public String record() {
        return this.record;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DelegationSignerInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DelegationSignerInfo if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DelegationSignerInfo.
     */
    public static DelegationSignerInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DelegationSignerInfo deserializedDelegationSignerInfo = new DelegationSignerInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("digestAlgorithmType".equals(fieldName)) {
                    deserializedDelegationSignerInfo.digestAlgorithmType = reader.getNullable(JsonReader::getInt);
                } else if ("digestValue".equals(fieldName)) {
                    deserializedDelegationSignerInfo.digestValue = reader.getString();
                } else if ("record".equals(fieldName)) {
                    deserializedDelegationSignerInfo.record = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDelegationSignerInfo;
        });
    }
}
