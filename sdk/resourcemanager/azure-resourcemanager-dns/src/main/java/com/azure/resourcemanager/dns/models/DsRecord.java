// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dns.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A DS record. For more information about the DS record format, see RFC 4034: https://www.rfc-editor.org/rfc/rfc4034.
 */
@Fluent
public final class DsRecord implements JsonSerializable<DsRecord> {
    /*
     * The key tag value is used to determine which DNSKEY Resource Record is used for signature verification.
     */
    private Integer keyTag;

    /*
     * The security algorithm type represents the standard security algorithm number of the DNSKEY Resource Record. See:
     * https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml
     */
    private Integer algorithm;

    /*
     * The digest entity.
     */
    private Digest digest;

    /**
     * Creates an instance of DsRecord class.
     */
    public DsRecord() {
    }

    /**
     * Get the keyTag property: The key tag value is used to determine which DNSKEY Resource Record is used for
     * signature verification.
     * 
     * @return the keyTag value.
     */
    public Integer keyTag() {
        return this.keyTag;
    }

    /**
     * Set the keyTag property: The key tag value is used to determine which DNSKEY Resource Record is used for
     * signature verification.
     * 
     * @param keyTag the keyTag value to set.
     * @return the DsRecord object itself.
     */
    public DsRecord withKeyTag(Integer keyTag) {
        this.keyTag = keyTag;
        return this;
    }

    /**
     * Get the algorithm property: The security algorithm type represents the standard security algorithm number of the
     * DNSKEY Resource Record. See: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml.
     * 
     * @return the algorithm value.
     */
    public Integer algorithm() {
        return this.algorithm;
    }

    /**
     * Set the algorithm property: The security algorithm type represents the standard security algorithm number of the
     * DNSKEY Resource Record. See: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml.
     * 
     * @param algorithm the algorithm value to set.
     * @return the DsRecord object itself.
     */
    public DsRecord withAlgorithm(Integer algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * Get the digest property: The digest entity.
     * 
     * @return the digest value.
     */
    public Digest digest() {
        return this.digest;
    }

    /**
     * Set the digest property: The digest entity.
     * 
     * @param digest the digest value to set.
     * @return the DsRecord object itself.
     */
    public DsRecord withDigest(Digest digest) {
        this.digest = digest;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (digest() != null) {
            digest().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("keyTag", this.keyTag);
        jsonWriter.writeNumberField("algorithm", this.algorithm);
        jsonWriter.writeJsonField("digest", this.digest);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DsRecord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DsRecord if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the DsRecord.
     */
    public static DsRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DsRecord deserializedDsRecord = new DsRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyTag".equals(fieldName)) {
                    deserializedDsRecord.keyTag = reader.getNullable(JsonReader::getInt);
                } else if ("algorithm".equals(fieldName)) {
                    deserializedDsRecord.algorithm = reader.getNullable(JsonReader::getInt);
                } else if ("digest".equals(fieldName)) {
                    deserializedDsRecord.digest = Digest.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDsRecord;
        });
    }
}
