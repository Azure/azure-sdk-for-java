// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dns.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the signing key.
 */
@Immutable
public final class SigningKey implements JsonSerializable<SigningKey> {
    /*
     * The delegation signer information.
     */
    private List<DelegationSignerInfo> delegationSignerInfo;

    /*
     * The flags specifies how the key is used.
     */
    private Integer flags;

    /*
     * The key tag value of the DNSKEY Resource Record.
     */
    private Integer keyTag;

    /*
     * The protocol value. The value is always 3.
     */
    private Integer protocol;

    /*
     * The public key, represented as a Base64 encoding.
     */
    private String publicKey;

    /*
     * The security algorithm type represents the standard security algorithm number of the DNSKEY Resource Record. See:
     * https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml
     */
    private Integer securityAlgorithmType;

    /**
     * Creates an instance of SigningKey class.
     */
    private SigningKey() {
    }

    /**
     * Get the delegationSignerInfo property: The delegation signer information.
     * 
     * @return the delegationSignerInfo value.
     */
    public List<DelegationSignerInfo> delegationSignerInfo() {
        return this.delegationSignerInfo;
    }

    /**
     * Get the flags property: The flags specifies how the key is used.
     * 
     * @return the flags value.
     */
    public Integer flags() {
        return this.flags;
    }

    /**
     * Get the keyTag property: The key tag value of the DNSKEY Resource Record.
     * 
     * @return the keyTag value.
     */
    public Integer keyTag() {
        return this.keyTag;
    }

    /**
     * Get the protocol property: The protocol value. The value is always 3.
     * 
     * @return the protocol value.
     */
    public Integer protocol() {
        return this.protocol;
    }

    /**
     * Get the publicKey property: The public key, represented as a Base64 encoding.
     * 
     * @return the publicKey value.
     */
    public String publicKey() {
        return this.publicKey;
    }

    /**
     * Get the securityAlgorithmType property: The security algorithm type represents the standard security algorithm
     * number of the DNSKEY Resource Record. See:
     * https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml.
     * 
     * @return the securityAlgorithmType value.
     */
    public Integer securityAlgorithmType() {
        return this.securityAlgorithmType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (delegationSignerInfo() != null) {
            delegationSignerInfo().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SigningKey from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SigningKey if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the SigningKey.
     */
    public static SigningKey fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SigningKey deserializedSigningKey = new SigningKey();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("delegationSignerInfo".equals(fieldName)) {
                    List<DelegationSignerInfo> delegationSignerInfo
                        = reader.readArray(reader1 -> DelegationSignerInfo.fromJson(reader1));
                    deserializedSigningKey.delegationSignerInfo = delegationSignerInfo;
                } else if ("flags".equals(fieldName)) {
                    deserializedSigningKey.flags = reader.getNullable(JsonReader::getInt);
                } else if ("keyTag".equals(fieldName)) {
                    deserializedSigningKey.keyTag = reader.getNullable(JsonReader::getInt);
                } else if ("protocol".equals(fieldName)) {
                    deserializedSigningKey.protocol = reader.getNullable(JsonReader::getInt);
                } else if ("publicKey".equals(fieldName)) {
                    deserializedSigningKey.publicKey = reader.getString();
                } else if ("securityAlgorithmType".equals(fieldName)) {
                    deserializedSigningKey.securityAlgorithmType = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSigningKey;
        });
    }
}
