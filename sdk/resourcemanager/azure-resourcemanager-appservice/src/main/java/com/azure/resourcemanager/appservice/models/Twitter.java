// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.fluent.models.TwitterProperties;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The configuration settings of the Twitter provider. */
@Fluent
public final class Twitter extends ProxyOnlyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(Twitter.class);

    /*
     * Twitter resource specific properties
     */
    @JsonProperty(value = "properties")
    private TwitterProperties innerProperties;

    /**
     * Get the innerProperties property: Twitter resource specific properties.
     *
     * @return the innerProperties value.
     */
    private TwitterProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public Twitter withKind(String kind) {
        super.withKind(kind);
        return this;
    }

    /**
     * Get the enabled property: &lt;code&gt;false&lt;/code&gt; if the Twitter provider should not be enabled despite
     * the set registration; otherwise, &lt;code&gt;true&lt;/code&gt;.
     *
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.innerProperties() == null ? null : this.innerProperties().enabled();
    }

    /**
     * Set the enabled property: &lt;code&gt;false&lt;/code&gt; if the Twitter provider should not be enabled despite
     * the set registration; otherwise, &lt;code&gt;true&lt;/code&gt;.
     *
     * @param enabled the enabled value to set.
     * @return the Twitter object itself.
     */
    public Twitter withEnabled(Boolean enabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TwitterProperties();
        }
        this.innerProperties().withEnabled(enabled);
        return this;
    }

    /**
     * Get the registration property: The configuration settings of the app registration for the Twitter provider.
     *
     * @return the registration value.
     */
    public TwitterRegistration registration() {
        return this.innerProperties() == null ? null : this.innerProperties().registration();
    }

    /**
     * Set the registration property: The configuration settings of the app registration for the Twitter provider.
     *
     * @param registration the registration value to set.
     * @return the Twitter object itself.
     */
    public Twitter withRegistration(TwitterRegistration registration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TwitterProperties();
        }
        this.innerProperties().withRegistration(registration);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
