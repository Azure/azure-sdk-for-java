// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.fluent.models.CustomOpenIdConnectProviderProperties;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The configuration settings of the custom Open ID Connect provider. */
@Fluent
public final class CustomOpenIdConnectProvider extends ProxyOnlyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CustomOpenIdConnectProvider.class);

    /*
     * CustomOpenIdConnectProvider resource specific properties
     */
    @JsonProperty(value = "properties")
    private CustomOpenIdConnectProviderProperties innerProperties;

    /**
     * Get the innerProperties property: CustomOpenIdConnectProvider resource specific properties.
     *
     * @return the innerProperties value.
     */
    private CustomOpenIdConnectProviderProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public CustomOpenIdConnectProvider withKind(String kind) {
        super.withKind(kind);
        return this;
    }

    /**
     * Get the enabled property: &lt;code&gt;false&lt;/code&gt; if the custom Open ID provider provider should not be
     * enabled; otherwise, &lt;code&gt;true&lt;/code&gt;.
     *
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.innerProperties() == null ? null : this.innerProperties().enabled();
    }

    /**
     * Set the enabled property: &lt;code&gt;false&lt;/code&gt; if the custom Open ID provider provider should not be
     * enabled; otherwise, &lt;code&gt;true&lt;/code&gt;.
     *
     * @param enabled the enabled value to set.
     * @return the CustomOpenIdConnectProvider object itself.
     */
    public CustomOpenIdConnectProvider withEnabled(Boolean enabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomOpenIdConnectProviderProperties();
        }
        this.innerProperties().withEnabled(enabled);
        return this;
    }

    /**
     * Get the registration property: The configuration settings of the app registration for the custom Open ID Connect
     * provider.
     *
     * @return the registration value.
     */
    public OpenIdConnectRegistration registration() {
        return this.innerProperties() == null ? null : this.innerProperties().registration();
    }

    /**
     * Set the registration property: The configuration settings of the app registration for the custom Open ID Connect
     * provider.
     *
     * @param registration the registration value to set.
     * @return the CustomOpenIdConnectProvider object itself.
     */
    public CustomOpenIdConnectProvider withRegistration(OpenIdConnectRegistration registration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomOpenIdConnectProviderProperties();
        }
        this.innerProperties().withRegistration(registration);
        return this;
    }

    /**
     * Get the login property: The configuration settings of the login flow of the custom Open ID Connect provider.
     *
     * @return the login value.
     */
    public OpenIdConnectLogin login() {
        return this.innerProperties() == null ? null : this.innerProperties().login();
    }

    /**
     * Set the login property: The configuration settings of the login flow of the custom Open ID Connect provider.
     *
     * @param login the login value to set.
     * @return the CustomOpenIdConnectProvider object itself.
     */
    public CustomOpenIdConnectProvider withLogin(OpenIdConnectLogin login) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomOpenIdConnectProviderProperties();
        }
        this.innerProperties().withLogin(login);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
