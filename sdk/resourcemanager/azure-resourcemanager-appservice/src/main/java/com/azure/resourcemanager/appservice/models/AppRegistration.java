// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.fluent.models.AppRegistrationProperties;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The configuration settings of the app registration for providers that have app ids and app secrets. */
@Fluent
public final class AppRegistration extends ProxyOnlyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AppRegistration.class);

    /*
     * AppRegistration resource specific properties
     */
    @JsonProperty(value = "properties")
    private AppRegistrationProperties innerProperties;

    /**
     * Get the innerProperties property: AppRegistration resource specific properties.
     *
     * @return the innerProperties value.
     */
    private AppRegistrationProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public AppRegistration withKind(String kind) {
        super.withKind(kind);
        return this;
    }

    /**
     * Get the appId property: The App ID of the app used for login.
     *
     * @return the appId value.
     */
    public String appId() {
        return this.innerProperties() == null ? null : this.innerProperties().appId();
    }

    /**
     * Set the appId property: The App ID of the app used for login.
     *
     * @param appId the appId value to set.
     * @return the AppRegistration object itself.
     */
    public AppRegistration withAppId(String appId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppRegistrationProperties();
        }
        this.innerProperties().withAppId(appId);
        return this;
    }

    /**
     * Get the appSecretSettingName property: The app setting name that contains the app secret.
     *
     * @return the appSecretSettingName value.
     */
    public String appSecretSettingName() {
        return this.innerProperties() == null ? null : this.innerProperties().appSecretSettingName();
    }

    /**
     * Set the appSecretSettingName property: The app setting name that contains the app secret.
     *
     * @param appSecretSettingName the appSecretSettingName value to set.
     * @return the AppRegistration object itself.
     */
    public AppRegistration withAppSecretSettingName(String appSecretSettingName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppRegistrationProperties();
        }
        this.innerProperties().withAppSecretSettingName(appSecretSettingName);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
