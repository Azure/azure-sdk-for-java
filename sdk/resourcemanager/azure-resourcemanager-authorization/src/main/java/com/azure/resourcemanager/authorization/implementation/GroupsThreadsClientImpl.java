// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.resourcemanager.authorization.fluent.GroupsThreadsClient;
import com.azure.resourcemanager.authorization.fluent.models.CollectionOfPost0;
import com.azure.resourcemanager.authorization.fluent.models.GroupsThreadsExpand;
import com.azure.resourcemanager.authorization.fluent.models.GroupsThreadsOrderby;
import com.azure.resourcemanager.authorization.fluent.models.GroupsThreadsReplyRequestBodyInner;
import com.azure.resourcemanager.authorization.fluent.models.GroupsThreadsSelect;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphPostInner;
import com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GroupsThreadsClient. */
public final class GroupsThreadsClientImpl implements GroupsThreadsClient {
    private final ClientLogger logger = new ClientLogger(GroupsThreadsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final GroupsThreadsService service;

    /** The service client containing this operation class. */
    private final MicrosoftGraphClientImpl client;

    /**
     * Initializes an instance of GroupsThreadsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    GroupsThreadsClientImpl(MicrosoftGraphClientImpl client) {
        this.service =
            RestProxy.create(GroupsThreadsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftGraphClientGroupsThreads to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftGraphClient")
    private interface GroupsThreadsService {
        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/threads/{conversationThread-id}/microsoft.graph.reply")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> reply(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @BodyParam("application/json") GroupsThreadsReplyRequestBodyInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/groups/{group-id}/threads/{conversationThread-id}/posts")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<CollectionOfPost0>> listPosts(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @QueryParam("$top") Integer top,
            @QueryParam("$skip") Integer skip,
            @QueryParam("$search") String search,
            @QueryParam("$filter") String filter,
            @QueryParam("$count") Boolean count,
            @QueryParam("$orderby") String orderby,
            @QueryParam("$select") String select,
            @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/threads/{conversationThread-id}/posts")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<MicrosoftGraphPostInner>> createPosts(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @BodyParam("application/json") MicrosoftGraphPostInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<MicrosoftGraphPostInner>> getPosts(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @QueryParam("$select") String select,
            @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> updatePosts(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @BodyParam("application/json") MicrosoftGraphPostInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> deletePosts(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<CollectionOfPost0>> listMore(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);
    }

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> replyWithResponseAsync(
        String groupId, String conversationThreadId, GroupsThreadsReplyRequestBodyInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.reply(this.client.getEndpoint(), groupId, conversationThreadId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> replyWithResponseAsync(
        String groupId, String conversationThreadId, GroupsThreadsReplyRequestBodyInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.reply(this.client.getEndpoint(), groupId, conversationThreadId, body, accept, context);
    }

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> replyAsync(String groupId, String conversationThreadId, GroupsThreadsReplyRequestBodyInner body) {
        return replyWithResponseAsync(groupId, conversationThreadId, body)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reply(String groupId, String conversationThreadId, GroupsThreadsReplyRequestBodyInner body) {
        replyAsync(groupId, conversationThreadId, body).block();
    }

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> replyWithResponse(
        String groupId, String conversationThreadId, GroupsThreadsReplyRequestBodyInner body, Context context) {
        return replyWithResponseAsync(groupId, conversationThreadId, body, context).block();
    }

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphPostInner>> listPostsSinglePageAsync(
        String groupId,
        String conversationThreadId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsOrderby> orderby,
        List<GroupsThreadsSelect> select,
        List<GroupsThreadsExpand> expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        final String accept = "application/json";
        String orderbyConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(orderby, CollectionFormat.CSV);
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listPosts(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            top,
                            skip,
                            search,
                            filter,
                            count,
                            orderbyConverted,
                            selectConverted,
                            expandConverted,
                            accept,
                            context))
            .<PagedResponse<MicrosoftGraphPostInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphPostInner>> listPostsSinglePageAsync(
        String groupId,
        String conversationThreadId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsOrderby> orderby,
        List<GroupsThreadsSelect> select,
        List<GroupsThreadsExpand> expand,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        final String accept = "application/json";
        String orderbyConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(orderby, CollectionFormat.CSV);
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        context = this.client.mergeContext(context);
        return service
            .listPosts(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                top,
                skip,
                search,
                filter,
                count,
                orderbyConverted,
                selectConverted,
                expandConverted,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<MicrosoftGraphPostInner> listPostsAsync(
        String groupId,
        String conversationThreadId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsOrderby> orderby,
        List<GroupsThreadsSelect> select,
        List<GroupsThreadsExpand> expand) {
        return new PagedFlux<>(
            () ->
                listPostsSinglePageAsync(
                    groupId, conversationThreadId, top, skip, search, filter, count, orderby, select, expand),
            nextLink -> listMoreSinglePageAsync(nextLink));
    }

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<MicrosoftGraphPostInner> listPostsAsync(String groupId, String conversationThreadId) {
        final Integer top = null;
        final Integer skip = null;
        final String search = null;
        final String filter = null;
        final Boolean count = null;
        final List<GroupsThreadsOrderby> orderby = null;
        final List<GroupsThreadsSelect> select = null;
        final List<GroupsThreadsExpand> expand = null;
        return new PagedFlux<>(
            () ->
                listPostsSinglePageAsync(
                    groupId, conversationThreadId, top, skip, search, filter, count, orderby, select, expand),
            nextLink -> listMoreSinglePageAsync(nextLink));
    }

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MicrosoftGraphPostInner> listPostsAsync(
        String groupId,
        String conversationThreadId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsOrderby> orderby,
        List<GroupsThreadsSelect> select,
        List<GroupsThreadsExpand> expand,
        Context context) {
        return new PagedFlux<>(
            () ->
                listPostsSinglePageAsync(
                    groupId, conversationThreadId, top, skip, search, filter, count, orderby, select, expand, context),
            nextLink -> listMoreSinglePageAsync(nextLink, context));
    }

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MicrosoftGraphPostInner> listPosts(String groupId, String conversationThreadId) {
        final Integer top = null;
        final Integer skip = null;
        final String search = null;
        final String filter = null;
        final Boolean count = null;
        final List<GroupsThreadsOrderby> orderby = null;
        final List<GroupsThreadsSelect> select = null;
        final List<GroupsThreadsExpand> expand = null;
        return new PagedIterable<>(
            listPostsAsync(groupId, conversationThreadId, top, skip, search, filter, count, orderby, select, expand));
    }

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MicrosoftGraphPostInner> listPosts(
        String groupId,
        String conversationThreadId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsOrderby> orderby,
        List<GroupsThreadsSelect> select,
        List<GroupsThreadsExpand> expand,
        Context context) {
        return new PagedIterable<>(
            listPostsAsync(
                groupId, conversationThreadId, top, skip, search, filter, count, orderby, select, expand, context));
    }

    /**
     * Create new navigation property to posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MicrosoftGraphPostInner>> createPostsWithResponseAsync(
        String groupId, String conversationThreadId, MicrosoftGraphPostInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createPosts(this.client.getEndpoint(), groupId, conversationThreadId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create new navigation property to posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MicrosoftGraphPostInner>> createPostsWithResponseAsync(
        String groupId, String conversationThreadId, MicrosoftGraphPostInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createPosts(this.client.getEndpoint(), groupId, conversationThreadId, body, accept, context);
    }

    /**
     * Create new navigation property to posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphPostInner> createPostsAsync(
        String groupId, String conversationThreadId, MicrosoftGraphPostInner body) {
        return createPostsWithResponseAsync(groupId, conversationThreadId, body)
            .flatMap(
                (Response<MicrosoftGraphPostInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create new navigation property to posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MicrosoftGraphPostInner createPosts(
        String groupId, String conversationThreadId, MicrosoftGraphPostInner body) {
        return createPostsAsync(groupId, conversationThreadId, body).block();
    }

    /**
     * Create new navigation property to posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MicrosoftGraphPostInner> createPostsWithResponse(
        String groupId, String conversationThreadId, MicrosoftGraphPostInner body, Context context) {
        return createPostsWithResponseAsync(groupId, conversationThreadId, body, context).block();
    }

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MicrosoftGraphPostInner>> getPostsWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        List<GroupsThreadsSelect> select,
        List<GroupsThreadsExpand> expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getPosts(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            selectConverted,
                            expandConverted,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MicrosoftGraphPostInner>> getPostsWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        List<GroupsThreadsSelect> select,
        List<GroupsThreadsExpand> expand,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        context = this.client.mergeContext(context);
        return service
            .getPosts(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                selectConverted,
                expandConverted,
                accept,
                context);
    }

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphPostInner> getPostsAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        List<GroupsThreadsSelect> select,
        List<GroupsThreadsExpand> expand) {
        return getPostsWithResponseAsync(groupId, conversationThreadId, postId, select, expand)
            .flatMap(
                (Response<MicrosoftGraphPostInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphPostInner> getPostsAsync(String groupId, String conversationThreadId, String postId) {
        final List<GroupsThreadsSelect> select = null;
        final List<GroupsThreadsExpand> expand = null;
        return getPostsWithResponseAsync(groupId, conversationThreadId, postId, select, expand)
            .flatMap(
                (Response<MicrosoftGraphPostInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MicrosoftGraphPostInner getPosts(String groupId, String conversationThreadId, String postId) {
        final List<GroupsThreadsSelect> select = null;
        final List<GroupsThreadsExpand> expand = null;
        return getPostsAsync(groupId, conversationThreadId, postId, select, expand).block();
    }

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MicrosoftGraphPostInner> getPostsWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        List<GroupsThreadsSelect> select,
        List<GroupsThreadsExpand> expand,
        Context context) {
        return getPostsWithResponseAsync(groupId, conversationThreadId, postId, select, expand, context).block();
    }

    /**
     * Update the navigation property posts in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updatePostsWithResponseAsync(
        String groupId, String conversationThreadId, String postId, MicrosoftGraphPostInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updatePosts(
                            this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update the navigation property posts in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> updatePostsWithResponseAsync(
        String groupId, String conversationThreadId, String postId, MicrosoftGraphPostInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updatePosts(this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context);
    }

    /**
     * Update the navigation property posts in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updatePostsAsync(
        String groupId, String conversationThreadId, String postId, MicrosoftGraphPostInner body) {
        return updatePostsWithResponseAsync(groupId, conversationThreadId, postId, body)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Update the navigation property posts in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePosts(String groupId, String conversationThreadId, String postId, MicrosoftGraphPostInner body) {
        updatePostsAsync(groupId, conversationThreadId, postId, body).block();
    }

    /**
     * Update the navigation property posts in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePostsWithResponse(
        String groupId, String conversationThreadId, String postId, MicrosoftGraphPostInner body, Context context) {
        return updatePostsWithResponseAsync(groupId, conversationThreadId, postId, body, context).block();
    }

    /**
     * Delete navigation property posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deletePostsWithResponseAsync(
        String groupId, String conversationThreadId, String postId, String ifMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deletePosts(
                            this.client.getEndpoint(), groupId, conversationThreadId, postId, ifMatch, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete navigation property posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deletePostsWithResponseAsync(
        String groupId, String conversationThreadId, String postId, String ifMatch, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deletePosts(this.client.getEndpoint(), groupId, conversationThreadId, postId, ifMatch, accept, context);
    }

    /**
     * Delete navigation property posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deletePostsAsync(String groupId, String conversationThreadId, String postId, String ifMatch) {
        return deletePostsWithResponseAsync(groupId, conversationThreadId, postId, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete navigation property posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deletePostsAsync(String groupId, String conversationThreadId, String postId) {
        final String ifMatch = null;
        return deletePostsWithResponseAsync(groupId, conversationThreadId, postId, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete navigation property posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deletePosts(String groupId, String conversationThreadId, String postId) {
        final String ifMatch = null;
        deletePostsAsync(groupId, conversationThreadId, postId, ifMatch).block();
    }

    /**
     * Delete navigation property posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deletePostsWithResponse(
        String groupId, String conversationThreadId, String postId, String ifMatch, Context context) {
        return deletePostsWithResponseAsync(groupId, conversationThreadId, postId, ifMatch, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of post.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphPostInner>> listMoreSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.listMore(nextLink, context))
            .<PagedResponse<MicrosoftGraphPostInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of post.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphPostInner>> listMoreSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service
            .listMore(nextLink, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }
}
