// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.fluent.GroupsCalendarEventsClient;
import com.azure.resourcemanager.authorization.fluent.models.GroupsCalendarEventsAcceptRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.GroupsCalendarEventsCancelRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.GroupsCalendarEventsDeclineRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.GroupsCalendarEventsForwardRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.GroupsCalendarEventsSnoozeReminderRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.GroupsCalendarEventsTentativelyAcceptRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphEventInner;
import com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GroupsCalendarEventsClient. */
public final class GroupsCalendarEventsClientImpl implements GroupsCalendarEventsClient {
    private final ClientLogger logger = new ClientLogger(GroupsCalendarEventsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final GroupsCalendarEventsService service;

    /** The service client containing this operation class. */
    private final MicrosoftGraphClientImpl client;

    /**
     * Initializes an instance of GroupsCalendarEventsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    GroupsCalendarEventsClientImpl(MicrosoftGraphClientImpl client) {
        this.service =
            RestProxy
                .create(GroupsCalendarEventsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftGraphClientGroupsCalendarEvents to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftGraphClient")
    private interface GroupsCalendarEventsService {
        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/calendar/events/{event-id}/microsoft.graph.accept")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> accept(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("event-id") String eventId,
            @BodyParam("application/json") GroupsCalendarEventsAcceptRequestBody body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/calendar/events/{event-id}/microsoft.graph.cancel")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> cancel(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("event-id") String eventId,
            @BodyParam("application/json") GroupsCalendarEventsCancelRequestBody body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/calendar/events/{event-id}/microsoft.graph.decline")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> decline(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("event-id") String eventId,
            @BodyParam("application/json") GroupsCalendarEventsDeclineRequestBody body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/calendar/events/{event-id}/microsoft.graph.dismissReminder")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> dismissReminder(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("event-id") String eventId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/calendar/events/{event-id}/microsoft.graph.forward")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> forward(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("event-id") String eventId,
            @BodyParam("application/json") GroupsCalendarEventsForwardRequestBody body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/calendar/events/{event-id}/microsoft.graph.snoozeReminder")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> snoozeReminder(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("event-id") String eventId,
            @BodyParam("application/json") GroupsCalendarEventsSnoozeReminderRequestBody body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/calendar/events/{event-id}/microsoft.graph.tentativelyAccept")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> tentativelyAccept(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("event-id") String eventId,
            @BodyParam("application/json") GroupsCalendarEventsTentativelyAcceptRequestBody body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/groups/{group-id}/calendar/events/microsoft.graph.delta()")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<List<MicrosoftGraphEventInner>>> delta(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Invoke action accept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> acceptWithResponseAsync(
        String groupId, String eventId, GroupsCalendarEventsAcceptRequestBody body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.accept(this.client.getEndpoint(), groupId, eventId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Invoke action accept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> acceptWithResponseAsync(
        String groupId, String eventId, GroupsCalendarEventsAcceptRequestBody body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.accept(this.client.getEndpoint(), groupId, eventId, body, accept, context);
    }

    /**
     * Invoke action accept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> acceptAsync(String groupId, String eventId, GroupsCalendarEventsAcceptRequestBody body) {
        return acceptWithResponseAsync(groupId, eventId, body).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Invoke action accept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void accept(String groupId, String eventId, GroupsCalendarEventsAcceptRequestBody body) {
        acceptAsync(groupId, eventId, body).block();
    }

    /**
     * Invoke action accept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> acceptWithResponse(
        String groupId, String eventId, GroupsCalendarEventsAcceptRequestBody body, Context context) {
        return acceptWithResponseAsync(groupId, eventId, body, context).block();
    }

    /**
     * Invoke action cancel.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelWithResponseAsync(
        String groupId, String eventId, GroupsCalendarEventsCancelRequestBody body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.cancel(this.client.getEndpoint(), groupId, eventId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Invoke action cancel.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> cancelWithResponseAsync(
        String groupId, String eventId, GroupsCalendarEventsCancelRequestBody body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.cancel(this.client.getEndpoint(), groupId, eventId, body, accept, context);
    }

    /**
     * Invoke action cancel.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelAsync(String groupId, String eventId, GroupsCalendarEventsCancelRequestBody body) {
        return cancelWithResponseAsync(groupId, eventId, body).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Invoke action cancel.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancel(String groupId, String eventId, GroupsCalendarEventsCancelRequestBody body) {
        cancelAsync(groupId, eventId, body).block();
    }

    /**
     * Invoke action cancel.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelWithResponse(
        String groupId, String eventId, GroupsCalendarEventsCancelRequestBody body, Context context) {
        return cancelWithResponseAsync(groupId, eventId, body, context).block();
    }

    /**
     * Invoke action decline.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> declineWithResponseAsync(
        String groupId, String eventId, GroupsCalendarEventsDeclineRequestBody body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.decline(this.client.getEndpoint(), groupId, eventId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Invoke action decline.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> declineWithResponseAsync(
        String groupId, String eventId, GroupsCalendarEventsDeclineRequestBody body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.decline(this.client.getEndpoint(), groupId, eventId, body, accept, context);
    }

    /**
     * Invoke action decline.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> declineAsync(String groupId, String eventId, GroupsCalendarEventsDeclineRequestBody body) {
        return declineWithResponseAsync(groupId, eventId, body).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Invoke action decline.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void decline(String groupId, String eventId, GroupsCalendarEventsDeclineRequestBody body) {
        declineAsync(groupId, eventId, body).block();
    }

    /**
     * Invoke action decline.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> declineWithResponse(
        String groupId, String eventId, GroupsCalendarEventsDeclineRequestBody body, Context context) {
        return declineWithResponseAsync(groupId, eventId, body, context).block();
    }

    /**
     * Invoke action dismissReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> dismissReminderWithResponseAsync(String groupId, String eventId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.dismissReminder(this.client.getEndpoint(), groupId, eventId, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Invoke action dismissReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> dismissReminderWithResponseAsync(String groupId, String eventId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.dismissReminder(this.client.getEndpoint(), groupId, eventId, accept, context);
    }

    /**
     * Invoke action dismissReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> dismissReminderAsync(String groupId, String eventId) {
        return dismissReminderWithResponseAsync(groupId, eventId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Invoke action dismissReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void dismissReminder(String groupId, String eventId) {
        dismissReminderAsync(groupId, eventId).block();
    }

    /**
     * Invoke action dismissReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> dismissReminderWithResponse(String groupId, String eventId, Context context) {
        return dismissReminderWithResponseAsync(groupId, eventId, context).block();
    }

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> forwardWithResponseAsync(
        String groupId, String eventId, GroupsCalendarEventsForwardRequestBody body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.forward(this.client.getEndpoint(), groupId, eventId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> forwardWithResponseAsync(
        String groupId, String eventId, GroupsCalendarEventsForwardRequestBody body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.forward(this.client.getEndpoint(), groupId, eventId, body, accept, context);
    }

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> forwardAsync(String groupId, String eventId, GroupsCalendarEventsForwardRequestBody body) {
        return forwardWithResponseAsync(groupId, eventId, body).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void forward(String groupId, String eventId, GroupsCalendarEventsForwardRequestBody body) {
        forwardAsync(groupId, eventId, body).block();
    }

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> forwardWithResponse(
        String groupId, String eventId, GroupsCalendarEventsForwardRequestBody body, Context context) {
        return forwardWithResponseAsync(groupId, eventId, body, context).block();
    }

    /**
     * Invoke action snoozeReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> snoozeReminderWithResponseAsync(
        String groupId, String eventId, GroupsCalendarEventsSnoozeReminderRequestBody body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.snoozeReminder(this.client.getEndpoint(), groupId, eventId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Invoke action snoozeReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> snoozeReminderWithResponseAsync(
        String groupId, String eventId, GroupsCalendarEventsSnoozeReminderRequestBody body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.snoozeReminder(this.client.getEndpoint(), groupId, eventId, body, accept, context);
    }

    /**
     * Invoke action snoozeReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> snoozeReminderAsync(
        String groupId, String eventId, GroupsCalendarEventsSnoozeReminderRequestBody body) {
        return snoozeReminderWithResponseAsync(groupId, eventId, body).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Invoke action snoozeReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void snoozeReminder(String groupId, String eventId, GroupsCalendarEventsSnoozeReminderRequestBody body) {
        snoozeReminderAsync(groupId, eventId, body).block();
    }

    /**
     * Invoke action snoozeReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> snoozeReminderWithResponse(
        String groupId, String eventId, GroupsCalendarEventsSnoozeReminderRequestBody body, Context context) {
        return snoozeReminderWithResponseAsync(groupId, eventId, body, context).block();
    }

    /**
     * Invoke action tentativelyAccept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> tentativelyAcceptWithResponseAsync(
        String groupId, String eventId, GroupsCalendarEventsTentativelyAcceptRequestBody body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.tentativelyAccept(this.client.getEndpoint(), groupId, eventId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Invoke action tentativelyAccept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> tentativelyAcceptWithResponseAsync(
        String groupId, String eventId, GroupsCalendarEventsTentativelyAcceptRequestBody body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.tentativelyAccept(this.client.getEndpoint(), groupId, eventId, body, accept, context);
    }

    /**
     * Invoke action tentativelyAccept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> tentativelyAcceptAsync(
        String groupId, String eventId, GroupsCalendarEventsTentativelyAcceptRequestBody body) {
        return tentativelyAcceptWithResponseAsync(groupId, eventId, body).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Invoke action tentativelyAccept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void tentativelyAccept(
        String groupId, String eventId, GroupsCalendarEventsTentativelyAcceptRequestBody body) {
        tentativelyAcceptAsync(groupId, eventId, body).block();
    }

    /**
     * Invoke action tentativelyAccept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> tentativelyAcceptWithResponse(
        String groupId, String eventId, GroupsCalendarEventsTentativelyAcceptRequestBody body, Context context) {
        return tentativelyAcceptWithResponseAsync(groupId, eventId, body, context).block();
    }

    /**
     * Invoke function delta.
     *
     * @param groupId key: id of group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<MicrosoftGraphEventInner>>> deltaWithResponseAsync(String groupId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delta(this.client.getEndpoint(), groupId, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Invoke function delta.
     *
     * @param groupId key: id of group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<MicrosoftGraphEventInner>>> deltaWithResponseAsync(String groupId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delta(this.client.getEndpoint(), groupId, accept, context);
    }

    /**
     * Invoke function delta.
     *
     * @param groupId key: id of group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<MicrosoftGraphEventInner>> deltaAsync(String groupId) {
        return deltaWithResponseAsync(groupId)
            .flatMap(
                (Response<List<MicrosoftGraphEventInner>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Invoke function delta.
     *
     * @param groupId key: id of group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<MicrosoftGraphEventInner> delta(String groupId) {
        return deltaAsync(groupId).block();
    }

    /**
     * Invoke function delta.
     *
     * @param groupId key: id of group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<MicrosoftGraphEventInner>> deltaWithResponse(String groupId, Context context) {
        return deltaWithResponseAsync(groupId, context).block();
    }
}
