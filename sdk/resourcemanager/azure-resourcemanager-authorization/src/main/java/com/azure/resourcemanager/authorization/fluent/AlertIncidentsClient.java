// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.authorization.fluent.models.AlertIncidentInner;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in AlertIncidentsClient. */
public interface AlertIncidentsClient {
    /**
     * Get the specified alert incident.
     *
     * @param scope The scope of the alert incident. The scope can be any REST resource instance. For example, use
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/' for a subscription,
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for
     *     a resource group, and
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
     *     for a resource.
     * @param alertId The name of the alert.
     * @param alertIncidentId The name of the alert incident to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified alert incident along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<AlertIncidentInner>> getWithResponseAsync(String scope, String alertId, String alertIncidentId);

    /**
     * Get the specified alert incident.
     *
     * @param scope The scope of the alert incident. The scope can be any REST resource instance. For example, use
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/' for a subscription,
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for
     *     a resource group, and
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
     *     for a resource.
     * @param alertId The name of the alert.
     * @param alertIncidentId The name of the alert incident to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified alert incident on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AlertIncidentInner> getAsync(String scope, String alertId, String alertIncidentId);

    /**
     * Get the specified alert incident.
     *
     * @param scope The scope of the alert incident. The scope can be any REST resource instance. For example, use
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/' for a subscription,
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for
     *     a resource group, and
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
     *     for a resource.
     * @param alertId The name of the alert.
     * @param alertIncidentId The name of the alert incident to get.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified alert incident along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AlertIncidentInner> getWithResponse(String scope, String alertId, String alertIncidentId, Context context);

    /**
     * Get the specified alert incident.
     *
     * @param scope The scope of the alert incident. The scope can be any REST resource instance. For example, use
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/' for a subscription,
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for
     *     a resource group, and
     *     '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
     *     for a resource.
     * @param alertId The name of the alert.
     * @param alertIncidentId The name of the alert incident to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified alert incident.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AlertIncidentInner get(String scope, String alertId, String alertIncidentId);

    /**
     * Gets alert incidents for a resource scope.
     *
     * @param scope The scope of the alert incident.
     * @param alertId The name of the alert.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return alert incidents for a resource scope as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<AlertIncidentInner> listForScopeAsync(String scope, String alertId);

    /**
     * Gets alert incidents for a resource scope.
     *
     * @param scope The scope of the alert incident.
     * @param alertId The name of the alert.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return alert incidents for a resource scope as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AlertIncidentInner> listForScope(String scope, String alertId);

    /**
     * Gets alert incidents for a resource scope.
     *
     * @param scope The scope of the alert incident.
     * @param alertId The name of the alert.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return alert incidents for a resource scope as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AlertIncidentInner> listForScope(String scope, String alertId, Context context);

    /**
     * Remediate an alert incident.
     *
     * @param scope The scope of the alert incident.
     * @param alertId The name of the alert.
     * @param alertIncidentId The name of the alert incident to remediate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> remediateWithResponseAsync(String scope, String alertId, String alertIncidentId);

    /**
     * Remediate an alert incident.
     *
     * @param scope The scope of the alert incident.
     * @param alertId The name of the alert.
     * @param alertIncidentId The name of the alert incident to remediate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> remediateAsync(String scope, String alertId, String alertIncidentId);

    /**
     * Remediate an alert incident.
     *
     * @param scope The scope of the alert incident.
     * @param alertId The name of the alert.
     * @param alertIncidentId The name of the alert incident to remediate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> remediateWithResponse(String scope, String alertId, String alertIncidentId, Context context);

    /**
     * Remediate an alert incident.
     *
     * @param scope The scope of the alert incident.
     * @param alertId The name of the alert.
     * @param alertIncidentId The name of the alert incident to remediate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void remediate(String scope, String alertId, String alertIncidentId);
}
