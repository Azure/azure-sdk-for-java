// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.authorization.fluent.models.Get10ItemsItem;
import com.azure.resourcemanager.authorization.fluent.models.GroupsConversationsThreadsExpand;
import com.azure.resourcemanager.authorization.fluent.models.GroupsConversationsThreadsOrderby;
import com.azure.resourcemanager.authorization.fluent.models.GroupsConversationsThreadsReplyRequestBodyInner;
import com.azure.resourcemanager.authorization.fluent.models.GroupsConversationsThreadsSelect;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphPostInner;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GroupsConversationsThreadsClient. */
public interface GroupsConversationsThreadsClient {
    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> replyWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        GroupsConversationsThreadsReplyRequestBodyInner body);

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> replyAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        GroupsConversationsThreadsReplyRequestBodyInner body);

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void reply(
        String groupId,
        String conversationId,
        String conversationThreadId,
        GroupsConversationsThreadsReplyRequestBodyInner body);

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> replyWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        GroupsConversationsThreadsReplyRequestBodyInner body,
        Context context);

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<MicrosoftGraphPostInner> listPostsAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsConversationsThreadsOrderby> orderby,
        List<GroupsConversationsThreadsSelect> select,
        List<Get10ItemsItem> expand);

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<MicrosoftGraphPostInner> listPostsAsync(
        String groupId, String conversationId, String conversationThreadId);

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MicrosoftGraphPostInner> listPosts(
        String groupId, String conversationId, String conversationThreadId);

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MicrosoftGraphPostInner> listPosts(
        String groupId,
        String conversationId,
        String conversationThreadId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsConversationsThreadsOrderby> orderby,
        List<GroupsConversationsThreadsSelect> select,
        List<Get10ItemsItem> expand,
        Context context);

    /**
     * Create new navigation property to posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MicrosoftGraphPostInner>> createPostsWithResponseAsync(
        String groupId, String conversationId, String conversationThreadId, MicrosoftGraphPostInner body);

    /**
     * Create new navigation property to posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphPostInner> createPostsAsync(
        String groupId, String conversationId, String conversationThreadId, MicrosoftGraphPostInner body);

    /**
     * Create new navigation property to posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MicrosoftGraphPostInner createPosts(
        String groupId, String conversationId, String conversationThreadId, MicrosoftGraphPostInner body);

    /**
     * Create new navigation property to posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MicrosoftGraphPostInner> createPostsWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        MicrosoftGraphPostInner body,
        Context context);

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MicrosoftGraphPostInner>> getPostsWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        List<GroupsConversationsThreadsSelect> select,
        List<GroupsConversationsThreadsExpand> expand);

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphPostInner> getPostsAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        List<GroupsConversationsThreadsSelect> select,
        List<GroupsConversationsThreadsExpand> expand);

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphPostInner> getPostsAsync(
        String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MicrosoftGraphPostInner getPosts(String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Get posts from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return posts from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MicrosoftGraphPostInner> getPostsWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        List<GroupsConversationsThreadsSelect> select,
        List<GroupsConversationsThreadsExpand> expand,
        Context context);

    /**
     * Update the navigation property posts in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> updatePostsWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphPostInner body);

    /**
     * Update the navigation property posts in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> updatePostsAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphPostInner body);

    /**
     * Update the navigation property posts in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void updatePosts(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphPostInner body);

    /**
     * Update the navigation property posts in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> updatePostsWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphPostInner body,
        Context context);

    /**
     * Delete navigation property posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> deletePostsWithResponseAsync(
        String groupId, String conversationId, String conversationThreadId, String postId, String ifMatch);

    /**
     * Delete navigation property posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deletePostsAsync(
        String groupId, String conversationId, String conversationThreadId, String postId, String ifMatch);

    /**
     * Delete navigation property posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deletePostsAsync(String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Delete navigation property posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deletePosts(String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Delete navigation property posts for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deletePostsWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String ifMatch,
        Context context);
}
