// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Alert properties. */
@Fluent
public final class AlertPropertiesInner {
    /*
     * The alert scope.
     */
    @JsonProperty(value = "scope", access = JsonProperty.Access.WRITE_ONLY)
    private String scope;

    /*
     * False by default; true if the alert is active.
     */
    @JsonProperty(value = "isActive")
    private Boolean isActive;

    /*
     * The number of generated incidents of the alert.
     */
    @JsonProperty(value = "incidentCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer incidentCount;

    /*
     * The date time when the alert configuration was updated or new incidents were generated.
     */
    @JsonProperty(value = "lastModifiedDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastModifiedDateTime;

    /*
     * The date time when the alert was last scanned.
     */
    @JsonProperty(value = "lastScannedDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastScannedDateTime;

    /*
     * The alert definition.
     */
    @JsonProperty(value = "alertDefinition", access = JsonProperty.Access.WRITE_ONLY)
    private AlertDefinitionInner alertDefinition;

    /*
     * The alert incidents.
     */
    @JsonProperty(value = "alertIncidents", access = JsonProperty.Access.WRITE_ONLY)
    private List<AlertIncidentInner> alertIncidents;

    /*
     * The alert configuration.
     */
    @JsonProperty(value = "alertConfiguration", access = JsonProperty.Access.WRITE_ONLY)
    private AlertConfigurationInner alertConfiguration;

    /** Creates an instance of AlertPropertiesInner class. */
    public AlertPropertiesInner() {
    }

    /**
     * Get the scope property: The alert scope.
     *
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Get the isActive property: False by default; true if the alert is active.
     *
     * @return the isActive value.
     */
    public Boolean isActive() {
        return this.isActive;
    }

    /**
     * Set the isActive property: False by default; true if the alert is active.
     *
     * @param isActive the isActive value to set.
     * @return the AlertPropertiesInner object itself.
     */
    public AlertPropertiesInner withIsActive(Boolean isActive) {
        this.isActive = isActive;
        return this;
    }

    /**
     * Get the incidentCount property: The number of generated incidents of the alert.
     *
     * @return the incidentCount value.
     */
    public Integer incidentCount() {
        return this.incidentCount;
    }

    /**
     * Get the lastModifiedDateTime property: The date time when the alert configuration was updated or new incidents
     * were generated.
     *
     * @return the lastModifiedDateTime value.
     */
    public OffsetDateTime lastModifiedDateTime() {
        return this.lastModifiedDateTime;
    }

    /**
     * Get the lastScannedDateTime property: The date time when the alert was last scanned.
     *
     * @return the lastScannedDateTime value.
     */
    public OffsetDateTime lastScannedDateTime() {
        return this.lastScannedDateTime;
    }

    /**
     * Get the alertDefinition property: The alert definition.
     *
     * @return the alertDefinition value.
     */
    public AlertDefinitionInner alertDefinition() {
        return this.alertDefinition;
    }

    /**
     * Get the alertIncidents property: The alert incidents.
     *
     * @return the alertIncidents value.
     */
    public List<AlertIncidentInner> alertIncidents() {
        return this.alertIncidents;
    }

    /**
     * Get the alertConfiguration property: The alert configuration.
     *
     * @return the alertConfiguration value.
     */
    public AlertConfigurationInner alertConfiguration() {
        return this.alertConfiguration;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (alertDefinition() != null) {
            alertDefinition().validate();
        }
        if (alertIncidents() != null) {
            alertIncidents().forEach(e -> e.validate());
        }
        if (alertConfiguration() != null) {
            alertConfiguration().validate();
        }
    }
}
