// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.authorization.fluent.models.Get4ItemsItem;
import com.azure.resourcemanager.authorization.fluent.models.Get9ItemsItem;
import com.azure.resourcemanager.authorization.fluent.models.GroupsConversationsOrderby;
import com.azure.resourcemanager.authorization.fluent.models.GroupsConversationsSelect;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphConversationThreadInner;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GroupsConversationsClient. */
public interface GroupsConversationsClient {
    /**
     * Get threads from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return threads from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<MicrosoftGraphConversationThreadInner> listThreadsAsync(
        String groupId,
        String conversationId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsConversationsOrderby> orderby,
        List<GroupsConversationsSelect> select,
        List<Get9ItemsItem> expand);

    /**
     * Get threads from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return threads from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<MicrosoftGraphConversationThreadInner> listThreadsAsync(String groupId, String conversationId);

    /**
     * Get threads from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return threads from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MicrosoftGraphConversationThreadInner> listThreads(String groupId, String conversationId);

    /**
     * Get threads from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return threads from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MicrosoftGraphConversationThreadInner> listThreads(
        String groupId,
        String conversationId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsConversationsOrderby> orderby,
        List<GroupsConversationsSelect> select,
        List<Get9ItemsItem> expand,
        Context context);

    /**
     * Create new navigation property to threads for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return conversationThread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MicrosoftGraphConversationThreadInner>> createThreadsWithResponseAsync(
        String groupId, String conversationId, MicrosoftGraphConversationThreadInner body);

    /**
     * Create new navigation property to threads for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return conversationThread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphConversationThreadInner> createThreadsAsync(
        String groupId, String conversationId, MicrosoftGraphConversationThreadInner body);

    /**
     * Create new navigation property to threads for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return conversationThread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MicrosoftGraphConversationThreadInner createThreads(
        String groupId, String conversationId, MicrosoftGraphConversationThreadInner body);

    /**
     * Create new navigation property to threads for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return conversationThread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MicrosoftGraphConversationThreadInner> createThreadsWithResponse(
        String groupId, String conversationId, MicrosoftGraphConversationThreadInner body, Context context);

    /**
     * Get threads from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return threads from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MicrosoftGraphConversationThreadInner>> getThreadsWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        List<GroupsConversationsSelect> select,
        List<Get4ItemsItem> expand);

    /**
     * Get threads from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return threads from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphConversationThreadInner> getThreadsAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        List<GroupsConversationsSelect> select,
        List<Get4ItemsItem> expand);

    /**
     * Get threads from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return threads from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphConversationThreadInner> getThreadsAsync(
        String groupId, String conversationId, String conversationThreadId);

    /**
     * Get threads from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return threads from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MicrosoftGraphConversationThreadInner getThreads(
        String groupId, String conversationId, String conversationThreadId);

    /**
     * Get threads from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return threads from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MicrosoftGraphConversationThreadInner> getThreadsWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        List<GroupsConversationsSelect> select,
        List<Get4ItemsItem> expand,
        Context context);

    /**
     * Update the navigation property threads in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> updateThreadsWithResponseAsync(
        String groupId, String conversationId, String conversationThreadId, MicrosoftGraphConversationThreadInner body);

    /**
     * Update the navigation property threads in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> updateThreadsAsync(
        String groupId, String conversationId, String conversationThreadId, MicrosoftGraphConversationThreadInner body);

    /**
     * Update the navigation property threads in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void updateThreads(
        String groupId, String conversationId, String conversationThreadId, MicrosoftGraphConversationThreadInner body);

    /**
     * Update the navigation property threads in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> updateThreadsWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        MicrosoftGraphConversationThreadInner body,
        Context context);

    /**
     * Delete navigation property threads for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> deleteThreadsWithResponseAsync(
        String groupId, String conversationId, String conversationThreadId, String ifMatch);

    /**
     * Delete navigation property threads for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteThreadsAsync(String groupId, String conversationId, String conversationThreadId, String ifMatch);

    /**
     * Delete navigation property threads for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteThreadsAsync(String groupId, String conversationId, String conversationThreadId);

    /**
     * Delete navigation property threads for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteThreads(String groupId, String conversationId, String conversationThreadId);

    /**
     * Delete navigation property threads for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteThreadsWithResponse(
        String groupId, String conversationId, String conversationThreadId, String ifMatch, Context context);
}
