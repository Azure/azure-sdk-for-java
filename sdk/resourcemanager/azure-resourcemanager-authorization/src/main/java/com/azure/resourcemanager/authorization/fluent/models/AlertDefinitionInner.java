// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.resourcemanager.authorization.models.SeverityLevel;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Alert definition. */
@Immutable
public final class AlertDefinitionInner {
    /*
     * The alert definition ID.
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * The alert definition name.
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /*
     * The alert definition type.
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /*
     * Alert definition properties.
     */
    @JsonProperty(value = "properties")
    private AlertDefinitionProperties innerProperties;

    /** Creates an instance of AlertDefinitionInner class. */
    public AlertDefinitionInner() {
    }

    /**
     * Get the id property: The alert definition ID.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The alert definition name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The alert definition type.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: Alert definition properties.
     *
     * @return the innerProperties value.
     */
    private AlertDefinitionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the displayName property: The alert display name.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Get the scope property: The alert scope.
     *
     * @return the scope value.
     */
    public String scope() {
        return this.innerProperties() == null ? null : this.innerProperties().scope();
    }

    /**
     * Get the description property: The alert description.
     *
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Get the severityLevel property: Severity level of the alert.
     *
     * @return the severityLevel value.
     */
    public SeverityLevel severityLevel() {
        return this.innerProperties() == null ? null : this.innerProperties().severityLevel();
    }

    /**
     * Get the securityImpact property: Security impact of the alert.
     *
     * @return the securityImpact value.
     */
    public String securityImpact() {
        return this.innerProperties() == null ? null : this.innerProperties().securityImpact();
    }

    /**
     * Get the mitigationSteps property: The methods to mitigate the alert.
     *
     * @return the mitigationSteps value.
     */
    public String mitigationSteps() {
        return this.innerProperties() == null ? null : this.innerProperties().mitigationSteps();
    }

    /**
     * Get the howToPrevent property: The ways to prevent the alert.
     *
     * @return the howToPrevent value.
     */
    public String howToPrevent() {
        return this.innerProperties() == null ? null : this.innerProperties().howToPrevent();
    }

    /**
     * Get the isRemediatable property: True if the alert can be remediated; false, otherwise.
     *
     * @return the isRemediatable value.
     */
    public Boolean isRemediatable() {
        return this.innerProperties() == null ? null : this.innerProperties().isRemediatable();
    }

    /**
     * Get the isConfigurable property: True if the alert configuration can be configured; false, otherwise.
     *
     * @return the isConfigurable value.
     */
    public Boolean isConfigurable() {
        return this.innerProperties() == null ? null : this.innerProperties().isConfigurable();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
