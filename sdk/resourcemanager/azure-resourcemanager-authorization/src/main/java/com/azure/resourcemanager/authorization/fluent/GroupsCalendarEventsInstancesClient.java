// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.authorization.fluent.models.GroupsCalendarEventsInstancesAcceptRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.GroupsCalendarEventsInstancesCancelRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.GroupsCalendarEventsInstancesDeclineRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.GroupsCalendarEventsInstancesForwardRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.GroupsCalendarEventsInstancesSnoozeReminderRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.GroupsCalendarEventsInstancesTentativelyAcceptRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphEventInner;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GroupsCalendarEventsInstancesClient. */
public interface GroupsCalendarEventsInstancesClient {
    /**
     * Invoke action accept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> acceptWithResponseAsync(
        String groupId, String eventId, String eventId1, GroupsCalendarEventsInstancesAcceptRequestBody body);

    /**
     * Invoke action accept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> acceptAsync(
        String groupId, String eventId, String eventId1, GroupsCalendarEventsInstancesAcceptRequestBody body);

    /**
     * Invoke action accept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void accept(String groupId, String eventId, String eventId1, GroupsCalendarEventsInstancesAcceptRequestBody body);

    /**
     * Invoke action accept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> acceptWithResponse(
        String groupId,
        String eventId,
        String eventId1,
        GroupsCalendarEventsInstancesAcceptRequestBody body,
        Context context);

    /**
     * Invoke action cancel.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> cancelWithResponseAsync(
        String groupId, String eventId, String eventId1, GroupsCalendarEventsInstancesCancelRequestBody body);

    /**
     * Invoke action cancel.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> cancelAsync(
        String groupId, String eventId, String eventId1, GroupsCalendarEventsInstancesCancelRequestBody body);

    /**
     * Invoke action cancel.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void cancel(String groupId, String eventId, String eventId1, GroupsCalendarEventsInstancesCancelRequestBody body);

    /**
     * Invoke action cancel.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> cancelWithResponse(
        String groupId,
        String eventId,
        String eventId1,
        GroupsCalendarEventsInstancesCancelRequestBody body,
        Context context);

    /**
     * Invoke action decline.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> declineWithResponseAsync(
        String groupId, String eventId, String eventId1, GroupsCalendarEventsInstancesDeclineRequestBody body);

    /**
     * Invoke action decline.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> declineAsync(
        String groupId, String eventId, String eventId1, GroupsCalendarEventsInstancesDeclineRequestBody body);

    /**
     * Invoke action decline.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void decline(String groupId, String eventId, String eventId1, GroupsCalendarEventsInstancesDeclineRequestBody body);

    /**
     * Invoke action decline.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> declineWithResponse(
        String groupId,
        String eventId,
        String eventId1,
        GroupsCalendarEventsInstancesDeclineRequestBody body,
        Context context);

    /**
     * Invoke action dismissReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> dismissReminderWithResponseAsync(String groupId, String eventId, String eventId1);

    /**
     * Invoke action dismissReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> dismissReminderAsync(String groupId, String eventId, String eventId1);

    /**
     * Invoke action dismissReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void dismissReminder(String groupId, String eventId, String eventId1);

    /**
     * Invoke action dismissReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> dismissReminderWithResponse(String groupId, String eventId, String eventId1, Context context);

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> forwardWithResponseAsync(
        String groupId, String eventId, String eventId1, GroupsCalendarEventsInstancesForwardRequestBody body);

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> forwardAsync(
        String groupId, String eventId, String eventId1, GroupsCalendarEventsInstancesForwardRequestBody body);

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void forward(String groupId, String eventId, String eventId1, GroupsCalendarEventsInstancesForwardRequestBody body);

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> forwardWithResponse(
        String groupId,
        String eventId,
        String eventId1,
        GroupsCalendarEventsInstancesForwardRequestBody body,
        Context context);

    /**
     * Invoke action snoozeReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> snoozeReminderWithResponseAsync(
        String groupId, String eventId, String eventId1, GroupsCalendarEventsInstancesSnoozeReminderRequestBody body);

    /**
     * Invoke action snoozeReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> snoozeReminderAsync(
        String groupId, String eventId, String eventId1, GroupsCalendarEventsInstancesSnoozeReminderRequestBody body);

    /**
     * Invoke action snoozeReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void snoozeReminder(
        String groupId, String eventId, String eventId1, GroupsCalendarEventsInstancesSnoozeReminderRequestBody body);

    /**
     * Invoke action snoozeReminder.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> snoozeReminderWithResponse(
        String groupId,
        String eventId,
        String eventId1,
        GroupsCalendarEventsInstancesSnoozeReminderRequestBody body,
        Context context);

    /**
     * Invoke action tentativelyAccept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> tentativelyAcceptWithResponseAsync(
        String groupId,
        String eventId,
        String eventId1,
        GroupsCalendarEventsInstancesTentativelyAcceptRequestBody body);

    /**
     * Invoke action tentativelyAccept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> tentativelyAcceptAsync(
        String groupId,
        String eventId,
        String eventId1,
        GroupsCalendarEventsInstancesTentativelyAcceptRequestBody body);

    /**
     * Invoke action tentativelyAccept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void tentativelyAccept(
        String groupId,
        String eventId,
        String eventId1,
        GroupsCalendarEventsInstancesTentativelyAcceptRequestBody body);

    /**
     * Invoke action tentativelyAccept.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param eventId1 key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> tentativelyAcceptWithResponse(
        String groupId,
        String eventId,
        String eventId1,
        GroupsCalendarEventsInstancesTentativelyAcceptRequestBody body,
        Context context);

    /**
     * Invoke function delta.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<List<MicrosoftGraphEventInner>>> deltaWithResponseAsync(String groupId, String eventId);

    /**
     * Invoke function delta.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<List<MicrosoftGraphEventInner>> deltaAsync(String groupId, String eventId);

    /**
     * Invoke function delta.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    List<MicrosoftGraphEventInner> delta(String groupId, String eventId);

    /**
     * Invoke function delta.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<List<MicrosoftGraphEventInner>> deltaWithResponse(String groupId, String eventId, Context context);
}
