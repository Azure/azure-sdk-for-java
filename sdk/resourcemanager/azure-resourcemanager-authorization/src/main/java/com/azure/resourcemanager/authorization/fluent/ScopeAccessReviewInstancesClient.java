// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.authorization.fluent.models.AccessReviewInstanceInner;
import com.azure.resourcemanager.authorization.fluent.models.AccessReviewInstanceProperties;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ScopeAccessReviewInstancesClient. */
public interface ScopeAccessReviewInstancesClient {
    /**
     * Get access review instances.
     *
     * @param scope The scope of the resource.
     * @param scheduleDefinitionId The id of the access review schedule definition.
     * @param filter The filter to apply on the operation. Other than standard filters, one custom filter option is
     *     supported : 'assignedToMeToReview()'. When one specified $filter=assignedToMeToReview(), only items that are
     *     assigned to the calling user to review are returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access review instances as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<AccessReviewInstanceInner> listAsync(String scope, String scheduleDefinitionId, String filter);

    /**
     * Get access review instances.
     *
     * @param scope The scope of the resource.
     * @param scheduleDefinitionId The id of the access review schedule definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access review instances as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<AccessReviewInstanceInner> listAsync(String scope, String scheduleDefinitionId);

    /**
     * Get access review instances.
     *
     * @param scope The scope of the resource.
     * @param scheduleDefinitionId The id of the access review schedule definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access review instances as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AccessReviewInstanceInner> list(String scope, String scheduleDefinitionId);

    /**
     * Get access review instances.
     *
     * @param scope The scope of the resource.
     * @param scheduleDefinitionId The id of the access review schedule definition.
     * @param filter The filter to apply on the operation. Other than standard filters, one custom filter option is
     *     supported : 'assignedToMeToReview()'. When one specified $filter=assignedToMeToReview(), only items that are
     *     assigned to the calling user to review are returned.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access review instances as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AccessReviewInstanceInner> list(
        String scope, String scheduleDefinitionId, String filter, Context context);

    /**
     * Get access review instances.
     *
     * @param scope The scope of the resource.
     * @param scheduleDefinitionId The id of the access review schedule definition.
     * @param id The id of the access review instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access review instances along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<AccessReviewInstanceInner>> getByIdWithResponseAsync(
        String scope, String scheduleDefinitionId, String id);

    /**
     * Get access review instances.
     *
     * @param scope The scope of the resource.
     * @param scheduleDefinitionId The id of the access review schedule definition.
     * @param id The id of the access review instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access review instances on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AccessReviewInstanceInner> getByIdAsync(String scope, String scheduleDefinitionId, String id);

    /**
     * Get access review instances.
     *
     * @param scope The scope of the resource.
     * @param scheduleDefinitionId The id of the access review schedule definition.
     * @param id The id of the access review instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access review instances along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AccessReviewInstanceInner> getByIdWithResponse(
        String scope, String scheduleDefinitionId, String id, Context context);

    /**
     * Get access review instances.
     *
     * @param scope The scope of the resource.
     * @param scheduleDefinitionId The id of the access review schedule definition.
     * @param id The id of the access review instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access review instances.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AccessReviewInstanceInner getById(String scope, String scheduleDefinitionId, String id);

    /**
     * Update access review instance.
     *
     * @param scope The scope of the resource.
     * @param scheduleDefinitionId The id of the access review schedule definition.
     * @param id The id of the access review instance.
     * @param properties Access review instance properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access Review Instance along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<AccessReviewInstanceInner>> createWithResponseAsync(
        String scope, String scheduleDefinitionId, String id, AccessReviewInstanceProperties properties);

    /**
     * Update access review instance.
     *
     * @param scope The scope of the resource.
     * @param scheduleDefinitionId The id of the access review schedule definition.
     * @param id The id of the access review instance.
     * @param properties Access review instance properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access Review Instance on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AccessReviewInstanceInner> createAsync(
        String scope, String scheduleDefinitionId, String id, AccessReviewInstanceProperties properties);

    /**
     * Update access review instance.
     *
     * @param scope The scope of the resource.
     * @param scheduleDefinitionId The id of the access review schedule definition.
     * @param id The id of the access review instance.
     * @param properties Access review instance properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access Review Instance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AccessReviewInstanceInner> createWithResponse(
        String scope,
        String scheduleDefinitionId,
        String id,
        AccessReviewInstanceProperties properties,
        Context context);

    /**
     * Update access review instance.
     *
     * @param scope The scope of the resource.
     * @param scheduleDefinitionId The id of the access review schedule definition.
     * @param id The id of the access review instance.
     * @param properties Access review instance properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access Review Instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AccessReviewInstanceInner create(
        String scope, String scheduleDefinitionId, String id, AccessReviewInstanceProperties properties);
}
