// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.authorization.fluent.models.GroupsConversationsThreadsPostsExpand;
import com.azure.resourcemanager.authorization.fluent.models.GroupsConversationsThreadsPostsForwardRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.GroupsConversationsThreadsPostsOrderby;
import com.azure.resourcemanager.authorization.fluent.models.GroupsConversationsThreadsPostsReplyRequestBodyInner;
import com.azure.resourcemanager.authorization.fluent.models.GroupsConversationsThreadsPostsSelect;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphAttachmentInner;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphExtensionInner;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphMultiValueLegacyExtendedPropertyInner;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphPostInner;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphSingleValueLegacyExtendedPropertyInner;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GroupsConversationsThreadsPostsClient. */
public interface GroupsConversationsThreadsPostsClient {
    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<MicrosoftGraphAttachmentInner> listAttachmentsAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsConversationsThreadsPostsOrderby> orderby,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<String> expand);

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<MicrosoftGraphAttachmentInner> listAttachmentsAsync(
        String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MicrosoftGraphAttachmentInner> listAttachments(
        String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MicrosoftGraphAttachmentInner> listAttachments(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsConversationsThreadsPostsOrderby> orderby,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<String> expand,
        Context context);

    /**
     * Create new navigation property to attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MicrosoftGraphAttachmentInner>> createAttachmentsWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphAttachmentInner body);

    /**
     * Create new navigation property to attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphAttachmentInner> createAttachmentsAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphAttachmentInner body);

    /**
     * Create new navigation property to attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MicrosoftGraphAttachmentInner createAttachments(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphAttachmentInner body);

    /**
     * Create new navigation property to attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MicrosoftGraphAttachmentInner> createAttachmentsWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphAttachmentInner body,
        Context context);

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MicrosoftGraphAttachmentInner>> getAttachmentsWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<String> expand);

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphAttachmentInner> getAttachmentsAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<String> expand);

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphAttachmentInner> getAttachmentsAsync(
        String groupId, String conversationId, String conversationThreadId, String postId, String attachmentId);

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MicrosoftGraphAttachmentInner getAttachments(
        String groupId, String conversationId, String conversationThreadId, String postId, String attachmentId);

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MicrosoftGraphAttachmentInner> getAttachmentsWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<String> expand,
        Context context);

    /**
     * Update the navigation property attachments in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> updateAttachmentsWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        MicrosoftGraphAttachmentInner body);

    /**
     * Update the navigation property attachments in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> updateAttachmentsAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        MicrosoftGraphAttachmentInner body);

    /**
     * Update the navigation property attachments in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void updateAttachments(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        MicrosoftGraphAttachmentInner body);

    /**
     * Update the navigation property attachments in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> updateAttachmentsWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        MicrosoftGraphAttachmentInner body,
        Context context);

    /**
     * Delete navigation property attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> deleteAttachmentsWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        String ifMatch);

    /**
     * Delete navigation property attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteAttachmentsAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        String ifMatch);

    /**
     * Delete navigation property attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteAttachmentsAsync(
        String groupId, String conversationId, String conversationThreadId, String postId, String attachmentId);

    /**
     * Delete navigation property attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteAttachments(
        String groupId, String conversationId, String conversationThreadId, String postId, String attachmentId);

    /**
     * Delete navigation property attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteAttachmentsWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        String ifMatch,
        Context context);

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<MicrosoftGraphExtensionInner> listExtensionsAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsConversationsThreadsPostsOrderby> orderby,
        List<String> select,
        List<String> expand);

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<MicrosoftGraphExtensionInner> listExtensionsAsync(
        String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MicrosoftGraphExtensionInner> listExtensions(
        String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MicrosoftGraphExtensionInner> listExtensions(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsConversationsThreadsPostsOrderby> orderby,
        List<String> select,
        List<String> expand,
        Context context);

    /**
     * Create new navigation property to extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MicrosoftGraphExtensionInner>> createExtensionsWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphExtensionInner body);

    /**
     * Create new navigation property to extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphExtensionInner> createExtensionsAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphExtensionInner body);

    /**
     * Create new navigation property to extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MicrosoftGraphExtensionInner createExtensions(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphExtensionInner body);

    /**
     * Create new navigation property to extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MicrosoftGraphExtensionInner> createExtensionsWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphExtensionInner body,
        Context context);

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MicrosoftGraphExtensionInner>> getExtensionsWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String extensionId,
        List<String> select,
        List<String> expand);

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphExtensionInner> getExtensionsAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String extensionId,
        List<String> select,
        List<String> expand);

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphExtensionInner> getExtensionsAsync(
        String groupId, String conversationId, String conversationThreadId, String postId, String extensionId);

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MicrosoftGraphExtensionInner getExtensions(
        String groupId, String conversationId, String conversationThreadId, String postId, String extensionId);

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MicrosoftGraphExtensionInner> getExtensionsWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String extensionId,
        List<String> select,
        List<String> expand,
        Context context);

    /**
     * Update the navigation property extensions in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> updateExtensionsWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String extensionId,
        MicrosoftGraphExtensionInner body);

    /**
     * Update the navigation property extensions in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> updateExtensionsAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String extensionId,
        MicrosoftGraphExtensionInner body);

    /**
     * Update the navigation property extensions in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void updateExtensions(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String extensionId,
        MicrosoftGraphExtensionInner body);

    /**
     * Update the navigation property extensions in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> updateExtensionsWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String extensionId,
        MicrosoftGraphExtensionInner body,
        Context context);

    /**
     * Delete navigation property extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> deleteExtensionsWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String extensionId,
        String ifMatch);

    /**
     * Delete navigation property extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteExtensionsAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String extensionId,
        String ifMatch);

    /**
     * Delete navigation property extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteExtensionsAsync(
        String groupId, String conversationId, String conversationThreadId, String postId, String extensionId);

    /**
     * Delete navigation property extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteExtensions(
        String groupId, String conversationId, String conversationThreadId, String postId, String extensionId);

    /**
     * Delete navigation property extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteExtensionsWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String extensionId,
        String ifMatch,
        Context context);

    /**
     * Get inReplyTo from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return inReplyTo from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MicrosoftGraphPostInner>> getInReplyToWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<GroupsConversationsThreadsPostsExpand> expand);

    /**
     * Get inReplyTo from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return inReplyTo from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphPostInner> getInReplyToAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<GroupsConversationsThreadsPostsExpand> expand);

    /**
     * Get inReplyTo from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return inReplyTo from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphPostInner> getInReplyToAsync(
        String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Get inReplyTo from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return inReplyTo from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MicrosoftGraphPostInner getInReplyTo(
        String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Get inReplyTo from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return inReplyTo from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MicrosoftGraphPostInner> getInReplyToWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<GroupsConversationsThreadsPostsExpand> expand,
        Context context);

    /**
     * Update the navigation property inReplyTo in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> updateInReplyToWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphPostInner body);

    /**
     * Update the navigation property inReplyTo in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> updateInReplyToAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphPostInner body);

    /**
     * Update the navigation property inReplyTo in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void updateInReplyTo(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphPostInner body);

    /**
     * Update the navigation property inReplyTo in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> updateInReplyToWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphPostInner body,
        Context context);

    /**
     * Delete navigation property inReplyTo for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> deleteInReplyToWithResponseAsync(
        String groupId, String conversationId, String conversationThreadId, String postId, String ifMatch);

    /**
     * Delete navigation property inReplyTo for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteInReplyToAsync(
        String groupId, String conversationId, String conversationThreadId, String postId, String ifMatch);

    /**
     * Delete navigation property inReplyTo for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteInReplyToAsync(String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Delete navigation property inReplyTo for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteInReplyTo(String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Delete navigation property inReplyTo for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteInReplyToWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String ifMatch,
        Context context);

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> forwardWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        GroupsConversationsThreadsPostsForwardRequestBody body);

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> forwardAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        GroupsConversationsThreadsPostsForwardRequestBody body);

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void forward(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        GroupsConversationsThreadsPostsForwardRequestBody body);

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> forwardWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        GroupsConversationsThreadsPostsForwardRequestBody body,
        Context context);

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> replyWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        GroupsConversationsThreadsPostsReplyRequestBodyInner body);

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> replyAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        GroupsConversationsThreadsPostsReplyRequestBodyInner body);

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void reply(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        GroupsConversationsThreadsPostsReplyRequestBodyInner body);

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> replyWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        GroupsConversationsThreadsPostsReplyRequestBodyInner body,
        Context context);

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> listMultiValueExtendedPropertiesAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsConversationsThreadsPostsOrderby> orderby,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<String> expand);

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> listMultiValueExtendedPropertiesAsync(
        String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> listMultiValueExtendedProperties(
        String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> listMultiValueExtendedProperties(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsConversationsThreadsPostsOrderby> orderby,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<String> expand,
        Context context);

    /**
     * Create new navigation property to multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MicrosoftGraphMultiValueLegacyExtendedPropertyInner>>
        createMultiValueExtendedPropertiesWithResponseAsync(
            String groupId,
            String conversationId,
            String conversationThreadId,
            String postId,
            MicrosoftGraphMultiValueLegacyExtendedPropertyInner body);

    /**
     * Create new navigation property to multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> createMultiValueExtendedPropertiesAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphMultiValueLegacyExtendedPropertyInner body);

    /**
     * Create new navigation property to multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MicrosoftGraphMultiValueLegacyExtendedPropertyInner createMultiValueExtendedProperties(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphMultiValueLegacyExtendedPropertyInner body);

    /**
     * Create new navigation property to multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> createMultiValueExtendedPropertiesWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphMultiValueLegacyExtendedPropertyInner body,
        Context context);

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MicrosoftGraphMultiValueLegacyExtendedPropertyInner>>
        getMultiValueExtendedPropertiesWithResponseAsync(
            String groupId,
            String conversationId,
            String conversationThreadId,
            String postId,
            String multiValueLegacyExtendedPropertyId,
            List<GroupsConversationsThreadsPostsSelect> select,
            List<String> expand);

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> getMultiValueExtendedPropertiesAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<String> expand);

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> getMultiValueExtendedPropertiesAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId);

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MicrosoftGraphMultiValueLegacyExtendedPropertyInner getMultiValueExtendedProperties(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId);

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> getMultiValueExtendedPropertiesWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<String> expand,
        Context context);

    /**
     * Update the navigation property multiValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> updateMultiValueExtendedPropertiesWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        MicrosoftGraphMultiValueLegacyExtendedPropertyInner body);

    /**
     * Update the navigation property multiValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> updateMultiValueExtendedPropertiesAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        MicrosoftGraphMultiValueLegacyExtendedPropertyInner body);

    /**
     * Update the navigation property multiValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void updateMultiValueExtendedProperties(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        MicrosoftGraphMultiValueLegacyExtendedPropertyInner body);

    /**
     * Update the navigation property multiValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> updateMultiValueExtendedPropertiesWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        MicrosoftGraphMultiValueLegacyExtendedPropertyInner body,
        Context context);

    /**
     * Delete navigation property multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> deleteMultiValueExtendedPropertiesWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        String ifMatch);

    /**
     * Delete navigation property multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteMultiValueExtendedPropertiesAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        String ifMatch);

    /**
     * Delete navigation property multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteMultiValueExtendedPropertiesAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId);

    /**
     * Delete navigation property multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteMultiValueExtendedProperties(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId);

    /**
     * Delete navigation property multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteMultiValueExtendedPropertiesWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        String ifMatch,
        Context context);

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> listSingleValueExtendedPropertiesAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsConversationsThreadsPostsOrderby> orderby,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<String> expand);

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> listSingleValueExtendedPropertiesAsync(
        String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> listSingleValueExtendedProperties(
        String groupId, String conversationId, String conversationThreadId, String postId);

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> listSingleValueExtendedProperties(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsConversationsThreadsPostsOrderby> orderby,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<String> expand,
        Context context);

    /**
     * Create new navigation property to singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MicrosoftGraphSingleValueLegacyExtendedPropertyInner>>
        createSingleValueExtendedPropertiesWithResponseAsync(
            String groupId,
            String conversationId,
            String conversationThreadId,
            String postId,
            MicrosoftGraphSingleValueLegacyExtendedPropertyInner body);

    /**
     * Create new navigation property to singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> createSingleValueExtendedPropertiesAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphSingleValueLegacyExtendedPropertyInner body);

    /**
     * Create new navigation property to singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MicrosoftGraphSingleValueLegacyExtendedPropertyInner createSingleValueExtendedProperties(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphSingleValueLegacyExtendedPropertyInner body);

    /**
     * Create new navigation property to singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> createSingleValueExtendedPropertiesWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphSingleValueLegacyExtendedPropertyInner body,
        Context context);

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MicrosoftGraphSingleValueLegacyExtendedPropertyInner>>
        getSingleValueExtendedPropertiesWithResponseAsync(
            String groupId,
            String conversationId,
            String conversationThreadId,
            String postId,
            String singleValueLegacyExtendedPropertyId,
            List<GroupsConversationsThreadsPostsSelect> select,
            List<String> expand);

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> getSingleValueExtendedPropertiesAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<String> expand);

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> getSingleValueExtendedPropertiesAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId);

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MicrosoftGraphSingleValueLegacyExtendedPropertyInner getSingleValueExtendedProperties(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId);

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> getSingleValueExtendedPropertiesWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        List<GroupsConversationsThreadsPostsSelect> select,
        List<String> expand,
        Context context);

    /**
     * Update the navigation property singleValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> updateSingleValueExtendedPropertiesWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        MicrosoftGraphSingleValueLegacyExtendedPropertyInner body);

    /**
     * Update the navigation property singleValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> updateSingleValueExtendedPropertiesAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        MicrosoftGraphSingleValueLegacyExtendedPropertyInner body);

    /**
     * Update the navigation property singleValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void updateSingleValueExtendedProperties(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        MicrosoftGraphSingleValueLegacyExtendedPropertyInner body);

    /**
     * Update the navigation property singleValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> updateSingleValueExtendedPropertiesWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        MicrosoftGraphSingleValueLegacyExtendedPropertyInner body,
        Context context);

    /**
     * Delete navigation property singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> deleteSingleValueExtendedPropertiesWithResponseAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        String ifMatch);

    /**
     * Delete navigation property singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteSingleValueExtendedPropertiesAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        String ifMatch);

    /**
     * Delete navigation property singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteSingleValueExtendedPropertiesAsync(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId);

    /**
     * Delete navigation property singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteSingleValueExtendedProperties(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId);

    /**
     * Delete navigation property singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationId key: id of conversation.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteSingleValueExtendedPropertiesWithResponse(
        String groupId,
        String conversationId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        String ifMatch,
        Context context);
}
