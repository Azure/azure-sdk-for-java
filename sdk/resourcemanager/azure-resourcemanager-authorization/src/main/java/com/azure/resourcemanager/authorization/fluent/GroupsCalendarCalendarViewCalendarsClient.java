// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.authorization.fluent.models.GroupsCalendarCalendarViewCalendarGetScheduleRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphCalendarRoleType;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphScheduleInformationInner;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in GroupsCalendarCalendarViewCalendarsClient.
 */
public interface GroupsCalendarCalendarViewCalendarsClient {
    /**
     * Invoke function allowedCalendarSharingRoles.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param user The user parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of MicrosoftGraphCalendarRoleType.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<List<MicrosoftGraphCalendarRoleType>>> allowedCalendarSharingRolesWithResponseAsync(
        String groupId, String eventId, String user);

    /**
     * Invoke function allowedCalendarSharingRoles.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param user The user parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of MicrosoftGraphCalendarRoleType.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<List<MicrosoftGraphCalendarRoleType>> allowedCalendarSharingRolesAsync(
        String groupId, String eventId, String user);

    /**
     * Invoke function allowedCalendarSharingRoles.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param user The user parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of MicrosoftGraphCalendarRoleType.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    List<MicrosoftGraphCalendarRoleType> allowedCalendarSharingRoles(String groupId, String eventId, String user);

    /**
     * Invoke function allowedCalendarSharingRoles.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param user The user parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of MicrosoftGraphCalendarRoleType.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<List<MicrosoftGraphCalendarRoleType>> allowedCalendarSharingRolesWithResponse(
        String groupId, String eventId, String user, Context context);

    /**
     * Invoke action getSchedule.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<List<MicrosoftGraphScheduleInformationInner>>> getScheduleWithResponseAsync(
        String groupId, String eventId, GroupsCalendarCalendarViewCalendarGetScheduleRequestBody body);

    /**
     * Invoke action getSchedule.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<List<MicrosoftGraphScheduleInformationInner>> getScheduleAsync(
        String groupId, String eventId, GroupsCalendarCalendarViewCalendarGetScheduleRequestBody body);

    /**
     * Invoke action getSchedule.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    List<MicrosoftGraphScheduleInformationInner> getSchedule(
        String groupId, String eventId, GroupsCalendarCalendarViewCalendarGetScheduleRequestBody body);

    /**
     * Invoke action getSchedule.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<List<MicrosoftGraphScheduleInformationInner>> getScheduleWithResponse(
        String groupId, String eventId, GroupsCalendarCalendarViewCalendarGetScheduleRequestBody body, Context context);
}
