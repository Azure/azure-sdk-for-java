// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.authorization.fluent.ScopeAccessReviewHistoryDefinitionOperationsClient;
import com.azure.resourcemanager.authorization.fluent.models.AccessReviewHistoryDefinitionInner;
import com.azure.resourcemanager.authorization.fluent.models.AccessReviewHistoryDefinitionProperties;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * ScopeAccessReviewHistoryDefinitionOperationsClient.
 */
public final class ScopeAccessReviewHistoryDefinitionOperationsClientImpl
    implements ScopeAccessReviewHistoryDefinitionOperationsClient {
    /** The proxy service used to perform REST calls. */
    private final ScopeAccessReviewHistoryDefinitionOperationsService service;

    /** The service client containing this operation class. */
    private final AuthorizationManagementClientImpl client;

    /**
     * Initializes an instance of ScopeAccessReviewHistoryDefinitionOperationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ScopeAccessReviewHistoryDefinitionOperationsClientImpl(AuthorizationManagementClientImpl client) {
        this.service =
            RestProxy
                .create(
                    ScopeAccessReviewHistoryDefinitionOperationsService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AuthorizationManagementClientScopeAccessReviewHistoryDefinitionOperations to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AuthorizationManagem")
    public interface ScopeAccessReviewHistoryDefinitionOperationsService {
        @Headers({"Content-Type: application/json"})
        @Put("/{scope}/providers/Microsoft.Authorization/accessReviewHistoryDefinitions/{historyDefinitionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AccessReviewHistoryDefinitionInner>> create(
            @HostParam("$host") String endpoint,
            @PathParam("scope") String scope,
            @PathParam("historyDefinitionId") String historyDefinitionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") AccessReviewHistoryDefinitionProperties properties,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/{scope}/providers/Microsoft.Authorization/accessReviewHistoryDefinitions/{historyDefinitionId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> deleteById(
            @HostParam("$host") String endpoint,
            @PathParam("scope") String scope,
            @PathParam("historyDefinitionId") String historyDefinitionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Create a scheduled or one-time Access Review History Definition.
     *
     * @param scope The scope of the resource.
     * @param historyDefinitionId The id of the access review history definition.
     * @param properties Access review history definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access Review History Definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AccessReviewHistoryDefinitionInner>> createWithResponseAsync(
        String scope, String historyDefinitionId, AccessReviewHistoryDefinitionProperties properties) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (historyDefinitionId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter historyDefinitionId is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String apiVersion = "2021-12-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            scope,
                            historyDefinitionId,
                            apiVersion,
                            properties,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a scheduled or one-time Access Review History Definition.
     *
     * @param scope The scope of the resource.
     * @param historyDefinitionId The id of the access review history definition.
     * @param properties Access review history definition properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access Review History Definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessReviewHistoryDefinitionInner>> createWithResponseAsync(
        String scope, String historyDefinitionId, AccessReviewHistoryDefinitionProperties properties, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (historyDefinitionId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter historyDefinitionId is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String apiVersion = "2021-12-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(this.client.getEndpoint(), scope, historyDefinitionId, apiVersion, properties, accept, context);
    }

    /**
     * Create a scheduled or one-time Access Review History Definition.
     *
     * @param scope The scope of the resource.
     * @param historyDefinitionId The id of the access review history definition.
     * @param properties Access review history definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access Review History Definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AccessReviewHistoryDefinitionInner> createAsync(
        String scope, String historyDefinitionId, AccessReviewHistoryDefinitionProperties properties) {
        return createWithResponseAsync(scope, historyDefinitionId, properties)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create a scheduled or one-time Access Review History Definition.
     *
     * @param scope The scope of the resource.
     * @param historyDefinitionId The id of the access review history definition.
     * @param properties Access review history definition properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access Review History Definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AccessReviewHistoryDefinitionInner> createWithResponse(
        String scope, String historyDefinitionId, AccessReviewHistoryDefinitionProperties properties, Context context) {
        return createWithResponseAsync(scope, historyDefinitionId, properties, context).block();
    }

    /**
     * Create a scheduled or one-time Access Review History Definition.
     *
     * @param scope The scope of the resource.
     * @param historyDefinitionId The id of the access review history definition.
     * @param properties Access review history definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access Review History Definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessReviewHistoryDefinitionInner create(
        String scope, String historyDefinitionId, AccessReviewHistoryDefinitionProperties properties) {
        return createWithResponse(scope, historyDefinitionId, properties, Context.NONE).getValue();
    }

    /**
     * Delete an access review history definition.
     *
     * @param scope The scope of the resource.
     * @param historyDefinitionId The id of the access review history definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteByIdWithResponseAsync(String scope, String historyDefinitionId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (historyDefinitionId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter historyDefinitionId is required and cannot be null."));
        }
        final String apiVersion = "2021-12-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteById(this.client.getEndpoint(), scope, historyDefinitionId, apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete an access review history definition.
     *
     * @param scope The scope of the resource.
     * @param historyDefinitionId The id of the access review history definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteByIdWithResponseAsync(
        String scope, String historyDefinitionId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (historyDefinitionId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter historyDefinitionId is required and cannot be null."));
        }
        final String apiVersion = "2021-12-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.deleteById(this.client.getEndpoint(), scope, historyDefinitionId, apiVersion, accept, context);
    }

    /**
     * Delete an access review history definition.
     *
     * @param scope The scope of the resource.
     * @param historyDefinitionId The id of the access review history definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteByIdAsync(String scope, String historyDefinitionId) {
        return deleteByIdWithResponseAsync(scope, historyDefinitionId).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete an access review history definition.
     *
     * @param scope The scope of the resource.
     * @param historyDefinitionId The id of the access review history definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteByIdWithResponse(String scope, String historyDefinitionId, Context context) {
        return deleteByIdWithResponseAsync(scope, historyDefinitionId, context).block();
    }

    /**
     * Delete an access review history definition.
     *
     * @param scope The scope of the resource.
     * @param historyDefinitionId The id of the access review history definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteById(String scope, String historyDefinitionId) {
        deleteByIdWithResponse(scope, historyDefinitionId, Context.NONE);
    }
}
