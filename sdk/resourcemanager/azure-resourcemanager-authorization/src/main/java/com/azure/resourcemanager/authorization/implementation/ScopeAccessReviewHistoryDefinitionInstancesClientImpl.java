// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.authorization.fluent.ScopeAccessReviewHistoryDefinitionInstancesClient;
import com.azure.resourcemanager.authorization.fluent.models.AccessReviewHistoryInstanceInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * ScopeAccessReviewHistoryDefinitionInstancesClient.
 */
public final class ScopeAccessReviewHistoryDefinitionInstancesClientImpl
    implements ScopeAccessReviewHistoryDefinitionInstancesClient {
    /** The proxy service used to perform REST calls. */
    private final ScopeAccessReviewHistoryDefinitionInstancesService service;

    /** The service client containing this operation class. */
    private final AuthorizationManagementClientImpl client;

    /**
     * Initializes an instance of ScopeAccessReviewHistoryDefinitionInstancesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ScopeAccessReviewHistoryDefinitionInstancesClientImpl(AuthorizationManagementClientImpl client) {
        this.service =
            RestProxy
                .create(
                    ScopeAccessReviewHistoryDefinitionInstancesService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AuthorizationManagementClientScopeAccessReviewHistoryDefinitionInstances to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AuthorizationManagem")
    public interface ScopeAccessReviewHistoryDefinitionInstancesService {
        @Headers({"Content-Type: application/json"})
        @Post(
            "/{scope}/providers/Microsoft.Authorization/accessReviewHistoryDefinitions/{historyDefinitionId}/instances/{instanceId}/generateDownloadUri")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AccessReviewHistoryInstanceInner>> generateDownloadUri(
            @HostParam("$host") String endpoint,
            @PathParam("scope") String scope,
            @PathParam("historyDefinitionId") String historyDefinitionId,
            @PathParam("instanceId") String instanceId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Generates a uri which can be used to retrieve review history data. This URI has a TTL of 1 day and can be
     * retrieved by fetching the accessReviewHistoryDefinition object.
     *
     * @param scope The scope of the resource.
     * @param historyDefinitionId The id of the access review history definition.
     * @param instanceId The id of the access review history definition instance to generate a URI for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access Review History Definition Instance along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AccessReviewHistoryInstanceInner>> generateDownloadUriWithResponseAsync(
        String scope, String historyDefinitionId, String instanceId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (historyDefinitionId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter historyDefinitionId is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        final String apiVersion = "2021-12-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .generateDownloadUri(
                            this.client.getEndpoint(),
                            scope,
                            historyDefinitionId,
                            instanceId,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Generates a uri which can be used to retrieve review history data. This URI has a TTL of 1 day and can be
     * retrieved by fetching the accessReviewHistoryDefinition object.
     *
     * @param scope The scope of the resource.
     * @param historyDefinitionId The id of the access review history definition.
     * @param instanceId The id of the access review history definition instance to generate a URI for.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access Review History Definition Instance along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessReviewHistoryInstanceInner>> generateDownloadUriWithResponseAsync(
        String scope, String historyDefinitionId, String instanceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (historyDefinitionId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter historyDefinitionId is required and cannot be null."));
        }
        if (instanceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceId is required and cannot be null."));
        }
        final String apiVersion = "2021-12-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .generateDownloadUri(
                this.client.getEndpoint(), scope, historyDefinitionId, instanceId, apiVersion, accept, context);
    }

    /**
     * Generates a uri which can be used to retrieve review history data. This URI has a TTL of 1 day and can be
     * retrieved by fetching the accessReviewHistoryDefinition object.
     *
     * @param scope The scope of the resource.
     * @param historyDefinitionId The id of the access review history definition.
     * @param instanceId The id of the access review history definition instance to generate a URI for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access Review History Definition Instance on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AccessReviewHistoryInstanceInner> generateDownloadUriAsync(
        String scope, String historyDefinitionId, String instanceId) {
        return generateDownloadUriWithResponseAsync(scope, historyDefinitionId, instanceId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Generates a uri which can be used to retrieve review history data. This URI has a TTL of 1 day and can be
     * retrieved by fetching the accessReviewHistoryDefinition object.
     *
     * @param scope The scope of the resource.
     * @param historyDefinitionId The id of the access review history definition.
     * @param instanceId The id of the access review history definition instance to generate a URI for.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access Review History Definition Instance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AccessReviewHistoryInstanceInner> generateDownloadUriWithResponse(
        String scope, String historyDefinitionId, String instanceId, Context context) {
        return generateDownloadUriWithResponseAsync(scope, historyDefinitionId, instanceId, context).block();
    }

    /**
     * Generates a uri which can be used to retrieve review history data. This URI has a TTL of 1 day and can be
     * retrieved by fetching the accessReviewHistoryDefinition object.
     *
     * @param scope The scope of the resource.
     * @param historyDefinitionId The id of the access review history definition.
     * @param instanceId The id of the access review history definition instance to generate a URI for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return access Review History Definition Instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessReviewHistoryInstanceInner generateDownloadUri(
        String scope, String historyDefinitionId, String instanceId) {
        return generateDownloadUriWithResponse(scope, historyDefinitionId, instanceId, Context.NONE).getValue();
    }
}
