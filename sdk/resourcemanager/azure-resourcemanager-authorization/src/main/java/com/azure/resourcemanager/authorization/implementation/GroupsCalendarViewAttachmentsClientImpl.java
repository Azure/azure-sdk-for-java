// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.fluent.GroupsCalendarViewAttachmentsClient;
import com.azure.resourcemanager.authorization.fluent.models.GroupsCalendarViewAttachmentsCreateUploadSessionRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphUploadSessionInner;
import com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GroupsCalendarViewAttachmentsClient. */
public final class GroupsCalendarViewAttachmentsClientImpl implements GroupsCalendarViewAttachmentsClient {
    private final ClientLogger logger = new ClientLogger(GroupsCalendarViewAttachmentsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final GroupsCalendarViewAttachmentsService service;

    /** The service client containing this operation class. */
    private final MicrosoftGraphClientImpl client;

    /**
     * Initializes an instance of GroupsCalendarViewAttachmentsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    GroupsCalendarViewAttachmentsClientImpl(MicrosoftGraphClientImpl client) {
        this.service =
            RestProxy
                .create(
                    GroupsCalendarViewAttachmentsService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftGraphClientGroupsCalendarViewAttachments to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftGraphClient")
    private interface GroupsCalendarViewAttachmentsService {
        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/calendarView/{event-id}/attachments/microsoft.graph.createUploadSession")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<MicrosoftGraphUploadSessionInner>> createUploadSession(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("event-id") String eventId,
            @BodyParam("application/json") GroupsCalendarViewAttachmentsCreateUploadSessionRequestBody body,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Invoke action createUploadSession.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return uploadSession.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MicrosoftGraphUploadSessionInner>> createUploadSessionWithResponseAsync(
        String groupId, String eventId, GroupsCalendarViewAttachmentsCreateUploadSessionRequestBody body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.createUploadSession(this.client.getEndpoint(), groupId, eventId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Invoke action createUploadSession.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return uploadSession.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MicrosoftGraphUploadSessionInner>> createUploadSessionWithResponseAsync(
        String groupId,
        String eventId,
        GroupsCalendarViewAttachmentsCreateUploadSessionRequestBody body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createUploadSession(this.client.getEndpoint(), groupId, eventId, body, accept, context);
    }

    /**
     * Invoke action createUploadSession.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return uploadSession.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphUploadSessionInner> createUploadSessionAsync(
        String groupId, String eventId, GroupsCalendarViewAttachmentsCreateUploadSessionRequestBody body) {
        return createUploadSessionWithResponseAsync(groupId, eventId, body)
            .flatMap(
                (Response<MicrosoftGraphUploadSessionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Invoke action createUploadSession.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return uploadSession.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MicrosoftGraphUploadSessionInner createUploadSession(
        String groupId, String eventId, GroupsCalendarViewAttachmentsCreateUploadSessionRequestBody body) {
        return createUploadSessionAsync(groupId, eventId, body).block();
    }

    /**
     * Invoke action createUploadSession.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return uploadSession.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MicrosoftGraphUploadSessionInner> createUploadSessionWithResponse(
        String groupId,
        String eventId,
        GroupsCalendarViewAttachmentsCreateUploadSessionRequestBody body,
        Context context) {
        return createUploadSessionWithResponseAsync(groupId, eventId, body, context).block();
    }
}
