// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.resourcemanager.authorization.fluent.GroupsThreadsPostsClient;
import com.azure.resourcemanager.authorization.fluent.models.CollectionOfAttachment0;
import com.azure.resourcemanager.authorization.fluent.models.CollectionOfExtension1;
import com.azure.resourcemanager.authorization.fluent.models.CollectionOfMultiValueLegacyExtendedProperty0;
import com.azure.resourcemanager.authorization.fluent.models.CollectionOfSingleValueLegacyExtendedProperty0;
import com.azure.resourcemanager.authorization.fluent.models.GroupsThreadsPostsExpand;
import com.azure.resourcemanager.authorization.fluent.models.GroupsThreadsPostsForwardRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.GroupsThreadsPostsOrderby;
import com.azure.resourcemanager.authorization.fluent.models.GroupsThreadsPostsReplyRequestBodyInner;
import com.azure.resourcemanager.authorization.fluent.models.GroupsThreadsPostsSelect;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphAttachmentInner;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphExtensionInner;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphMultiValueLegacyExtendedPropertyInner;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphPostInner;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphSingleValueLegacyExtendedPropertyInner;
import com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GroupsThreadsPostsClient. */
public final class GroupsThreadsPostsClientImpl implements GroupsThreadsPostsClient {
    private final ClientLogger logger = new ClientLogger(GroupsThreadsPostsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final GroupsThreadsPostsService service;

    /** The service client containing this operation class. */
    private final MicrosoftGraphClientImpl client;

    /**
     * Initializes an instance of GroupsThreadsPostsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    GroupsThreadsPostsClientImpl(MicrosoftGraphClientImpl client) {
        this.service =
            RestProxy.create(GroupsThreadsPostsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftGraphClientGroupsThreadsPosts to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftGraphClient")
    private interface GroupsThreadsPostsService {
        @Headers({"Content-Type: application/json"})
        @Get("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/attachments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<CollectionOfAttachment0>> listAttachments(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @QueryParam("$top") Integer top,
            @QueryParam("$skip") Integer skip,
            @QueryParam("$search") String search,
            @QueryParam("$filter") String filter,
            @QueryParam("$count") Boolean count,
            @QueryParam("$orderby") String orderby,
            @QueryParam("$select") String select,
            @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/attachments")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<MicrosoftGraphAttachmentInner>> createAttachments(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @BodyParam("application/json") MicrosoftGraphAttachmentInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/attachments/{attachment-id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<MicrosoftGraphAttachmentInner>> getAttachments(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @PathParam("attachment-id") String attachmentId,
            @QueryParam("$select") String select,
            @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/attachments/{attachment-id}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> updateAttachments(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @PathParam("attachment-id") String attachmentId,
            @BodyParam("application/json") MicrosoftGraphAttachmentInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/attachments/{attachment-id}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> deleteAttachments(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @PathParam("attachment-id") String attachmentId,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/extensions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<CollectionOfExtension1>> listExtensions(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @QueryParam("$top") Integer top,
            @QueryParam("$skip") Integer skip,
            @QueryParam("$search") String search,
            @QueryParam("$filter") String filter,
            @QueryParam("$count") Boolean count,
            @QueryParam("$orderby") String orderby,
            @QueryParam("$select") String select,
            @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/extensions")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<MicrosoftGraphExtensionInner>> createExtensions(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @BodyParam("application/json") MicrosoftGraphExtensionInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/extensions/{extension-id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<MicrosoftGraphExtensionInner>> getExtensions(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @PathParam("extension-id") String extensionId,
            @QueryParam("$select") String select,
            @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/extensions/{extension-id}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> updateExtensions(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @PathParam("extension-id") String extensionId,
            @BodyParam("application/json") MicrosoftGraphExtensionInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/extensions/{extension-id}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> deleteExtensions(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @PathParam("extension-id") String extensionId,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/inReplyTo")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<MicrosoftGraphPostInner>> getInReplyTo(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @QueryParam("$select") String select,
            @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/inReplyTo")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> updateInReplyTo(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @BodyParam("application/json") MicrosoftGraphPostInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/inReplyTo")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> deleteInReplyTo(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/microsoft.graph.forward")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> forward(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @BodyParam("application/json") GroupsThreadsPostsForwardRequestBody body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/microsoft.graph.reply")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> reply(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @BodyParam("application/json") GroupsThreadsPostsReplyRequestBodyInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/multiValueExtendedProperties")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<CollectionOfMultiValueLegacyExtendedProperty0>> listMultiValueExtendedProperties(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @QueryParam("$top") Integer top,
            @QueryParam("$skip") Integer skip,
            @QueryParam("$search") String search,
            @QueryParam("$filter") String filter,
            @QueryParam("$count") Boolean count,
            @QueryParam("$orderby") String orderby,
            @QueryParam("$select") String select,
            @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/multiValueExtendedProperties")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<MicrosoftGraphMultiValueLegacyExtendedPropertyInner>> createMultiValueExtendedProperties(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @BodyParam("application/json") MicrosoftGraphMultiValueLegacyExtendedPropertyInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/multiValueExtendedProperties"
                + "/{multiValueLegacyExtendedProperty-id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<MicrosoftGraphMultiValueLegacyExtendedPropertyInner>> getMultiValueExtendedProperties(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @PathParam("multiValueLegacyExtendedProperty-id") String multiValueLegacyExtendedPropertyId,
            @QueryParam("$select") String select,
            @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/multiValueExtendedProperties"
                + "/{multiValueLegacyExtendedProperty-id}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> updateMultiValueExtendedProperties(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @PathParam("multiValueLegacyExtendedProperty-id") String multiValueLegacyExtendedPropertyId,
            @BodyParam("application/json") MicrosoftGraphMultiValueLegacyExtendedPropertyInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/multiValueExtendedProperties"
                + "/{multiValueLegacyExtendedProperty-id}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> deleteMultiValueExtendedProperties(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @PathParam("multiValueLegacyExtendedProperty-id") String multiValueLegacyExtendedPropertyId,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/singleValueExtendedProperties")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<CollectionOfSingleValueLegacyExtendedProperty0>> listSingleValueExtendedProperties(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @QueryParam("$top") Integer top,
            @QueryParam("$skip") Integer skip,
            @QueryParam("$search") String search,
            @QueryParam("$filter") String filter,
            @QueryParam("$count") Boolean count,
            @QueryParam("$orderby") String orderby,
            @QueryParam("$select") String select,
            @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/singleValueExtendedProperties")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<MicrosoftGraphSingleValueLegacyExtendedPropertyInner>> createSingleValueExtendedProperties(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @BodyParam("application/json") MicrosoftGraphSingleValueLegacyExtendedPropertyInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/singleValueExtendedProperties"
                + "/{singleValueLegacyExtendedProperty-id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<MicrosoftGraphSingleValueLegacyExtendedPropertyInner>> getSingleValueExtendedProperties(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @PathParam("singleValueLegacyExtendedProperty-id") String singleValueLegacyExtendedPropertyId,
            @QueryParam("$select") String select,
            @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/singleValueExtendedProperties"
                + "/{singleValueLegacyExtendedProperty-id}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> updateSingleValueExtendedProperties(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @PathParam("singleValueLegacyExtendedProperty-id") String singleValueLegacyExtendedPropertyId,
            @BodyParam("application/json") MicrosoftGraphSingleValueLegacyExtendedPropertyInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/groups/{group-id}/threads/{conversationThread-id}/posts/{post-id}/singleValueExtendedProperties"
                + "/{singleValueLegacyExtendedProperty-id}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<Void>> deleteSingleValueExtendedProperties(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("conversationThread-id") String conversationThreadId,
            @PathParam("post-id") String postId,
            @PathParam("singleValueLegacyExtendedProperty-id") String singleValueLegacyExtendedPropertyId,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<CollectionOfAttachment0>> listMore(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<CollectionOfExtension1>> listExtensionsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<CollectionOfMultiValueLegacyExtendedProperty0>> listMultiValueExtendedPropertiesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<CollectionOfSingleValueLegacyExtendedProperty0>> listSingleValueExtendedPropertiesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);
    }

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphAttachmentInner>> listAttachmentsSinglePageAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        String orderbyConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(orderby, CollectionFormat.CSV);
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listAttachments(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            top,
                            skip,
                            search,
                            filter,
                            count,
                            orderbyConverted,
                            selectConverted,
                            expandConverted,
                            accept,
                            context))
            .<PagedResponse<MicrosoftGraphAttachmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphAttachmentInner>> listAttachmentsSinglePageAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        String orderbyConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(orderby, CollectionFormat.CSV);
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        context = this.client.mergeContext(context);
        return service
            .listAttachments(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                top,
                skip,
                search,
                filter,
                count,
                orderbyConverted,
                selectConverted,
                expandConverted,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<MicrosoftGraphAttachmentInner> listAttachmentsAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand) {
        return new PagedFlux<>(
            () ->
                listAttachmentsSinglePageAsync(
                    groupId, conversationThreadId, postId, top, skip, search, filter, count, orderby, select, expand),
            nextLink -> listMoreSinglePageAsync(nextLink));
    }

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<MicrosoftGraphAttachmentInner> listAttachmentsAsync(
        String groupId, String conversationThreadId, String postId) {
        final Integer top = null;
        final Integer skip = null;
        final String search = null;
        final String filter = null;
        final Boolean count = null;
        final List<GroupsThreadsPostsOrderby> orderby = null;
        final List<GroupsThreadsPostsSelect> select = null;
        final List<String> expand = null;
        return new PagedFlux<>(
            () ->
                listAttachmentsSinglePageAsync(
                    groupId, conversationThreadId, postId, top, skip, search, filter, count, orderby, select, expand),
            nextLink -> listMoreSinglePageAsync(nextLink));
    }

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MicrosoftGraphAttachmentInner> listAttachmentsAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand,
        Context context) {
        return new PagedFlux<>(
            () ->
                listAttachmentsSinglePageAsync(
                    groupId,
                    conversationThreadId,
                    postId,
                    top,
                    skip,
                    search,
                    filter,
                    count,
                    orderby,
                    select,
                    expand,
                    context),
            nextLink -> listMoreSinglePageAsync(nextLink, context));
    }

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MicrosoftGraphAttachmentInner> listAttachments(
        String groupId, String conversationThreadId, String postId) {
        final Integer top = null;
        final Integer skip = null;
        final String search = null;
        final String filter = null;
        final Boolean count = null;
        final List<GroupsThreadsPostsOrderby> orderby = null;
        final List<GroupsThreadsPostsSelect> select = null;
        final List<String> expand = null;
        return new PagedIterable<>(
            listAttachmentsAsync(
                groupId, conversationThreadId, postId, top, skip, search, filter, count, orderby, select, expand));
    }

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MicrosoftGraphAttachmentInner> listAttachments(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand,
        Context context) {
        return new PagedIterable<>(
            listAttachmentsAsync(
                groupId,
                conversationThreadId,
                postId,
                top,
                skip,
                search,
                filter,
                count,
                orderby,
                select,
                expand,
                context));
    }

    /**
     * Create new navigation property to attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MicrosoftGraphAttachmentInner>> createAttachmentsWithResponseAsync(
        String groupId, String conversationThreadId, String postId, MicrosoftGraphAttachmentInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createAttachments(
                            this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create new navigation property to attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MicrosoftGraphAttachmentInner>> createAttachmentsWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphAttachmentInner body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createAttachments(this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context);
    }

    /**
     * Create new navigation property to attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphAttachmentInner> createAttachmentsAsync(
        String groupId, String conversationThreadId, String postId, MicrosoftGraphAttachmentInner body) {
        return createAttachmentsWithResponseAsync(groupId, conversationThreadId, postId, body)
            .flatMap(
                (Response<MicrosoftGraphAttachmentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create new navigation property to attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MicrosoftGraphAttachmentInner createAttachments(
        String groupId, String conversationThreadId, String postId, MicrosoftGraphAttachmentInner body) {
        return createAttachmentsAsync(groupId, conversationThreadId, postId, body).block();
    }

    /**
     * Create new navigation property to attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MicrosoftGraphAttachmentInner> createAttachmentsWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphAttachmentInner body,
        Context context) {
        return createAttachmentsWithResponseAsync(groupId, conversationThreadId, postId, body, context).block();
    }

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MicrosoftGraphAttachmentInner>> getAttachmentsWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (attachmentId == null) {
            return Mono.error(new IllegalArgumentException("Parameter attachmentId is required and cannot be null."));
        }
        final String accept = "application/json";
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getAttachments(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            attachmentId,
                            selectConverted,
                            expandConverted,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MicrosoftGraphAttachmentInner>> getAttachmentsWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (attachmentId == null) {
            return Mono.error(new IllegalArgumentException("Parameter attachmentId is required and cannot be null."));
        }
        final String accept = "application/json";
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        context = this.client.mergeContext(context);
        return service
            .getAttachments(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                attachmentId,
                selectConverted,
                expandConverted,
                accept,
                context);
    }

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphAttachmentInner> getAttachmentsAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand) {
        return getAttachmentsWithResponseAsync(groupId, conversationThreadId, postId, attachmentId, select, expand)
            .flatMap(
                (Response<MicrosoftGraphAttachmentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphAttachmentInner> getAttachmentsAsync(
        String groupId, String conversationThreadId, String postId, String attachmentId) {
        final List<GroupsThreadsPostsSelect> select = null;
        final List<String> expand = null;
        return getAttachmentsWithResponseAsync(groupId, conversationThreadId, postId, attachmentId, select, expand)
            .flatMap(
                (Response<MicrosoftGraphAttachmentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MicrosoftGraphAttachmentInner getAttachments(
        String groupId, String conversationThreadId, String postId, String attachmentId) {
        final List<GroupsThreadsPostsSelect> select = null;
        final List<String> expand = null;
        return getAttachmentsAsync(groupId, conversationThreadId, postId, attachmentId, select, expand).block();
    }

    /**
     * Get attachments from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attachments from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MicrosoftGraphAttachmentInner> getAttachmentsWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand,
        Context context) {
        return getAttachmentsWithResponseAsync(
                groupId, conversationThreadId, postId, attachmentId, select, expand, context)
            .block();
    }

    /**
     * Update the navigation property attachments in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateAttachmentsWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        MicrosoftGraphAttachmentInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (attachmentId == null) {
            return Mono.error(new IllegalArgumentException("Parameter attachmentId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateAttachments(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            attachmentId,
                            body,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update the navigation property attachments in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> updateAttachmentsWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        MicrosoftGraphAttachmentInner body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (attachmentId == null) {
            return Mono.error(new IllegalArgumentException("Parameter attachmentId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateAttachments(
                this.client.getEndpoint(), groupId, conversationThreadId, postId, attachmentId, body, accept, context);
    }

    /**
     * Update the navigation property attachments in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateAttachmentsAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        MicrosoftGraphAttachmentInner body) {
        return updateAttachmentsWithResponseAsync(groupId, conversationThreadId, postId, attachmentId, body)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Update the navigation property attachments in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateAttachments(
        String groupId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        MicrosoftGraphAttachmentInner body) {
        updateAttachmentsAsync(groupId, conversationThreadId, postId, attachmentId, body).block();
    }

    /**
     * Update the navigation property attachments in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateAttachmentsWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        MicrosoftGraphAttachmentInner body,
        Context context) {
        return updateAttachmentsWithResponseAsync(groupId, conversationThreadId, postId, attachmentId, body, context)
            .block();
    }

    /**
     * Delete navigation property attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteAttachmentsWithResponseAsync(
        String groupId, String conversationThreadId, String postId, String attachmentId, String ifMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (attachmentId == null) {
            return Mono.error(new IllegalArgumentException("Parameter attachmentId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteAttachments(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            attachmentId,
                            ifMatch,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete navigation property attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteAttachmentsWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        String ifMatch,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (attachmentId == null) {
            return Mono.error(new IllegalArgumentException("Parameter attachmentId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deleteAttachments(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                attachmentId,
                ifMatch,
                accept,
                context);
    }

    /**
     * Delete navigation property attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAttachmentsAsync(
        String groupId, String conversationThreadId, String postId, String attachmentId, String ifMatch) {
        return deleteAttachmentsWithResponseAsync(groupId, conversationThreadId, postId, attachmentId, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete navigation property attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAttachmentsAsync(
        String groupId, String conversationThreadId, String postId, String attachmentId) {
        final String ifMatch = null;
        return deleteAttachmentsWithResponseAsync(groupId, conversationThreadId, postId, attachmentId, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete navigation property attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAttachments(String groupId, String conversationThreadId, String postId, String attachmentId) {
        final String ifMatch = null;
        deleteAttachmentsAsync(groupId, conversationThreadId, postId, attachmentId, ifMatch).block();
    }

    /**
     * Delete navigation property attachments for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param attachmentId key: id of attachment.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteAttachmentsWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        String attachmentId,
        String ifMatch,
        Context context) {
        return deleteAttachmentsWithResponseAsync(groupId, conversationThreadId, postId, attachmentId, ifMatch, context)
            .block();
    }

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphExtensionInner>> listExtensionsSinglePageAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<String> select,
        List<String> expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        String orderbyConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(orderby, CollectionFormat.CSV);
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listExtensions(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            top,
                            skip,
                            search,
                            filter,
                            count,
                            orderbyConverted,
                            selectConverted,
                            expandConverted,
                            accept,
                            context))
            .<PagedResponse<MicrosoftGraphExtensionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphExtensionInner>> listExtensionsSinglePageAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<String> select,
        List<String> expand,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        String orderbyConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(orderby, CollectionFormat.CSV);
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        context = this.client.mergeContext(context);
        return service
            .listExtensions(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                top,
                skip,
                search,
                filter,
                count,
                orderbyConverted,
                selectConverted,
                expandConverted,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<MicrosoftGraphExtensionInner> listExtensionsAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<String> select,
        List<String> expand) {
        return new PagedFlux<>(
            () ->
                listExtensionsSinglePageAsync(
                    groupId, conversationThreadId, postId, top, skip, search, filter, count, orderby, select, expand),
            nextLink -> listExtensionsNextSinglePageAsync(nextLink));
    }

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<MicrosoftGraphExtensionInner> listExtensionsAsync(
        String groupId, String conversationThreadId, String postId) {
        final Integer top = null;
        final Integer skip = null;
        final String search = null;
        final String filter = null;
        final Boolean count = null;
        final List<GroupsThreadsPostsOrderby> orderby = null;
        final List<String> select = null;
        final List<String> expand = null;
        return new PagedFlux<>(
            () ->
                listExtensionsSinglePageAsync(
                    groupId, conversationThreadId, postId, top, skip, search, filter, count, orderby, select, expand),
            nextLink -> listExtensionsNextSinglePageAsync(nextLink));
    }

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MicrosoftGraphExtensionInner> listExtensionsAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<String> select,
        List<String> expand,
        Context context) {
        return new PagedFlux<>(
            () ->
                listExtensionsSinglePageAsync(
                    groupId,
                    conversationThreadId,
                    postId,
                    top,
                    skip,
                    search,
                    filter,
                    count,
                    orderby,
                    select,
                    expand,
                    context),
            nextLink -> listExtensionsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MicrosoftGraphExtensionInner> listExtensions(
        String groupId, String conversationThreadId, String postId) {
        final Integer top = null;
        final Integer skip = null;
        final String search = null;
        final String filter = null;
        final Boolean count = null;
        final List<GroupsThreadsPostsOrderby> orderby = null;
        final List<String> select = null;
        final List<String> expand = null;
        return new PagedIterable<>(
            listExtensionsAsync(
                groupId, conversationThreadId, postId, top, skip, search, filter, count, orderby, select, expand));
    }

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MicrosoftGraphExtensionInner> listExtensions(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<String> select,
        List<String> expand,
        Context context) {
        return new PagedIterable<>(
            listExtensionsAsync(
                groupId,
                conversationThreadId,
                postId,
                top,
                skip,
                search,
                filter,
                count,
                orderby,
                select,
                expand,
                context));
    }

    /**
     * Create new navigation property to extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MicrosoftGraphExtensionInner>> createExtensionsWithResponseAsync(
        String groupId, String conversationThreadId, String postId, MicrosoftGraphExtensionInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createExtensions(
                            this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create new navigation property to extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MicrosoftGraphExtensionInner>> createExtensionsWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphExtensionInner body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createExtensions(this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context);
    }

    /**
     * Create new navigation property to extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphExtensionInner> createExtensionsAsync(
        String groupId, String conversationThreadId, String postId, MicrosoftGraphExtensionInner body) {
        return createExtensionsWithResponseAsync(groupId, conversationThreadId, postId, body)
            .flatMap(
                (Response<MicrosoftGraphExtensionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create new navigation property to extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MicrosoftGraphExtensionInner createExtensions(
        String groupId, String conversationThreadId, String postId, MicrosoftGraphExtensionInner body) {
        return createExtensionsAsync(groupId, conversationThreadId, postId, body).block();
    }

    /**
     * Create new navigation property to extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MicrosoftGraphExtensionInner> createExtensionsWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphExtensionInner body,
        Context context) {
        return createExtensionsWithResponseAsync(groupId, conversationThreadId, postId, body, context).block();
    }

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MicrosoftGraphExtensionInner>> getExtensionsWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String extensionId,
        List<String> select,
        List<String> expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (extensionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter extensionId is required and cannot be null."));
        }
        final String accept = "application/json";
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getExtensions(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            extensionId,
                            selectConverted,
                            expandConverted,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MicrosoftGraphExtensionInner>> getExtensionsWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String extensionId,
        List<String> select,
        List<String> expand,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (extensionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter extensionId is required and cannot be null."));
        }
        final String accept = "application/json";
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        context = this.client.mergeContext(context);
        return service
            .getExtensions(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                extensionId,
                selectConverted,
                expandConverted,
                accept,
                context);
    }

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphExtensionInner> getExtensionsAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String extensionId,
        List<String> select,
        List<String> expand) {
        return getExtensionsWithResponseAsync(groupId, conversationThreadId, postId, extensionId, select, expand)
            .flatMap(
                (Response<MicrosoftGraphExtensionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphExtensionInner> getExtensionsAsync(
        String groupId, String conversationThreadId, String postId, String extensionId) {
        final List<String> select = null;
        final List<String> expand = null;
        return getExtensionsWithResponseAsync(groupId, conversationThreadId, postId, extensionId, select, expand)
            .flatMap(
                (Response<MicrosoftGraphExtensionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MicrosoftGraphExtensionInner getExtensions(
        String groupId, String conversationThreadId, String postId, String extensionId) {
        final List<String> select = null;
        final List<String> expand = null;
        return getExtensionsAsync(groupId, conversationThreadId, postId, extensionId, select, expand).block();
    }

    /**
     * Get extensions from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensions from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MicrosoftGraphExtensionInner> getExtensionsWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        String extensionId,
        List<String> select,
        List<String> expand,
        Context context) {
        return getExtensionsWithResponseAsync(
                groupId, conversationThreadId, postId, extensionId, select, expand, context)
            .block();
    }

    /**
     * Update the navigation property extensions in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateExtensionsWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String extensionId,
        MicrosoftGraphExtensionInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (extensionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter extensionId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateExtensions(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            extensionId,
                            body,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update the navigation property extensions in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> updateExtensionsWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String extensionId,
        MicrosoftGraphExtensionInner body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (extensionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter extensionId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateExtensions(
                this.client.getEndpoint(), groupId, conversationThreadId, postId, extensionId, body, accept, context);
    }

    /**
     * Update the navigation property extensions in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateExtensionsAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String extensionId,
        MicrosoftGraphExtensionInner body) {
        return updateExtensionsWithResponseAsync(groupId, conversationThreadId, postId, extensionId, body)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Update the navigation property extensions in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateExtensions(
        String groupId,
        String conversationThreadId,
        String postId,
        String extensionId,
        MicrosoftGraphExtensionInner body) {
        updateExtensionsAsync(groupId, conversationThreadId, postId, extensionId, body).block();
    }

    /**
     * Update the navigation property extensions in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateExtensionsWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        String extensionId,
        MicrosoftGraphExtensionInner body,
        Context context) {
        return updateExtensionsWithResponseAsync(groupId, conversationThreadId, postId, extensionId, body, context)
            .block();
    }

    /**
     * Delete navigation property extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteExtensionsWithResponseAsync(
        String groupId, String conversationThreadId, String postId, String extensionId, String ifMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (extensionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter extensionId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteExtensions(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            extensionId,
                            ifMatch,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete navigation property extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteExtensionsWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String extensionId,
        String ifMatch,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (extensionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter extensionId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deleteExtensions(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                extensionId,
                ifMatch,
                accept,
                context);
    }

    /**
     * Delete navigation property extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteExtensionsAsync(
        String groupId, String conversationThreadId, String postId, String extensionId, String ifMatch) {
        return deleteExtensionsWithResponseAsync(groupId, conversationThreadId, postId, extensionId, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete navigation property extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteExtensionsAsync(
        String groupId, String conversationThreadId, String postId, String extensionId) {
        final String ifMatch = null;
        return deleteExtensionsWithResponseAsync(groupId, conversationThreadId, postId, extensionId, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete navigation property extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteExtensions(String groupId, String conversationThreadId, String postId, String extensionId) {
        final String ifMatch = null;
        deleteExtensionsAsync(groupId, conversationThreadId, postId, extensionId, ifMatch).block();
    }

    /**
     * Delete navigation property extensions for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param extensionId key: id of extension.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteExtensionsWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        String extensionId,
        String ifMatch,
        Context context) {
        return deleteExtensionsWithResponseAsync(groupId, conversationThreadId, postId, extensionId, ifMatch, context)
            .block();
    }

    /**
     * Get inReplyTo from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return inReplyTo from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MicrosoftGraphPostInner>> getInReplyToWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        List<GroupsThreadsPostsSelect> select,
        List<GroupsThreadsPostsExpand> expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getInReplyTo(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            selectConverted,
                            expandConverted,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get inReplyTo from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return inReplyTo from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MicrosoftGraphPostInner>> getInReplyToWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        List<GroupsThreadsPostsSelect> select,
        List<GroupsThreadsPostsExpand> expand,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        context = this.client.mergeContext(context);
        return service
            .getInReplyTo(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                selectConverted,
                expandConverted,
                accept,
                context);
    }

    /**
     * Get inReplyTo from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return inReplyTo from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphPostInner> getInReplyToAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        List<GroupsThreadsPostsSelect> select,
        List<GroupsThreadsPostsExpand> expand) {
        return getInReplyToWithResponseAsync(groupId, conversationThreadId, postId, select, expand)
            .flatMap(
                (Response<MicrosoftGraphPostInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get inReplyTo from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return inReplyTo from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphPostInner> getInReplyToAsync(String groupId, String conversationThreadId, String postId) {
        final List<GroupsThreadsPostsSelect> select = null;
        final List<GroupsThreadsPostsExpand> expand = null;
        return getInReplyToWithResponseAsync(groupId, conversationThreadId, postId, select, expand)
            .flatMap(
                (Response<MicrosoftGraphPostInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get inReplyTo from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return inReplyTo from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MicrosoftGraphPostInner getInReplyTo(String groupId, String conversationThreadId, String postId) {
        final List<GroupsThreadsPostsSelect> select = null;
        final List<GroupsThreadsPostsExpand> expand = null;
        return getInReplyToAsync(groupId, conversationThreadId, postId, select, expand).block();
    }

    /**
     * Get inReplyTo from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return inReplyTo from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MicrosoftGraphPostInner> getInReplyToWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        List<GroupsThreadsPostsSelect> select,
        List<GroupsThreadsPostsExpand> expand,
        Context context) {
        return getInReplyToWithResponseAsync(groupId, conversationThreadId, postId, select, expand, context).block();
    }

    /**
     * Update the navigation property inReplyTo in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateInReplyToWithResponseAsync(
        String groupId, String conversationThreadId, String postId, MicrosoftGraphPostInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateInReplyTo(
                            this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update the navigation property inReplyTo in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> updateInReplyToWithResponseAsync(
        String groupId, String conversationThreadId, String postId, MicrosoftGraphPostInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateInReplyTo(this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context);
    }

    /**
     * Update the navigation property inReplyTo in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateInReplyToAsync(
        String groupId, String conversationThreadId, String postId, MicrosoftGraphPostInner body) {
        return updateInReplyToWithResponseAsync(groupId, conversationThreadId, postId, body)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Update the navigation property inReplyTo in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateInReplyTo(
        String groupId, String conversationThreadId, String postId, MicrosoftGraphPostInner body) {
        updateInReplyToAsync(groupId, conversationThreadId, postId, body).block();
    }

    /**
     * Update the navigation property inReplyTo in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateInReplyToWithResponse(
        String groupId, String conversationThreadId, String postId, MicrosoftGraphPostInner body, Context context) {
        return updateInReplyToWithResponseAsync(groupId, conversationThreadId, postId, body, context).block();
    }

    /**
     * Delete navigation property inReplyTo for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteInReplyToWithResponseAsync(
        String groupId, String conversationThreadId, String postId, String ifMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteInReplyTo(
                            this.client.getEndpoint(), groupId, conversationThreadId, postId, ifMatch, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete navigation property inReplyTo for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteInReplyToWithResponseAsync(
        String groupId, String conversationThreadId, String postId, String ifMatch, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deleteInReplyTo(
                this.client.getEndpoint(), groupId, conversationThreadId, postId, ifMatch, accept, context);
    }

    /**
     * Delete navigation property inReplyTo for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteInReplyToAsync(String groupId, String conversationThreadId, String postId, String ifMatch) {
        return deleteInReplyToWithResponseAsync(groupId, conversationThreadId, postId, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete navigation property inReplyTo for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteInReplyToAsync(String groupId, String conversationThreadId, String postId) {
        final String ifMatch = null;
        return deleteInReplyToWithResponseAsync(groupId, conversationThreadId, postId, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete navigation property inReplyTo for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteInReplyTo(String groupId, String conversationThreadId, String postId) {
        final String ifMatch = null;
        deleteInReplyToAsync(groupId, conversationThreadId, postId, ifMatch).block();
    }

    /**
     * Delete navigation property inReplyTo for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteInReplyToWithResponse(
        String groupId, String conversationThreadId, String postId, String ifMatch, Context context) {
        return deleteInReplyToWithResponseAsync(groupId, conversationThreadId, postId, ifMatch, context).block();
    }

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> forwardWithResponseAsync(
        String groupId, String conversationThreadId, String postId, GroupsThreadsPostsForwardRequestBody body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .forward(
                            this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> forwardWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        GroupsThreadsPostsForwardRequestBody body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.forward(this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context);
    }

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> forwardAsync(
        String groupId, String conversationThreadId, String postId, GroupsThreadsPostsForwardRequestBody body) {
        return forwardWithResponseAsync(groupId, conversationThreadId, postId, body)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void forward(
        String groupId, String conversationThreadId, String postId, GroupsThreadsPostsForwardRequestBody body) {
        forwardAsync(groupId, conversationThreadId, postId, body).block();
    }

    /**
     * Invoke action forward.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> forwardWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        GroupsThreadsPostsForwardRequestBody body,
        Context context) {
        return forwardWithResponseAsync(groupId, conversationThreadId, postId, body, context).block();
    }

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> replyWithResponseAsync(
        String groupId, String conversationThreadId, String postId, GroupsThreadsPostsReplyRequestBodyInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .reply(this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> replyWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        GroupsThreadsPostsReplyRequestBodyInner body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.reply(this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context);
    }

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> replyAsync(
        String groupId, String conversationThreadId, String postId, GroupsThreadsPostsReplyRequestBodyInner body) {
        return replyWithResponseAsync(groupId, conversationThreadId, postId, body)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reply(
        String groupId, String conversationThreadId, String postId, GroupsThreadsPostsReplyRequestBodyInner body) {
        replyAsync(groupId, conversationThreadId, postId, body).block();
    }

    /**
     * Invoke action reply.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> replyWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        GroupsThreadsPostsReplyRequestBodyInner body,
        Context context) {
        return replyWithResponseAsync(groupId, conversationThreadId, postId, body, context).block();
    }

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphMultiValueLegacyExtendedPropertyInner>>
        listMultiValueExtendedPropertiesSinglePageAsync(
            String groupId,
            String conversationThreadId,
            String postId,
            Integer top,
            Integer skip,
            String search,
            String filter,
            Boolean count,
            List<GroupsThreadsPostsOrderby> orderby,
            List<GroupsThreadsPostsSelect> select,
            List<String> expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        String orderbyConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(orderby, CollectionFormat.CSV);
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listMultiValueExtendedProperties(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            top,
                            skip,
                            search,
                            filter,
                            count,
                            orderbyConverted,
                            selectConverted,
                            expandConverted,
                            accept,
                            context))
            .<PagedResponse<MicrosoftGraphMultiValueLegacyExtendedPropertyInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphMultiValueLegacyExtendedPropertyInner>>
        listMultiValueExtendedPropertiesSinglePageAsync(
            String groupId,
            String conversationThreadId,
            String postId,
            Integer top,
            Integer skip,
            String search,
            String filter,
            Boolean count,
            List<GroupsThreadsPostsOrderby> orderby,
            List<GroupsThreadsPostsSelect> select,
            List<String> expand,
            Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        String orderbyConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(orderby, CollectionFormat.CSV);
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        context = this.client.mergeContext(context);
        return service
            .listMultiValueExtendedProperties(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                top,
                skip,
                search,
                filter,
                count,
                orderbyConverted,
                selectConverted,
                expandConverted,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> listMultiValueExtendedPropertiesAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand) {
        return new PagedFlux<>(
            () ->
                listMultiValueExtendedPropertiesSinglePageAsync(
                    groupId, conversationThreadId, postId, top, skip, search, filter, count, orderby, select, expand),
            nextLink -> listMultiValueExtendedPropertiesNextSinglePageAsync(nextLink));
    }

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> listMultiValueExtendedPropertiesAsync(
        String groupId, String conversationThreadId, String postId) {
        final Integer top = null;
        final Integer skip = null;
        final String search = null;
        final String filter = null;
        final Boolean count = null;
        final List<GroupsThreadsPostsOrderby> orderby = null;
        final List<GroupsThreadsPostsSelect> select = null;
        final List<String> expand = null;
        return new PagedFlux<>(
            () ->
                listMultiValueExtendedPropertiesSinglePageAsync(
                    groupId, conversationThreadId, postId, top, skip, search, filter, count, orderby, select, expand),
            nextLink -> listMultiValueExtendedPropertiesNextSinglePageAsync(nextLink));
    }

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> listMultiValueExtendedPropertiesAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand,
        Context context) {
        return new PagedFlux<>(
            () ->
                listMultiValueExtendedPropertiesSinglePageAsync(
                    groupId,
                    conversationThreadId,
                    postId,
                    top,
                    skip,
                    search,
                    filter,
                    count,
                    orderby,
                    select,
                    expand,
                    context),
            nextLink -> listMultiValueExtendedPropertiesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> listMultiValueExtendedProperties(
        String groupId, String conversationThreadId, String postId) {
        final Integer top = null;
        final Integer skip = null;
        final String search = null;
        final String filter = null;
        final Boolean count = null;
        final List<GroupsThreadsPostsOrderby> orderby = null;
        final List<GroupsThreadsPostsSelect> select = null;
        final List<String> expand = null;
        return new PagedIterable<>(
            listMultiValueExtendedPropertiesAsync(
                groupId, conversationThreadId, postId, top, skip, search, filter, count, orderby, select, expand));
    }

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> listMultiValueExtendedProperties(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand,
        Context context) {
        return new PagedIterable<>(
            listMultiValueExtendedPropertiesAsync(
                groupId,
                conversationThreadId,
                postId,
                top,
                skip,
                search,
                filter,
                count,
                orderby,
                select,
                expand,
                context));
    }

    /**
     * Create new navigation property to multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MicrosoftGraphMultiValueLegacyExtendedPropertyInner>>
        createMultiValueExtendedPropertiesWithResponseAsync(
            String groupId,
            String conversationThreadId,
            String postId,
            MicrosoftGraphMultiValueLegacyExtendedPropertyInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createMultiValueExtendedProperties(
                            this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create new navigation property to multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MicrosoftGraphMultiValueLegacyExtendedPropertyInner>>
        createMultiValueExtendedPropertiesWithResponseAsync(
            String groupId,
            String conversationThreadId,
            String postId,
            MicrosoftGraphMultiValueLegacyExtendedPropertyInner body,
            Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createMultiValueExtendedProperties(
                this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context);
    }

    /**
     * Create new navigation property to multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> createMultiValueExtendedPropertiesAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphMultiValueLegacyExtendedPropertyInner body) {
        return createMultiValueExtendedPropertiesWithResponseAsync(groupId, conversationThreadId, postId, body)
            .flatMap(
                (Response<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create new navigation property to multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MicrosoftGraphMultiValueLegacyExtendedPropertyInner createMultiValueExtendedProperties(
        String groupId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphMultiValueLegacyExtendedPropertyInner body) {
        return createMultiValueExtendedPropertiesAsync(groupId, conversationThreadId, postId, body).block();
    }

    /**
     * Create new navigation property to multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> createMultiValueExtendedPropertiesWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphMultiValueLegacyExtendedPropertyInner body,
        Context context) {
        return createMultiValueExtendedPropertiesWithResponseAsync(groupId, conversationThreadId, postId, body, context)
            .block();
    }

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MicrosoftGraphMultiValueLegacyExtendedPropertyInner>>
        getMultiValueExtendedPropertiesWithResponseAsync(
            String groupId,
            String conversationThreadId,
            String postId,
            String multiValueLegacyExtendedPropertyId,
            List<GroupsThreadsPostsSelect> select,
            List<String> expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (multiValueLegacyExtendedPropertyId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter multiValueLegacyExtendedPropertyId is required and cannot be null."));
        }
        final String accept = "application/json";
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getMultiValueExtendedProperties(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            multiValueLegacyExtendedPropertyId,
                            selectConverted,
                            expandConverted,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MicrosoftGraphMultiValueLegacyExtendedPropertyInner>>
        getMultiValueExtendedPropertiesWithResponseAsync(
            String groupId,
            String conversationThreadId,
            String postId,
            String multiValueLegacyExtendedPropertyId,
            List<GroupsThreadsPostsSelect> select,
            List<String> expand,
            Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (multiValueLegacyExtendedPropertyId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter multiValueLegacyExtendedPropertyId is required and cannot be null."));
        }
        final String accept = "application/json";
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        context = this.client.mergeContext(context);
        return service
            .getMultiValueExtendedProperties(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                multiValueLegacyExtendedPropertyId,
                selectConverted,
                expandConverted,
                accept,
                context);
    }

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> getMultiValueExtendedPropertiesAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand) {
        return getMultiValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, multiValueLegacyExtendedPropertyId, select, expand)
            .flatMap(
                (Response<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> getMultiValueExtendedPropertiesAsync(
        String groupId, String conversationThreadId, String postId, String multiValueLegacyExtendedPropertyId) {
        final List<GroupsThreadsPostsSelect> select = null;
        final List<String> expand = null;
        return getMultiValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, multiValueLegacyExtendedPropertyId, select, expand)
            .flatMap(
                (Response<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MicrosoftGraphMultiValueLegacyExtendedPropertyInner getMultiValueExtendedProperties(
        String groupId, String conversationThreadId, String postId, String multiValueLegacyExtendedPropertyId) {
        final List<GroupsThreadsPostsSelect> select = null;
        final List<String> expand = null;
        return getMultiValueExtendedPropertiesAsync(
                groupId, conversationThreadId, postId, multiValueLegacyExtendedPropertyId, select, expand)
            .block();
    }

    /**
     * Get multiValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multiValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MicrosoftGraphMultiValueLegacyExtendedPropertyInner> getMultiValueExtendedPropertiesWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand,
        Context context) {
        return getMultiValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, multiValueLegacyExtendedPropertyId, select, expand, context)
            .block();
    }

    /**
     * Update the navigation property multiValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateMultiValueExtendedPropertiesWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        MicrosoftGraphMultiValueLegacyExtendedPropertyInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (multiValueLegacyExtendedPropertyId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter multiValueLegacyExtendedPropertyId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateMultiValueExtendedProperties(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            multiValueLegacyExtendedPropertyId,
                            body,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update the navigation property multiValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> updateMultiValueExtendedPropertiesWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        MicrosoftGraphMultiValueLegacyExtendedPropertyInner body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (multiValueLegacyExtendedPropertyId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter multiValueLegacyExtendedPropertyId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateMultiValueExtendedProperties(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                multiValueLegacyExtendedPropertyId,
                body,
                accept,
                context);
    }

    /**
     * Update the navigation property multiValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateMultiValueExtendedPropertiesAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        MicrosoftGraphMultiValueLegacyExtendedPropertyInner body) {
        return updateMultiValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, multiValueLegacyExtendedPropertyId, body)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Update the navigation property multiValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateMultiValueExtendedProperties(
        String groupId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        MicrosoftGraphMultiValueLegacyExtendedPropertyInner body) {
        updateMultiValueExtendedPropertiesAsync(
                groupId, conversationThreadId, postId, multiValueLegacyExtendedPropertyId, body)
            .block();
    }

    /**
     * Update the navigation property multiValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateMultiValueExtendedPropertiesWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        MicrosoftGraphMultiValueLegacyExtendedPropertyInner body,
        Context context) {
        return updateMultiValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, multiValueLegacyExtendedPropertyId, body, context)
            .block();
    }

    /**
     * Delete navigation property multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteMultiValueExtendedPropertiesWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        String ifMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (multiValueLegacyExtendedPropertyId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter multiValueLegacyExtendedPropertyId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteMultiValueExtendedProperties(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            multiValueLegacyExtendedPropertyId,
                            ifMatch,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete navigation property multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteMultiValueExtendedPropertiesWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        String ifMatch,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (multiValueLegacyExtendedPropertyId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter multiValueLegacyExtendedPropertyId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deleteMultiValueExtendedProperties(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                multiValueLegacyExtendedPropertyId,
                ifMatch,
                accept,
                context);
    }

    /**
     * Delete navigation property multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteMultiValueExtendedPropertiesAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        String ifMatch) {
        return deleteMultiValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, multiValueLegacyExtendedPropertyId, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete navigation property multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteMultiValueExtendedPropertiesAsync(
        String groupId, String conversationThreadId, String postId, String multiValueLegacyExtendedPropertyId) {
        final String ifMatch = null;
        return deleteMultiValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, multiValueLegacyExtendedPropertyId, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete navigation property multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteMultiValueExtendedProperties(
        String groupId, String conversationThreadId, String postId, String multiValueLegacyExtendedPropertyId) {
        final String ifMatch = null;
        deleteMultiValueExtendedPropertiesAsync(
                groupId, conversationThreadId, postId, multiValueLegacyExtendedPropertyId, ifMatch)
            .block();
    }

    /**
     * Delete navigation property multiValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteMultiValueExtendedPropertiesWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        String multiValueLegacyExtendedPropertyId,
        String ifMatch,
        Context context) {
        return deleteMultiValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, multiValueLegacyExtendedPropertyId, ifMatch, context)
            .block();
    }

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphSingleValueLegacyExtendedPropertyInner>>
        listSingleValueExtendedPropertiesSinglePageAsync(
            String groupId,
            String conversationThreadId,
            String postId,
            Integer top,
            Integer skip,
            String search,
            String filter,
            Boolean count,
            List<GroupsThreadsPostsOrderby> orderby,
            List<GroupsThreadsPostsSelect> select,
            List<String> expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        String orderbyConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(orderby, CollectionFormat.CSV);
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listSingleValueExtendedProperties(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            top,
                            skip,
                            search,
                            filter,
                            count,
                            orderbyConverted,
                            selectConverted,
                            expandConverted,
                            accept,
                            context))
            .<PagedResponse<MicrosoftGraphSingleValueLegacyExtendedPropertyInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphSingleValueLegacyExtendedPropertyInner>>
        listSingleValueExtendedPropertiesSinglePageAsync(
            String groupId,
            String conversationThreadId,
            String postId,
            Integer top,
            Integer skip,
            String search,
            String filter,
            Boolean count,
            List<GroupsThreadsPostsOrderby> orderby,
            List<GroupsThreadsPostsSelect> select,
            List<String> expand,
            Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        final String accept = "application/json";
        String orderbyConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(orderby, CollectionFormat.CSV);
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        context = this.client.mergeContext(context);
        return service
            .listSingleValueExtendedProperties(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                top,
                skip,
                search,
                filter,
                count,
                orderbyConverted,
                selectConverted,
                expandConverted,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> listSingleValueExtendedPropertiesAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand) {
        return new PagedFlux<>(
            () ->
                listSingleValueExtendedPropertiesSinglePageAsync(
                    groupId, conversationThreadId, postId, top, skip, search, filter, count, orderby, select, expand),
            nextLink -> listSingleValueExtendedPropertiesNextSinglePageAsync(nextLink));
    }

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> listSingleValueExtendedPropertiesAsync(
        String groupId, String conversationThreadId, String postId) {
        final Integer top = null;
        final Integer skip = null;
        final String search = null;
        final String filter = null;
        final Boolean count = null;
        final List<GroupsThreadsPostsOrderby> orderby = null;
        final List<GroupsThreadsPostsSelect> select = null;
        final List<String> expand = null;
        return new PagedFlux<>(
            () ->
                listSingleValueExtendedPropertiesSinglePageAsync(
                    groupId, conversationThreadId, postId, top, skip, search, filter, count, orderby, select, expand),
            nextLink -> listSingleValueExtendedPropertiesNextSinglePageAsync(nextLink));
    }

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> listSingleValueExtendedPropertiesAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand,
        Context context) {
        return new PagedFlux<>(
            () ->
                listSingleValueExtendedPropertiesSinglePageAsync(
                    groupId,
                    conversationThreadId,
                    postId,
                    top,
                    skip,
                    search,
                    filter,
                    count,
                    orderby,
                    select,
                    expand,
                    context),
            nextLink -> listSingleValueExtendedPropertiesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> listSingleValueExtendedProperties(
        String groupId, String conversationThreadId, String postId) {
        final Integer top = null;
        final Integer skip = null;
        final String search = null;
        final String filter = null;
        final Boolean count = null;
        final List<GroupsThreadsPostsOrderby> orderby = null;
        final List<GroupsThreadsPostsSelect> select = null;
        final List<String> expand = null;
        return new PagedIterable<>(
            listSingleValueExtendedPropertiesAsync(
                groupId, conversationThreadId, postId, top, skip, search, filter, count, orderby, select, expand));
    }

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param top Show only the first n items.
     * @param skip Skip the first n items.
     * @param search Search items by search phrases.
     * @param filter Filter items by property values.
     * @param count Include count of items.
     * @param orderby Order items by property values.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> listSingleValueExtendedProperties(
        String groupId,
        String conversationThreadId,
        String postId,
        Integer top,
        Integer skip,
        String search,
        String filter,
        Boolean count,
        List<GroupsThreadsPostsOrderby> orderby,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand,
        Context context) {
        return new PagedIterable<>(
            listSingleValueExtendedPropertiesAsync(
                groupId,
                conversationThreadId,
                postId,
                top,
                skip,
                search,
                filter,
                count,
                orderby,
                select,
                expand,
                context));
    }

    /**
     * Create new navigation property to singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MicrosoftGraphSingleValueLegacyExtendedPropertyInner>>
        createSingleValueExtendedPropertiesWithResponseAsync(
            String groupId,
            String conversationThreadId,
            String postId,
            MicrosoftGraphSingleValueLegacyExtendedPropertyInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createSingleValueExtendedProperties(
                            this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create new navigation property to singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MicrosoftGraphSingleValueLegacyExtendedPropertyInner>>
        createSingleValueExtendedPropertiesWithResponseAsync(
            String groupId,
            String conversationThreadId,
            String postId,
            MicrosoftGraphSingleValueLegacyExtendedPropertyInner body,
            Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createSingleValueExtendedProperties(
                this.client.getEndpoint(), groupId, conversationThreadId, postId, body, accept, context);
    }

    /**
     * Create new navigation property to singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> createSingleValueExtendedPropertiesAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphSingleValueLegacyExtendedPropertyInner body) {
        return createSingleValueExtendedPropertiesWithResponseAsync(groupId, conversationThreadId, postId, body)
            .flatMap(
                (Response<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create new navigation property to singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MicrosoftGraphSingleValueLegacyExtendedPropertyInner createSingleValueExtendedProperties(
        String groupId,
        String conversationThreadId,
        String postId,
        MicrosoftGraphSingleValueLegacyExtendedPropertyInner body) {
        return createSingleValueExtendedPropertiesAsync(groupId, conversationThreadId, postId, body).block();
    }

    /**
     * Create new navigation property to singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param body New navigation property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MicrosoftGraphSingleValueLegacyExtendedPropertyInner>
        createSingleValueExtendedPropertiesWithResponse(
            String groupId,
            String conversationThreadId,
            String postId,
            MicrosoftGraphSingleValueLegacyExtendedPropertyInner body,
            Context context) {
        return createSingleValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, body, context)
            .block();
    }

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MicrosoftGraphSingleValueLegacyExtendedPropertyInner>>
        getSingleValueExtendedPropertiesWithResponseAsync(
            String groupId,
            String conversationThreadId,
            String postId,
            String singleValueLegacyExtendedPropertyId,
            List<GroupsThreadsPostsSelect> select,
            List<String> expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (singleValueLegacyExtendedPropertyId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter singleValueLegacyExtendedPropertyId is required and cannot be null."));
        }
        final String accept = "application/json";
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getSingleValueExtendedProperties(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            singleValueLegacyExtendedPropertyId,
                            selectConverted,
                            expandConverted,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MicrosoftGraphSingleValueLegacyExtendedPropertyInner>>
        getSingleValueExtendedPropertiesWithResponseAsync(
            String groupId,
            String conversationThreadId,
            String postId,
            String singleValueLegacyExtendedPropertyId,
            List<GroupsThreadsPostsSelect> select,
            List<String> expand,
            Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (singleValueLegacyExtendedPropertyId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter singleValueLegacyExtendedPropertyId is required and cannot be null."));
        }
        final String accept = "application/json";
        String selectConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        String expandConverted =
            JacksonAdapter.createDefaultSerializerAdapter().serializeList(expand, CollectionFormat.CSV);
        context = this.client.mergeContext(context);
        return service
            .getSingleValueExtendedProperties(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                singleValueLegacyExtendedPropertyId,
                selectConverted,
                expandConverted,
                accept,
                context);
    }

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> getSingleValueExtendedPropertiesAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand) {
        return getSingleValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, singleValueLegacyExtendedPropertyId, select, expand)
            .flatMap(
                (Response<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> getSingleValueExtendedPropertiesAsync(
        String groupId, String conversationThreadId, String postId, String singleValueLegacyExtendedPropertyId) {
        final List<GroupsThreadsPostsSelect> select = null;
        final List<String> expand = null;
        return getSingleValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, singleValueLegacyExtendedPropertyId, select, expand)
            .flatMap(
                (Response<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MicrosoftGraphSingleValueLegacyExtendedPropertyInner getSingleValueExtendedProperties(
        String groupId, String conversationThreadId, String postId, String singleValueLegacyExtendedPropertyId) {
        final List<GroupsThreadsPostsSelect> select = null;
        final List<String> expand = null;
        return getSingleValueExtendedPropertiesAsync(
                groupId, conversationThreadId, postId, singleValueLegacyExtendedPropertyId, select, expand)
            .block();
    }

    /**
     * Get singleValueExtendedProperties from groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param select Select properties to be returned.
     * @param expand Expand related entities.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return singleValueExtendedProperties from groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MicrosoftGraphSingleValueLegacyExtendedPropertyInner> getSingleValueExtendedPropertiesWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        List<GroupsThreadsPostsSelect> select,
        List<String> expand,
        Context context) {
        return getSingleValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, singleValueLegacyExtendedPropertyId, select, expand, context)
            .block();
    }

    /**
     * Update the navigation property singleValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateSingleValueExtendedPropertiesWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        MicrosoftGraphSingleValueLegacyExtendedPropertyInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (singleValueLegacyExtendedPropertyId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter singleValueLegacyExtendedPropertyId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateSingleValueExtendedProperties(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            singleValueLegacyExtendedPropertyId,
                            body,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update the navigation property singleValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> updateSingleValueExtendedPropertiesWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        MicrosoftGraphSingleValueLegacyExtendedPropertyInner body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (singleValueLegacyExtendedPropertyId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter singleValueLegacyExtendedPropertyId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateSingleValueExtendedProperties(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                singleValueLegacyExtendedPropertyId,
                body,
                accept,
                context);
    }

    /**
     * Update the navigation property singleValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateSingleValueExtendedPropertiesAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        MicrosoftGraphSingleValueLegacyExtendedPropertyInner body) {
        return updateSingleValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, singleValueLegacyExtendedPropertyId, body)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Update the navigation property singleValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateSingleValueExtendedProperties(
        String groupId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        MicrosoftGraphSingleValueLegacyExtendedPropertyInner body) {
        updateSingleValueExtendedPropertiesAsync(
                groupId, conversationThreadId, postId, singleValueLegacyExtendedPropertyId, body)
            .block();
    }

    /**
     * Update the navigation property singleValueExtendedProperties in groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param body New navigation property values.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateSingleValueExtendedPropertiesWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        MicrosoftGraphSingleValueLegacyExtendedPropertyInner body,
        Context context) {
        return updateSingleValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, singleValueLegacyExtendedPropertyId, body, context)
            .block();
    }

    /**
     * Delete navigation property singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteSingleValueExtendedPropertiesWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        String ifMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (singleValueLegacyExtendedPropertyId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter singleValueLegacyExtendedPropertyId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteSingleValueExtendedProperties(
                            this.client.getEndpoint(),
                            groupId,
                            conversationThreadId,
                            postId,
                            singleValueLegacyExtendedPropertyId,
                            ifMatch,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete navigation property singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteSingleValueExtendedPropertiesWithResponseAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        String ifMatch,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (conversationThreadId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter conversationThreadId is required and cannot be null."));
        }
        if (postId == null) {
            return Mono.error(new IllegalArgumentException("Parameter postId is required and cannot be null."));
        }
        if (singleValueLegacyExtendedPropertyId == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter singleValueLegacyExtendedPropertyId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deleteSingleValueExtendedProperties(
                this.client.getEndpoint(),
                groupId,
                conversationThreadId,
                postId,
                singleValueLegacyExtendedPropertyId,
                ifMatch,
                accept,
                context);
    }

    /**
     * Delete navigation property singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param ifMatch ETag.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteSingleValueExtendedPropertiesAsync(
        String groupId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        String ifMatch) {
        return deleteSingleValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, singleValueLegacyExtendedPropertyId, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete navigation property singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteSingleValueExtendedPropertiesAsync(
        String groupId, String conversationThreadId, String postId, String singleValueLegacyExtendedPropertyId) {
        final String ifMatch = null;
        return deleteSingleValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, singleValueLegacyExtendedPropertyId, ifMatch)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete navigation property singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteSingleValueExtendedProperties(
        String groupId, String conversationThreadId, String postId, String singleValueLegacyExtendedPropertyId) {
        final String ifMatch = null;
        deleteSingleValueExtendedPropertiesAsync(
                groupId, conversationThreadId, postId, singleValueLegacyExtendedPropertyId, ifMatch)
            .block();
    }

    /**
     * Delete navigation property singleValueExtendedProperties for groups.
     *
     * @param groupId key: id of group.
     * @param conversationThreadId key: id of conversationThread.
     * @param postId key: id of post.
     * @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty.
     * @param ifMatch ETag.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteSingleValueExtendedPropertiesWithResponse(
        String groupId,
        String conversationThreadId,
        String postId,
        String singleValueLegacyExtendedPropertyId,
        String ifMatch,
        Context context) {
        return deleteSingleValueExtendedPropertiesWithResponseAsync(
                groupId, conversationThreadId, postId, singleValueLegacyExtendedPropertyId, ifMatch, context)
            .block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of attachment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphAttachmentInner>> listMoreSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.listMore(nextLink, context))
            .<PagedResponse<MicrosoftGraphAttachmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of attachment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphAttachmentInner>> listMoreSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service
            .listMore(nextLink, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of extension.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphExtensionInner>> listExtensionsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.listExtensionsNext(nextLink, context))
            .<PagedResponse<MicrosoftGraphExtensionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of extension.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphExtensionInner>> listExtensionsNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service
            .listExtensionsNext(nextLink, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of multiValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphMultiValueLegacyExtendedPropertyInner>>
        listMultiValueExtendedPropertiesNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.listMultiValueExtendedPropertiesNext(nextLink, context))
            .<PagedResponse<MicrosoftGraphMultiValueLegacyExtendedPropertyInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of multiValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphMultiValueLegacyExtendedPropertyInner>>
        listMultiValueExtendedPropertiesNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service
            .listMultiValueExtendedPropertiesNext(nextLink, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of singleValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphSingleValueLegacyExtendedPropertyInner>>
        listSingleValueExtendedPropertiesNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.listSingleValueExtendedPropertiesNext(nextLink, context))
            .<PagedResponse<MicrosoftGraphSingleValueLegacyExtendedPropertyInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of singleValueLegacyExtendedProperty.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MicrosoftGraphSingleValueLegacyExtendedPropertyInner>>
        listSingleValueExtendedPropertiesNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service
            .listSingleValueExtendedPropertiesNext(nextLink, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().odataNextLink(),
                        null));
    }
}
