// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.fluent.GroupsCalendarViewCalendarsClient;
import com.azure.resourcemanager.authorization.fluent.models.GroupsCalendarViewCalendarGetScheduleRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphCalendarRoleType;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphScheduleInformationInner;
import com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GroupsCalendarViewCalendarsClient. */
public final class GroupsCalendarViewCalendarsClientImpl implements GroupsCalendarViewCalendarsClient {
    private final ClientLogger logger = new ClientLogger(GroupsCalendarViewCalendarsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final GroupsCalendarViewCalendarsService service;

    /** The service client containing this operation class. */
    private final MicrosoftGraphClientImpl client;

    /**
     * Initializes an instance of GroupsCalendarViewCalendarsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    GroupsCalendarViewCalendarsClientImpl(MicrosoftGraphClientImpl client) {
        this.service =
            RestProxy
                .create(
                    GroupsCalendarViewCalendarsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftGraphClientGroupsCalendarViewCalendars to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftGraphClient")
    private interface GroupsCalendarViewCalendarsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/groups/{group-id}/calendarView/{event-id}/calendar"
                + "/microsoft.graph.allowedCalendarSharingRoles(User='{User}')")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<List<MicrosoftGraphCalendarRoleType>>> allowedCalendarSharingRoles(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("event-id") String eventId,
            @PathParam("User") String user,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/groups/{group-id}/calendarView/{event-id}/calendar/microsoft.graph.getSchedule")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(OdataErrorMainException.class)
        Mono<Response<List<MicrosoftGraphScheduleInformationInner>>> getSchedule(
            @HostParam("$host") String endpoint,
            @PathParam("group-id") String groupId,
            @PathParam("event-id") String eventId,
            @BodyParam("application/json") GroupsCalendarViewCalendarGetScheduleRequestBody body,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Invoke function allowedCalendarSharingRoles.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param user The user parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of MicrosoftGraphCalendarRoleType.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<MicrosoftGraphCalendarRoleType>>> allowedCalendarSharingRolesWithResponseAsync(
        String groupId, String eventId, String user) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .allowedCalendarSharingRoles(
                            this.client.getEndpoint(), groupId, eventId, user, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Invoke function allowedCalendarSharingRoles.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param user The user parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of MicrosoftGraphCalendarRoleType.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<MicrosoftGraphCalendarRoleType>>> allowedCalendarSharingRolesWithResponseAsync(
        String groupId, String eventId, String user, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.allowedCalendarSharingRoles(this.client.getEndpoint(), groupId, eventId, user, accept, context);
    }

    /**
     * Invoke function allowedCalendarSharingRoles.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param user The user parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of MicrosoftGraphCalendarRoleType.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<MicrosoftGraphCalendarRoleType>> allowedCalendarSharingRolesAsync(
        String groupId, String eventId, String user) {
        return allowedCalendarSharingRolesWithResponseAsync(groupId, eventId, user)
            .flatMap(
                (Response<List<MicrosoftGraphCalendarRoleType>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Invoke function allowedCalendarSharingRoles.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param user The user parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of MicrosoftGraphCalendarRoleType.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<MicrosoftGraphCalendarRoleType> allowedCalendarSharingRoles(
        String groupId, String eventId, String user) {
        return allowedCalendarSharingRolesAsync(groupId, eventId, user).block();
    }

    /**
     * Invoke function allowedCalendarSharingRoles.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param user The user parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of MicrosoftGraphCalendarRoleType.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<MicrosoftGraphCalendarRoleType>> allowedCalendarSharingRolesWithResponse(
        String groupId, String eventId, String user, Context context) {
        return allowedCalendarSharingRolesWithResponseAsync(groupId, eventId, user, context).block();
    }

    /**
     * Invoke action getSchedule.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<MicrosoftGraphScheduleInformationInner>>> getScheduleWithResponseAsync(
        String groupId, String eventId, GroupsCalendarViewCalendarGetScheduleRequestBody body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getSchedule(this.client.getEndpoint(), groupId, eventId, body, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Invoke action getSchedule.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<MicrosoftGraphScheduleInformationInner>>> getScheduleWithResponseAsync(
        String groupId, String eventId, GroupsCalendarViewCalendarGetScheduleRequestBody body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (groupId == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupId is required and cannot be null."));
        }
        if (eventId == null) {
            return Mono.error(new IllegalArgumentException("Parameter eventId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getSchedule(this.client.getEndpoint(), groupId, eventId, body, accept, context);
    }

    /**
     * Invoke action getSchedule.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<MicrosoftGraphScheduleInformationInner>> getScheduleAsync(
        String groupId, String eventId, GroupsCalendarViewCalendarGetScheduleRequestBody body) {
        return getScheduleWithResponseAsync(groupId, eventId, body)
            .flatMap(
                (Response<List<MicrosoftGraphScheduleInformationInner>> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Invoke action getSchedule.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<MicrosoftGraphScheduleInformationInner> getSchedule(
        String groupId, String eventId, GroupsCalendarViewCalendarGetScheduleRequestBody body) {
        return getScheduleAsync(groupId, eventId, body).block();
    }

    /**
     * Invoke action getSchedule.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws OdataErrorMainException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of microsoft.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<MicrosoftGraphScheduleInformationInner>> getScheduleWithResponse(
        String groupId, String eventId, GroupsCalendarViewCalendarGetScheduleRequestBody body, Context context) {
        return getScheduleWithResponseAsync(groupId, eventId, body, context).block();
    }
}
