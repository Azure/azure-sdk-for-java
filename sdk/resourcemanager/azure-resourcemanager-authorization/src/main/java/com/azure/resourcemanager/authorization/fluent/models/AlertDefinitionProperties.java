// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.resourcemanager.authorization.models.SeverityLevel;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Alert definition properties. */
@Immutable
public final class AlertDefinitionProperties {
    /*
     * The alert display name.
     */
    @JsonProperty(value = "displayName", access = JsonProperty.Access.WRITE_ONLY)
    private String displayName;

    /*
     * The alert scope.
     */
    @JsonProperty(value = "scope", access = JsonProperty.Access.WRITE_ONLY)
    private String scope;

    /*
     * The alert description.
     */
    @JsonProperty(value = "description", access = JsonProperty.Access.WRITE_ONLY)
    private String description;

    /*
     * Severity level of the alert.
     */
    @JsonProperty(value = "severityLevel", access = JsonProperty.Access.WRITE_ONLY)
    private SeverityLevel severityLevel;

    /*
     * Security impact of the alert.
     */
    @JsonProperty(value = "securityImpact", access = JsonProperty.Access.WRITE_ONLY)
    private String securityImpact;

    /*
     * The methods to mitigate the alert.
     */
    @JsonProperty(value = "mitigationSteps", access = JsonProperty.Access.WRITE_ONLY)
    private String mitigationSteps;

    /*
     * The ways to prevent the alert.
     */
    @JsonProperty(value = "howToPrevent", access = JsonProperty.Access.WRITE_ONLY)
    private String howToPrevent;

    /*
     * True if the alert can be remediated; false, otherwise.
     */
    @JsonProperty(value = "isRemediatable", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isRemediatable;

    /*
     * True if the alert configuration can be configured; false, otherwise.
     */
    @JsonProperty(value = "isConfigurable", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isConfigurable;

    /** Creates an instance of AlertDefinitionProperties class. */
    public AlertDefinitionProperties() {
    }

    /**
     * Get the displayName property: The alert display name.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the scope property: The alert scope.
     *
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Get the description property: The alert description.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the severityLevel property: Severity level of the alert.
     *
     * @return the severityLevel value.
     */
    public SeverityLevel severityLevel() {
        return this.severityLevel;
    }

    /**
     * Get the securityImpact property: Security impact of the alert.
     *
     * @return the securityImpact value.
     */
    public String securityImpact() {
        return this.securityImpact;
    }

    /**
     * Get the mitigationSteps property: The methods to mitigate the alert.
     *
     * @return the mitigationSteps value.
     */
    public String mitigationSteps() {
        return this.mitigationSteps;
    }

    /**
     * Get the howToPrevent property: The ways to prevent the alert.
     *
     * @return the howToPrevent value.
     */
    public String howToPrevent() {
        return this.howToPrevent;
    }

    /**
     * Get the isRemediatable property: True if the alert can be remediated; false, otherwise.
     *
     * @return the isRemediatable value.
     */
    public Boolean isRemediatable() {
        return this.isRemediatable;
    }

    /**
     * Get the isConfigurable property: True if the alert configuration can be configured; false, otherwise.
     *
     * @return the isConfigurable value.
     */
    public Boolean isConfigurable() {
        return this.isConfigurable;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
