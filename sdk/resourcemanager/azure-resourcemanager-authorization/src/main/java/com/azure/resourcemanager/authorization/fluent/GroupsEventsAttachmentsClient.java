// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.authorization.fluent.models.GroupsEventsAttachmentsCreateUploadSessionRequestBody;
import com.azure.resourcemanager.authorization.fluent.models.MicrosoftGraphUploadSessionInner;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GroupsEventsAttachmentsClient. */
public interface GroupsEventsAttachmentsClient {
    /**
     * Invoke action createUploadSession.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return uploadSession.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<MicrosoftGraphUploadSessionInner>> createUploadSessionWithResponseAsync(
        String groupId, String eventId, GroupsEventsAttachmentsCreateUploadSessionRequestBody body);

    /**
     * Invoke action createUploadSession.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return uploadSession.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<MicrosoftGraphUploadSessionInner> createUploadSessionAsync(
        String groupId, String eventId, GroupsEventsAttachmentsCreateUploadSessionRequestBody body);

    /**
     * Invoke action createUploadSession.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return uploadSession.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MicrosoftGraphUploadSessionInner createUploadSession(
        String groupId, String eventId, GroupsEventsAttachmentsCreateUploadSessionRequestBody body);

    /**
     * Invoke action createUploadSession.
     *
     * @param groupId key: id of group.
     * @param eventId key: id of event.
     * @param body Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.authorization.fluent.models.OdataErrorMainException thrown if the request is
     *     rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return uploadSession.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MicrosoftGraphUploadSessionInner> createUploadSessionWithResponse(
        String groupId, String eventId, GroupsEventsAttachmentsCreateUploadSessionRequestBody body, Context context);
}
