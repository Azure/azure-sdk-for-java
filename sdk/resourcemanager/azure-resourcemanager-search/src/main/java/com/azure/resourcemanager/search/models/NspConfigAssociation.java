// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The resource association for the network security perimeter.
 */
@Fluent
public final class NspConfigAssociation implements JsonSerializable<NspConfigAssociation> {
    /*
     * The name property.
     */
    private String name;

    /*
     * The accessMode property.
     */
    private String accessMode;

    /**
     * Creates an instance of NspConfigAssociation class.
     */
    public NspConfigAssociation() {
    }

    /**
     * Get the name property: The name property.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name property.
     * 
     * @param name the name value to set.
     * @return the NspConfigAssociation object itself.
     */
    public NspConfigAssociation withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the accessMode property: The accessMode property.
     * 
     * @return the accessMode value.
     */
    public String accessMode() {
        return this.accessMode;
    }

    /**
     * Set the accessMode property: The accessMode property.
     * 
     * @param accessMode the accessMode value to set.
     * @return the NspConfigAssociation object itself.
     */
    public NspConfigAssociation withAccessMode(String accessMode) {
        this.accessMode = accessMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("accessMode", this.accessMode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NspConfigAssociation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NspConfigAssociation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NspConfigAssociation.
     */
    public static NspConfigAssociation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NspConfigAssociation deserializedNspConfigAssociation = new NspConfigAssociation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNspConfigAssociation.name = reader.getString();
                } else if ("accessMode".equals(fieldName)) {
                    deserializedNspConfigAssociation.accessMode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNspConfigAssociation;
        });
    }
}
