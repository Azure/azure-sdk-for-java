// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties for the access rules in a network security perimeter configuration.
 */
@Fluent
public final class NspConfigAccessRuleProperties implements JsonSerializable<NspConfigAccessRuleProperties> {
    /*
     * The direction property.
     */
    private String direction;

    /*
     * The addressPrefixes property.
     */
    private List<String> addressPrefixes;

    /*
     * The fullyQualifiedDomainNames property.
     */
    private List<String> fullyQualifiedDomainNames;

    /*
     * The subscriptions property.
     */
    private List<String> subscriptions;

    /*
     * The networkSecurityPerimeters property.
     */
    private List<NspConfigNetworkSecurityPerimeterRule> networkSecurityPerimeters;

    /**
     * Creates an instance of NspConfigAccessRuleProperties class.
     */
    public NspConfigAccessRuleProperties() {
    }

    /**
     * Get the direction property: The direction property.
     * 
     * @return the direction value.
     */
    public String direction() {
        return this.direction;
    }

    /**
     * Set the direction property: The direction property.
     * 
     * @param direction the direction value to set.
     * @return the NspConfigAccessRuleProperties object itself.
     */
    public NspConfigAccessRuleProperties withDirection(String direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Get the addressPrefixes property: The addressPrefixes property.
     * 
     * @return the addressPrefixes value.
     */
    public List<String> addressPrefixes() {
        return this.addressPrefixes;
    }

    /**
     * Set the addressPrefixes property: The addressPrefixes property.
     * 
     * @param addressPrefixes the addressPrefixes value to set.
     * @return the NspConfigAccessRuleProperties object itself.
     */
    public NspConfigAccessRuleProperties withAddressPrefixes(List<String> addressPrefixes) {
        this.addressPrefixes = addressPrefixes;
        return this;
    }

    /**
     * Get the fullyQualifiedDomainNames property: The fullyQualifiedDomainNames property.
     * 
     * @return the fullyQualifiedDomainNames value.
     */
    public List<String> fullyQualifiedDomainNames() {
        return this.fullyQualifiedDomainNames;
    }

    /**
     * Set the fullyQualifiedDomainNames property: The fullyQualifiedDomainNames property.
     * 
     * @param fullyQualifiedDomainNames the fullyQualifiedDomainNames value to set.
     * @return the NspConfigAccessRuleProperties object itself.
     */
    public NspConfigAccessRuleProperties withFullyQualifiedDomainNames(List<String> fullyQualifiedDomainNames) {
        this.fullyQualifiedDomainNames = fullyQualifiedDomainNames;
        return this;
    }

    /**
     * Get the subscriptions property: The subscriptions property.
     * 
     * @return the subscriptions value.
     */
    public List<String> subscriptions() {
        return this.subscriptions;
    }

    /**
     * Set the subscriptions property: The subscriptions property.
     * 
     * @param subscriptions the subscriptions value to set.
     * @return the NspConfigAccessRuleProperties object itself.
     */
    public NspConfigAccessRuleProperties withSubscriptions(List<String> subscriptions) {
        this.subscriptions = subscriptions;
        return this;
    }

    /**
     * Get the networkSecurityPerimeters property: The networkSecurityPerimeters property.
     * 
     * @return the networkSecurityPerimeters value.
     */
    public List<NspConfigNetworkSecurityPerimeterRule> networkSecurityPerimeters() {
        return this.networkSecurityPerimeters;
    }

    /**
     * Set the networkSecurityPerimeters property: The networkSecurityPerimeters property.
     * 
     * @param networkSecurityPerimeters the networkSecurityPerimeters value to set.
     * @return the NspConfigAccessRuleProperties object itself.
     */
    public NspConfigAccessRuleProperties
        withNetworkSecurityPerimeters(List<NspConfigNetworkSecurityPerimeterRule> networkSecurityPerimeters) {
        this.networkSecurityPerimeters = networkSecurityPerimeters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (networkSecurityPerimeters() != null) {
            networkSecurityPerimeters().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("direction", this.direction);
        jsonWriter.writeArrayField("addressPrefixes", this.addressPrefixes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("fullyQualifiedDomainNames", this.fullyQualifiedDomainNames,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("subscriptions", this.subscriptions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("networkSecurityPerimeters", this.networkSecurityPerimeters,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NspConfigAccessRuleProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NspConfigAccessRuleProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NspConfigAccessRuleProperties.
     */
    public static NspConfigAccessRuleProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NspConfigAccessRuleProperties deserializedNspConfigAccessRuleProperties
                = new NspConfigAccessRuleProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("direction".equals(fieldName)) {
                    deserializedNspConfigAccessRuleProperties.direction = reader.getString();
                } else if ("addressPrefixes".equals(fieldName)) {
                    List<String> addressPrefixes = reader.readArray(reader1 -> reader1.getString());
                    deserializedNspConfigAccessRuleProperties.addressPrefixes = addressPrefixes;
                } else if ("fullyQualifiedDomainNames".equals(fieldName)) {
                    List<String> fullyQualifiedDomainNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedNspConfigAccessRuleProperties.fullyQualifiedDomainNames = fullyQualifiedDomainNames;
                } else if ("subscriptions".equals(fieldName)) {
                    List<String> subscriptions = reader.readArray(reader1 -> reader1.getString());
                    deserializedNspConfigAccessRuleProperties.subscriptions = subscriptions;
                } else if ("networkSecurityPerimeters".equals(fieldName)) {
                    List<NspConfigNetworkSecurityPerimeterRule> networkSecurityPerimeters
                        = reader.readArray(reader1 -> NspConfigNetworkSecurityPerimeterRule.fromJson(reader1));
                    deserializedNspConfigAccessRuleProperties.networkSecurityPerimeters = networkSecurityPerimeters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNspConfigAccessRuleProperties;
        });
    }
}
