// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The limits associated with this SKU offered in this region.
 */
@Fluent
public final class SkuOfferingLimits implements JsonSerializable<SkuOfferingLimits> {
    /*
     * The maximum number of indexes available for this SKU.
     */
    private Integer indexes;

    /*
     * The maximum number of indexers available for this SKU.
     */
    private Integer indexers;

    /*
     * The maximum storage size in Gigabytes available for this SKU per partition.
     */
    private Float partitionStorageInGigabytes;

    /*
     * The maximum vector storage size in Gigabytes available for this SKU per partition.
     */
    private Float partitionVectorStorageInGigabytes;

    /*
     * The maximum number of search units available for this SKU.
     */
    private Integer searchUnits;

    /*
     * The maximum number of replicas available for this SKU.
     */
    private Integer replicas;

    /*
     * The maximum number of partitions available for this SKU.
     */
    private Integer partitions;

    /**
     * Creates an instance of SkuOfferingLimits class.
     */
    public SkuOfferingLimits() {
    }

    /**
     * Get the indexes property: The maximum number of indexes available for this SKU.
     * 
     * @return the indexes value.
     */
    public Integer indexes() {
        return this.indexes;
    }

    /**
     * Set the indexes property: The maximum number of indexes available for this SKU.
     * 
     * @param indexes the indexes value to set.
     * @return the SkuOfferingLimits object itself.
     */
    public SkuOfferingLimits withIndexes(Integer indexes) {
        this.indexes = indexes;
        return this;
    }

    /**
     * Get the indexers property: The maximum number of indexers available for this SKU.
     * 
     * @return the indexers value.
     */
    public Integer indexers() {
        return this.indexers;
    }

    /**
     * Set the indexers property: The maximum number of indexers available for this SKU.
     * 
     * @param indexers the indexers value to set.
     * @return the SkuOfferingLimits object itself.
     */
    public SkuOfferingLimits withIndexers(Integer indexers) {
        this.indexers = indexers;
        return this;
    }

    /**
     * Get the partitionStorageInGigabytes property: The maximum storage size in Gigabytes available for this SKU per
     * partition.
     * 
     * @return the partitionStorageInGigabytes value.
     */
    public Float partitionStorageInGigabytes() {
        return this.partitionStorageInGigabytes;
    }

    /**
     * Set the partitionStorageInGigabytes property: The maximum storage size in Gigabytes available for this SKU per
     * partition.
     * 
     * @param partitionStorageInGigabytes the partitionStorageInGigabytes value to set.
     * @return the SkuOfferingLimits object itself.
     */
    public SkuOfferingLimits withPartitionStorageInGigabytes(Float partitionStorageInGigabytes) {
        this.partitionStorageInGigabytes = partitionStorageInGigabytes;
        return this;
    }

    /**
     * Get the partitionVectorStorageInGigabytes property: The maximum vector storage size in Gigabytes available for
     * this SKU per partition.
     * 
     * @return the partitionVectorStorageInGigabytes value.
     */
    public Float partitionVectorStorageInGigabytes() {
        return this.partitionVectorStorageInGigabytes;
    }

    /**
     * Set the partitionVectorStorageInGigabytes property: The maximum vector storage size in Gigabytes available for
     * this SKU per partition.
     * 
     * @param partitionVectorStorageInGigabytes the partitionVectorStorageInGigabytes value to set.
     * @return the SkuOfferingLimits object itself.
     */
    public SkuOfferingLimits withPartitionVectorStorageInGigabytes(Float partitionVectorStorageInGigabytes) {
        this.partitionVectorStorageInGigabytes = partitionVectorStorageInGigabytes;
        return this;
    }

    /**
     * Get the searchUnits property: The maximum number of search units available for this SKU.
     * 
     * @return the searchUnits value.
     */
    public Integer searchUnits() {
        return this.searchUnits;
    }

    /**
     * Set the searchUnits property: The maximum number of search units available for this SKU.
     * 
     * @param searchUnits the searchUnits value to set.
     * @return the SkuOfferingLimits object itself.
     */
    public SkuOfferingLimits withSearchUnits(Integer searchUnits) {
        this.searchUnits = searchUnits;
        return this;
    }

    /**
     * Get the replicas property: The maximum number of replicas available for this SKU.
     * 
     * @return the replicas value.
     */
    public Integer replicas() {
        return this.replicas;
    }

    /**
     * Set the replicas property: The maximum number of replicas available for this SKU.
     * 
     * @param replicas the replicas value to set.
     * @return the SkuOfferingLimits object itself.
     */
    public SkuOfferingLimits withReplicas(Integer replicas) {
        this.replicas = replicas;
        return this;
    }

    /**
     * Get the partitions property: The maximum number of partitions available for this SKU.
     * 
     * @return the partitions value.
     */
    public Integer partitions() {
        return this.partitions;
    }

    /**
     * Set the partitions property: The maximum number of partitions available for this SKU.
     * 
     * @param partitions the partitions value to set.
     * @return the SkuOfferingLimits object itself.
     */
    public SkuOfferingLimits withPartitions(Integer partitions) {
        this.partitions = partitions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("indexes", this.indexes);
        jsonWriter.writeNumberField("indexers", this.indexers);
        jsonWriter.writeNumberField("partitionStorageInGigabytes", this.partitionStorageInGigabytes);
        jsonWriter.writeNumberField("partitionVectorStorageInGigabytes", this.partitionVectorStorageInGigabytes);
        jsonWriter.writeNumberField("searchUnits", this.searchUnits);
        jsonWriter.writeNumberField("replicas", this.replicas);
        jsonWriter.writeNumberField("partitions", this.partitions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SkuOfferingLimits from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SkuOfferingLimits if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SkuOfferingLimits.
     */
    public static SkuOfferingLimits fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SkuOfferingLimits deserializedSkuOfferingLimits = new SkuOfferingLimits();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("indexes".equals(fieldName)) {
                    deserializedSkuOfferingLimits.indexes = reader.getNullable(JsonReader::getInt);
                } else if ("indexers".equals(fieldName)) {
                    deserializedSkuOfferingLimits.indexers = reader.getNullable(JsonReader::getInt);
                } else if ("partitionStorageInGigabytes".equals(fieldName)) {
                    deserializedSkuOfferingLimits.partitionStorageInGigabytes
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("partitionVectorStorageInGigabytes".equals(fieldName)) {
                    deserializedSkuOfferingLimits.partitionVectorStorageInGigabytes
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("searchUnits".equals(fieldName)) {
                    deserializedSkuOfferingLimits.searchUnits = reader.getNullable(JsonReader::getInt);
                } else if ("replicas".equals(fieldName)) {
                    deserializedSkuOfferingLimits.replicas = reader.getNullable(JsonReader::getInt);
                } else if ("partitions".equals(fieldName)) {
                    deserializedSkuOfferingLimits.partitions = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSkuOfferingLimits;
        });
    }
}
