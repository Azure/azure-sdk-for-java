// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.search.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Specifications of the service for this operation.
 */
@Immutable
public final class OperationServiceSpecification implements JsonSerializable<OperationServiceSpecification> {
    /*
     * Specifications of metrics for this operation.
     */
    private List<OperationMetricsSpecification> metricSpecifications;

    /*
     * Specifications of logs for this operation.
     */
    private List<OperationLogsSpecification> logSpecifications;

    /**
     * Creates an instance of OperationServiceSpecification class.
     */
    public OperationServiceSpecification() {
    }

    /**
     * Get the metricSpecifications property: Specifications of metrics for this operation.
     * 
     * @return the metricSpecifications value.
     */
    public List<OperationMetricsSpecification> metricSpecifications() {
        return this.metricSpecifications;
    }

    /**
     * Get the logSpecifications property: Specifications of logs for this operation.
     * 
     * @return the logSpecifications value.
     */
    public List<OperationLogsSpecification> logSpecifications() {
        return this.logSpecifications;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metricSpecifications() != null) {
            metricSpecifications().forEach(e -> e.validate());
        }
        if (logSpecifications() != null) {
            logSpecifications().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationServiceSpecification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationServiceSpecification if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OperationServiceSpecification.
     */
    public static OperationServiceSpecification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationServiceSpecification deserializedOperationServiceSpecification
                = new OperationServiceSpecification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("metricSpecifications".equals(fieldName)) {
                    List<OperationMetricsSpecification> metricSpecifications
                        = reader.readArray(reader1 -> OperationMetricsSpecification.fromJson(reader1));
                    deserializedOperationServiceSpecification.metricSpecifications = metricSpecifications;
                } else if ("logSpecifications".equals(fieldName)) {
                    List<OperationLogsSpecification> logSpecifications
                        = reader.readArray(reader1 -> OperationLogsSpecification.fromJson(reader1));
                    deserializedOperationServiceSpecification.logSpecifications = logSpecifications;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperationServiceSpecification;
        });
    }
}
