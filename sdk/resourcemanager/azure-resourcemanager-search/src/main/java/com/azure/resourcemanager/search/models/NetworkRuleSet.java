// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Network specific rules that determine how the Azure AI Search service may be reached.
 */
@Fluent
public final class NetworkRuleSet implements JsonSerializable<NetworkRuleSet> {
    /*
     * A list of IP restriction rules that defines the inbound network(s) with allowing access to the search service
     * endpoint. At the meantime, all other public IP networks are blocked by the firewall. These restriction rules are
     * applied only when the 'publicNetworkAccess' of the search service is 'enabled'; otherwise, traffic over public
     * interface is not allowed even with any public IP rules, and private endpoint connections would be the exclusive
     * access method.
     */
    private List<IpRule> ipRules;

    /*
     * Possible origins of inbound traffic that can bypass the rules defined in the 'ipRules' section.
     */
    private SearchBypass bypass;

    /**
     * Creates an instance of NetworkRuleSet class.
     */
    public NetworkRuleSet() {
    }

    /**
     * Get the ipRules property: A list of IP restriction rules that defines the inbound network(s) with allowing access
     * to the search service endpoint. At the meantime, all other public IP networks are blocked by the firewall. These
     * restriction rules are applied only when the 'publicNetworkAccess' of the search service is 'enabled'; otherwise,
     * traffic over public interface is not allowed even with any public IP rules, and private endpoint connections
     * would be the exclusive access method.
     * 
     * @return the ipRules value.
     */
    public List<IpRule> ipRules() {
        return this.ipRules;
    }

    /**
     * Set the ipRules property: A list of IP restriction rules that defines the inbound network(s) with allowing access
     * to the search service endpoint. At the meantime, all other public IP networks are blocked by the firewall. These
     * restriction rules are applied only when the 'publicNetworkAccess' of the search service is 'enabled'; otherwise,
     * traffic over public interface is not allowed even with any public IP rules, and private endpoint connections
     * would be the exclusive access method.
     * 
     * @param ipRules the ipRules value to set.
     * @return the NetworkRuleSet object itself.
     */
    public NetworkRuleSet withIpRules(List<IpRule> ipRules) {
        this.ipRules = ipRules;
        return this;
    }

    /**
     * Get the bypass property: Possible origins of inbound traffic that can bypass the rules defined in the 'ipRules'
     * section.
     * 
     * @return the bypass value.
     */
    public SearchBypass bypass() {
        return this.bypass;
    }

    /**
     * Set the bypass property: Possible origins of inbound traffic that can bypass the rules defined in the 'ipRules'
     * section.
     * 
     * @param bypass the bypass value to set.
     * @return the NetworkRuleSet object itself.
     */
    public NetworkRuleSet withBypass(SearchBypass bypass) {
        this.bypass = bypass;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipRules() != null) {
            ipRules().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("ipRules", this.ipRules, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("bypass", this.bypass == null ? null : this.bypass.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkRuleSet from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkRuleSet if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkRuleSet.
     */
    public static NetworkRuleSet fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkRuleSet deserializedNetworkRuleSet = new NetworkRuleSet();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipRules".equals(fieldName)) {
                    List<IpRule> ipRules = reader.readArray(reader1 -> IpRule.fromJson(reader1));
                    deserializedNetworkRuleSet.ipRules = ipRules;
                } else if ("bypass".equals(fieldName)) {
                    deserializedNetworkRuleSet.bypass = SearchBypass.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkRuleSet;
        });
    }
}
