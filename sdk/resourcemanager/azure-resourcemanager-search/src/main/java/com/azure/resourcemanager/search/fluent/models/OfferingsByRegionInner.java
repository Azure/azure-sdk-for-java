// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.search.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.search.models.FeatureOffering;
import com.azure.resourcemanager.search.models.SkuOffering;
import java.io.IOException;
import java.util.List;

/**
 * The OfferingsByRegion model.
 */
@Fluent
public final class OfferingsByRegionInner implements JsonSerializable<OfferingsByRegionInner> {
    /*
     * The name of the region.
     */
    private String regionName;

    /*
     * The list of features offered in this region.
     */
    private List<FeatureOffering> features;

    /*
     * The list of SKUs offered in this region.
     */
    private List<SkuOffering> skus;

    /**
     * Creates an instance of OfferingsByRegionInner class.
     */
    public OfferingsByRegionInner() {
    }

    /**
     * Get the regionName property: The name of the region.
     * 
     * @return the regionName value.
     */
    public String regionName() {
        return this.regionName;
    }

    /**
     * Set the regionName property: The name of the region.
     * 
     * @param regionName the regionName value to set.
     * @return the OfferingsByRegionInner object itself.
     */
    public OfferingsByRegionInner withRegionName(String regionName) {
        this.regionName = regionName;
        return this;
    }

    /**
     * Get the features property: The list of features offered in this region.
     * 
     * @return the features value.
     */
    public List<FeatureOffering> features() {
        return this.features;
    }

    /**
     * Set the features property: The list of features offered in this region.
     * 
     * @param features the features value to set.
     * @return the OfferingsByRegionInner object itself.
     */
    public OfferingsByRegionInner withFeatures(List<FeatureOffering> features) {
        this.features = features;
        return this;
    }

    /**
     * Get the skus property: The list of SKUs offered in this region.
     * 
     * @return the skus value.
     */
    public List<SkuOffering> skus() {
        return this.skus;
    }

    /**
     * Set the skus property: The list of SKUs offered in this region.
     * 
     * @param skus the skus value to set.
     * @return the OfferingsByRegionInner object itself.
     */
    public OfferingsByRegionInner withSkus(List<SkuOffering> skus) {
        this.skus = skus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (features() != null) {
            features().forEach(e -> e.validate());
        }
        if (skus() != null) {
            skus().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("regionName", this.regionName);
        jsonWriter.writeArrayField("features", this.features, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("skus", this.skus, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OfferingsByRegionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OfferingsByRegionInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OfferingsByRegionInner.
     */
    public static OfferingsByRegionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OfferingsByRegionInner deserializedOfferingsByRegionInner = new OfferingsByRegionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("regionName".equals(fieldName)) {
                    deserializedOfferingsByRegionInner.regionName = reader.getString();
                } else if ("features".equals(fieldName)) {
                    List<FeatureOffering> features = reader.readArray(reader1 -> FeatureOffering.fromJson(reader1));
                    deserializedOfferingsByRegionInner.features = features;
                } else if ("skus".equals(fieldName)) {
                    List<SkuOffering> skus = reader.readArray(reader1 -> SkuOffering.fromJson(reader1));
                    deserializedOfferingsByRegionInner.skus = skus;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOfferingsByRegionInner;
        });
    }
}
