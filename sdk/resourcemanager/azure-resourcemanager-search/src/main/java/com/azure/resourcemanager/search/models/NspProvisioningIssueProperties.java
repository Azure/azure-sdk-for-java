// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties to describe any issues with provisioning network security perimeters to a search service.
 */
@Fluent
public final class NspProvisioningIssueProperties implements JsonSerializable<NspProvisioningIssueProperties> {
    /*
     * The issueType property.
     */
    private String issueType;

    /*
     * The severity property.
     */
    private String severity;

    /*
     * The description property.
     */
    private String description;

    /*
     * The suggestedResourceIds property.
     */
    private List<String> suggestedResourceIds;

    /*
     * The suggestedAccessRules property.
     */
    private List<String> suggestedAccessRules;

    /**
     * Creates an instance of NspProvisioningIssueProperties class.
     */
    public NspProvisioningIssueProperties() {
    }

    /**
     * Get the issueType property: The issueType property.
     * 
     * @return the issueType value.
     */
    public String issueType() {
        return this.issueType;
    }

    /**
     * Set the issueType property: The issueType property.
     * 
     * @param issueType the issueType value to set.
     * @return the NspProvisioningIssueProperties object itself.
     */
    public NspProvisioningIssueProperties withIssueType(String issueType) {
        this.issueType = issueType;
        return this;
    }

    /**
     * Get the severity property: The severity property.
     * 
     * @return the severity value.
     */
    public String severity() {
        return this.severity;
    }

    /**
     * Set the severity property: The severity property.
     * 
     * @param severity the severity value to set.
     * @return the NspProvisioningIssueProperties object itself.
     */
    public NspProvisioningIssueProperties withSeverity(String severity) {
        this.severity = severity;
        return this;
    }

    /**
     * Get the description property: The description property.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description property.
     * 
     * @param description the description value to set.
     * @return the NspProvisioningIssueProperties object itself.
     */
    public NspProvisioningIssueProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the suggestedResourceIds property: The suggestedResourceIds property.
     * 
     * @return the suggestedResourceIds value.
     */
    public List<String> suggestedResourceIds() {
        return this.suggestedResourceIds;
    }

    /**
     * Set the suggestedResourceIds property: The suggestedResourceIds property.
     * 
     * @param suggestedResourceIds the suggestedResourceIds value to set.
     * @return the NspProvisioningIssueProperties object itself.
     */
    public NspProvisioningIssueProperties withSuggestedResourceIds(List<String> suggestedResourceIds) {
        this.suggestedResourceIds = suggestedResourceIds;
        return this;
    }

    /**
     * Get the suggestedAccessRules property: The suggestedAccessRules property.
     * 
     * @return the suggestedAccessRules value.
     */
    public List<String> suggestedAccessRules() {
        return this.suggestedAccessRules;
    }

    /**
     * Set the suggestedAccessRules property: The suggestedAccessRules property.
     * 
     * @param suggestedAccessRules the suggestedAccessRules value to set.
     * @return the NspProvisioningIssueProperties object itself.
     */
    public NspProvisioningIssueProperties withSuggestedAccessRules(List<String> suggestedAccessRules) {
        this.suggestedAccessRules = suggestedAccessRules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("issueType", this.issueType);
        jsonWriter.writeStringField("severity", this.severity);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("suggestedResourceIds", this.suggestedResourceIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("suggestedAccessRules", this.suggestedAccessRules,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NspProvisioningIssueProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NspProvisioningIssueProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NspProvisioningIssueProperties.
     */
    public static NspProvisioningIssueProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NspProvisioningIssueProperties deserializedNspProvisioningIssueProperties
                = new NspProvisioningIssueProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("issueType".equals(fieldName)) {
                    deserializedNspProvisioningIssueProperties.issueType = reader.getString();
                } else if ("severity".equals(fieldName)) {
                    deserializedNspProvisioningIssueProperties.severity = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedNspProvisioningIssueProperties.description = reader.getString();
                } else if ("suggestedResourceIds".equals(fieldName)) {
                    List<String> suggestedResourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedNspProvisioningIssueProperties.suggestedResourceIds = suggestedResourceIds;
                } else if ("suggestedAccessRules".equals(fieldName)) {
                    List<String> suggestedAccessRules = reader.readArray(reader1 -> reader1.getString());
                    deserializedNspProvisioningIssueProperties.suggestedAccessRules = suggestedAccessRules;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNspProvisioningIssueProperties;
        });
    }
}
