// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The soft delete policy for a container registry.
 */
@Fluent
public final class SoftDeletePolicy implements JsonSerializable<SoftDeletePolicy> {
    /*
     * The number of days after which a soft-deleted item is permanently deleted.
     */
    private Integer retentionDays;

    /*
     * The timestamp when the policy was last updated.
     */
    private OffsetDateTime lastUpdatedTime;

    /*
     * The value that indicates whether the policy is enabled or not.
     */
    private PolicyStatus status;

    /**
     * Creates an instance of SoftDeletePolicy class.
     */
    public SoftDeletePolicy() {
    }

    /**
     * Get the retentionDays property: The number of days after which a soft-deleted item is permanently deleted.
     * 
     * @return the retentionDays value.
     */
    public Integer retentionDays() {
        return this.retentionDays;
    }

    /**
     * Set the retentionDays property: The number of days after which a soft-deleted item is permanently deleted.
     * 
     * @param retentionDays the retentionDays value to set.
     * @return the SoftDeletePolicy object itself.
     */
    public SoftDeletePolicy withRetentionDays(Integer retentionDays) {
        this.retentionDays = retentionDays;
        return this;
    }

    /**
     * Get the lastUpdatedTime property: The timestamp when the policy was last updated.
     * 
     * @return the lastUpdatedTime value.
     */
    public OffsetDateTime lastUpdatedTime() {
        return this.lastUpdatedTime;
    }

    /**
     * Get the status property: The value that indicates whether the policy is enabled or not.
     * 
     * @return the status value.
     */
    public PolicyStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The value that indicates whether the policy is enabled or not.
     * 
     * @param status the status value to set.
     * @return the SoftDeletePolicy object itself.
     */
    public SoftDeletePolicy withStatus(PolicyStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("retentionDays", this.retentionDays);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SoftDeletePolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SoftDeletePolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SoftDeletePolicy.
     */
    public static SoftDeletePolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SoftDeletePolicy deserializedSoftDeletePolicy = new SoftDeletePolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("retentionDays".equals(fieldName)) {
                    deserializedSoftDeletePolicy.retentionDays = reader.getNullable(JsonReader::getInt);
                } else if ("lastUpdatedTime".equals(fieldName)) {
                    deserializedSoftDeletePolicy.lastUpdatedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedSoftDeletePolicy.status = PolicyStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSoftDeletePolicy;
        });
    }
}
