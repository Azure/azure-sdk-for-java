// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerregistry.fluent.models.ArchiveProperties;
import java.io.IOException;

/**
 * The properties of the Debian package Archive.
 */
@Fluent
public final class DebianArchiveProperties extends ArchiveProperties {
    /*
     * Debian distribution Name.
     */
    private String distributionName;

    /*
     * The provisioning state of the archive at the time the operation was called.
     */
    private ProvisioningState provisioningState;

    /*
     * The repositoryEndpoint property.
     */
    private String repositoryEndpoint;

    /**
     * Creates an instance of DebianArchiveProperties class.
     */
    public DebianArchiveProperties() {
    }

    /**
     * Get the distributionName property: Debian distribution Name.
     * 
     * @return the distributionName value.
     */
    public String distributionName() {
        return this.distributionName;
    }

    /**
     * Set the distributionName property: Debian distribution Name.
     * 
     * @param distributionName the distributionName value to set.
     * @return the DebianArchiveProperties object itself.
     */
    public DebianArchiveProperties withDistributionName(String distributionName) {
        this.distributionName = distributionName;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the archive at the time the operation was called.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the repositoryEndpoint property: The repositoryEndpoint property.
     * 
     * @return the repositoryEndpoint value.
     */
    @Override
    public String repositoryEndpoint() {
        return this.repositoryEndpoint;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DebianArchiveProperties withPackageSource(ArchivePackageSourceProperties packageSource) {
        super.withPackageSource(packageSource);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DebianArchiveProperties withPublishedVersion(String publishedVersion) {
        super.withPublishedVersion(publishedVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DebianArchiveProperties withRepositoryEndpointPrefix(String repositoryEndpointPrefix) {
        super.withRepositoryEndpointPrefix(repositoryEndpointPrefix);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (packageSource() != null) {
            packageSource().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("packageSource", packageSource());
        jsonWriter.writeStringField("publishedVersion", publishedVersion());
        jsonWriter.writeStringField("repositoryEndpointPrefix", repositoryEndpointPrefix());
        jsonWriter.writeStringField("distributionName", this.distributionName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DebianArchiveProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DebianArchiveProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DebianArchiveProperties.
     */
    public static DebianArchiveProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DebianArchiveProperties deserializedDebianArchiveProperties = new DebianArchiveProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("packageSource".equals(fieldName)) {
                    deserializedDebianArchiveProperties
                        .withPackageSource(ArchivePackageSourceProperties.fromJson(reader));
                } else if ("publishedVersion".equals(fieldName)) {
                    deserializedDebianArchiveProperties.withPublishedVersion(reader.getString());
                } else if ("repositoryEndpointPrefix".equals(fieldName)) {
                    deserializedDebianArchiveProperties.withRepositoryEndpointPrefix(reader.getString());
                } else if ("repositoryEndpoint".equals(fieldName)) {
                    deserializedDebianArchiveProperties.repositoryEndpoint = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDebianArchiveProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("distributionName".equals(fieldName)) {
                    deserializedDebianArchiveProperties.distributionName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDebianArchiveProperties;
        });
    }
}
