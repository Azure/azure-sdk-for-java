// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The PipelineSourceTriggerDescriptor model.
 */
@Fluent
public final class PipelineSourceTriggerDescriptor implements JsonSerializable<PipelineSourceTriggerDescriptor> {
    /*
     * The timestamp when the source update happened.
     */
    private OffsetDateTime timestamp;

    /**
     * Creates an instance of PipelineSourceTriggerDescriptor class.
     */
    public PipelineSourceTriggerDescriptor() {
    }

    /**
     * Get the timestamp property: The timestamp when the source update happened.
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: The timestamp when the source update happened.
     * 
     * @param timestamp the timestamp value to set.
     * @return the PipelineSourceTriggerDescriptor object itself.
     */
    public PipelineSourceTriggerDescriptor withTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timestamp",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineSourceTriggerDescriptor from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineSourceTriggerDescriptor if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PipelineSourceTriggerDescriptor.
     */
    public static PipelineSourceTriggerDescriptor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineSourceTriggerDescriptor deserializedPipelineSourceTriggerDescriptor
                = new PipelineSourceTriggerDescriptor();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timestamp".equals(fieldName)) {
                    deserializedPipelineSourceTriggerDescriptor.timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineSourceTriggerDescriptor;
        });
    }
}
