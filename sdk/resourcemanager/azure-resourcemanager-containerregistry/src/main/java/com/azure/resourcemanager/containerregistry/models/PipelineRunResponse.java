// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The response properties returned for a pipeline run.
 */
@Fluent
public final class PipelineRunResponse implements JsonSerializable<PipelineRunResponse> {
    /*
     * The current status of the pipeline run.
     */
    private String status;

    /*
     * The artifacts imported in the pipeline run.
     */
    private List<String> importedArtifacts;

    /*
     * The current progress of the copy operation.
     */
    private ProgressProperties progress;

    /*
     * The time the pipeline run started.
     */
    private OffsetDateTime startTime;

    /*
     * The time the pipeline run finished.
     */
    private OffsetDateTime finishTime;

    /*
     * The source of the pipeline run.
     */
    private ImportPipelineSourceProperties source;

    /*
     * The target of the pipeline run.
     */
    private ExportPipelineTargetProperties target;

    /*
     * The digest of the tar used to transfer the artifacts.
     */
    private String catalogDigest;

    /*
     * The trigger that caused the pipeline run.
     */
    private PipelineTriggerDescriptor trigger;

    /*
     * The detailed error message for the pipeline run in the case of failure.
     */
    private String pipelineRunErrorMessage;

    /**
     * Creates an instance of PipelineRunResponse class.
     */
    public PipelineRunResponse() {
    }

    /**
     * Get the status property: The current status of the pipeline run.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: The current status of the pipeline run.
     * 
     * @param status the status value to set.
     * @return the PipelineRunResponse object itself.
     */
    public PipelineRunResponse withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the importedArtifacts property: The artifacts imported in the pipeline run.
     * 
     * @return the importedArtifacts value.
     */
    public List<String> importedArtifacts() {
        return this.importedArtifacts;
    }

    /**
     * Set the importedArtifacts property: The artifacts imported in the pipeline run.
     * 
     * @param importedArtifacts the importedArtifacts value to set.
     * @return the PipelineRunResponse object itself.
     */
    public PipelineRunResponse withImportedArtifacts(List<String> importedArtifacts) {
        this.importedArtifacts = importedArtifacts;
        return this;
    }

    /**
     * Get the progress property: The current progress of the copy operation.
     * 
     * @return the progress value.
     */
    public ProgressProperties progress() {
        return this.progress;
    }

    /**
     * Set the progress property: The current progress of the copy operation.
     * 
     * @param progress the progress value to set.
     * @return the PipelineRunResponse object itself.
     */
    public PipelineRunResponse withProgress(ProgressProperties progress) {
        this.progress = progress;
        return this;
    }

    /**
     * Get the startTime property: The time the pipeline run started.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The time the pipeline run started.
     * 
     * @param startTime the startTime value to set.
     * @return the PipelineRunResponse object itself.
     */
    public PipelineRunResponse withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the finishTime property: The time the pipeline run finished.
     * 
     * @return the finishTime value.
     */
    public OffsetDateTime finishTime() {
        return this.finishTime;
    }

    /**
     * Set the finishTime property: The time the pipeline run finished.
     * 
     * @param finishTime the finishTime value to set.
     * @return the PipelineRunResponse object itself.
     */
    public PipelineRunResponse withFinishTime(OffsetDateTime finishTime) {
        this.finishTime = finishTime;
        return this;
    }

    /**
     * Get the source property: The source of the pipeline run.
     * 
     * @return the source value.
     */
    public ImportPipelineSourceProperties source() {
        return this.source;
    }

    /**
     * Set the source property: The source of the pipeline run.
     * 
     * @param source the source value to set.
     * @return the PipelineRunResponse object itself.
     */
    public PipelineRunResponse withSource(ImportPipelineSourceProperties source) {
        this.source = source;
        return this;
    }

    /**
     * Get the target property: The target of the pipeline run.
     * 
     * @return the target value.
     */
    public ExportPipelineTargetProperties target() {
        return this.target;
    }

    /**
     * Set the target property: The target of the pipeline run.
     * 
     * @param target the target value to set.
     * @return the PipelineRunResponse object itself.
     */
    public PipelineRunResponse withTarget(ExportPipelineTargetProperties target) {
        this.target = target;
        return this;
    }

    /**
     * Get the catalogDigest property: The digest of the tar used to transfer the artifacts.
     * 
     * @return the catalogDigest value.
     */
    public String catalogDigest() {
        return this.catalogDigest;
    }

    /**
     * Set the catalogDigest property: The digest of the tar used to transfer the artifacts.
     * 
     * @param catalogDigest the catalogDigest value to set.
     * @return the PipelineRunResponse object itself.
     */
    public PipelineRunResponse withCatalogDigest(String catalogDigest) {
        this.catalogDigest = catalogDigest;
        return this;
    }

    /**
     * Get the trigger property: The trigger that caused the pipeline run.
     * 
     * @return the trigger value.
     */
    public PipelineTriggerDescriptor trigger() {
        return this.trigger;
    }

    /**
     * Set the trigger property: The trigger that caused the pipeline run.
     * 
     * @param trigger the trigger value to set.
     * @return the PipelineRunResponse object itself.
     */
    public PipelineRunResponse withTrigger(PipelineTriggerDescriptor trigger) {
        this.trigger = trigger;
        return this;
    }

    /**
     * Get the pipelineRunErrorMessage property: The detailed error message for the pipeline run in the case of failure.
     * 
     * @return the pipelineRunErrorMessage value.
     */
    public String pipelineRunErrorMessage() {
        return this.pipelineRunErrorMessage;
    }

    /**
     * Set the pipelineRunErrorMessage property: The detailed error message for the pipeline run in the case of failure.
     * 
     * @param pipelineRunErrorMessage the pipelineRunErrorMessage value to set.
     * @return the PipelineRunResponse object itself.
     */
    public PipelineRunResponse withPipelineRunErrorMessage(String pipelineRunErrorMessage) {
        this.pipelineRunErrorMessage = pipelineRunErrorMessage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (progress() != null) {
            progress().validate();
        }
        if (source() != null) {
            source().validate();
        }
        if (target() != null) {
            target().validate();
        }
        if (trigger() != null) {
            trigger().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeArrayField("importedArtifacts", this.importedArtifacts,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("progress", this.progress);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("finishTime",
            this.finishTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.finishTime));
        jsonWriter.writeJsonField("source", this.source);
        jsonWriter.writeJsonField("target", this.target);
        jsonWriter.writeStringField("catalogDigest", this.catalogDigest);
        jsonWriter.writeJsonField("trigger", this.trigger);
        jsonWriter.writeStringField("pipelineRunErrorMessage", this.pipelineRunErrorMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineRunResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineRunResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PipelineRunResponse.
     */
    public static PipelineRunResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineRunResponse deserializedPipelineRunResponse = new PipelineRunResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedPipelineRunResponse.status = reader.getString();
                } else if ("importedArtifacts".equals(fieldName)) {
                    List<String> importedArtifacts = reader.readArray(reader1 -> reader1.getString());
                    deserializedPipelineRunResponse.importedArtifacts = importedArtifacts;
                } else if ("progress".equals(fieldName)) {
                    deserializedPipelineRunResponse.progress = ProgressProperties.fromJson(reader);
                } else if ("startTime".equals(fieldName)) {
                    deserializedPipelineRunResponse.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("finishTime".equals(fieldName)) {
                    deserializedPipelineRunResponse.finishTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("source".equals(fieldName)) {
                    deserializedPipelineRunResponse.source = ImportPipelineSourceProperties.fromJson(reader);
                } else if ("target".equals(fieldName)) {
                    deserializedPipelineRunResponse.target = ExportPipelineTargetProperties.fromJson(reader);
                } else if ("catalogDigest".equals(fieldName)) {
                    deserializedPipelineRunResponse.catalogDigest = reader.getString();
                } else if ("trigger".equals(fieldName)) {
                    deserializedPipelineRunResponse.trigger = PipelineTriggerDescriptor.fromJson(reader);
                } else if ("pipelineRunErrorMessage".equals(fieldName)) {
                    deserializedPipelineRunResponse.pipelineRunErrorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineRunResponse;
        });
    }
}
