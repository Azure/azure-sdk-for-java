// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerregistry.models.PipelineRunRequest;
import com.azure.resourcemanager.containerregistry.models.PipelineRunResponse;
import com.azure.resourcemanager.containerregistry.models.ProvisioningState;
import java.io.IOException;

/**
 * An object that represents a pipeline run for a container registry.
 */
@Fluent
public final class PipelineRunInner extends ProxyResource {
    /*
     * The properties of a pipeline run.
     */
    private PipelineRunProperties innerProperties;

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of PipelineRunInner class.
     */
    public PipelineRunInner() {
    }

    /**
     * Get the innerProperties property: The properties of a pipeline run.
     * 
     * @return the innerProperties value.
     */
    private PipelineRunProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the provisioningState property: The provisioning state of a pipeline run.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the request property: The request parameters for a pipeline run.
     * 
     * @return the request value.
     */
    public PipelineRunRequest request() {
        return this.innerProperties() == null ? null : this.innerProperties().request();
    }

    /**
     * Set the request property: The request parameters for a pipeline run.
     * 
     * @param request the request value to set.
     * @return the PipelineRunInner object itself.
     */
    public PipelineRunInner withRequest(PipelineRunRequest request) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PipelineRunProperties();
        }
        this.innerProperties().withRequest(request);
        return this;
    }

    /**
     * Get the response property: The response of a pipeline run.
     * 
     * @return the response value.
     */
    public PipelineRunResponse response() {
        return this.innerProperties() == null ? null : this.innerProperties().response();
    }

    /**
     * Get the forceUpdateTag property: How the pipeline run should be forced to recreate even if the pipeline run
     * configuration has not changed.
     * 
     * @return the forceUpdateTag value.
     */
    public String forceUpdateTag() {
        return this.innerProperties() == null ? null : this.innerProperties().forceUpdateTag();
    }

    /**
     * Set the forceUpdateTag property: How the pipeline run should be forced to recreate even if the pipeline run
     * configuration has not changed.
     * 
     * @param forceUpdateTag the forceUpdateTag value to set.
     * @return the PipelineRunInner object itself.
     */
    public PipelineRunInner withForceUpdateTag(String forceUpdateTag) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PipelineRunProperties();
        }
        this.innerProperties().withForceUpdateTag(forceUpdateTag);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineRunInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineRunInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PipelineRunInner.
     */
    public static PipelineRunInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineRunInner deserializedPipelineRunInner = new PipelineRunInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedPipelineRunInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPipelineRunInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPipelineRunInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedPipelineRunInner.innerProperties = PipelineRunProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedPipelineRunInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineRunInner;
        });
    }
}
