// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerregistry.models.ExportPipelineTargetProperties;
import com.azure.resourcemanager.containerregistry.models.IdentityProperties;
import com.azure.resourcemanager.containerregistry.models.PipelineOptions;
import com.azure.resourcemanager.containerregistry.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * An object that represents an export pipeline for a container registry.
 */
@Fluent
public final class ExportPipelineInner extends ProxyResource {
    /*
     * The location of the export pipeline.
     */
    private String location;

    /*
     * The identity of the export pipeline.
     */
    private IdentityProperties identity;

    /*
     * The properties of the export pipeline.
     */
    private ExportPipelineProperties innerProperties;

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ExportPipelineInner class.
     */
    public ExportPipelineInner() {
    }

    /**
     * Get the location property: The location of the export pipeline.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The location of the export pipeline.
     * 
     * @param location the location value to set.
     * @return the ExportPipelineInner object itself.
     */
    public ExportPipelineInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the identity property: The identity of the export pipeline.
     * 
     * @return the identity value.
     */
    public IdentityProperties identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the export pipeline.
     * 
     * @param identity the identity value to set.
     * @return the ExportPipelineInner object itself.
     */
    public ExportPipelineInner withIdentity(IdentityProperties identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the innerProperties property: The properties of the export pipeline.
     * 
     * @return the innerProperties value.
     */
    private ExportPipelineProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the target property: The target properties of the export pipeline.
     * 
     * @return the target value.
     */
    public ExportPipelineTargetProperties target() {
        return this.innerProperties() == null ? null : this.innerProperties().target();
    }

    /**
     * Set the target property: The target properties of the export pipeline.
     * 
     * @param target the target value to set.
     * @return the ExportPipelineInner object itself.
     */
    public ExportPipelineInner withTarget(ExportPipelineTargetProperties target) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExportPipelineProperties();
        }
        this.innerProperties().withTarget(target);
        return this;
    }

    /**
     * Get the options property: The list of all options configured for the pipeline.
     * 
     * @return the options value.
     */
    public List<PipelineOptions> options() {
        return this.innerProperties() == null ? null : this.innerProperties().options();
    }

    /**
     * Set the options property: The list of all options configured for the pipeline.
     * 
     * @param options the options value to set.
     * @return the ExportPipelineInner object itself.
     */
    public ExportPipelineInner withOptions(List<PipelineOptions> options) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExportPipelineProperties();
        }
        this.innerProperties().withOptions(options);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the pipeline at the time the operation was called.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeJsonField("identity", this.identity);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExportPipelineInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExportPipelineInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExportPipelineInner.
     */
    public static ExportPipelineInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExportPipelineInner deserializedExportPipelineInner = new ExportPipelineInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedExportPipelineInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedExportPipelineInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedExportPipelineInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedExportPipelineInner.location = reader.getString();
                } else if ("identity".equals(fieldName)) {
                    deserializedExportPipelineInner.identity = IdentityProperties.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedExportPipelineInner.innerProperties = ExportPipelineProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedExportPipelineInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExportPipelineInner;
        });
    }
}
