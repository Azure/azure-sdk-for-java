// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of the archive package source.
 */
@Fluent
public class ArchivePackageSourceProperties implements JsonSerializable<ArchivePackageSourceProperties> {
    /*
     * The type of package source for a archive.
     */
    private PackageSourceType type;

    /*
     * The external repository url.
     */
    private String url;

    /**
     * Creates an instance of ArchivePackageSourceProperties class.
     */
    public ArchivePackageSourceProperties() {
    }

    /**
     * Get the type property: The type of package source for a archive.
     * 
     * @return the type value.
     */
    public PackageSourceType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of package source for a archive.
     * 
     * @param type the type value to set.
     * @return the ArchivePackageSourceProperties object itself.
     */
    public ArchivePackageSourceProperties withType(PackageSourceType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the url property: The external repository url.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: The external repository url.
     * 
     * @param url the url value to set.
     * @return the ArchivePackageSourceProperties object itself.
     */
    public ArchivePackageSourceProperties withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("url", this.url);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArchivePackageSourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArchivePackageSourceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ArchivePackageSourceProperties.
     */
    public static ArchivePackageSourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArchivePackageSourceProperties deserializedArchivePackageSourceProperties
                = new ArchivePackageSourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedArchivePackageSourceProperties.type = PackageSourceType.fromString(reader.getString());
                } else if ("url".equals(fieldName)) {
                    deserializedArchivePackageSourceProperties.url = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArchivePackageSourceProperties;
        });
    }
}
