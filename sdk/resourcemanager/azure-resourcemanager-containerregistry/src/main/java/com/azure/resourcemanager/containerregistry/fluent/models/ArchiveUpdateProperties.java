// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of a archive.
 */
@Fluent
public final class ArchiveUpdateProperties implements JsonSerializable<ArchiveUpdateProperties> {
    /*
     * The published version of the archive.
     */
    private String publishedVersion;

    /**
     * Creates an instance of ArchiveUpdateProperties class.
     */
    public ArchiveUpdateProperties() {
    }

    /**
     * Get the publishedVersion property: The published version of the archive.
     * 
     * @return the publishedVersion value.
     */
    public String publishedVersion() {
        return this.publishedVersion;
    }

    /**
     * Set the publishedVersion property: The published version of the archive.
     * 
     * @param publishedVersion the publishedVersion value to set.
     * @return the ArchiveUpdateProperties object itself.
     */
    public ArchiveUpdateProperties withPublishedVersion(String publishedVersion) {
        this.publishedVersion = publishedVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("publishedVersion", this.publishedVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArchiveUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArchiveUpdateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ArchiveUpdateProperties.
     */
    public static ArchiveUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArchiveUpdateProperties deserializedArchiveUpdateProperties = new ArchiveUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publishedVersion".equals(fieldName)) {
                    deserializedArchiveUpdateProperties.publishedVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArchiveUpdateProperties;
        });
    }
}
