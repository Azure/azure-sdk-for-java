// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The parameters for a docker quick build.
 */
@Fluent
public final class DockerBuildRequest extends RunRequest {
    /*
     * The type of the run request.
     */
    private String type = "DockerBuildRequest";

    /*
     * The fully qualified image names including the repository and tag.
     */
    private List<String> imageNames;

    /*
     * The value of this property indicates whether the image built should be pushed to the registry or not.
     */
    private Boolean isPushEnabled;

    /*
     * The value of this property indicates whether the image cache is enabled or not.
     */
    private Boolean noCache;

    /*
     * The Docker file path relative to the source location.
     */
    private String dockerFilePath;

    /*
     * The name of the target build stage for the docker build.
     */
    private String target;

    /*
     * The collection of override arguments to be used when executing the run.
     */
    private List<Argument> arguments;

    /*
     * Run timeout in seconds.
     */
    private Integer timeout;

    /*
     * The platform properties against which the run has to happen.
     */
    private PlatformProperties platform;

    /*
     * The machine configuration of the run agent.
     */
    private AgentProperties agentConfiguration;

    /*
     * The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
     * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
     */
    private String sourceLocation;

    /*
     * The properties that describes a set of credentials that will be used when this run is invoked.
     */
    private Credentials credentials;

    /**
     * Creates an instance of DockerBuildRequest class.
     */
    public DockerBuildRequest() {
    }

    /**
     * Get the type property: The type of the run request.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the imageNames property: The fully qualified image names including the repository and tag.
     * 
     * @return the imageNames value.
     */
    public List<String> imageNames() {
        return this.imageNames;
    }

    /**
     * Set the imageNames property: The fully qualified image names including the repository and tag.
     * 
     * @param imageNames the imageNames value to set.
     * @return the DockerBuildRequest object itself.
     */
    public DockerBuildRequest withImageNames(List<String> imageNames) {
        this.imageNames = imageNames;
        return this;
    }

    /**
     * Get the isPushEnabled property: The value of this property indicates whether the image built should be pushed to
     * the registry or not.
     * 
     * @return the isPushEnabled value.
     */
    public Boolean isPushEnabled() {
        return this.isPushEnabled;
    }

    /**
     * Set the isPushEnabled property: The value of this property indicates whether the image built should be pushed to
     * the registry or not.
     * 
     * @param isPushEnabled the isPushEnabled value to set.
     * @return the DockerBuildRequest object itself.
     */
    public DockerBuildRequest withIsPushEnabled(Boolean isPushEnabled) {
        this.isPushEnabled = isPushEnabled;
        return this;
    }

    /**
     * Get the noCache property: The value of this property indicates whether the image cache is enabled or not.
     * 
     * @return the noCache value.
     */
    public Boolean noCache() {
        return this.noCache;
    }

    /**
     * Set the noCache property: The value of this property indicates whether the image cache is enabled or not.
     * 
     * @param noCache the noCache value to set.
     * @return the DockerBuildRequest object itself.
     */
    public DockerBuildRequest withNoCache(Boolean noCache) {
        this.noCache = noCache;
        return this;
    }

    /**
     * Get the dockerFilePath property: The Docker file path relative to the source location.
     * 
     * @return the dockerFilePath value.
     */
    public String dockerFilePath() {
        return this.dockerFilePath;
    }

    /**
     * Set the dockerFilePath property: The Docker file path relative to the source location.
     * 
     * @param dockerFilePath the dockerFilePath value to set.
     * @return the DockerBuildRequest object itself.
     */
    public DockerBuildRequest withDockerFilePath(String dockerFilePath) {
        this.dockerFilePath = dockerFilePath;
        return this;
    }

    /**
     * Get the target property: The name of the target build stage for the docker build.
     * 
     * @return the target value.
     */
    public String target() {
        return this.target;
    }

    /**
     * Set the target property: The name of the target build stage for the docker build.
     * 
     * @param target the target value to set.
     * @return the DockerBuildRequest object itself.
     */
    public DockerBuildRequest withTarget(String target) {
        this.target = target;
        return this;
    }

    /**
     * Get the arguments property: The collection of override arguments to be used when executing the run.
     * 
     * @return the arguments value.
     */
    public List<Argument> arguments() {
        return this.arguments;
    }

    /**
     * Set the arguments property: The collection of override arguments to be used when executing the run.
     * 
     * @param arguments the arguments value to set.
     * @return the DockerBuildRequest object itself.
     */
    public DockerBuildRequest withArguments(List<Argument> arguments) {
        this.arguments = arguments;
        return this;
    }

    /**
     * Get the timeout property: Run timeout in seconds.
     * 
     * @return the timeout value.
     */
    public Integer timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: Run timeout in seconds.
     * 
     * @param timeout the timeout value to set.
     * @return the DockerBuildRequest object itself.
     */
    public DockerBuildRequest withTimeout(Integer timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the platform property: The platform properties against which the run has to happen.
     * 
     * @return the platform value.
     */
    public PlatformProperties platform() {
        return this.platform;
    }

    /**
     * Set the platform property: The platform properties against which the run has to happen.
     * 
     * @param platform the platform value to set.
     * @return the DockerBuildRequest object itself.
     */
    public DockerBuildRequest withPlatform(PlatformProperties platform) {
        this.platform = platform;
        return this;
    }

    /**
     * Get the agentConfiguration property: The machine configuration of the run agent.
     * 
     * @return the agentConfiguration value.
     */
    public AgentProperties agentConfiguration() {
        return this.agentConfiguration;
    }

    /**
     * Set the agentConfiguration property: The machine configuration of the run agent.
     * 
     * @param agentConfiguration the agentConfiguration value to set.
     * @return the DockerBuildRequest object itself.
     */
    public DockerBuildRequest withAgentConfiguration(AgentProperties agentConfiguration) {
        this.agentConfiguration = agentConfiguration;
        return this;
    }

    /**
     * Get the sourceLocation property: The URL(absolute or relative) of the source context. It can be an URL to a tar
     * or git repository.
     * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
     * 
     * @return the sourceLocation value.
     */
    public String sourceLocation() {
        return this.sourceLocation;
    }

    /**
     * Set the sourceLocation property: The URL(absolute or relative) of the source context. It can be an URL to a tar
     * or git repository.
     * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
     * 
     * @param sourceLocation the sourceLocation value to set.
     * @return the DockerBuildRequest object itself.
     */
    public DockerBuildRequest withSourceLocation(String sourceLocation) {
        this.sourceLocation = sourceLocation;
        return this;
    }

    /**
     * Get the credentials property: The properties that describes a set of credentials that will be used when this run
     * is invoked.
     * 
     * @return the credentials value.
     */
    public Credentials credentials() {
        return this.credentials;
    }

    /**
     * Set the credentials property: The properties that describes a set of credentials that will be used when this run
     * is invoked.
     * 
     * @param credentials the credentials value to set.
     * @return the DockerBuildRequest object itself.
     */
    public DockerBuildRequest withCredentials(Credentials credentials) {
        this.credentials = credentials;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DockerBuildRequest withIsArchiveEnabled(Boolean isArchiveEnabled) {
        super.withIsArchiveEnabled(isArchiveEnabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DockerBuildRequest withAgentPoolName(String agentPoolName) {
        super.withAgentPoolName(agentPoolName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DockerBuildRequest withLogTemplate(String logTemplate) {
        super.withLogTemplate(logTemplate);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (dockerFilePath() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dockerFilePath in model DockerBuildRequest"));
        }
        if (arguments() != null) {
            arguments().forEach(e -> e.validate());
        }
        if (platform() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property platform in model DockerBuildRequest"));
        } else {
            platform().validate();
        }
        if (agentConfiguration() != null) {
            agentConfiguration().validate();
        }
        if (credentials() != null) {
            credentials().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DockerBuildRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("isArchiveEnabled", isArchiveEnabled());
        jsonWriter.writeStringField("agentPoolName", agentPoolName());
        jsonWriter.writeStringField("logTemplate", logTemplate());
        jsonWriter.writeStringField("dockerFilePath", this.dockerFilePath);
        jsonWriter.writeJsonField("platform", this.platform);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeArrayField("imageNames", this.imageNames, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("isPushEnabled", this.isPushEnabled);
        jsonWriter.writeBooleanField("noCache", this.noCache);
        jsonWriter.writeStringField("target", this.target);
        jsonWriter.writeArrayField("arguments", this.arguments, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("timeout", this.timeout);
        jsonWriter.writeJsonField("agentConfiguration", this.agentConfiguration);
        jsonWriter.writeStringField("sourceLocation", this.sourceLocation);
        jsonWriter.writeJsonField("credentials", this.credentials);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DockerBuildRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DockerBuildRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DockerBuildRequest.
     */
    public static DockerBuildRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DockerBuildRequest deserializedDockerBuildRequest = new DockerBuildRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isArchiveEnabled".equals(fieldName)) {
                    deserializedDockerBuildRequest.withIsArchiveEnabled(reader.getNullable(JsonReader::getBoolean));
                } else if ("agentPoolName".equals(fieldName)) {
                    deserializedDockerBuildRequest.withAgentPoolName(reader.getString());
                } else if ("logTemplate".equals(fieldName)) {
                    deserializedDockerBuildRequest.withLogTemplate(reader.getString());
                } else if ("dockerFilePath".equals(fieldName)) {
                    deserializedDockerBuildRequest.dockerFilePath = reader.getString();
                } else if ("platform".equals(fieldName)) {
                    deserializedDockerBuildRequest.platform = PlatformProperties.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    deserializedDockerBuildRequest.type = reader.getString();
                } else if ("imageNames".equals(fieldName)) {
                    List<String> imageNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedDockerBuildRequest.imageNames = imageNames;
                } else if ("isPushEnabled".equals(fieldName)) {
                    deserializedDockerBuildRequest.isPushEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("noCache".equals(fieldName)) {
                    deserializedDockerBuildRequest.noCache = reader.getNullable(JsonReader::getBoolean);
                } else if ("target".equals(fieldName)) {
                    deserializedDockerBuildRequest.target = reader.getString();
                } else if ("arguments".equals(fieldName)) {
                    List<Argument> arguments = reader.readArray(reader1 -> Argument.fromJson(reader1));
                    deserializedDockerBuildRequest.arguments = arguments;
                } else if ("timeout".equals(fieldName)) {
                    deserializedDockerBuildRequest.timeout = reader.getNullable(JsonReader::getInt);
                } else if ("agentConfiguration".equals(fieldName)) {
                    deserializedDockerBuildRequest.agentConfiguration = AgentProperties.fromJson(reader);
                } else if ("sourceLocation".equals(fieldName)) {
                    deserializedDockerBuildRequest.sourceLocation = reader.getString();
                } else if ("credentials".equals(fieldName)) {
                    deserializedDockerBuildRequest.credentials = Credentials.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDockerBuildRequest;
        });
    }
}
