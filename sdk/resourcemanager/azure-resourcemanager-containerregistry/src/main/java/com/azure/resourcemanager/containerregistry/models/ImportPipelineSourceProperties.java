// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of the import pipeline source.
 */
@Fluent
public final class ImportPipelineSourceProperties implements JsonSerializable<ImportPipelineSourceProperties> {
    /*
     * The type of source for the import pipeline.
     */
    private PipelineSourceType type;

    /*
     * The source uri of the import pipeline.
     * When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
     * When 'AzureStorageBlobContainer': "https://accountName.blob.core.windows.net/containerName"
     */
    private String uri;

    /*
     * They key vault secret uri to obtain the source storage SAS token.
     */
    private String keyVaultUri;

    /**
     * Creates an instance of ImportPipelineSourceProperties class.
     */
    public ImportPipelineSourceProperties() {
    }

    /**
     * Get the type property: The type of source for the import pipeline.
     * 
     * @return the type value.
     */
    public PipelineSourceType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of source for the import pipeline.
     * 
     * @param type the type value to set.
     * @return the ImportPipelineSourceProperties object itself.
     */
    public ImportPipelineSourceProperties withType(PipelineSourceType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the uri property: The source uri of the import pipeline.
     * When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
     * When 'AzureStorageBlobContainer': "https://accountName.blob.core.windows.net/containerName".
     * 
     * @return the uri value.
     */
    public String uri() {
        return this.uri;
    }

    /**
     * Set the uri property: The source uri of the import pipeline.
     * When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
     * When 'AzureStorageBlobContainer': "https://accountName.blob.core.windows.net/containerName".
     * 
     * @param uri the uri value to set.
     * @return the ImportPipelineSourceProperties object itself.
     */
    public ImportPipelineSourceProperties withUri(String uri) {
        this.uri = uri;
        return this;
    }

    /**
     * Get the keyVaultUri property: They key vault secret uri to obtain the source storage SAS token.
     * 
     * @return the keyVaultUri value.
     */
    public String keyVaultUri() {
        return this.keyVaultUri;
    }

    /**
     * Set the keyVaultUri property: They key vault secret uri to obtain the source storage SAS token.
     * 
     * @param keyVaultUri the keyVaultUri value to set.
     * @return the ImportPipelineSourceProperties object itself.
     */
    public ImportPipelineSourceProperties withKeyVaultUri(String keyVaultUri) {
        this.keyVaultUri = keyVaultUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyVaultUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property keyVaultUri in model ImportPipelineSourceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ImportPipelineSourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyVaultUri", this.keyVaultUri);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("uri", this.uri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImportPipelineSourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImportPipelineSourceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImportPipelineSourceProperties.
     */
    public static ImportPipelineSourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImportPipelineSourceProperties deserializedImportPipelineSourceProperties
                = new ImportPipelineSourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyVaultUri".equals(fieldName)) {
                    deserializedImportPipelineSourceProperties.keyVaultUri = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedImportPipelineSourceProperties.type = PipelineSourceType.fromString(reader.getString());
                } else if ("uri".equals(fieldName)) {
                    deserializedImportPipelineSourceProperties.uri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImportPipelineSourceProperties;
        });
    }
}
