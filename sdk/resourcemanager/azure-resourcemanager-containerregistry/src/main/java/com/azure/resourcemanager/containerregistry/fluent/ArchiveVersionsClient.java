// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.containerregistry.fluent.models.ArchiveVersionInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ArchiveVersionsClient.
 */
public interface ArchiveVersionsClient {
    /**
     * Lists all archive versions for the specified container registry, repository type and archive name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a request to list export pipelines for a container registry as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<ArchiveVersionInner> listAsync(String resourceGroupName, String registryName, String packageType,
        String archiveName);

    /**
     * Lists all archive versions for the specified container registry, repository type and archive name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a request to list export pipelines for a container registry as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ArchiveVersionInner> list(String resourceGroupName, String registryName, String packageType,
        String archiveName);

    /**
     * Lists all archive versions for the specified container registry, repository type and archive name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a request to list export pipelines for a container registry as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ArchiveVersionInner> list(String resourceGroupName, String registryName, String packageType,
        String archiveName, Context context);

    /**
     * Gets the properties of the archive version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the archive version along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<ArchiveVersionInner>> getWithResponseAsync(String resourceGroupName, String registryName,
        String packageType, String archiveName, String archiveVersionName);

    /**
     * Gets the properties of the archive version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the archive version on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ArchiveVersionInner> getAsync(String resourceGroupName, String registryName, String packageType,
        String archiveName, String archiveVersionName);

    /**
     * Gets the properties of the archive version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the archive version along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ArchiveVersionInner> getWithResponse(String resourceGroupName, String registryName, String packageType,
        String archiveName, String archiveVersionName, Context context);

    /**
     * Gets the properties of the archive version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the archive version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ArchiveVersionInner get(String resourceGroupName, String registryName, String packageType, String archiveName,
        String archiveVersionName);

    /**
     * Creates a archive for a container registry with the specified parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an object that represents an export pipeline for a container registry along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String registryName,
        String packageType, String archiveName, String archiveVersionName);

    /**
     * Creates a archive for a container registry with the specified parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an object that represents an export pipeline for a container
     * registry.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    PollerFlux<PollResult<ArchiveVersionInner>, ArchiveVersionInner> beginCreateAsync(String resourceGroupName,
        String registryName, String packageType, String archiveName, String archiveVersionName);

    /**
     * Creates a archive for a container registry with the specified parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an object that represents an export pipeline for a container
     * registry.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ArchiveVersionInner>, ArchiveVersionInner> beginCreate(String resourceGroupName,
        String registryName, String packageType, String archiveName, String archiveVersionName);

    /**
     * Creates a archive for a container registry with the specified parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an object that represents an export pipeline for a container
     * registry.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ArchiveVersionInner>, ArchiveVersionInner> beginCreate(String resourceGroupName,
        String registryName, String packageType, String archiveName, String archiveVersionName, Context context);

    /**
     * Creates a archive for a container registry with the specified parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an object that represents an export pipeline for a container registry on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ArchiveVersionInner> createAsync(String resourceGroupName, String registryName, String packageType,
        String archiveName, String archiveVersionName);

    /**
     * Creates a archive for a container registry with the specified parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an object that represents an export pipeline for a container registry.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ArchiveVersionInner create(String resourceGroupName, String registryName, String packageType, String archiveName,
        String archiveVersionName);

    /**
     * Creates a archive for a container registry with the specified parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an object that represents an export pipeline for a container registry.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ArchiveVersionInner create(String resourceGroupName, String registryName, String packageType, String archiveName,
        String archiveVersionName, Context context);

    /**
     * Deletes a archive version from a container registry.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String registryName,
        String packageType, String archiveName, String archiveVersionName);

    /**
     * Deletes a archive version from a container registry.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String registryName,
        String packageType, String archiveName, String archiveVersionName);

    /**
     * Deletes a archive version from a container registry.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String registryName, String packageType,
        String archiveName, String archiveVersionName);

    /**
     * Deletes a archive version from a container registry.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String registryName, String packageType,
        String archiveName, String archiveVersionName, Context context);

    /**
     * Deletes a archive version from a container registry.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteAsync(String resourceGroupName, String registryName, String packageType, String archiveName,
        String archiveVersionName);

    /**
     * Deletes a archive version from a container registry.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String registryName, String packageType, String archiveName,
        String archiveVersionName);

    /**
     * Deletes a archive version from a container registry.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param packageType The type of the package resource.
     * @param archiveName The name of the archive resource.
     * @param archiveVersionName The name of the archive version resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String registryName, String packageType, String archiveName,
        String archiveVersionName, Context context);
}
