// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of the archive package source.
 */
@Fluent
public final class DebianArchivePackageSourceProperties extends ArchivePackageSourceProperties {
    /*
     * Upstream Debian distribution Name.
     */
    private String distributionName;

    /**
     * Creates an instance of DebianArchivePackageSourceProperties class.
     */
    public DebianArchivePackageSourceProperties() {
    }

    /**
     * Get the distributionName property: Upstream Debian distribution Name.
     * 
     * @return the distributionName value.
     */
    public String distributionName() {
        return this.distributionName;
    }

    /**
     * Set the distributionName property: Upstream Debian distribution Name.
     * 
     * @param distributionName the distributionName value to set.
     * @return the DebianArchivePackageSourceProperties object itself.
     */
    public DebianArchivePackageSourceProperties withDistributionName(String distributionName) {
        this.distributionName = distributionName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DebianArchivePackageSourceProperties withType(PackageSourceType type) {
        super.withType(type);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DebianArchivePackageSourceProperties withUrl(String url) {
        super.withUrl(url);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", type() == null ? null : type().toString());
        jsonWriter.writeStringField("url", url());
        jsonWriter.writeStringField("distributionName", this.distributionName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DebianArchivePackageSourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DebianArchivePackageSourceProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DebianArchivePackageSourceProperties.
     */
    public static DebianArchivePackageSourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DebianArchivePackageSourceProperties deserializedDebianArchivePackageSourceProperties
                = new DebianArchivePackageSourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedDebianArchivePackageSourceProperties
                        .withType(PackageSourceType.fromString(reader.getString()));
                } else if ("url".equals(fieldName)) {
                    deserializedDebianArchivePackageSourceProperties.withUrl(reader.getString());
                } else if ("distributionName".equals(fieldName)) {
                    deserializedDebianArchivePackageSourceProperties.distributionName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDebianArchivePackageSourceProperties;
        });
    }
}
