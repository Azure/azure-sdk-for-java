// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerregistry.models.PipelineRunRequest;
import com.azure.resourcemanager.containerregistry.models.PipelineRunResponse;
import com.azure.resourcemanager.containerregistry.models.ProvisioningState;
import java.io.IOException;

/**
 * The properties of a pipeline run.
 */
@Fluent
public final class PipelineRunProperties implements JsonSerializable<PipelineRunProperties> {
    /*
     * The provisioning state of a pipeline run.
     */
    private ProvisioningState provisioningState;

    /*
     * The request parameters for a pipeline run.
     */
    private PipelineRunRequest request;

    /*
     * The response of a pipeline run.
     */
    private PipelineRunResponse response;

    /*
     * How the pipeline run should be forced to recreate even if the pipeline run configuration has not changed.
     */
    private String forceUpdateTag;

    /**
     * Creates an instance of PipelineRunProperties class.
     */
    public PipelineRunProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of a pipeline run.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the request property: The request parameters for a pipeline run.
     * 
     * @return the request value.
     */
    public PipelineRunRequest request() {
        return this.request;
    }

    /**
     * Set the request property: The request parameters for a pipeline run.
     * 
     * @param request the request value to set.
     * @return the PipelineRunProperties object itself.
     */
    public PipelineRunProperties withRequest(PipelineRunRequest request) {
        this.request = request;
        return this;
    }

    /**
     * Get the response property: The response of a pipeline run.
     * 
     * @return the response value.
     */
    public PipelineRunResponse response() {
        return this.response;
    }

    /**
     * Get the forceUpdateTag property: How the pipeline run should be forced to recreate even if the pipeline run
     * configuration has not changed.
     * 
     * @return the forceUpdateTag value.
     */
    public String forceUpdateTag() {
        return this.forceUpdateTag;
    }

    /**
     * Set the forceUpdateTag property: How the pipeline run should be forced to recreate even if the pipeline run
     * configuration has not changed.
     * 
     * @param forceUpdateTag the forceUpdateTag value to set.
     * @return the PipelineRunProperties object itself.
     */
    public PipelineRunProperties withForceUpdateTag(String forceUpdateTag) {
        this.forceUpdateTag = forceUpdateTag;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (request() != null) {
            request().validate();
        }
        if (response() != null) {
            response().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("request", this.request);
        jsonWriter.writeStringField("forceUpdateTag", this.forceUpdateTag);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineRunProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineRunProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PipelineRunProperties.
     */
    public static PipelineRunProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineRunProperties deserializedPipelineRunProperties = new PipelineRunProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedPipelineRunProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("request".equals(fieldName)) {
                    deserializedPipelineRunProperties.request = PipelineRunRequest.fromJson(reader);
                } else if ("response".equals(fieldName)) {
                    deserializedPipelineRunProperties.response = PipelineRunResponse.fromJson(reader);
                } else if ("forceUpdateTag".equals(fieldName)) {
                    deserializedPipelineRunProperties.forceUpdateTag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineRunProperties;
        });
    }
}
