// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The PipelineTriggerProperties model.
 */
@Fluent
public final class PipelineTriggerProperties implements JsonSerializable<PipelineTriggerProperties> {
    /*
     * The source trigger properties of the pipeline.
     */
    private PipelineSourceTriggerProperties sourceTrigger;

    /**
     * Creates an instance of PipelineTriggerProperties class.
     */
    public PipelineTriggerProperties() {
    }

    /**
     * Get the sourceTrigger property: The source trigger properties of the pipeline.
     * 
     * @return the sourceTrigger value.
     */
    public PipelineSourceTriggerProperties sourceTrigger() {
        return this.sourceTrigger;
    }

    /**
     * Set the sourceTrigger property: The source trigger properties of the pipeline.
     * 
     * @param sourceTrigger the sourceTrigger value to set.
     * @return the PipelineTriggerProperties object itself.
     */
    public PipelineTriggerProperties withSourceTrigger(PipelineSourceTriggerProperties sourceTrigger) {
        this.sourceTrigger = sourceTrigger;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceTrigger() != null) {
            sourceTrigger().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sourceTrigger", this.sourceTrigger);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineTriggerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineTriggerProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PipelineTriggerProperties.
     */
    public static PipelineTriggerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineTriggerProperties deserializedPipelineTriggerProperties = new PipelineTriggerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceTrigger".equals(fieldName)) {
                    deserializedPipelineTriggerProperties.sourceTrigger
                        = PipelineSourceTriggerProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineTriggerProperties;
        });
    }
}
