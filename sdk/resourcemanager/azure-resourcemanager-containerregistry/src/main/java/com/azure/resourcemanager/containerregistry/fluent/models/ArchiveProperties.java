// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerregistry.models.ArchivePackageSourceProperties;
import com.azure.resourcemanager.containerregistry.models.ProvisioningState;
import java.io.IOException;

/**
 * The properties of a archive.
 */
@Fluent
public class ArchiveProperties implements JsonSerializable<ArchiveProperties> {
    /*
     * The package source of the archive.
     */
    private ArchivePackageSourceProperties packageSource;

    /*
     * The published version of the archive.
     */
    private String publishedVersion;

    /*
     * The repositoryEndpointPrefix property.
     */
    private String repositoryEndpointPrefix;

    /*
     * The repositoryEndpoint property.
     */
    private String repositoryEndpoint;

    /*
     * The provisioning state of the archive at the time the operation was called.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ArchiveProperties class.
     */
    public ArchiveProperties() {
    }

    /**
     * Get the packageSource property: The package source of the archive.
     * 
     * @return the packageSource value.
     */
    public ArchivePackageSourceProperties packageSource() {
        return this.packageSource;
    }

    /**
     * Set the packageSource property: The package source of the archive.
     * 
     * @param packageSource the packageSource value to set.
     * @return the ArchiveProperties object itself.
     */
    public ArchiveProperties withPackageSource(ArchivePackageSourceProperties packageSource) {
        this.packageSource = packageSource;
        return this;
    }

    /**
     * Get the publishedVersion property: The published version of the archive.
     * 
     * @return the publishedVersion value.
     */
    public String publishedVersion() {
        return this.publishedVersion;
    }

    /**
     * Set the publishedVersion property: The published version of the archive.
     * 
     * @param publishedVersion the publishedVersion value to set.
     * @return the ArchiveProperties object itself.
     */
    public ArchiveProperties withPublishedVersion(String publishedVersion) {
        this.publishedVersion = publishedVersion;
        return this;
    }

    /**
     * Get the repositoryEndpointPrefix property: The repositoryEndpointPrefix property.
     * 
     * @return the repositoryEndpointPrefix value.
     */
    public String repositoryEndpointPrefix() {
        return this.repositoryEndpointPrefix;
    }

    /**
     * Set the repositoryEndpointPrefix property: The repositoryEndpointPrefix property.
     * 
     * @param repositoryEndpointPrefix the repositoryEndpointPrefix value to set.
     * @return the ArchiveProperties object itself.
     */
    public ArchiveProperties withRepositoryEndpointPrefix(String repositoryEndpointPrefix) {
        this.repositoryEndpointPrefix = repositoryEndpointPrefix;
        return this;
    }

    /**
     * Get the repositoryEndpoint property: The repositoryEndpoint property.
     * 
     * @return the repositoryEndpoint value.
     */
    public String repositoryEndpoint() {
        return this.repositoryEndpoint;
    }

    /**
     * Set the repositoryEndpoint property: The repositoryEndpoint property.
     * 
     * @param repositoryEndpoint the repositoryEndpoint value to set.
     * @return the ArchiveProperties object itself.
     */
    ArchiveProperties withRepositoryEndpoint(String repositoryEndpoint) {
        this.repositoryEndpoint = repositoryEndpoint;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the archive at the time the operation was called.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The provisioning state of the archive at the time the operation was called.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the ArchiveProperties object itself.
     */
    ArchiveProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (packageSource() != null) {
            packageSource().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("packageSource", this.packageSource);
        jsonWriter.writeStringField("publishedVersion", this.publishedVersion);
        jsonWriter.writeStringField("repositoryEndpointPrefix", this.repositoryEndpointPrefix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArchiveProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArchiveProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ArchiveProperties.
     */
    public static ArchiveProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArchiveProperties deserializedArchiveProperties = new ArchiveProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("packageSource".equals(fieldName)) {
                    deserializedArchiveProperties.packageSource = ArchivePackageSourceProperties.fromJson(reader);
                } else if ("publishedVersion".equals(fieldName)) {
                    deserializedArchiveProperties.publishedVersion = reader.getString();
                } else if ("repositoryEndpointPrefix".equals(fieldName)) {
                    deserializedArchiveProperties.repositoryEndpointPrefix = reader.getString();
                } else if ("repositoryEndpoint".equals(fieldName)) {
                    deserializedArchiveProperties.repositoryEndpoint = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedArchiveProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArchiveProperties;
        });
    }
}
