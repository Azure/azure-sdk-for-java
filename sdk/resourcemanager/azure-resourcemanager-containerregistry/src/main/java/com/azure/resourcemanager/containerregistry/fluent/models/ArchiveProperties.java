// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.containerregistry.models.ArchivePackageSourceProperties;
import com.azure.resourcemanager.containerregistry.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The properties of a archive.
 */
@Fluent
public class ArchiveProperties {
    /*
     * The package source of the archive.
     */
    @JsonProperty(value = "packageSource")
    private ArchivePackageSourceProperties packageSource;

    /*
     * The published version of the archive.
     */
    @JsonProperty(value = "publishedVersion")
    private String publishedVersion;

    /*
     * The repositoryEndpointPrefix property.
     */
    @JsonProperty(value = "repositoryEndpointPrefix")
    private String repositoryEndpointPrefix;

    /*
     * The repositoryEndpoint property.
     */
    @JsonProperty(value = "repositoryEndpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String repositoryEndpoint;

    /*
     * The provisioning state of the archive at the time the operation was called.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ArchiveProperties class.
     */
    public ArchiveProperties() {
    }

    /**
     * Get the packageSource property: The package source of the archive.
     * 
     * @return the packageSource value.
     */
    public ArchivePackageSourceProperties packageSource() {
        return this.packageSource;
    }

    /**
     * Set the packageSource property: The package source of the archive.
     * 
     * @param packageSource the packageSource value to set.
     * @return the ArchiveProperties object itself.
     */
    public ArchiveProperties withPackageSource(ArchivePackageSourceProperties packageSource) {
        this.packageSource = packageSource;
        return this;
    }

    /**
     * Get the publishedVersion property: The published version of the archive.
     * 
     * @return the publishedVersion value.
     */
    public String publishedVersion() {
        return this.publishedVersion;
    }

    /**
     * Set the publishedVersion property: The published version of the archive.
     * 
     * @param publishedVersion the publishedVersion value to set.
     * @return the ArchiveProperties object itself.
     */
    public ArchiveProperties withPublishedVersion(String publishedVersion) {
        this.publishedVersion = publishedVersion;
        return this;
    }

    /**
     * Get the repositoryEndpointPrefix property: The repositoryEndpointPrefix property.
     * 
     * @return the repositoryEndpointPrefix value.
     */
    public String repositoryEndpointPrefix() {
        return this.repositoryEndpointPrefix;
    }

    /**
     * Set the repositoryEndpointPrefix property: The repositoryEndpointPrefix property.
     * 
     * @param repositoryEndpointPrefix the repositoryEndpointPrefix value to set.
     * @return the ArchiveProperties object itself.
     */
    public ArchiveProperties withRepositoryEndpointPrefix(String repositoryEndpointPrefix) {
        this.repositoryEndpointPrefix = repositoryEndpointPrefix;
        return this;
    }

    /**
     * Get the repositoryEndpoint property: The repositoryEndpoint property.
     * 
     * @return the repositoryEndpoint value.
     */
    public String repositoryEndpoint() {
        return this.repositoryEndpoint;
    }

    /**
     * Get the provisioningState property: The provisioning state of the archive at the time the operation was called.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (packageSource() != null) {
            packageSource().validate();
        }
    }
}
