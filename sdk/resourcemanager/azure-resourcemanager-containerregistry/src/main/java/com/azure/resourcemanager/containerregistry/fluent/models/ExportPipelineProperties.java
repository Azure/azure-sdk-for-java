// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerregistry.models.ExportPipelineTargetProperties;
import com.azure.resourcemanager.containerregistry.models.PipelineOptions;
import com.azure.resourcemanager.containerregistry.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * The properties of an export pipeline.
 */
@Fluent
public final class ExportPipelineProperties implements JsonSerializable<ExportPipelineProperties> {
    /*
     * The target properties of the export pipeline.
     */
    private ExportPipelineTargetProperties target;

    /*
     * The list of all options configured for the pipeline.
     */
    private List<PipelineOptions> options;

    /*
     * The provisioning state of the pipeline at the time the operation was called.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ExportPipelineProperties class.
     */
    public ExportPipelineProperties() {
    }

    /**
     * Get the target property: The target properties of the export pipeline.
     * 
     * @return the target value.
     */
    public ExportPipelineTargetProperties target() {
        return this.target;
    }

    /**
     * Set the target property: The target properties of the export pipeline.
     * 
     * @param target the target value to set.
     * @return the ExportPipelineProperties object itself.
     */
    public ExportPipelineProperties withTarget(ExportPipelineTargetProperties target) {
        this.target = target;
        return this;
    }

    /**
     * Get the options property: The list of all options configured for the pipeline.
     * 
     * @return the options value.
     */
    public List<PipelineOptions> options() {
        return this.options;
    }

    /**
     * Set the options property: The list of all options configured for the pipeline.
     * 
     * @param options the options value to set.
     * @return the ExportPipelineProperties object itself.
     */
    public ExportPipelineProperties withOptions(List<PipelineOptions> options) {
        this.options = options;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the pipeline at the time the operation was called.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (target() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property target in model ExportPipelineProperties"));
        } else {
            target().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExportPipelineProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("target", this.target);
        jsonWriter.writeArrayField("options", this.options,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExportPipelineProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExportPipelineProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExportPipelineProperties.
     */
    public static ExportPipelineProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExportPipelineProperties deserializedExportPipelineProperties = new ExportPipelineProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("target".equals(fieldName)) {
                    deserializedExportPipelineProperties.target = ExportPipelineTargetProperties.fromJson(reader);
                } else if ("options".equals(fieldName)) {
                    List<PipelineOptions> options
                        = reader.readArray(reader1 -> PipelineOptions.fromString(reader1.getString()));
                    deserializedExportPipelineProperties.options = options;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedExportPipelineProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExportPipelineProperties;
        });
    }
}
