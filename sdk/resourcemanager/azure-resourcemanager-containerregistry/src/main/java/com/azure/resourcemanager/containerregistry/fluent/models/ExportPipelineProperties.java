// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerregistry.models.ExportPipelineTargetProperties;
import com.azure.resourcemanager.containerregistry.models.PipelineOptions;
import com.azure.resourcemanager.containerregistry.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The properties of an export pipeline. */
@Fluent
public final class ExportPipelineProperties {
    /*
     * The target properties of the export pipeline.
     */
    @JsonProperty(value = "target", required = true)
    private ExportPipelineTargetProperties target;

    /*
     * The list of all options configured for the pipeline.
     */
    @JsonProperty(value = "options")
    private List<PipelineOptions> options;

    /*
     * The provisioning state of the pipeline at the time the operation was called.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of ExportPipelineProperties class. */
    public ExportPipelineProperties() {
    }

    /**
     * Get the target property: The target properties of the export pipeline.
     *
     * @return the target value.
     */
    public ExportPipelineTargetProperties target() {
        return this.target;
    }

    /**
     * Set the target property: The target properties of the export pipeline.
     *
     * @param target the target value to set.
     * @return the ExportPipelineProperties object itself.
     */
    public ExportPipelineProperties withTarget(ExportPipelineTargetProperties target) {
        this.target = target;
        return this;
    }

    /**
     * Get the options property: The list of all options configured for the pipeline.
     *
     * @return the options value.
     */
    public List<PipelineOptions> options() {
        return this.options;
    }

    /**
     * Set the options property: The list of all options configured for the pipeline.
     *
     * @param options the options value to set.
     * @return the ExportPipelineProperties object itself.
     */
    public ExportPipelineProperties withOptions(List<PipelineOptions> options) {
        this.options = options;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the pipeline at the time the operation was called.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (target() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property target in model ExportPipelineProperties"));
        } else {
            target().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExportPipelineProperties.class);
}
