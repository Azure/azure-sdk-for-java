// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The request properties provided for a pipeline run.
 */
@Fluent
public final class PipelineRunRequest implements JsonSerializable<PipelineRunRequest> {
    /*
     * The resource ID of the pipeline to run.
     */
    private String pipelineResourceId;

    /*
     * List of source artifacts to be transferred by the pipeline.
     * Specify an image by repository ('hello-world'). This will use the 'latest' tag.
     * Specify an image by tag ('hello-world:latest').
     * Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
     */
    private List<String> artifacts;

    /*
     * The source properties of the pipeline run.
     */
    private PipelineRunSourceProperties source;

    /*
     * The target properties of the pipeline run.
     */
    private PipelineRunTargetProperties target;

    /*
     * The digest of the tar used to transfer the artifacts.
     */
    private String catalogDigest;

    /**
     * Creates an instance of PipelineRunRequest class.
     */
    public PipelineRunRequest() {
    }

    /**
     * Get the pipelineResourceId property: The resource ID of the pipeline to run.
     * 
     * @return the pipelineResourceId value.
     */
    public String pipelineResourceId() {
        return this.pipelineResourceId;
    }

    /**
     * Set the pipelineResourceId property: The resource ID of the pipeline to run.
     * 
     * @param pipelineResourceId the pipelineResourceId value to set.
     * @return the PipelineRunRequest object itself.
     */
    public PipelineRunRequest withPipelineResourceId(String pipelineResourceId) {
        this.pipelineResourceId = pipelineResourceId;
        return this;
    }

    /**
     * Get the artifacts property: List of source artifacts to be transferred by the pipeline.
     * Specify an image by repository ('hello-world'). This will use the 'latest' tag.
     * Specify an image by tag ('hello-world:latest').
     * Specify an image by sha256-based manifest digest ('hello-world&#064;sha256:abc123').
     * 
     * @return the artifacts value.
     */
    public List<String> artifacts() {
        return this.artifacts;
    }

    /**
     * Set the artifacts property: List of source artifacts to be transferred by the pipeline.
     * Specify an image by repository ('hello-world'). This will use the 'latest' tag.
     * Specify an image by tag ('hello-world:latest').
     * Specify an image by sha256-based manifest digest ('hello-world&#064;sha256:abc123').
     * 
     * @param artifacts the artifacts value to set.
     * @return the PipelineRunRequest object itself.
     */
    public PipelineRunRequest withArtifacts(List<String> artifacts) {
        this.artifacts = artifacts;
        return this;
    }

    /**
     * Get the source property: The source properties of the pipeline run.
     * 
     * @return the source value.
     */
    public PipelineRunSourceProperties source() {
        return this.source;
    }

    /**
     * Set the source property: The source properties of the pipeline run.
     * 
     * @param source the source value to set.
     * @return the PipelineRunRequest object itself.
     */
    public PipelineRunRequest withSource(PipelineRunSourceProperties source) {
        this.source = source;
        return this;
    }

    /**
     * Get the target property: The target properties of the pipeline run.
     * 
     * @return the target value.
     */
    public PipelineRunTargetProperties target() {
        return this.target;
    }

    /**
     * Set the target property: The target properties of the pipeline run.
     * 
     * @param target the target value to set.
     * @return the PipelineRunRequest object itself.
     */
    public PipelineRunRequest withTarget(PipelineRunTargetProperties target) {
        this.target = target;
        return this;
    }

    /**
     * Get the catalogDigest property: The digest of the tar used to transfer the artifacts.
     * 
     * @return the catalogDigest value.
     */
    public String catalogDigest() {
        return this.catalogDigest;
    }

    /**
     * Set the catalogDigest property: The digest of the tar used to transfer the artifacts.
     * 
     * @param catalogDigest the catalogDigest value to set.
     * @return the PipelineRunRequest object itself.
     */
    public PipelineRunRequest withCatalogDigest(String catalogDigest) {
        this.catalogDigest = catalogDigest;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (source() != null) {
            source().validate();
        }
        if (target() != null) {
            target().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pipelineResourceId", this.pipelineResourceId);
        jsonWriter.writeArrayField("artifacts", this.artifacts, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("source", this.source);
        jsonWriter.writeJsonField("target", this.target);
        jsonWriter.writeStringField("catalogDigest", this.catalogDigest);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineRunRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineRunRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PipelineRunRequest.
     */
    public static PipelineRunRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineRunRequest deserializedPipelineRunRequest = new PipelineRunRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pipelineResourceId".equals(fieldName)) {
                    deserializedPipelineRunRequest.pipelineResourceId = reader.getString();
                } else if ("artifacts".equals(fieldName)) {
                    List<String> artifacts = reader.readArray(reader1 -> reader1.getString());
                    deserializedPipelineRunRequest.artifacts = artifacts;
                } else if ("source".equals(fieldName)) {
                    deserializedPipelineRunRequest.source = PipelineRunSourceProperties.fromJson(reader);
                } else if ("target".equals(fieldName)) {
                    deserializedPipelineRunRequest.target = PipelineRunTargetProperties.fromJson(reader);
                } else if ("catalogDigest".equals(fieldName)) {
                    deserializedPipelineRunRequest.catalogDigest = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineRunRequest;
        });
    }
}
