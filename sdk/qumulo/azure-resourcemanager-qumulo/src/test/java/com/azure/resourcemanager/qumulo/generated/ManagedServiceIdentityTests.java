// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.qumulo.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.qumulo.models.ManagedServiceIdentity;
import com.azure.resourcemanager.qumulo.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.qumulo.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedServiceIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedServiceIdentity model = BinaryData.fromString(
            "{\"principalId\":\"d9397208-8e4a-456f-b682-743e861f9bc8\",\"tenantId\":\"7654d8d1-c5b8-4c12-9be8-ab9d3de1e2f3\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"duuji\":{\"principalId\":\"c67f98f2-839d-4960-9bad-a984335abedf\",\"clientId\":\"5ccc469b-cbe7-4e3b-9156-ee86dcd45758\"},\"czdzev\":{\"principalId\":\"f5fa7c0c-b20d-4c86-b366-9534e07f5200\",\"clientId\":\"d8a0866b-6dff-429e-8a5a-f7f473dc54a4\"},\"krwpdap\":{\"principalId\":\"8eab3fb9-cc3a-4917-82a9-ca5bfa6a6998\",\"clientId\":\"74101884-d32c-4c5b-8744-0dee24fd43fa\"}}}")
            .toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedServiceIdentity model
            = new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("duuji", new UserAssignedIdentity(), "czdzev",
                    new UserAssignedIdentity(), "krwpdap", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
