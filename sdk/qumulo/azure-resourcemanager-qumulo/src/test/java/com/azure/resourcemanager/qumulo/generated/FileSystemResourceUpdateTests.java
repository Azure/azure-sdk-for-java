// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.qumulo.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.qumulo.models.FileSystemResourceUpdate;
import com.azure.resourcemanager.qumulo.models.FileSystemResourceUpdateProperties;
import com.azure.resourcemanager.qumulo.models.ManagedServiceIdentity;
import com.azure.resourcemanager.qumulo.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.qumulo.models.MarketplaceDetails;
import com.azure.resourcemanager.qumulo.models.UserAssignedIdentity;
import com.azure.resourcemanager.qumulo.models.UserDetails;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FileSystemResourceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FileSystemResourceUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"44f32c73-6ec7-4692-bf7d-4c72a1d3e6f0\",\"tenantId\":\"7719e240-7d9f-4c82-801e-7b9e29780f99\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"feusnhut\":{\"principalId\":\"9b8b1629-d3e9-4da3-91df-cf8e898e6e22\",\"clientId\":\"659464cf-5bb5-4a97-976c-d1e38b7b1ee0\"},\"tmrldhugjzzdatq\":{\"principalId\":\"39c7e7cc-087d-4a56-b31a-e7057d2b6921\",\"clientId\":\"e3d62906-9ac2-4af4-89b9-dae2360c4380\"}}},\"tags\":{\"lgphu\":\"cdgea\"},\"properties\":{\"marketplaceDetails\":{\"marketplaceSubscriptionId\":\"dvkaozw\",\"planId\":\"i\",\"offerId\":\"tyhxhurokft\",\"publisherId\":\"olniwpwcukjf\",\"termUnit\":\"iawxklry\",\"marketplaceSubscriptionStatus\":\"Suspended\"},\"userDetails\":{\"email\":\"kbasyypn\"},\"delegatedSubnetId\":\"hsgcbacphejkot\"}}")
            .toObject(FileSystemResourceUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("cdgea", model.tags().get("lgphu"));
        Assertions.assertEquals("dvkaozw", model.properties().marketplaceDetails().marketplaceSubscriptionId());
        Assertions.assertEquals("i", model.properties().marketplaceDetails().planId());
        Assertions.assertEquals("tyhxhurokft", model.properties().marketplaceDetails().offerId());
        Assertions.assertEquals("olniwpwcukjf", model.properties().marketplaceDetails().publisherId());
        Assertions.assertEquals("iawxklry", model.properties().marketplaceDetails().termUnit());
        Assertions.assertEquals("kbasyypn", model.properties().userDetails().email());
        Assertions.assertEquals("hsgcbacphejkot", model.properties().delegatedSubnetId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FileSystemResourceUpdate model
            = new FileSystemResourceUpdate()
                .withIdentity(
                    new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("feusnhut", new UserAssignedIdentity(), "tmrldhugjzzdatq",
                            new UserAssignedIdentity())))
                .withTags(mapOf("lgphu", "cdgea"))
                .withProperties(new FileSystemResourceUpdateProperties()
                    .withMarketplaceDetails(new MarketplaceDetails().withMarketplaceSubscriptionId("dvkaozw")
                        .withPlanId("i")
                        .withOfferId("tyhxhurokft")
                        .withPublisherId("olniwpwcukjf")
                        .withTermUnit("iawxklry"))
                    .withUserDetails(new UserDetails().withEmail("kbasyypn"))
                    .withDelegatedSubnetId("hsgcbacphejkot"));
        model = BinaryData.fromObject(model).toObject(FileSystemResourceUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("cdgea", model.tags().get("lgphu"));
        Assertions.assertEquals("dvkaozw", model.properties().marketplaceDetails().marketplaceSubscriptionId());
        Assertions.assertEquals("i", model.properties().marketplaceDetails().planId());
        Assertions.assertEquals("tyhxhurokft", model.properties().marketplaceDetails().offerId());
        Assertions.assertEquals("olniwpwcukjf", model.properties().marketplaceDetails().publisherId());
        Assertions.assertEquals("iawxklry", model.properties().marketplaceDetails().termUnit());
        Assertions.assertEquals("kbasyypn", model.properties().userDetails().email());
        Assertions.assertEquals("hsgcbacphejkot", model.properties().delegatedSubnetId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
