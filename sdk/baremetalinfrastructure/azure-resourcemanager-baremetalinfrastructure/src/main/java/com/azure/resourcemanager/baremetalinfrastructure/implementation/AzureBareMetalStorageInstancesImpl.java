// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.baremetalinfrastructure.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.baremetalinfrastructure.fluent.AzureBareMetalStorageInstancesClient;
import com.azure.resourcemanager.baremetalinfrastructure.fluent.models.AzureBareMetalStorageInstanceInner;
import com.azure.resourcemanager.baremetalinfrastructure.models.AzureBareMetalStorageInstance;
import com.azure.resourcemanager.baremetalinfrastructure.models.AzureBareMetalStorageInstances;

public final class AzureBareMetalStorageInstancesImpl implements AzureBareMetalStorageInstances {
    private static final ClientLogger LOGGER = new ClientLogger(AzureBareMetalStorageInstancesImpl.class);

    private final AzureBareMetalStorageInstancesClient innerClient;

    private final com.azure.resourcemanager.baremetalinfrastructure.BareMetalInfrastructureManager serviceManager;

    public AzureBareMetalStorageInstancesImpl(
        AzureBareMetalStorageInstancesClient innerClient,
        com.azure.resourcemanager.baremetalinfrastructure.BareMetalInfrastructureManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AzureBareMetalStorageInstance> list() {
        PagedIterable<AzureBareMetalStorageInstanceInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new AzureBareMetalStorageInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<AzureBareMetalStorageInstance> list(Context context) {
        PagedIterable<AzureBareMetalStorageInstanceInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new AzureBareMetalStorageInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<AzureBareMetalStorageInstance> listByResourceGroup(String resourceGroupName) {
        PagedIterable<AzureBareMetalStorageInstanceInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new AzureBareMetalStorageInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<AzureBareMetalStorageInstance> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<AzureBareMetalStorageInstanceInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new AzureBareMetalStorageInstanceImpl(inner1, this.manager()));
    }

    public Response<AzureBareMetalStorageInstance> getByResourceGroupWithResponse(
        String resourceGroupName, String azureBareMetalStorageInstanceName, Context context) {
        Response<AzureBareMetalStorageInstanceInner> inner =
            this
                .serviceClient()
                .getByResourceGroupWithResponse(resourceGroupName, azureBareMetalStorageInstanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AzureBareMetalStorageInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AzureBareMetalStorageInstance getByResourceGroup(
        String resourceGroupName, String azureBareMetalStorageInstanceName) {
        AzureBareMetalStorageInstanceInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, azureBareMetalStorageInstanceName);
        if (inner != null) {
            return new AzureBareMetalStorageInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(
        String resourceGroupName, String azureBareMetalStorageInstanceName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, azureBareMetalStorageInstanceName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String azureBareMetalStorageInstanceName) {
        this.serviceClient().delete(resourceGroupName, azureBareMetalStorageInstanceName);
    }

    public AzureBareMetalStorageInstance getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureBareMetalStorageInstanceName = Utils.getValueFromIdByName(id, "bareMetalStorageInstances");
        if (azureBareMetalStorageInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'bareMetalStorageInstances'.",
                                id)));
        }
        return this
            .getByResourceGroupWithResponse(resourceGroupName, azureBareMetalStorageInstanceName, Context.NONE)
            .getValue();
    }

    public Response<AzureBareMetalStorageInstance> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureBareMetalStorageInstanceName = Utils.getValueFromIdByName(id, "bareMetalStorageInstances");
        if (azureBareMetalStorageInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'bareMetalStorageInstances'.",
                                id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, azureBareMetalStorageInstanceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureBareMetalStorageInstanceName = Utils.getValueFromIdByName(id, "bareMetalStorageInstances");
        if (azureBareMetalStorageInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'bareMetalStorageInstances'.",
                                id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, azureBareMetalStorageInstanceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String azureBareMetalStorageInstanceName = Utils.getValueFromIdByName(id, "bareMetalStorageInstances");
        if (azureBareMetalStorageInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'bareMetalStorageInstances'.",
                                id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, azureBareMetalStorageInstanceName, context);
    }

    private AzureBareMetalStorageInstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.baremetalinfrastructure.BareMetalInfrastructureManager manager() {
        return this.serviceManager;
    }

    public AzureBareMetalStorageInstanceImpl define(String name) {
        return new AzureBareMetalStorageInstanceImpl(name, this.manager());
    }
}
