// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.baremetalinfrastructure.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Detailed BareMetal operation information.
 */
@Immutable
public final class Display implements JsonSerializable<Display> {
    /*
     * The localized friendly form of the resource provider name.
     */
    private String provider;

    /*
     * The localized friendly form of the resource type related to this action/operation.
     */
    private String resource;

    /*
     * The localized friendly name for the operation as shown to the user.
     */
    private String operation;

    /*
     * The localized friendly description for the operation as shown to the user.
     */
    private String description;

    /**
     * Creates an instance of Display class.
     */
    public Display() {
    }

    /**
     * Get the provider property: The localized friendly form of the resource provider name.
     * 
     * @return the provider value.
     */
    public String provider() {
        return this.provider;
    }

    /**
     * Get the resource property: The localized friendly form of the resource type related to this action/operation.
     * 
     * @return the resource value.
     */
    public String resource() {
        return this.resource;
    }

    /**
     * Get the operation property: The localized friendly name for the operation as shown to the user.
     * 
     * @return the operation value.
     */
    public String operation() {
        return this.operation;
    }

    /**
     * Get the description property: The localized friendly description for the operation as shown to the user.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Display from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Display if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Display.
     */
    public static Display fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Display deserializedDisplay = new Display();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provider".equals(fieldName)) {
                    deserializedDisplay.provider = reader.getString();
                } else if ("resource".equals(fieldName)) {
                    deserializedDisplay.resource = reader.getString();
                } else if ("operation".equals(fieldName)) {
                    deserializedDisplay.operation = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedDisplay.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDisplay;
        });
    }
}
