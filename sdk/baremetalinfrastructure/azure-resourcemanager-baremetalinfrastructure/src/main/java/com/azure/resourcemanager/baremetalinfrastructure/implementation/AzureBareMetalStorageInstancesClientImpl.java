// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.baremetalinfrastructure.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.baremetalinfrastructure.fluent.AzureBareMetalStorageInstancesClient;
import com.azure.resourcemanager.baremetalinfrastructure.fluent.models.AzureBareMetalStorageInstanceInner;
import com.azure.resourcemanager.baremetalinfrastructure.models.AzureBareMetalStorageInstancesListResult;
import com.azure.resourcemanager.baremetalinfrastructure.models.Tags;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in AzureBareMetalStorageInstancesClient. */
public final class AzureBareMetalStorageInstancesClientImpl implements AzureBareMetalStorageInstancesClient {
    /** The proxy service used to perform REST calls. */
    private final AzureBareMetalStorageInstancesService service;

    /** The service client containing this operation class. */
    private final BareMetalInfrastructureClientImpl client;

    /**
     * Initializes an instance of AzureBareMetalStorageInstancesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    AzureBareMetalStorageInstancesClientImpl(BareMetalInfrastructureClientImpl client) {
        this.service =
            RestProxy
                .create(
                    AzureBareMetalStorageInstancesService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for BareMetalInfrastructureClientAzureBareMetalStorageInstances to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "BareMetalInfrastruct")
    public interface AzureBareMetalStorageInstancesService {
        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.BareMetalInfrastructure/bareMetalStorageInstances")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AzureBareMetalStorageInstancesListResult>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalStorageInstances")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AzureBareMetalStorageInstancesListResult>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalStorageInstances/{azureBareMetalStorageInstanceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AzureBareMetalStorageInstanceInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("azureBareMetalStorageInstanceName") String azureBareMetalStorageInstanceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalStorageInstances/{azureBareMetalStorageInstanceName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AzureBareMetalStorageInstanceInner>> create(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("azureBareMetalStorageInstanceName") String azureBareMetalStorageInstanceName,
            @BodyParam("application/json") AzureBareMetalStorageInstanceInner requestBodyParameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalStorageInstances/{azureBareMetalStorageInstanceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AzureBareMetalStorageInstanceInner>> update(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("azureBareMetalStorageInstanceName") String azureBareMetalStorageInstanceName,
            @BodyParam("application/json") Tags tagsParameter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BareMetalInfrastructure/bareMetalStorageInstances/{azureBareMetalStorageInstanceName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("azureBareMetalStorageInstanceName") String azureBareMetalStorageInstanceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AzureBareMetalStorageInstancesListResult>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AzureBareMetalStorageInstancesListResult>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets a list of Azure Bare Metal Storage instances in the specified subscription.
     *
     * <p>Gets a list of AzureBareMetalStorage instances in the specified subscription. The operations returns various
     * properties of each Azure Bare Metal Instance.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of AzureBareMetalStorage instances in the specified subscription along with {@link PagedResponse}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AzureBareMetalStorageInstanceInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            accept,
                            context))
            .<PagedResponse<AzureBareMetalStorageInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a list of Azure Bare Metal Storage instances in the specified subscription.
     *
     * <p>Gets a list of AzureBareMetalStorage instances in the specified subscription. The operations returns various
     * properties of each Azure Bare Metal Instance.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of AzureBareMetalStorage instances in the specified subscription along with {@link PagedResponse}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AzureBareMetalStorageInstanceInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets a list of Azure Bare Metal Storage instances in the specified subscription.
     *
     * <p>Gets a list of AzureBareMetalStorage instances in the specified subscription. The operations returns various
     * properties of each Azure Bare Metal Instance.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of AzureBareMetalStorage instances in the specified subscription as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AzureBareMetalStorageInstanceInner> listAsync() {
        return new PagedFlux<>(
            () -> listSinglePageAsync(), nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of Azure Bare Metal Storage instances in the specified subscription.
     *
     * <p>Gets a list of AzureBareMetalStorage instances in the specified subscription. The operations returns various
     * properties of each Azure Bare Metal Instance.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of AzureBareMetalStorage instances in the specified subscription as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AzureBareMetalStorageInstanceInner> listAsync(Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(context), nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets a list of Azure Bare Metal Storage instances in the specified subscription.
     *
     * <p>Gets a list of AzureBareMetalStorage instances in the specified subscription. The operations returns various
     * properties of each Azure Bare Metal Instance.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of AzureBareMetalStorage instances in the specified subscription as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AzureBareMetalStorageInstanceInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * Gets a list of Azure Bare Metal Storage instances in the specified subscription.
     *
     * <p>Gets a list of AzureBareMetalStorage instances in the specified subscription. The operations returns various
     * properties of each Azure Bare Metal Instance.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of AzureBareMetalStorage instances in the specified subscription as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AzureBareMetalStorageInstanceInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * Gets a list of Azure Bare Metal Storage instances in the specified subscription and resource group.
     *
     * <p>Gets a list of AzureBareMetalStorage instances in the specified subscription and resource group. The
     * operations returns various properties of each Azure Bare Metal Instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of AzureBareMetalStorage instances in the specified subscription and resource group along with
     *     {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AzureBareMetalStorageInstanceInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accept,
                            context))
            .<PagedResponse<AzureBareMetalStorageInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a list of Azure Bare Metal Storage instances in the specified subscription and resource group.
     *
     * <p>Gets a list of AzureBareMetalStorage instances in the specified subscription and resource group. The
     * operations returns various properties of each Azure Bare Metal Instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of AzureBareMetalStorage instances in the specified subscription and resource group along with
     *     {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AzureBareMetalStorageInstanceInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets a list of Azure Bare Metal Storage instances in the specified subscription and resource group.
     *
     * <p>Gets a list of AzureBareMetalStorage instances in the specified subscription and resource group. The
     * operations returns various properties of each Azure Bare Metal Instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of AzureBareMetalStorage instances in the specified subscription and resource group as paginated
     *     response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AzureBareMetalStorageInstanceInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of Azure Bare Metal Storage instances in the specified subscription and resource group.
     *
     * <p>Gets a list of AzureBareMetalStorage instances in the specified subscription and resource group. The
     * operations returns various properties of each Azure Bare Metal Instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of AzureBareMetalStorage instances in the specified subscription and resource group as paginated
     *     response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AzureBareMetalStorageInstanceInner> listByResourceGroupAsync(
        String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets a list of Azure Bare Metal Storage instances in the specified subscription and resource group.
     *
     * <p>Gets a list of AzureBareMetalStorage instances in the specified subscription and resource group. The
     * operations returns various properties of each Azure Bare Metal Instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of AzureBareMetalStorage instances in the specified subscription and resource group as paginated
     *     response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AzureBareMetalStorageInstanceInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * Gets a list of Azure Bare Metal Storage instances in the specified subscription and resource group.
     *
     * <p>Gets a list of AzureBareMetalStorage instances in the specified subscription and resource group. The
     * operations returns various properties of each Azure Bare Metal Instance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of AzureBareMetalStorage instances in the specified subscription and resource group as paginated
     *     response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AzureBareMetalStorageInstanceInner> listByResourceGroup(
        String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Gets an Azure Bare Metal Storage instance.
     *
     * <p>Gets an Azure Bare Metal Storage instance for the specified subscription, resource group, and instance name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Bare Metal Storage instance for the specified subscription, resource group, and instance name
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AzureBareMetalStorageInstanceInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String azureBareMetalStorageInstanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureBareMetalStorageInstanceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter azureBareMetalStorageInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            azureBareMetalStorageInstanceName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets an Azure Bare Metal Storage instance.
     *
     * <p>Gets an Azure Bare Metal Storage instance for the specified subscription, resource group, and instance name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Bare Metal Storage instance for the specified subscription, resource group, and instance name
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AzureBareMetalStorageInstanceInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String azureBareMetalStorageInstanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureBareMetalStorageInstanceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter azureBareMetalStorageInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                azureBareMetalStorageInstanceName,
                accept,
                context);
    }

    /**
     * Gets an Azure Bare Metal Storage instance.
     *
     * <p>Gets an Azure Bare Metal Storage instance for the specified subscription, resource group, and instance name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Bare Metal Storage instance for the specified subscription, resource group, and instance name on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AzureBareMetalStorageInstanceInner> getByResourceGroupAsync(
        String resourceGroupName, String azureBareMetalStorageInstanceName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, azureBareMetalStorageInstanceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets an Azure Bare Metal Storage instance.
     *
     * <p>Gets an Azure Bare Metal Storage instance for the specified subscription, resource group, and instance name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Bare Metal Storage instance for the specified subscription, resource group, and instance name
     *     along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AzureBareMetalStorageInstanceInner> getByResourceGroupWithResponse(
        String resourceGroupName, String azureBareMetalStorageInstanceName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, azureBareMetalStorageInstanceName, context)
            .block();
    }

    /**
     * Gets an Azure Bare Metal Storage instance.
     *
     * <p>Gets an Azure Bare Metal Storage instance for the specified subscription, resource group, and instance name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Bare Metal Storage instance for the specified subscription, resource group, and instance name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AzureBareMetalStorageInstanceInner getByResourceGroup(
        String resourceGroupName, String azureBareMetalStorageInstanceName) {
        return getByResourceGroupWithResponse(resourceGroupName, azureBareMetalStorageInstanceName, Context.NONE)
            .getValue();
    }

    /**
     * Create an azure bare metal storage resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @param requestBodyParameters request body for put call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azureBareMetalStorageInstance info on Azure (ARM properties and AzureBareMetalStorage properties) along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AzureBareMetalStorageInstanceInner>> createWithResponseAsync(
        String resourceGroupName,
        String azureBareMetalStorageInstanceName,
        AzureBareMetalStorageInstanceInner requestBodyParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureBareMetalStorageInstanceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter azureBareMetalStorageInstanceName is required and cannot be null."));
        }
        if (requestBodyParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter requestBodyParameters is required and cannot be null."));
        } else {
            requestBodyParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            azureBareMetalStorageInstanceName,
                            requestBodyParameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create an azure bare metal storage resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @param requestBodyParameters request body for put call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azureBareMetalStorageInstance info on Azure (ARM properties and AzureBareMetalStorage properties) along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AzureBareMetalStorageInstanceInner>> createWithResponseAsync(
        String resourceGroupName,
        String azureBareMetalStorageInstanceName,
        AzureBareMetalStorageInstanceInner requestBodyParameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureBareMetalStorageInstanceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter azureBareMetalStorageInstanceName is required and cannot be null."));
        }
        if (requestBodyParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter requestBodyParameters is required and cannot be null."));
        } else {
            requestBodyParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                azureBareMetalStorageInstanceName,
                requestBodyParameters,
                accept,
                context);
    }

    /**
     * Create an azure bare metal storage resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @param requestBodyParameters request body for put call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azureBareMetalStorageInstance info on Azure (ARM properties and AzureBareMetalStorage properties) on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AzureBareMetalStorageInstanceInner> createAsync(
        String resourceGroupName,
        String azureBareMetalStorageInstanceName,
        AzureBareMetalStorageInstanceInner requestBodyParameters) {
        return createWithResponseAsync(resourceGroupName, azureBareMetalStorageInstanceName, requestBodyParameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create an azure bare metal storage resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @param requestBodyParameters request body for put call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azureBareMetalStorageInstance info on Azure (ARM properties and AzureBareMetalStorage properties) along
     *     with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AzureBareMetalStorageInstanceInner> createWithResponse(
        String resourceGroupName,
        String azureBareMetalStorageInstanceName,
        AzureBareMetalStorageInstanceInner requestBodyParameters,
        Context context) {
        return createWithResponseAsync(
                resourceGroupName, azureBareMetalStorageInstanceName, requestBodyParameters, context)
            .block();
    }

    /**
     * Create an azure bare metal storage resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @param requestBodyParameters request body for put call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azureBareMetalStorageInstance info on Azure (ARM properties and AzureBareMetalStorage properties).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AzureBareMetalStorageInstanceInner create(
        String resourceGroupName,
        String azureBareMetalStorageInstanceName,
        AzureBareMetalStorageInstanceInner requestBodyParameters) {
        return createWithResponse(
                resourceGroupName, azureBareMetalStorageInstanceName, requestBodyParameters, Context.NONE)
            .getValue();
    }

    /**
     * Patches the Tags field of a Azure Bare Metal Storage instance.
     *
     * <p>Patches the Tags field of a Azure Bare Metal Storage instance for the specified subscription, resource group,
     * and instance name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @param tagsParameter Request body that only contains the new Tags field.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azureBareMetalStorageInstance info on Azure (ARM properties and AzureBareMetalStorage properties) along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AzureBareMetalStorageInstanceInner>> updateWithResponseAsync(
        String resourceGroupName, String azureBareMetalStorageInstanceName, Tags tagsParameter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureBareMetalStorageInstanceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter azureBareMetalStorageInstanceName is required and cannot be null."));
        }
        if (tagsParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter tagsParameter is required and cannot be null."));
        } else {
            tagsParameter.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            azureBareMetalStorageInstanceName,
                            tagsParameter,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patches the Tags field of a Azure Bare Metal Storage instance.
     *
     * <p>Patches the Tags field of a Azure Bare Metal Storage instance for the specified subscription, resource group,
     * and instance name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @param tagsParameter Request body that only contains the new Tags field.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azureBareMetalStorageInstance info on Azure (ARM properties and AzureBareMetalStorage properties) along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AzureBareMetalStorageInstanceInner>> updateWithResponseAsync(
        String resourceGroupName, String azureBareMetalStorageInstanceName, Tags tagsParameter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureBareMetalStorageInstanceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter azureBareMetalStorageInstanceName is required and cannot be null."));
        }
        if (tagsParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter tagsParameter is required and cannot be null."));
        } else {
            tagsParameter.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                azureBareMetalStorageInstanceName,
                tagsParameter,
                accept,
                context);
    }

    /**
     * Patches the Tags field of a Azure Bare Metal Storage instance.
     *
     * <p>Patches the Tags field of a Azure Bare Metal Storage instance for the specified subscription, resource group,
     * and instance name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @param tagsParameter Request body that only contains the new Tags field.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azureBareMetalStorageInstance info on Azure (ARM properties and AzureBareMetalStorage properties) on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AzureBareMetalStorageInstanceInner> updateAsync(
        String resourceGroupName, String azureBareMetalStorageInstanceName, Tags tagsParameter) {
        return updateWithResponseAsync(resourceGroupName, azureBareMetalStorageInstanceName, tagsParameter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Patches the Tags field of a Azure Bare Metal Storage instance.
     *
     * <p>Patches the Tags field of a Azure Bare Metal Storage instance for the specified subscription, resource group,
     * and instance name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @param tagsParameter Request body that only contains the new Tags field.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azureBareMetalStorageInstance info on Azure (ARM properties and AzureBareMetalStorage properties) along
     *     with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AzureBareMetalStorageInstanceInner> updateWithResponse(
        String resourceGroupName, String azureBareMetalStorageInstanceName, Tags tagsParameter, Context context) {
        return updateWithResponseAsync(resourceGroupName, azureBareMetalStorageInstanceName, tagsParameter, context)
            .block();
    }

    /**
     * Patches the Tags field of a Azure Bare Metal Storage instance.
     *
     * <p>Patches the Tags field of a Azure Bare Metal Storage instance for the specified subscription, resource group,
     * and instance name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @param tagsParameter Request body that only contains the new Tags field.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azureBareMetalStorageInstance info on Azure (ARM properties and AzureBareMetalStorage properties).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AzureBareMetalStorageInstanceInner update(
        String resourceGroupName, String azureBareMetalStorageInstanceName, Tags tagsParameter) {
        return updateWithResponse(resourceGroupName, azureBareMetalStorageInstanceName, tagsParameter, Context.NONE)
            .getValue();
    }

    /**
     * Delete an AzureBareMetalStorageInstance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String azureBareMetalStorageInstanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureBareMetalStorageInstanceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter azureBareMetalStorageInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            azureBareMetalStorageInstanceName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete an AzureBareMetalStorageInstance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String azureBareMetalStorageInstanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (azureBareMetalStorageInstanceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter azureBareMetalStorageInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                azureBareMetalStorageInstanceName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Delete an AzureBareMetalStorageInstance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String azureBareMetalStorageInstanceName) {
        return deleteWithResponseAsync(resourceGroupName, azureBareMetalStorageInstanceName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete an AzureBareMetalStorageInstance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName, String azureBareMetalStorageInstanceName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, azureBareMetalStorageInstanceName, context).block();
    }

    /**
     * Delete an AzureBareMetalStorageInstance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param azureBareMetalStorageInstanceName Name of the Azure Bare Metal Storage Instance, also known as the
     *     ResourceName.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String azureBareMetalStorageInstanceName) {
        deleteWithResponse(resourceGroupName, azureBareMetalStorageInstanceName, Context.NONE);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from the Get AzureBareMetalStorageInstances operation along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AzureBareMetalStorageInstanceInner>> listBySubscriptionNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<AzureBareMetalStorageInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from the Get AzureBareMetalStorageInstances operation along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AzureBareMetalStorageInstanceInner>> listBySubscriptionNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from the Get AzureBareMetalStorageInstances operation along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AzureBareMetalStorageInstanceInner>> listByResourceGroupNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<AzureBareMetalStorageInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from the Get AzureBareMetalStorageInstances operation along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AzureBareMetalStorageInstanceInner>> listByResourceGroupNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
