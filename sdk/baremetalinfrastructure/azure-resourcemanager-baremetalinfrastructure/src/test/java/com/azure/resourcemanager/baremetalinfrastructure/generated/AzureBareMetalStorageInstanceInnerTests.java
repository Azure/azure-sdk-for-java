// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.baremetalinfrastructure.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.baremetalinfrastructure.fluent.models.AzureBareMetalStorageInstanceInner;
import com.azure.resourcemanager.baremetalinfrastructure.models.ProvisioningState;
import com.azure.resourcemanager.baremetalinfrastructure.models.StorageBillingProperties;
import com.azure.resourcemanager.baremetalinfrastructure.models.StorageProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureBareMetalStorageInstanceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureBareMetalStorageInstanceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"azureBareMetalStorageInstanceUniqueIdentifier\":\"idnsezcxtb\",\"storageProperties\":{\"provisioningState\":\"Creating\",\"offeringType\":\"c\",\"storageType\":\"newmdwzjeiachbo\",\"generation\":\"flnrosfqpteehzz\",\"hardwareType\":\"pyqr\",\"workloadType\":\"z\",\"storageBillingProperties\":{\"billingMode\":\"vswjdk\",\"azureBareMetalStorageInstanceSize\":\"soodqxhcrmnoh\"}}},\"location\":\"ckwhds\",\"tags\":{\"pjxsqwpgrjbznor\":\"iy\",\"ocpcy\":\"jxvsnbyxqabn\",\"gpbtoqcjmklj\":\"hurzafblj\",\"qajzyulpkudjkr\":\"vbqid\"},\"id\":\"khbzhfepgzg\",\"name\":\"e\",\"type\":\"zloc\"}")
                .toObject(AzureBareMetalStorageInstanceInner.class);
        Assertions.assertEquals("ckwhds", model.location());
        Assertions.assertEquals("iy", model.tags().get("pjxsqwpgrjbznor"));
        Assertions.assertEquals("idnsezcxtb", model.azureBareMetalStorageInstanceUniqueIdentifier());
        Assertions.assertEquals(ProvisioningState.CREATING, model.storageProperties().provisioningState());
        Assertions.assertEquals("c", model.storageProperties().offeringType());
        Assertions.assertEquals("newmdwzjeiachbo", model.storageProperties().storageType());
        Assertions.assertEquals("flnrosfqpteehzz", model.storageProperties().generation());
        Assertions.assertEquals("pyqr", model.storageProperties().hardwareType());
        Assertions.assertEquals("z", model.storageProperties().workloadType());
        Assertions.assertEquals("vswjdk", model.storageProperties().storageBillingProperties().billingMode());
        Assertions
            .assertEquals(
                "soodqxhcrmnoh",
                model.storageProperties().storageBillingProperties().azureBareMetalStorageInstanceSize());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureBareMetalStorageInstanceInner model =
            new AzureBareMetalStorageInstanceInner()
                .withLocation("ckwhds")
                .withTags(
                    mapOf(
                        "pjxsqwpgrjbznor",
                        "iy",
                        "ocpcy",
                        "jxvsnbyxqabn",
                        "gpbtoqcjmklj",
                        "hurzafblj",
                        "qajzyulpkudjkr",
                        "vbqid"))
                .withAzureBareMetalStorageInstanceUniqueIdentifier("idnsezcxtb")
                .withStorageProperties(
                    new StorageProperties()
                        .withProvisioningState(ProvisioningState.CREATING)
                        .withOfferingType("c")
                        .withStorageType("newmdwzjeiachbo")
                        .withGeneration("flnrosfqpteehzz")
                        .withHardwareType("pyqr")
                        .withWorkloadType("z")
                        .withStorageBillingProperties(
                            new StorageBillingProperties()
                                .withBillingMode("vswjdk")
                                .withAzureBareMetalStorageInstanceSize("soodqxhcrmnoh")));
        model = BinaryData.fromObject(model).toObject(AzureBareMetalStorageInstanceInner.class);
        Assertions.assertEquals("ckwhds", model.location());
        Assertions.assertEquals("iy", model.tags().get("pjxsqwpgrjbznor"));
        Assertions.assertEquals("idnsezcxtb", model.azureBareMetalStorageInstanceUniqueIdentifier());
        Assertions.assertEquals(ProvisioningState.CREATING, model.storageProperties().provisioningState());
        Assertions.assertEquals("c", model.storageProperties().offeringType());
        Assertions.assertEquals("newmdwzjeiachbo", model.storageProperties().storageType());
        Assertions.assertEquals("flnrosfqpteehzz", model.storageProperties().generation());
        Assertions.assertEquals("pyqr", model.storageProperties().hardwareType());
        Assertions.assertEquals("z", model.storageProperties().workloadType());
        Assertions.assertEquals("vswjdk", model.storageProperties().storageBillingProperties().billingMode());
        Assertions
            .assertEquals(
                "soodqxhcrmnoh",
                model.storageProperties().storageBillingProperties().azureBareMetalStorageInstanceSize());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
