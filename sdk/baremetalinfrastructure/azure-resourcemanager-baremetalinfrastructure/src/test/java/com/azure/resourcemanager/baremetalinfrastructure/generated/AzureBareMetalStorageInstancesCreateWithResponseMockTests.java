// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.baremetalinfrastructure.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.baremetalinfrastructure.BareMetalInfrastructureManager;
import com.azure.resourcemanager.baremetalinfrastructure.models.AzureBareMetalStorageInstance;
import com.azure.resourcemanager.baremetalinfrastructure.models.ProvisioningState;
import com.azure.resourcemanager.baremetalinfrastructure.models.StorageBillingProperties;
import com.azure.resourcemanager.baremetalinfrastructure.models.StorageProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AzureBareMetalStorageInstancesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"azureBareMetalStorageInstanceUniqueIdentifier\":\"zt\",\"storageProperties\":{\"provisioningState\":\"Creating\",\"offeringType\":\"rq\",\"storageType\":\"edckzywbiexzfey\",\"generation\":\"axibxujw\",\"hardwareType\":\"qwalmuzyoxaepd\",\"workloadType\":\"jancu\",\"storageBillingProperties\":{\"billingMode\":\"d\",\"azureBareMetalStorageInstanceSize\":\"avxbniwdjswztsdb\"}}},\"location\":\"nxytxh\",\"tags\":{\"lcuhxwtctyqiklb\":\"bzpfzab\",\"bhvgy\":\"ovplw\"},\"id\":\"gu\",\"name\":\"svmkfssxquk\",\"type\":\"fpl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BareMetalInfrastructureManager manager = BareMetalInfrastructureManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AzureBareMetalStorageInstance response = manager.azureBareMetalStorageInstances()
            .define("rbmpukgri")
            .withRegion("l")
            .withExistingResourceGroup("mpvecxgodebfqk")
            .withTags(mapOf("henbtkcxywnytn", "xmyskp"))
            .withAzureBareMetalStorageInstanceUniqueIdentifier("zlfbxzpuzycispnq")
            .withStorageProperties(new StorageProperties().withProvisioningState(ProvisioningState.CANCELED)
                .withOfferingType("kbrpyydhibnuq")
                .withStorageType("pikad")
                .withGeneration("vtq")
                .withHardwareType("n")
                .withWorkloadType("ynhijggme")
                .withStorageBillingProperties(new StorageBillingProperties().withBillingMode("iarbutrcvpna")
                    .withAzureBareMetalStorageInstanceSize("mhjrunmpxttdbhr")))
            .create();

        Assertions.assertEquals("nxytxh", response.location());
        Assertions.assertEquals("bzpfzab", response.tags().get("lcuhxwtctyqiklb"));
        Assertions.assertEquals("zt", response.azureBareMetalStorageInstanceUniqueIdentifier());
        Assertions.assertEquals(ProvisioningState.CREATING, response.storageProperties().provisioningState());
        Assertions.assertEquals("rq", response.storageProperties().offeringType());
        Assertions.assertEquals("edckzywbiexzfey", response.storageProperties().storageType());
        Assertions.assertEquals("axibxujw", response.storageProperties().generation());
        Assertions.assertEquals("qwalmuzyoxaepd", response.storageProperties().hardwareType());
        Assertions.assertEquals("jancu", response.storageProperties().workloadType());
        Assertions.assertEquals("d", response.storageProperties().storageBillingProperties().billingMode());
        Assertions.assertEquals("avxbniwdjswztsdb",
            response.storageProperties().storageBillingProperties().azureBareMetalStorageInstanceSize());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
