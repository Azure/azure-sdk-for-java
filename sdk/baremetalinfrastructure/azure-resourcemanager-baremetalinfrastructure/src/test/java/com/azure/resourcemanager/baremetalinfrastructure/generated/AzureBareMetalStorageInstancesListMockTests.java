// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.baremetalinfrastructure.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.baremetalinfrastructure.BareMetalInfrastructureManager;
import com.azure.resourcemanager.baremetalinfrastructure.models.AzureBareMetalStorageInstance;
import com.azure.resourcemanager.baremetalinfrastructure.models.ProvisioningState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AzureBareMetalStorageInstancesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"azureBareMetalStorageInstanceUniqueIdentifier\":\"llr\",\"storageProperties\":{\"provisioningState\":\"Accepted\",\"offeringType\":\"watkpnpulexxb\",\"storageType\":\"wtruwiqzbqjvsovm\",\"generation\":\"kacspkw\",\"hardwareType\":\"zdobpxjmflbvvnch\",\"workloadType\":\"cciw\",\"storageBillingProperties\":{\"billingMode\":\"uqkhrsajiwku\",\"azureBareMetalStorageInstanceSize\":\"oskg\"}}},\"location\":\"auu\",\"tags\":{\"duugidyjr\":\"mvxi\",\"y\":\"f\"},\"id\":\"osvexcsonpclhoc\",\"name\":\"hslkevleggzf\",\"type\":\"u\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        BareMetalInfrastructureManager manager =
            BareMetalInfrastructureManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AzureBareMetalStorageInstance> response =
            manager.azureBareMetalStorageInstances().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("auu", response.iterator().next().location());
        Assertions.assertEquals("mvxi", response.iterator().next().tags().get("duugidyjr"));
        Assertions.assertEquals("llr", response.iterator().next().azureBareMetalStorageInstanceUniqueIdentifier());
        Assertions
            .assertEquals(
                ProvisioningState.ACCEPTED, response.iterator().next().storageProperties().provisioningState());
        Assertions.assertEquals("watkpnpulexxb", response.iterator().next().storageProperties().offeringType());
        Assertions.assertEquals("wtruwiqzbqjvsovm", response.iterator().next().storageProperties().storageType());
        Assertions.assertEquals("kacspkw", response.iterator().next().storageProperties().generation());
        Assertions.assertEquals("zdobpxjmflbvvnch", response.iterator().next().storageProperties().hardwareType());
        Assertions.assertEquals("cciw", response.iterator().next().storageProperties().workloadType());
        Assertions
            .assertEquals(
                "uqkhrsajiwku",
                response.iterator().next().storageProperties().storageBillingProperties().billingMode());
        Assertions
            .assertEquals(
                "oskg",
                response
                    .iterator()
                    .next()
                    .storageProperties()
                    .storageBillingProperties()
                    .azureBareMetalStorageInstanceSize());
    }
}
