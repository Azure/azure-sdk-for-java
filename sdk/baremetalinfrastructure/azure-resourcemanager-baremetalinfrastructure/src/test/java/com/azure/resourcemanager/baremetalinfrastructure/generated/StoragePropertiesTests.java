// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.baremetalinfrastructure.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.baremetalinfrastructure.models.ProvisioningState;
import com.azure.resourcemanager.baremetalinfrastructure.models.StorageBillingProperties;
import com.azure.resourcemanager.baremetalinfrastructure.models.StorageProperties;
import org.junit.jupiter.api.Assertions;

public final class StoragePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageProperties model =
            BinaryData
                .fromString(
                    "{\"provisioningState\":\"Accepted\",\"offeringType\":\"sycbkbfk\",\"storageType\":\"kdkexxp\",\"generation\":\"fmxa\",\"hardwareType\":\"fjpgddtocjjxhvp\",\"workloadType\":\"uexhdzx\",\"storageBillingProperties\":{\"billingMode\":\"eojnxqbzvddn\",\"azureBareMetalStorageInstanceSize\":\"ndei\"}}")
                .toObject(StorageProperties.class);
        Assertions.assertEquals(ProvisioningState.ACCEPTED, model.provisioningState());
        Assertions.assertEquals("sycbkbfk", model.offeringType());
        Assertions.assertEquals("kdkexxp", model.storageType());
        Assertions.assertEquals("fmxa", model.generation());
        Assertions.assertEquals("fjpgddtocjjxhvp", model.hardwareType());
        Assertions.assertEquals("uexhdzx", model.workloadType());
        Assertions.assertEquals("eojnxqbzvddn", model.storageBillingProperties().billingMode());
        Assertions.assertEquals("ndei", model.storageBillingProperties().azureBareMetalStorageInstanceSize());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageProperties model =
            new StorageProperties()
                .withProvisioningState(ProvisioningState.ACCEPTED)
                .withOfferingType("sycbkbfk")
                .withStorageType("kdkexxp")
                .withGeneration("fmxa")
                .withHardwareType("fjpgddtocjjxhvp")
                .withWorkloadType("uexhdzx")
                .withStorageBillingProperties(
                    new StorageBillingProperties()
                        .withBillingMode("eojnxqbzvddn")
                        .withAzureBareMetalStorageInstanceSize("ndei"));
        model = BinaryData.fromObject(model).toObject(StorageProperties.class);
        Assertions.assertEquals(ProvisioningState.ACCEPTED, model.provisioningState());
        Assertions.assertEquals("sycbkbfk", model.offeringType());
        Assertions.assertEquals("kdkexxp", model.storageType());
        Assertions.assertEquals("fmxa", model.generation());
        Assertions.assertEquals("fjpgddtocjjxhvp", model.hardwareType());
        Assertions.assertEquals("uexhdzx", model.workloadType());
        Assertions.assertEquals("eojnxqbzvddn", model.storageBillingProperties().billingMode());
        Assertions.assertEquals("ndei", model.storageBillingProperties().azureBareMetalStorageInstanceSize());
    }
}
