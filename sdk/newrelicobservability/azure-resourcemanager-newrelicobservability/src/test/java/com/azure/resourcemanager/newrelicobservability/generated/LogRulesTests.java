// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.newrelicobservability.models.FilteringTag;
import com.azure.resourcemanager.newrelicobservability.models.LogRules;
import com.azure.resourcemanager.newrelicobservability.models.SendAadLogsStatus;
import com.azure.resourcemanager.newrelicobservability.models.SendActivityLogsStatus;
import com.azure.resourcemanager.newrelicobservability.models.SendSubscriptionLogsStatus;
import com.azure.resourcemanager.newrelicobservability.models.TagAction;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class LogRulesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LogRules model = BinaryData.fromString(
            "{\"sendAadLogs\":\"Disabled\",\"sendSubscriptionLogs\":\"Disabled\",\"sendActivityLogs\":\"Enabled\",\"filteringTags\":[{\"name\":\"cohoq\",\"value\":\"wvl\",\"action\":\"Exclude\"},{\"name\":\"w\",\"value\":\"eun\",\"action\":\"Exclude\"},{\"name\":\"gyxzk\",\"value\":\"ocukoklyax\",\"action\":\"Include\"},{\"name\":\"uqszfk\",\"value\":\"ypewrmjmwvvjekt\",\"action\":\"Include\"}]}")
            .toObject(LogRules.class);
        Assertions.assertEquals(SendAadLogsStatus.DISABLED, model.sendAadLogs());
        Assertions.assertEquals(SendSubscriptionLogsStatus.DISABLED, model.sendSubscriptionLogs());
        Assertions.assertEquals(SendActivityLogsStatus.ENABLED, model.sendActivityLogs());
        Assertions.assertEquals("cohoq", model.filteringTags().get(0).name());
        Assertions.assertEquals("wvl", model.filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.EXCLUDE, model.filteringTags().get(0).action());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LogRules model = new LogRules().withSendAadLogs(SendAadLogsStatus.DISABLED)
            .withSendSubscriptionLogs(SendSubscriptionLogsStatus.DISABLED)
            .withSendActivityLogs(SendActivityLogsStatus.ENABLED).withFilteringTags(
                Arrays.asList(new FilteringTag().withName("cohoq").withValue("wvl").withAction(TagAction.EXCLUDE),
                    new FilteringTag().withName("w").withValue("eun").withAction(TagAction.EXCLUDE),
                    new FilteringTag().withName("gyxzk").withValue("ocukoklyax").withAction(TagAction.INCLUDE),
                    new FilteringTag().withName("uqszfk").withValue("ypewrmjmwvvjekt").withAction(TagAction.INCLUDE)));
        model = BinaryData.fromObject(model).toObject(LogRules.class);
        Assertions.assertEquals(SendAadLogsStatus.DISABLED, model.sendAadLogs());
        Assertions.assertEquals(SendSubscriptionLogsStatus.DISABLED, model.sendSubscriptionLogs());
        Assertions.assertEquals(SendActivityLogsStatus.ENABLED, model.sendActivityLogs());
        Assertions.assertEquals("cohoq", model.filteringTags().get(0).name());
        Assertions.assertEquals("wvl", model.filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.EXCLUDE, model.filteringTags().get(0).action());
    }
}
