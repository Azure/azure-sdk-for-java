// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.newrelicobservability.NewRelicObservabilityManager;
import com.azure.resourcemanager.newrelicobservability.models.AccountCreationSource;
import com.azure.resourcemanager.newrelicobservability.models.BillingCycle;
import com.azure.resourcemanager.newrelicobservability.models.ManagedServiceIdentity;
import com.azure.resourcemanager.newrelicobservability.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.newrelicobservability.models.NewRelicAccountProperties;
import com.azure.resourcemanager.newrelicobservability.models.NewRelicMonitorResource;
import com.azure.resourcemanager.newrelicobservability.models.OrgCreationSource;
import com.azure.resourcemanager.newrelicobservability.models.PlanData;
import com.azure.resourcemanager.newrelicobservability.models.UsageType;
import com.azure.resourcemanager.newrelicobservability.models.UserInfo;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MonitorsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"monitoringStatus\":\"Enabled\",\"marketplaceSubscriptionStatus\":\"Suspended\",\"marketplaceSubscriptionId\":\"pswiydmcwyh\",\"newRelicAccountProperties\":{\"userId\":\"ss\"},\"userInfo\":{\"firstName\":\"vdfznudaodvxzb\",\"lastName\":\"blylpstdbh\",\"emailAddress\":\"srzdzucerscdn\",\"phoneNumber\":\"evfiwjmygt\",\"country\":\"slswtm\"},\"planData\":{\"usageType\":\"PAYG\",\"billingCycle\":\"MONTHLY\",\"planDetails\":\"pyqs\",\"effectiveDate\":\"2021-06-06T05:20:48Z\"},\"liftrResourceCategory\":\"Unknown\",\"liftrResourcePreference\":792180038,\"orgCreationSource\":\"NEWRELIC\",\"accountCreationSource\":\"NEWRELIC\"},\"identity\":{\"principalId\":\"a33037ed-f83c-469d-bb38-f80fc867d6a7\",\"tenantId\":\"6a6cba0a-fdd0-492c-9a74-1d473e6092eb\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{}},\"location\":\"vwiwubmwmbesld\",\"tags\":{\"z\":\"wtppjflcxogaoko\",\"fzxmhhvhgureodkw\":\"nsikvmkqzeqqkdl\"},\"id\":\"bdagxt\",\"name\":\"bqdxbx\",\"type\":\"akbogqxndlkzgxh\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NewRelicObservabilityManager manager =
            NewRelicObservabilityManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        NewRelicMonitorResource response =
            manager
                .monitors()
                .define("qtdo")
                .withRegion("taruoujmkcj")
                .withExistingResourceGroup("ivetvtcq")
                .withTags(
                    mapOf("ervnaenqpehi", "ytjrybnwjewgdr", "mifthnzdnd", "doy", "nayqi", "l", "hqlkthumaqo", "ynduha"))
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                        .withUserAssignedIdentities(mapOf()))
                .withNewRelicAccountProperties(new NewRelicAccountProperties().withUserId("obl"))
                .withUserInfo(
                    new UserInfo()
                        .withFirstName("pe")
                        .withLastName("wfbkrvrns")
                        .withEmailAddress("hqjohxcrsbfova")
                        .withPhoneNumber("ruvw")
                        .withCountry("sqfsubcgjbirxb"))
                .withPlanData(
                    new PlanData()
                        .withUsageType(UsageType.COMMITTED)
                        .withBillingCycle(BillingCycle.YEARLY)
                        .withPlanDetails("jfdtwssotftpvj")
                        .withEffectiveDate(OffsetDateTime.parse("2021-04-19T06:05:29Z")))
                .withOrgCreationSource(OrgCreationSource.LIFTR)
                .withAccountCreationSource(AccountCreationSource.LIFTR)
                .create();

        Assertions.assertEquals("vwiwubmwmbesld", response.location());
        Assertions.assertEquals("wtppjflcxogaoko", response.tags().get("z"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("ss", response.newRelicAccountProperties().userId());
        Assertions.assertEquals("vdfznudaodvxzb", response.userInfo().firstName());
        Assertions.assertEquals("blylpstdbh", response.userInfo().lastName());
        Assertions.assertEquals("srzdzucerscdn", response.userInfo().emailAddress());
        Assertions.assertEquals("evfiwjmygt", response.userInfo().phoneNumber());
        Assertions.assertEquals("slswtm", response.userInfo().country());
        Assertions.assertEquals(UsageType.PAYG, response.planData().usageType());
        Assertions.assertEquals(BillingCycle.MONTHLY, response.planData().billingCycle());
        Assertions.assertEquals("pyqs", response.planData().planDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-06T05:20:48Z"), response.planData().effectiveDate());
        Assertions.assertEquals(OrgCreationSource.NEWRELIC, response.orgCreationSource());
        Assertions.assertEquals(AccountCreationSource.NEWRELIC, response.accountCreationSource());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
