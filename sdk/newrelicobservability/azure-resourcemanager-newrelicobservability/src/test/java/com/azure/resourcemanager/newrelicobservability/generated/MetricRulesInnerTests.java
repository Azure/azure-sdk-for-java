// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.newrelicobservability.fluent.models.MetricRulesInner;
import com.azure.resourcemanager.newrelicobservability.models.FilteringTag;
import com.azure.resourcemanager.newrelicobservability.models.SendMetricsStatus;
import com.azure.resourcemanager.newrelicobservability.models.TagAction;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MetricRulesInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MetricRulesInner model = BinaryData.fromString(
            "{\"sendMetrics\":\"Enabled\",\"filteringTags\":[{\"name\":\"dsoifiyipj\",\"value\":\"qwpgrjbzn\",\"action\":\"Exclude\"},{\"name\":\"xv\",\"value\":\"byxqabn\",\"action\":\"Include\"},{\"name\":\"cyshurzafbljjgp\",\"value\":\"oq\",\"action\":\"Include\"}],\"userEmail\":\"ljavbqid\"}")
            .toObject(MetricRulesInner.class);
        Assertions.assertEquals(SendMetricsStatus.ENABLED, model.sendMetrics());
        Assertions.assertEquals("dsoifiyipj", model.filteringTags().get(0).name());
        Assertions.assertEquals("qwpgrjbzn", model.filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.EXCLUDE, model.filteringTags().get(0).action());
        Assertions.assertEquals("ljavbqid", model.userEmail());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MetricRulesInner model = new MetricRulesInner().withSendMetrics(SendMetricsStatus.ENABLED)
            .withFilteringTags(Arrays.asList(
                new FilteringTag().withName("dsoifiyipj").withValue("qwpgrjbzn").withAction(TagAction.EXCLUDE),
                new FilteringTag().withName("xv").withValue("byxqabn").withAction(TagAction.INCLUDE),
                new FilteringTag().withName("cyshurzafbljjgp").withValue("oq").withAction(TagAction.INCLUDE)))
            .withUserEmail("ljavbqid");
        model = BinaryData.fromObject(model).toObject(MetricRulesInner.class);
        Assertions.assertEquals(SendMetricsStatus.ENABLED, model.sendMetrics());
        Assertions.assertEquals("dsoifiyipj", model.filteringTags().get(0).name());
        Assertions.assertEquals("qwpgrjbzn", model.filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.EXCLUDE, model.filteringTags().get(0).action());
        Assertions.assertEquals("ljavbqid", model.userEmail());
    }
}
