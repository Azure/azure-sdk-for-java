// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.newrelicobservability.fluent.models.NewRelicMonitorResourceInner;
import com.azure.resourcemanager.newrelicobservability.models.AccountCreationSource;
import com.azure.resourcemanager.newrelicobservability.models.ManagedServiceIdentity;
import com.azure.resourcemanager.newrelicobservability.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.newrelicobservability.models.NewRelicMonitorResourceListResult;
import com.azure.resourcemanager.newrelicobservability.models.OrgCreationSource;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NewRelicMonitorResourceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NewRelicMonitorResourceListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"provisioningState\":\"Creating\",\"monitoringStatus\":\"Enabled\",\"marketplaceSubscriptionStatus\":\"Active\",\"marketplaceSubscriptionId\":\"dio\",\"liftrResourceCategory\":\"Unknown\",\"liftrResourcePreference\":2028392349,\"orgCreationSource\":\"NEWRELIC\",\"accountCreationSource\":\"NEWRELIC\"},\"identity\":{\"principalId\":\"1b8fcac0-b482-4b73-8719-25248d69c81c\",\"tenantId\":\"917057b0-f8a6-4286-860e-5e0902e1b69d\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{}},\"location\":\"oacctaza\",\"tags\":{\"fdosyg\":\"lahbcryff\"},\"id\":\"xpaojakhmsbz\",\"name\":\"hcrzevd\",\"type\":\"hlxaolthqtr\"},{\"properties\":{\"provisioningState\":\"Accepted\",\"monitoringStatus\":\"Disabled\",\"marketplaceSubscriptionStatus\":\"Suspended\",\"marketplaceSubscriptionId\":\"s\",\"liftrResourceCategory\":\"Unknown\",\"liftrResourcePreference\":1595507269,\"orgCreationSource\":\"LIFTR\",\"accountCreationSource\":\"NEWRELIC\"},\"identity\":{\"principalId\":\"569d6c49-cbaf-4199-a099-bf5fcc9f90c9\",\"tenantId\":\"7135d2f3-4192-4d96-94b1-1b0c3e2fc42e\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{}},\"location\":\"lluwfzitonpeq\",\"tags\":{\"xypininmayhuybbk\":\"kjlxofpdvhpf\",\"vamih\":\"odepoogin\",\"vyevcciqi\":\"ognarxzxtheotus\",\"zrnf\":\"nhungbw\"},\"id\":\"gxg\",\"name\":\"spemvtzfk\",\"type\":\"fublj\"},{\"properties\":{\"provisioningState\":\"Deleting\",\"monitoringStatus\":\"Disabled\",\"marketplaceSubscriptionStatus\":\"Active\",\"marketplaceSubscriptionId\":\"aeqjhqjbasvms\",\"liftrResourceCategory\":\"MonitorLogs\",\"liftrResourcePreference\":951964300,\"orgCreationSource\":\"LIFTR\",\"accountCreationSource\":\"NEWRELIC\"},\"identity\":{\"principalId\":\"1b9e35c8-de99-4b89-a4c3-49a4e72d7d0b\",\"tenantId\":\"549cc254-c08c-4bd3-a22b-c0f95928d25a\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{}},\"location\":\"wrwclxxwrljd\",\"tags\":{\"dkwt\":\"kcqvkocrc\",\"ssainqpjwnzll\":\"hxbnjbiksqrg\",\"bvmgxsabkyqduuji\":\"fmppe\"},\"id\":\"c\",\"name\":\"czdzev\",\"type\":\"dhkrwpdappdsbdk\"}],\"nextLink\":\"rwjfe\"}")
                .toObject(NewRelicMonitorResourceListResult.class);
        Assertions.assertEquals("oacctaza", model.value().get(0).location());
        Assertions.assertEquals("lahbcryff", model.value().get(0).tags().get("fdosyg"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals(OrgCreationSource.NEWRELIC, model.value().get(0).orgCreationSource());
        Assertions.assertEquals(AccountCreationSource.NEWRELIC, model.value().get(0).accountCreationSource());
        Assertions.assertEquals("rwjfe", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NewRelicMonitorResourceListResult model =
            new NewRelicMonitorResourceListResult()
                .withValue(
                    Arrays
                        .asList(
                            new NewRelicMonitorResourceInner()
                                .withLocation("oacctaza")
                                .withTags(mapOf("fdosyg", "lahbcryff"))
                                .withIdentity(
                                    new ManagedServiceIdentity()
                                        .withType(ManagedServiceIdentityType.USER_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withOrgCreationSource(OrgCreationSource.NEWRELIC)
                                .withAccountCreationSource(AccountCreationSource.NEWRELIC),
                            new NewRelicMonitorResourceInner()
                                .withLocation("lluwfzitonpeq")
                                .withTags(
                                    mapOf(
                                        "xypininmayhuybbk",
                                        "kjlxofpdvhpf",
                                        "vamih",
                                        "odepoogin",
                                        "vyevcciqi",
                                        "ognarxzxtheotus",
                                        "zrnf",
                                        "nhungbw"))
                                .withIdentity(
                                    new ManagedServiceIdentity()
                                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withOrgCreationSource(OrgCreationSource.LIFTR)
                                .withAccountCreationSource(AccountCreationSource.NEWRELIC),
                            new NewRelicMonitorResourceInner()
                                .withLocation("wrwclxxwrljd")
                                .withTags(
                                    mapOf(
                                        "dkwt",
                                        "kcqvkocrc",
                                        "ssainqpjwnzll",
                                        "hxbnjbiksqrg",
                                        "bvmgxsabkyqduuji",
                                        "fmppe"))
                                .withIdentity(
                                    new ManagedServiceIdentity()
                                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withOrgCreationSource(OrgCreationSource.LIFTR)
                                .withAccountCreationSource(AccountCreationSource.NEWRELIC)))
                .withNextLink("rwjfe");
        model = BinaryData.fromObject(model).toObject(NewRelicMonitorResourceListResult.class);
        Assertions.assertEquals("oacctaza", model.value().get(0).location());
        Assertions.assertEquals("lahbcryff", model.value().get(0).tags().get("fdosyg"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals(OrgCreationSource.NEWRELIC, model.value().get(0).orgCreationSource());
        Assertions.assertEquals(AccountCreationSource.NEWRELIC, model.value().get(0).accountCreationSource());
        Assertions.assertEquals("rwjfe", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
