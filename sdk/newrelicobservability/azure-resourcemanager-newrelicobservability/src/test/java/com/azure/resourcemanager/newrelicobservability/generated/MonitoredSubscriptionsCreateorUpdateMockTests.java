// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.newrelicobservability.NewRelicObservabilityManager;
import com.azure.resourcemanager.newrelicobservability.fluent.models.MetricRulesInner;
import com.azure.resourcemanager.newrelicobservability.fluent.models.MonitoredSubscriptionInner;
import com.azure.resourcemanager.newrelicobservability.fluent.models.MonitoringTagRulesPropertiesInner;
import com.azure.resourcemanager.newrelicobservability.models.ConfigurationName;
import com.azure.resourcemanager.newrelicobservability.models.LogRules;
import com.azure.resourcemanager.newrelicobservability.models.MonitoredSubscriptionProperties;
import com.azure.resourcemanager.newrelicobservability.models.PatchOperation;
import com.azure.resourcemanager.newrelicobservability.models.Status;
import com.azure.resourcemanager.newrelicobservability.models.SubscriptionList;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MonitoredSubscriptionsCreateorUpdateMockTests {
    @Test
    public void testCreateorUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"patchOperation\":\"Active\",\"monitoredSubscriptionList\":[{\"subscriptionId\":\"zkoj\",\"status\":\"InProgress\",\"error\":\"zfoqouicybxar\",\"tagRules\":{\"provisioningState\":\"NotSpecified\",\"logRules\":{},\"metricRules\":{}}}],\"provisioningState\":\"Succeeded\"},\"id\":\"ciqopidoa\",\"name\":\"ciodhkhaz\",\"type\":\"khnzbonlw\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        NewRelicObservabilityManager manager = NewRelicObservabilityManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        MonitoredSubscriptionProperties response
            = manager
                .monitoredSubscriptions().define(ConfigurationName.DEFAULT).withExistingMonitor("pfuvglsbjjca",
                    "vxb")
                .withProperties(
                    new SubscriptionList().withPatchOperation(PatchOperation.DELETE_COMPLETE)
                        .withMonitoredSubscriptionList(
                            Arrays.asList(
                                new MonitoredSubscriptionInner().withSubscriptionId("cormr").withStatus(Status.DELETING)
                                    .withError("vcofudfl")
                                    .withTagRules(new MonitoringTagRulesPropertiesInner().withLogRules(new LogRules())
                                        .withMetricRules(new MetricRulesInner())),
                                new MonitoredSubscriptionInner().withSubscriptionId("dknnqvsazn")
                                    .withStatus(Status.IN_PROGRESS).withError("rudsg")
                                    .withTagRules(new MonitoringTagRulesPropertiesInner().withLogRules(new LogRules())
                                        .withMetricRules(new MetricRulesInner())),
                                new MonitoredSubscriptionInner().withSubscriptionId("grauwjuetaebur")
                                    .withStatus(Status.ACTIVE).withError("ovsm")
                                    .withTagRules(new MonitoringTagRulesPropertiesInner().withLogRules(new LogRules())
                                        .withMetricRules(new MetricRulesInner())),
                                new MonitoredSubscriptionInner().withSubscriptionId("q").withStatus(Status.ACTIVE)
                                    .withError("ifrvtpu").withTagRules(new MonitoringTagRulesPropertiesInner()
                                        .withLogRules(new LogRules()).withMetricRules(new MetricRulesInner())))))
                .create();

        Assertions.assertEquals(PatchOperation.ACTIVE, response.properties().patchOperation());
        Assertions.assertEquals("zkoj", response.properties().monitoredSubscriptionList().get(0).subscriptionId());
        Assertions.assertEquals(Status.IN_PROGRESS, response.properties().monitoredSubscriptionList().get(0).status());
        Assertions.assertEquals("zfoqouicybxar", response.properties().monitoredSubscriptionList().get(0).error());
    }
}
