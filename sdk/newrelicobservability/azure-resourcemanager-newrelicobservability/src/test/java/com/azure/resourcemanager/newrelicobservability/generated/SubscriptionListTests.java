// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.newrelicobservability.fluent.models.MetricRulesInner;
import com.azure.resourcemanager.newrelicobservability.fluent.models.MonitoredSubscriptionInner;
import com.azure.resourcemanager.newrelicobservability.fluent.models.MonitoringTagRulesPropertiesInner;
import com.azure.resourcemanager.newrelicobservability.models.FilteringTag;
import com.azure.resourcemanager.newrelicobservability.models.LogRules;
import com.azure.resourcemanager.newrelicobservability.models.PatchOperation;
import com.azure.resourcemanager.newrelicobservability.models.SendAadLogsStatus;
import com.azure.resourcemanager.newrelicobservability.models.SendActivityLogsStatus;
import com.azure.resourcemanager.newrelicobservability.models.SendMetricsStatus;
import com.azure.resourcemanager.newrelicobservability.models.SendSubscriptionLogsStatus;
import com.azure.resourcemanager.newrelicobservability.models.Status;
import com.azure.resourcemanager.newrelicobservability.models.SubscriptionList;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SubscriptionListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubscriptionList model = BinaryData.fromString(
            "{\"patchOperation\":\"DeleteComplete\",\"monitoredSubscriptionList\":[{\"subscriptionId\":\"dhmdua\",\"status\":\"InProgress\",\"error\":\"qpv\",\"tagRules\":{\"provisioningState\":\"Creating\",\"logRules\":{\"sendAadLogs\":\"Enabled\",\"sendSubscriptionLogs\":\"Enabled\",\"sendActivityLogs\":\"Enabled\",\"filteringTags\":[{}]},\"metricRules\":{\"sendMetrics\":\"Enabled\",\"filteringTags\":[{},{},{},{}],\"userEmail\":\"fmisg\"}}},{\"subscriptionId\":\"nbbelda\",\"status\":\"Failed\",\"error\":\"ali\",\"tagRules\":{\"provisioningState\":\"Deleting\",\"logRules\":{\"sendAadLogs\":\"Disabled\",\"sendSubscriptionLogs\":\"Disabled\",\"sendActivityLogs\":\"Disabled\",\"filteringTags\":[{},{},{},{}]},\"metricRules\":{\"sendMetrics\":\"Disabled\",\"filteringTags\":[{}],\"userEmail\":\"owzxcu\"}}},{\"subscriptionId\":\"cjooxdjebwpucwwf\",\"status\":\"Active\",\"error\":\"vmeueci\",\"tagRules\":{\"provisioningState\":\"Deleted\",\"logRules\":{\"sendAadLogs\":\"Enabled\",\"sendSubscriptionLogs\":\"Disabled\",\"sendActivityLogs\":\"Disabled\",\"filteringTags\":[{}]},\"metricRules\":{\"sendMetrics\":\"Disabled\",\"filteringTags\":[{},{}],\"userEmail\":\"wmcdytdxwi\"}}}],\"provisioningState\":\"Deleting\"}")
            .toObject(SubscriptionList.class);
        Assertions.assertEquals(PatchOperation.DELETE_COMPLETE, model.patchOperation());
        Assertions.assertEquals("dhmdua", model.monitoredSubscriptionList().get(0).subscriptionId());
        Assertions.assertEquals(Status.IN_PROGRESS, model.monitoredSubscriptionList().get(0).status());
        Assertions.assertEquals("qpv", model.monitoredSubscriptionList().get(0).error());
        Assertions.assertEquals(SendAadLogsStatus.ENABLED,
            model.monitoredSubscriptionList().get(0).tagRules().logRules().sendAadLogs());
        Assertions.assertEquals(SendSubscriptionLogsStatus.ENABLED,
            model.monitoredSubscriptionList().get(0).tagRules().logRules().sendSubscriptionLogs());
        Assertions.assertEquals(SendActivityLogsStatus.ENABLED,
            model.monitoredSubscriptionList().get(0).tagRules().logRules().sendActivityLogs());
        Assertions.assertEquals(SendMetricsStatus.ENABLED,
            model.monitoredSubscriptionList().get(0).tagRules().metricRules().sendMetrics());
        Assertions.assertEquals("fmisg", model.monitoredSubscriptionList().get(0).tagRules().metricRules().userEmail());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubscriptionList model
            = new SubscriptionList().withPatchOperation(PatchOperation.DELETE_COMPLETE)
                .withMonitoredSubscriptionList(Arrays
                    .asList(
                        new MonitoredSubscriptionInner().withSubscriptionId("dhmdua").withStatus(Status.IN_PROGRESS)
                            .withError("qpv").withTagRules(
                                new MonitoringTagRulesPropertiesInner()
                                    .withLogRules(new LogRules().withSendAadLogs(SendAadLogsStatus.ENABLED)
                                        .withSendSubscriptionLogs(SendSubscriptionLogsStatus.ENABLED)
                                        .withSendActivityLogs(SendActivityLogsStatus.ENABLED)
                                        .withFilteringTags(Arrays.asList(new FilteringTag())))
                                    .withMetricRules(new MetricRulesInner().withSendMetrics(SendMetricsStatus.ENABLED)
                                        .withFilteringTags(Arrays.asList(new FilteringTag(), new FilteringTag(),
                                            new FilteringTag(), new FilteringTag()))
                                        .withUserEmail("fmisg"))),
                        new MonitoredSubscriptionInner().withSubscriptionId("nbbelda").withStatus(Status.FAILED)
                            .withError(
                                "ali")
                            .withTagRules(new MonitoringTagRulesPropertiesInner()
                                .withLogRules(new LogRules().withSendAadLogs(SendAadLogsStatus.DISABLED)
                                    .withSendSubscriptionLogs(SendSubscriptionLogsStatus.DISABLED)
                                    .withSendActivityLogs(SendActivityLogsStatus.DISABLED)
                                    .withFilteringTags(Arrays.asList(new FilteringTag(), new FilteringTag(),
                                        new FilteringTag(), new FilteringTag())))
                                .withMetricRules(new MetricRulesInner()
                                    .withSendMetrics(SendMetricsStatus.DISABLED).withFilteringTags(
                                        Arrays.asList(new FilteringTag()))
                                    .withUserEmail("owzxcu"))),
                        new MonitoredSubscriptionInner().withSubscriptionId("cjooxdjebwpucwwf")
                            .withStatus(Status.ACTIVE).withError("vmeueci")
                            .withTagRules(new MonitoringTagRulesPropertiesInner()
                                .withLogRules(new LogRules().withSendAadLogs(SendAadLogsStatus.ENABLED)
                                    .withSendSubscriptionLogs(SendSubscriptionLogsStatus.DISABLED)
                                    .withSendActivityLogs(SendActivityLogsStatus.DISABLED)
                                    .withFilteringTags(Arrays.asList(new FilteringTag())))
                                .withMetricRules(new MetricRulesInner().withSendMetrics(SendMetricsStatus.DISABLED)
                                    .withFilteringTags(Arrays.asList(new FilteringTag(), new FilteringTag()))
                                    .withUserEmail("wmcdytdxwi")))));
        model = BinaryData.fromObject(model).toObject(SubscriptionList.class);
        Assertions.assertEquals(PatchOperation.DELETE_COMPLETE, model.patchOperation());
        Assertions.assertEquals("dhmdua", model.monitoredSubscriptionList().get(0).subscriptionId());
        Assertions.assertEquals(Status.IN_PROGRESS, model.monitoredSubscriptionList().get(0).status());
        Assertions.assertEquals("qpv", model.monitoredSubscriptionList().get(0).error());
        Assertions.assertEquals(SendAadLogsStatus.ENABLED,
            model.monitoredSubscriptionList().get(0).tagRules().logRules().sendAadLogs());
        Assertions.assertEquals(SendSubscriptionLogsStatus.ENABLED,
            model.monitoredSubscriptionList().get(0).tagRules().logRules().sendSubscriptionLogs());
        Assertions.assertEquals(SendActivityLogsStatus.ENABLED,
            model.monitoredSubscriptionList().get(0).tagRules().logRules().sendActivityLogs());
        Assertions.assertEquals(SendMetricsStatus.ENABLED,
            model.monitoredSubscriptionList().get(0).tagRules().metricRules().sendMetrics());
        Assertions.assertEquals("fmisg", model.monitoredSubscriptionList().get(0).tagRules().metricRules().userEmail());
    }
}
