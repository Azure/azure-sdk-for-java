// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request of get metrics Operation.
 */
@Fluent
public final class MetricsRequest implements JsonSerializable<MetricsRequest> {
    /*
     * User Email
     */
    private String userEmail;

    /**
     * Creates an instance of MetricsRequest class.
     */
    public MetricsRequest() {
    }

    /**
     * Get the userEmail property: User Email.
     * 
     * @return the userEmail value.
     */
    public String userEmail() {
        return this.userEmail;
    }

    /**
     * Set the userEmail property: User Email.
     * 
     * @param userEmail the userEmail value to set.
     * @return the MetricsRequest object itself.
     */
    public MetricsRequest withUserEmail(String userEmail) {
        this.userEmail = userEmail;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (userEmail() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property userEmail in model MetricsRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MetricsRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userEmail", this.userEmail);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricsRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricsRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetricsRequest.
     */
    public static MetricsRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricsRequest deserializedMetricsRequest = new MetricsRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userEmail".equals(fieldName)) {
                    deserializedMetricsRequest.userEmail = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricsRequest;
        });
    }
}
