// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.newrelicobservability.models.BillingSource;
import java.io.IOException;

/**
 * Details of Organizations.
 */
@Fluent
public final class OrganizationProperties implements JsonSerializable<OrganizationProperties> {
    /*
     * organization id
     */
    private String organizationId;

    /*
     * organization name
     */
    private String organizationName;

    /*
     * Billing source
     */
    private BillingSource billingSource;

    /**
     * Creates an instance of OrganizationProperties class.
     */
    public OrganizationProperties() {
    }

    /**
     * Get the organizationId property: organization id.
     * 
     * @return the organizationId value.
     */
    public String organizationId() {
        return this.organizationId;
    }

    /**
     * Set the organizationId property: organization id.
     * 
     * @param organizationId the organizationId value to set.
     * @return the OrganizationProperties object itself.
     */
    public OrganizationProperties withOrganizationId(String organizationId) {
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Get the organizationName property: organization name.
     * 
     * @return the organizationName value.
     */
    public String organizationName() {
        return this.organizationName;
    }

    /**
     * Set the organizationName property: organization name.
     * 
     * @param organizationName the organizationName value to set.
     * @return the OrganizationProperties object itself.
     */
    public OrganizationProperties withOrganizationName(String organizationName) {
        this.organizationName = organizationName;
        return this;
    }

    /**
     * Get the billingSource property: Billing source.
     * 
     * @return the billingSource value.
     */
    public BillingSource billingSource() {
        return this.billingSource;
    }

    /**
     * Set the billingSource property: Billing source.
     * 
     * @param billingSource the billingSource value to set.
     * @return the OrganizationProperties object itself.
     */
    public OrganizationProperties withBillingSource(BillingSource billingSource) {
        this.billingSource = billingSource;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("organizationId", this.organizationId);
        jsonWriter.writeStringField("organizationName", this.organizationName);
        jsonWriter.writeStringField("billingSource", this.billingSource == null ? null : this.billingSource.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrganizationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrganizationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OrganizationProperties.
     */
    public static OrganizationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrganizationProperties deserializedOrganizationProperties = new OrganizationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("organizationId".equals(fieldName)) {
                    deserializedOrganizationProperties.organizationId = reader.getString();
                } else if ("organizationName".equals(fieldName)) {
                    deserializedOrganizationProperties.organizationName = reader.getString();
                } else if ("billingSource".equals(fieldName)) {
                    deserializedOrganizationProperties.billingSource = BillingSource.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOrganizationProperties;
        });
    }
}
