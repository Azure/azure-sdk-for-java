// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Organization Info of the NewRelic account.
 */
@Fluent
public final class OrganizationInfo implements JsonSerializable<OrganizationInfo> {
    /*
     * Organization id
     */
    private String organizationId;

    /**
     * Creates an instance of OrganizationInfo class.
     */
    public OrganizationInfo() {
    }

    /**
     * Get the organizationId property: Organization id.
     * 
     * @return the organizationId value.
     */
    public String organizationId() {
        return this.organizationId;
    }

    /**
     * Set the organizationId property: Organization id.
     * 
     * @param organizationId the organizationId value to set.
     * @return the OrganizationInfo object itself.
     */
    public OrganizationInfo withOrganizationId(String organizationId) {
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("organizationId", this.organizationId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrganizationInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrganizationInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OrganizationInfo.
     */
    public static OrganizationInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrganizationInfo deserializedOrganizationInfo = new OrganizationInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("organizationId".equals(fieldName)) {
                    deserializedOrganizationInfo.organizationId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOrganizationInfo;
        });
    }
}
