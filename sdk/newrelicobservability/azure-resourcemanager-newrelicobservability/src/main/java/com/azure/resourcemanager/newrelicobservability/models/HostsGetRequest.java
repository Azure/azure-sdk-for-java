// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Request of a Hosts get Operation.
 */
@Fluent
public final class HostsGetRequest implements JsonSerializable<HostsGetRequest> {
    /*
     * VM resource IDs
     */
    private List<String> vmIds;

    /*
     * User Email
     */
    private String userEmail;

    /**
     * Creates an instance of HostsGetRequest class.
     */
    public HostsGetRequest() {
    }

    /**
     * Get the vmIds property: VM resource IDs.
     * 
     * @return the vmIds value.
     */
    public List<String> vmIds() {
        return this.vmIds;
    }

    /**
     * Set the vmIds property: VM resource IDs.
     * 
     * @param vmIds the vmIds value to set.
     * @return the HostsGetRequest object itself.
     */
    public HostsGetRequest withVmIds(List<String> vmIds) {
        this.vmIds = vmIds;
        return this;
    }

    /**
     * Get the userEmail property: User Email.
     * 
     * @return the userEmail value.
     */
    public String userEmail() {
        return this.userEmail;
    }

    /**
     * Set the userEmail property: User Email.
     * 
     * @param userEmail the userEmail value to set.
     * @return the HostsGetRequest object itself.
     */
    public HostsGetRequest withUserEmail(String userEmail) {
        this.userEmail = userEmail;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (userEmail() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property userEmail in model HostsGetRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HostsGetRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userEmail", this.userEmail);
        jsonWriter.writeArrayField("vmIds", this.vmIds, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HostsGetRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HostsGetRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HostsGetRequest.
     */
    public static HostsGetRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HostsGetRequest deserializedHostsGetRequest = new HostsGetRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userEmail".equals(fieldName)) {
                    deserializedHostsGetRequest.userEmail = reader.getString();
                } else if ("vmIds".equals(fieldName)) {
                    List<String> vmIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedHostsGetRequest.vmIds = vmIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHostsGetRequest;
        });
    }
}
