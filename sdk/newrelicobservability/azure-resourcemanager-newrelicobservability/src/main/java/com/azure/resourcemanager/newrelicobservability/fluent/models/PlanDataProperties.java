// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.newrelicobservability.models.AccountCreationSource;
import com.azure.resourcemanager.newrelicobservability.models.OrgCreationSource;
import com.azure.resourcemanager.newrelicobservability.models.PlanData;
import java.io.IOException;

/**
 * Plan details.
 */
@Fluent
public final class PlanDataProperties implements JsonSerializable<PlanDataProperties> {
    /*
     * Plan details
     */
    private PlanData planData;

    /*
     * Source of org creation
     */
    private OrgCreationSource orgCreationSource;

    /*
     * Source of account creation
     */
    private AccountCreationSource accountCreationSource;

    /**
     * Creates an instance of PlanDataProperties class.
     */
    public PlanDataProperties() {
    }

    /**
     * Get the planData property: Plan details.
     * 
     * @return the planData value.
     */
    public PlanData planData() {
        return this.planData;
    }

    /**
     * Set the planData property: Plan details.
     * 
     * @param planData the planData value to set.
     * @return the PlanDataProperties object itself.
     */
    public PlanDataProperties withPlanData(PlanData planData) {
        this.planData = planData;
        return this;
    }

    /**
     * Get the orgCreationSource property: Source of org creation.
     * 
     * @return the orgCreationSource value.
     */
    public OrgCreationSource orgCreationSource() {
        return this.orgCreationSource;
    }

    /**
     * Set the orgCreationSource property: Source of org creation.
     * 
     * @param orgCreationSource the orgCreationSource value to set.
     * @return the PlanDataProperties object itself.
     */
    public PlanDataProperties withOrgCreationSource(OrgCreationSource orgCreationSource) {
        this.orgCreationSource = orgCreationSource;
        return this;
    }

    /**
     * Get the accountCreationSource property: Source of account creation.
     * 
     * @return the accountCreationSource value.
     */
    public AccountCreationSource accountCreationSource() {
        return this.accountCreationSource;
    }

    /**
     * Set the accountCreationSource property: Source of account creation.
     * 
     * @param accountCreationSource the accountCreationSource value to set.
     * @return the PlanDataProperties object itself.
     */
    public PlanDataProperties withAccountCreationSource(AccountCreationSource accountCreationSource) {
        this.accountCreationSource = accountCreationSource;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (planData() != null) {
            planData().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("planData", this.planData);
        jsonWriter.writeStringField("orgCreationSource",
            this.orgCreationSource == null ? null : this.orgCreationSource.toString());
        jsonWriter.writeStringField("accountCreationSource",
            this.accountCreationSource == null ? null : this.accountCreationSource.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PlanDataProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PlanDataProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PlanDataProperties.
     */
    public static PlanDataProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PlanDataProperties deserializedPlanDataProperties = new PlanDataProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("planData".equals(fieldName)) {
                    deserializedPlanDataProperties.planData = PlanData.fromJson(reader);
                } else if ("orgCreationSource".equals(fieldName)) {
                    deserializedPlanDataProperties.orgCreationSource = OrgCreationSource.fromString(reader.getString());
                } else if ("accountCreationSource".equals(fieldName)) {
                    deserializedPlanDataProperties.accountCreationSource
                        = AccountCreationSource.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPlanDataProperties;
        });
    }
}
