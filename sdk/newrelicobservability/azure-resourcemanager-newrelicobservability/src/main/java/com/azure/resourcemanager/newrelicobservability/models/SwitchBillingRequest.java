// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request of a switch billing Operation.
 */
@Fluent
public final class SwitchBillingRequest implements JsonSerializable<SwitchBillingRequest> {
    /*
     * Azure resource Id
     */
    private String azureResourceId;

    /*
     * Organization id
     */
    private String organizationId;

    /*
     * Plan details
     */
    private PlanData planData;

    /*
     * User Email
     */
    private String userEmail;

    /**
     * Creates an instance of SwitchBillingRequest class.
     */
    public SwitchBillingRequest() {
    }

    /**
     * Get the azureResourceId property: Azure resource Id.
     * 
     * @return the azureResourceId value.
     */
    public String azureResourceId() {
        return this.azureResourceId;
    }

    /**
     * Set the azureResourceId property: Azure resource Id.
     * 
     * @param azureResourceId the azureResourceId value to set.
     * @return the SwitchBillingRequest object itself.
     */
    public SwitchBillingRequest withAzureResourceId(String azureResourceId) {
        this.azureResourceId = azureResourceId;
        return this;
    }

    /**
     * Get the organizationId property: Organization id.
     * 
     * @return the organizationId value.
     */
    public String organizationId() {
        return this.organizationId;
    }

    /**
     * Set the organizationId property: Organization id.
     * 
     * @param organizationId the organizationId value to set.
     * @return the SwitchBillingRequest object itself.
     */
    public SwitchBillingRequest withOrganizationId(String organizationId) {
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Get the planData property: Plan details.
     * 
     * @return the planData value.
     */
    public PlanData planData() {
        return this.planData;
    }

    /**
     * Set the planData property: Plan details.
     * 
     * @param planData the planData value to set.
     * @return the SwitchBillingRequest object itself.
     */
    public SwitchBillingRequest withPlanData(PlanData planData) {
        this.planData = planData;
        return this;
    }

    /**
     * Get the userEmail property: User Email.
     * 
     * @return the userEmail value.
     */
    public String userEmail() {
        return this.userEmail;
    }

    /**
     * Set the userEmail property: User Email.
     * 
     * @param userEmail the userEmail value to set.
     * @return the SwitchBillingRequest object itself.
     */
    public SwitchBillingRequest withUserEmail(String userEmail) {
        this.userEmail = userEmail;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (planData() != null) {
            planData().validate();
        }
        if (userEmail() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property userEmail in model SwitchBillingRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SwitchBillingRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userEmail", this.userEmail);
        jsonWriter.writeStringField("azureResourceId", this.azureResourceId);
        jsonWriter.writeStringField("organizationId", this.organizationId);
        jsonWriter.writeJsonField("planData", this.planData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SwitchBillingRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SwitchBillingRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SwitchBillingRequest.
     */
    public static SwitchBillingRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SwitchBillingRequest deserializedSwitchBillingRequest = new SwitchBillingRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userEmail".equals(fieldName)) {
                    deserializedSwitchBillingRequest.userEmail = reader.getString();
                } else if ("azureResourceId".equals(fieldName)) {
                    deserializedSwitchBillingRequest.azureResourceId = reader.getString();
                } else if ("organizationId".equals(fieldName)) {
                    deserializedSwitchBillingRequest.organizationId = reader.getString();
                } else if ("planData".equals(fieldName)) {
                    deserializedSwitchBillingRequest.planData = PlanData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSwitchBillingRequest;
        });
    }
}
