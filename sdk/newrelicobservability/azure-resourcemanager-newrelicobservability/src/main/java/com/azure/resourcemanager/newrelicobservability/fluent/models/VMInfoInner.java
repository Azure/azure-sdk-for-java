// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of VM Resource having NewRelic OneAgent installed.
 */
@Fluent
public final class VMInfoInner implements JsonSerializable<VMInfoInner> {
    /*
     * Azure VM resource ID
     */
    private String vmId;

    /*
     * Version of the NewRelic agent installed on the VM.
     */
    private String agentVersion;

    /*
     * Status of the NewRelic agent installed on the VM.
     */
    private String agentStatus;

    /**
     * Creates an instance of VMInfoInner class.
     */
    public VMInfoInner() {
    }

    /**
     * Get the vmId property: Azure VM resource ID.
     * 
     * @return the vmId value.
     */
    public String vmId() {
        return this.vmId;
    }

    /**
     * Set the vmId property: Azure VM resource ID.
     * 
     * @param vmId the vmId value to set.
     * @return the VMInfoInner object itself.
     */
    public VMInfoInner withVmId(String vmId) {
        this.vmId = vmId;
        return this;
    }

    /**
     * Get the agentVersion property: Version of the NewRelic agent installed on the VM.
     * 
     * @return the agentVersion value.
     */
    public String agentVersion() {
        return this.agentVersion;
    }

    /**
     * Set the agentVersion property: Version of the NewRelic agent installed on the VM.
     * 
     * @param agentVersion the agentVersion value to set.
     * @return the VMInfoInner object itself.
     */
    public VMInfoInner withAgentVersion(String agentVersion) {
        this.agentVersion = agentVersion;
        return this;
    }

    /**
     * Get the agentStatus property: Status of the NewRelic agent installed on the VM.
     * 
     * @return the agentStatus value.
     */
    public String agentStatus() {
        return this.agentStatus;
    }

    /**
     * Set the agentStatus property: Status of the NewRelic agent installed on the VM.
     * 
     * @param agentStatus the agentStatus value to set.
     * @return the VMInfoInner object itself.
     */
    public VMInfoInner withAgentStatus(String agentStatus) {
        this.agentStatus = agentStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("vmId", this.vmId);
        jsonWriter.writeStringField("agentVersion", this.agentVersion);
        jsonWriter.writeStringField("agentStatus", this.agentStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VMInfoInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VMInfoInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VMInfoInner.
     */
    public static VMInfoInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VMInfoInner deserializedVMInfoInner = new VMInfoInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmId".equals(fieldName)) {
                    deserializedVMInfoInner.vmId = reader.getString();
                } else if ("agentVersion".equals(fieldName)) {
                    deserializedVMInfoInner.agentVersion = reader.getString();
                } else if ("agentStatus".equals(fieldName)) {
                    deserializedVMInfoInner.agentStatus = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVMInfoInner;
        });
    }
}
