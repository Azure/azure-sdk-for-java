// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of the NewRelic account.
 */
@Fluent
public final class NewRelicAccountProperties implements JsonSerializable<NewRelicAccountProperties> {
    /*
     * User id
     */
    private String userId;

    /*
     * NewRelic Account Information
     */
    private AccountInfo accountInfo;

    /*
     * NewRelic Organization Information
     */
    private OrganizationInfo organizationInfo;

    /*
     * date when plan was applied
     */
    private NewRelicSingleSignOnProperties singleSignOnProperties;

    /**
     * Creates an instance of NewRelicAccountProperties class.
     */
    public NewRelicAccountProperties() {
    }

    /**
     * Get the userId property: User id.
     * 
     * @return the userId value.
     */
    public String userId() {
        return this.userId;
    }

    /**
     * Set the userId property: User id.
     * 
     * @param userId the userId value to set.
     * @return the NewRelicAccountProperties object itself.
     */
    public NewRelicAccountProperties withUserId(String userId) {
        this.userId = userId;
        return this;
    }

    /**
     * Get the accountInfo property: NewRelic Account Information.
     * 
     * @return the accountInfo value.
     */
    public AccountInfo accountInfo() {
        return this.accountInfo;
    }

    /**
     * Set the accountInfo property: NewRelic Account Information.
     * 
     * @param accountInfo the accountInfo value to set.
     * @return the NewRelicAccountProperties object itself.
     */
    public NewRelicAccountProperties withAccountInfo(AccountInfo accountInfo) {
        this.accountInfo = accountInfo;
        return this;
    }

    /**
     * Get the organizationInfo property: NewRelic Organization Information.
     * 
     * @return the organizationInfo value.
     */
    public OrganizationInfo organizationInfo() {
        return this.organizationInfo;
    }

    /**
     * Set the organizationInfo property: NewRelic Organization Information.
     * 
     * @param organizationInfo the organizationInfo value to set.
     * @return the NewRelicAccountProperties object itself.
     */
    public NewRelicAccountProperties withOrganizationInfo(OrganizationInfo organizationInfo) {
        this.organizationInfo = organizationInfo;
        return this;
    }

    /**
     * Get the singleSignOnProperties property: date when plan was applied.
     * 
     * @return the singleSignOnProperties value.
     */
    public NewRelicSingleSignOnProperties singleSignOnProperties() {
        return this.singleSignOnProperties;
    }

    /**
     * Set the singleSignOnProperties property: date when plan was applied.
     * 
     * @param singleSignOnProperties the singleSignOnProperties value to set.
     * @return the NewRelicAccountProperties object itself.
     */
    public NewRelicAccountProperties withSingleSignOnProperties(NewRelicSingleSignOnProperties singleSignOnProperties) {
        this.singleSignOnProperties = singleSignOnProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (accountInfo() != null) {
            accountInfo().validate();
        }
        if (organizationInfo() != null) {
            organizationInfo().validate();
        }
        if (singleSignOnProperties() != null) {
            singleSignOnProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userId", this.userId);
        jsonWriter.writeJsonField("accountInfo", this.accountInfo);
        jsonWriter.writeJsonField("organizationInfo", this.organizationInfo);
        jsonWriter.writeJsonField("singleSignOnProperties", this.singleSignOnProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NewRelicAccountProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NewRelicAccountProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NewRelicAccountProperties.
     */
    public static NewRelicAccountProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NewRelicAccountProperties deserializedNewRelicAccountProperties = new NewRelicAccountProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userId".equals(fieldName)) {
                    deserializedNewRelicAccountProperties.userId = reader.getString();
                } else if ("accountInfo".equals(fieldName)) {
                    deserializedNewRelicAccountProperties.accountInfo = AccountInfo.fromJson(reader);
                } else if ("organizationInfo".equals(fieldName)) {
                    deserializedNewRelicAccountProperties.organizationInfo = OrganizationInfo.fromJson(reader);
                } else if ("singleSignOnProperties".equals(fieldName)) {
                    deserializedNewRelicAccountProperties.singleSignOnProperties
                        = NewRelicSingleSignOnProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNewRelicAccountProperties;
        });
    }
}
