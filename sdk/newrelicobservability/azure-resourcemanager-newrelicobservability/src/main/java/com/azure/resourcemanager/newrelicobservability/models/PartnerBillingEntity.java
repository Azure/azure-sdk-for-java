// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Partner Billing details associated with the resource.
 */
@Fluent
public final class PartnerBillingEntity implements JsonSerializable<PartnerBillingEntity> {
    /*
     * The New Relic Organization Id.
     */
    private String organizationId;

    /*
     * The New Relic Organization Name.
     */
    private String organizationName;

    /**
     * Creates an instance of PartnerBillingEntity class.
     */
    public PartnerBillingEntity() {
    }

    /**
     * Get the organizationId property: The New Relic Organization Id.
     * 
     * @return the organizationId value.
     */
    public String organizationId() {
        return this.organizationId;
    }

    /**
     * Set the organizationId property: The New Relic Organization Id.
     * 
     * @param organizationId the organizationId value to set.
     * @return the PartnerBillingEntity object itself.
     */
    public PartnerBillingEntity withOrganizationId(String organizationId) {
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Get the organizationName property: The New Relic Organization Name.
     * 
     * @return the organizationName value.
     */
    public String organizationName() {
        return this.organizationName;
    }

    /**
     * Set the organizationName property: The New Relic Organization Name.
     * 
     * @param organizationName the organizationName value to set.
     * @return the PartnerBillingEntity object itself.
     */
    public PartnerBillingEntity withOrganizationName(String organizationName) {
        this.organizationName = organizationName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("organizationId", this.organizationId);
        jsonWriter.writeStringField("organizationName", this.organizationName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PartnerBillingEntity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PartnerBillingEntity if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PartnerBillingEntity.
     */
    public static PartnerBillingEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PartnerBillingEntity deserializedPartnerBillingEntity = new PartnerBillingEntity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("organizationId".equals(fieldName)) {
                    deserializedPartnerBillingEntity.organizationId = reader.getString();
                } else if ("organizationName".equals(fieldName)) {
                    deserializedPartnerBillingEntity.organizationName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPartnerBillingEntity;
        });
    }
}
