// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.newrelicobservability.fluent.models.MonitoredSubscriptionPropertiesInner;
import com.azure.resourcemanager.newrelicobservability.models.ConfigurationName;

/**
 * An instance of this class provides access to all the operations defined in MonitoredSubscriptionsClient.
 */
public interface MonitoredSubscriptionsClient {
    /**
     * List the subscriptions currently being monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MonitoredSubscriptionPropertiesInner> list(String resourceGroupName, String monitorName);

    /**
     * List the subscriptions currently being monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MonitoredSubscriptionPropertiesInner> list(String resourceGroupName, String monitorName,
        Context context);

    /**
     * List the subscriptions currently being monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the request to update subscriptions needed to be monitored by the NewRelic monitor resource along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MonitoredSubscriptionPropertiesInner> getWithResponse(String resourceGroupName, String monitorName,
        ConfigurationName configurationName, Context context);

    /**
     * List the subscriptions currently being monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the request to update subscriptions needed to be monitored by the NewRelic monitor resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MonitoredSubscriptionPropertiesInner get(String resourceGroupName, String monitorName,
        ConfigurationName configurationName);

    /**
     * Add the subscriptions that should be monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the request to update subscriptions needed to be monitored by the
     * NewRelic monitor resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MonitoredSubscriptionPropertiesInner>, MonitoredSubscriptionPropertiesInner>
        beginCreateorUpdate(String resourceGroupName, String monitorName, ConfigurationName configurationName);

    /**
     * Add the subscriptions that should be monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @param body The request to update subscriptions needed to be monitored by the NewRelic monitor resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the request to update subscriptions needed to be monitored by the
     * NewRelic monitor resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MonitoredSubscriptionPropertiesInner>, MonitoredSubscriptionPropertiesInner>
        beginCreateorUpdate(String resourceGroupName, String monitorName, ConfigurationName configurationName,
            MonitoredSubscriptionPropertiesInner body, Context context);

    /**
     * Add the subscriptions that should be monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the request to update subscriptions needed to be monitored by the NewRelic monitor resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MonitoredSubscriptionPropertiesInner createorUpdate(String resourceGroupName, String monitorName,
        ConfigurationName configurationName);

    /**
     * Add the subscriptions that should be monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @param body The request to update subscriptions needed to be monitored by the NewRelic monitor resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the request to update subscriptions needed to be monitored by the NewRelic monitor resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MonitoredSubscriptionPropertiesInner createorUpdate(String resourceGroupName, String monitorName,
        ConfigurationName configurationName, MonitoredSubscriptionPropertiesInner body, Context context);

    /**
     * Updates the subscriptions that are being monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the request to update subscriptions needed to be monitored by the
     * NewRelic monitor resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MonitoredSubscriptionPropertiesInner>, MonitoredSubscriptionPropertiesInner>
        beginUpdate(String resourceGroupName, String monitorName, ConfigurationName configurationName);

    /**
     * Updates the subscriptions that are being monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @param body The request to update subscriptions needed to be monitored by the NewRelic monitor resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the request to update subscriptions needed to be monitored by the
     * NewRelic monitor resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MonitoredSubscriptionPropertiesInner>, MonitoredSubscriptionPropertiesInner> beginUpdate(
        String resourceGroupName, String monitorName, ConfigurationName configurationName,
        MonitoredSubscriptionPropertiesInner body, Context context);

    /**
     * Updates the subscriptions that are being monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the request to update subscriptions needed to be monitored by the NewRelic monitor resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MonitoredSubscriptionPropertiesInner update(String resourceGroupName, String monitorName,
        ConfigurationName configurationName);

    /**
     * Updates the subscriptions that are being monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @param body The request to update subscriptions needed to be monitored by the NewRelic monitor resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the request to update subscriptions needed to be monitored by the NewRelic monitor resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MonitoredSubscriptionPropertiesInner update(String resourceGroupName, String monitorName,
        ConfigurationName configurationName, MonitoredSubscriptionPropertiesInner body, Context context);

    /**
     * Updates the subscriptions that are being monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String monitorName,
        ConfigurationName configurationName);

    /**
     * Updates the subscriptions that are being monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String monitorName,
        ConfigurationName configurationName, Context context);

    /**
     * Updates the subscriptions that are being monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String monitorName, ConfigurationName configurationName);

    /**
     * Updates the subscriptions that are being monitored by the NewRelic monitor resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitors resource.
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String monitorName, ConfigurationName configurationName, Context context);
}
