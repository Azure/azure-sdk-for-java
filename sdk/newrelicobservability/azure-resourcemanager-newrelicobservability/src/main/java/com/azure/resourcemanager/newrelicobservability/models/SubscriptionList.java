// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.newrelicobservability.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.newrelicobservability.fluent.models.MonitoredSubscriptionInner;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The request to update subscriptions needed to be monitored by the NewRelic monitor resource.
 */
@Fluent
public final class SubscriptionList {
    /*
     * The operation for the patch on the resource.
     */
    @JsonProperty(value = "patchOperation")
    private PatchOperation patchOperation;

    /*
     * List of subscriptions and the state of the monitoring.
     */
    @JsonProperty(value = "monitoredSubscriptionList")
    private List<MonitoredSubscriptionInner> monitoredSubscriptionList;

    /*
     * Provisioning State of the resource
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of SubscriptionList class.
     */
    public SubscriptionList() {
    }

    /**
     * Get the patchOperation property: The operation for the patch on the resource.
     * 
     * @return the patchOperation value.
     */
    public PatchOperation patchOperation() {
        return this.patchOperation;
    }

    /**
     * Set the patchOperation property: The operation for the patch on the resource.
     * 
     * @param patchOperation the patchOperation value to set.
     * @return the SubscriptionList object itself.
     */
    public SubscriptionList withPatchOperation(PatchOperation patchOperation) {
        this.patchOperation = patchOperation;
        return this;
    }

    /**
     * Get the monitoredSubscriptionList property: List of subscriptions and the state of the monitoring.
     * 
     * @return the monitoredSubscriptionList value.
     */
    public List<MonitoredSubscriptionInner> monitoredSubscriptionList() {
        return this.monitoredSubscriptionList;
    }

    /**
     * Set the monitoredSubscriptionList property: List of subscriptions and the state of the monitoring.
     * 
     * @param monitoredSubscriptionList the monitoredSubscriptionList value to set.
     * @return the SubscriptionList object itself.
     */
    public SubscriptionList withMonitoredSubscriptionList(List<MonitoredSubscriptionInner> monitoredSubscriptionList) {
        this.monitoredSubscriptionList = monitoredSubscriptionList;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning State of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (monitoredSubscriptionList() != null) {
            monitoredSubscriptionList().forEach(e -> e.validate());
        }
    }
}
