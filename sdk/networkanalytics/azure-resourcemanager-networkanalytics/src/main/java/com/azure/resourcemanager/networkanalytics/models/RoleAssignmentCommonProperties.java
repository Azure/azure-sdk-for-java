// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The details for role assignment common properties.
 */
@Fluent
public final class RoleAssignmentCommonProperties {
    /*
     * Role Id of the Built-In Role
     */
    @JsonProperty(value = "roleId", required = true)
    private String roleId;

    /*
     * Object ID of the AAD principal or security-group.
     */
    @JsonProperty(value = "principalId", required = true)
    private String principalId;

    /*
     * User name.
     */
    @JsonProperty(value = "userName", required = true)
    private String username;

    /*
     * Data Type Scope at which the role assignment is created.
     */
    @JsonProperty(value = "dataTypeScope", required = true)
    private List<String> dataTypeScope;

    /*
     * Type of the principal Id: User, Group or ServicePrincipal
     */
    @JsonProperty(value = "principalType", required = true)
    private String principalType;

    /*
     * Data Product role to be assigned to a user.
     */
    @JsonProperty(value = "role", required = true)
    private DataProductUserRole role;

    /**
     * Creates an instance of RoleAssignmentCommonProperties class.
     */
    public RoleAssignmentCommonProperties() {
    }

    /**
     * Get the roleId property: Role Id of the Built-In Role.
     * 
     * @return the roleId value.
     */
    public String roleId() {
        return this.roleId;
    }

    /**
     * Set the roleId property: Role Id of the Built-In Role.
     * 
     * @param roleId the roleId value to set.
     * @return the RoleAssignmentCommonProperties object itself.
     */
    public RoleAssignmentCommonProperties withRoleId(String roleId) {
        this.roleId = roleId;
        return this;
    }

    /**
     * Get the principalId property: Object ID of the AAD principal or security-group.
     * 
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Set the principalId property: Object ID of the AAD principal or security-group.
     * 
     * @param principalId the principalId value to set.
     * @return the RoleAssignmentCommonProperties object itself.
     */
    public RoleAssignmentCommonProperties withPrincipalId(String principalId) {
        this.principalId = principalId;
        return this;
    }

    /**
     * Get the username property: User name.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: User name.
     * 
     * @param username the username value to set.
     * @return the RoleAssignmentCommonProperties object itself.
     */
    public RoleAssignmentCommonProperties withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the dataTypeScope property: Data Type Scope at which the role assignment is created.
     * 
     * @return the dataTypeScope value.
     */
    public List<String> dataTypeScope() {
        return this.dataTypeScope;
    }

    /**
     * Set the dataTypeScope property: Data Type Scope at which the role assignment is created.
     * 
     * @param dataTypeScope the dataTypeScope value to set.
     * @return the RoleAssignmentCommonProperties object itself.
     */
    public RoleAssignmentCommonProperties withDataTypeScope(List<String> dataTypeScope) {
        this.dataTypeScope = dataTypeScope;
        return this;
    }

    /**
     * Get the principalType property: Type of the principal Id: User, Group or ServicePrincipal.
     * 
     * @return the principalType value.
     */
    public String principalType() {
        return this.principalType;
    }

    /**
     * Set the principalType property: Type of the principal Id: User, Group or ServicePrincipal.
     * 
     * @param principalType the principalType value to set.
     * @return the RoleAssignmentCommonProperties object itself.
     */
    public RoleAssignmentCommonProperties withPrincipalType(String principalType) {
        this.principalType = principalType;
        return this;
    }

    /**
     * Get the role property: Data Product role to be assigned to a user.
     * 
     * @return the role value.
     */
    public DataProductUserRole role() {
        return this.role;
    }

    /**
     * Set the role property: Data Product role to be assigned to a user.
     * 
     * @param role the role value to set.
     * @return the RoleAssignmentCommonProperties object itself.
     */
    public RoleAssignmentCommonProperties withRole(DataProductUserRole role) {
        this.role = role;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (roleId() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property roleId in model RoleAssignmentCommonProperties"));
        }
        if (principalId() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property principalId in model RoleAssignmentCommonProperties"));
        }
        if (username() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property username in model RoleAssignmentCommonProperties"));
        }
        if (dataTypeScope() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property dataTypeScope in model RoleAssignmentCommonProperties"));
        }
        if (principalType() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property principalType in model RoleAssignmentCommonProperties"));
        }
        if (role() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property role in model RoleAssignmentCommonProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RoleAssignmentCommonProperties.class);
}
