// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.networkanalytics.fluent.models.DataProductInner;
import com.azure.resourcemanager.networkanalytics.fluent.models.RoleAssignmentDetailInner;
import com.azure.resourcemanager.networkanalytics.models.AccountSas;
import com.azure.resourcemanager.networkanalytics.models.AccountSasToken;
import com.azure.resourcemanager.networkanalytics.models.ConsumptionEndpointsProperties;
import com.azure.resourcemanager.networkanalytics.models.ControlState;
import com.azure.resourcemanager.networkanalytics.models.DataProduct;
import com.azure.resourcemanager.networkanalytics.models.DataProductNetworkAcls;
import com.azure.resourcemanager.networkanalytics.models.DataProductUpdate;
import com.azure.resourcemanager.networkanalytics.models.EncryptionKeyDetails;
import com.azure.resourcemanager.networkanalytics.models.KeyVaultInfo;
import com.azure.resourcemanager.networkanalytics.models.ListRoleAssignments;
import com.azure.resourcemanager.networkanalytics.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.networkanalytics.models.ManagedServiceIdentity;
import com.azure.resourcemanager.networkanalytics.models.ProvisioningState;
import com.azure.resourcemanager.networkanalytics.models.RoleAssignmentCommonProperties;
import com.azure.resourcemanager.networkanalytics.models.RoleAssignmentDetail;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class DataProductImpl implements DataProduct, DataProduct.Definition, DataProduct.Update {
    private DataProductInner innerObject;

    private final com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGuid() {
        return this.innerModel().resourceGuid();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String publisher() {
        return this.innerModel().publisher();
    }

    public String product() {
        return this.innerModel().product();
    }

    public String majorVersion() {
        return this.innerModel().majorVersion();
    }

    public List<String> owners() {
        List<String> inner = this.innerModel().owners();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ControlState redundancy() {
        return this.innerModel().redundancy();
    }

    public String purviewAccount() {
        return this.innerModel().purviewAccount();
    }

    public String purviewCollection() {
        return this.innerModel().purviewCollection();
    }

    public ControlState privateLinksEnabled() {
        return this.innerModel().privateLinksEnabled();
    }

    public ControlState publicNetworkAccess() {
        return this.innerModel().publicNetworkAccess();
    }

    public ControlState customerManagedKeyEncryptionEnabled() {
        return this.innerModel().customerManagedKeyEncryptionEnabled();
    }

    public EncryptionKeyDetails customerEncryptionKey() {
        return this.innerModel().customerEncryptionKey();
    }

    public DataProductNetworkAcls networkacls() {
        return this.innerModel().networkacls();
    }

    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.innerModel().managedResourceGroupConfiguration();
    }

    public List<String> availableMinorVersions() {
        List<String> inner = this.innerModel().availableMinorVersions();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String currentMinorVersion() {
        return this.innerModel().currentMinorVersion();
    }

    public String documentation() {
        return this.innerModel().documentation();
    }

    public ConsumptionEndpointsProperties consumptionEndpoints() {
        return this.innerModel().consumptionEndpoints();
    }

    public String keyVaultUrl() {
        return this.innerModel().keyVaultUrl();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public DataProductInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String dataProductName;

    private DataProductUpdate updateProperties;

    public DataProductImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public DataProduct create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataProducts()
                .create(resourceGroupName, dataProductName, this.innerModel(), Context.NONE);
        return this;
    }

    public DataProduct create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataProducts()
                .create(resourceGroupName, dataProductName, this.innerModel(), context);
        return this;
    }

    DataProductImpl(String name, com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager serviceManager) {
        this.innerObject = new DataProductInner();
        this.serviceManager = serviceManager;
        this.dataProductName = name;
    }

    public DataProductImpl update() {
        this.updateProperties = new DataProductUpdate();
        return this;
    }

    public DataProduct apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataProducts()
                .update(resourceGroupName, dataProductName, updateProperties, Context.NONE);
        return this;
    }

    public DataProduct apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataProducts()
                .update(resourceGroupName, dataProductName, updateProperties, context);
        return this;
    }

    DataProductImpl(
        DataProductInner innerObject,
        com.azure.resourcemanager.networkanalytics.NetworkanalyticsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.dataProductName = Utils.getValueFromIdByName(innerObject.id(), "dataProducts");
    }

    public DataProduct refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataProducts()
                .getByResourceGroupWithResponse(resourceGroupName, dataProductName, Context.NONE)
                .getValue();
        return this;
    }

    public DataProduct refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDataProducts()
                .getByResourceGroupWithResponse(resourceGroupName, dataProductName, context)
                .getValue();
        return this;
    }

    public Response<RoleAssignmentDetail> addUserRoleWithResponse(
        RoleAssignmentCommonProperties body, Context context) {
        return serviceManager.dataProducts().addUserRoleWithResponse(resourceGroupName, dataProductName, body, context);
    }

    public RoleAssignmentDetail addUserRole(RoleAssignmentCommonProperties body) {
        return serviceManager.dataProducts().addUserRole(resourceGroupName, dataProductName, body);
    }

    public Response<AccountSasToken> generateStorageAccountSasTokenWithResponse(AccountSas body, Context context) {
        return serviceManager
            .dataProducts()
            .generateStorageAccountSasTokenWithResponse(resourceGroupName, dataProductName, body, context);
    }

    public AccountSasToken generateStorageAccountSasToken(AccountSas body) {
        return serviceManager.dataProducts().generateStorageAccountSasToken(resourceGroupName, dataProductName, body);
    }

    public Response<ListRoleAssignments> listRolesAssignmentsWithResponse(Object body, Context context) {
        return serviceManager
            .dataProducts()
            .listRolesAssignmentsWithResponse(resourceGroupName, dataProductName, body, context);
    }

    public ListRoleAssignments listRolesAssignments(Object body) {
        return serviceManager.dataProducts().listRolesAssignments(resourceGroupName, dataProductName, body);
    }

    public Response<Void> removeUserRoleWithResponse(RoleAssignmentDetailInner body, Context context) {
        return serviceManager
            .dataProducts()
            .removeUserRoleWithResponse(resourceGroupName, dataProductName, body, context);
    }

    public void removeUserRole(RoleAssignmentDetailInner body) {
        serviceManager.dataProducts().removeUserRole(resourceGroupName, dataProductName, body);
    }

    public Response<Void> rotateKeyWithResponse(KeyVaultInfo body, Context context) {
        return serviceManager.dataProducts().rotateKeyWithResponse(resourceGroupName, dataProductName, body, context);
    }

    public void rotateKey(KeyVaultInfo body) {
        serviceManager.dataProducts().rotateKey(resourceGroupName, dataProductName, body);
    }

    public DataProductImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public DataProductImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public DataProductImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public DataProductImpl withIdentity(ManagedServiceIdentity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateProperties.withIdentity(identity);
            return this;
        }
    }

    public DataProductImpl withPublisher(String publisher) {
        this.innerModel().withPublisher(publisher);
        return this;
    }

    public DataProductImpl withProduct(String product) {
        this.innerModel().withProduct(product);
        return this;
    }

    public DataProductImpl withMajorVersion(String majorVersion) {
        this.innerModel().withMajorVersion(majorVersion);
        return this;
    }

    public DataProductImpl withOwners(List<String> owners) {
        if (isInCreateMode()) {
            this.innerModel().withOwners(owners);
            return this;
        } else {
            this.updateProperties.withOwners(owners);
            return this;
        }
    }

    public DataProductImpl withRedundancy(ControlState redundancy) {
        this.innerModel().withRedundancy(redundancy);
        return this;
    }

    public DataProductImpl withPurviewAccount(String purviewAccount) {
        if (isInCreateMode()) {
            this.innerModel().withPurviewAccount(purviewAccount);
            return this;
        } else {
            this.updateProperties.withPurviewAccount(purviewAccount);
            return this;
        }
    }

    public DataProductImpl withPurviewCollection(String purviewCollection) {
        if (isInCreateMode()) {
            this.innerModel().withPurviewCollection(purviewCollection);
            return this;
        } else {
            this.updateProperties.withPurviewCollection(purviewCollection);
            return this;
        }
    }

    public DataProductImpl withPrivateLinksEnabled(ControlState privateLinksEnabled) {
        if (isInCreateMode()) {
            this.innerModel().withPrivateLinksEnabled(privateLinksEnabled);
            return this;
        } else {
            this.updateProperties.withPrivateLinksEnabled(privateLinksEnabled);
            return this;
        }
    }

    public DataProductImpl withPublicNetworkAccess(ControlState publicNetworkAccess) {
        this.innerModel().withPublicNetworkAccess(publicNetworkAccess);
        return this;
    }

    public DataProductImpl withCustomerManagedKeyEncryptionEnabled(ControlState customerManagedKeyEncryptionEnabled) {
        this.innerModel().withCustomerManagedKeyEncryptionEnabled(customerManagedKeyEncryptionEnabled);
        return this;
    }

    public DataProductImpl withCustomerEncryptionKey(EncryptionKeyDetails customerEncryptionKey) {
        this.innerModel().withCustomerEncryptionKey(customerEncryptionKey);
        return this;
    }

    public DataProductImpl withNetworkacls(DataProductNetworkAcls networkacls) {
        this.innerModel().withNetworkacls(networkacls);
        return this;
    }

    public DataProductImpl withManagedResourceGroupConfiguration(
        ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        this.innerModel().withManagedResourceGroupConfiguration(managedResourceGroupConfiguration);
        return this;
    }

    public DataProductImpl withCurrentMinorVersion(String currentMinorVersion) {
        this.updateProperties.withCurrentMinorVersion(currentMinorVersion);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
