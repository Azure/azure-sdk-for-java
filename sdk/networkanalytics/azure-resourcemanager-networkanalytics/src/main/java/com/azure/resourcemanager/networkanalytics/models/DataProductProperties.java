// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The data product properties.
 */
@Fluent
public final class DataProductProperties implements JsonSerializable<DataProductProperties> {
    /*
     * The resource GUID property of the data product resource.
     */
    private String resourceGuid;

    /*
     * Latest provisioning state of data product.
     */
    private ProvisioningState provisioningState;

    /*
     * Data product publisher name.
     */
    private String publisher;

    /*
     * Product name of data product.
     */
    private String product;

    /*
     * Major version of data product.
     */
    private String majorVersion;

    /*
     * List of name or email associated with data product resource deployment.
     */
    private List<String> owners;

    /*
     * Flag to enable or disable redundancy for data product.
     */
    private ControlState redundancy;

    /*
     * Purview account url for data product to connect to.
     */
    private String purviewAccount;

    /*
     * Purview collection url for data product to connect to.
     */
    private String purviewCollection;

    /*
     * Flag to enable or disable private link for data product resource.
     */
    private ControlState privateLinksEnabled;

    /*
     * Flag to enable or disable public access of data product resource.
     */
    private ControlState publicNetworkAccess;

    /*
     * Flag to enable customer managed key encryption for data product.
     */
    private ControlState customerManagedKeyEncryptionEnabled;

    /*
     * Customer managed encryption key details for data product.
     */
    private EncryptionKeyDetails customerEncryptionKey;

    /*
     * Network rule set for data product.
     */
    private DataProductNetworkAcls networkacls;

    /*
     * Managed resource group configuration.
     */
    private ManagedResourceGroupConfiguration managedResourceGroupConfiguration;

    /*
     * List of available minor versions of the data product resource.
     */
    private List<String> availableMinorVersions;

    /*
     * Current configured minor version of the data product resource.
     */
    private String currentMinorVersion;

    /*
     * Documentation link for the data product based on definition file.
     */
    private String documentation;

    /*
     * Resource links which exposed to the customer to query the data.
     */
    private ConsumptionEndpointsProperties consumptionEndpoints;

    /*
     * Key vault url.
     */
    private String keyVaultUrl;

    /**
     * Creates an instance of DataProductProperties class.
     */
    public DataProductProperties() {
    }

    /**
     * Get the resourceGuid property: The resource GUID property of the data product resource.
     * 
     * @return the resourceGuid value.
     */
    public String resourceGuid() {
        return this.resourceGuid;
    }

    /**
     * Get the provisioningState property: Latest provisioning state of data product.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the publisher property: Data product publisher name.
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.publisher;
    }

    /**
     * Set the publisher property: Data product publisher name.
     * 
     * @param publisher the publisher value to set.
     * @return the DataProductProperties object itself.
     */
    public DataProductProperties withPublisher(String publisher) {
        this.publisher = publisher;
        return this;
    }

    /**
     * Get the product property: Product name of data product.
     * 
     * @return the product value.
     */
    public String product() {
        return this.product;
    }

    /**
     * Set the product property: Product name of data product.
     * 
     * @param product the product value to set.
     * @return the DataProductProperties object itself.
     */
    public DataProductProperties withProduct(String product) {
        this.product = product;
        return this;
    }

    /**
     * Get the majorVersion property: Major version of data product.
     * 
     * @return the majorVersion value.
     */
    public String majorVersion() {
        return this.majorVersion;
    }

    /**
     * Set the majorVersion property: Major version of data product.
     * 
     * @param majorVersion the majorVersion value to set.
     * @return the DataProductProperties object itself.
     */
    public DataProductProperties withMajorVersion(String majorVersion) {
        this.majorVersion = majorVersion;
        return this;
    }

    /**
     * Get the owners property: List of name or email associated with data product resource deployment.
     * 
     * @return the owners value.
     */
    public List<String> owners() {
        return this.owners;
    }

    /**
     * Set the owners property: List of name or email associated with data product resource deployment.
     * 
     * @param owners the owners value to set.
     * @return the DataProductProperties object itself.
     */
    public DataProductProperties withOwners(List<String> owners) {
        this.owners = owners;
        return this;
    }

    /**
     * Get the redundancy property: Flag to enable or disable redundancy for data product.
     * 
     * @return the redundancy value.
     */
    public ControlState redundancy() {
        return this.redundancy;
    }

    /**
     * Set the redundancy property: Flag to enable or disable redundancy for data product.
     * 
     * @param redundancy the redundancy value to set.
     * @return the DataProductProperties object itself.
     */
    public DataProductProperties withRedundancy(ControlState redundancy) {
        this.redundancy = redundancy;
        return this;
    }

    /**
     * Get the purviewAccount property: Purview account url for data product to connect to.
     * 
     * @return the purviewAccount value.
     */
    public String purviewAccount() {
        return this.purviewAccount;
    }

    /**
     * Set the purviewAccount property: Purview account url for data product to connect to.
     * 
     * @param purviewAccount the purviewAccount value to set.
     * @return the DataProductProperties object itself.
     */
    public DataProductProperties withPurviewAccount(String purviewAccount) {
        this.purviewAccount = purviewAccount;
        return this;
    }

    /**
     * Get the purviewCollection property: Purview collection url for data product to connect to.
     * 
     * @return the purviewCollection value.
     */
    public String purviewCollection() {
        return this.purviewCollection;
    }

    /**
     * Set the purviewCollection property: Purview collection url for data product to connect to.
     * 
     * @param purviewCollection the purviewCollection value to set.
     * @return the DataProductProperties object itself.
     */
    public DataProductProperties withPurviewCollection(String purviewCollection) {
        this.purviewCollection = purviewCollection;
        return this;
    }

    /**
     * Get the privateLinksEnabled property: Flag to enable or disable private link for data product resource.
     * 
     * @return the privateLinksEnabled value.
     */
    public ControlState privateLinksEnabled() {
        return this.privateLinksEnabled;
    }

    /**
     * Set the privateLinksEnabled property: Flag to enable or disable private link for data product resource.
     * 
     * @param privateLinksEnabled the privateLinksEnabled value to set.
     * @return the DataProductProperties object itself.
     */
    public DataProductProperties withPrivateLinksEnabled(ControlState privateLinksEnabled) {
        this.privateLinksEnabled = privateLinksEnabled;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: Flag to enable or disable public access of data product resource.
     * 
     * @return the publicNetworkAccess value.
     */
    public ControlState publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Flag to enable or disable public access of data product resource.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the DataProductProperties object itself.
     */
    public DataProductProperties withPublicNetworkAccess(ControlState publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the customerManagedKeyEncryptionEnabled property: Flag to enable customer managed key encryption for data
     * product.
     * 
     * @return the customerManagedKeyEncryptionEnabled value.
     */
    public ControlState customerManagedKeyEncryptionEnabled() {
        return this.customerManagedKeyEncryptionEnabled;
    }

    /**
     * Set the customerManagedKeyEncryptionEnabled property: Flag to enable customer managed key encryption for data
     * product.
     * 
     * @param customerManagedKeyEncryptionEnabled the customerManagedKeyEncryptionEnabled value to set.
     * @return the DataProductProperties object itself.
     */
    public DataProductProperties
        withCustomerManagedKeyEncryptionEnabled(ControlState customerManagedKeyEncryptionEnabled) {
        this.customerManagedKeyEncryptionEnabled = customerManagedKeyEncryptionEnabled;
        return this;
    }

    /**
     * Get the customerEncryptionKey property: Customer managed encryption key details for data product.
     * 
     * @return the customerEncryptionKey value.
     */
    public EncryptionKeyDetails customerEncryptionKey() {
        return this.customerEncryptionKey;
    }

    /**
     * Set the customerEncryptionKey property: Customer managed encryption key details for data product.
     * 
     * @param customerEncryptionKey the customerEncryptionKey value to set.
     * @return the DataProductProperties object itself.
     */
    public DataProductProperties withCustomerEncryptionKey(EncryptionKeyDetails customerEncryptionKey) {
        this.customerEncryptionKey = customerEncryptionKey;
        return this;
    }

    /**
     * Get the networkacls property: Network rule set for data product.
     * 
     * @return the networkacls value.
     */
    public DataProductNetworkAcls networkacls() {
        return this.networkacls;
    }

    /**
     * Set the networkacls property: Network rule set for data product.
     * 
     * @param networkacls the networkacls value to set.
     * @return the DataProductProperties object itself.
     */
    public DataProductProperties withNetworkacls(DataProductNetworkAcls networkacls) {
        this.networkacls = networkacls;
        return this;
    }

    /**
     * Get the managedResourceGroupConfiguration property: Managed resource group configuration.
     * 
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.managedResourceGroupConfiguration;
    }

    /**
     * Set the managedResourceGroupConfiguration property: Managed resource group configuration.
     * 
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the DataProductProperties object itself.
     */
    public DataProductProperties
        withManagedResourceGroupConfiguration(ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        this.managedResourceGroupConfiguration = managedResourceGroupConfiguration;
        return this;
    }

    /**
     * Get the availableMinorVersions property: List of available minor versions of the data product resource.
     * 
     * @return the availableMinorVersions value.
     */
    public List<String> availableMinorVersions() {
        return this.availableMinorVersions;
    }

    /**
     * Get the currentMinorVersion property: Current configured minor version of the data product resource.
     * 
     * @return the currentMinorVersion value.
     */
    public String currentMinorVersion() {
        return this.currentMinorVersion;
    }

    /**
     * Set the currentMinorVersion property: Current configured minor version of the data product resource.
     * 
     * @param currentMinorVersion the currentMinorVersion value to set.
     * @return the DataProductProperties object itself.
     */
    public DataProductProperties withCurrentMinorVersion(String currentMinorVersion) {
        this.currentMinorVersion = currentMinorVersion;
        return this;
    }

    /**
     * Get the documentation property: Documentation link for the data product based on definition file.
     * 
     * @return the documentation value.
     */
    public String documentation() {
        return this.documentation;
    }

    /**
     * Get the consumptionEndpoints property: Resource links which exposed to the customer to query the data.
     * 
     * @return the consumptionEndpoints value.
     */
    public ConsumptionEndpointsProperties consumptionEndpoints() {
        return this.consumptionEndpoints;
    }

    /**
     * Get the keyVaultUrl property: Key vault url.
     * 
     * @return the keyVaultUrl value.
     */
    public String keyVaultUrl() {
        return this.keyVaultUrl;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (publisher() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property publisher in model DataProductProperties"));
        }
        if (product() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property product in model DataProductProperties"));
        }
        if (majorVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property majorVersion in model DataProductProperties"));
        }
        if (customerEncryptionKey() != null) {
            customerEncryptionKey().validate();
        }
        if (networkacls() != null) {
            networkacls().validate();
        }
        if (managedResourceGroupConfiguration() != null) {
            managedResourceGroupConfiguration().validate();
        }
        if (consumptionEndpoints() != null) {
            consumptionEndpoints().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataProductProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("publisher", this.publisher);
        jsonWriter.writeStringField("product", this.product);
        jsonWriter.writeStringField("majorVersion", this.majorVersion);
        jsonWriter.writeArrayField("owners", this.owners, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("redundancy", this.redundancy == null ? null : this.redundancy.toString());
        jsonWriter.writeStringField("purviewAccount", this.purviewAccount);
        jsonWriter.writeStringField("purviewCollection", this.purviewCollection);
        jsonWriter.writeStringField("privateLinksEnabled",
            this.privateLinksEnabled == null ? null : this.privateLinksEnabled.toString());
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        jsonWriter.writeStringField("customerManagedKeyEncryptionEnabled",
            this.customerManagedKeyEncryptionEnabled == null
                ? null
                : this.customerManagedKeyEncryptionEnabled.toString());
        jsonWriter.writeJsonField("customerEncryptionKey", this.customerEncryptionKey);
        jsonWriter.writeJsonField("networkacls", this.networkacls);
        jsonWriter.writeJsonField("managedResourceGroupConfiguration", this.managedResourceGroupConfiguration);
        jsonWriter.writeStringField("currentMinorVersion", this.currentMinorVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataProductProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataProductProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataProductProperties.
     */
    public static DataProductProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataProductProperties deserializedDataProductProperties = new DataProductProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publisher".equals(fieldName)) {
                    deserializedDataProductProperties.publisher = reader.getString();
                } else if ("product".equals(fieldName)) {
                    deserializedDataProductProperties.product = reader.getString();
                } else if ("majorVersion".equals(fieldName)) {
                    deserializedDataProductProperties.majorVersion = reader.getString();
                } else if ("resourceGuid".equals(fieldName)) {
                    deserializedDataProductProperties.resourceGuid = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDataProductProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("owners".equals(fieldName)) {
                    List<String> owners = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataProductProperties.owners = owners;
                } else if ("redundancy".equals(fieldName)) {
                    deserializedDataProductProperties.redundancy = ControlState.fromString(reader.getString());
                } else if ("purviewAccount".equals(fieldName)) {
                    deserializedDataProductProperties.purviewAccount = reader.getString();
                } else if ("purviewCollection".equals(fieldName)) {
                    deserializedDataProductProperties.purviewCollection = reader.getString();
                } else if ("privateLinksEnabled".equals(fieldName)) {
                    deserializedDataProductProperties.privateLinksEnabled = ControlState.fromString(reader.getString());
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedDataProductProperties.publicNetworkAccess = ControlState.fromString(reader.getString());
                } else if ("customerManagedKeyEncryptionEnabled".equals(fieldName)) {
                    deserializedDataProductProperties.customerManagedKeyEncryptionEnabled
                        = ControlState.fromString(reader.getString());
                } else if ("customerEncryptionKey".equals(fieldName)) {
                    deserializedDataProductProperties.customerEncryptionKey = EncryptionKeyDetails.fromJson(reader);
                } else if ("networkacls".equals(fieldName)) {
                    deserializedDataProductProperties.networkacls = DataProductNetworkAcls.fromJson(reader);
                } else if ("managedResourceGroupConfiguration".equals(fieldName)) {
                    deserializedDataProductProperties.managedResourceGroupConfiguration
                        = ManagedResourceGroupConfiguration.fromJson(reader);
                } else if ("availableMinorVersions".equals(fieldName)) {
                    List<String> availableMinorVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataProductProperties.availableMinorVersions = availableMinorVersions;
                } else if ("currentMinorVersion".equals(fieldName)) {
                    deserializedDataProductProperties.currentMinorVersion = reader.getString();
                } else if ("documentation".equals(fieldName)) {
                    deserializedDataProductProperties.documentation = reader.getString();
                } else if ("consumptionEndpoints".equals(fieldName)) {
                    deserializedDataProductProperties.consumptionEndpoints
                        = ConsumptionEndpointsProperties.fromJson(reader);
                } else if ("keyVaultUrl".equals(fieldName)) {
                    deserializedDataProductProperties.keyVaultUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataProductProperties;
        });
    }
}
