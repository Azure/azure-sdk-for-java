// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Encryption key details.
 */
@Fluent
public final class EncryptionKeyDetails implements JsonSerializable<EncryptionKeyDetails> {
    /*
     * The Uri of the key vault.
     */
    private String keyVaultUri;

    /*
     * The name of the key vault key.
     */
    private String keyName;

    /*
     * The version of the key vault key.
     */
    private String keyVersion;

    /**
     * Creates an instance of EncryptionKeyDetails class.
     */
    public EncryptionKeyDetails() {
    }

    /**
     * Get the keyVaultUri property: The Uri of the key vault.
     * 
     * @return the keyVaultUri value.
     */
    public String keyVaultUri() {
        return this.keyVaultUri;
    }

    /**
     * Set the keyVaultUri property: The Uri of the key vault.
     * 
     * @param keyVaultUri the keyVaultUri value to set.
     * @return the EncryptionKeyDetails object itself.
     */
    public EncryptionKeyDetails withKeyVaultUri(String keyVaultUri) {
        this.keyVaultUri = keyVaultUri;
        return this;
    }

    /**
     * Get the keyName property: The name of the key vault key.
     * 
     * @return the keyName value.
     */
    public String keyName() {
        return this.keyName;
    }

    /**
     * Set the keyName property: The name of the key vault key.
     * 
     * @param keyName the keyName value to set.
     * @return the EncryptionKeyDetails object itself.
     */
    public EncryptionKeyDetails withKeyName(String keyName) {
        this.keyName = keyName;
        return this;
    }

    /**
     * Get the keyVersion property: The version of the key vault key.
     * 
     * @return the keyVersion value.
     */
    public String keyVersion() {
        return this.keyVersion;
    }

    /**
     * Set the keyVersion property: The version of the key vault key.
     * 
     * @param keyVersion the keyVersion value to set.
     * @return the EncryptionKeyDetails object itself.
     */
    public EncryptionKeyDetails withKeyVersion(String keyVersion) {
        this.keyVersion = keyVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyVaultUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property keyVaultUri in model EncryptionKeyDetails"));
        }
        if (keyName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property keyName in model EncryptionKeyDetails"));
        }
        if (keyVersion() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property keyVersion in model EncryptionKeyDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EncryptionKeyDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyVaultUri", this.keyVaultUri);
        jsonWriter.writeStringField("keyName", this.keyName);
        jsonWriter.writeStringField("keyVersion", this.keyVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionKeyDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionKeyDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EncryptionKeyDetails.
     */
    public static EncryptionKeyDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionKeyDetails deserializedEncryptionKeyDetails = new EncryptionKeyDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyVaultUri".equals(fieldName)) {
                    deserializedEncryptionKeyDetails.keyVaultUri = reader.getString();
                } else if ("keyName".equals(fieldName)) {
                    deserializedEncryptionKeyDetails.keyName = reader.getString();
                } else if ("keyVersion".equals(fieldName)) {
                    deserializedEncryptionKeyDetails.keyVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionKeyDetails;
        });
    }
}
