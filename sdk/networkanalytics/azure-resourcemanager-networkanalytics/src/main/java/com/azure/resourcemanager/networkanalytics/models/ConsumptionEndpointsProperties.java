// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of Consumption Properties.
 */
@Immutable
public final class ConsumptionEndpointsProperties implements JsonSerializable<ConsumptionEndpointsProperties> {
    /*
     * Ingestion url to upload the data.
     */
    private String ingestionUrl;

    /*
     * Resource Id of ingestion endpoint.
     */
    private String ingestionResourceId;

    /*
     * Url to consume file type.
     */
    private String fileAccessUrl;

    /*
     * Resource Id of file access endpoint.
     */
    private String fileAccessResourceId;

    /*
     * Url to consume the processed data.
     */
    private String queryUrl;

    /*
     * Resource Id of query endpoint.
     */
    private String queryResourceId;

    /**
     * Creates an instance of ConsumptionEndpointsProperties class.
     */
    public ConsumptionEndpointsProperties() {
    }

    /**
     * Get the ingestionUrl property: Ingestion url to upload the data.
     * 
     * @return the ingestionUrl value.
     */
    public String ingestionUrl() {
        return this.ingestionUrl;
    }

    /**
     * Get the ingestionResourceId property: Resource Id of ingestion endpoint.
     * 
     * @return the ingestionResourceId value.
     */
    public String ingestionResourceId() {
        return this.ingestionResourceId;
    }

    /**
     * Get the fileAccessUrl property: Url to consume file type.
     * 
     * @return the fileAccessUrl value.
     */
    public String fileAccessUrl() {
        return this.fileAccessUrl;
    }

    /**
     * Get the fileAccessResourceId property: Resource Id of file access endpoint.
     * 
     * @return the fileAccessResourceId value.
     */
    public String fileAccessResourceId() {
        return this.fileAccessResourceId;
    }

    /**
     * Get the queryUrl property: Url to consume the processed data.
     * 
     * @return the queryUrl value.
     */
    public String queryUrl() {
        return this.queryUrl;
    }

    /**
     * Get the queryResourceId property: Resource Id of query endpoint.
     * 
     * @return the queryResourceId value.
     */
    public String queryResourceId() {
        return this.queryResourceId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConsumptionEndpointsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConsumptionEndpointsProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConsumptionEndpointsProperties.
     */
    public static ConsumptionEndpointsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConsumptionEndpointsProperties deserializedConsumptionEndpointsProperties
                = new ConsumptionEndpointsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ingestionUrl".equals(fieldName)) {
                    deserializedConsumptionEndpointsProperties.ingestionUrl = reader.getString();
                } else if ("ingestionResourceId".equals(fieldName)) {
                    deserializedConsumptionEndpointsProperties.ingestionResourceId = reader.getString();
                } else if ("fileAccessUrl".equals(fieldName)) {
                    deserializedConsumptionEndpointsProperties.fileAccessUrl = reader.getString();
                } else if ("fileAccessResourceId".equals(fieldName)) {
                    deserializedConsumptionEndpointsProperties.fileAccessResourceId = reader.getString();
                } else if ("queryUrl".equals(fieldName)) {
                    deserializedConsumptionEndpointsProperties.queryUrl = reader.getString();
                } else if ("queryResourceId".equals(fieldName)) {
                    deserializedConsumptionEndpointsProperties.queryResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConsumptionEndpointsProperties;
        });
    }
}
