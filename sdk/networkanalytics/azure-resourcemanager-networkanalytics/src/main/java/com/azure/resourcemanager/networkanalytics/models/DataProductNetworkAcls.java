// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Data Product Network rule set.
 */
@Fluent
public final class DataProductNetworkAcls {
    /*
     * Virtual Network Rule
     */
    @JsonProperty(value = "virtualNetworkRule", required = true)
    private List<VirtualNetworkRule> virtualNetworkRule;

    /*
     * IP rule with specific IP or IP range in CIDR format.
     */
    @JsonProperty(value = "ipRules", required = true)
    private List<IpRules> ipRules;

    /*
     * The list of query ips in the format of CIDR allowed to connect to query/visualization endpoint.
     */
    @JsonProperty(value = "allowedQueryIpRangeList", required = true)
    private List<String> allowedQueryIpRangeList;

    /*
     * Default Action
     */
    @JsonProperty(value = "defaultAction", required = true)
    private DefaultAction defaultAction;

    /**
     * Creates an instance of DataProductNetworkAcls class.
     */
    public DataProductNetworkAcls() {
    }

    /**
     * Get the virtualNetworkRule property: Virtual Network Rule.
     * 
     * @return the virtualNetworkRule value.
     */
    public List<VirtualNetworkRule> virtualNetworkRule() {
        return this.virtualNetworkRule;
    }

    /**
     * Set the virtualNetworkRule property: Virtual Network Rule.
     * 
     * @param virtualNetworkRule the virtualNetworkRule value to set.
     * @return the DataProductNetworkAcls object itself.
     */
    public DataProductNetworkAcls withVirtualNetworkRule(List<VirtualNetworkRule> virtualNetworkRule) {
        this.virtualNetworkRule = virtualNetworkRule;
        return this;
    }

    /**
     * Get the ipRules property: IP rule with specific IP or IP range in CIDR format.
     * 
     * @return the ipRules value.
     */
    public List<IpRules> ipRules() {
        return this.ipRules;
    }

    /**
     * Set the ipRules property: IP rule with specific IP or IP range in CIDR format.
     * 
     * @param ipRules the ipRules value to set.
     * @return the DataProductNetworkAcls object itself.
     */
    public DataProductNetworkAcls withIpRules(List<IpRules> ipRules) {
        this.ipRules = ipRules;
        return this;
    }

    /**
     * Get the allowedQueryIpRangeList property: The list of query ips in the format of CIDR allowed to connect to
     * query/visualization endpoint.
     * 
     * @return the allowedQueryIpRangeList value.
     */
    public List<String> allowedQueryIpRangeList() {
        return this.allowedQueryIpRangeList;
    }

    /**
     * Set the allowedQueryIpRangeList property: The list of query ips in the format of CIDR allowed to connect to
     * query/visualization endpoint.
     * 
     * @param allowedQueryIpRangeList the allowedQueryIpRangeList value to set.
     * @return the DataProductNetworkAcls object itself.
     */
    public DataProductNetworkAcls withAllowedQueryIpRangeList(List<String> allowedQueryIpRangeList) {
        this.allowedQueryIpRangeList = allowedQueryIpRangeList;
        return this;
    }

    /**
     * Get the defaultAction property: Default Action.
     * 
     * @return the defaultAction value.
     */
    public DefaultAction defaultAction() {
        return this.defaultAction;
    }

    /**
     * Set the defaultAction property: Default Action.
     * 
     * @param defaultAction the defaultAction value to set.
     * @return the DataProductNetworkAcls object itself.
     */
    public DataProductNetworkAcls withDefaultAction(DefaultAction defaultAction) {
        this.defaultAction = defaultAction;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (virtualNetworkRule() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property virtualNetworkRule in model DataProductNetworkAcls"));
        } else {
            virtualNetworkRule().forEach(e -> e.validate());
        }
        if (ipRules() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property ipRules in model DataProductNetworkAcls"));
        } else {
            ipRules().forEach(e -> e.validate());
        }
        if (allowedQueryIpRangeList() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property allowedQueryIpRangeList in model DataProductNetworkAcls"));
        }
        if (defaultAction() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property defaultAction in model DataProductNetworkAcls"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataProductNetworkAcls.class);
}
