// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * list role assignments.
 */
@Fluent
public final class ListRoleAssignmentsInner implements JsonSerializable<ListRoleAssignmentsInner> {
    /*
     * Count of role assignments.
     */
    private int count;

    /*
     * list of role assignments
     */
    private List<RoleAssignmentDetailInner> roleAssignmentResponse;

    /**
     * Creates an instance of ListRoleAssignmentsInner class.
     */
    public ListRoleAssignmentsInner() {
    }

    /**
     * Get the count property: Count of role assignments.
     * 
     * @return the count value.
     */
    public int count() {
        return this.count;
    }

    /**
     * Set the count property: Count of role assignments.
     * 
     * @param count the count value to set.
     * @return the ListRoleAssignmentsInner object itself.
     */
    public ListRoleAssignmentsInner withCount(int count) {
        this.count = count;
        return this;
    }

    /**
     * Get the roleAssignmentResponse property: list of role assignments.
     * 
     * @return the roleAssignmentResponse value.
     */
    public List<RoleAssignmentDetailInner> roleAssignmentResponse() {
        return this.roleAssignmentResponse;
    }

    /**
     * Set the roleAssignmentResponse property: list of role assignments.
     * 
     * @param roleAssignmentResponse the roleAssignmentResponse value to set.
     * @return the ListRoleAssignmentsInner object itself.
     */
    public ListRoleAssignmentsInner withRoleAssignmentResponse(List<RoleAssignmentDetailInner> roleAssignmentResponse) {
        this.roleAssignmentResponse = roleAssignmentResponse;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (roleAssignmentResponse() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property roleAssignmentResponse in model ListRoleAssignmentsInner"));
        } else {
            roleAssignmentResponse().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ListRoleAssignmentsInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("count", this.count);
        jsonWriter.writeArrayField("roleAssignmentResponse", this.roleAssignmentResponse,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ListRoleAssignmentsInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ListRoleAssignmentsInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ListRoleAssignmentsInner.
     */
    public static ListRoleAssignmentsInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ListRoleAssignmentsInner deserializedListRoleAssignmentsInner = new ListRoleAssignmentsInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("count".equals(fieldName)) {
                    deserializedListRoleAssignmentsInner.count = reader.getInt();
                } else if ("roleAssignmentResponse".equals(fieldName)) {
                    List<RoleAssignmentDetailInner> roleAssignmentResponse
                        = reader.readArray(reader1 -> RoleAssignmentDetailInner.fromJson(reader1));
                    deserializedListRoleAssignmentsInner.roleAssignmentResponse = roleAssignmentResponse;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedListRoleAssignmentsInner;
        });
    }
}
