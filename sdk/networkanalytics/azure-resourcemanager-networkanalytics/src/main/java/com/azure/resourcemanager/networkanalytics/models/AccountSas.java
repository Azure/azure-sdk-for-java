// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The details for storage account sas creation.
 */
@Fluent
public final class AccountSas implements JsonSerializable<AccountSas> {
    /*
     * Sas token start timestamp.
     */
    private OffsetDateTime startTimestamp;

    /*
     * Sas token expiry timestamp.
     */
    private OffsetDateTime expiryTimestamp;

    /*
     * Ip Address
     */
    private String ipAddress;

    /**
     * Creates an instance of AccountSas class.
     */
    public AccountSas() {
    }

    /**
     * Get the startTimestamp property: Sas token start timestamp.
     * 
     * @return the startTimestamp value.
     */
    public OffsetDateTime startTimestamp() {
        return this.startTimestamp;
    }

    /**
     * Set the startTimestamp property: Sas token start timestamp.
     * 
     * @param startTimestamp the startTimestamp value to set.
     * @return the AccountSas object itself.
     */
    public AccountSas withStartTimestamp(OffsetDateTime startTimestamp) {
        this.startTimestamp = startTimestamp;
        return this;
    }

    /**
     * Get the expiryTimestamp property: Sas token expiry timestamp.
     * 
     * @return the expiryTimestamp value.
     */
    public OffsetDateTime expiryTimestamp() {
        return this.expiryTimestamp;
    }

    /**
     * Set the expiryTimestamp property: Sas token expiry timestamp.
     * 
     * @param expiryTimestamp the expiryTimestamp value to set.
     * @return the AccountSas object itself.
     */
    public AccountSas withExpiryTimestamp(OffsetDateTime expiryTimestamp) {
        this.expiryTimestamp = expiryTimestamp;
        return this;
    }

    /**
     * Get the ipAddress property: Ip Address.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Set the ipAddress property: Ip Address.
     * 
     * @param ipAddress the ipAddress value to set.
     * @return the AccountSas object itself.
     */
    public AccountSas withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (startTimestamp() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property startTimestamp in model AccountSas"));
        }
        if (expiryTimestamp() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property expiryTimestamp in model AccountSas"));
        }
        if (ipAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property ipAddress in model AccountSas"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AccountSas.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTimeStamp",
            this.startTimestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTimestamp));
        jsonWriter.writeStringField("expiryTimeStamp",
            this.expiryTimestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiryTimestamp));
        jsonWriter.writeStringField("ipAddress", this.ipAddress);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccountSas from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccountSas if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AccountSas.
     */
    public static AccountSas fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccountSas deserializedAccountSas = new AccountSas();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTimeStamp".equals(fieldName)) {
                    deserializedAccountSas.startTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("expiryTimeStamp".equals(fieldName)) {
                    deserializedAccountSas.expiryTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedAccountSas.ipAddress = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccountSas;
        });
    }
}
