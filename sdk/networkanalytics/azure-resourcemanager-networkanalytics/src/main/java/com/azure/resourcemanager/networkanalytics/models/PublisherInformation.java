// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Details for Publisher Information.
 */
@Fluent
public final class PublisherInformation {
    /*
     * Name of the publisher.
     */
    @JsonProperty(value = "publisherName", required = true)
    private String publisherName;

    /*
     * Data product information.
     */
    @JsonProperty(value = "dataProducts", required = true)
    private List<DataProductInformation> dataProducts;

    /**
     * Creates an instance of PublisherInformation class.
     */
    public PublisherInformation() {
    }

    /**
     * Get the publisherName property: Name of the publisher.
     * 
     * @return the publisherName value.
     */
    public String publisherName() {
        return this.publisherName;
    }

    /**
     * Set the publisherName property: Name of the publisher.
     * 
     * @param publisherName the publisherName value to set.
     * @return the PublisherInformation object itself.
     */
    public PublisherInformation withPublisherName(String publisherName) {
        this.publisherName = publisherName;
        return this;
    }

    /**
     * Get the dataProducts property: Data product information.
     * 
     * @return the dataProducts value.
     */
    public List<DataProductInformation> dataProducts() {
        return this.dataProducts;
    }

    /**
     * Set the dataProducts property: Data product information.
     * 
     * @param dataProducts the dataProducts value to set.
     * @return the PublisherInformation object itself.
     */
    public PublisherInformation withDataProducts(List<DataProductInformation> dataProducts) {
        this.dataProducts = dataProducts;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (publisherName() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property publisherName in model PublisherInformation"));
        }
        if (dataProducts() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property dataProducts in model PublisherInformation"));
        } else {
            dataProducts().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PublisherInformation.class);
}
