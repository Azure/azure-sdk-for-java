// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details for Publisher Information.
 */
@Fluent
public final class PublisherInformation implements JsonSerializable<PublisherInformation> {
    /*
     * Name of the publisher.
     */
    private String publisherName;

    /*
     * Data product information.
     */
    private List<DataProductInformation> dataProducts;

    /**
     * Creates an instance of PublisherInformation class.
     */
    public PublisherInformation() {
    }

    /**
     * Get the publisherName property: Name of the publisher.
     * 
     * @return the publisherName value.
     */
    public String publisherName() {
        return this.publisherName;
    }

    /**
     * Set the publisherName property: Name of the publisher.
     * 
     * @param publisherName the publisherName value to set.
     * @return the PublisherInformation object itself.
     */
    public PublisherInformation withPublisherName(String publisherName) {
        this.publisherName = publisherName;
        return this;
    }

    /**
     * Get the dataProducts property: Data product information.
     * 
     * @return the dataProducts value.
     */
    public List<DataProductInformation> dataProducts() {
        return this.dataProducts;
    }

    /**
     * Set the dataProducts property: Data product information.
     * 
     * @param dataProducts the dataProducts value to set.
     * @return the PublisherInformation object itself.
     */
    public PublisherInformation withDataProducts(List<DataProductInformation> dataProducts) {
        this.dataProducts = dataProducts;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (publisherName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property publisherName in model PublisherInformation"));
        }
        if (dataProducts() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataProducts in model PublisherInformation"));
        } else {
            dataProducts().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PublisherInformation.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("publisherName", this.publisherName);
        jsonWriter.writeArrayField("dataProducts", this.dataProducts, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PublisherInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PublisherInformation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PublisherInformation.
     */
    public static PublisherInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PublisherInformation deserializedPublisherInformation = new PublisherInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publisherName".equals(fieldName)) {
                    deserializedPublisherInformation.publisherName = reader.getString();
                } else if ("dataProducts".equals(fieldName)) {
                    List<DataProductInformation> dataProducts
                        = reader.readArray(reader1 -> DataProductInformation.fromJson(reader1));
                    deserializedPublisherInformation.dataProducts = dataProducts;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPublisherInformation;
        });
    }
}
