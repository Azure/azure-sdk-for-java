// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The updatable properties of the DataType.
 */
@Fluent
public final class DataTypeUpdateProperties implements JsonSerializable<DataTypeUpdateProperties> {
    /*
     * State of data type.
     */
    private DataTypeState state;

    /*
     * Field for storage output retention in days.
     */
    private Integer storageOutputRetention;

    /*
     * Field for database cache retention in days.
     */
    private Integer databaseCacheRetention;

    /*
     * Field for database data retention in days.
     */
    private Integer databaseRetention;

    /**
     * Creates an instance of DataTypeUpdateProperties class.
     */
    public DataTypeUpdateProperties() {
    }

    /**
     * Get the state property: State of data type.
     * 
     * @return the state value.
     */
    public DataTypeState state() {
        return this.state;
    }

    /**
     * Set the state property: State of data type.
     * 
     * @param state the state value to set.
     * @return the DataTypeUpdateProperties object itself.
     */
    public DataTypeUpdateProperties withState(DataTypeState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the storageOutputRetention property: Field for storage output retention in days.
     * 
     * @return the storageOutputRetention value.
     */
    public Integer storageOutputRetention() {
        return this.storageOutputRetention;
    }

    /**
     * Set the storageOutputRetention property: Field for storage output retention in days.
     * 
     * @param storageOutputRetention the storageOutputRetention value to set.
     * @return the DataTypeUpdateProperties object itself.
     */
    public DataTypeUpdateProperties withStorageOutputRetention(Integer storageOutputRetention) {
        this.storageOutputRetention = storageOutputRetention;
        return this;
    }

    /**
     * Get the databaseCacheRetention property: Field for database cache retention in days.
     * 
     * @return the databaseCacheRetention value.
     */
    public Integer databaseCacheRetention() {
        return this.databaseCacheRetention;
    }

    /**
     * Set the databaseCacheRetention property: Field for database cache retention in days.
     * 
     * @param databaseCacheRetention the databaseCacheRetention value to set.
     * @return the DataTypeUpdateProperties object itself.
     */
    public DataTypeUpdateProperties withDatabaseCacheRetention(Integer databaseCacheRetention) {
        this.databaseCacheRetention = databaseCacheRetention;
        return this;
    }

    /**
     * Get the databaseRetention property: Field for database data retention in days.
     * 
     * @return the databaseRetention value.
     */
    public Integer databaseRetention() {
        return this.databaseRetention;
    }

    /**
     * Set the databaseRetention property: Field for database data retention in days.
     * 
     * @param databaseRetention the databaseRetention value to set.
     * @return the DataTypeUpdateProperties object itself.
     */
    public DataTypeUpdateProperties withDatabaseRetention(Integer databaseRetention) {
        this.databaseRetention = databaseRetention;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeNumberField("storageOutputRetention", this.storageOutputRetention);
        jsonWriter.writeNumberField("databaseCacheRetention", this.databaseCacheRetention);
        jsonWriter.writeNumberField("databaseRetention", this.databaseRetention);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataTypeUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataTypeUpdateProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataTypeUpdateProperties.
     */
    public static DataTypeUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataTypeUpdateProperties deserializedDataTypeUpdateProperties = new DataTypeUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedDataTypeUpdateProperties.state = DataTypeState.fromString(reader.getString());
                } else if ("storageOutputRetention".equals(fieldName)) {
                    deserializedDataTypeUpdateProperties.storageOutputRetention
                        = reader.getNullable(JsonReader::getInt);
                } else if ("databaseCacheRetention".equals(fieldName)) {
                    deserializedDataTypeUpdateProperties.databaseCacheRetention
                        = reader.getNullable(JsonReader::getInt);
                } else if ("databaseRetention".equals(fieldName)) {
                    deserializedDataTypeUpdateProperties.databaseRetention = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataTypeUpdateProperties;
        });
    }
}
