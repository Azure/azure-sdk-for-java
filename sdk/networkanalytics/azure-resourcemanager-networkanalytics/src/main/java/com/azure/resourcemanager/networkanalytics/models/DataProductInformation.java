// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Data Product Information.
 */
@Fluent
public final class DataProductInformation implements JsonSerializable<DataProductInformation> {
    /*
     * Name of data product.
     */
    private String dataProductName;

    /*
     * Description about data product.
     */
    private String description;

    /*
     * Version information of data product.
     */
    private List<DataProductVersion> dataProductVersions;

    /**
     * Creates an instance of DataProductInformation class.
     */
    public DataProductInformation() {
    }

    /**
     * Get the dataProductName property: Name of data product.
     * 
     * @return the dataProductName value.
     */
    public String dataProductName() {
        return this.dataProductName;
    }

    /**
     * Set the dataProductName property: Name of data product.
     * 
     * @param dataProductName the dataProductName value to set.
     * @return the DataProductInformation object itself.
     */
    public DataProductInformation withDataProductName(String dataProductName) {
        this.dataProductName = dataProductName;
        return this;
    }

    /**
     * Get the description property: Description about data product.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description about data product.
     * 
     * @param description the description value to set.
     * @return the DataProductInformation object itself.
     */
    public DataProductInformation withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the dataProductVersions property: Version information of data product.
     * 
     * @return the dataProductVersions value.
     */
    public List<DataProductVersion> dataProductVersions() {
        return this.dataProductVersions;
    }

    /**
     * Set the dataProductVersions property: Version information of data product.
     * 
     * @param dataProductVersions the dataProductVersions value to set.
     * @return the DataProductInformation object itself.
     */
    public DataProductInformation withDataProductVersions(List<DataProductVersion> dataProductVersions) {
        this.dataProductVersions = dataProductVersions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataProductName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataProductName in model DataProductInformation"));
        }
        if (description() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property description in model DataProductInformation"));
        }
        if (dataProductVersions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataProductVersions in model DataProductInformation"));
        } else {
            dataProductVersions().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataProductInformation.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataProductName", this.dataProductName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("dataProductVersions", this.dataProductVersions,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataProductInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataProductInformation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataProductInformation.
     */
    public static DataProductInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataProductInformation deserializedDataProductInformation = new DataProductInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataProductName".equals(fieldName)) {
                    deserializedDataProductInformation.dataProductName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedDataProductInformation.description = reader.getString();
                } else if ("dataProductVersions".equals(fieldName)) {
                    List<DataProductVersion> dataProductVersions
                        = reader.readArray(reader1 -> DataProductVersion.fromJson(reader1));
                    deserializedDataProductInformation.dataProductVersions = dataProductVersions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataProductInformation;
        });
    }
}
