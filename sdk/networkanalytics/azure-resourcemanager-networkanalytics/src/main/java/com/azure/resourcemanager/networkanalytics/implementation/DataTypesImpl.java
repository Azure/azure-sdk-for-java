// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.networkanalytics.fluent.DataTypesClient;
import com.azure.resourcemanager.networkanalytics.fluent.models.ContainerSasTokenInner;
import com.azure.resourcemanager.networkanalytics.fluent.models.DataTypeInner;
import com.azure.resourcemanager.networkanalytics.models.ContainerSaS;
import com.azure.resourcemanager.networkanalytics.models.ContainerSasToken;
import com.azure.resourcemanager.networkanalytics.models.DataType;
import com.azure.resourcemanager.networkanalytics.models.DataTypes;

public final class DataTypesImpl implements DataTypes {
    private static final ClientLogger LOGGER = new ClientLogger(DataTypesImpl.class);

    private final DataTypesClient innerClient;

    private final com.azure.resourcemanager.networkanalytics.NetworkAnalyticsManager serviceManager;

    public DataTypesImpl(DataTypesClient innerClient,
        com.azure.resourcemanager.networkanalytics.NetworkAnalyticsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DataType> listByDataProduct(String resourceGroupName, String dataProductName) {
        PagedIterable<DataTypeInner> inner = this.serviceClient().listByDataProduct(resourceGroupName, dataProductName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DataTypeImpl(inner1, this.manager()));
    }

    public PagedIterable<DataType> listByDataProduct(String resourceGroupName, String dataProductName,
        Context context) {
        PagedIterable<DataTypeInner> inner
            = this.serviceClient().listByDataProduct(resourceGroupName, dataProductName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DataTypeImpl(inner1, this.manager()));
    }

    public Response<DataType> getWithResponse(String resourceGroupName, String dataProductName, String dataTypeName,
        Context context) {
        Response<DataTypeInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, dataProductName, dataTypeName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DataTypeImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DataType get(String resourceGroupName, String dataProductName, String dataTypeName) {
        DataTypeInner inner = this.serviceClient().get(resourceGroupName, dataProductName, dataTypeName);
        if (inner != null) {
            return new DataTypeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String dataProductName, String dataTypeName) {
        this.serviceClient().delete(resourceGroupName, dataProductName, dataTypeName);
    }

    public void delete(String resourceGroupName, String dataProductName, String dataTypeName, Context context) {
        this.serviceClient().delete(resourceGroupName, dataProductName, dataTypeName, context);
    }

    public void deleteData(String resourceGroupName, String dataProductName, String dataTypeName, Object body) {
        this.serviceClient().deleteData(resourceGroupName, dataProductName, dataTypeName, body);
    }

    public void deleteData(String resourceGroupName, String dataProductName, String dataTypeName, Object body,
        Context context) {
        this.serviceClient().deleteData(resourceGroupName, dataProductName, dataTypeName, body, context);
    }

    public Response<ContainerSasToken> generateStorageContainerSasTokenWithResponse(String resourceGroupName,
        String dataProductName, String dataTypeName, ContainerSaS body, Context context) {
        Response<ContainerSasTokenInner> inner = this.serviceClient().generateStorageContainerSasTokenWithResponse(
            resourceGroupName, dataProductName, dataTypeName, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ContainerSasTokenImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ContainerSasToken generateStorageContainerSasToken(String resourceGroupName, String dataProductName,
        String dataTypeName, ContainerSaS body) {
        ContainerSasTokenInner inner = this.serviceClient().generateStorageContainerSasToken(resourceGroupName,
            dataProductName, dataTypeName, body);
        if (inner != null) {
            return new ContainerSasTokenImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DataType getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataProductName = ResourceManagerUtils.getValueFromIdByName(id, "dataProducts");
        if (dataProductName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataProducts'.", id)));
        }
        String dataTypeName = ResourceManagerUtils.getValueFromIdByName(id, "dataTypes");
        if (dataTypeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataTypes'.", id)));
        }
        return this.getWithResponse(resourceGroupName, dataProductName, dataTypeName, Context.NONE).getValue();
    }

    public Response<DataType> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataProductName = ResourceManagerUtils.getValueFromIdByName(id, "dataProducts");
        if (dataProductName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataProducts'.", id)));
        }
        String dataTypeName = ResourceManagerUtils.getValueFromIdByName(id, "dataTypes");
        if (dataTypeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataTypes'.", id)));
        }
        return this.getWithResponse(resourceGroupName, dataProductName, dataTypeName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataProductName = ResourceManagerUtils.getValueFromIdByName(id, "dataProducts");
        if (dataProductName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataProducts'.", id)));
        }
        String dataTypeName = ResourceManagerUtils.getValueFromIdByName(id, "dataTypes");
        if (dataTypeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataTypes'.", id)));
        }
        this.delete(resourceGroupName, dataProductName, dataTypeName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataProductName = ResourceManagerUtils.getValueFromIdByName(id, "dataProducts");
        if (dataProductName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataProducts'.", id)));
        }
        String dataTypeName = ResourceManagerUtils.getValueFromIdByName(id, "dataTypes");
        if (dataTypeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataTypes'.", id)));
        }
        this.delete(resourceGroupName, dataProductName, dataTypeName, context);
    }

    private DataTypesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.networkanalytics.NetworkAnalyticsManager manager() {
        return this.serviceManager;
    }

    public DataTypeImpl define(String name) {
        return new DataTypeImpl(name, this.manager());
    }
}
