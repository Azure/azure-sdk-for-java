// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details for data catalog properties.
 */
@Fluent
public final class DataProductsCatalogProperties implements JsonSerializable<DataProductsCatalogProperties> {
    /*
     * The data catalog provisioning state.
     */
    private ProvisioningState provisioningState;

    /*
     * The data product publisher information.
     */
    private List<PublisherInformation> publishers;

    /**
     * Creates an instance of DataProductsCatalogProperties class.
     */
    public DataProductsCatalogProperties() {
    }

    /**
     * Get the provisioningState property: The data catalog provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the publishers property: The data product publisher information.
     * 
     * @return the publishers value.
     */
    public List<PublisherInformation> publishers() {
        return this.publishers;
    }

    /**
     * Set the publishers property: The data product publisher information.
     * 
     * @param publishers the publishers value to set.
     * @return the DataProductsCatalogProperties object itself.
     */
    public DataProductsCatalogProperties withPublishers(List<PublisherInformation> publishers) {
        this.publishers = publishers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (publishers() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property publishers in model DataProductsCatalogProperties"));
        } else {
            publishers().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataProductsCatalogProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("publishers", this.publishers, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataProductsCatalogProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataProductsCatalogProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataProductsCatalogProperties.
     */
    public static DataProductsCatalogProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataProductsCatalogProperties deserializedDataProductsCatalogProperties
                = new DataProductsCatalogProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publishers".equals(fieldName)) {
                    List<PublisherInformation> publishers
                        = reader.readArray(reader1 -> PublisherInformation.fromJson(reader1));
                    deserializedDataProductsCatalogProperties.publishers = publishers;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDataProductsCatalogProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataProductsCatalogProperties;
        });
    }
}
