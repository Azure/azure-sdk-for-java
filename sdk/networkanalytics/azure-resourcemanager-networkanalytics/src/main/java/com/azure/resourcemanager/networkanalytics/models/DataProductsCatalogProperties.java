// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Details for data catalog properties.
 */
@Fluent
public final class DataProductsCatalogProperties {
    /*
     * The data catalog provisioning state.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The data product publisher information.
     */
    @JsonProperty(value = "publishers", required = true)
    private List<PublisherInformation> publishers;

    /**
     * Creates an instance of DataProductsCatalogProperties class.
     */
    public DataProductsCatalogProperties() {
    }

    /**
     * Get the provisioningState property: The data catalog provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the publishers property: The data product publisher information.
     * 
     * @return the publishers value.
     */
    public List<PublisherInformation> publishers() {
        return this.publishers;
    }

    /**
     * Set the publishers property: The data product publisher information.
     * 
     * @param publishers the publishers value to set.
     * @return the DataProductsCatalogProperties object itself.
     */
    public DataProductsCatalogProperties withPublishers(List<PublisherInformation> publishers) {
        this.publishers = publishers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (publishers() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property publishers in model DataProductsCatalogProperties"));
        } else {
            publishers().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataProductsCatalogProperties.class);
}
