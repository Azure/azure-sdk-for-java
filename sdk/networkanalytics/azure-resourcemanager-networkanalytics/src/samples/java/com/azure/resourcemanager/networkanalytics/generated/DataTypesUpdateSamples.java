// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.generated;

import com.azure.resourcemanager.networkanalytics.models.DataType;
import com.azure.resourcemanager.networkanalytics.models.DataTypeState;
import com.azure.resourcemanager.networkanalytics.models.DataTypeUpdateProperties;

/**
 * Samples for DataTypes Update.
 */
public final class DataTypesUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-11-15/examples/
     * DataTypes_Update_MinimumSet_Gen.json
     */
    /**
     * Sample code: DataTypes_Update_MaximumSet_Gen - generated by [MinimumSet] rule_MinimumSet_Gen.
     * 
     * @param manager Entry point to NetworkAnalyticsManager.
     */
    public static void dataTypesUpdateMaximumSetGenGeneratedByMinimumSetRuleMinimumSetGen(
        com.azure.resourcemanager.networkanalytics.NetworkAnalyticsManager manager) {
        DataType resource = manager.dataTypes()
            .getWithResponse("aoiresourceGroupName", "dataproduct01", "datatypename", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update().apply();
    }

    /*
     * x-ms-original-file:
     * specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-11-15/examples/
     * DataTypes_Update_MaximumSet_Gen.json
     */
    /**
     * Sample code: DataTypes_Update_MaximumSet_Gen.
     * 
     * @param manager Entry point to NetworkAnalyticsManager.
     */
    public static void
        dataTypesUpdateMaximumSetGen(com.azure.resourcemanager.networkanalytics.NetworkAnalyticsManager manager) {
        DataType resource = manager.dataTypes()
            .getWithResponse("aoiresourceGroupName", "dataproduct01", "datatypename", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update().withProperties(new DataTypeUpdateProperties().withState(DataTypeState.fromString("STARTED"))
            .withStorageOutputRetention(30).withDatabaseCacheRetention(16).withDatabaseRetention(9)).apply();
    }
}
