// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkanalytics.NetworkAnalyticsManager;
import com.azure.resourcemanager.networkanalytics.models.DataProductsCatalog;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataProductsCatalogsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Failed\",\"publishers\":[{\"publisherName\":\"qzvszjf\",\"dataProducts\":[{\"dataProductName\":\"vjfdx\",\"description\":\"ivetvtcq\",\"dataProductVersions\":[]},{\"dataProductName\":\"qtdo\",\"description\":\"mcbxvwvxysl\",\"dataProductVersions\":[]},{\"dataProductName\":\"bhsfxob\",\"description\":\"ytkblmpew\",\"dataProductVersions\":[]}]},{\"publisherName\":\"wfbkrvrns\",\"dataProducts\":[{\"dataProductName\":\"hqjohxcrsbfova\",\"description\":\"rruvwbhsq\",\"dataProductVersions\":[]},{\"dataProductName\":\"sub\",\"description\":\"gjb\",\"dataProductVersions\":[]},{\"dataProductName\":\"rxbpyb\",\"description\":\"rfbjf\",\"dataProductVersions\":[]}]},{\"publisherName\":\"twss\",\"dataProducts\":[{\"dataProductName\":\"ftpvjzbexil\",\"description\":\"znfqqnvwpmqtar\",\"dataProductVersions\":[]}]}]},\"id\":\"ujmkcjhwqy\",\"name\":\"jrybnwjewgdrjer\",\"type\":\"naenqpehindo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkAnalyticsManager manager = NetworkAnalyticsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DataProductsCatalog response = manager.dataProductsCatalogs()
            .getByResourceGroupWithResponse("vkr", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("qzvszjf", response.properties().publishers().get(0).publisherName());
        Assertions.assertEquals("vjfdx",
            response.properties().publishers().get(0).dataProducts().get(0).dataProductName());
        Assertions.assertEquals("ivetvtcq",
            response.properties().publishers().get(0).dataProducts().get(0).description());
    }
}
