// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkanalytics.NetworkAnalyticsManager;
import com.azure.resourcemanager.networkanalytics.models.DataProductUserRole;
import com.azure.resourcemanager.networkanalytics.models.RoleAssignmentCommonProperties;
import com.azure.resourcemanager.networkanalytics.models.RoleAssignmentDetail;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DataProductsAddUserRoleWithResponseMockTests {
    @Test
    public void testAddUserRoleWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"roleId\":\"rhdwbavxbniw\",\"principalId\":\"jswztsdbpg\",\"userName\":\"xytxhpzxbz\",\"dataTypeScope\":[\"zabglcuhxwt\"],\"principalType\":\"tyq\",\"role\":\"Reader\",\"roleAssignmentId\":\"lbbovplw\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        NetworkAnalyticsManager manager = NetworkAnalyticsManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        RoleAssignmentDetail response = manager.dataProducts()
            .addUserRoleWithResponse("babphlwrqlfk", "sthsu",
                new RoleAssignmentCommonProperties().withRoleId("ocmnyyazttbtwwrq").withPrincipalId("uedck")
                    .withUsername("ywbiexzfeyueax").withDataTypeScope(Arrays.asList("xujwbhqwalmuzyo"))
                    .withPrincipalType("aepdkzjanc").withRole(DataProductUserRole.SENSITIVE_READER),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("rhdwbavxbniw", response.roleId());
        Assertions.assertEquals("jswztsdbpg", response.principalId());
        Assertions.assertEquals("xytxhpzxbz", response.username());
        Assertions.assertEquals("zabglcuhxwt", response.dataTypeScope().get(0));
        Assertions.assertEquals("tyq", response.principalType());
        Assertions.assertEquals(DataProductUserRole.READER, response.role());
        Assertions.assertEquals("lbbovplw", response.roleAssignmentId());
    }
}
