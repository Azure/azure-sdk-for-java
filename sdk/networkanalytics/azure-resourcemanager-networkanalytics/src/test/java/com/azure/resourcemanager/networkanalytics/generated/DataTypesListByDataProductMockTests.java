// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkanalytics.NetworkAnalyticsManager;
import com.azure.resourcemanager.networkanalytics.models.DataType;
import com.azure.resourcemanager.networkanalytics.models.DataTypeState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataTypesListByDataProductMockTests {
    @Test
    public void testListByDataProduct() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"state\":\"Running\",\"stateReason\":\"humaqolbgyc\",\"storageOutputRetention\":1405569741,\"databaseCacheRetention\":178501813,\"databaseRetention\":1300588551,\"visualizationUrl\":\"cym\"},\"id\":\"olpsslqlf\",\"name\":\"mdnbbglzpswiy\",\"type\":\"mcwyhzdxssadb\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkAnalyticsManager manager = NetworkAnalyticsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DataType> response
            = manager.dataTypes().listByDataProduct("gmifthnzd", "dslgnayqigynduh", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(DataTypeState.RUNNING, response.iterator().next().properties().state());
        Assertions.assertEquals(1405569741, response.iterator().next().properties().storageOutputRetention());
        Assertions.assertEquals(178501813, response.iterator().next().properties().databaseCacheRetention());
        Assertions.assertEquals(1300588551, response.iterator().next().properties().databaseRetention());
    }
}
