// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkanalytics.NetworkAnalyticsManager;
import com.azure.resourcemanager.networkanalytics.models.DataType;
import com.azure.resourcemanager.networkanalytics.models.DataTypeProperties;
import com.azure.resourcemanager.networkanalytics.models.DataTypeState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DataTypesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"state\":\"Running\",\"stateReason\":\"zxb\",\"storageOutputRetention\":623062887,\"databaseCacheRetention\":1983379457,\"databaseRetention\":473319481,\"visualizationUrl\":\"zmuvpbttdumorppx\"},\"id\":\"mnzb\",\"name\":\"bhjpglkfgohdne\",\"type\":\"el\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        NetworkAnalyticsManager manager = NetworkAnalyticsManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        DataType response = manager.dataTypes().define("bqdxbx").withExistingDataProduct("fzxmhhvhgureodkw", "bdagxt")
            .withProperties(
                new DataTypeProperties().withState(DataTypeState.RUNNING).withStorageOutputRetention(144807252)
                    .withDatabaseCacheRetention(1090180987).withDatabaseRetention(1185146175))
            .create();

        Assertions.assertEquals(DataTypeState.RUNNING, response.properties().state());
        Assertions.assertEquals(623062887, response.properties().storageOutputRetention());
        Assertions.assertEquals(1983379457, response.properties().databaseCacheRetention());
        Assertions.assertEquals(473319481, response.properties().databaseRetention());
    }
}
