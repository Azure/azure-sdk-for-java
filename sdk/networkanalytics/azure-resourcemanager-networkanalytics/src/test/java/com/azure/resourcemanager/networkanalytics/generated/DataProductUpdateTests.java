// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkanalytics.models.ControlState;
import com.azure.resourcemanager.networkanalytics.models.DataProductUpdate;
import com.azure.resourcemanager.networkanalytics.models.ManagedServiceIdentity;
import com.azure.resourcemanager.networkanalytics.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.networkanalytics.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataProductUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataProductUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"90ac239f-8d07-49e0-8454-fcb99ace9c91\",\"tenantId\":\"417d089c-e5ee-48ac-b269-25dc06440364\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"igdtopbob\":{\"principalId\":\"71a58f3e-96bf-402f-a722-1a7230408c46\",\"clientId\":\"17bf371b-5658-41d7-9584-81ed933eecce\"},\"hm\":{\"principalId\":\"6c7cd691-d3f5-4ec1-b023-1e7970a70faf\",\"clientId\":\"81cb187e-20dc-4398-b7c8-76a63d5a7174\"},\"a\":{\"principalId\":\"0572cbf1-7e28-488a-b205-160f6402eddb\",\"clientId\":\"27c28cbf-202b-45f7-a5a7-c04cc6c93ff2\"},\"hrzayvvtpgvdf\":{\"principalId\":\"c2410c83-95c2-420c-ae7a-0532f06d22f3\",\"clientId\":\"3d324712-96c2-4b19-abfc-972da0230323\"}}},\"tags\":{\"efgugnxk\":\"tkftutqxlngx\",\"hjybigehoqfbo\":\"xdqmidtthzrvqdra\",\"zlcuiywgqywgndrv\":\"skanyk\",\"ocpecfvmmco\":\"nhzgpphrcgyn\"},\"properties\":{\"owners\":[\"lzevgbmqjqab\",\"y\",\"mivkwlzuvcc\",\"wnfnbacf\"],\"purviewAccount\":\"nlebxetqgtzxd\",\"purviewCollection\":\"qbqqwxr\",\"privateLinksEnabled\":\"Disabled\",\"currentMinorVersion\":\"llnwsubi\"}}")
            .toObject(DataProductUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("tkftutqxlngx", model.tags().get("efgugnxk"));
        Assertions.assertEquals("lzevgbmqjqab", model.owners().get(0));
        Assertions.assertEquals("nlebxetqgtzxd", model.purviewAccount());
        Assertions.assertEquals("qbqqwxr", model.purviewCollection());
        Assertions.assertEquals(ControlState.DISABLED, model.privateLinksEnabled());
        Assertions.assertEquals("llnwsubi", model.currentMinorVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataProductUpdate model = new DataProductUpdate().withIdentity(new ManagedServiceIdentity()
            .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
            .withUserAssignedIdentities(mapOf("igdtopbob", new UserAssignedIdentity(), "hm", new UserAssignedIdentity(),
                "a", new UserAssignedIdentity(), "hrzayvvtpgvdf", new UserAssignedIdentity())))
            .withTags(mapOf("efgugnxk", "tkftutqxlngx", "hjybigehoqfbo", "xdqmidtthzrvqdra", "zlcuiywgqywgndrv",
                "skanyk", "ocpecfvmmco", "nhzgpphrcgyn"))
            .withOwners(Arrays.asList("lzevgbmqjqab", "y", "mivkwlzuvcc", "wnfnbacf"))
            .withPurviewAccount("nlebxetqgtzxd").withPurviewCollection("qbqqwxr")
            .withPrivateLinksEnabled(ControlState.DISABLED).withCurrentMinorVersion("llnwsubi");
        model = BinaryData.fromObject(model).toObject(DataProductUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("tkftutqxlngx", model.tags().get("efgugnxk"));
        Assertions.assertEquals("lzevgbmqjqab", model.owners().get(0));
        Assertions.assertEquals("nlebxetqgtzxd", model.purviewAccount());
        Assertions.assertEquals("qbqqwxr", model.purviewCollection());
        Assertions.assertEquals(ControlState.DISABLED, model.privateLinksEnabled());
        Assertions.assertEquals("llnwsubi", model.currentMinorVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
