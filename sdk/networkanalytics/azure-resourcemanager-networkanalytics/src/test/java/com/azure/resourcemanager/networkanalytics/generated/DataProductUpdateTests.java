// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkanalytics.models.ControlState;
import com.azure.resourcemanager.networkanalytics.models.DataProductUpdate;
import com.azure.resourcemanager.networkanalytics.models.ManagedServiceIdentity;
import com.azure.resourcemanager.networkanalytics.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.networkanalytics.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataProductUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataProductUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"c9c83f83-b896-4118-9937-0f8c392c6be1\",\"tenantId\":\"53b9111c-fd77-4d55-8439-9f47a3ec301a\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"igdtopbob\":{\"principalId\":\"4dff3cfe-c09e-4e74-980b-563e2822888a\",\"clientId\":\"82328129-0bae-4404-ae27-80fe67f8e3d8\"},\"hm\":{\"principalId\":\"5b2005de-935f-45f4-8f8f-40281678997b\",\"clientId\":\"9c73bc4e-0b17-423b-8cd7-bb99921f3a66\"},\"a\":{\"principalId\":\"237989b4-5971-4909-ac5c-a1efeec28c74\",\"clientId\":\"8fa6f19a-a5d0-461f-a862-5afe74638f32\"},\"hrzayvvtpgvdf\":{\"principalId\":\"638b051e-4d6a-4a50-8dae-2d5b59155c73\",\"clientId\":\"2ca97767-e31f-4007-864c-28baf1164a4f\"}}},\"tags\":{\"efgugnxk\":\"tkftutqxlngx\",\"hjybigehoqfbo\":\"xdqmidtthzrvqdra\",\"zlcuiywgqywgndrv\":\"skanyk\",\"ocpecfvmmco\":\"nhzgpphrcgyn\"},\"properties\":{\"owners\":[\"lzevgbmqjqab\",\"y\",\"mivkwlzuvcc\",\"wnfnbacf\"],\"purviewAccount\":\"nlebxetqgtzxd\",\"purviewCollection\":\"qbqqwxr\",\"privateLinksEnabled\":\"Disabled\",\"currentMinorVersion\":\"llnwsubi\"}}")
            .toObject(DataProductUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("tkftutqxlngx", model.tags().get("efgugnxk"));
        Assertions.assertEquals("lzevgbmqjqab", model.owners().get(0));
        Assertions.assertEquals("nlebxetqgtzxd", model.purviewAccount());
        Assertions.assertEquals("qbqqwxr", model.purviewCollection());
        Assertions.assertEquals(ControlState.DISABLED, model.privateLinksEnabled());
        Assertions.assertEquals("llnwsubi", model.currentMinorVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataProductUpdate model = new DataProductUpdate().withIdentity(new ManagedServiceIdentity()
            .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
            .withUserAssignedIdentities(mapOf("igdtopbob", new UserAssignedIdentity(), "hm", new UserAssignedIdentity(),
                "a", new UserAssignedIdentity(), "hrzayvvtpgvdf", new UserAssignedIdentity())))
            .withTags(mapOf("efgugnxk", "tkftutqxlngx", "hjybigehoqfbo", "xdqmidtthzrvqdra", "zlcuiywgqywgndrv",
                "skanyk", "ocpecfvmmco", "nhzgpphrcgyn"))
            .withOwners(Arrays.asList("lzevgbmqjqab", "y", "mivkwlzuvcc", "wnfnbacf"))
            .withPurviewAccount("nlebxetqgtzxd").withPurviewCollection("qbqqwxr")
            .withPrivateLinksEnabled(ControlState.DISABLED).withCurrentMinorVersion("llnwsubi");
        model = BinaryData.fromObject(model).toObject(DataProductUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("tkftutqxlngx", model.tags().get("efgugnxk"));
        Assertions.assertEquals("lzevgbmqjqab", model.owners().get(0));
        Assertions.assertEquals("nlebxetqgtzxd", model.purviewAccount());
        Assertions.assertEquals("qbqqwxr", model.purviewCollection());
        Assertions.assertEquals(ControlState.DISABLED, model.privateLinksEnabled());
        Assertions.assertEquals("llnwsubi", model.currentMinorVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
