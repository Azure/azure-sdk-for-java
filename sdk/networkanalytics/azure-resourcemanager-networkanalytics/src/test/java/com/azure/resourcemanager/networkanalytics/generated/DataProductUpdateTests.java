// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkanalytics.models.ControlState;
import com.azure.resourcemanager.networkanalytics.models.DataProductUpdate;
import com.azure.resourcemanager.networkanalytics.models.ManagedServiceIdentity;
import com.azure.resourcemanager.networkanalytics.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.networkanalytics.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataProductUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataProductUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"b1f4d7a4-90e3-4308-a2e7-ba888e494390\",\"tenantId\":\"5d9f21ea-bd31-4afa-93ec-ace82f20b29d\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"igdtopbob\":{\"principalId\":\"6f153aca-803e-47c3-aea5-926cdde64d45\",\"clientId\":\"8495e7c1-7828-415c-ad76-0a4053a27bd3\"},\"hm\":{\"principalId\":\"7bef90f3-8c3a-4b55-b669-294befd0b394\",\"clientId\":\"920be674-a40c-4fff-90d1-a618d7943ed2\"},\"a\":{\"principalId\":\"4690f61d-d7e9-44d0-a8f0-14158d8a3be4\",\"clientId\":\"04efa55c-7ced-4a4d-bb06-d48ad7a34506\"},\"hrzayvvtpgvdf\":{\"principalId\":\"3c4d57e2-553f-42ba-a852-c3a50a39a04e\",\"clientId\":\"0e0557ea-4f90-45f0-beee-c6e1996f017e\"}}},\"tags\":{\"efgugnxk\":\"tkftutqxlngx\",\"hjybigehoqfbo\":\"xdqmidtthzrvqdra\",\"zlcuiywgqywgndrv\":\"skanyk\",\"ocpecfvmmco\":\"nhzgpphrcgyn\"},\"properties\":{\"owners\":[\"lzevgbmqjqab\",\"y\",\"mivkwlzuvcc\",\"wnfnbacf\"],\"purviewAccount\":\"nlebxetqgtzxd\",\"purviewCollection\":\"qbqqwxr\",\"privateLinksEnabled\":\"Disabled\",\"currentMinorVersion\":\"llnwsubi\"}}")
            .toObject(DataProductUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("tkftutqxlngx", model.tags().get("efgugnxk"));
        Assertions.assertEquals("lzevgbmqjqab", model.owners().get(0));
        Assertions.assertEquals("nlebxetqgtzxd", model.purviewAccount());
        Assertions.assertEquals("qbqqwxr", model.purviewCollection());
        Assertions.assertEquals(ControlState.DISABLED, model.privateLinksEnabled());
        Assertions.assertEquals("llnwsubi", model.currentMinorVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataProductUpdate model = new DataProductUpdate().withIdentity(new ManagedServiceIdentity()
            .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
            .withUserAssignedIdentities(mapOf("igdtopbob", new UserAssignedIdentity(), "hm", new UserAssignedIdentity(),
                "a", new UserAssignedIdentity(), "hrzayvvtpgvdf", new UserAssignedIdentity())))
            .withTags(mapOf("efgugnxk", "tkftutqxlngx", "hjybigehoqfbo", "xdqmidtthzrvqdra", "zlcuiywgqywgndrv",
                "skanyk", "ocpecfvmmco", "nhzgpphrcgyn"))
            .withOwners(Arrays.asList("lzevgbmqjqab", "y", "mivkwlzuvcc", "wnfnbacf"))
            .withPurviewAccount("nlebxetqgtzxd").withPurviewCollection("qbqqwxr")
            .withPrivateLinksEnabled(ControlState.DISABLED).withCurrentMinorVersion("llnwsubi");
        model = BinaryData.fromObject(model).toObject(DataProductUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("tkftutqxlngx", model.tags().get("efgugnxk"));
        Assertions.assertEquals("lzevgbmqjqab", model.owners().get(0));
        Assertions.assertEquals("nlebxetqgtzxd", model.purviewAccount());
        Assertions.assertEquals("qbqqwxr", model.purviewCollection());
        Assertions.assertEquals(ControlState.DISABLED, model.privateLinksEnabled());
        Assertions.assertEquals("llnwsubi", model.currentMinorVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
