// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkanalytics.models.ControlState;
import com.azure.resourcemanager.networkanalytics.models.DataProductUpdate;
import com.azure.resourcemanager.networkanalytics.models.DataProductUpdateProperties;
import com.azure.resourcemanager.networkanalytics.models.ManagedServiceIdentity;
import com.azure.resourcemanager.networkanalytics.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.networkanalytics.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataProductUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataProductUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"576e7ee7-de0c-44a8-a224-4c0ffbed45f8\",\"tenantId\":\"bda55358-7fa9-4365-905e-2f8c016e0573\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"igdtopbob\":{\"principalId\":\"780feccc-1a98-4862-b910-d99343021992\",\"clientId\":\"5a213704-17d5-4234-b731-effc212dedcd\"},\"hm\":{\"principalId\":\"9180709c-b6f1-4a12-bfbb-f2a44cf05f8c\",\"clientId\":\"928c58b7-b014-4161-982b-d88f95a9a299\"},\"a\":{\"principalId\":\"6cbec9a1-843e-493d-b315-f63a0cf8b5ee\",\"clientId\":\"9184105a-e610-4476-8280-9eb4f0ca840b\"},\"hrzayvvtpgvdf\":{\"principalId\":\"4c1997a8-f2fb-4254-b8b3-beddb0a54137\",\"clientId\":\"683f3411-ac42-42e0-822a-ec170cb9a9d0\"}}},\"tags\":{\"efgugnxk\":\"tkftutqxlngx\",\"hjybigehoqfbo\":\"xdqmidtthzrvqdra\",\"zlcuiywgqywgndrv\":\"skanyk\",\"ocpecfvmmco\":\"nhzgpphrcgyn\"},\"properties\":{\"owners\":[\"lzevgbmqjqab\",\"y\",\"mivkwlzuvcc\",\"wnfnbacf\"],\"purviewAccount\":\"nlebxetqgtzxd\",\"purviewCollection\":\"qbqqwxr\",\"privateLinksEnabled\":\"Disabled\",\"currentMinorVersion\":\"llnwsubi\"}}")
            .toObject(DataProductUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("tkftutqxlngx", model.tags().get("efgugnxk"));
        Assertions.assertEquals("lzevgbmqjqab", model.properties().owners().get(0));
        Assertions.assertEquals("nlebxetqgtzxd", model.properties().purviewAccount());
        Assertions.assertEquals("qbqqwxr", model.properties().purviewCollection());
        Assertions.assertEquals(ControlState.DISABLED, model.properties().privateLinksEnabled());
        Assertions.assertEquals("llnwsubi", model.properties().currentMinorVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataProductUpdate model = new DataProductUpdate().withIdentity(new ManagedServiceIdentity()
            .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
            .withUserAssignedIdentities(mapOf("igdtopbob", new UserAssignedIdentity(), "hm", new UserAssignedIdentity(),
                "a", new UserAssignedIdentity(), "hrzayvvtpgvdf", new UserAssignedIdentity())))
            .withTags(mapOf("efgugnxk", "tkftutqxlngx", "hjybigehoqfbo", "xdqmidtthzrvqdra", "zlcuiywgqywgndrv",
                "skanyk", "ocpecfvmmco", "nhzgpphrcgyn"))
            .withProperties(new DataProductUpdateProperties()
                .withOwners(Arrays.asList("lzevgbmqjqab", "y", "mivkwlzuvcc", "wnfnbacf"))
                .withPurviewAccount("nlebxetqgtzxd").withPurviewCollection("qbqqwxr")
                .withPrivateLinksEnabled(ControlState.DISABLED).withCurrentMinorVersion("llnwsubi"));
        model = BinaryData.fromObject(model).toObject(DataProductUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("tkftutqxlngx", model.tags().get("efgugnxk"));
        Assertions.assertEquals("lzevgbmqjqab", model.properties().owners().get(0));
        Assertions.assertEquals("nlebxetqgtzxd", model.properties().purviewAccount());
        Assertions.assertEquals("qbqqwxr", model.properties().purviewCollection());
        Assertions.assertEquals(ControlState.DISABLED, model.properties().privateLinksEnabled());
        Assertions.assertEquals("llnwsubi", model.properties().currentMinorVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
