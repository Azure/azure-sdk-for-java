// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkanalytics.models.ControlState;
import com.azure.resourcemanager.networkanalytics.models.DataProductUpdate;
import com.azure.resourcemanager.networkanalytics.models.DataProductUpdateProperties;
import com.azure.resourcemanager.networkanalytics.models.ManagedServiceIdentity;
import com.azure.resourcemanager.networkanalytics.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.networkanalytics.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataProductUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataProductUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"ad93d9a4-aff5-45d1-8ba4-115656609aec\",\"tenantId\":\"8d0190e3-cd64-453c-9bd6-c692747837d3\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"igdtopbob\":{\"principalId\":\"8c9fc9d1-5234-413b-87a2-d845059a1d34\",\"clientId\":\"91d10d76-96c4-46cd-a5a7-d34108307b7f\"},\"hm\":{\"principalId\":\"86733d32-658f-4bf0-8c0b-13ec5d416f1b\",\"clientId\":\"a5910e6a-a970-4b4a-9772-75f94d222144\"},\"a\":{\"principalId\":\"a674089c-772a-479d-8196-8d836a5c12c3\",\"clientId\":\"77a10099-2555-40a5-85b8-f2a1ad0b7ac6\"},\"hrzayvvtpgvdf\":{\"principalId\":\"eebbbb57-4601-45ba-8b47-abf4b91ef8b7\",\"clientId\":\"914aefb1-1253-492f-bbeb-aa36e3e7a95d\"}}},\"tags\":{\"efgugnxk\":\"tkftutqxlngx\",\"hjybigehoqfbo\":\"xdqmidtthzrvqdra\",\"zlcuiywgqywgndrv\":\"skanyk\",\"ocpecfvmmco\":\"nhzgpphrcgyn\"},\"properties\":{\"owners\":[\"lzevgbmqjqab\",\"y\",\"mivkwlzuvcc\",\"wnfnbacf\"],\"purviewAccount\":\"nlebxetqgtzxd\",\"purviewCollection\":\"qbqqwxr\",\"privateLinksEnabled\":\"Disabled\",\"currentMinorVersion\":\"llnwsubi\"}}")
            .toObject(DataProductUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("tkftutqxlngx", model.tags().get("efgugnxk"));
        Assertions.assertEquals("lzevgbmqjqab", model.properties().owners().get(0));
        Assertions.assertEquals("nlebxetqgtzxd", model.properties().purviewAccount());
        Assertions.assertEquals("qbqqwxr", model.properties().purviewCollection());
        Assertions.assertEquals(ControlState.DISABLED, model.properties().privateLinksEnabled());
        Assertions.assertEquals("llnwsubi", model.properties().currentMinorVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataProductUpdate model = new DataProductUpdate().withIdentity(new ManagedServiceIdentity()
            .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
            .withUserAssignedIdentities(mapOf("igdtopbob", new UserAssignedIdentity(), "hm", new UserAssignedIdentity(),
                "a", new UserAssignedIdentity(), "hrzayvvtpgvdf", new UserAssignedIdentity())))
            .withTags(mapOf("efgugnxk", "tkftutqxlngx", "hjybigehoqfbo", "xdqmidtthzrvqdra", "zlcuiywgqywgndrv",
                "skanyk", "ocpecfvmmco", "nhzgpphrcgyn"))
            .withProperties(new DataProductUpdateProperties()
                .withOwners(Arrays.asList("lzevgbmqjqab", "y", "mivkwlzuvcc", "wnfnbacf"))
                .withPurviewAccount("nlebxetqgtzxd").withPurviewCollection("qbqqwxr")
                .withPrivateLinksEnabled(ControlState.DISABLED).withCurrentMinorVersion("llnwsubi"));
        model = BinaryData.fromObject(model).toObject(DataProductUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("tkftutqxlngx", model.tags().get("efgugnxk"));
        Assertions.assertEquals("lzevgbmqjqab", model.properties().owners().get(0));
        Assertions.assertEquals("nlebxetqgtzxd", model.properties().purviewAccount());
        Assertions.assertEquals("qbqqwxr", model.properties().purviewCollection());
        Assertions.assertEquals(ControlState.DISABLED, model.properties().privateLinksEnabled());
        Assertions.assertEquals("llnwsubi", model.properties().currentMinorVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
