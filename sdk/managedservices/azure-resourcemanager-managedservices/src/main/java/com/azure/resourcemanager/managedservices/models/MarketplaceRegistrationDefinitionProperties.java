// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Properties of a marketplace registration definition. */
@Fluent
public final class MarketplaceRegistrationDefinitionProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MarketplaceRegistrationDefinitionProperties.class);

    /*
     * Id of the managedBy tenant.
     */
    @JsonProperty(value = "managedByTenantId", required = true)
    private String managedByTenantId;

    /*
     * Authorization tuple containing principal id of the user/security group
     * or service principal and id of the build-in role.
     */
    @JsonProperty(value = "authorizations", required = true)
    private List<Authorization> authorizations;

    /*
     * Eligible PIM authorization tuple containing principal id of the
     * user/security group or service principal, id of the built-in role, and
     * just-in-time access policy setting
     */
    @JsonProperty(value = "eligibleAuthorizations")
    private List<EligibleAuthorization> eligibleAuthorizations;

    /*
     * The marketplace offer display name.
     */
    @JsonProperty(value = "offerDisplayName")
    private String offerDisplayName;

    /*
     * The marketplace publisher display name.
     */
    @JsonProperty(value = "publisherDisplayName")
    private String publisherDisplayName;

    /*
     * The marketplace plan display name.
     */
    @JsonProperty(value = "planDisplayName")
    private String planDisplayName;

    /**
     * Get the managedByTenantId property: Id of the managedBy tenant.
     *
     * @return the managedByTenantId value.
     */
    public String managedByTenantId() {
        return this.managedByTenantId;
    }

    /**
     * Set the managedByTenantId property: Id of the managedBy tenant.
     *
     * @param managedByTenantId the managedByTenantId value to set.
     * @return the MarketplaceRegistrationDefinitionProperties object itself.
     */
    public MarketplaceRegistrationDefinitionProperties withManagedByTenantId(String managedByTenantId) {
        this.managedByTenantId = managedByTenantId;
        return this;
    }

    /**
     * Get the authorizations property: Authorization tuple containing principal id of the user/security group or
     * service principal and id of the build-in role.
     *
     * @return the authorizations value.
     */
    public List<Authorization> authorizations() {
        return this.authorizations;
    }

    /**
     * Set the authorizations property: Authorization tuple containing principal id of the user/security group or
     * service principal and id of the build-in role.
     *
     * @param authorizations the authorizations value to set.
     * @return the MarketplaceRegistrationDefinitionProperties object itself.
     */
    public MarketplaceRegistrationDefinitionProperties withAuthorizations(List<Authorization> authorizations) {
        this.authorizations = authorizations;
        return this;
    }

    /**
     * Get the eligibleAuthorizations property: Eligible PIM authorization tuple containing principal id of the
     * user/security group or service principal, id of the built-in role, and just-in-time access policy setting.
     *
     * @return the eligibleAuthorizations value.
     */
    public List<EligibleAuthorization> eligibleAuthorizations() {
        return this.eligibleAuthorizations;
    }

    /**
     * Set the eligibleAuthorizations property: Eligible PIM authorization tuple containing principal id of the
     * user/security group or service principal, id of the built-in role, and just-in-time access policy setting.
     *
     * @param eligibleAuthorizations the eligibleAuthorizations value to set.
     * @return the MarketplaceRegistrationDefinitionProperties object itself.
     */
    public MarketplaceRegistrationDefinitionProperties withEligibleAuthorizations(
        List<EligibleAuthorization> eligibleAuthorizations) {
        this.eligibleAuthorizations = eligibleAuthorizations;
        return this;
    }

    /**
     * Get the offerDisplayName property: The marketplace offer display name.
     *
     * @return the offerDisplayName value.
     */
    public String offerDisplayName() {
        return this.offerDisplayName;
    }

    /**
     * Set the offerDisplayName property: The marketplace offer display name.
     *
     * @param offerDisplayName the offerDisplayName value to set.
     * @return the MarketplaceRegistrationDefinitionProperties object itself.
     */
    public MarketplaceRegistrationDefinitionProperties withOfferDisplayName(String offerDisplayName) {
        this.offerDisplayName = offerDisplayName;
        return this;
    }

    /**
     * Get the publisherDisplayName property: The marketplace publisher display name.
     *
     * @return the publisherDisplayName value.
     */
    public String publisherDisplayName() {
        return this.publisherDisplayName;
    }

    /**
     * Set the publisherDisplayName property: The marketplace publisher display name.
     *
     * @param publisherDisplayName the publisherDisplayName value to set.
     * @return the MarketplaceRegistrationDefinitionProperties object itself.
     */
    public MarketplaceRegistrationDefinitionProperties withPublisherDisplayName(String publisherDisplayName) {
        this.publisherDisplayName = publisherDisplayName;
        return this;
    }

    /**
     * Get the planDisplayName property: The marketplace plan display name.
     *
     * @return the planDisplayName value.
     */
    public String planDisplayName() {
        return this.planDisplayName;
    }

    /**
     * Set the planDisplayName property: The marketplace plan display name.
     *
     * @param planDisplayName the planDisplayName value to set.
     * @return the MarketplaceRegistrationDefinitionProperties object itself.
     */
    public MarketplaceRegistrationDefinitionProperties withPlanDisplayName(String planDisplayName) {
        this.planDisplayName = planDisplayName;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managedByTenantId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property managedByTenantId in model"
                            + " MarketplaceRegistrationDefinitionProperties"));
        }
        if (authorizations() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property authorizations in model"
                            + " MarketplaceRegistrationDefinitionProperties"));
        } else {
            authorizations().forEach(e -> e.validate());
        }
        if (eligibleAuthorizations() != null) {
            eligibleAuthorizations().forEach(e -> e.validate());
        }
    }
}
