// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The properties of the registration assignment. */
@Fluent
public final class RegistrationAssignmentProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RegistrationAssignmentProperties.class);

    /*
     * The fully qualified path of the registration definition.
     */
    @JsonProperty(value = "registrationDefinitionId", required = true)
    private String registrationDefinitionId;

    /*
     * The current provisioning state of the registration assignment.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The registration definition associated with the registration assignment.
     */
    @JsonProperty(value = "registrationDefinition", access = JsonProperty.Access.WRITE_ONLY)
    private RegistrationAssignmentPropertiesRegistrationDefinition registrationDefinition;

    /**
     * Get the registrationDefinitionId property: The fully qualified path of the registration definition.
     *
     * @return the registrationDefinitionId value.
     */
    public String registrationDefinitionId() {
        return this.registrationDefinitionId;
    }

    /**
     * Set the registrationDefinitionId property: The fully qualified path of the registration definition.
     *
     * @param registrationDefinitionId the registrationDefinitionId value to set.
     * @return the RegistrationAssignmentProperties object itself.
     */
    public RegistrationAssignmentProperties withRegistrationDefinitionId(String registrationDefinitionId) {
        this.registrationDefinitionId = registrationDefinitionId;
        return this;
    }

    /**
     * Get the provisioningState property: The current provisioning state of the registration assignment.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the registrationDefinition property: The registration definition associated with the registration assignment.
     *
     * @return the registrationDefinition value.
     */
    public RegistrationAssignmentPropertiesRegistrationDefinition registrationDefinition() {
        return this.registrationDefinition;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (registrationDefinitionId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property registrationDefinitionId in model"
                            + " RegistrationAssignmentProperties"));
        }
        if (registrationDefinition() != null) {
            registrationDefinition().validate();
        }
    }
}
