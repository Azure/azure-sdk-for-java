// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedservices.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.managedservices.fluent.RegistrationDefinitionsClient;
import com.azure.resourcemanager.managedservices.fluent.models.RegistrationDefinitionInner;
import com.azure.resourcemanager.managedservices.models.RegistrationDefinitionList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in RegistrationDefinitionsClient. */
public final class RegistrationDefinitionsClientImpl implements RegistrationDefinitionsClient {
    private final ClientLogger logger = new ClientLogger(RegistrationDefinitionsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final RegistrationDefinitionsService service;

    /** The service client containing this operation class. */
    private final ManagedServicesClientImpl client;

    /**
     * Initializes an instance of RegistrationDefinitionsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    RegistrationDefinitionsClientImpl(ManagedServicesClientImpl client) {
        this.service =
            RestProxy
                .create(RegistrationDefinitionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ManagedServicesClientRegistrationDefinitions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ManagedServicesClien")
    private interface RegistrationDefinitionsService {
        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationDefinitionInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("registrationDefinitionId") String registrationDefinitionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("registrationDefinitionId") String registrationDefinitionId,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("registrationDefinitionId") String registrationDefinitionId,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @BodyParam("application/json") RegistrationDefinitionInner requestBody,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationDefinitionList>> list(
            @HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationDefinitionList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the registration definition details.
     *
     * @param scope Scope of the resource.
     * @param registrationDefinitionId Guid of the registration definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the registration definition details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RegistrationDefinitionInner>> getWithResponseAsync(
        String scope, String registrationDefinitionId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (registrationDefinitionId == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter registrationDefinitionId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            scope,
                            registrationDefinitionId,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the registration definition details.
     *
     * @param scope Scope of the resource.
     * @param registrationDefinitionId Guid of the registration definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the registration definition details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RegistrationDefinitionInner>> getWithResponseAsync(
        String scope, String registrationDefinitionId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (registrationDefinitionId == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter registrationDefinitionId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                scope,
                registrationDefinitionId,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets the registration definition details.
     *
     * @param scope Scope of the resource.
     * @param registrationDefinitionId Guid of the registration definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the registration definition details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationDefinitionInner> getAsync(String scope, String registrationDefinitionId) {
        return getWithResponseAsync(scope, registrationDefinitionId)
            .flatMap(
                (Response<RegistrationDefinitionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the registration definition details.
     *
     * @param scope Scope of the resource.
     * @param registrationDefinitionId Guid of the registration definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the registration definition details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationDefinitionInner get(String scope, String registrationDefinitionId) {
        return getAsync(scope, registrationDefinitionId).block();
    }

    /**
     * Gets the registration definition details.
     *
     * @param scope Scope of the resource.
     * @param registrationDefinitionId Guid of the registration definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the registration definition details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RegistrationDefinitionInner> getWithResponse(
        String scope, String registrationDefinitionId, Context context) {
        return getWithResponseAsync(scope, registrationDefinitionId, context).block();
    }

    /**
     * Deletes the registration definition.
     *
     * @param registrationDefinitionId Guid of the registration definition.
     * @param scope Scope of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String registrationDefinitionId, String scope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (registrationDefinitionId == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter registrationDefinitionId is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            registrationDefinitionId,
                            this.client.getApiVersion(),
                            scope,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Deletes the registration definition.
     *
     * @param registrationDefinitionId Guid of the registration definition.
     * @param scope Scope of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String registrationDefinitionId, String scope, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (registrationDefinitionId == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter registrationDefinitionId is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                registrationDefinitionId,
                this.client.getApiVersion(),
                scope,
                accept,
                context);
    }

    /**
     * Deletes the registration definition.
     *
     * @param registrationDefinitionId Guid of the registration definition.
     * @param scope Scope of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String registrationDefinitionId, String scope) {
        return deleteWithResponseAsync(registrationDefinitionId, scope).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes the registration definition.
     *
     * @param registrationDefinitionId Guid of the registration definition.
     * @param scope Scope of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String registrationDefinitionId, String scope) {
        deleteAsync(registrationDefinitionId, scope).block();
    }

    /**
     * Deletes the registration definition.
     *
     * @param registrationDefinitionId Guid of the registration definition.
     * @param scope Scope of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String registrationDefinitionId, String scope, Context context) {
        return deleteWithResponseAsync(registrationDefinitionId, scope, context).block();
    }

    /**
     * Creates or updates a registration definition.
     *
     * @param registrationDefinitionId Guid of the registration definition.
     * @param scope Scope of the resource.
     * @param requestBody The parameters required to create new registration definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registration definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String registrationDefinitionId, String scope, RegistrationDefinitionInner requestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (registrationDefinitionId == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter registrationDefinitionId is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            registrationDefinitionId,
                            this.client.getApiVersion(),
                            scope,
                            requestBody,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates or updates a registration definition.
     *
     * @param registrationDefinitionId Guid of the registration definition.
     * @param scope Scope of the resource.
     * @param requestBody The parameters required to create new registration definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registration definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String registrationDefinitionId, String scope, RegistrationDefinitionInner requestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (registrationDefinitionId == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter registrationDefinitionId is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                registrationDefinitionId,
                this.client.getApiVersion(),
                scope,
                requestBody,
                accept,
                context);
    }

    /**
     * Creates or updates a registration definition.
     *
     * @param registrationDefinitionId Guid of the registration definition.
     * @param scope Scope of the resource.
     * @param requestBody The parameters required to create new registration definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registration definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RegistrationDefinitionInner>, RegistrationDefinitionInner> beginCreateOrUpdateAsync(
        String registrationDefinitionId, String scope, RegistrationDefinitionInner requestBody) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(registrationDefinitionId, scope, requestBody);
        return this
            .client
            .<RegistrationDefinitionInner, RegistrationDefinitionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                RegistrationDefinitionInner.class,
                RegistrationDefinitionInner.class,
                Context.NONE);
    }

    /**
     * Creates or updates a registration definition.
     *
     * @param registrationDefinitionId Guid of the registration definition.
     * @param scope Scope of the resource.
     * @param requestBody The parameters required to create new registration definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registration definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RegistrationDefinitionInner>, RegistrationDefinitionInner> beginCreateOrUpdateAsync(
        String registrationDefinitionId, String scope, RegistrationDefinitionInner requestBody, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(registrationDefinitionId, scope, requestBody, context);
        return this
            .client
            .<RegistrationDefinitionInner, RegistrationDefinitionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                RegistrationDefinitionInner.class,
                RegistrationDefinitionInner.class,
                context);
    }

    /**
     * Creates or updates a registration definition.
     *
     * @param registrationDefinitionId Guid of the registration definition.
     * @param scope Scope of the resource.
     * @param requestBody The parameters required to create new registration definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registration definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RegistrationDefinitionInner>, RegistrationDefinitionInner> beginCreateOrUpdate(
        String registrationDefinitionId, String scope, RegistrationDefinitionInner requestBody) {
        return beginCreateOrUpdateAsync(registrationDefinitionId, scope, requestBody).getSyncPoller();
    }

    /**
     * Creates or updates a registration definition.
     *
     * @param registrationDefinitionId Guid of the registration definition.
     * @param scope Scope of the resource.
     * @param requestBody The parameters required to create new registration definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registration definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RegistrationDefinitionInner>, RegistrationDefinitionInner> beginCreateOrUpdate(
        String registrationDefinitionId, String scope, RegistrationDefinitionInner requestBody, Context context) {
        return beginCreateOrUpdateAsync(registrationDefinitionId, scope, requestBody, context).getSyncPoller();
    }

    /**
     * Creates or updates a registration definition.
     *
     * @param registrationDefinitionId Guid of the registration definition.
     * @param scope Scope of the resource.
     * @param requestBody The parameters required to create new registration definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registration definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationDefinitionInner> createOrUpdateAsync(
        String registrationDefinitionId, String scope, RegistrationDefinitionInner requestBody) {
        return beginCreateOrUpdateAsync(registrationDefinitionId, scope, requestBody)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a registration definition.
     *
     * @param registrationDefinitionId Guid of the registration definition.
     * @param scope Scope of the resource.
     * @param requestBody The parameters required to create new registration definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registration definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationDefinitionInner> createOrUpdateAsync(
        String registrationDefinitionId, String scope, RegistrationDefinitionInner requestBody, Context context) {
        return beginCreateOrUpdateAsync(registrationDefinitionId, scope, requestBody, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a registration definition.
     *
     * @param registrationDefinitionId Guid of the registration definition.
     * @param scope Scope of the resource.
     * @param requestBody The parameters required to create new registration definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registration definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationDefinitionInner createOrUpdate(
        String registrationDefinitionId, String scope, RegistrationDefinitionInner requestBody) {
        return createOrUpdateAsync(registrationDefinitionId, scope, requestBody).block();
    }

    /**
     * Creates or updates a registration definition.
     *
     * @param registrationDefinitionId Guid of the registration definition.
     * @param scope Scope of the resource.
     * @param requestBody The parameters required to create new registration definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registration definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationDefinitionInner createOrUpdate(
        String registrationDefinitionId, String scope, RegistrationDefinitionInner requestBody, Context context) {
        return createOrUpdateAsync(registrationDefinitionId, scope, requestBody, context).block();
    }

    /**
     * Gets a list of the registration definitions.
     *
     * @param scope Scope of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the registration definitions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationDefinitionInner>> listSinglePageAsync(String scope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.list(this.client.getEndpoint(), scope, this.client.getApiVersion(), accept, context))
            .<PagedResponse<RegistrationDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets a list of the registration definitions.
     *
     * @param scope Scope of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the registration definitions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationDefinitionInner>> listSinglePageAsync(String scope, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), scope, this.client.getApiVersion(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets a list of the registration definitions.
     *
     * @param scope Scope of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the registration definitions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RegistrationDefinitionInner> listAsync(String scope) {
        return new PagedFlux<>(() -> listSinglePageAsync(scope), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of the registration definitions.
     *
     * @param scope Scope of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the registration definitions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RegistrationDefinitionInner> listAsync(String scope, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(scope, context), nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets a list of the registration definitions.
     *
     * @param scope Scope of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the registration definitions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RegistrationDefinitionInner> list(String scope) {
        return new PagedIterable<>(listAsync(scope));
    }

    /**
     * Gets a list of the registration definitions.
     *
     * @param scope Scope of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the registration definitions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RegistrationDefinitionInner> list(String scope, Context context) {
        return new PagedIterable<>(listAsync(scope, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of registration definitions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationDefinitionInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<RegistrationDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of registration definitions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationDefinitionInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
