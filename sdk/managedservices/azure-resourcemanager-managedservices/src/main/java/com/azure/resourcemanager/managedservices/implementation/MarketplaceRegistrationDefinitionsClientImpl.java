// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedservices.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managedservices.fluent.MarketplaceRegistrationDefinitionsClient;
import com.azure.resourcemanager.managedservices.fluent.models.MarketplaceRegistrationDefinitionInner;
import com.azure.resourcemanager.managedservices.models.MarketplaceRegistrationDefinitionList;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in MarketplaceRegistrationDefinitionsClient.
 */
public final class MarketplaceRegistrationDefinitionsClientImpl implements MarketplaceRegistrationDefinitionsClient {
    private final ClientLogger logger = new ClientLogger(MarketplaceRegistrationDefinitionsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final MarketplaceRegistrationDefinitionsService service;

    /** The service client containing this operation class. */
    private final ManagedServicesClientImpl client;

    /**
     * Initializes an instance of MarketplaceRegistrationDefinitionsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    MarketplaceRegistrationDefinitionsClientImpl(ManagedServicesClientImpl client) {
        this.service =
            RestProxy
                .create(
                    MarketplaceRegistrationDefinitionsService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ManagedServicesClientMarketplaceRegistrationDefinitions to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ManagedServicesClien")
    private interface MarketplaceRegistrationDefinitionsService {
        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.ManagedServices/marketplaceRegistrationDefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MarketplaceRegistrationDefinitionList>> list(
            @HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @QueryParam("$filter") String filter,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.ManagedServices/marketplaceRegistrationDefinitions/{marketplaceIdentifier}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MarketplaceRegistrationDefinitionInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("marketplaceIdentifier") String marketplaceIdentifier,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MarketplaceRegistrationDefinitionList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets a list of the marketplace registration definitions for the marketplace identifier.
     *
     * @param scope Scope of the resource.
     * @param filter The filter query parameter. Might be used to filter marketplace registration definition by plan
     *     identifier, publisher, version etc.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the marketplace registration definitions for the marketplace identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MarketplaceRegistrationDefinitionInner>> listSinglePageAsync(
        String scope, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(this.client.getEndpoint(), scope, filter, this.client.getApiVersion(), accept, context))
            .<PagedResponse<MarketplaceRegistrationDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets a list of the marketplace registration definitions for the marketplace identifier.
     *
     * @param scope Scope of the resource.
     * @param filter The filter query parameter. Might be used to filter marketplace registration definition by plan
     *     identifier, publisher, version etc.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the marketplace registration definitions for the marketplace identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MarketplaceRegistrationDefinitionInner>> listSinglePageAsync(
        String scope, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), scope, filter, this.client.getApiVersion(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets a list of the marketplace registration definitions for the marketplace identifier.
     *
     * @param scope Scope of the resource.
     * @param filter The filter query parameter. Might be used to filter marketplace registration definition by plan
     *     identifier, publisher, version etc.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the marketplace registration definitions for the marketplace identifier.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MarketplaceRegistrationDefinitionInner> listAsync(String scope, String filter) {
        return new PagedFlux<>(() -> listSinglePageAsync(scope, filter), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of the marketplace registration definitions for the marketplace identifier.
     *
     * @param scope Scope of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the marketplace registration definitions for the marketplace identifier.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MarketplaceRegistrationDefinitionInner> listAsync(String scope) {
        final String filter = null;
        return new PagedFlux<>(() -> listSinglePageAsync(scope, filter), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of the marketplace registration definitions for the marketplace identifier.
     *
     * @param scope Scope of the resource.
     * @param filter The filter query parameter. Might be used to filter marketplace registration definition by plan
     *     identifier, publisher, version etc.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the marketplace registration definitions for the marketplace identifier.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MarketplaceRegistrationDefinitionInner> listAsync(String scope, String filter, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(scope, filter, context), nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets a list of the marketplace registration definitions for the marketplace identifier.
     *
     * @param scope Scope of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the marketplace registration definitions for the marketplace identifier.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MarketplaceRegistrationDefinitionInner> list(String scope) {
        final String filter = null;
        return new PagedIterable<>(listAsync(scope, filter));
    }

    /**
     * Gets a list of the marketplace registration definitions for the marketplace identifier.
     *
     * @param scope Scope of the resource.
     * @param filter The filter query parameter. Might be used to filter marketplace registration definition by plan
     *     identifier, publisher, version etc.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the marketplace registration definitions for the marketplace identifier.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MarketplaceRegistrationDefinitionInner> list(String scope, String filter, Context context) {
        return new PagedIterable<>(listAsync(scope, filter, context));
    }

    /**
     * Get the marketplace registration definition for the marketplace identifier.
     *
     * @param scope Scope of the resource.
     * @param marketplaceIdentifier Market place identifer. Expected Formats -
     *     {publisher}.{product[-preview]}.{planName}.{version} or {publisher}.{product[-preview]}.{planName} or
     *     {publisher}.{product[-preview]} or {publisher}).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the marketplace registration definition for the marketplace identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MarketplaceRegistrationDefinitionInner>> getWithResponseAsync(
        String scope, String marketplaceIdentifier) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (marketplaceIdentifier == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter marketplaceIdentifier is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            scope,
                            marketplaceIdentifier,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the marketplace registration definition for the marketplace identifier.
     *
     * @param scope Scope of the resource.
     * @param marketplaceIdentifier Market place identifer. Expected Formats -
     *     {publisher}.{product[-preview]}.{planName}.{version} or {publisher}.{product[-preview]}.{planName} or
     *     {publisher}.{product[-preview]} or {publisher}).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the marketplace registration definition for the marketplace identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MarketplaceRegistrationDefinitionInner>> getWithResponseAsync(
        String scope, String marketplaceIdentifier, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (marketplaceIdentifier == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter marketplaceIdentifier is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(this.client.getEndpoint(), scope, marketplaceIdentifier, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get the marketplace registration definition for the marketplace identifier.
     *
     * @param scope Scope of the resource.
     * @param marketplaceIdentifier Market place identifer. Expected Formats -
     *     {publisher}.{product[-preview]}.{planName}.{version} or {publisher}.{product[-preview]}.{planName} or
     *     {publisher}.{product[-preview]} or {publisher}).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the marketplace registration definition for the marketplace identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MarketplaceRegistrationDefinitionInner> getAsync(String scope, String marketplaceIdentifier) {
        return getWithResponseAsync(scope, marketplaceIdentifier)
            .flatMap(
                (Response<MarketplaceRegistrationDefinitionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the marketplace registration definition for the marketplace identifier.
     *
     * @param scope Scope of the resource.
     * @param marketplaceIdentifier Market place identifer. Expected Formats -
     *     {publisher}.{product[-preview]}.{planName}.{version} or {publisher}.{product[-preview]}.{planName} or
     *     {publisher}.{product[-preview]} or {publisher}).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the marketplace registration definition for the marketplace identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MarketplaceRegistrationDefinitionInner get(String scope, String marketplaceIdentifier) {
        return getAsync(scope, marketplaceIdentifier).block();
    }

    /**
     * Get the marketplace registration definition for the marketplace identifier.
     *
     * @param scope Scope of the resource.
     * @param marketplaceIdentifier Market place identifer. Expected Formats -
     *     {publisher}.{product[-preview]}.{planName}.{version} or {publisher}.{product[-preview]}.{planName} or
     *     {publisher}.{product[-preview]} or {publisher}).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the marketplace registration definition for the marketplace identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MarketplaceRegistrationDefinitionInner> getWithResponse(
        String scope, String marketplaceIdentifier, Context context) {
        return getWithResponseAsync(scope, marketplaceIdentifier, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of marketplace registration definitions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MarketplaceRegistrationDefinitionInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<MarketplaceRegistrationDefinitionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of marketplace registration definitions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MarketplaceRegistrationDefinitionInner>> listNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
