// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedservices.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.managedservices.fluent.RegistrationAssignmentsClient;
import com.azure.resourcemanager.managedservices.fluent.models.RegistrationAssignmentInner;
import com.azure.resourcemanager.managedservices.models.RegistrationAssignmentList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in RegistrationAssignmentsClient. */
public final class RegistrationAssignmentsClientImpl implements RegistrationAssignmentsClient {
    private final ClientLogger logger = new ClientLogger(RegistrationAssignmentsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final RegistrationAssignmentsService service;

    /** The service client containing this operation class. */
    private final ManagedServicesClientImpl client;

    /**
     * Initializes an instance of RegistrationAssignmentsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    RegistrationAssignmentsClientImpl(ManagedServicesClientImpl client) {
        this.service =
            RestProxy
                .create(RegistrationAssignmentsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ManagedServicesClientRegistrationAssignments to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ManagedServicesClien")
    private interface RegistrationAssignmentsService {
        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.ManagedServices/registrationAssignments/{registrationAssignmentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationAssignmentInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("registrationAssignmentId") String registrationAssignmentId,
            @QueryParam("$expandRegistrationDefinition") Boolean expandRegistrationDefinition,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/{scope}/providers/Microsoft.ManagedServices/registrationAssignments/{registrationAssignmentId}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("registrationAssignmentId") String registrationAssignmentId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/{scope}/providers/Microsoft.ManagedServices/registrationAssignments/{registrationAssignmentId}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("registrationAssignmentId") String registrationAssignmentId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") RegistrationAssignmentInner requestBody,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.ManagedServices/registrationAssignments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationAssignmentList>> list(
            @HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @QueryParam("$expandRegistrationDefinition") Boolean expandRegistrationDefinition,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationAssignmentList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the details of the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param expandRegistrationDefinition The flag indicating whether to return the registration definition details
     *     along with the registration assignment details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the specified registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RegistrationAssignmentInner>> getWithResponseAsync(
        String scope, String registrationAssignmentId, Boolean expandRegistrationDefinition) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (registrationAssignmentId == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter registrationAssignmentId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            scope,
                            registrationAssignmentId,
                            expandRegistrationDefinition,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the details of the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param expandRegistrationDefinition The flag indicating whether to return the registration definition details
     *     along with the registration assignment details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the specified registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RegistrationAssignmentInner>> getWithResponseAsync(
        String scope, String registrationAssignmentId, Boolean expandRegistrationDefinition, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (registrationAssignmentId == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter registrationAssignmentId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                scope,
                registrationAssignmentId,
                expandRegistrationDefinition,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets the details of the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param expandRegistrationDefinition The flag indicating whether to return the registration definition details
     *     along with the registration assignment details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the specified registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationAssignmentInner> getAsync(
        String scope, String registrationAssignmentId, Boolean expandRegistrationDefinition) {
        return getWithResponseAsync(scope, registrationAssignmentId, expandRegistrationDefinition)
            .flatMap(
                (Response<RegistrationAssignmentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the details of the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the specified registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationAssignmentInner> getAsync(String scope, String registrationAssignmentId) {
        final Boolean expandRegistrationDefinition = null;
        return getWithResponseAsync(scope, registrationAssignmentId, expandRegistrationDefinition)
            .flatMap(
                (Response<RegistrationAssignmentInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the details of the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the specified registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationAssignmentInner get(String scope, String registrationAssignmentId) {
        final Boolean expandRegistrationDefinition = null;
        return getAsync(scope, registrationAssignmentId, expandRegistrationDefinition).block();
    }

    /**
     * Gets the details of the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param expandRegistrationDefinition The flag indicating whether to return the registration definition details
     *     along with the registration assignment details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the specified registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RegistrationAssignmentInner> getWithResponse(
        String scope, String registrationAssignmentId, Boolean expandRegistrationDefinition, Context context) {
        return getWithResponseAsync(scope, registrationAssignmentId, expandRegistrationDefinition, context).block();
    }

    /**
     * Deletes the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String scope, String registrationAssignmentId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (registrationAssignmentId == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter registrationAssignmentId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            scope,
                            registrationAssignmentId,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String scope, String registrationAssignmentId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (registrationAssignmentId == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter registrationAssignmentId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                scope,
                registrationAssignmentId,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String scope, String registrationAssignmentId) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(scope, registrationAssignmentId);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String scope, String registrationAssignmentId, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(scope, registrationAssignmentId, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String scope, String registrationAssignmentId) {
        return beginDeleteAsync(scope, registrationAssignmentId).getSyncPoller();
    }

    /**
     * Deletes the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String scope, String registrationAssignmentId, Context context) {
        return beginDeleteAsync(scope, registrationAssignmentId, context).getSyncPoller();
    }

    /**
     * Deletes the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String scope, String registrationAssignmentId) {
        return beginDeleteAsync(scope, registrationAssignmentId).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String scope, String registrationAssignmentId, Context context) {
        return beginDeleteAsync(scope, registrationAssignmentId, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String scope, String registrationAssignmentId) {
        deleteAsync(scope, registrationAssignmentId).block();
    }

    /**
     * Deletes the specified registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String scope, String registrationAssignmentId, Context context) {
        deleteAsync(scope, registrationAssignmentId, context).block();
    }

    /**
     * Creates or updates a registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param requestBody The parameters required to create new registration assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String scope, String registrationAssignmentId, RegistrationAssignmentInner requestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (registrationAssignmentId == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter registrationAssignmentId is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            scope,
                            registrationAssignmentId,
                            this.client.getApiVersion(),
                            requestBody,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param requestBody The parameters required to create new registration assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String scope, String registrationAssignmentId, RegistrationAssignmentInner requestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (registrationAssignmentId == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter registrationAssignmentId is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                scope,
                registrationAssignmentId,
                this.client.getApiVersion(),
                requestBody,
                accept,
                context);
    }

    /**
     * Creates or updates a registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param requestBody The parameters required to create new registration assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RegistrationAssignmentInner>, RegistrationAssignmentInner> beginCreateOrUpdateAsync(
        String scope, String registrationAssignmentId, RegistrationAssignmentInner requestBody) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(scope, registrationAssignmentId, requestBody);
        return this
            .client
            .<RegistrationAssignmentInner, RegistrationAssignmentInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                RegistrationAssignmentInner.class,
                RegistrationAssignmentInner.class,
                Context.NONE);
    }

    /**
     * Creates or updates a registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param requestBody The parameters required to create new registration assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<RegistrationAssignmentInner>, RegistrationAssignmentInner> beginCreateOrUpdateAsync(
        String scope, String registrationAssignmentId, RegistrationAssignmentInner requestBody, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(scope, registrationAssignmentId, requestBody, context);
        return this
            .client
            .<RegistrationAssignmentInner, RegistrationAssignmentInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                RegistrationAssignmentInner.class,
                RegistrationAssignmentInner.class,
                context);
    }

    /**
     * Creates or updates a registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param requestBody The parameters required to create new registration assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RegistrationAssignmentInner>, RegistrationAssignmentInner> beginCreateOrUpdate(
        String scope, String registrationAssignmentId, RegistrationAssignmentInner requestBody) {
        return beginCreateOrUpdateAsync(scope, registrationAssignmentId, requestBody).getSyncPoller();
    }

    /**
     * Creates or updates a registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param requestBody The parameters required to create new registration assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<RegistrationAssignmentInner>, RegistrationAssignmentInner> beginCreateOrUpdate(
        String scope, String registrationAssignmentId, RegistrationAssignmentInner requestBody, Context context) {
        return beginCreateOrUpdateAsync(scope, registrationAssignmentId, requestBody, context).getSyncPoller();
    }

    /**
     * Creates or updates a registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param requestBody The parameters required to create new registration assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationAssignmentInner> createOrUpdateAsync(
        String scope, String registrationAssignmentId, RegistrationAssignmentInner requestBody) {
        return beginCreateOrUpdateAsync(scope, registrationAssignmentId, requestBody)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param requestBody The parameters required to create new registration assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationAssignmentInner> createOrUpdateAsync(
        String scope, String registrationAssignmentId, RegistrationAssignmentInner requestBody, Context context) {
        return beginCreateOrUpdateAsync(scope, registrationAssignmentId, requestBody, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param requestBody The parameters required to create new registration assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationAssignmentInner createOrUpdate(
        String scope, String registrationAssignmentId, RegistrationAssignmentInner requestBody) {
        return createOrUpdateAsync(scope, registrationAssignmentId, requestBody).block();
    }

    /**
     * Creates or updates a registration assignment.
     *
     * @param scope The scope of the resource.
     * @param registrationAssignmentId The GUID of the registration assignment.
     * @param requestBody The parameters required to create new registration assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the registration assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationAssignmentInner createOrUpdate(
        String scope, String registrationAssignmentId, RegistrationAssignmentInner requestBody, Context context) {
        return createOrUpdateAsync(scope, registrationAssignmentId, requestBody, context).block();
    }

    /**
     * Gets a list of the registration assignments.
     *
     * @param scope The scope of the resource.
     * @param expandRegistrationDefinition The flag indicating whether to return the registration definition details
     *     along with the registration assignment details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the registration assignments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationAssignmentInner>> listSinglePageAsync(
        String scope, Boolean expandRegistrationDefinition) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            scope,
                            expandRegistrationDefinition,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<RegistrationAssignmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a list of the registration assignments.
     *
     * @param scope The scope of the resource.
     * @param expandRegistrationDefinition The flag indicating whether to return the registration definition details
     *     along with the registration assignment details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the registration assignments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationAssignmentInner>> listSinglePageAsync(
        String scope, Boolean expandRegistrationDefinition, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                scope,
                expandRegistrationDefinition,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets a list of the registration assignments.
     *
     * @param scope The scope of the resource.
     * @param expandRegistrationDefinition The flag indicating whether to return the registration definition details
     *     along with the registration assignment details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the registration assignments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RegistrationAssignmentInner> listAsync(String scope, Boolean expandRegistrationDefinition) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(scope, expandRegistrationDefinition),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of the registration assignments.
     *
     * @param scope The scope of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the registration assignments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RegistrationAssignmentInner> listAsync(String scope) {
        final Boolean expandRegistrationDefinition = null;
        return new PagedFlux<>(
            () -> listSinglePageAsync(scope, expandRegistrationDefinition),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of the registration assignments.
     *
     * @param scope The scope of the resource.
     * @param expandRegistrationDefinition The flag indicating whether to return the registration definition details
     *     along with the registration assignment details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the registration assignments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RegistrationAssignmentInner> listAsync(
        String scope, Boolean expandRegistrationDefinition, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(scope, expandRegistrationDefinition, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets a list of the registration assignments.
     *
     * @param scope The scope of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the registration assignments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RegistrationAssignmentInner> list(String scope) {
        final Boolean expandRegistrationDefinition = null;
        return new PagedIterable<>(listAsync(scope, expandRegistrationDefinition));
    }

    /**
     * Gets a list of the registration assignments.
     *
     * @param scope The scope of the resource.
     * @param expandRegistrationDefinition The flag indicating whether to return the registration definition details
     *     along with the registration assignment details.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the registration assignments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RegistrationAssignmentInner> list(
        String scope, Boolean expandRegistrationDefinition, Context context) {
        return new PagedIterable<>(listAsync(scope, expandRegistrationDefinition, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of registration assignments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationAssignmentInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<RegistrationAssignmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of registration assignments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationAssignmentInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
