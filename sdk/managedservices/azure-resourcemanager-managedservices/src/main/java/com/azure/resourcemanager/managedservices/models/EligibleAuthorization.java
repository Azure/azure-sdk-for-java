// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The Azure Active Directory principal identifier, Azure built-in role, and just-in-time access policy that describes
 * the just-in-time access the principal will receive on the delegated resource in the managed tenant.
 */
@Fluent
public final class EligibleAuthorization {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(EligibleAuthorization.class);

    /*
     * The identifier of the Azure Active Directory principal.
     */
    @JsonProperty(value = "principalId", required = true)
    private String principalId;

    /*
     * The display name of the Azure Active Directory principal.
     */
    @JsonProperty(value = "principalIdDisplayName")
    private String principalIdDisplayName;

    /*
     * The identifier of the Azure built-in role that defines the permissions
     * that the Azure Active Directory principal will have on the projected
     * scope.
     */
    @JsonProperty(value = "roleDefinitionId", required = true)
    private String roleDefinitionId;

    /*
     * The just-in-time access policy setting.
     */
    @JsonProperty(value = "justInTimeAccessPolicy")
    private JustInTimeAccessPolicy justInTimeAccessPolicy;

    /**
     * Get the principalId property: The identifier of the Azure Active Directory principal.
     *
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Set the principalId property: The identifier of the Azure Active Directory principal.
     *
     * @param principalId the principalId value to set.
     * @return the EligibleAuthorization object itself.
     */
    public EligibleAuthorization withPrincipalId(String principalId) {
        this.principalId = principalId;
        return this;
    }

    /**
     * Get the principalIdDisplayName property: The display name of the Azure Active Directory principal.
     *
     * @return the principalIdDisplayName value.
     */
    public String principalIdDisplayName() {
        return this.principalIdDisplayName;
    }

    /**
     * Set the principalIdDisplayName property: The display name of the Azure Active Directory principal.
     *
     * @param principalIdDisplayName the principalIdDisplayName value to set.
     * @return the EligibleAuthorization object itself.
     */
    public EligibleAuthorization withPrincipalIdDisplayName(String principalIdDisplayName) {
        this.principalIdDisplayName = principalIdDisplayName;
        return this;
    }

    /**
     * Get the roleDefinitionId property: The identifier of the Azure built-in role that defines the permissions that
     * the Azure Active Directory principal will have on the projected scope.
     *
     * @return the roleDefinitionId value.
     */
    public String roleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * Set the roleDefinitionId property: The identifier of the Azure built-in role that defines the permissions that
     * the Azure Active Directory principal will have on the projected scope.
     *
     * @param roleDefinitionId the roleDefinitionId value to set.
     * @return the EligibleAuthorization object itself.
     */
    public EligibleAuthorization withRoleDefinitionId(String roleDefinitionId) {
        this.roleDefinitionId = roleDefinitionId;
        return this;
    }

    /**
     * Get the justInTimeAccessPolicy property: The just-in-time access policy setting.
     *
     * @return the justInTimeAccessPolicy value.
     */
    public JustInTimeAccessPolicy justInTimeAccessPolicy() {
        return this.justInTimeAccessPolicy;
    }

    /**
     * Set the justInTimeAccessPolicy property: The just-in-time access policy setting.
     *
     * @param justInTimeAccessPolicy the justInTimeAccessPolicy value to set.
     * @return the EligibleAuthorization object itself.
     */
    public EligibleAuthorization withJustInTimeAccessPolicy(JustInTimeAccessPolicy justInTimeAccessPolicy) {
        this.justInTimeAccessPolicy = justInTimeAccessPolicy;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (principalId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property principalId in model EligibleAuthorization"));
        }
        if (roleDefinitionId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property roleDefinitionId in model EligibleAuthorization"));
        }
        if (justInTimeAccessPolicy() != null) {
            justInTimeAccessPolicy().validate();
        }
    }
}
