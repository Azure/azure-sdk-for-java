// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Eligible authorization tuple containing principle Id (of user/service principal/security group), role definition id,
 * and the just-in-time access setting.
 */
@Fluent
public final class EligibleAuthorization {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(EligibleAuthorization.class);

    /*
     * Principal Id of the security group/service principal/user that would be
     * delegated permissions to the projected subscription
     */
    @JsonProperty(value = "principalId", required = true)
    private String principalId;

    /*
     * Display name of the principal Id.
     */
    @JsonProperty(value = "principalIdDisplayName")
    private String principalIdDisplayName;

    /*
     * The role definition identifier. This role will delegate all the
     * permissions that the security group/service principal/user must have on
     * the projected subscription. This role cannot be an owner role.
     */
    @JsonProperty(value = "roleDefinitionId", required = true)
    private String roleDefinitionId;

    /*
     * Just-in-time access policy setting.
     */
    @JsonProperty(value = "justInTimeAccessPolicy")
    private JustInTimeAccessPolicy justInTimeAccessPolicy;

    /**
     * Get the principalId property: Principal Id of the security group/service principal/user that would be delegated
     * permissions to the projected subscription.
     *
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Set the principalId property: Principal Id of the security group/service principal/user that would be delegated
     * permissions to the projected subscription.
     *
     * @param principalId the principalId value to set.
     * @return the EligibleAuthorization object itself.
     */
    public EligibleAuthorization withPrincipalId(String principalId) {
        this.principalId = principalId;
        return this;
    }

    /**
     * Get the principalIdDisplayName property: Display name of the principal Id.
     *
     * @return the principalIdDisplayName value.
     */
    public String principalIdDisplayName() {
        return this.principalIdDisplayName;
    }

    /**
     * Set the principalIdDisplayName property: Display name of the principal Id.
     *
     * @param principalIdDisplayName the principalIdDisplayName value to set.
     * @return the EligibleAuthorization object itself.
     */
    public EligibleAuthorization withPrincipalIdDisplayName(String principalIdDisplayName) {
        this.principalIdDisplayName = principalIdDisplayName;
        return this;
    }

    /**
     * Get the roleDefinitionId property: The role definition identifier. This role will delegate all the permissions
     * that the security group/service principal/user must have on the projected subscription. This role cannot be an
     * owner role.
     *
     * @return the roleDefinitionId value.
     */
    public String roleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * Set the roleDefinitionId property: The role definition identifier. This role will delegate all the permissions
     * that the security group/service principal/user must have on the projected subscription. This role cannot be an
     * owner role.
     *
     * @param roleDefinitionId the roleDefinitionId value to set.
     * @return the EligibleAuthorization object itself.
     */
    public EligibleAuthorization withRoleDefinitionId(String roleDefinitionId) {
        this.roleDefinitionId = roleDefinitionId;
        return this;
    }

    /**
     * Get the justInTimeAccessPolicy property: Just-in-time access policy setting.
     *
     * @return the justInTimeAccessPolicy value.
     */
    public JustInTimeAccessPolicy justInTimeAccessPolicy() {
        return this.justInTimeAccessPolicy;
    }

    /**
     * Set the justInTimeAccessPolicy property: Just-in-time access policy setting.
     *
     * @param justInTimeAccessPolicy the justInTimeAccessPolicy value to set.
     * @return the EligibleAuthorization object itself.
     */
    public EligibleAuthorization withJustInTimeAccessPolicy(JustInTimeAccessPolicy justInTimeAccessPolicy) {
        this.justInTimeAccessPolicy = justInTimeAccessPolicy;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (principalId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property principalId in model EligibleAuthorization"));
        }
        if (roleDefinitionId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property roleDefinitionId in model EligibleAuthorization"));
        }
        if (justInTimeAccessPolicy() != null) {
            justInTimeAccessPolicy().validate();
        }
    }
}
