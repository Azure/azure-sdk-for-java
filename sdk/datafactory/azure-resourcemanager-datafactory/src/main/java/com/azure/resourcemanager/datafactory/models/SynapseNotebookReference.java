// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Synapse notebook reference type.
 */
@Fluent
public final class SynapseNotebookReference implements JsonSerializable<SynapseNotebookReference> {
    /*
     * Synapse notebook reference type.
     */
    private NotebookReferenceType type;

    /*
     * Reference notebook name. Type: string (or Expression with resultType string).
     */
    private Object referenceName;

    /**
     * Creates an instance of SynapseNotebookReference class.
     */
    public SynapseNotebookReference() {
    }

    /**
     * Get the type property: Synapse notebook reference type.
     * 
     * @return the type value.
     */
    public NotebookReferenceType type() {
        return this.type;
    }

    /**
     * Set the type property: Synapse notebook reference type.
     * 
     * @param type the type value to set.
     * @return the SynapseNotebookReference object itself.
     */
    public SynapseNotebookReference withType(NotebookReferenceType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the referenceName property: Reference notebook name. Type: string (or Expression with resultType string).
     * 
     * @return the referenceName value.
     */
    public Object referenceName() {
        return this.referenceName;
    }

    /**
     * Set the referenceName property: Reference notebook name. Type: string (or Expression with resultType string).
     * 
     * @param referenceName the referenceName value to set.
     * @return the SynapseNotebookReference object itself.
     */
    public SynapseNotebookReference withReferenceName(Object referenceName) {
        this.referenceName = referenceName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model SynapseNotebookReference"));
        }
        if (referenceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property referenceName in model SynapseNotebookReference"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SynapseNotebookReference.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeUntypedField("referenceName", this.referenceName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SynapseNotebookReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SynapseNotebookReference if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SynapseNotebookReference.
     */
    public static SynapseNotebookReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SynapseNotebookReference deserializedSynapseNotebookReference = new SynapseNotebookReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedSynapseNotebookReference.type = NotebookReferenceType.fromString(reader.getString());
                } else if ("referenceName".equals(fieldName)) {
                    deserializedSynapseNotebookReference.referenceName = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSynapseNotebookReference;
        });
    }
}
