// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Properties of integration runtime node.
 */
@Fluent
public final class ManagedIntegrationRuntimeNode implements JsonSerializable<ManagedIntegrationRuntimeNode> {
    /*
     * The managed integration runtime node id.
     */
    private String nodeId;

    /*
     * The managed integration runtime node status.
     */
    private ManagedIntegrationRuntimeNodeStatus status;

    /*
     * The errors that occurred on this integration runtime node.
     */
    private List<ManagedIntegrationRuntimeError> errors;

    /*
     * Properties of integration runtime node.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of ManagedIntegrationRuntimeNode class.
     */
    public ManagedIntegrationRuntimeNode() {
    }

    /**
     * Get the nodeId property: The managed integration runtime node id.
     * 
     * @return the nodeId value.
     */
    public String nodeId() {
        return this.nodeId;
    }

    /**
     * Get the status property: The managed integration runtime node status.
     * 
     * @return the status value.
     */
    public ManagedIntegrationRuntimeNodeStatus status() {
        return this.status;
    }

    /**
     * Get the errors property: The errors that occurred on this integration runtime node.
     * 
     * @return the errors value.
     */
    public List<ManagedIntegrationRuntimeError> errors() {
        return this.errors;
    }

    /**
     * Set the errors property: The errors that occurred on this integration runtime node.
     * 
     * @param errors the errors value to set.
     * @return the ManagedIntegrationRuntimeNode object itself.
     */
    public ManagedIntegrationRuntimeNode withErrors(List<ManagedIntegrationRuntimeError> errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Get the additionalProperties property: Properties of integration runtime node.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Properties of integration runtime node.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the ManagedIntegrationRuntimeNode object itself.
     */
    public ManagedIntegrationRuntimeNode withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedIntegrationRuntimeNode from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedIntegrationRuntimeNode if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedIntegrationRuntimeNode.
     */
    public static ManagedIntegrationRuntimeNode fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedIntegrationRuntimeNode deserializedManagedIntegrationRuntimeNode
                = new ManagedIntegrationRuntimeNode();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nodeId".equals(fieldName)) {
                    deserializedManagedIntegrationRuntimeNode.nodeId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedManagedIntegrationRuntimeNode.status
                        = ManagedIntegrationRuntimeNodeStatus.fromString(reader.getString());
                } else if ("errors".equals(fieldName)) {
                    List<ManagedIntegrationRuntimeError> errors
                        = reader.readArray(reader1 -> ManagedIntegrationRuntimeError.fromJson(reader1));
                    deserializedManagedIntegrationRuntimeNode.errors = errors;
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedManagedIntegrationRuntimeNode.additionalProperties = additionalProperties;

            return deserializedManagedIntegrationRuntimeNode;
        });
    }
}
