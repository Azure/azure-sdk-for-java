// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Data factory name for linked integration runtime request.
 */
@Fluent
public final class LinkedIntegrationRuntimeRequest implements JsonSerializable<LinkedIntegrationRuntimeRequest> {
    /*
     * The data factory name for linked integration runtime.
     */
    private String linkedFactoryName;

    /**
     * Creates an instance of LinkedIntegrationRuntimeRequest class.
     */
    public LinkedIntegrationRuntimeRequest() {
    }

    /**
     * Get the linkedFactoryName property: The data factory name for linked integration runtime.
     * 
     * @return the linkedFactoryName value.
     */
    public String linkedFactoryName() {
        return this.linkedFactoryName;
    }

    /**
     * Set the linkedFactoryName property: The data factory name for linked integration runtime.
     * 
     * @param linkedFactoryName the linkedFactoryName value to set.
     * @return the LinkedIntegrationRuntimeRequest object itself.
     */
    public LinkedIntegrationRuntimeRequest withLinkedFactoryName(String linkedFactoryName) {
        this.linkedFactoryName = linkedFactoryName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (linkedFactoryName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property linkedFactoryName in model LinkedIntegrationRuntimeRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LinkedIntegrationRuntimeRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("factoryName", this.linkedFactoryName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinkedIntegrationRuntimeRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinkedIntegrationRuntimeRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LinkedIntegrationRuntimeRequest.
     */
    public static LinkedIntegrationRuntimeRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinkedIntegrationRuntimeRequest deserializedLinkedIntegrationRuntimeRequest
                = new LinkedIntegrationRuntimeRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("factoryName".equals(fieldName)) {
                    deserializedLinkedIntegrationRuntimeRequest.linkedFactoryName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinkedIntegrationRuntimeRequest;
        });
    }
}
