// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Monitoring data for integration runtime node.
 */
@Fluent
public final class IntegrationRuntimeNodeMonitoringData
    implements JsonSerializable<IntegrationRuntimeNodeMonitoringData> {
    /*
     * Name of the integration runtime node.
     */
    private String nodeName;

    /*
     * Available memory (MB) on the integration runtime node.
     */
    private Integer availableMemoryInMB;

    /*
     * CPU percentage on the integration runtime node.
     */
    private Integer cpuUtilization;

    /*
     * Maximum concurrent jobs on the integration runtime node.
     */
    private Integer concurrentJobsLimit;

    /*
     * The number of jobs currently running on the integration runtime node.
     */
    private Integer concurrentJobsRunning;

    /*
     * The maximum concurrent jobs in this integration runtime.
     */
    private Integer maxConcurrentJobs;

    /*
     * Sent bytes on the integration runtime node.
     */
    private Float sentBytes;

    /*
     * Received bytes on the integration runtime node.
     */
    private Float receivedBytes;

    /*
     * Monitoring data for integration runtime node.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of IntegrationRuntimeNodeMonitoringData class.
     */
    public IntegrationRuntimeNodeMonitoringData() {
    }

    /**
     * Get the nodeName property: Name of the integration runtime node.
     * 
     * @return the nodeName value.
     */
    public String nodeName() {
        return this.nodeName;
    }

    /**
     * Get the availableMemoryInMB property: Available memory (MB) on the integration runtime node.
     * 
     * @return the availableMemoryInMB value.
     */
    public Integer availableMemoryInMB() {
        return this.availableMemoryInMB;
    }

    /**
     * Get the cpuUtilization property: CPU percentage on the integration runtime node.
     * 
     * @return the cpuUtilization value.
     */
    public Integer cpuUtilization() {
        return this.cpuUtilization;
    }

    /**
     * Get the concurrentJobsLimit property: Maximum concurrent jobs on the integration runtime node.
     * 
     * @return the concurrentJobsLimit value.
     */
    public Integer concurrentJobsLimit() {
        return this.concurrentJobsLimit;
    }

    /**
     * Get the concurrentJobsRunning property: The number of jobs currently running on the integration runtime node.
     * 
     * @return the concurrentJobsRunning value.
     */
    public Integer concurrentJobsRunning() {
        return this.concurrentJobsRunning;
    }

    /**
     * Get the maxConcurrentJobs property: The maximum concurrent jobs in this integration runtime.
     * 
     * @return the maxConcurrentJobs value.
     */
    public Integer maxConcurrentJobs() {
        return this.maxConcurrentJobs;
    }

    /**
     * Get the sentBytes property: Sent bytes on the integration runtime node.
     * 
     * @return the sentBytes value.
     */
    public Float sentBytes() {
        return this.sentBytes;
    }

    /**
     * Get the receivedBytes property: Received bytes on the integration runtime node.
     * 
     * @return the receivedBytes value.
     */
    public Float receivedBytes() {
        return this.receivedBytes;
    }

    /**
     * Get the additionalProperties property: Monitoring data for integration runtime node.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Monitoring data for integration runtime node.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the IntegrationRuntimeNodeMonitoringData object itself.
     */
    public IntegrationRuntimeNodeMonitoringData withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IntegrationRuntimeNodeMonitoringData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IntegrationRuntimeNodeMonitoringData if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IntegrationRuntimeNodeMonitoringData.
     */
    public static IntegrationRuntimeNodeMonitoringData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IntegrationRuntimeNodeMonitoringData deserializedIntegrationRuntimeNodeMonitoringData
                = new IntegrationRuntimeNodeMonitoringData();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nodeName".equals(fieldName)) {
                    deserializedIntegrationRuntimeNodeMonitoringData.nodeName = reader.getString();
                } else if ("availableMemoryInMB".equals(fieldName)) {
                    deserializedIntegrationRuntimeNodeMonitoringData.availableMemoryInMB
                        = reader.getNullable(JsonReader::getInt);
                } else if ("cpuUtilization".equals(fieldName)) {
                    deserializedIntegrationRuntimeNodeMonitoringData.cpuUtilization
                        = reader.getNullable(JsonReader::getInt);
                } else if ("concurrentJobsLimit".equals(fieldName)) {
                    deserializedIntegrationRuntimeNodeMonitoringData.concurrentJobsLimit
                        = reader.getNullable(JsonReader::getInt);
                } else if ("concurrentJobsRunning".equals(fieldName)) {
                    deserializedIntegrationRuntimeNodeMonitoringData.concurrentJobsRunning
                        = reader.getNullable(JsonReader::getInt);
                } else if ("maxConcurrentJobs".equals(fieldName)) {
                    deserializedIntegrationRuntimeNodeMonitoringData.maxConcurrentJobs
                        = reader.getNullable(JsonReader::getInt);
                } else if ("sentBytes".equals(fieldName)) {
                    deserializedIntegrationRuntimeNodeMonitoringData.sentBytes
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("receivedBytes".equals(fieldName)) {
                    deserializedIntegrationRuntimeNodeMonitoringData.receivedBytes
                        = reader.getNullable(JsonReader::getFloat);
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedIntegrationRuntimeNodeMonitoringData.additionalProperties = additionalProperties;

            return deserializedIntegrationRuntimeNodeMonitoringData;
        });
    }
}
