// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Error definition for managed integration runtime.
 */
@Fluent
public final class ManagedIntegrationRuntimeError implements JsonSerializable<ManagedIntegrationRuntimeError> {
    /*
     * The time when the error occurred.
     */
    private OffsetDateTime time;

    /*
     * Error code.
     */
    private String code;

    /*
     * Managed integration runtime error parameters.
     */
    private List<String> parameters;

    /*
     * Error message.
     */
    private String message;

    /*
     * Error definition for managed integration runtime.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of ManagedIntegrationRuntimeError class.
     */
    public ManagedIntegrationRuntimeError() {
    }

    /**
     * Get the time property: The time when the error occurred.
     * 
     * @return the time value.
     */
    public OffsetDateTime time() {
        return this.time;
    }

    /**
     * Get the code property: Error code.
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Get the parameters property: Managed integration runtime error parameters.
     * 
     * @return the parameters value.
     */
    public List<String> parameters() {
        return this.parameters;
    }

    /**
     * Get the message property: Error message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the additionalProperties property: Error definition for managed integration runtime.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Error definition for managed integration runtime.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the ManagedIntegrationRuntimeError object itself.
     */
    public ManagedIntegrationRuntimeError withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedIntegrationRuntimeError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedIntegrationRuntimeError if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedIntegrationRuntimeError.
     */
    public static ManagedIntegrationRuntimeError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedIntegrationRuntimeError deserializedManagedIntegrationRuntimeError
                = new ManagedIntegrationRuntimeError();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("time".equals(fieldName)) {
                    deserializedManagedIntegrationRuntimeError.time = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("code".equals(fieldName)) {
                    deserializedManagedIntegrationRuntimeError.code = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    List<String> parameters = reader.readArray(reader1 -> reader1.getString());
                    deserializedManagedIntegrationRuntimeError.parameters = parameters;
                } else if ("message".equals(fieldName)) {
                    deserializedManagedIntegrationRuntimeError.message = reader.getString();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedManagedIntegrationRuntimeError.additionalProperties = additionalProperties;

            return deserializedManagedIntegrationRuntimeError;
        });
    }
}
