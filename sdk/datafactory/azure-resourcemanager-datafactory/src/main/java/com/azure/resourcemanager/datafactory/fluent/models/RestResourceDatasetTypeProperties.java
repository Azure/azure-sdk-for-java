// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Properties specific to this dataset type.
 */
@Fluent
public final class RestResourceDatasetTypeProperties implements JsonSerializable<RestResourceDatasetTypeProperties> {
    /*
     * The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType
     * string).
     */
    private Object relativeUrl;

    /*
     * The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType
     * string).
     */
    private Object requestMethod;

    /*
     * The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType
     * string).
     */
    private Object requestBody;

    /*
     * The additional HTTP headers in the request to the RESTful API.
     */
    private Map<String, Object> additionalHeaders;

    /*
     * The pagination rules to compose next page requests.
     */
    private Map<String, Object> paginationRules;

    /**
     * Creates an instance of RestResourceDatasetTypeProperties class.
     */
    public RestResourceDatasetTypeProperties() {
    }

    /**
     * Get the relativeUrl property: The relative URL to the resource that the RESTful API provides. Type: string (or
     * Expression with resultType string).
     * 
     * @return the relativeUrl value.
     */
    public Object relativeUrl() {
        return this.relativeUrl;
    }

    /**
     * Set the relativeUrl property: The relative URL to the resource that the RESTful API provides. Type: string (or
     * Expression with resultType string).
     * 
     * @param relativeUrl the relativeUrl value to set.
     * @return the RestResourceDatasetTypeProperties object itself.
     */
    public RestResourceDatasetTypeProperties withRelativeUrl(Object relativeUrl) {
        this.relativeUrl = relativeUrl;
        return this;
    }

    /**
     * Get the requestMethod property: The HTTP method used to call the RESTful API. The default is GET. Type: string
     * (or Expression with resultType string).
     * 
     * @return the requestMethod value.
     */
    public Object requestMethod() {
        return this.requestMethod;
    }

    /**
     * Set the requestMethod property: The HTTP method used to call the RESTful API. The default is GET. Type: string
     * (or Expression with resultType string).
     * 
     * @param requestMethod the requestMethod value to set.
     * @return the RestResourceDatasetTypeProperties object itself.
     */
    public RestResourceDatasetTypeProperties withRequestMethod(Object requestMethod) {
        this.requestMethod = requestMethod;
        return this;
    }

    /**
     * Get the requestBody property: The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or
     * Expression with resultType string).
     * 
     * @return the requestBody value.
     */
    public Object requestBody() {
        return this.requestBody;
    }

    /**
     * Set the requestBody property: The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or
     * Expression with resultType string).
     * 
     * @param requestBody the requestBody value to set.
     * @return the RestResourceDatasetTypeProperties object itself.
     */
    public RestResourceDatasetTypeProperties withRequestBody(Object requestBody) {
        this.requestBody = requestBody;
        return this;
    }

    /**
     * Get the additionalHeaders property: The additional HTTP headers in the request to the RESTful API.
     * 
     * @return the additionalHeaders value.
     */
    public Map<String, Object> additionalHeaders() {
        return this.additionalHeaders;
    }

    /**
     * Set the additionalHeaders property: The additional HTTP headers in the request to the RESTful API.
     * 
     * @param additionalHeaders the additionalHeaders value to set.
     * @return the RestResourceDatasetTypeProperties object itself.
     */
    public RestResourceDatasetTypeProperties withAdditionalHeaders(Map<String, Object> additionalHeaders) {
        this.additionalHeaders = additionalHeaders;
        return this;
    }

    /**
     * Get the paginationRules property: The pagination rules to compose next page requests.
     * 
     * @return the paginationRules value.
     */
    public Map<String, Object> paginationRules() {
        return this.paginationRules;
    }

    /**
     * Set the paginationRules property: The pagination rules to compose next page requests.
     * 
     * @param paginationRules the paginationRules value to set.
     * @return the RestResourceDatasetTypeProperties object itself.
     */
    public RestResourceDatasetTypeProperties withPaginationRules(Map<String, Object> paginationRules) {
        this.paginationRules = paginationRules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("relativeUrl", this.relativeUrl);
        jsonWriter.writeUntypedField("requestMethod", this.requestMethod);
        jsonWriter.writeUntypedField("requestBody", this.requestBody);
        jsonWriter.writeMapField("additionalHeaders", this.additionalHeaders,
            (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeMapField("paginationRules", this.paginationRules,
            (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RestResourceDatasetTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RestResourceDatasetTypeProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RestResourceDatasetTypeProperties.
     */
    public static RestResourceDatasetTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RestResourceDatasetTypeProperties deserializedRestResourceDatasetTypeProperties
                = new RestResourceDatasetTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("relativeUrl".equals(fieldName)) {
                    deserializedRestResourceDatasetTypeProperties.relativeUrl = reader.readUntyped();
                } else if ("requestMethod".equals(fieldName)) {
                    deserializedRestResourceDatasetTypeProperties.requestMethod = reader.readUntyped();
                } else if ("requestBody".equals(fieldName)) {
                    deserializedRestResourceDatasetTypeProperties.requestBody = reader.readUntyped();
                } else if ("additionalHeaders".equals(fieldName)) {
                    Map<String, Object> additionalHeaders = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedRestResourceDatasetTypeProperties.additionalHeaders = additionalHeaders;
                } else if ("paginationRules".equals(fieldName)) {
                    Map<String, Object> paginationRules = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedRestResourceDatasetTypeProperties.paginationRules = paginationRules;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRestResourceDatasetTypeProperties;
        });
    }
}
