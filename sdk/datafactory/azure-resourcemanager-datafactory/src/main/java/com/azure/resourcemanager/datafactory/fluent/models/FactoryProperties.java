// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.EncryptionConfiguration;
import com.azure.resourcemanager.datafactory.models.FactoryRepoConfiguration;
import com.azure.resourcemanager.datafactory.models.GlobalParameterSpecification;
import com.azure.resourcemanager.datafactory.models.PublicNetworkAccess;
import com.azure.resourcemanager.datafactory.models.PurviewConfiguration;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Factory resource properties.
 */
@Fluent
public final class FactoryProperties implements JsonSerializable<FactoryProperties> {
    /*
     * Factory provisioning state, example Succeeded.
     */
    private String provisioningState;

    /*
     * Time the factory was created in ISO8601 format.
     */
    private OffsetDateTime createTime;

    /*
     * Version of the factory.
     */
    private String version;

    /*
     * Purview information of the factory.
     */
    private PurviewConfiguration purviewConfiguration;

    /*
     * Git repo information of the factory.
     */
    private FactoryRepoConfiguration repoConfiguration;

    /*
     * List of parameters for factory.
     */
    private Map<String, GlobalParameterSpecification> globalParameters;

    /*
     * Properties to enable Customer Managed Key for the factory.
     */
    private EncryptionConfiguration encryption;

    /*
     * Whether or not public network access is allowed for the data factory.
     */
    private PublicNetworkAccess publicNetworkAccess;

    /**
     * Creates an instance of FactoryProperties class.
     */
    public FactoryProperties() {
    }

    /**
     * Get the provisioningState property: Factory provisioning state, example Succeeded.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the createTime property: Time the factory was created in ISO8601 format.
     * 
     * @return the createTime value.
     */
    public OffsetDateTime createTime() {
        return this.createTime;
    }

    /**
     * Get the version property: Version of the factory.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the purviewConfiguration property: Purview information of the factory.
     * 
     * @return the purviewConfiguration value.
     */
    public PurviewConfiguration purviewConfiguration() {
        return this.purviewConfiguration;
    }

    /**
     * Set the purviewConfiguration property: Purview information of the factory.
     * 
     * @param purviewConfiguration the purviewConfiguration value to set.
     * @return the FactoryProperties object itself.
     */
    public FactoryProperties withPurviewConfiguration(PurviewConfiguration purviewConfiguration) {
        this.purviewConfiguration = purviewConfiguration;
        return this;
    }

    /**
     * Get the repoConfiguration property: Git repo information of the factory.
     * 
     * @return the repoConfiguration value.
     */
    public FactoryRepoConfiguration repoConfiguration() {
        return this.repoConfiguration;
    }

    /**
     * Set the repoConfiguration property: Git repo information of the factory.
     * 
     * @param repoConfiguration the repoConfiguration value to set.
     * @return the FactoryProperties object itself.
     */
    public FactoryProperties withRepoConfiguration(FactoryRepoConfiguration repoConfiguration) {
        this.repoConfiguration = repoConfiguration;
        return this;
    }

    /**
     * Get the globalParameters property: List of parameters for factory.
     * 
     * @return the globalParameters value.
     */
    public Map<String, GlobalParameterSpecification> globalParameters() {
        return this.globalParameters;
    }

    /**
     * Set the globalParameters property: List of parameters for factory.
     * 
     * @param globalParameters the globalParameters value to set.
     * @return the FactoryProperties object itself.
     */
    public FactoryProperties withGlobalParameters(Map<String, GlobalParameterSpecification> globalParameters) {
        this.globalParameters = globalParameters;
        return this;
    }

    /**
     * Get the encryption property: Properties to enable Customer Managed Key for the factory.
     * 
     * @return the encryption value.
     */
    public EncryptionConfiguration encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: Properties to enable Customer Managed Key for the factory.
     * 
     * @param encryption the encryption value to set.
     * @return the FactoryProperties object itself.
     */
    public FactoryProperties withEncryption(EncryptionConfiguration encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: Whether or not public network access is allowed for the data factory.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Whether or not public network access is allowed for the data factory.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the FactoryProperties object itself.
     */
    public FactoryProperties withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (purviewConfiguration() != null) {
            purviewConfiguration().validate();
        }
        if (repoConfiguration() != null) {
            repoConfiguration().validate();
        }
        if (globalParameters() != null) {
            globalParameters().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (encryption() != null) {
            encryption().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("purviewConfiguration", this.purviewConfiguration);
        jsonWriter.writeJsonField("repoConfiguration", this.repoConfiguration);
        jsonWriter.writeMapField("globalParameters", this.globalParameters,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("encryption", this.encryption);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FactoryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FactoryProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FactoryProperties.
     */
    public static FactoryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FactoryProperties deserializedFactoryProperties = new FactoryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedFactoryProperties.provisioningState = reader.getString();
                } else if ("createTime".equals(fieldName)) {
                    deserializedFactoryProperties.createTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("version".equals(fieldName)) {
                    deserializedFactoryProperties.version = reader.getString();
                } else if ("purviewConfiguration".equals(fieldName)) {
                    deserializedFactoryProperties.purviewConfiguration = PurviewConfiguration.fromJson(reader);
                } else if ("repoConfiguration".equals(fieldName)) {
                    deserializedFactoryProperties.repoConfiguration = FactoryRepoConfiguration.fromJson(reader);
                } else if ("globalParameters".equals(fieldName)) {
                    Map<String, GlobalParameterSpecification> globalParameters
                        = reader.readMap(reader1 -> GlobalParameterSpecification.fromJson(reader1));
                    deserializedFactoryProperties.globalParameters = globalParameters;
                } else if ("encryption".equals(fieldName)) {
                    deserializedFactoryProperties.encryption = EncryptionConfiguration.fromJson(reader);
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedFactoryProperties.publicNetworkAccess
                        = PublicNetworkAccess.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFactoryProperties;
        });
    }
}
