// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Update integration runtime node request.
 */
@Fluent
public final class UpdateIntegrationRuntimeNodeRequest
    implements JsonSerializable<UpdateIntegrationRuntimeNodeRequest> {
    /*
     * The number of concurrent jobs permitted to run on the integration runtime node. Values between 1 and
     * maxConcurrentJobs(inclusive) are allowed.
     */
    private Integer concurrentJobsLimit;

    /**
     * Creates an instance of UpdateIntegrationRuntimeNodeRequest class.
     */
    public UpdateIntegrationRuntimeNodeRequest() {
    }

    /**
     * Get the concurrentJobsLimit property: The number of concurrent jobs permitted to run on the integration runtime
     * node. Values between 1 and maxConcurrentJobs(inclusive) are allowed.
     * 
     * @return the concurrentJobsLimit value.
     */
    public Integer concurrentJobsLimit() {
        return this.concurrentJobsLimit;
    }

    /**
     * Set the concurrentJobsLimit property: The number of concurrent jobs permitted to run on the integration runtime
     * node. Values between 1 and maxConcurrentJobs(inclusive) are allowed.
     * 
     * @param concurrentJobsLimit the concurrentJobsLimit value to set.
     * @return the UpdateIntegrationRuntimeNodeRequest object itself.
     */
    public UpdateIntegrationRuntimeNodeRequest withConcurrentJobsLimit(Integer concurrentJobsLimit) {
        this.concurrentJobsLimit = concurrentJobsLimit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("concurrentJobsLimit", this.concurrentJobsLimit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateIntegrationRuntimeNodeRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateIntegrationRuntimeNodeRequest if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateIntegrationRuntimeNodeRequest.
     */
    public static UpdateIntegrationRuntimeNodeRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateIntegrationRuntimeNodeRequest deserializedUpdateIntegrationRuntimeNodeRequest
                = new UpdateIntegrationRuntimeNodeRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("concurrentJobsLimit".equals(fieldName)) {
                    deserializedUpdateIntegrationRuntimeNodeRequest.concurrentJobsLimit
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateIntegrationRuntimeNodeRequest;
        });
    }
}
