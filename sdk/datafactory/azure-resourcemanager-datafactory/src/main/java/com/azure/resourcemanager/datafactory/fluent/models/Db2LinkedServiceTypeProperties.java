// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.Db2AuthenticationType;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import java.io.IOException;

/**
 * DB2 linked service properties.
 */
@Fluent
public final class Db2LinkedServiceTypeProperties implements JsonSerializable<Db2LinkedServiceTypeProperties> {
    /*
     * The connection string. It is mutually exclusive with server, database, authenticationType, userName,
     * packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    private Object connectionString;

    /*
     * Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression
     * with resultType string).
     */
    private Object server;

    /*
     * Database name for connection. It is mutually exclusive with connectionString property. Type: string (or
     * Expression with resultType string).
     */
    private Object database;

    /*
     * AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
     */
    private Db2AuthenticationType authenticationType;

    /*
     * Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression
     * with resultType string).
     */
    private Object username;

    /*
     * Password for authentication.
     */
    private SecretBase password;

    /*
     * Under where packages are created when querying database. It is mutually exclusive with connectionString property.
     * Type: string (or Expression with resultType string).
     */
    private Object packageCollection;

    /*
     * Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type:
     * string (or Expression with resultType string).
     */
    private Object certificateCommonName;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime
     * credential manager. It is mutually exclusive with connectionString property. Type: string.
     */
    private String encryptedCredential;

    /**
     * Creates an instance of Db2LinkedServiceTypeProperties class.
     */
    public Db2LinkedServiceTypeProperties() {
    }

    /**
     * Get the connectionString property: The connection string. It is mutually exclusive with server, database,
     * authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or
     * AzureKeyVaultSecretReference.
     * 
     * @return the connectionString value.
     */
    public Object connectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: The connection string. It is mutually exclusive with server, database,
     * authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or
     * AzureKeyVaultSecretReference.
     * 
     * @param connectionString the connectionString value to set.
     * @return the Db2LinkedServiceTypeProperties object itself.
     */
    public Db2LinkedServiceTypeProperties withConnectionString(Object connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Get the server property: Server name for connection. It is mutually exclusive with connectionString property.
     * Type: string (or Expression with resultType string).
     * 
     * @return the server value.
     */
    public Object server() {
        return this.server;
    }

    /**
     * Set the server property: Server name for connection. It is mutually exclusive with connectionString property.
     * Type: string (or Expression with resultType string).
     * 
     * @param server the server value to set.
     * @return the Db2LinkedServiceTypeProperties object itself.
     */
    public Db2LinkedServiceTypeProperties withServer(Object server) {
        this.server = server;
        return this;
    }

    /**
     * Get the database property: Database name for connection. It is mutually exclusive with connectionString property.
     * Type: string (or Expression with resultType string).
     * 
     * @return the database value.
     */
    public Object database() {
        return this.database;
    }

    /**
     * Set the database property: Database name for connection. It is mutually exclusive with connectionString property.
     * Type: string (or Expression with resultType string).
     * 
     * @param database the database value to set.
     * @return the Db2LinkedServiceTypeProperties object itself.
     */
    public Db2LinkedServiceTypeProperties withDatabase(Object database) {
        this.database = database;
        return this;
    }

    /**
     * Get the authenticationType property: AuthenticationType to be used for connection. It is mutually exclusive with
     * connectionString property.
     * 
     * @return the authenticationType value.
     */
    public Db2AuthenticationType authenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: AuthenticationType to be used for connection. It is mutually exclusive with
     * connectionString property.
     * 
     * @param authenticationType the authenticationType value to set.
     * @return the Db2LinkedServiceTypeProperties object itself.
     */
    public Db2LinkedServiceTypeProperties withAuthenticationType(Db2AuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get the username property: Username for authentication. It is mutually exclusive with connectionString property.
     * Type: string (or Expression with resultType string).
     * 
     * @return the username value.
     */
    public Object username() {
        return this.username;
    }

    /**
     * Set the username property: Username for authentication. It is mutually exclusive with connectionString property.
     * Type: string (or Expression with resultType string).
     * 
     * @param username the username value to set.
     * @return the Db2LinkedServiceTypeProperties object itself.
     */
    public Db2LinkedServiceTypeProperties withUsername(Object username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: Password for authentication.
     * 
     * @return the password value.
     */
    public SecretBase password() {
        return this.password;
    }

    /**
     * Set the password property: Password for authentication.
     * 
     * @param password the password value to set.
     * @return the Db2LinkedServiceTypeProperties object itself.
     */
    public Db2LinkedServiceTypeProperties withPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * Get the packageCollection property: Under where packages are created when querying database. It is mutually
     * exclusive with connectionString property. Type: string (or Expression with resultType string).
     * 
     * @return the packageCollection value.
     */
    public Object packageCollection() {
        return this.packageCollection;
    }

    /**
     * Set the packageCollection property: Under where packages are created when querying database. It is mutually
     * exclusive with connectionString property. Type: string (or Expression with resultType string).
     * 
     * @param packageCollection the packageCollection value to set.
     * @return the Db2LinkedServiceTypeProperties object itself.
     */
    public Db2LinkedServiceTypeProperties withPackageCollection(Object packageCollection) {
        this.packageCollection = packageCollection;
        return this;
    }

    /**
     * Get the certificateCommonName property: Certificate Common Name when TLS is enabled. It is mutually exclusive
     * with connectionString property. Type: string (or Expression with resultType string).
     * 
     * @return the certificateCommonName value.
     */
    public Object certificateCommonName() {
        return this.certificateCommonName;
    }

    /**
     * Set the certificateCommonName property: Certificate Common Name when TLS is enabled. It is mutually exclusive
     * with connectionString property. Type: string (or Expression with resultType string).
     * 
     * @param certificateCommonName the certificateCommonName value to set.
     * @return the Db2LinkedServiceTypeProperties object itself.
     */
    public Db2LinkedServiceTypeProperties withCertificateCommonName(Object certificateCommonName) {
        this.certificateCommonName = certificateCommonName;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type:
     * string.
     * 
     * @return the encryptedCredential value.
     */
    public String encryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type:
     * string.
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the Db2LinkedServiceTypeProperties object itself.
     */
    public Db2LinkedServiceTypeProperties withEncryptedCredential(String encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (password() != null) {
            password().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("connectionString", this.connectionString);
        jsonWriter.writeUntypedField("server", this.server);
        jsonWriter.writeUntypedField("database", this.database);
        jsonWriter.writeStringField("authenticationType",
            this.authenticationType == null ? null : this.authenticationType.toString());
        jsonWriter.writeUntypedField("username", this.username);
        jsonWriter.writeJsonField("password", this.password);
        jsonWriter.writeUntypedField("packageCollection", this.packageCollection);
        jsonWriter.writeUntypedField("certificateCommonName", this.certificateCommonName);
        jsonWriter.writeStringField("encryptedCredential", this.encryptedCredential);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Db2LinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Db2LinkedServiceTypeProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the Db2LinkedServiceTypeProperties.
     */
    public static Db2LinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Db2LinkedServiceTypeProperties deserializedDb2LinkedServiceTypeProperties
                = new Db2LinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectionString".equals(fieldName)) {
                    deserializedDb2LinkedServiceTypeProperties.connectionString = reader.readUntyped();
                } else if ("server".equals(fieldName)) {
                    deserializedDb2LinkedServiceTypeProperties.server = reader.readUntyped();
                } else if ("database".equals(fieldName)) {
                    deserializedDb2LinkedServiceTypeProperties.database = reader.readUntyped();
                } else if ("authenticationType".equals(fieldName)) {
                    deserializedDb2LinkedServiceTypeProperties.authenticationType
                        = Db2AuthenticationType.fromString(reader.getString());
                } else if ("username".equals(fieldName)) {
                    deserializedDb2LinkedServiceTypeProperties.username = reader.readUntyped();
                } else if ("password".equals(fieldName)) {
                    deserializedDb2LinkedServiceTypeProperties.password = SecretBase.fromJson(reader);
                } else if ("packageCollection".equals(fieldName)) {
                    deserializedDb2LinkedServiceTypeProperties.packageCollection = reader.readUntyped();
                } else if ("certificateCommonName".equals(fieldName)) {
                    deserializedDb2LinkedServiceTypeProperties.certificateCommonName = reader.readUntyped();
                } else if ("encryptedCredential".equals(fieldName)) {
                    deserializedDb2LinkedServiceTypeProperties.encryptedCredential = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDb2LinkedServiceTypeProperties;
        });
    }
}
