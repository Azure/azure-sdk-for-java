// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A list of exposure control feature values.
 */
@Fluent
public final class ExposureControlBatchResponseInner implements JsonSerializable<ExposureControlBatchResponseInner> {
    /*
     * List of exposure control feature values.
     */
    private List<ExposureControlResponseInner> exposureControlResponses;

    /**
     * Creates an instance of ExposureControlBatchResponseInner class.
     */
    public ExposureControlBatchResponseInner() {
    }

    /**
     * Get the exposureControlResponses property: List of exposure control feature values.
     * 
     * @return the exposureControlResponses value.
     */
    public List<ExposureControlResponseInner> exposureControlResponses() {
        return this.exposureControlResponses;
    }

    /**
     * Set the exposureControlResponses property: List of exposure control feature values.
     * 
     * @param exposureControlResponses the exposureControlResponses value to set.
     * @return the ExposureControlBatchResponseInner object itself.
     */
    public ExposureControlBatchResponseInner
        withExposureControlResponses(List<ExposureControlResponseInner> exposureControlResponses) {
        this.exposureControlResponses = exposureControlResponses;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (exposureControlResponses() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property exposureControlResponses in model ExposureControlBatchResponseInner"));
        } else {
            exposureControlResponses().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExposureControlBatchResponseInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("exposureControlResponses", this.exposureControlResponses,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExposureControlBatchResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExposureControlBatchResponseInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExposureControlBatchResponseInner.
     */
    public static ExposureControlBatchResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExposureControlBatchResponseInner deserializedExposureControlBatchResponseInner
                = new ExposureControlBatchResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("exposureControlResponses".equals(fieldName)) {
                    List<ExposureControlResponseInner> exposureControlResponses
                        = reader.readArray(reader1 -> ExposureControlResponseInner.fromJson(reader1));
                    deserializedExposureControlBatchResponseInner.exposureControlResponses = exposureControlResponses;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExposureControlBatchResponseInner;
        });
    }
}
