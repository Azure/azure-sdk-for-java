// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Office365 dataset properties.
 */
@Fluent
public final class Office365DatasetTypeProperties implements JsonSerializable<Office365DatasetTypeProperties> {
    /*
     * Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
     */
    private Object tableName;

    /*
     * A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or
     * Expression with resultType string).
     */
    private Object predicate;

    /**
     * Creates an instance of Office365DatasetTypeProperties class.
     */
    public Office365DatasetTypeProperties() {
    }

    /**
     * Get the tableName property: Name of the dataset to extract from Office 365. Type: string (or Expression with
     * resultType string).
     * 
     * @return the tableName value.
     */
    public Object tableName() {
        return this.tableName;
    }

    /**
     * Set the tableName property: Name of the dataset to extract from Office 365. Type: string (or Expression with
     * resultType string).
     * 
     * @param tableName the tableName value to set.
     * @return the Office365DatasetTypeProperties object itself.
     */
    public Office365DatasetTypeProperties withTableName(Object tableName) {
        this.tableName = tableName;
        return this;
    }

    /**
     * Get the predicate property: A predicate expression that can be used to filter the specific rows to extract from
     * Office 365. Type: string (or Expression with resultType string).
     * 
     * @return the predicate value.
     */
    public Object predicate() {
        return this.predicate;
    }

    /**
     * Set the predicate property: A predicate expression that can be used to filter the specific rows to extract from
     * Office 365. Type: string (or Expression with resultType string).
     * 
     * @param predicate the predicate value to set.
     * @return the Office365DatasetTypeProperties object itself.
     */
    public Office365DatasetTypeProperties withPredicate(Object predicate) {
        this.predicate = predicate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tableName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tableName in model Office365DatasetTypeProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Office365DatasetTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("tableName", this.tableName);
        jsonWriter.writeUntypedField("predicate", this.predicate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Office365DatasetTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Office365DatasetTypeProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Office365DatasetTypeProperties.
     */
    public static Office365DatasetTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Office365DatasetTypeProperties deserializedOffice365DatasetTypeProperties
                = new Office365DatasetTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tableName".equals(fieldName)) {
                    deserializedOffice365DatasetTypeProperties.tableName = reader.readUntyped();
                } else if ("predicate".equals(fieldName)) {
                    deserializedOffice365DatasetTypeProperties.predicate = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOffice365DatasetTypeProperties;
        });
    }
}
