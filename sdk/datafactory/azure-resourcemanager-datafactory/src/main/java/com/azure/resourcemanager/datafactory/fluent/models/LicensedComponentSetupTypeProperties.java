// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import java.io.IOException;

/**
 * Installation of licensed component setup type properties.
 */
@Fluent
public final class LicensedComponentSetupTypeProperties
    implements JsonSerializable<LicensedComponentSetupTypeProperties> {
    /*
     * The name of the 3rd party component.
     */
    private String componentName;

    /*
     * The license key to activate the component.
     */
    private SecretBase licenseKey;

    /**
     * Creates an instance of LicensedComponentSetupTypeProperties class.
     */
    public LicensedComponentSetupTypeProperties() {
    }

    /**
     * Get the componentName property: The name of the 3rd party component.
     * 
     * @return the componentName value.
     */
    public String componentName() {
        return this.componentName;
    }

    /**
     * Set the componentName property: The name of the 3rd party component.
     * 
     * @param componentName the componentName value to set.
     * @return the LicensedComponentSetupTypeProperties object itself.
     */
    public LicensedComponentSetupTypeProperties withComponentName(String componentName) {
        this.componentName = componentName;
        return this;
    }

    /**
     * Get the licenseKey property: The license key to activate the component.
     * 
     * @return the licenseKey value.
     */
    public SecretBase licenseKey() {
        return this.licenseKey;
    }

    /**
     * Set the licenseKey property: The license key to activate the component.
     * 
     * @param licenseKey the licenseKey value to set.
     * @return the LicensedComponentSetupTypeProperties object itself.
     */
    public LicensedComponentSetupTypeProperties withLicenseKey(SecretBase licenseKey) {
        this.licenseKey = licenseKey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (componentName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property componentName in model LicensedComponentSetupTypeProperties"));
        }
        if (licenseKey() != null) {
            licenseKey().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LicensedComponentSetupTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("componentName", this.componentName);
        jsonWriter.writeJsonField("licenseKey", this.licenseKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LicensedComponentSetupTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LicensedComponentSetupTypeProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LicensedComponentSetupTypeProperties.
     */
    public static LicensedComponentSetupTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LicensedComponentSetupTypeProperties deserializedLicensedComponentSetupTypeProperties
                = new LicensedComponentSetupTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("componentName".equals(fieldName)) {
                    deserializedLicensedComponentSetupTypeProperties.componentName = reader.getString();
                } else if ("licenseKey".equals(fieldName)) {
                    deserializedLicensedComponentSetupTypeProperties.licenseKey = SecretBase.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLicensedComponentSetupTypeProperties;
        });
    }
}
