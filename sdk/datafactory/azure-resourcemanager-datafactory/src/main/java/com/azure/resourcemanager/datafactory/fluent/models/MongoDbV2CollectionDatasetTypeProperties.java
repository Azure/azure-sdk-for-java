// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * MongoDB database dataset properties.
 */
@Fluent
public final class MongoDbV2CollectionDatasetTypeProperties
    implements JsonSerializable<MongoDbV2CollectionDatasetTypeProperties> {
    /*
     * The collection name of the MongoDB database. Type: string (or Expression with resultType string).
     */
    private Object collection;

    /**
     * Creates an instance of MongoDbV2CollectionDatasetTypeProperties class.
     */
    public MongoDbV2CollectionDatasetTypeProperties() {
    }

    /**
     * Get the collection property: The collection name of the MongoDB database. Type: string (or Expression with
     * resultType string).
     * 
     * @return the collection value.
     */
    public Object collection() {
        return this.collection;
    }

    /**
     * Set the collection property: The collection name of the MongoDB database. Type: string (or Expression with
     * resultType string).
     * 
     * @param collection the collection value to set.
     * @return the MongoDbV2CollectionDatasetTypeProperties object itself.
     */
    public MongoDbV2CollectionDatasetTypeProperties withCollection(Object collection) {
        this.collection = collection;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (collection() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property collection in model MongoDbV2CollectionDatasetTypeProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MongoDbV2CollectionDatasetTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("collection", this.collection);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoDbV2CollectionDatasetTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoDbV2CollectionDatasetTypeProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MongoDbV2CollectionDatasetTypeProperties.
     */
    public static MongoDbV2CollectionDatasetTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoDbV2CollectionDatasetTypeProperties deserializedMongoDbV2CollectionDatasetTypeProperties
                = new MongoDbV2CollectionDatasetTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("collection".equals(fieldName)) {
                    deserializedMongoDbV2CollectionDatasetTypeProperties.collection = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoDbV2CollectionDatasetTypeProperties;
        });
    }
}
