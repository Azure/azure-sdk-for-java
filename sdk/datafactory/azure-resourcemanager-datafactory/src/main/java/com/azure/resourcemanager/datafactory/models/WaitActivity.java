// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** This activity suspends pipeline execution for the specified interval. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("Wait")
@JsonFlatten
@Fluent
public class WaitActivity extends ControlActivity {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(WaitActivity.class);

    /*
     * Duration in seconds.
     */
    @JsonProperty(value = "typeProperties.waitTimeInSeconds", required = true)
    private Object waitTimeInSeconds;

    /**
     * Get the waitTimeInSeconds property: Duration in seconds.
     *
     * @return the waitTimeInSeconds value.
     */
    public Object waitTimeInSeconds() {
        return this.waitTimeInSeconds;
    }

    /**
     * Set the waitTimeInSeconds property: Duration in seconds.
     *
     * @param waitTimeInSeconds the waitTimeInSeconds value to set.
     * @return the WaitActivity object itself.
     */
    public WaitActivity withWaitTimeInSeconds(Object waitTimeInSeconds) {
        this.waitTimeInSeconds = waitTimeInSeconds;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public WaitActivity withName(String name) {
        super.withName(name);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public WaitActivity withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public WaitActivity withDependsOn(List<ActivityDependency> dependsOn) {
        super.withDependsOn(dependsOn);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public WaitActivity withUserProperties(List<UserProperty> userProperties) {
        super.withUserProperties(userProperties);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (waitTimeInSeconds() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property waitTimeInSeconds in model WaitActivity"));
        }
    }
}
