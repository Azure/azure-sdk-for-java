// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeAutoUpdate;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeInternalChannelEncryptionMode;
import com.azure.resourcemanager.datafactory.models.LinkedIntegrationRuntime;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Self-hosted integration runtime status type properties.
 */
@Fluent
public final class SelfHostedIntegrationRuntimeStatusTypeProperties
    implements JsonSerializable<SelfHostedIntegrationRuntimeStatusTypeProperties> {
    /*
     * The time at which the integration runtime was created, in ISO8601 format.
     */
    private OffsetDateTime createTime;

    /*
     * The task queue id of the integration runtime.
     */
    private String taskQueueId;

    /*
     * It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted
     * integration runtime nodes exist).
     */
    private IntegrationRuntimeInternalChannelEncryptionMode internalChannelEncryption;

    /*
     * Version of the integration runtime.
     */
    private String version;

    /*
     * The list of nodes for this integration runtime.
     */
    private List<SelfHostedIntegrationRuntimeNodeInner> nodes;

    /*
     * The date at which the integration runtime will be scheduled to update, in ISO8601 format.
     */
    private OffsetDateTime scheduledUpdateDate;

    /*
     * The time in the date scheduled by service to update the integration runtime, e.g., PT03H is 3 hours
     */
    private String updateDelayOffset;

    /*
     * The local time zone offset in hours.
     */
    private String localTimeZoneOffset;

    /*
     * Object with additional information about integration runtime capabilities.
     */
    private Map<String, String> capabilities;

    /*
     * The URLs for the services used in integration runtime backend service.
     */
    private List<String> serviceUrls;

    /*
     * Whether Self-hosted integration runtime auto update has been turned on.
     */
    private IntegrationRuntimeAutoUpdate autoUpdate;

    /*
     * Status of the integration runtime version.
     */
    private String versionStatus;

    /*
     * The list of linked integration runtimes that are created to share with this integration runtime.
     */
    private List<LinkedIntegrationRuntime> links;

    /*
     * The version that the integration runtime is going to update to.
     */
    private String pushedVersion;

    /*
     * The latest version on download center.
     */
    private String latestVersion;

    /*
     * The estimated time when the self-hosted integration runtime will be updated.
     */
    private OffsetDateTime autoUpdateEta;

    /*
     * An alternative option to ensure interactive authoring function when your self-hosted integration runtime is
     * unable to establish a connection with Azure Relay.
     */
    private Boolean selfContainedInteractiveAuthoringEnabled;

    /**
     * Creates an instance of SelfHostedIntegrationRuntimeStatusTypeProperties class.
     */
    public SelfHostedIntegrationRuntimeStatusTypeProperties() {
    }

    /**
     * Get the createTime property: The time at which the integration runtime was created, in ISO8601 format.
     * 
     * @return the createTime value.
     */
    public OffsetDateTime createTime() {
        return this.createTime;
    }

    /**
     * Get the taskQueueId property: The task queue id of the integration runtime.
     * 
     * @return the taskQueueId value.
     */
    public String taskQueueId() {
        return this.taskQueueId;
    }

    /**
     * Get the internalChannelEncryption property: It is used to set the encryption mode for node-node communication
     * channel (when more than 2 self-hosted integration runtime nodes exist).
     * 
     * @return the internalChannelEncryption value.
     */
    public IntegrationRuntimeInternalChannelEncryptionMode internalChannelEncryption() {
        return this.internalChannelEncryption;
    }

    /**
     * Get the version property: Version of the integration runtime.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the nodes property: The list of nodes for this integration runtime.
     * 
     * @return the nodes value.
     */
    public List<SelfHostedIntegrationRuntimeNodeInner> nodes() {
        return this.nodes;
    }

    /**
     * Set the nodes property: The list of nodes for this integration runtime.
     * 
     * @param nodes the nodes value to set.
     * @return the SelfHostedIntegrationRuntimeStatusTypeProperties object itself.
     */
    public SelfHostedIntegrationRuntimeStatusTypeProperties
        withNodes(List<SelfHostedIntegrationRuntimeNodeInner> nodes) {
        this.nodes = nodes;
        return this;
    }

    /**
     * Get the scheduledUpdateDate property: The date at which the integration runtime will be scheduled to update, in
     * ISO8601 format.
     * 
     * @return the scheduledUpdateDate value.
     */
    public OffsetDateTime scheduledUpdateDate() {
        return this.scheduledUpdateDate;
    }

    /**
     * Get the updateDelayOffset property: The time in the date scheduled by service to update the integration runtime,
     * e.g., PT03H is 3 hours.
     * 
     * @return the updateDelayOffset value.
     */
    public String updateDelayOffset() {
        return this.updateDelayOffset;
    }

    /**
     * Get the localTimeZoneOffset property: The local time zone offset in hours.
     * 
     * @return the localTimeZoneOffset value.
     */
    public String localTimeZoneOffset() {
        return this.localTimeZoneOffset;
    }

    /**
     * Get the capabilities property: Object with additional information about integration runtime capabilities.
     * 
     * @return the capabilities value.
     */
    public Map<String, String> capabilities() {
        return this.capabilities;
    }

    /**
     * Get the serviceUrls property: The URLs for the services used in integration runtime backend service.
     * 
     * @return the serviceUrls value.
     */
    public List<String> serviceUrls() {
        return this.serviceUrls;
    }

    /**
     * Get the autoUpdate property: Whether Self-hosted integration runtime auto update has been turned on.
     * 
     * @return the autoUpdate value.
     */
    public IntegrationRuntimeAutoUpdate autoUpdate() {
        return this.autoUpdate;
    }

    /**
     * Get the versionStatus property: Status of the integration runtime version.
     * 
     * @return the versionStatus value.
     */
    public String versionStatus() {
        return this.versionStatus;
    }

    /**
     * Get the links property: The list of linked integration runtimes that are created to share with this integration
     * runtime.
     * 
     * @return the links value.
     */
    public List<LinkedIntegrationRuntime> links() {
        return this.links;
    }

    /**
     * Set the links property: The list of linked integration runtimes that are created to share with this integration
     * runtime.
     * 
     * @param links the links value to set.
     * @return the SelfHostedIntegrationRuntimeStatusTypeProperties object itself.
     */
    public SelfHostedIntegrationRuntimeStatusTypeProperties withLinks(List<LinkedIntegrationRuntime> links) {
        this.links = links;
        return this;
    }

    /**
     * Get the pushedVersion property: The version that the integration runtime is going to update to.
     * 
     * @return the pushedVersion value.
     */
    public String pushedVersion() {
        return this.pushedVersion;
    }

    /**
     * Get the latestVersion property: The latest version on download center.
     * 
     * @return the latestVersion value.
     */
    public String latestVersion() {
        return this.latestVersion;
    }

    /**
     * Get the autoUpdateEta property: The estimated time when the self-hosted integration runtime will be updated.
     * 
     * @return the autoUpdateEta value.
     */
    public OffsetDateTime autoUpdateEta() {
        return this.autoUpdateEta;
    }

    /**
     * Get the selfContainedInteractiveAuthoringEnabled property: An alternative option to ensure interactive authoring
     * function when your self-hosted integration runtime is unable to establish a connection with Azure Relay.
     * 
     * @return the selfContainedInteractiveAuthoringEnabled value.
     */
    public Boolean selfContainedInteractiveAuthoringEnabled() {
        return this.selfContainedInteractiveAuthoringEnabled;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nodes() != null) {
            nodes().forEach(e -> e.validate());
        }
        if (links() != null) {
            links().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("nodes", this.nodes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SelfHostedIntegrationRuntimeStatusTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SelfHostedIntegrationRuntimeStatusTypeProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SelfHostedIntegrationRuntimeStatusTypeProperties.
     */
    public static SelfHostedIntegrationRuntimeStatusTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SelfHostedIntegrationRuntimeStatusTypeProperties deserializedSelfHostedIntegrationRuntimeStatusTypeProperties
                = new SelfHostedIntegrationRuntimeStatusTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("createTime".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.createTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("taskQueueId".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.taskQueueId = reader.getString();
                } else if ("internalChannelEncryption".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.internalChannelEncryption
                        = IntegrationRuntimeInternalChannelEncryptionMode.fromString(reader.getString());
                } else if ("version".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.version = reader.getString();
                } else if ("nodes".equals(fieldName)) {
                    List<SelfHostedIntegrationRuntimeNodeInner> nodes
                        = reader.readArray(reader1 -> SelfHostedIntegrationRuntimeNodeInner.fromJson(reader1));
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.nodes = nodes;
                } else if ("scheduledUpdateDate".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.scheduledUpdateDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updateDelayOffset".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.updateDelayOffset = reader.getString();
                } else if ("localTimeZoneOffset".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.localTimeZoneOffset
                        = reader.getString();
                } else if ("capabilities".equals(fieldName)) {
                    Map<String, String> capabilities = reader.readMap(reader1 -> reader1.getString());
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.capabilities = capabilities;
                } else if ("serviceUrls".equals(fieldName)) {
                    List<String> serviceUrls = reader.readArray(reader1 -> reader1.getString());
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.serviceUrls = serviceUrls;
                } else if ("autoUpdate".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.autoUpdate
                        = IntegrationRuntimeAutoUpdate.fromString(reader.getString());
                } else if ("versionStatus".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.versionStatus = reader.getString();
                } else if ("links".equals(fieldName)) {
                    List<LinkedIntegrationRuntime> links
                        = reader.readArray(reader1 -> LinkedIntegrationRuntime.fromJson(reader1));
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.links = links;
                } else if ("pushedVersion".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.pushedVersion = reader.getString();
                } else if ("latestVersion".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.latestVersion = reader.getString();
                } else if ("autoUpdateETA".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.autoUpdateEta = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("selfContainedInteractiveAuthoringEnabled".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeStatusTypeProperties.selfContainedInteractiveAuthoringEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSelfHostedIntegrationRuntimeStatusTypeProperties;
        });
    }
}
