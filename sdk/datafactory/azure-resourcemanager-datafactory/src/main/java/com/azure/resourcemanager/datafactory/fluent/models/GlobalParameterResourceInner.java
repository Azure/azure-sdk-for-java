// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SubResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.GlobalParameterSpecification;
import java.io.IOException;
import java.util.Map;

/**
 * Global parameters resource type.
 */
@Fluent
public final class GlobalParameterResourceInner extends SubResource {
    /*
     * Properties of the global parameter.
     */
    private Map<String, GlobalParameterSpecification> properties;

    /*
     * The resource name.
     */
    private String name;

    /*
     * The resource type.
     */
    private String type;

    /*
     * Etag identifies change in the resource.
     */
    private String etag;

    /**
     * Creates an instance of GlobalParameterResourceInner class.
     */
    public GlobalParameterResourceInner() {
    }

    /**
     * Get the properties property: Properties of the global parameter.
     * 
     * @return the properties value.
     */
    public Map<String, GlobalParameterSpecification> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Properties of the global parameter.
     * 
     * @param properties the properties value to set.
     * @return the GlobalParameterResourceInner object itself.
     */
    public GlobalParameterResourceInner withProperties(Map<String, GlobalParameterSpecification> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the name property: The resource name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The resource type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the etag property: Etag identifies change in the resource.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GlobalParameterResourceInner withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property properties in model GlobalParameterResourceInner"));
        } else {
            properties().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GlobalParameterResourceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", id());
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GlobalParameterResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GlobalParameterResourceInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GlobalParameterResourceInner.
     */
    public static GlobalParameterResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GlobalParameterResourceInner deserializedGlobalParameterResourceInner = new GlobalParameterResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedGlobalParameterResourceInner.withId(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    Map<String, GlobalParameterSpecification> properties
                        = reader.readMap(reader1 -> GlobalParameterSpecification.fromJson(reader1));
                    deserializedGlobalParameterResourceInner.properties = properties;
                } else if ("name".equals(fieldName)) {
                    deserializedGlobalParameterResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedGlobalParameterResourceInner.type = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedGlobalParameterResourceInner.etag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGlobalParameterResourceInner;
        });
    }
}
