// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Web table dataset properties.
 */
@Fluent
public final class WebTableDatasetTypeProperties implements JsonSerializable<WebTableDatasetTypeProperties> {
    /*
     * The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer),
     * minimum: 0.
     */
    private Object index;

    /*
     * The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType
     * string).
     */
    private Object path;

    /**
     * Creates an instance of WebTableDatasetTypeProperties class.
     */
    public WebTableDatasetTypeProperties() {
    }

    /**
     * Get the index property: The zero-based index of the table in the web page. Type: integer (or Expression with
     * resultType integer), minimum: 0.
     * 
     * @return the index value.
     */
    public Object index() {
        return this.index;
    }

    /**
     * Set the index property: The zero-based index of the table in the web page. Type: integer (or Expression with
     * resultType integer), minimum: 0.
     * 
     * @param index the index value to set.
     * @return the WebTableDatasetTypeProperties object itself.
     */
    public WebTableDatasetTypeProperties withIndex(Object index) {
        this.index = index;
        return this;
    }

    /**
     * Get the path property: The relative URL to the web page from the linked service URL. Type: string (or Expression
     * with resultType string).
     * 
     * @return the path value.
     */
    public Object path() {
        return this.path;
    }

    /**
     * Set the path property: The relative URL to the web page from the linked service URL. Type: string (or Expression
     * with resultType string).
     * 
     * @param path the path value to set.
     * @return the WebTableDatasetTypeProperties object itself.
     */
    public WebTableDatasetTypeProperties withPath(Object path) {
        this.path = path;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (index() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property index in model WebTableDatasetTypeProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WebTableDatasetTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("index", this.index);
        jsonWriter.writeUntypedField("path", this.path);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebTableDatasetTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebTableDatasetTypeProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WebTableDatasetTypeProperties.
     */
    public static WebTableDatasetTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebTableDatasetTypeProperties deserializedWebTableDatasetTypeProperties
                = new WebTableDatasetTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("index".equals(fieldName)) {
                    deserializedWebTableDatasetTypeProperties.index = reader.readUntyped();
                } else if ("path".equals(fieldName)) {
                    deserializedWebTableDatasetTypeProperties.path = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebTableDatasetTypeProperties;
        });
    }
}
