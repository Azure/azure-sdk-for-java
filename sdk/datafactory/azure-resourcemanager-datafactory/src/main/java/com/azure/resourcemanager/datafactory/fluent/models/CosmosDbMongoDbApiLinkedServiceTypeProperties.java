// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * CosmosDB (MongoDB API) linked service properties.
 */
@Fluent
public final class CosmosDbMongoDbApiLinkedServiceTypeProperties
    implements JsonSerializable<CosmosDbMongoDbApiLinkedServiceTypeProperties> {
    /*
     * Whether the CosmosDB (MongoDB API) server version is higher than 3.2. The default value is false. Type: boolean
     * (or Expression with resultType boolean).
     */
    private Object isServerVersionAbove32;

    /*
     * The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type:
     * string, SecureString or AzureKeyVaultSecretReference.
     */
    private Object connectionString;

    /*
     * The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with
     * resultType string).
     */
    private Object database;

    /**
     * Creates an instance of CosmosDbMongoDbApiLinkedServiceTypeProperties class.
     */
    public CosmosDbMongoDbApiLinkedServiceTypeProperties() {
    }

    /**
     * Get the isServerVersionAbove32 property: Whether the CosmosDB (MongoDB API) server version is higher than 3.2.
     * The default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     * @return the isServerVersionAbove32 value.
     */
    public Object isServerVersionAbove32() {
        return this.isServerVersionAbove32;
    }

    /**
     * Set the isServerVersionAbove32 property: Whether the CosmosDB (MongoDB API) server version is higher than 3.2.
     * The default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     * @param isServerVersionAbove32 the isServerVersionAbove32 value to set.
     * @return the CosmosDbMongoDbApiLinkedServiceTypeProperties object itself.
     */
    public CosmosDbMongoDbApiLinkedServiceTypeProperties withIsServerVersionAbove32(Object isServerVersionAbove32) {
        this.isServerVersionAbove32 = isServerVersionAbove32;
        return this;
    }

    /**
     * Get the connectionString property: The CosmosDB (MongoDB API) connection string. Type: string, SecureString or
     * AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
     * 
     * @return the connectionString value.
     */
    public Object connectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: The CosmosDB (MongoDB API) connection string. Type: string, SecureString or
     * AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
     * 
     * @param connectionString the connectionString value to set.
     * @return the CosmosDbMongoDbApiLinkedServiceTypeProperties object itself.
     */
    public CosmosDbMongoDbApiLinkedServiceTypeProperties withConnectionString(Object connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Get the database property: The name of the CosmosDB (MongoDB API) database that you want to access. Type: string
     * (or Expression with resultType string).
     * 
     * @return the database value.
     */
    public Object database() {
        return this.database;
    }

    /**
     * Set the database property: The name of the CosmosDB (MongoDB API) database that you want to access. Type: string
     * (or Expression with resultType string).
     * 
     * @param database the database value to set.
     * @return the CosmosDbMongoDbApiLinkedServiceTypeProperties object itself.
     */
    public CosmosDbMongoDbApiLinkedServiceTypeProperties withDatabase(Object database) {
        this.database = database;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectionString() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property connectionString in model CosmosDbMongoDbApiLinkedServiceTypeProperties"));
        }
        if (database() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property database in model CosmosDbMongoDbApiLinkedServiceTypeProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CosmosDbMongoDbApiLinkedServiceTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("connectionString", this.connectionString);
        jsonWriter.writeUntypedField("database", this.database);
        jsonWriter.writeUntypedField("isServerVersionAbove32", this.isServerVersionAbove32);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CosmosDbMongoDbApiLinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CosmosDbMongoDbApiLinkedServiceTypeProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CosmosDbMongoDbApiLinkedServiceTypeProperties.
     */
    public static CosmosDbMongoDbApiLinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CosmosDbMongoDbApiLinkedServiceTypeProperties deserializedCosmosDbMongoDbApiLinkedServiceTypeProperties
                = new CosmosDbMongoDbApiLinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectionString".equals(fieldName)) {
                    deserializedCosmosDbMongoDbApiLinkedServiceTypeProperties.connectionString = reader.readUntyped();
                } else if ("database".equals(fieldName)) {
                    deserializedCosmosDbMongoDbApiLinkedServiceTypeProperties.database = reader.readUntyped();
                } else if ("isServerVersionAbove32".equals(fieldName)) {
                    deserializedCosmosDbMongoDbApiLinkedServiceTypeProperties.isServerVersionAbove32
                        = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCosmosDbMongoDbApiLinkedServiceTypeProperties;
        });
    }
}
