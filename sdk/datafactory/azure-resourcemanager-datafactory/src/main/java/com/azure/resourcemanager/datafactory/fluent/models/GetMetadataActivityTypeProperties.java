// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.FormatReadSettings;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import java.io.IOException;
import java.util.List;

/**
 * GetMetadata activity properties.
 */
@Fluent
public final class GetMetadataActivityTypeProperties implements JsonSerializable<GetMetadataActivityTypeProperties> {
    /*
     * GetMetadata activity dataset reference.
     */
    private DatasetReference dataset;

    /*
     * Fields of metadata to get from dataset.
     */
    private List<Object> fieldList;

    /*
     * GetMetadata activity store settings.
     */
    private StoreReadSettings storeSettings;

    /*
     * GetMetadata activity format settings.
     */
    private FormatReadSettings formatSettings;

    /**
     * Creates an instance of GetMetadataActivityTypeProperties class.
     */
    public GetMetadataActivityTypeProperties() {
    }

    /**
     * Get the dataset property: GetMetadata activity dataset reference.
     * 
     * @return the dataset value.
     */
    public DatasetReference dataset() {
        return this.dataset;
    }

    /**
     * Set the dataset property: GetMetadata activity dataset reference.
     * 
     * @param dataset the dataset value to set.
     * @return the GetMetadataActivityTypeProperties object itself.
     */
    public GetMetadataActivityTypeProperties withDataset(DatasetReference dataset) {
        this.dataset = dataset;
        return this;
    }

    /**
     * Get the fieldList property: Fields of metadata to get from dataset.
     * 
     * @return the fieldList value.
     */
    public List<Object> fieldList() {
        return this.fieldList;
    }

    /**
     * Set the fieldList property: Fields of metadata to get from dataset.
     * 
     * @param fieldList the fieldList value to set.
     * @return the GetMetadataActivityTypeProperties object itself.
     */
    public GetMetadataActivityTypeProperties withFieldList(List<Object> fieldList) {
        this.fieldList = fieldList;
        return this;
    }

    /**
     * Get the storeSettings property: GetMetadata activity store settings.
     * 
     * @return the storeSettings value.
     */
    public StoreReadSettings storeSettings() {
        return this.storeSettings;
    }

    /**
     * Set the storeSettings property: GetMetadata activity store settings.
     * 
     * @param storeSettings the storeSettings value to set.
     * @return the GetMetadataActivityTypeProperties object itself.
     */
    public GetMetadataActivityTypeProperties withStoreSettings(StoreReadSettings storeSettings) {
        this.storeSettings = storeSettings;
        return this;
    }

    /**
     * Get the formatSettings property: GetMetadata activity format settings.
     * 
     * @return the formatSettings value.
     */
    public FormatReadSettings formatSettings() {
        return this.formatSettings;
    }

    /**
     * Set the formatSettings property: GetMetadata activity format settings.
     * 
     * @param formatSettings the formatSettings value to set.
     * @return the GetMetadataActivityTypeProperties object itself.
     */
    public GetMetadataActivityTypeProperties withFormatSettings(FormatReadSettings formatSettings) {
        this.formatSettings = formatSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataset() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataset in model GetMetadataActivityTypeProperties"));
        } else {
            dataset().validate();
        }
        if (storeSettings() != null) {
            storeSettings().validate();
        }
        if (formatSettings() != null) {
            formatSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GetMetadataActivityTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("dataset", this.dataset);
        jsonWriter.writeArrayField("fieldList", this.fieldList, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeJsonField("storeSettings", this.storeSettings);
        jsonWriter.writeJsonField("formatSettings", this.formatSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetMetadataActivityTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetMetadataActivityTypeProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GetMetadataActivityTypeProperties.
     */
    public static GetMetadataActivityTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetMetadataActivityTypeProperties deserializedGetMetadataActivityTypeProperties
                = new GetMetadataActivityTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataset".equals(fieldName)) {
                    deserializedGetMetadataActivityTypeProperties.dataset = DatasetReference.fromJson(reader);
                } else if ("fieldList".equals(fieldName)) {
                    List<Object> fieldList = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedGetMetadataActivityTypeProperties.fieldList = fieldList;
                } else if ("storeSettings".equals(fieldName)) {
                    deserializedGetMetadataActivityTypeProperties.storeSettings = StoreReadSettings.fromJson(reader);
                } else if ("formatSettings".equals(fieldName)) {
                    deserializedGetMetadataActivityTypeProperties.formatSettings = FormatReadSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGetMetadataActivityTypeProperties;
        });
    }
}
