// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.AzureKeyVaultSecretReference;
import com.azure.resourcemanager.datafactory.models.AzureSqlMIAuthenticationType;
import com.azure.resourcemanager.datafactory.models.CredentialReference;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import com.azure.resourcemanager.datafactory.models.SqlAlwaysEncryptedProperties;
import com.azure.resourcemanager.datafactory.models.SqlServerBaseLinkedServiceTypeProperties;
import java.io.IOException;

/**
 * Azure SQL Managed Instance linked service properties.
 */
@Fluent
public final class AzureSqlMILinkedServiceTypeProperties extends SqlServerBaseLinkedServiceTypeProperties {
    /*
     * The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     */
    private Object connectionString;

    /*
     * The type used for authentication. Type: string.
     */
    private AzureSqlMIAuthenticationType authenticationType;

    /*
     * The user name to be used when connecting to server. Type: string (or Expression with resultType string).
     */
    private Object username;

    /*
     * The Azure key vault secret reference of password in connection string.
     */
    private AzureKeyVaultSecretReference password;

    /*
     * The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or
     * Expression with resultType string).
     */
    private Object servicePrincipalId;

    /*
     * The key of the service principal used to authenticate against Azure SQL Managed Instance.
     */
    private SecretBase servicePrincipalKey;

    /*
     * The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for
     * key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
     */
    private Object servicePrincipalCredentialType;

    /*
     * The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is
     * 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If
     * servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be
     * AzureKeyVaultSecretReference.
     */
    private SecretBase servicePrincipalCredential;

    /*
     * The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType
     * string).
     */
    private Object tenant;

    /*
     * Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina,
     * AzureUsGovernment, AzureGermany. Default value is the data factory regionsâ€™ cloud type. Type: string (or
     * Expression with resultType string).
     */
    private Object azureCloudType;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime
     * credential manager. Type: string.
     */
    private String encryptedCredential;

    /*
     * Sql always encrypted properties.
     */
    private SqlAlwaysEncryptedProperties alwaysEncryptedSettings;

    /*
     * The credential reference containing authentication information.
     */
    private CredentialReference credential;

    /**
     * Creates an instance of AzureSqlMILinkedServiceTypeProperties class.
     */
    public AzureSqlMILinkedServiceTypeProperties() {
    }

    /**
     * Get the connectionString property: The connection string. Type: string, SecureString or
     * AzureKeyVaultSecretReference.
     * 
     * @return the connectionString value.
     */
    public Object connectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: The connection string. Type: string, SecureString or
     * AzureKeyVaultSecretReference.
     * 
     * @param connectionString the connectionString value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties withConnectionString(Object connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Get the authenticationType property: The type used for authentication. Type: string.
     * 
     * @return the authenticationType value.
     */
    public AzureSqlMIAuthenticationType authenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: The type used for authentication. Type: string.
     * 
     * @param authenticationType the authenticationType value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties
        withAuthenticationType(AzureSqlMIAuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get the username property: The user name to be used when connecting to server. Type: string (or Expression with
     * resultType string).
     * 
     * @return the username value.
     */
    public Object username() {
        return this.username;
    }

    /**
     * Set the username property: The user name to be used when connecting to server. Type: string (or Expression with
     * resultType string).
     * 
     * @param username the username value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties withUsername(Object username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: The Azure key vault secret reference of password in connection string.
     * 
     * @return the password value.
     */
    public AzureKeyVaultSecretReference password() {
        return this.password;
    }

    /**
     * Set the password property: The Azure key vault secret reference of password in connection string.
     * 
     * @param password the password value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties withPassword(AzureKeyVaultSecretReference password) {
        this.password = password;
        return this;
    }

    /**
     * Get the servicePrincipalId property: The ID of the service principal used to authenticate against Azure SQL
     * Managed Instance. Type: string (or Expression with resultType string).
     * 
     * @return the servicePrincipalId value.
     */
    public Object servicePrincipalId() {
        return this.servicePrincipalId;
    }

    /**
     * Set the servicePrincipalId property: The ID of the service principal used to authenticate against Azure SQL
     * Managed Instance. Type: string (or Expression with resultType string).
     * 
     * @param servicePrincipalId the servicePrincipalId value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties withServicePrincipalId(Object servicePrincipalId) {
        this.servicePrincipalId = servicePrincipalId;
        return this;
    }

    /**
     * Get the servicePrincipalKey property: The key of the service principal used to authenticate against Azure SQL
     * Managed Instance.
     * 
     * @return the servicePrincipalKey value.
     */
    public SecretBase servicePrincipalKey() {
        return this.servicePrincipalKey;
    }

    /**
     * Set the servicePrincipalKey property: The key of the service principal used to authenticate against Azure SQL
     * Managed Instance.
     * 
     * @param servicePrincipalKey the servicePrincipalKey value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties withServicePrincipalKey(SecretBase servicePrincipalKey) {
        this.servicePrincipalKey = servicePrincipalKey;
        return this;
    }

    /**
     * Get the servicePrincipalCredentialType property: The service principal credential type to use in Server-To-Server
     * authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or
     * Expression with resultType string).
     * 
     * @return the servicePrincipalCredentialType value.
     */
    public Object servicePrincipalCredentialType() {
        return this.servicePrincipalCredentialType;
    }

    /**
     * Set the servicePrincipalCredentialType property: The service principal credential type to use in Server-To-Server
     * authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or
     * Expression with resultType string).
     * 
     * @param servicePrincipalCredentialType the servicePrincipalCredentialType value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties
        withServicePrincipalCredentialType(Object servicePrincipalCredentialType) {
        this.servicePrincipalCredentialType = servicePrincipalCredentialType;
        return this;
    }

    /**
     * Get the servicePrincipalCredential property: The credential of the service principal object in Azure Active
     * Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be
     * SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert',
     * servicePrincipalCredential can only be AzureKeyVaultSecretReference.
     * 
     * @return the servicePrincipalCredential value.
     */
    public SecretBase servicePrincipalCredential() {
        return this.servicePrincipalCredential;
    }

    /**
     * Set the servicePrincipalCredential property: The credential of the service principal object in Azure Active
     * Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be
     * SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert',
     * servicePrincipalCredential can only be AzureKeyVaultSecretReference.
     * 
     * @param servicePrincipalCredential the servicePrincipalCredential value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties withServicePrincipalCredential(SecretBase servicePrincipalCredential) {
        this.servicePrincipalCredential = servicePrincipalCredential;
        return this;
    }

    /**
     * Get the tenant property: The name or ID of the tenant to which the service principal belongs. Type: string (or
     * Expression with resultType string).
     * 
     * @return the tenant value.
     */
    public Object tenant() {
        return this.tenant;
    }

    /**
     * Set the tenant property: The name or ID of the tenant to which the service principal belongs. Type: string (or
     * Expression with resultType string).
     * 
     * @param tenant the tenant value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties withTenant(Object tenant) {
        this.tenant = tenant;
        return this;
    }

    /**
     * Get the azureCloudType property: Indicates the azure cloud type of the service principle auth. Allowed values are
     * AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regionsâ€™ cloud type.
     * Type: string (or Expression with resultType string).
     * 
     * @return the azureCloudType value.
     */
    public Object azureCloudType() {
        return this.azureCloudType;
    }

    /**
     * Set the azureCloudType property: Indicates the azure cloud type of the service principle auth. Allowed values are
     * AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regionsâ€™ cloud type.
     * Type: string (or Expression with resultType string).
     * 
     * @param azureCloudType the azureCloudType value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties withAzureCloudType(Object azureCloudType) {
        this.azureCloudType = azureCloudType;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @return the encryptedCredential value.
     */
    public String encryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties withEncryptedCredential(String encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Get the alwaysEncryptedSettings property: Sql always encrypted properties.
     * 
     * @return the alwaysEncryptedSettings value.
     */
    public SqlAlwaysEncryptedProperties alwaysEncryptedSettings() {
        return this.alwaysEncryptedSettings;
    }

    /**
     * Set the alwaysEncryptedSettings property: Sql always encrypted properties.
     * 
     * @param alwaysEncryptedSettings the alwaysEncryptedSettings value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties
        withAlwaysEncryptedSettings(SqlAlwaysEncryptedProperties alwaysEncryptedSettings) {
        this.alwaysEncryptedSettings = alwaysEncryptedSettings;
        return this;
    }

    /**
     * Get the credential property: The credential reference containing authentication information.
     * 
     * @return the credential value.
     */
    public CredentialReference credential() {
        return this.credential;
    }

    /**
     * Set the credential property: The credential reference containing authentication information.
     * 
     * @param credential the credential value to set.
     * @return the AzureSqlMILinkedServiceTypeProperties object itself.
     */
    public AzureSqlMILinkedServiceTypeProperties withCredential(CredentialReference credential) {
        this.credential = credential;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withServer(Object server) {
        super.withServer(server);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withDatabase(Object database) {
        super.withDatabase(database);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withEncrypt(Object encrypt) {
        super.withEncrypt(encrypt);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withTrustServerCertificate(Object trustServerCertificate) {
        super.withTrustServerCertificate(trustServerCertificate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withHostnameInCertificate(Object hostnameInCertificate) {
        super.withHostnameInCertificate(hostnameInCertificate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withApplicationIntent(Object applicationIntent) {
        super.withApplicationIntent(applicationIntent);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withConnectTimeout(Object connectTimeout) {
        super.withConnectTimeout(connectTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withConnectRetryCount(Object connectRetryCount) {
        super.withConnectRetryCount(connectRetryCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withConnectRetryInterval(Object connectRetryInterval) {
        super.withConnectRetryInterval(connectRetryInterval);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withLoadBalanceTimeout(Object loadBalanceTimeout) {
        super.withLoadBalanceTimeout(loadBalanceTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withCommandTimeout(Object commandTimeout) {
        super.withCommandTimeout(commandTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withIntegratedSecurity(Object integratedSecurity) {
        super.withIntegratedSecurity(integratedSecurity);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withFailoverPartner(Object failoverPartner) {
        super.withFailoverPartner(failoverPartner);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withMaxPoolSize(Object maxPoolSize) {
        super.withMaxPoolSize(maxPoolSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withMinPoolSize(Object minPoolSize) {
        super.withMinPoolSize(minPoolSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withMultipleActiveResultSets(Object multipleActiveResultSets) {
        super.withMultipleActiveResultSets(multipleActiveResultSets);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withMultiSubnetFailover(Object multiSubnetFailover) {
        super.withMultiSubnetFailover(multiSubnetFailover);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withPacketSize(Object packetSize) {
        super.withPacketSize(packetSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureSqlMILinkedServiceTypeProperties withPooling(Object pooling) {
        super.withPooling(pooling);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (password() != null) {
            password().validate();
        }
        if (servicePrincipalKey() != null) {
            servicePrincipalKey().validate();
        }
        if (servicePrincipalCredential() != null) {
            servicePrincipalCredential().validate();
        }
        if (alwaysEncryptedSettings() != null) {
            alwaysEncryptedSettings().validate();
        }
        if (credential() != null) {
            credential().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("server", server());
        jsonWriter.writeUntypedField("database", database());
        jsonWriter.writeUntypedField("encrypt", encrypt());
        jsonWriter.writeUntypedField("trustServerCertificate", trustServerCertificate());
        jsonWriter.writeUntypedField("hostNameInCertificate", hostnameInCertificate());
        jsonWriter.writeUntypedField("applicationIntent", applicationIntent());
        jsonWriter.writeUntypedField("connectTimeout", connectTimeout());
        jsonWriter.writeUntypedField("connectRetryCount", connectRetryCount());
        jsonWriter.writeUntypedField("connectRetryInterval", connectRetryInterval());
        jsonWriter.writeUntypedField("loadBalanceTimeout", loadBalanceTimeout());
        jsonWriter.writeUntypedField("commandTimeout", commandTimeout());
        jsonWriter.writeUntypedField("integratedSecurity", integratedSecurity());
        jsonWriter.writeUntypedField("failoverPartner", failoverPartner());
        jsonWriter.writeUntypedField("maxPoolSize", maxPoolSize());
        jsonWriter.writeUntypedField("minPoolSize", minPoolSize());
        jsonWriter.writeUntypedField("multipleActiveResultSets", multipleActiveResultSets());
        jsonWriter.writeUntypedField("multiSubnetFailover", multiSubnetFailover());
        jsonWriter.writeUntypedField("packetSize", packetSize());
        jsonWriter.writeUntypedField("pooling", pooling());
        jsonWriter.writeUntypedField("connectionString", this.connectionString);
        jsonWriter.writeStringField("authenticationType",
            this.authenticationType == null ? null : this.authenticationType.toString());
        jsonWriter.writeUntypedField("userName", this.username);
        jsonWriter.writeJsonField("password", this.password);
        jsonWriter.writeUntypedField("servicePrincipalId", this.servicePrincipalId);
        jsonWriter.writeJsonField("servicePrincipalKey", this.servicePrincipalKey);
        jsonWriter.writeUntypedField("servicePrincipalCredentialType", this.servicePrincipalCredentialType);
        jsonWriter.writeJsonField("servicePrincipalCredential", this.servicePrincipalCredential);
        jsonWriter.writeUntypedField("tenant", this.tenant);
        jsonWriter.writeUntypedField("azureCloudType", this.azureCloudType);
        jsonWriter.writeStringField("encryptedCredential", this.encryptedCredential);
        jsonWriter.writeJsonField("alwaysEncryptedSettings", this.alwaysEncryptedSettings);
        jsonWriter.writeJsonField("credential", this.credential);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureSqlMILinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureSqlMILinkedServiceTypeProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureSqlMILinkedServiceTypeProperties.
     */
    public static AzureSqlMILinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureSqlMILinkedServiceTypeProperties deserializedAzureSqlMILinkedServiceTypeProperties
                = new AzureSqlMILinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("server".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withServer(reader.readUntyped());
                } else if ("database".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withDatabase(reader.readUntyped());
                } else if ("encrypt".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withEncrypt(reader.readUntyped());
                } else if ("trustServerCertificate".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withTrustServerCertificate(reader.readUntyped());
                } else if ("hostNameInCertificate".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withHostnameInCertificate(reader.readUntyped());
                } else if ("applicationIntent".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withApplicationIntent(reader.readUntyped());
                } else if ("connectTimeout".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withConnectTimeout(reader.readUntyped());
                } else if ("connectRetryCount".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withConnectRetryCount(reader.readUntyped());
                } else if ("connectRetryInterval".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withConnectRetryInterval(reader.readUntyped());
                } else if ("loadBalanceTimeout".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withLoadBalanceTimeout(reader.readUntyped());
                } else if ("commandTimeout".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withCommandTimeout(reader.readUntyped());
                } else if ("integratedSecurity".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withIntegratedSecurity(reader.readUntyped());
                } else if ("failoverPartner".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withFailoverPartner(reader.readUntyped());
                } else if ("maxPoolSize".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withMaxPoolSize(reader.readUntyped());
                } else if ("minPoolSize".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withMinPoolSize(reader.readUntyped());
                } else if ("multipleActiveResultSets".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties
                        .withMultipleActiveResultSets(reader.readUntyped());
                } else if ("multiSubnetFailover".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withMultiSubnetFailover(reader.readUntyped());
                } else if ("packetSize".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withPacketSize(reader.readUntyped());
                } else if ("pooling".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.withPooling(reader.readUntyped());
                } else if ("connectionString".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.connectionString = reader.readUntyped();
                } else if ("authenticationType".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.authenticationType
                        = AzureSqlMIAuthenticationType.fromString(reader.getString());
                } else if ("userName".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.username = reader.readUntyped();
                } else if ("password".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.password
                        = AzureKeyVaultSecretReference.fromJson(reader);
                } else if ("servicePrincipalId".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.servicePrincipalId = reader.readUntyped();
                } else if ("servicePrincipalKey".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.servicePrincipalKey = SecretBase.fromJson(reader);
                } else if ("servicePrincipalCredentialType".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.servicePrincipalCredentialType
                        = reader.readUntyped();
                } else if ("servicePrincipalCredential".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.servicePrincipalCredential
                        = SecretBase.fromJson(reader);
                } else if ("tenant".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.tenant = reader.readUntyped();
                } else if ("azureCloudType".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.azureCloudType = reader.readUntyped();
                } else if ("encryptedCredential".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.encryptedCredential = reader.getString();
                } else if ("alwaysEncryptedSettings".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.alwaysEncryptedSettings
                        = SqlAlwaysEncryptedProperties.fromJson(reader);
                } else if ("credential".equals(fieldName)) {
                    deserializedAzureSqlMILinkedServiceTypeProperties.credential = CredentialReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureSqlMILinkedServiceTypeProperties;
        });
    }
}
