// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.GoogleBigQueryAuthenticationType;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import java.io.IOException;

/**
 * Google BigQuery service linked service properties.
 */
@Fluent
public final class GoogleBigQueryLinkedServiceTypeProperties
    implements JsonSerializable<GoogleBigQueryLinkedServiceTypeProperties> {
    /*
     * The default BigQuery project to query against. Type: string (or Expression with resultType string).
     */
    private Object project;

    /*
     * A comma-separated list of public BigQuery projects to access. Type: string (or Expression with resultType
     * string).
     */
    private Object additionalProjects;

    /*
     * Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that
     * combine BigQuery data with data from Google Drive. The default value is false. Type: string (or Expression with
     * resultType string).
     */
    private Object requestGoogleDriveScope;

    /*
     * The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on
     * self-hosted IR.
     */
    private GoogleBigQueryAuthenticationType authenticationType;

    /*
     * The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
     */
    private SecretBase refreshToken;

    /*
     * The client id of the google application used to acquire the refresh token. Type: string (or Expression with
     * resultType string).
     */
    private Object clientId;

    /*
     * The client secret of the google application used to acquire the refresh token.
     */
    private SecretBase clientSecret;

    /*
     * The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type:
     * string (or Expression with resultType string).
     */
    private Object email;

    /*
     * The full path to the .p12 key file that is used to authenticate the service account email address and can only be
     * used on self-hosted IR. Type: string (or Expression with resultType string).
     */
    private Object keyFilePath;

    /*
     * The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over
     * SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file
     * installed with the IR. Type: string (or Expression with resultType string).
     */
    private Object trustedCertPath;

    /*
     * Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default
     * value is false.Type: boolean (or Expression with resultType boolean).
     */
    private Object useSystemTrustStore;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime
     * credential manager. Type: string.
     */
    private String encryptedCredential;

    /**
     * Creates an instance of GoogleBigQueryLinkedServiceTypeProperties class.
     */
    public GoogleBigQueryLinkedServiceTypeProperties() {
    }

    /**
     * Get the project property: The default BigQuery project to query against. Type: string (or Expression with
     * resultType string).
     * 
     * @return the project value.
     */
    public Object project() {
        return this.project;
    }

    /**
     * Set the project property: The default BigQuery project to query against. Type: string (or Expression with
     * resultType string).
     * 
     * @param project the project value to set.
     * @return the GoogleBigQueryLinkedServiceTypeProperties object itself.
     */
    public GoogleBigQueryLinkedServiceTypeProperties withProject(Object project) {
        this.project = project;
        return this;
    }

    /**
     * Get the additionalProjects property: A comma-separated list of public BigQuery projects to access. Type: string
     * (or Expression with resultType string).
     * 
     * @return the additionalProjects value.
     */
    public Object additionalProjects() {
        return this.additionalProjects;
    }

    /**
     * Set the additionalProjects property: A comma-separated list of public BigQuery projects to access. Type: string
     * (or Expression with resultType string).
     * 
     * @param additionalProjects the additionalProjects value to set.
     * @return the GoogleBigQueryLinkedServiceTypeProperties object itself.
     */
    public GoogleBigQueryLinkedServiceTypeProperties withAdditionalProjects(Object additionalProjects) {
        this.additionalProjects = additionalProjects;
        return this;
    }

    /**
     * Get the requestGoogleDriveScope property: Whether to request access to Google Drive. Allowing Google Drive access
     * enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is
     * false. Type: string (or Expression with resultType string).
     * 
     * @return the requestGoogleDriveScope value.
     */
    public Object requestGoogleDriveScope() {
        return this.requestGoogleDriveScope;
    }

    /**
     * Set the requestGoogleDriveScope property: Whether to request access to Google Drive. Allowing Google Drive access
     * enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is
     * false. Type: string (or Expression with resultType string).
     * 
     * @param requestGoogleDriveScope the requestGoogleDriveScope value to set.
     * @return the GoogleBigQueryLinkedServiceTypeProperties object itself.
     */
    public GoogleBigQueryLinkedServiceTypeProperties withRequestGoogleDriveScope(Object requestGoogleDriveScope) {
        this.requestGoogleDriveScope = requestGoogleDriveScope;
        return this;
    }

    /**
     * Get the authenticationType property: The OAuth 2.0 authentication mechanism used for authentication.
     * ServiceAuthentication can only be used on self-hosted IR.
     * 
     * @return the authenticationType value.
     */
    public GoogleBigQueryAuthenticationType authenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: The OAuth 2.0 authentication mechanism used for authentication.
     * ServiceAuthentication can only be used on self-hosted IR.
     * 
     * @param authenticationType the authenticationType value to set.
     * @return the GoogleBigQueryLinkedServiceTypeProperties object itself.
     */
    public GoogleBigQueryLinkedServiceTypeProperties
        withAuthenticationType(GoogleBigQueryAuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get the refreshToken property: The refresh token obtained from Google for authorizing access to BigQuery for
     * UserAuthentication.
     * 
     * @return the refreshToken value.
     */
    public SecretBase refreshToken() {
        return this.refreshToken;
    }

    /**
     * Set the refreshToken property: The refresh token obtained from Google for authorizing access to BigQuery for
     * UserAuthentication.
     * 
     * @param refreshToken the refreshToken value to set.
     * @return the GoogleBigQueryLinkedServiceTypeProperties object itself.
     */
    public GoogleBigQueryLinkedServiceTypeProperties withRefreshToken(SecretBase refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * Get the clientId property: The client id of the google application used to acquire the refresh token. Type:
     * string (or Expression with resultType string).
     * 
     * @return the clientId value.
     */
    public Object clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: The client id of the google application used to acquire the refresh token. Type:
     * string (or Expression with resultType string).
     * 
     * @param clientId the clientId value to set.
     * @return the GoogleBigQueryLinkedServiceTypeProperties object itself.
     */
    public GoogleBigQueryLinkedServiceTypeProperties withClientId(Object clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the clientSecret property: The client secret of the google application used to acquire the refresh token.
     * 
     * @return the clientSecret value.
     */
    public SecretBase clientSecret() {
        return this.clientSecret;
    }

    /**
     * Set the clientSecret property: The client secret of the google application used to acquire the refresh token.
     * 
     * @param clientSecret the clientSecret value to set.
     * @return the GoogleBigQueryLinkedServiceTypeProperties object itself.
     */
    public GoogleBigQueryLinkedServiceTypeProperties withClientSecret(SecretBase clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Get the email property: The service account email ID that is used for ServiceAuthentication and can only be used
     * on self-hosted IR. Type: string (or Expression with resultType string).
     * 
     * @return the email value.
     */
    public Object email() {
        return this.email;
    }

    /**
     * Set the email property: The service account email ID that is used for ServiceAuthentication and can only be used
     * on self-hosted IR. Type: string (or Expression with resultType string).
     * 
     * @param email the email value to set.
     * @return the GoogleBigQueryLinkedServiceTypeProperties object itself.
     */
    public GoogleBigQueryLinkedServiceTypeProperties withEmail(Object email) {
        this.email = email;
        return this;
    }

    /**
     * Get the keyFilePath property: The full path to the .p12 key file that is used to authenticate the service account
     * email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
     * 
     * @return the keyFilePath value.
     */
    public Object keyFilePath() {
        return this.keyFilePath;
    }

    /**
     * Set the keyFilePath property: The full path to the .p12 key file that is used to authenticate the service account
     * email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
     * 
     * @param keyFilePath the keyFilePath value to set.
     * @return the GoogleBigQueryLinkedServiceTypeProperties object itself.
     */
    public GoogleBigQueryLinkedServiceTypeProperties withKeyFilePath(Object keyFilePath) {
        this.keyFilePath = keyFilePath;
        return this;
    }

    /**
     * Get the trustedCertPath property: The full path of the .pem file containing trusted CA certificates for verifying
     * the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default
     * value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
     * 
     * @return the trustedCertPath value.
     */
    public Object trustedCertPath() {
        return this.trustedCertPath;
    }

    /**
     * Set the trustedCertPath property: The full path of the .pem file containing trusted CA certificates for verifying
     * the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default
     * value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
     * 
     * @param trustedCertPath the trustedCertPath value to set.
     * @return the GoogleBigQueryLinkedServiceTypeProperties object itself.
     */
    public GoogleBigQueryLinkedServiceTypeProperties withTrustedCertPath(Object trustedCertPath) {
        this.trustedCertPath = trustedCertPath;
        return this;
    }

    /**
     * Get the useSystemTrustStore property: Specifies whether to use a CA certificate from the system trust store or
     * from a specified PEM file. The default value is false.Type: boolean (or Expression with resultType boolean).
     * 
     * @return the useSystemTrustStore value.
     */
    public Object useSystemTrustStore() {
        return this.useSystemTrustStore;
    }

    /**
     * Set the useSystemTrustStore property: Specifies whether to use a CA certificate from the system trust store or
     * from a specified PEM file. The default value is false.Type: boolean (or Expression with resultType boolean).
     * 
     * @param useSystemTrustStore the useSystemTrustStore value to set.
     * @return the GoogleBigQueryLinkedServiceTypeProperties object itself.
     */
    public GoogleBigQueryLinkedServiceTypeProperties withUseSystemTrustStore(Object useSystemTrustStore) {
        this.useSystemTrustStore = useSystemTrustStore;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @return the encryptedCredential value.
     */
    public String encryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the GoogleBigQueryLinkedServiceTypeProperties object itself.
     */
    public GoogleBigQueryLinkedServiceTypeProperties withEncryptedCredential(String encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (project() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property project in model GoogleBigQueryLinkedServiceTypeProperties"));
        }
        if (authenticationType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authenticationType in model GoogleBigQueryLinkedServiceTypeProperties"));
        }
        if (refreshToken() != null) {
            refreshToken().validate();
        }
        if (clientSecret() != null) {
            clientSecret().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GoogleBigQueryLinkedServiceTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("project", this.project);
        jsonWriter.writeStringField("authenticationType",
            this.authenticationType == null ? null : this.authenticationType.toString());
        jsonWriter.writeUntypedField("additionalProjects", this.additionalProjects);
        jsonWriter.writeUntypedField("requestGoogleDriveScope", this.requestGoogleDriveScope);
        jsonWriter.writeJsonField("refreshToken", this.refreshToken);
        jsonWriter.writeUntypedField("clientId", this.clientId);
        jsonWriter.writeJsonField("clientSecret", this.clientSecret);
        jsonWriter.writeUntypedField("email", this.email);
        jsonWriter.writeUntypedField("keyFilePath", this.keyFilePath);
        jsonWriter.writeUntypedField("trustedCertPath", this.trustedCertPath);
        jsonWriter.writeUntypedField("useSystemTrustStore", this.useSystemTrustStore);
        jsonWriter.writeStringField("encryptedCredential", this.encryptedCredential);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GoogleBigQueryLinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GoogleBigQueryLinkedServiceTypeProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GoogleBigQueryLinkedServiceTypeProperties.
     */
    public static GoogleBigQueryLinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GoogleBigQueryLinkedServiceTypeProperties deserializedGoogleBigQueryLinkedServiceTypeProperties
                = new GoogleBigQueryLinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("project".equals(fieldName)) {
                    deserializedGoogleBigQueryLinkedServiceTypeProperties.project = reader.readUntyped();
                } else if ("authenticationType".equals(fieldName)) {
                    deserializedGoogleBigQueryLinkedServiceTypeProperties.authenticationType
                        = GoogleBigQueryAuthenticationType.fromString(reader.getString());
                } else if ("additionalProjects".equals(fieldName)) {
                    deserializedGoogleBigQueryLinkedServiceTypeProperties.additionalProjects = reader.readUntyped();
                } else if ("requestGoogleDriveScope".equals(fieldName)) {
                    deserializedGoogleBigQueryLinkedServiceTypeProperties.requestGoogleDriveScope
                        = reader.readUntyped();
                } else if ("refreshToken".equals(fieldName)) {
                    deserializedGoogleBigQueryLinkedServiceTypeProperties.refreshToken = SecretBase.fromJson(reader);
                } else if ("clientId".equals(fieldName)) {
                    deserializedGoogleBigQueryLinkedServiceTypeProperties.clientId = reader.readUntyped();
                } else if ("clientSecret".equals(fieldName)) {
                    deserializedGoogleBigQueryLinkedServiceTypeProperties.clientSecret = SecretBase.fromJson(reader);
                } else if ("email".equals(fieldName)) {
                    deserializedGoogleBigQueryLinkedServiceTypeProperties.email = reader.readUntyped();
                } else if ("keyFilePath".equals(fieldName)) {
                    deserializedGoogleBigQueryLinkedServiceTypeProperties.keyFilePath = reader.readUntyped();
                } else if ("trustedCertPath".equals(fieldName)) {
                    deserializedGoogleBigQueryLinkedServiceTypeProperties.trustedCertPath = reader.readUntyped();
                } else if ("useSystemTrustStore".equals(fieldName)) {
                    deserializedGoogleBigQueryLinkedServiceTypeProperties.useSystemTrustStore = reader.readUntyped();
                } else if ("encryptedCredential".equals(fieldName)) {
                    deserializedGoogleBigQueryLinkedServiceTypeProperties.encryptedCredential = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGoogleBigQueryLinkedServiceTypeProperties;
        });
    }
}
