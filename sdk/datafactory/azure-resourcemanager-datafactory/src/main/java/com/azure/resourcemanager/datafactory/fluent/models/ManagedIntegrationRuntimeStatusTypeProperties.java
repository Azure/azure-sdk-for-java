// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.ManagedIntegrationRuntimeError;
import com.azure.resourcemanager.datafactory.models.ManagedIntegrationRuntimeNode;
import com.azure.resourcemanager.datafactory.models.ManagedIntegrationRuntimeOperationResult;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Managed integration runtime status type properties.
 */
@Immutable
public final class ManagedIntegrationRuntimeStatusTypeProperties
    implements JsonSerializable<ManagedIntegrationRuntimeStatusTypeProperties> {
    /*
     * The time at which the integration runtime was created, in ISO8601 format.
     */
    private OffsetDateTime createTime;

    /*
     * The list of nodes for managed integration runtime.
     */
    private List<ManagedIntegrationRuntimeNode> nodes;

    /*
     * The errors that occurred on this integration runtime.
     */
    private List<ManagedIntegrationRuntimeError> otherErrors;

    /*
     * The last operation result that occurred on this integration runtime.
     */
    private ManagedIntegrationRuntimeOperationResult lastOperation;

    /**
     * Creates an instance of ManagedIntegrationRuntimeStatusTypeProperties class.
     */
    public ManagedIntegrationRuntimeStatusTypeProperties() {
    }

    /**
     * Get the createTime property: The time at which the integration runtime was created, in ISO8601 format.
     * 
     * @return the createTime value.
     */
    public OffsetDateTime createTime() {
        return this.createTime;
    }

    /**
     * Get the nodes property: The list of nodes for managed integration runtime.
     * 
     * @return the nodes value.
     */
    public List<ManagedIntegrationRuntimeNode> nodes() {
        return this.nodes;
    }

    /**
     * Get the otherErrors property: The errors that occurred on this integration runtime.
     * 
     * @return the otherErrors value.
     */
    public List<ManagedIntegrationRuntimeError> otherErrors() {
        return this.otherErrors;
    }

    /**
     * Get the lastOperation property: The last operation result that occurred on this integration runtime.
     * 
     * @return the lastOperation value.
     */
    public ManagedIntegrationRuntimeOperationResult lastOperation() {
        return this.lastOperation;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nodes() != null) {
            nodes().forEach(e -> e.validate());
        }
        if (otherErrors() != null) {
            otherErrors().forEach(e -> e.validate());
        }
        if (lastOperation() != null) {
            lastOperation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedIntegrationRuntimeStatusTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedIntegrationRuntimeStatusTypeProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedIntegrationRuntimeStatusTypeProperties.
     */
    public static ManagedIntegrationRuntimeStatusTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedIntegrationRuntimeStatusTypeProperties deserializedManagedIntegrationRuntimeStatusTypeProperties
                = new ManagedIntegrationRuntimeStatusTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("createTime".equals(fieldName)) {
                    deserializedManagedIntegrationRuntimeStatusTypeProperties.createTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("nodes".equals(fieldName)) {
                    List<ManagedIntegrationRuntimeNode> nodes
                        = reader.readArray(reader1 -> ManagedIntegrationRuntimeNode.fromJson(reader1));
                    deserializedManagedIntegrationRuntimeStatusTypeProperties.nodes = nodes;
                } else if ("otherErrors".equals(fieldName)) {
                    List<ManagedIntegrationRuntimeError> otherErrors
                        = reader.readArray(reader1 -> ManagedIntegrationRuntimeError.fromJson(reader1));
                    deserializedManagedIntegrationRuntimeStatusTypeProperties.otherErrors = otherErrors;
                } else if ("lastOperation".equals(fieldName)) {
                    deserializedManagedIntegrationRuntimeStatusTypeProperties.lastOperation
                        = ManagedIntegrationRuntimeOperationResult.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedIntegrationRuntimeStatusTypeProperties;
        });
    }
}
