// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** SQL stored procedure parameter. */
@Fluent
public final class StoredProcedureParameter {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(StoredProcedureParameter.class);

    /*
     * Stored procedure parameter value. Type: string (or Expression with
     * resultType string).
     */
    @JsonProperty(value = "value")
    private Object value;

    /*
     * Stored procedure parameter type.
     */
    @JsonProperty(value = "type")
    private StoredProcedureParameterType type;

    /**
     * Get the value property: Stored procedure parameter value. Type: string (or Expression with resultType string).
     *
     * @return the value value.
     */
    public Object value() {
        return this.value;
    }

    /**
     * Set the value property: Stored procedure parameter value. Type: string (or Expression with resultType string).
     *
     * @param value the value value to set.
     * @return the StoredProcedureParameter object itself.
     */
    public StoredProcedureParameter withValue(Object value) {
        this.value = value;
        return this;
    }

    /**
     * Get the type property: Stored procedure parameter type.
     *
     * @return the type value.
     */
    public StoredProcedureParameterType type() {
        return this.type;
    }

    /**
     * Set the type property: Stored procedure parameter type.
     *
     * @param type the type value to set.
     * @return the StoredProcedureParameter object itself.
     */
    public StoredProcedureParameter withType(StoredProcedureParameterType type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
