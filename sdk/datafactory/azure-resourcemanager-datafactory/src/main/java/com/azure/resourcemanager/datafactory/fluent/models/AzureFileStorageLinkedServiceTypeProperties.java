// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.AzureKeyVaultSecretReference;
import com.azure.resourcemanager.datafactory.models.CredentialReference;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import java.io.IOException;

/**
 * Azure File Storage linked service properties.
 */
@Fluent
public final class AzureFileStorageLinkedServiceTypeProperties
    implements JsonSerializable<AzureFileStorageLinkedServiceTypeProperties> {
    /*
     * Host name of the server. Type: string (or Expression with resultType string).
     */
    private Object host;

    /*
     * User ID to logon the server. Type: string (or Expression with resultType string).
     */
    private Object userId;

    /*
     * Password to logon the server.
     */
    private SecretBase password;

    /*
     * The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or
     * AzureKeyVaultSecretReference.
     */
    private Object connectionString;

    /*
     * The Azure key vault secret reference of accountKey in connection string.
     */
    private AzureKeyVaultSecretReference accountKey;

    /*
     * SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string,
     * SecureString or AzureKeyVaultSecretReference.
     */
    private Object sasUri;

    /*
     * The Azure key vault secret reference of sasToken in sas uri.
     */
    private AzureKeyVaultSecretReference sasToken;

    /*
     * The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with
     * resultType string).
     */
    private Object fileShare;

    /*
     * The azure file share snapshot version. Type: string (or Expression with resultType string).
     */
    private Object snapshot;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime
     * credential manager. Type: string.
     */
    private String encryptedCredential;

    /*
     * File service endpoint of the Azure File Storage resource. It is mutually exclusive with connectionString, sasUri
     * property.
     */
    private Object serviceEndpoint;

    /*
     * The credential reference containing authentication information.
     */
    private CredentialReference credential;

    /**
     * Creates an instance of AzureFileStorageLinkedServiceTypeProperties class.
     */
    public AzureFileStorageLinkedServiceTypeProperties() {
    }

    /**
     * Get the host property: Host name of the server. Type: string (or Expression with resultType string).
     * 
     * @return the host value.
     */
    public Object host() {
        return this.host;
    }

    /**
     * Set the host property: Host name of the server. Type: string (or Expression with resultType string).
     * 
     * @param host the host value to set.
     * @return the AzureFileStorageLinkedServiceTypeProperties object itself.
     */
    public AzureFileStorageLinkedServiceTypeProperties withHost(Object host) {
        this.host = host;
        return this;
    }

    /**
     * Get the userId property: User ID to logon the server. Type: string (or Expression with resultType string).
     * 
     * @return the userId value.
     */
    public Object userId() {
        return this.userId;
    }

    /**
     * Set the userId property: User ID to logon the server. Type: string (or Expression with resultType string).
     * 
     * @param userId the userId value to set.
     * @return the AzureFileStorageLinkedServiceTypeProperties object itself.
     */
    public AzureFileStorageLinkedServiceTypeProperties withUserId(Object userId) {
        this.userId = userId;
        return this;
    }

    /**
     * Get the password property: Password to logon the server.
     * 
     * @return the password value.
     */
    public SecretBase password() {
        return this.password;
    }

    /**
     * Set the password property: Password to logon the server.
     * 
     * @param password the password value to set.
     * @return the AzureFileStorageLinkedServiceTypeProperties object itself.
     */
    public AzureFileStorageLinkedServiceTypeProperties withPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * Get the connectionString property: The connection string. It is mutually exclusive with sasUri property. Type:
     * string, SecureString or AzureKeyVaultSecretReference.
     * 
     * @return the connectionString value.
     */
    public Object connectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: The connection string. It is mutually exclusive with sasUri property. Type:
     * string, SecureString or AzureKeyVaultSecretReference.
     * 
     * @param connectionString the connectionString value to set.
     * @return the AzureFileStorageLinkedServiceTypeProperties object itself.
     */
    public AzureFileStorageLinkedServiceTypeProperties withConnectionString(Object connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Get the accountKey property: The Azure key vault secret reference of accountKey in connection string.
     * 
     * @return the accountKey value.
     */
    public AzureKeyVaultSecretReference accountKey() {
        return this.accountKey;
    }

    /**
     * Set the accountKey property: The Azure key vault secret reference of accountKey in connection string.
     * 
     * @param accountKey the accountKey value to set.
     * @return the AzureFileStorageLinkedServiceTypeProperties object itself.
     */
    public AzureFileStorageLinkedServiceTypeProperties withAccountKey(AzureKeyVaultSecretReference accountKey) {
        this.accountKey = accountKey;
        return this;
    }

    /**
     * Get the sasUri property: SAS URI of the Azure File resource. It is mutually exclusive with connectionString
     * property. Type: string, SecureString or AzureKeyVaultSecretReference.
     * 
     * @return the sasUri value.
     */
    public Object sasUri() {
        return this.sasUri;
    }

    /**
     * Set the sasUri property: SAS URI of the Azure File resource. It is mutually exclusive with connectionString
     * property. Type: string, SecureString or AzureKeyVaultSecretReference.
     * 
     * @param sasUri the sasUri value to set.
     * @return the AzureFileStorageLinkedServiceTypeProperties object itself.
     */
    public AzureFileStorageLinkedServiceTypeProperties withSasUri(Object sasUri) {
        this.sasUri = sasUri;
        return this;
    }

    /**
     * Get the sasToken property: The Azure key vault secret reference of sasToken in sas uri.
     * 
     * @return the sasToken value.
     */
    public AzureKeyVaultSecretReference sasToken() {
        return this.sasToken;
    }

    /**
     * Set the sasToken property: The Azure key vault secret reference of sasToken in sas uri.
     * 
     * @param sasToken the sasToken value to set.
     * @return the AzureFileStorageLinkedServiceTypeProperties object itself.
     */
    public AzureFileStorageLinkedServiceTypeProperties withSasToken(AzureKeyVaultSecretReference sasToken) {
        this.sasToken = sasToken;
        return this;
    }

    /**
     * Get the fileShare property: The azure file share name. It is required when auth with accountKey/sasToken. Type:
     * string (or Expression with resultType string).
     * 
     * @return the fileShare value.
     */
    public Object fileShare() {
        return this.fileShare;
    }

    /**
     * Set the fileShare property: The azure file share name. It is required when auth with accountKey/sasToken. Type:
     * string (or Expression with resultType string).
     * 
     * @param fileShare the fileShare value to set.
     * @return the AzureFileStorageLinkedServiceTypeProperties object itself.
     */
    public AzureFileStorageLinkedServiceTypeProperties withFileShare(Object fileShare) {
        this.fileShare = fileShare;
        return this;
    }

    /**
     * Get the snapshot property: The azure file share snapshot version. Type: string (or Expression with resultType
     * string).
     * 
     * @return the snapshot value.
     */
    public Object snapshot() {
        return this.snapshot;
    }

    /**
     * Set the snapshot property: The azure file share snapshot version. Type: string (or Expression with resultType
     * string).
     * 
     * @param snapshot the snapshot value to set.
     * @return the AzureFileStorageLinkedServiceTypeProperties object itself.
     */
    public AzureFileStorageLinkedServiceTypeProperties withSnapshot(Object snapshot) {
        this.snapshot = snapshot;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @return the encryptedCredential value.
     */
    public String encryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the AzureFileStorageLinkedServiceTypeProperties object itself.
     */
    public AzureFileStorageLinkedServiceTypeProperties withEncryptedCredential(String encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Get the serviceEndpoint property: File service endpoint of the Azure File Storage resource. It is mutually
     * exclusive with connectionString, sasUri property.
     * 
     * @return the serviceEndpoint value.
     */
    public Object serviceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * Set the serviceEndpoint property: File service endpoint of the Azure File Storage resource. It is mutually
     * exclusive with connectionString, sasUri property.
     * 
     * @param serviceEndpoint the serviceEndpoint value to set.
     * @return the AzureFileStorageLinkedServiceTypeProperties object itself.
     */
    public AzureFileStorageLinkedServiceTypeProperties withServiceEndpoint(Object serviceEndpoint) {
        this.serviceEndpoint = serviceEndpoint;
        return this;
    }

    /**
     * Get the credential property: The credential reference containing authentication information.
     * 
     * @return the credential value.
     */
    public CredentialReference credential() {
        return this.credential;
    }

    /**
     * Set the credential property: The credential reference containing authentication information.
     * 
     * @param credential the credential value to set.
     * @return the AzureFileStorageLinkedServiceTypeProperties object itself.
     */
    public AzureFileStorageLinkedServiceTypeProperties withCredential(CredentialReference credential) {
        this.credential = credential;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (password() != null) {
            password().validate();
        }
        if (accountKey() != null) {
            accountKey().validate();
        }
        if (sasToken() != null) {
            sasToken().validate();
        }
        if (credential() != null) {
            credential().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("host", this.host);
        jsonWriter.writeUntypedField("userId", this.userId);
        jsonWriter.writeJsonField("password", this.password);
        jsonWriter.writeUntypedField("connectionString", this.connectionString);
        jsonWriter.writeJsonField("accountKey", this.accountKey);
        jsonWriter.writeUntypedField("sasUri", this.sasUri);
        jsonWriter.writeJsonField("sasToken", this.sasToken);
        jsonWriter.writeUntypedField("fileShare", this.fileShare);
        jsonWriter.writeUntypedField("snapshot", this.snapshot);
        jsonWriter.writeStringField("encryptedCredential", this.encryptedCredential);
        jsonWriter.writeUntypedField("serviceEndpoint", this.serviceEndpoint);
        jsonWriter.writeJsonField("credential", this.credential);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureFileStorageLinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureFileStorageLinkedServiceTypeProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureFileStorageLinkedServiceTypeProperties.
     */
    public static AzureFileStorageLinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureFileStorageLinkedServiceTypeProperties deserializedAzureFileStorageLinkedServiceTypeProperties
                = new AzureFileStorageLinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("host".equals(fieldName)) {
                    deserializedAzureFileStorageLinkedServiceTypeProperties.host = reader.readUntyped();
                } else if ("userId".equals(fieldName)) {
                    deserializedAzureFileStorageLinkedServiceTypeProperties.userId = reader.readUntyped();
                } else if ("password".equals(fieldName)) {
                    deserializedAzureFileStorageLinkedServiceTypeProperties.password = SecretBase.fromJson(reader);
                } else if ("connectionString".equals(fieldName)) {
                    deserializedAzureFileStorageLinkedServiceTypeProperties.connectionString = reader.readUntyped();
                } else if ("accountKey".equals(fieldName)) {
                    deserializedAzureFileStorageLinkedServiceTypeProperties.accountKey
                        = AzureKeyVaultSecretReference.fromJson(reader);
                } else if ("sasUri".equals(fieldName)) {
                    deserializedAzureFileStorageLinkedServiceTypeProperties.sasUri = reader.readUntyped();
                } else if ("sasToken".equals(fieldName)) {
                    deserializedAzureFileStorageLinkedServiceTypeProperties.sasToken
                        = AzureKeyVaultSecretReference.fromJson(reader);
                } else if ("fileShare".equals(fieldName)) {
                    deserializedAzureFileStorageLinkedServiceTypeProperties.fileShare = reader.readUntyped();
                } else if ("snapshot".equals(fieldName)) {
                    deserializedAzureFileStorageLinkedServiceTypeProperties.snapshot = reader.readUntyped();
                } else if ("encryptedCredential".equals(fieldName)) {
                    deserializedAzureFileStorageLinkedServiceTypeProperties.encryptedCredential = reader.getString();
                } else if ("serviceEndpoint".equals(fieldName)) {
                    deserializedAzureFileStorageLinkedServiceTypeProperties.serviceEndpoint = reader.readUntyped();
                } else if ("credential".equals(fieldName)) {
                    deserializedAzureFileStorageLinkedServiceTypeProperties.credential
                        = CredentialReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureFileStorageLinkedServiceTypeProperties;
        });
    }
}
