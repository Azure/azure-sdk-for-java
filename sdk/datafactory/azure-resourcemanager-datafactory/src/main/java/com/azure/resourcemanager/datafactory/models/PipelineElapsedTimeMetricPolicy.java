// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Pipeline ElapsedTime Metric Policy.
 */
@Fluent
public final class PipelineElapsedTimeMetricPolicy implements JsonSerializable<PipelineElapsedTimeMetricPolicy> {
    /*
     * TimeSpan value, after which an Azure Monitoring Metric is fired.
     */
    private Object duration;

    /**
     * Creates an instance of PipelineElapsedTimeMetricPolicy class.
     */
    public PipelineElapsedTimeMetricPolicy() {
    }

    /**
     * Get the duration property: TimeSpan value, after which an Azure Monitoring Metric is fired.
     * 
     * @return the duration value.
     */
    public Object duration() {
        return this.duration;
    }

    /**
     * Set the duration property: TimeSpan value, after which an Azure Monitoring Metric is fired.
     * 
     * @param duration the duration value to set.
     * @return the PipelineElapsedTimeMetricPolicy object itself.
     */
    public PipelineElapsedTimeMetricPolicy withDuration(Object duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("duration", this.duration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineElapsedTimeMetricPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineElapsedTimeMetricPolicy if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PipelineElapsedTimeMetricPolicy.
     */
    public static PipelineElapsedTimeMetricPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineElapsedTimeMetricPolicy deserializedPipelineElapsedTimeMetricPolicy
                = new PipelineElapsedTimeMetricPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("duration".equals(fieldName)) {
                    deserializedPipelineElapsedTimeMetricPolicy.duration = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineElapsedTimeMetricPolicy;
        });
    }
}
