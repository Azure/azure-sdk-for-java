// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * A copy activity Common Data Service for Apps sink.
 */
@Fluent
public final class CommonDataServiceForAppsSink extends CopySink {
    /*
     * Copy sink type.
     */
    private String type = "CommonDataServiceForAppsSink";

    /*
     * The write behavior for the operation.
     */
    private DynamicsSinkWriteBehavior writeBehavior;

    /*
     * The flag indicating whether to ignore null values from input dataset (except key fields) during write operation.
     * Default is false. Type: boolean (or Expression with resultType boolean).
     */
    private Object ignoreNullValues;

    /*
     * The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with
     * resultType string).
     */
    private Object alternateKeyName;

    /*
     * Controls the bypass of Dataverse custom business logic. Type: string (or Expression with resultType string).
     * Type: string (or Expression with resultType string).
     */
    private Object bypassBusinessLogicExecution;

    /*
     * Controls the bypass of Power Automate flows. Default is false. Type: boolean (or Expression with resultType
     * boolean).
     */
    private Object bypassPowerAutomateFlows;

    /**
     * Creates an instance of CommonDataServiceForAppsSink class.
     */
    public CommonDataServiceForAppsSink() {
    }

    /**
     * Get the type property: Copy sink type.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the writeBehavior property: The write behavior for the operation.
     * 
     * @return the writeBehavior value.
     */
    public DynamicsSinkWriteBehavior writeBehavior() {
        return this.writeBehavior;
    }

    /**
     * Set the writeBehavior property: The write behavior for the operation.
     * 
     * @param writeBehavior the writeBehavior value to set.
     * @return the CommonDataServiceForAppsSink object itself.
     */
    public CommonDataServiceForAppsSink withWriteBehavior(DynamicsSinkWriteBehavior writeBehavior) {
        this.writeBehavior = writeBehavior;
        return this;
    }

    /**
     * Get the ignoreNullValues property: The flag indicating whether to ignore null values from input dataset (except
     * key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     * @return the ignoreNullValues value.
     */
    public Object ignoreNullValues() {
        return this.ignoreNullValues;
    }

    /**
     * Set the ignoreNullValues property: The flag indicating whether to ignore null values from input dataset (except
     * key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     * @param ignoreNullValues the ignoreNullValues value to set.
     * @return the CommonDataServiceForAppsSink object itself.
     */
    public CommonDataServiceForAppsSink withIgnoreNullValues(Object ignoreNullValues) {
        this.ignoreNullValues = ignoreNullValues;
        return this;
    }

    /**
     * Get the alternateKeyName property: The logical name of the alternate key which will be used when upserting
     * records. Type: string (or Expression with resultType string).
     * 
     * @return the alternateKeyName value.
     */
    public Object alternateKeyName() {
        return this.alternateKeyName;
    }

    /**
     * Set the alternateKeyName property: The logical name of the alternate key which will be used when upserting
     * records. Type: string (or Expression with resultType string).
     * 
     * @param alternateKeyName the alternateKeyName value to set.
     * @return the CommonDataServiceForAppsSink object itself.
     */
    public CommonDataServiceForAppsSink withAlternateKeyName(Object alternateKeyName) {
        this.alternateKeyName = alternateKeyName;
        return this;
    }

    /**
     * Get the bypassBusinessLogicExecution property: Controls the bypass of Dataverse custom business logic. Type:
     * string (or Expression with resultType string). Type: string (or Expression with resultType string).
     * 
     * @return the bypassBusinessLogicExecution value.
     */
    public Object bypassBusinessLogicExecution() {
        return this.bypassBusinessLogicExecution;
    }

    /**
     * Set the bypassBusinessLogicExecution property: Controls the bypass of Dataverse custom business logic. Type:
     * string (or Expression with resultType string). Type: string (or Expression with resultType string).
     * 
     * @param bypassBusinessLogicExecution the bypassBusinessLogicExecution value to set.
     * @return the CommonDataServiceForAppsSink object itself.
     */
    public CommonDataServiceForAppsSink withBypassBusinessLogicExecution(Object bypassBusinessLogicExecution) {
        this.bypassBusinessLogicExecution = bypassBusinessLogicExecution;
        return this;
    }

    /**
     * Get the bypassPowerAutomateFlows property: Controls the bypass of Power Automate flows. Default is false. Type:
     * boolean (or Expression with resultType boolean).
     * 
     * @return the bypassPowerAutomateFlows value.
     */
    public Object bypassPowerAutomateFlows() {
        return this.bypassPowerAutomateFlows;
    }

    /**
     * Set the bypassPowerAutomateFlows property: Controls the bypass of Power Automate flows. Default is false. Type:
     * boolean (or Expression with resultType boolean).
     * 
     * @param bypassPowerAutomateFlows the bypassPowerAutomateFlows value to set.
     * @return the CommonDataServiceForAppsSink object itself.
     */
    public CommonDataServiceForAppsSink withBypassPowerAutomateFlows(Object bypassPowerAutomateFlows) {
        this.bypassPowerAutomateFlows = bypassPowerAutomateFlows;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommonDataServiceForAppsSink withWriteBatchSize(Object writeBatchSize) {
        super.withWriteBatchSize(writeBatchSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommonDataServiceForAppsSink withWriteBatchTimeout(Object writeBatchTimeout) {
        super.withWriteBatchTimeout(writeBatchTimeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommonDataServiceForAppsSink withSinkRetryCount(Object sinkRetryCount) {
        super.withSinkRetryCount(sinkRetryCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommonDataServiceForAppsSink withSinkRetryWait(Object sinkRetryWait) {
        super.withSinkRetryWait(sinkRetryWait);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommonDataServiceForAppsSink withMaxConcurrentConnections(Object maxConcurrentConnections) {
        super.withMaxConcurrentConnections(maxConcurrentConnections);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommonDataServiceForAppsSink withDisableMetricsCollection(Object disableMetricsCollection) {
        super.withDisableMetricsCollection(disableMetricsCollection);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (writeBehavior() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property writeBehavior in model CommonDataServiceForAppsSink"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CommonDataServiceForAppsSink.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (writeBatchSize() != null) {
            jsonWriter.writeUntypedField("writeBatchSize", writeBatchSize());
        }
        if (writeBatchTimeout() != null) {
            jsonWriter.writeUntypedField("writeBatchTimeout", writeBatchTimeout());
        }
        if (sinkRetryCount() != null) {
            jsonWriter.writeUntypedField("sinkRetryCount", sinkRetryCount());
        }
        if (sinkRetryWait() != null) {
            jsonWriter.writeUntypedField("sinkRetryWait", sinkRetryWait());
        }
        if (maxConcurrentConnections() != null) {
            jsonWriter.writeUntypedField("maxConcurrentConnections", maxConcurrentConnections());
        }
        if (disableMetricsCollection() != null) {
            jsonWriter.writeUntypedField("disableMetricsCollection", disableMetricsCollection());
        }
        jsonWriter.writeStringField("writeBehavior", this.writeBehavior == null ? null : this.writeBehavior.toString());
        jsonWriter.writeStringField("type", this.type);
        if (this.ignoreNullValues != null) {
            jsonWriter.writeUntypedField("ignoreNullValues", this.ignoreNullValues);
        }
        if (this.alternateKeyName != null) {
            jsonWriter.writeUntypedField("alternateKeyName", this.alternateKeyName);
        }
        if (this.bypassBusinessLogicExecution != null) {
            jsonWriter.writeUntypedField("bypassBusinessLogicExecution", this.bypassBusinessLogicExecution);
        }
        if (this.bypassPowerAutomateFlows != null) {
            jsonWriter.writeUntypedField("bypassPowerAutomateFlows", this.bypassPowerAutomateFlows);
        }
        if (additionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommonDataServiceForAppsSink from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommonDataServiceForAppsSink if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CommonDataServiceForAppsSink.
     */
    public static CommonDataServiceForAppsSink fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommonDataServiceForAppsSink deserializedCommonDataServiceForAppsSink = new CommonDataServiceForAppsSink();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("writeBatchSize".equals(fieldName)) {
                    deserializedCommonDataServiceForAppsSink.withWriteBatchSize(reader.readUntyped());
                } else if ("writeBatchTimeout".equals(fieldName)) {
                    deserializedCommonDataServiceForAppsSink.withWriteBatchTimeout(reader.readUntyped());
                } else if ("sinkRetryCount".equals(fieldName)) {
                    deserializedCommonDataServiceForAppsSink.withSinkRetryCount(reader.readUntyped());
                } else if ("sinkRetryWait".equals(fieldName)) {
                    deserializedCommonDataServiceForAppsSink.withSinkRetryWait(reader.readUntyped());
                } else if ("maxConcurrentConnections".equals(fieldName)) {
                    deserializedCommonDataServiceForAppsSink.withMaxConcurrentConnections(reader.readUntyped());
                } else if ("disableMetricsCollection".equals(fieldName)) {
                    deserializedCommonDataServiceForAppsSink.withDisableMetricsCollection(reader.readUntyped());
                } else if ("writeBehavior".equals(fieldName)) {
                    deserializedCommonDataServiceForAppsSink.writeBehavior
                        = DynamicsSinkWriteBehavior.fromString(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedCommonDataServiceForAppsSink.type = reader.getString();
                } else if ("ignoreNullValues".equals(fieldName)) {
                    deserializedCommonDataServiceForAppsSink.ignoreNullValues = reader.readUntyped();
                } else if ("alternateKeyName".equals(fieldName)) {
                    deserializedCommonDataServiceForAppsSink.alternateKeyName = reader.readUntyped();
                } else if ("bypassBusinessLogicExecution".equals(fieldName)) {
                    deserializedCommonDataServiceForAppsSink.bypassBusinessLogicExecution = reader.readUntyped();
                } else if ("bypassPowerAutomateFlows".equals(fieldName)) {
                    deserializedCommonDataServiceForAppsSink.bypassPowerAutomateFlows = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedCommonDataServiceForAppsSink.withAdditionalProperties(additionalProperties);

            return deserializedCommonDataServiceForAppsSink;
        });
    }
}
