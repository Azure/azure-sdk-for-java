// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The linked integration runtime information.
 */
@Fluent
public final class CreateLinkedIntegrationRuntimeRequest
    implements JsonSerializable<CreateLinkedIntegrationRuntimeRequest> {
    /*
     * The name of the linked integration runtime.
     */
    private String name;

    /*
     * The ID of the subscription that the linked integration runtime belongs to.
     */
    private String subscriptionId;

    /*
     * The name of the data factory that the linked integration runtime belongs to.
     */
    private String dataFactoryName;

    /*
     * The location of the data factory that the linked integration runtime belongs to.
     */
    private String dataFactoryLocation;

    /**
     * Creates an instance of CreateLinkedIntegrationRuntimeRequest class.
     */
    public CreateLinkedIntegrationRuntimeRequest() {
    }

    /**
     * Get the name property: The name of the linked integration runtime.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the linked integration runtime.
     * 
     * @param name the name value to set.
     * @return the CreateLinkedIntegrationRuntimeRequest object itself.
     */
    public CreateLinkedIntegrationRuntimeRequest withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the subscriptionId property: The ID of the subscription that the linked integration runtime belongs to.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: The ID of the subscription that the linked integration runtime belongs to.
     * 
     * @param subscriptionId the subscriptionId value to set.
     * @return the CreateLinkedIntegrationRuntimeRequest object itself.
     */
    public CreateLinkedIntegrationRuntimeRequest withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Get the dataFactoryName property: The name of the data factory that the linked integration runtime belongs to.
     * 
     * @return the dataFactoryName value.
     */
    public String dataFactoryName() {
        return this.dataFactoryName;
    }

    /**
     * Set the dataFactoryName property: The name of the data factory that the linked integration runtime belongs to.
     * 
     * @param dataFactoryName the dataFactoryName value to set.
     * @return the CreateLinkedIntegrationRuntimeRequest object itself.
     */
    public CreateLinkedIntegrationRuntimeRequest withDataFactoryName(String dataFactoryName) {
        this.dataFactoryName = dataFactoryName;
        return this;
    }

    /**
     * Get the dataFactoryLocation property: The location of the data factory that the linked integration runtime
     * belongs to.
     * 
     * @return the dataFactoryLocation value.
     */
    public String dataFactoryLocation() {
        return this.dataFactoryLocation;
    }

    /**
     * Set the dataFactoryLocation property: The location of the data factory that the linked integration runtime
     * belongs to.
     * 
     * @param dataFactoryLocation the dataFactoryLocation value to set.
     * @return the CreateLinkedIntegrationRuntimeRequest object itself.
     */
    public CreateLinkedIntegrationRuntimeRequest withDataFactoryLocation(String dataFactoryLocation) {
        this.dataFactoryLocation = dataFactoryLocation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("dataFactoryName", this.dataFactoryName);
        jsonWriter.writeStringField("dataFactoryLocation", this.dataFactoryLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateLinkedIntegrationRuntimeRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateLinkedIntegrationRuntimeRequest if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CreateLinkedIntegrationRuntimeRequest.
     */
    public static CreateLinkedIntegrationRuntimeRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateLinkedIntegrationRuntimeRequest deserializedCreateLinkedIntegrationRuntimeRequest
                = new CreateLinkedIntegrationRuntimeRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedCreateLinkedIntegrationRuntimeRequest.name = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedCreateLinkedIntegrationRuntimeRequest.subscriptionId = reader.getString();
                } else if ("dataFactoryName".equals(fieldName)) {
                    deserializedCreateLinkedIntegrationRuntimeRequest.dataFactoryName = reader.getString();
                } else if ("dataFactoryLocation".equals(fieldName)) {
                    deserializedCreateLinkedIntegrationRuntimeRequest.dataFactoryLocation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCreateLinkedIntegrationRuntimeRequest;
        });
    }
}
