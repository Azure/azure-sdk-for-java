// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import java.io.IOException;

/**
 * Json dataset properties.
 */
@Fluent
public final class JsonDatasetTypeProperties implements JsonSerializable<JsonDatasetTypeProperties> {
    /*
     * The location of the json data storage.
     */
    private DatasetLocation location;

    /*
     * The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes
     * another Unicode encoding. Refer to the name column of the table in the following link to set supported values:
     * https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType
     * string).
     */
    private Object encodingName;

    /*
     * The data compression method used for the json dataset.
     */
    private DatasetCompression compression;

    /**
     * Creates an instance of JsonDatasetTypeProperties class.
     */
    public JsonDatasetTypeProperties() {
    }

    /**
     * Get the location property: The location of the json data storage.
     * 
     * @return the location value.
     */
    public DatasetLocation location() {
        return this.location;
    }

    /**
     * Set the location property: The location of the json data storage.
     * 
     * @param location the location value to set.
     * @return the JsonDatasetTypeProperties object itself.
     */
    public JsonDatasetTypeProperties withLocation(DatasetLocation location) {
        this.location = location;
        return this;
    }

    /**
     * Get the encodingName property: The code page name of the preferred encoding. If not specified, the default value
     * is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following
     * link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or
     * Expression with resultType string).
     * 
     * @return the encodingName value.
     */
    public Object encodingName() {
        return this.encodingName;
    }

    /**
     * Set the encodingName property: The code page name of the preferred encoding. If not specified, the default value
     * is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following
     * link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or
     * Expression with resultType string).
     * 
     * @param encodingName the encodingName value to set.
     * @return the JsonDatasetTypeProperties object itself.
     */
    public JsonDatasetTypeProperties withEncodingName(Object encodingName) {
        this.encodingName = encodingName;
        return this;
    }

    /**
     * Get the compression property: The data compression method used for the json dataset.
     * 
     * @return the compression value.
     */
    public DatasetCompression compression() {
        return this.compression;
    }

    /**
     * Set the compression property: The data compression method used for the json dataset.
     * 
     * @param compression the compression value to set.
     * @return the JsonDatasetTypeProperties object itself.
     */
    public JsonDatasetTypeProperties withCompression(DatasetCompression compression) {
        this.compression = compression;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (location() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property location in model JsonDatasetTypeProperties"));
        } else {
            location().validate();
        }
        if (compression() != null) {
            compression().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JsonDatasetTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("location", this.location);
        jsonWriter.writeUntypedField("encodingName", this.encodingName);
        jsonWriter.writeJsonField("compression", this.compression);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JsonDatasetTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JsonDatasetTypeProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JsonDatasetTypeProperties.
     */
    public static JsonDatasetTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JsonDatasetTypeProperties deserializedJsonDatasetTypeProperties = new JsonDatasetTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("location".equals(fieldName)) {
                    deserializedJsonDatasetTypeProperties.location = DatasetLocation.fromJson(reader);
                } else if ("encodingName".equals(fieldName)) {
                    deserializedJsonDatasetTypeProperties.encodingName = reader.readUntyped();
                } else if ("compression".equals(fieldName)) {
                    deserializedJsonDatasetTypeProperties.compression = DatasetCompression.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJsonDatasetTypeProperties;
        });
    }
}
