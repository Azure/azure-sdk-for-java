// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Teradata import command settings.
 */
@Fluent
public final class TeradataImportCommand extends ImportSettings {
    /*
     * The import setting type.
     */
    private String type = "TeradataImportCommand";

    /*
     * Additional format options for Teradata Copy Command. The format options only applies to direct copy from CSV
     * source. Type: key value pairs (value should be string type) (or Expression with resultType object). Example:
     * "additionalFormatOptions": { "timeFormat": "HHhMImSSs" }
     */
    private Object additionalFormatOptions;

    /**
     * Creates an instance of TeradataImportCommand class.
     */
    public TeradataImportCommand() {
    }

    /**
     * Get the type property: The import setting type.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the additionalFormatOptions property: Additional format options for Teradata Copy Command. The format options
     * only applies to direct copy from CSV source. Type: key value pairs (value should be string type) (or Expression
     * with resultType object). Example: "additionalFormatOptions": { "timeFormat": "HHhMImSSs" }.
     * 
     * @return the additionalFormatOptions value.
     */
    public Object additionalFormatOptions() {
        return this.additionalFormatOptions;
    }

    /**
     * Set the additionalFormatOptions property: Additional format options for Teradata Copy Command. The format options
     * only applies to direct copy from CSV source. Type: key value pairs (value should be string type) (or Expression
     * with resultType object). Example: "additionalFormatOptions": { "timeFormat": "HHhMImSSs" }.
     * 
     * @param additionalFormatOptions the additionalFormatOptions value to set.
     * @return the TeradataImportCommand object itself.
     */
    public TeradataImportCommand withAdditionalFormatOptions(Object additionalFormatOptions) {
        this.additionalFormatOptions = additionalFormatOptions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        if (this.additionalFormatOptions != null) {
            jsonWriter.writeUntypedField("additionalFormatOptions", this.additionalFormatOptions);
        }
        if (additionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TeradataImportCommand from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TeradataImportCommand if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TeradataImportCommand.
     */
    public static TeradataImportCommand fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TeradataImportCommand deserializedTeradataImportCommand = new TeradataImportCommand();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedTeradataImportCommand.type = reader.getString();
                } else if ("additionalFormatOptions".equals(fieldName)) {
                    deserializedTeradataImportCommand.additionalFormatOptions = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedTeradataImportCommand.withAdditionalProperties(additionalProperties);

            return deserializedTeradataImportCommand;
        });
    }
}
