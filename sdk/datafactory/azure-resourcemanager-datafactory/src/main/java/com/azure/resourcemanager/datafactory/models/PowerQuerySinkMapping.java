// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Map Power Query mashup query to sink dataset(s).
 */
@Fluent
public final class PowerQuerySinkMapping implements JsonSerializable<PowerQuerySinkMapping> {
    /*
     * Name of the query in Power Query mashup document.
     */
    private String queryName;

    /*
     * List of sinks mapped to Power Query mashup query.
     */
    private List<PowerQuerySink> dataflowSinks;

    /**
     * Creates an instance of PowerQuerySinkMapping class.
     */
    public PowerQuerySinkMapping() {
    }

    /**
     * Get the queryName property: Name of the query in Power Query mashup document.
     * 
     * @return the queryName value.
     */
    public String queryName() {
        return this.queryName;
    }

    /**
     * Set the queryName property: Name of the query in Power Query mashup document.
     * 
     * @param queryName the queryName value to set.
     * @return the PowerQuerySinkMapping object itself.
     */
    public PowerQuerySinkMapping withQueryName(String queryName) {
        this.queryName = queryName;
        return this;
    }

    /**
     * Get the dataflowSinks property: List of sinks mapped to Power Query mashup query.
     * 
     * @return the dataflowSinks value.
     */
    public List<PowerQuerySink> dataflowSinks() {
        return this.dataflowSinks;
    }

    /**
     * Set the dataflowSinks property: List of sinks mapped to Power Query mashup query.
     * 
     * @param dataflowSinks the dataflowSinks value to set.
     * @return the PowerQuerySinkMapping object itself.
     */
    public PowerQuerySinkMapping withDataflowSinks(List<PowerQuerySink> dataflowSinks) {
        this.dataflowSinks = dataflowSinks;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataflowSinks() != null) {
            dataflowSinks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("queryName", this.queryName);
        jsonWriter.writeArrayField("dataflowSinks", this.dataflowSinks, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PowerQuerySinkMapping from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PowerQuerySinkMapping if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PowerQuerySinkMapping.
     */
    public static PowerQuerySinkMapping fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PowerQuerySinkMapping deserializedPowerQuerySinkMapping = new PowerQuerySinkMapping();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("queryName".equals(fieldName)) {
                    deserializedPowerQuerySinkMapping.queryName = reader.getString();
                } else if ("dataflowSinks".equals(fieldName)) {
                    List<PowerQuerySink> dataflowSinks = reader.readArray(reader1 -> PowerQuerySink.fromJson(reader1));
                    deserializedPowerQuerySinkMapping.dataflowSinks = dataflowSinks;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPowerQuerySinkMapping;
        });
    }
}
