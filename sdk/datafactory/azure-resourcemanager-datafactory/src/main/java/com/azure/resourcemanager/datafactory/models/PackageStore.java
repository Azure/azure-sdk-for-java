// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Package store for the SSIS integration runtime.
 */
@Fluent
public final class PackageStore implements JsonSerializable<PackageStore> {
    /*
     * The name of the package store
     */
    private String name;

    /*
     * The package store linked service reference.
     */
    private EntityReference packageStoreLinkedService;

    /**
     * Creates an instance of PackageStore class.
     */
    public PackageStore() {
    }

    /**
     * Get the name property: The name of the package store.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the package store.
     * 
     * @param name the name value to set.
     * @return the PackageStore object itself.
     */
    public PackageStore withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the packageStoreLinkedService property: The package store linked service reference.
     * 
     * @return the packageStoreLinkedService value.
     */
    public EntityReference packageStoreLinkedService() {
        return this.packageStoreLinkedService;
    }

    /**
     * Set the packageStoreLinkedService property: The package store linked service reference.
     * 
     * @param packageStoreLinkedService the packageStoreLinkedService value to set.
     * @return the PackageStore object itself.
     */
    public PackageStore withPackageStoreLinkedService(EntityReference packageStoreLinkedService) {
        this.packageStoreLinkedService = packageStoreLinkedService;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model PackageStore"));
        }
        if (packageStoreLinkedService() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property packageStoreLinkedService in model PackageStore"));
        } else {
            packageStoreLinkedService().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PackageStore.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("packageStoreLinkedService", this.packageStoreLinkedService);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PackageStore from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PackageStore if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PackageStore.
     */
    public static PackageStore fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PackageStore deserializedPackageStore = new PackageStore();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedPackageStore.name = reader.getString();
                } else if ("packageStoreLinkedService".equals(fieldName)) {
                    deserializedPackageStore.packageStoreLinkedService = EntityReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPackageStore;
        });
    }
}
