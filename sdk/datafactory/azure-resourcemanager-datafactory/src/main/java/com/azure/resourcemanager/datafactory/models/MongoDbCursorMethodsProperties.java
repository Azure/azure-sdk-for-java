// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Cursor methods for Mongodb query.
 */
@Fluent
public final class MongoDbCursorMethodsProperties implements JsonSerializable<MongoDbCursorMethodsProperties> {
    /*
     * Specifies the fields to return in the documents that match the query filter. To return all fields in the matching
     * documents, omit this parameter. Type: string (or Expression with resultType string).
     */
    private Object project;

    /*
     * Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType
     * string). Type: string (or Expression with resultType string).
     */
    private Object sort;

    /*
     * Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful
     * in implementing paginated results. Type: integer (or Expression with resultType integer).
     */
    private Object skip;

    /*
     * Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a
     * SQL database. Type: integer (or Expression with resultType integer).
     */
    private Object limit;

    /*
     * Cursor methods for Mongodb query
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of MongoDbCursorMethodsProperties class.
     */
    public MongoDbCursorMethodsProperties() {
    }

    /**
     * Get the project property: Specifies the fields to return in the documents that match the query filter. To return
     * all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
     * 
     * @return the project value.
     */
    public Object project() {
        return this.project;
    }

    /**
     * Set the project property: Specifies the fields to return in the documents that match the query filter. To return
     * all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
     * 
     * @param project the project value to set.
     * @return the MongoDbCursorMethodsProperties object itself.
     */
    public MongoDbCursorMethodsProperties withProject(Object project) {
        this.project = project;
        return this;
    }

    /**
     * Get the sort property: Specifies the order in which the query returns matching documents. Type: string (or
     * Expression with resultType string). Type: string (or Expression with resultType string).
     * 
     * @return the sort value.
     */
    public Object sort() {
        return this.sort;
    }

    /**
     * Set the sort property: Specifies the order in which the query returns matching documents. Type: string (or
     * Expression with resultType string). Type: string (or Expression with resultType string).
     * 
     * @param sort the sort value to set.
     * @return the MongoDbCursorMethodsProperties object itself.
     */
    public MongoDbCursorMethodsProperties withSort(Object sort) {
        this.sort = sort;
        return this;
    }

    /**
     * Get the skip property: Specifies the how many documents skipped and where MongoDB begins returning results. This
     * approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
     * 
     * @return the skip value.
     */
    public Object skip() {
        return this.skip;
    }

    /**
     * Set the skip property: Specifies the how many documents skipped and where MongoDB begins returning results. This
     * approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
     * 
     * @param skip the skip value to set.
     * @return the MongoDbCursorMethodsProperties object itself.
     */
    public MongoDbCursorMethodsProperties withSkip(Object skip) {
        this.skip = skip;
        return this;
    }

    /**
     * Get the limit property: Specifies the maximum number of documents the server returns. limit() is analogous to the
     * LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
     * 
     * @return the limit value.
     */
    public Object limit() {
        return this.limit;
    }

    /**
     * Set the limit property: Specifies the maximum number of documents the server returns. limit() is analogous to the
     * LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
     * 
     * @param limit the limit value to set.
     * @return the MongoDbCursorMethodsProperties object itself.
     */
    public MongoDbCursorMethodsProperties withLimit(Object limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get the additionalProperties property: Cursor methods for Mongodb query.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Cursor methods for Mongodb query.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the MongoDbCursorMethodsProperties object itself.
     */
    public MongoDbCursorMethodsProperties withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("project", this.project);
        jsonWriter.writeUntypedField("sort", this.sort);
        jsonWriter.writeUntypedField("skip", this.skip);
        jsonWriter.writeUntypedField("limit", this.limit);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoDbCursorMethodsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoDbCursorMethodsProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MongoDbCursorMethodsProperties.
     */
    public static MongoDbCursorMethodsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoDbCursorMethodsProperties deserializedMongoDbCursorMethodsProperties
                = new MongoDbCursorMethodsProperties();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("project".equals(fieldName)) {
                    deserializedMongoDbCursorMethodsProperties.project = reader.readUntyped();
                } else if ("sort".equals(fieldName)) {
                    deserializedMongoDbCursorMethodsProperties.sort = reader.readUntyped();
                } else if ("skip".equals(fieldName)) {
                    deserializedMongoDbCursorMethodsProperties.skip = reader.readUntyped();
                } else if ("limit".equals(fieldName)) {
                    deserializedMongoDbCursorMethodsProperties.limit = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedMongoDbCursorMethodsProperties.additionalProperties = additionalProperties;

            return deserializedMongoDbCursorMethodsProperties;
        });
    }
}
