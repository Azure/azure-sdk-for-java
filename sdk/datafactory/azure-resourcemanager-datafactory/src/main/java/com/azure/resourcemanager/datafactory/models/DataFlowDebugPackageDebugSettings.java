// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Data flow debug settings.
 */
@Fluent
public final class DataFlowDebugPackageDebugSettings implements JsonSerializable<DataFlowDebugPackageDebugSettings> {
    /*
     * Source setting for data flow debug.
     */
    private List<DataFlowSourceSetting> sourceSettings;

    /*
     * Data flow parameters.
     */
    private Map<String, Object> parameters;

    /*
     * Parameters for dataset.
     */
    private Object datasetParameters;

    /**
     * Creates an instance of DataFlowDebugPackageDebugSettings class.
     */
    public DataFlowDebugPackageDebugSettings() {
    }

    /**
     * Get the sourceSettings property: Source setting for data flow debug.
     * 
     * @return the sourceSettings value.
     */
    public List<DataFlowSourceSetting> sourceSettings() {
        return this.sourceSettings;
    }

    /**
     * Set the sourceSettings property: Source setting for data flow debug.
     * 
     * @param sourceSettings the sourceSettings value to set.
     * @return the DataFlowDebugPackageDebugSettings object itself.
     */
    public DataFlowDebugPackageDebugSettings withSourceSettings(List<DataFlowSourceSetting> sourceSettings) {
        this.sourceSettings = sourceSettings;
        return this;
    }

    /**
     * Get the parameters property: Data flow parameters.
     * 
     * @return the parameters value.
     */
    public Map<String, Object> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Data flow parameters.
     * 
     * @param parameters the parameters value to set.
     * @return the DataFlowDebugPackageDebugSettings object itself.
     */
    public DataFlowDebugPackageDebugSettings withParameters(Map<String, Object> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the datasetParameters property: Parameters for dataset.
     * 
     * @return the datasetParameters value.
     */
    public Object datasetParameters() {
        return this.datasetParameters;
    }

    /**
     * Set the datasetParameters property: Parameters for dataset.
     * 
     * @param datasetParameters the datasetParameters value to set.
     * @return the DataFlowDebugPackageDebugSettings object itself.
     */
    public DataFlowDebugPackageDebugSettings withDatasetParameters(Object datasetParameters) {
        this.datasetParameters = datasetParameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceSettings() != null) {
            sourceSettings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("sourceSettings", this.sourceSettings,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("parameters", this.parameters, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeUntypedField("datasetParameters", this.datasetParameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataFlowDebugPackageDebugSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataFlowDebugPackageDebugSettings if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataFlowDebugPackageDebugSettings.
     */
    public static DataFlowDebugPackageDebugSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataFlowDebugPackageDebugSettings deserializedDataFlowDebugPackageDebugSettings
                = new DataFlowDebugPackageDebugSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceSettings".equals(fieldName)) {
                    List<DataFlowSourceSetting> sourceSettings
                        = reader.readArray(reader1 -> DataFlowSourceSetting.fromJson(reader1));
                    deserializedDataFlowDebugPackageDebugSettings.sourceSettings = sourceSettings;
                } else if ("parameters".equals(fieldName)) {
                    Map<String, Object> parameters = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDataFlowDebugPackageDebugSettings.parameters = parameters;
                } else if ("datasetParameters".equals(fieldName)) {
                    deserializedDataFlowDebugPackageDebugSettings.datasetParameters = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataFlowDebugPackageDebugSettings;
        });
    }
}
