// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.Map;

/** Avro dataset. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("Avro")
@JsonFlatten
@Fluent
public class AvroDataset extends Dataset {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AvroDataset.class);

    /*
     * The location of the avro storage.
     */
    @JsonProperty(value = "typeProperties.location")
    private DatasetLocation location;

    /*
     * The avroCompressionCodec property.
     */
    @JsonProperty(value = "typeProperties.avroCompressionCodec")
    private AvroCompressionCodec avroCompressionCodec;

    /*
     * The avroCompressionLevel property.
     */
    @JsonProperty(value = "typeProperties.avroCompressionLevel")
    private Integer avroCompressionLevel;

    /**
     * Get the location property: The location of the avro storage.
     *
     * @return the location value.
     */
    public DatasetLocation location() {
        return this.location;
    }

    /**
     * Set the location property: The location of the avro storage.
     *
     * @param location the location value to set.
     * @return the AvroDataset object itself.
     */
    public AvroDataset withLocation(DatasetLocation location) {
        this.location = location;
        return this;
    }

    /**
     * Get the avroCompressionCodec property: The avroCompressionCodec property.
     *
     * @return the avroCompressionCodec value.
     */
    public AvroCompressionCodec avroCompressionCodec() {
        return this.avroCompressionCodec;
    }

    /**
     * Set the avroCompressionCodec property: The avroCompressionCodec property.
     *
     * @param avroCompressionCodec the avroCompressionCodec value to set.
     * @return the AvroDataset object itself.
     */
    public AvroDataset withAvroCompressionCodec(AvroCompressionCodec avroCompressionCodec) {
        this.avroCompressionCodec = avroCompressionCodec;
        return this;
    }

    /**
     * Get the avroCompressionLevel property: The avroCompressionLevel property.
     *
     * @return the avroCompressionLevel value.
     */
    public Integer avroCompressionLevel() {
        return this.avroCompressionLevel;
    }

    /**
     * Set the avroCompressionLevel property: The avroCompressionLevel property.
     *
     * @param avroCompressionLevel the avroCompressionLevel value to set.
     * @return the AvroDataset object itself.
     */
    public AvroDataset withAvroCompressionLevel(Integer avroCompressionLevel) {
        this.avroCompressionLevel = avroCompressionLevel;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AvroDataset withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AvroDataset withStructure(Object structure) {
        super.withStructure(structure);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AvroDataset withSchema(Object schema) {
        super.withSchema(schema);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AvroDataset withLinkedServiceName(LinkedServiceReference linkedServiceName) {
        super.withLinkedServiceName(linkedServiceName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AvroDataset withParameters(Map<String, ParameterSpecification> parameters) {
        super.withParameters(parameters);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AvroDataset withAnnotations(List<Object> annotations) {
        super.withAnnotations(annotations);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AvroDataset withFolder(DatasetFolder folder) {
        super.withFolder(folder);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (location() != null) {
            location().validate();
        }
    }
}
