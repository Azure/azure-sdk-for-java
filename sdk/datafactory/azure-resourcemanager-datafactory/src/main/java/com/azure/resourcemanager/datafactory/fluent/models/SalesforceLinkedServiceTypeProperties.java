// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import java.io.IOException;

/**
 * Salesforce linked service properties.
 */
@Fluent
public final class SalesforceLinkedServiceTypeProperties
    implements JsonSerializable<SalesforceLinkedServiceTypeProperties> {
    /*
     * The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify
     * 'https://test.salesforce.com'. To copy data from custom domain, specify, for example,
     * 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
     */
    private Object environmentUrl;

    /*
     * The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType
     * string).
     */
    private Object username;

    /*
     * The password for Basic authentication of the Salesforce instance.
     */
    private SecretBase password;

    /*
     * The security token is optional to remotely access Salesforce instance.
     */
    private SecretBase securityToken;

    /*
     * The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
     */
    private Object apiVersion;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime
     * credential manager. Type: string.
     */
    private String encryptedCredential;

    /**
     * Creates an instance of SalesforceLinkedServiceTypeProperties class.
     */
    public SalesforceLinkedServiceTypeProperties() {
    }

    /**
     * Get the environmentUrl property: The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To
     * copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for
     * example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
     * 
     * @return the environmentUrl value.
     */
    public Object environmentUrl() {
        return this.environmentUrl;
    }

    /**
     * Set the environmentUrl property: The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To
     * copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for
     * example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
     * 
     * @param environmentUrl the environmentUrl value to set.
     * @return the SalesforceLinkedServiceTypeProperties object itself.
     */
    public SalesforceLinkedServiceTypeProperties withEnvironmentUrl(Object environmentUrl) {
        this.environmentUrl = environmentUrl;
        return this;
    }

    /**
     * Get the username property: The username for Basic authentication of the Salesforce instance. Type: string (or
     * Expression with resultType string).
     * 
     * @return the username value.
     */
    public Object username() {
        return this.username;
    }

    /**
     * Set the username property: The username for Basic authentication of the Salesforce instance. Type: string (or
     * Expression with resultType string).
     * 
     * @param username the username value to set.
     * @return the SalesforceLinkedServiceTypeProperties object itself.
     */
    public SalesforceLinkedServiceTypeProperties withUsername(Object username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: The password for Basic authentication of the Salesforce instance.
     * 
     * @return the password value.
     */
    public SecretBase password() {
        return this.password;
    }

    /**
     * Set the password property: The password for Basic authentication of the Salesforce instance.
     * 
     * @param password the password value to set.
     * @return the SalesforceLinkedServiceTypeProperties object itself.
     */
    public SalesforceLinkedServiceTypeProperties withPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * Get the securityToken property: The security token is optional to remotely access Salesforce instance.
     * 
     * @return the securityToken value.
     */
    public SecretBase securityToken() {
        return this.securityToken;
    }

    /**
     * Set the securityToken property: The security token is optional to remotely access Salesforce instance.
     * 
     * @param securityToken the securityToken value to set.
     * @return the SalesforceLinkedServiceTypeProperties object itself.
     */
    public SalesforceLinkedServiceTypeProperties withSecurityToken(SecretBase securityToken) {
        this.securityToken = securityToken;
        return this;
    }

    /**
     * Get the apiVersion property: The Salesforce API version used in ADF. Type: string (or Expression with resultType
     * string).
     * 
     * @return the apiVersion value.
     */
    public Object apiVersion() {
        return this.apiVersion;
    }

    /**
     * Set the apiVersion property: The Salesforce API version used in ADF. Type: string (or Expression with resultType
     * string).
     * 
     * @param apiVersion the apiVersion value to set.
     * @return the SalesforceLinkedServiceTypeProperties object itself.
     */
    public SalesforceLinkedServiceTypeProperties withApiVersion(Object apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @return the encryptedCredential value.
     */
    public String encryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the SalesforceLinkedServiceTypeProperties object itself.
     */
    public SalesforceLinkedServiceTypeProperties withEncryptedCredential(String encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (password() != null) {
            password().validate();
        }
        if (securityToken() != null) {
            securityToken().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("environmentUrl", this.environmentUrl);
        jsonWriter.writeUntypedField("username", this.username);
        jsonWriter.writeJsonField("password", this.password);
        jsonWriter.writeJsonField("securityToken", this.securityToken);
        jsonWriter.writeUntypedField("apiVersion", this.apiVersion);
        jsonWriter.writeStringField("encryptedCredential", this.encryptedCredential);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SalesforceLinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SalesforceLinkedServiceTypeProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SalesforceLinkedServiceTypeProperties.
     */
    public static SalesforceLinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SalesforceLinkedServiceTypeProperties deserializedSalesforceLinkedServiceTypeProperties
                = new SalesforceLinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("environmentUrl".equals(fieldName)) {
                    deserializedSalesforceLinkedServiceTypeProperties.environmentUrl = reader.readUntyped();
                } else if ("username".equals(fieldName)) {
                    deserializedSalesforceLinkedServiceTypeProperties.username = reader.readUntyped();
                } else if ("password".equals(fieldName)) {
                    deserializedSalesforceLinkedServiceTypeProperties.password = SecretBase.fromJson(reader);
                } else if ("securityToken".equals(fieldName)) {
                    deserializedSalesforceLinkedServiceTypeProperties.securityToken = SecretBase.fromJson(reader);
                } else if ("apiVersion".equals(fieldName)) {
                    deserializedSalesforceLinkedServiceTypeProperties.apiVersion = reader.readUntyped();
                } else if ("encryptedCredential".equals(fieldName)) {
                    deserializedSalesforceLinkedServiceTypeProperties.encryptedCredential = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSalesforceLinkedServiceTypeProperties;
        });
    }
}
