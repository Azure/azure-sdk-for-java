// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.fluent.models.ManagedIdentityTypeProperties;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Managed identity credential.
 */
@Fluent
public final class ManagedIdentityCredential extends Credential {
    /*
     * Type of credential.
     */
    private String type = "ManagedIdentity";

    /*
     * Managed identity credential properties.
     */
    private ManagedIdentityTypeProperties innerTypeProperties;

    /**
     * Creates an instance of ManagedIdentityCredential class.
     */
    public ManagedIdentityCredential() {
    }

    /**
     * Get the type property: Type of credential.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the innerTypeProperties property: Managed identity credential properties.
     * 
     * @return the innerTypeProperties value.
     */
    private ManagedIdentityTypeProperties innerTypeProperties() {
        return this.innerTypeProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedIdentityCredential withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ManagedIdentityCredential withAnnotations(List<Object> annotations) {
        super.withAnnotations(annotations);
        return this;
    }

    /**
     * Get the resourceId property: The resource id of user assigned managed identity.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.innerTypeProperties() == null ? null : this.innerTypeProperties().resourceId();
    }

    /**
     * Set the resourceId property: The resource id of user assigned managed identity.
     * 
     * @param resourceId the resourceId value to set.
     * @return the ManagedIdentityCredential object itself.
     */
    public ManagedIdentityCredential withResourceId(String resourceId) {
        if (this.innerTypeProperties() == null) {
            this.innerTypeProperties = new ManagedIdentityTypeProperties();
        }
        this.innerTypeProperties().withResourceId(resourceId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerTypeProperties() != null) {
            innerTypeProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeArrayField("annotations", annotations(), (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("typeProperties", this.innerTypeProperties);
        if (additionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedIdentityCredential from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedIdentityCredential if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedIdentityCredential.
     */
    public static ManagedIdentityCredential fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedIdentityCredential deserializedManagedIdentityCredential = new ManagedIdentityCredential();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedManagedIdentityCredential.withDescription(reader.getString());
                } else if ("annotations".equals(fieldName)) {
                    List<Object> annotations = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedManagedIdentityCredential.withAnnotations(annotations);
                } else if ("type".equals(fieldName)) {
                    deserializedManagedIdentityCredential.type = reader.getString();
                } else if ("typeProperties".equals(fieldName)) {
                    deserializedManagedIdentityCredential.innerTypeProperties
                        = ManagedIdentityTypeProperties.fromJson(reader);
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedManagedIdentityCredential.withAdditionalProperties(additionalProperties);

            return deserializedManagedIdentityCredential;
        });
    }
}
