// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import java.io.IOException;

/**
 * Azure ML Studio Web Service linked service properties.
 */
@Fluent
public final class AzureMLLinkedServiceTypeProperties implements JsonSerializable<AzureMLLinkedServiceTypeProperties> {
    /*
     * The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with
     * resultType string).
     */
    private Object mlEndpoint;

    /*
     * The API key for accessing the Azure ML model endpoint.
     */
    private SecretBase apiKey;

    /*
     * The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with
     * resultType string).
     */
    private Object updateResourceEndpoint;

    /*
     * The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML
     * Studio web service. Type: string (or Expression with resultType string).
     */
    private Object servicePrincipalId;

    /*
     * The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML
     * Studio web service.
     */
    private SecretBase servicePrincipalKey;

    /*
     * The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType
     * string).
     */
    private Object tenant;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime
     * credential manager. Type: string.
     */
    private String encryptedCredential;

    /*
     * Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with
     * resultType string).
     */
    private Object authentication;

    /**
     * Creates an instance of AzureMLLinkedServiceTypeProperties class.
     */
    public AzureMLLinkedServiceTypeProperties() {
    }

    /**
     * Get the mlEndpoint property: The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type:
     * string (or Expression with resultType string).
     * 
     * @return the mlEndpoint value.
     */
    public Object mlEndpoint() {
        return this.mlEndpoint;
    }

    /**
     * Set the mlEndpoint property: The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type:
     * string (or Expression with resultType string).
     * 
     * @param mlEndpoint the mlEndpoint value to set.
     * @return the AzureMLLinkedServiceTypeProperties object itself.
     */
    public AzureMLLinkedServiceTypeProperties withMlEndpoint(Object mlEndpoint) {
        this.mlEndpoint = mlEndpoint;
        return this;
    }

    /**
     * Get the apiKey property: The API key for accessing the Azure ML model endpoint.
     * 
     * @return the apiKey value.
     */
    public SecretBase apiKey() {
        return this.apiKey;
    }

    /**
     * Set the apiKey property: The API key for accessing the Azure ML model endpoint.
     * 
     * @param apiKey the apiKey value to set.
     * @return the AzureMLLinkedServiceTypeProperties object itself.
     */
    public AzureMLLinkedServiceTypeProperties withApiKey(SecretBase apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Get the updateResourceEndpoint property: The Update Resource REST URL for an Azure ML Studio Web Service
     * endpoint. Type: string (or Expression with resultType string).
     * 
     * @return the updateResourceEndpoint value.
     */
    public Object updateResourceEndpoint() {
        return this.updateResourceEndpoint;
    }

    /**
     * Set the updateResourceEndpoint property: The Update Resource REST URL for an Azure ML Studio Web Service
     * endpoint. Type: string (or Expression with resultType string).
     * 
     * @param updateResourceEndpoint the updateResourceEndpoint value to set.
     * @return the AzureMLLinkedServiceTypeProperties object itself.
     */
    public AzureMLLinkedServiceTypeProperties withUpdateResourceEndpoint(Object updateResourceEndpoint) {
        this.updateResourceEndpoint = updateResourceEndpoint;
        return this;
    }

    /**
     * Get the servicePrincipalId property: The ID of the service principal used to authenticate against the ARM-based
     * updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
     * 
     * @return the servicePrincipalId value.
     */
    public Object servicePrincipalId() {
        return this.servicePrincipalId;
    }

    /**
     * Set the servicePrincipalId property: The ID of the service principal used to authenticate against the ARM-based
     * updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
     * 
     * @param servicePrincipalId the servicePrincipalId value to set.
     * @return the AzureMLLinkedServiceTypeProperties object itself.
     */
    public AzureMLLinkedServiceTypeProperties withServicePrincipalId(Object servicePrincipalId) {
        this.servicePrincipalId = servicePrincipalId;
        return this;
    }

    /**
     * Get the servicePrincipalKey property: The key of the service principal used to authenticate against the ARM-based
     * updateResourceEndpoint of an Azure ML Studio web service.
     * 
     * @return the servicePrincipalKey value.
     */
    public SecretBase servicePrincipalKey() {
        return this.servicePrincipalKey;
    }

    /**
     * Set the servicePrincipalKey property: The key of the service principal used to authenticate against the ARM-based
     * updateResourceEndpoint of an Azure ML Studio web service.
     * 
     * @param servicePrincipalKey the servicePrincipalKey value to set.
     * @return the AzureMLLinkedServiceTypeProperties object itself.
     */
    public AzureMLLinkedServiceTypeProperties withServicePrincipalKey(SecretBase servicePrincipalKey) {
        this.servicePrincipalKey = servicePrincipalKey;
        return this;
    }

    /**
     * Get the tenant property: The name or ID of the tenant to which the service principal belongs. Type: string (or
     * Expression with resultType string).
     * 
     * @return the tenant value.
     */
    public Object tenant() {
        return this.tenant;
    }

    /**
     * Set the tenant property: The name or ID of the tenant to which the service principal belongs. Type: string (or
     * Expression with resultType string).
     * 
     * @param tenant the tenant value to set.
     * @return the AzureMLLinkedServiceTypeProperties object itself.
     */
    public AzureMLLinkedServiceTypeProperties withTenant(Object tenant) {
        this.tenant = tenant;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @return the encryptedCredential value.
     */
    public String encryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the AzureMLLinkedServiceTypeProperties object itself.
     */
    public AzureMLLinkedServiceTypeProperties withEncryptedCredential(String encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Get the authentication property: Type of authentication (Required to specify MSI) used to connect to AzureML.
     * Type: string (or Expression with resultType string).
     * 
     * @return the authentication value.
     */
    public Object authentication() {
        return this.authentication;
    }

    /**
     * Set the authentication property: Type of authentication (Required to specify MSI) used to connect to AzureML.
     * Type: string (or Expression with resultType string).
     * 
     * @param authentication the authentication value to set.
     * @return the AzureMLLinkedServiceTypeProperties object itself.
     */
    public AzureMLLinkedServiceTypeProperties withAuthentication(Object authentication) {
        this.authentication = authentication;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (mlEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property mlEndpoint in model AzureMLLinkedServiceTypeProperties"));
        }
        if (apiKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property apiKey in model AzureMLLinkedServiceTypeProperties"));
        } else {
            apiKey().validate();
        }
        if (servicePrincipalKey() != null) {
            servicePrincipalKey().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureMLLinkedServiceTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("mlEndpoint", this.mlEndpoint);
        jsonWriter.writeJsonField("apiKey", this.apiKey);
        jsonWriter.writeUntypedField("updateResourceEndpoint", this.updateResourceEndpoint);
        jsonWriter.writeUntypedField("servicePrincipalId", this.servicePrincipalId);
        jsonWriter.writeJsonField("servicePrincipalKey", this.servicePrincipalKey);
        jsonWriter.writeUntypedField("tenant", this.tenant);
        jsonWriter.writeStringField("encryptedCredential", this.encryptedCredential);
        jsonWriter.writeUntypedField("authentication", this.authentication);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureMLLinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureMLLinkedServiceTypeProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureMLLinkedServiceTypeProperties.
     */
    public static AzureMLLinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureMLLinkedServiceTypeProperties deserializedAzureMLLinkedServiceTypeProperties
                = new AzureMLLinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mlEndpoint".equals(fieldName)) {
                    deserializedAzureMLLinkedServiceTypeProperties.mlEndpoint = reader.readUntyped();
                } else if ("apiKey".equals(fieldName)) {
                    deserializedAzureMLLinkedServiceTypeProperties.apiKey = SecretBase.fromJson(reader);
                } else if ("updateResourceEndpoint".equals(fieldName)) {
                    deserializedAzureMLLinkedServiceTypeProperties.updateResourceEndpoint = reader.readUntyped();
                } else if ("servicePrincipalId".equals(fieldName)) {
                    deserializedAzureMLLinkedServiceTypeProperties.servicePrincipalId = reader.readUntyped();
                } else if ("servicePrincipalKey".equals(fieldName)) {
                    deserializedAzureMLLinkedServiceTypeProperties.servicePrincipalKey = SecretBase.fromJson(reader);
                } else if ("tenant".equals(fieldName)) {
                    deserializedAzureMLLinkedServiceTypeProperties.tenant = reader.readUntyped();
                } else if ("encryptedCredential".equals(fieldName)) {
                    deserializedAzureMLLinkedServiceTypeProperties.encryptedCredential = reader.getString();
                } else if ("authentication".equals(fieldName)) {
                    deserializedAzureMLLinkedServiceTypeProperties.authentication = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureMLLinkedServiceTypeProperties;
        });
    }
}
