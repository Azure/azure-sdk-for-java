// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import java.io.IOException;

/**
 * Quickbase linked service type properties.
 */
@Fluent
public final class QuickbaseLinkedServiceTypeProperties
    implements JsonSerializable<QuickbaseLinkedServiceTypeProperties> {
    /*
     * The url to connect Quickbase source. Type: string (or Expression with resultType string).
     */
    private Object url;

    /*
     * The user token for the Quickbase source.
     */
    private SecretBase userToken;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime
     * credential manager. Type: string.
     */
    private String encryptedCredential;

    /**
     * Creates an instance of QuickbaseLinkedServiceTypeProperties class.
     */
    public QuickbaseLinkedServiceTypeProperties() {
    }

    /**
     * Get the url property: The url to connect Quickbase source. Type: string (or Expression with resultType string).
     * 
     * @return the url value.
     */
    public Object url() {
        return this.url;
    }

    /**
     * Set the url property: The url to connect Quickbase source. Type: string (or Expression with resultType string).
     * 
     * @param url the url value to set.
     * @return the QuickbaseLinkedServiceTypeProperties object itself.
     */
    public QuickbaseLinkedServiceTypeProperties withUrl(Object url) {
        this.url = url;
        return this;
    }

    /**
     * Get the userToken property: The user token for the Quickbase source.
     * 
     * @return the userToken value.
     */
    public SecretBase userToken() {
        return this.userToken;
    }

    /**
     * Set the userToken property: The user token for the Quickbase source.
     * 
     * @param userToken the userToken value to set.
     * @return the QuickbaseLinkedServiceTypeProperties object itself.
     */
    public QuickbaseLinkedServiceTypeProperties withUserToken(SecretBase userToken) {
        this.userToken = userToken;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @return the encryptedCredential value.
     */
    public String encryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the QuickbaseLinkedServiceTypeProperties object itself.
     */
    public QuickbaseLinkedServiceTypeProperties withEncryptedCredential(String encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (url() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property url in model QuickbaseLinkedServiceTypeProperties"));
        }
        if (userToken() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property userToken in model QuickbaseLinkedServiceTypeProperties"));
        } else {
            userToken().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(QuickbaseLinkedServiceTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("url", this.url);
        jsonWriter.writeJsonField("userToken", this.userToken);
        jsonWriter.writeStringField("encryptedCredential", this.encryptedCredential);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QuickbaseLinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QuickbaseLinkedServiceTypeProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the QuickbaseLinkedServiceTypeProperties.
     */
    public static QuickbaseLinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QuickbaseLinkedServiceTypeProperties deserializedQuickbaseLinkedServiceTypeProperties
                = new QuickbaseLinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("url".equals(fieldName)) {
                    deserializedQuickbaseLinkedServiceTypeProperties.url = reader.readUntyped();
                } else if ("userToken".equals(fieldName)) {
                    deserializedQuickbaseLinkedServiceTypeProperties.userToken = SecretBase.fromJson(reader);
                } else if ("encryptedCredential".equals(fieldName)) {
                    deserializedQuickbaseLinkedServiceTypeProperties.encryptedCredential = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQuickbaseLinkedServiceTypeProperties;
        });
    }
}
