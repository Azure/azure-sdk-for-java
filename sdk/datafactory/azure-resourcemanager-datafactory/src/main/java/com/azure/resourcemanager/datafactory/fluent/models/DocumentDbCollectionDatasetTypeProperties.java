// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DocumentDB Collection dataset properties.
 */
@Fluent
public final class DocumentDbCollectionDatasetTypeProperties
    implements JsonSerializable<DocumentDbCollectionDatasetTypeProperties> {
    /*
     * Document Database collection name. Type: string (or Expression with resultType string).
     */
    private Object collectionName;

    /**
     * Creates an instance of DocumentDbCollectionDatasetTypeProperties class.
     */
    public DocumentDbCollectionDatasetTypeProperties() {
    }

    /**
     * Get the collectionName property: Document Database collection name. Type: string (or Expression with resultType
     * string).
     * 
     * @return the collectionName value.
     */
    public Object collectionName() {
        return this.collectionName;
    }

    /**
     * Set the collectionName property: Document Database collection name. Type: string (or Expression with resultType
     * string).
     * 
     * @param collectionName the collectionName value to set.
     * @return the DocumentDbCollectionDatasetTypeProperties object itself.
     */
    public DocumentDbCollectionDatasetTypeProperties withCollectionName(Object collectionName) {
        this.collectionName = collectionName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (collectionName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property collectionName in model DocumentDbCollectionDatasetTypeProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DocumentDbCollectionDatasetTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("collectionName", this.collectionName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentDbCollectionDatasetTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentDbCollectionDatasetTypeProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DocumentDbCollectionDatasetTypeProperties.
     */
    public static DocumentDbCollectionDatasetTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DocumentDbCollectionDatasetTypeProperties deserializedDocumentDbCollectionDatasetTypeProperties
                = new DocumentDbCollectionDatasetTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("collectionName".equals(fieldName)) {
                    deserializedDocumentDbCollectionDatasetTypeProperties.collectionName = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDocumentDbCollectionDatasetTypeProperties;
        });
    }
}
