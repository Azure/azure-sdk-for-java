// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.fluent.models.MapperTableProperties;
import java.io.IOException;
import java.util.List;

/**
 * CDC table details.
 */
@Fluent
public final class MapperTable implements JsonSerializable<MapperTable> {
    /*
     * Name of the table.
     */
    private String name;

    /*
     * Table properties.
     */
    private MapperTableProperties innerProperties;

    /**
     * Creates an instance of MapperTable class.
     */
    public MapperTable() {
    }

    /**
     * Get the name property: Name of the table.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the table.
     * 
     * @param name the name value to set.
     * @return the MapperTable object itself.
     */
    public MapperTable withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the innerProperties property: Table properties.
     * 
     * @return the innerProperties value.
     */
    private MapperTableProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the schema property: List of columns for the source table.
     * 
     * @return the schema value.
     */
    public List<MapperTableSchema> schema() {
        return this.innerProperties() == null ? null : this.innerProperties().schema();
    }

    /**
     * Set the schema property: List of columns for the source table.
     * 
     * @param schema the schema value to set.
     * @return the MapperTable object itself.
     */
    public MapperTable withSchema(List<MapperTableSchema> schema) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MapperTableProperties();
        }
        this.innerProperties().withSchema(schema);
        return this;
    }

    /**
     * Get the dslConnectorProperties property: List of name/value pairs for connection properties.
     * 
     * @return the dslConnectorProperties value.
     */
    public List<MapperDslConnectorProperties> dslConnectorProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().dslConnectorProperties();
    }

    /**
     * Set the dslConnectorProperties property: List of name/value pairs for connection properties.
     * 
     * @param dslConnectorProperties the dslConnectorProperties value to set.
     * @return the MapperTable object itself.
     */
    public MapperTable withDslConnectorProperties(List<MapperDslConnectorProperties> dslConnectorProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MapperTableProperties();
        }
        this.innerProperties().withDslConnectorProperties(dslConnectorProperties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MapperTable from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MapperTable if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MapperTable.
     */
    public static MapperTable fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MapperTable deserializedMapperTable = new MapperTable();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedMapperTable.name = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedMapperTable.innerProperties = MapperTableProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMapperTable;
        });
    }
}
