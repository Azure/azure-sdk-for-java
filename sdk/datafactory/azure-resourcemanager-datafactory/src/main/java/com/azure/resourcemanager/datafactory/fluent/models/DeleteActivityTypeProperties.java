// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import java.io.IOException;

/**
 * Delete activity properties.
 */
@Fluent
public final class DeleteActivityTypeProperties implements JsonSerializable<DeleteActivityTypeProperties> {
    /*
     * If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type:
     * boolean (or Expression with resultType boolean).
     */
    private Object recursive;

    /*
     * The max concurrent connections to connect data source at the same time.
     */
    private Integer maxConcurrentConnections;

    /*
     * Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or
     * Expression with resultType boolean).
     */
    private Object enableLogging;

    /*
     * Log storage settings customer need to provide when enableLogging is true.
     */
    private LogStorageSettings logStorageSettings;

    /*
     * Delete activity dataset reference.
     */
    private DatasetReference dataset;

    /*
     * Delete activity store settings.
     */
    private StoreReadSettings storeSettings;

    /**
     * Creates an instance of DeleteActivityTypeProperties class.
     */
    public DeleteActivityTypeProperties() {
    }

    /**
     * Get the recursive property: If true, files or sub-folders under current folder path will be deleted recursively.
     * Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     * @return the recursive value.
     */
    public Object recursive() {
        return this.recursive;
    }

    /**
     * Set the recursive property: If true, files or sub-folders under current folder path will be deleted recursively.
     * Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     * @param recursive the recursive value to set.
     * @return the DeleteActivityTypeProperties object itself.
     */
    public DeleteActivityTypeProperties withRecursive(Object recursive) {
        this.recursive = recursive;
        return this;
    }

    /**
     * Get the maxConcurrentConnections property: The max concurrent connections to connect data source at the same
     * time.
     * 
     * @return the maxConcurrentConnections value.
     */
    public Integer maxConcurrentConnections() {
        return this.maxConcurrentConnections;
    }

    /**
     * Set the maxConcurrentConnections property: The max concurrent connections to connect data source at the same
     * time.
     * 
     * @param maxConcurrentConnections the maxConcurrentConnections value to set.
     * @return the DeleteActivityTypeProperties object itself.
     */
    public DeleteActivityTypeProperties withMaxConcurrentConnections(Integer maxConcurrentConnections) {
        this.maxConcurrentConnections = maxConcurrentConnections;
        return this;
    }

    /**
     * Get the enableLogging property: Whether to record detailed logs of delete-activity execution. Default value is
     * false. Type: boolean (or Expression with resultType boolean).
     * 
     * @return the enableLogging value.
     */
    public Object enableLogging() {
        return this.enableLogging;
    }

    /**
     * Set the enableLogging property: Whether to record detailed logs of delete-activity execution. Default value is
     * false. Type: boolean (or Expression with resultType boolean).
     * 
     * @param enableLogging the enableLogging value to set.
     * @return the DeleteActivityTypeProperties object itself.
     */
    public DeleteActivityTypeProperties withEnableLogging(Object enableLogging) {
        this.enableLogging = enableLogging;
        return this;
    }

    /**
     * Get the logStorageSettings property: Log storage settings customer need to provide when enableLogging is true.
     * 
     * @return the logStorageSettings value.
     */
    public LogStorageSettings logStorageSettings() {
        return this.logStorageSettings;
    }

    /**
     * Set the logStorageSettings property: Log storage settings customer need to provide when enableLogging is true.
     * 
     * @param logStorageSettings the logStorageSettings value to set.
     * @return the DeleteActivityTypeProperties object itself.
     */
    public DeleteActivityTypeProperties withLogStorageSettings(LogStorageSettings logStorageSettings) {
        this.logStorageSettings = logStorageSettings;
        return this;
    }

    /**
     * Get the dataset property: Delete activity dataset reference.
     * 
     * @return the dataset value.
     */
    public DatasetReference dataset() {
        return this.dataset;
    }

    /**
     * Set the dataset property: Delete activity dataset reference.
     * 
     * @param dataset the dataset value to set.
     * @return the DeleteActivityTypeProperties object itself.
     */
    public DeleteActivityTypeProperties withDataset(DatasetReference dataset) {
        this.dataset = dataset;
        return this;
    }

    /**
     * Get the storeSettings property: Delete activity store settings.
     * 
     * @return the storeSettings value.
     */
    public StoreReadSettings storeSettings() {
        return this.storeSettings;
    }

    /**
     * Set the storeSettings property: Delete activity store settings.
     * 
     * @param storeSettings the storeSettings value to set.
     * @return the DeleteActivityTypeProperties object itself.
     */
    public DeleteActivityTypeProperties withStoreSettings(StoreReadSettings storeSettings) {
        this.storeSettings = storeSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (logStorageSettings() != null) {
            logStorageSettings().validate();
        }
        if (dataset() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataset in model DeleteActivityTypeProperties"));
        } else {
            dataset().validate();
        }
        if (storeSettings() != null) {
            storeSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DeleteActivityTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("dataset", this.dataset);
        jsonWriter.writeUntypedField("recursive", this.recursive);
        jsonWriter.writeNumberField("maxConcurrentConnections", this.maxConcurrentConnections);
        jsonWriter.writeUntypedField("enableLogging", this.enableLogging);
        jsonWriter.writeJsonField("logStorageSettings", this.logStorageSettings);
        jsonWriter.writeJsonField("storeSettings", this.storeSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeleteActivityTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeleteActivityTypeProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeleteActivityTypeProperties.
     */
    public static DeleteActivityTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeleteActivityTypeProperties deserializedDeleteActivityTypeProperties = new DeleteActivityTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataset".equals(fieldName)) {
                    deserializedDeleteActivityTypeProperties.dataset = DatasetReference.fromJson(reader);
                } else if ("recursive".equals(fieldName)) {
                    deserializedDeleteActivityTypeProperties.recursive = reader.readUntyped();
                } else if ("maxConcurrentConnections".equals(fieldName)) {
                    deserializedDeleteActivityTypeProperties.maxConcurrentConnections
                        = reader.getNullable(JsonReader::getInt);
                } else if ("enableLogging".equals(fieldName)) {
                    deserializedDeleteActivityTypeProperties.enableLogging = reader.readUntyped();
                } else if ("logStorageSettings".equals(fieldName)) {
                    deserializedDeleteActivityTypeProperties.logStorageSettings = LogStorageSettings.fromJson(reader);
                } else if ("storeSettings".equals(fieldName)) {
                    deserializedDeleteActivityTypeProperties.storeSettings = StoreReadSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeleteActivityTypeProperties;
        });
    }
}
