// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * A copy activity Azure CosmosDB (SQL API) Collection source.
 */
@Fluent
public final class CosmosDbSqlApiSource extends CopySource {
    /*
     * Copy source type.
     */
    private String type = "CosmosDbSqlApiSource";

    /*
     * SQL API query. Type: string (or Expression with resultType string).
     */
    private Object query;

    /*
     * Page size of the result. Type: integer (or Expression with resultType integer).
     */
    private Object pageSize;

    /*
     * Preferred regions. Type: array of strings (or Expression with resultType array of strings).
     */
    private Object preferredRegions;

    /*
     * Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean).
     */
    private Object detectDatetime;

    /*
     * Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or
     * Expression with resultType array of objects).
     */
    private Object additionalColumns;

    /**
     * Creates an instance of CosmosDbSqlApiSource class.
     */
    public CosmosDbSqlApiSource() {
    }

    /**
     * Get the type property: Copy source type.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the query property: SQL API query. Type: string (or Expression with resultType string).
     * 
     * @return the query value.
     */
    public Object query() {
        return this.query;
    }

    /**
     * Set the query property: SQL API query. Type: string (or Expression with resultType string).
     * 
     * @param query the query value to set.
     * @return the CosmosDbSqlApiSource object itself.
     */
    public CosmosDbSqlApiSource withQuery(Object query) {
        this.query = query;
        return this;
    }

    /**
     * Get the pageSize property: Page size of the result. Type: integer (or Expression with resultType integer).
     * 
     * @return the pageSize value.
     */
    public Object pageSize() {
        return this.pageSize;
    }

    /**
     * Set the pageSize property: Page size of the result. Type: integer (or Expression with resultType integer).
     * 
     * @param pageSize the pageSize value to set.
     * @return the CosmosDbSqlApiSource object itself.
     */
    public CosmosDbSqlApiSource withPageSize(Object pageSize) {
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Get the preferredRegions property: Preferred regions. Type: array of strings (or Expression with resultType array
     * of strings).
     * 
     * @return the preferredRegions value.
     */
    public Object preferredRegions() {
        return this.preferredRegions;
    }

    /**
     * Set the preferredRegions property: Preferred regions. Type: array of strings (or Expression with resultType array
     * of strings).
     * 
     * @param preferredRegions the preferredRegions value to set.
     * @return the CosmosDbSqlApiSource object itself.
     */
    public CosmosDbSqlApiSource withPreferredRegions(Object preferredRegions) {
        this.preferredRegions = preferredRegions;
        return this;
    }

    /**
     * Get the detectDatetime property: Whether detect primitive values as datetime values. Type: boolean (or Expression
     * with resultType boolean).
     * 
     * @return the detectDatetime value.
     */
    public Object detectDatetime() {
        return this.detectDatetime;
    }

    /**
     * Set the detectDatetime property: Whether detect primitive values as datetime values. Type: boolean (or Expression
     * with resultType boolean).
     * 
     * @param detectDatetime the detectDatetime value to set.
     * @return the CosmosDbSqlApiSource object itself.
     */
    public CosmosDbSqlApiSource withDetectDatetime(Object detectDatetime) {
        this.detectDatetime = detectDatetime;
        return this;
    }

    /**
     * Get the additionalColumns property: Specifies the additional columns to be added to source data. Type: array of
     * objects(AdditionalColumns) (or Expression with resultType array of objects).
     * 
     * @return the additionalColumns value.
     */
    public Object additionalColumns() {
        return this.additionalColumns;
    }

    /**
     * Set the additionalColumns property: Specifies the additional columns to be added to source data. Type: array of
     * objects(AdditionalColumns) (or Expression with resultType array of objects).
     * 
     * @param additionalColumns the additionalColumns value to set.
     * @return the CosmosDbSqlApiSource object itself.
     */
    public CosmosDbSqlApiSource withAdditionalColumns(Object additionalColumns) {
        this.additionalColumns = additionalColumns;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CosmosDbSqlApiSource withSourceRetryCount(Object sourceRetryCount) {
        super.withSourceRetryCount(sourceRetryCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CosmosDbSqlApiSource withSourceRetryWait(Object sourceRetryWait) {
        super.withSourceRetryWait(sourceRetryWait);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CosmosDbSqlApiSource withMaxConcurrentConnections(Object maxConcurrentConnections) {
        super.withMaxConcurrentConnections(maxConcurrentConnections);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CosmosDbSqlApiSource withDisableMetricsCollection(Object disableMetricsCollection) {
        super.withDisableMetricsCollection(disableMetricsCollection);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("sourceRetryCount", sourceRetryCount());
        jsonWriter.writeUntypedField("sourceRetryWait", sourceRetryWait());
        jsonWriter.writeUntypedField("maxConcurrentConnections", maxConcurrentConnections());
        jsonWriter.writeUntypedField("disableMetricsCollection", disableMetricsCollection());
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeUntypedField("query", this.query);
        jsonWriter.writeUntypedField("pageSize", this.pageSize);
        jsonWriter.writeUntypedField("preferredRegions", this.preferredRegions);
        jsonWriter.writeUntypedField("detectDatetime", this.detectDatetime);
        jsonWriter.writeUntypedField("additionalColumns", this.additionalColumns);
        if (additionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CosmosDbSqlApiSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CosmosDbSqlApiSource if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CosmosDbSqlApiSource.
     */
    public static CosmosDbSqlApiSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CosmosDbSqlApiSource deserializedCosmosDbSqlApiSource = new CosmosDbSqlApiSource();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceRetryCount".equals(fieldName)) {
                    deserializedCosmosDbSqlApiSource.withSourceRetryCount(reader.readUntyped());
                } else if ("sourceRetryWait".equals(fieldName)) {
                    deserializedCosmosDbSqlApiSource.withSourceRetryWait(reader.readUntyped());
                } else if ("maxConcurrentConnections".equals(fieldName)) {
                    deserializedCosmosDbSqlApiSource.withMaxConcurrentConnections(reader.readUntyped());
                } else if ("disableMetricsCollection".equals(fieldName)) {
                    deserializedCosmosDbSqlApiSource.withDisableMetricsCollection(reader.readUntyped());
                } else if ("type".equals(fieldName)) {
                    deserializedCosmosDbSqlApiSource.type = reader.getString();
                } else if ("query".equals(fieldName)) {
                    deserializedCosmosDbSqlApiSource.query = reader.readUntyped();
                } else if ("pageSize".equals(fieldName)) {
                    deserializedCosmosDbSqlApiSource.pageSize = reader.readUntyped();
                } else if ("preferredRegions".equals(fieldName)) {
                    deserializedCosmosDbSqlApiSource.preferredRegions = reader.readUntyped();
                } else if ("detectDatetime".equals(fieldName)) {
                    deserializedCosmosDbSqlApiSource.detectDatetime = reader.readUntyped();
                } else if ("additionalColumns".equals(fieldName)) {
                    deserializedCosmosDbSqlApiSource.additionalColumns = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedCosmosDbSqlApiSource.withAdditionalProperties(additionalProperties);

            return deserializedCosmosDbSqlApiSource;
        });
    }
}
