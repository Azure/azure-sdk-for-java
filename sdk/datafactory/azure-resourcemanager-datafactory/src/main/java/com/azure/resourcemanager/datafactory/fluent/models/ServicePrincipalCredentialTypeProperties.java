// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.AzureKeyVaultSecretReference;
import java.io.IOException;

/**
 * Service Principal credential type properties.
 */
@Fluent
public final class ServicePrincipalCredentialTypeProperties
    implements JsonSerializable<ServicePrincipalCredentialTypeProperties> {
    /*
     * The app ID of the service principal used to authenticate
     */
    private Object servicePrincipalId;

    /*
     * The key of the service principal used to authenticate.
     */
    private AzureKeyVaultSecretReference servicePrincipalKey;

    /*
     * The ID of the tenant to which the service principal belongs
     */
    private Object tenant;

    /**
     * Creates an instance of ServicePrincipalCredentialTypeProperties class.
     */
    public ServicePrincipalCredentialTypeProperties() {
    }

    /**
     * Get the servicePrincipalId property: The app ID of the service principal used to authenticate.
     * 
     * @return the servicePrincipalId value.
     */
    public Object servicePrincipalId() {
        return this.servicePrincipalId;
    }

    /**
     * Set the servicePrincipalId property: The app ID of the service principal used to authenticate.
     * 
     * @param servicePrincipalId the servicePrincipalId value to set.
     * @return the ServicePrincipalCredentialTypeProperties object itself.
     */
    public ServicePrincipalCredentialTypeProperties withServicePrincipalId(Object servicePrincipalId) {
        this.servicePrincipalId = servicePrincipalId;
        return this;
    }

    /**
     * Get the servicePrincipalKey property: The key of the service principal used to authenticate.
     * 
     * @return the servicePrincipalKey value.
     */
    public AzureKeyVaultSecretReference servicePrincipalKey() {
        return this.servicePrincipalKey;
    }

    /**
     * Set the servicePrincipalKey property: The key of the service principal used to authenticate.
     * 
     * @param servicePrincipalKey the servicePrincipalKey value to set.
     * @return the ServicePrincipalCredentialTypeProperties object itself.
     */
    public ServicePrincipalCredentialTypeProperties
        withServicePrincipalKey(AzureKeyVaultSecretReference servicePrincipalKey) {
        this.servicePrincipalKey = servicePrincipalKey;
        return this;
    }

    /**
     * Get the tenant property: The ID of the tenant to which the service principal belongs.
     * 
     * @return the tenant value.
     */
    public Object tenant() {
        return this.tenant;
    }

    /**
     * Set the tenant property: The ID of the tenant to which the service principal belongs.
     * 
     * @param tenant the tenant value to set.
     * @return the ServicePrincipalCredentialTypeProperties object itself.
     */
    public ServicePrincipalCredentialTypeProperties withTenant(Object tenant) {
        this.tenant = tenant;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (servicePrincipalKey() != null) {
            servicePrincipalKey().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("servicePrincipalId", this.servicePrincipalId);
        jsonWriter.writeJsonField("servicePrincipalKey", this.servicePrincipalKey);
        jsonWriter.writeUntypedField("tenant", this.tenant);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServicePrincipalCredentialTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServicePrincipalCredentialTypeProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServicePrincipalCredentialTypeProperties.
     */
    public static ServicePrincipalCredentialTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServicePrincipalCredentialTypeProperties deserializedServicePrincipalCredentialTypeProperties
                = new ServicePrincipalCredentialTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("servicePrincipalId".equals(fieldName)) {
                    deserializedServicePrincipalCredentialTypeProperties.servicePrincipalId = reader.readUntyped();
                } else if ("servicePrincipalKey".equals(fieldName)) {
                    deserializedServicePrincipalCredentialTypeProperties.servicePrincipalKey
                        = AzureKeyVaultSecretReference.fromJson(reader);
                } else if ("tenant".equals(fieldName)) {
                    deserializedServicePrincipalCredentialTypeProperties.tenant = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServicePrincipalCredentialTypeProperties;
        });
    }
}
