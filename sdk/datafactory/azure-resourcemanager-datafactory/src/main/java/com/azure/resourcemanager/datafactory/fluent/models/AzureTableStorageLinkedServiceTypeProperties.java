// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.AzureKeyVaultSecretReference;
import com.azure.resourcemanager.datafactory.models.CredentialReference;
import java.io.IOException;

/**
 * Azure Table Storage linked service properties.
 */
@Fluent
public final class AzureTableStorageLinkedServiceTypeProperties extends AzureStorageLinkedServiceTypeProperties {
    /*
     * Table service endpoint of the Azure Table Storage resource. It is mutually exclusive with connectionString,
     * sasUri property.
     */
    private Object serviceEndpoint;

    /*
     * The credential reference containing authentication information.
     */
    private CredentialReference credential;

    /**
     * Creates an instance of AzureTableStorageLinkedServiceTypeProperties class.
     */
    public AzureTableStorageLinkedServiceTypeProperties() {
    }

    /**
     * Get the serviceEndpoint property: Table service endpoint of the Azure Table Storage resource. It is mutually
     * exclusive with connectionString, sasUri property.
     * 
     * @return the serviceEndpoint value.
     */
    public Object serviceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * Set the serviceEndpoint property: Table service endpoint of the Azure Table Storage resource. It is mutually
     * exclusive with connectionString, sasUri property.
     * 
     * @param serviceEndpoint the serviceEndpoint value to set.
     * @return the AzureTableStorageLinkedServiceTypeProperties object itself.
     */
    public AzureTableStorageLinkedServiceTypeProperties withServiceEndpoint(Object serviceEndpoint) {
        this.serviceEndpoint = serviceEndpoint;
        return this;
    }

    /**
     * Get the credential property: The credential reference containing authentication information.
     * 
     * @return the credential value.
     */
    public CredentialReference credential() {
        return this.credential;
    }

    /**
     * Set the credential property: The credential reference containing authentication information.
     * 
     * @param credential the credential value to set.
     * @return the AzureTableStorageLinkedServiceTypeProperties object itself.
     */
    public AzureTableStorageLinkedServiceTypeProperties withCredential(CredentialReference credential) {
        this.credential = credential;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureTableStorageLinkedServiceTypeProperties withConnectionString(Object connectionString) {
        super.withConnectionString(connectionString);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureTableStorageLinkedServiceTypeProperties withAccountKey(AzureKeyVaultSecretReference accountKey) {
        super.withAccountKey(accountKey);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureTableStorageLinkedServiceTypeProperties withSasUri(Object sasUri) {
        super.withSasUri(sasUri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureTableStorageLinkedServiceTypeProperties withSasToken(AzureKeyVaultSecretReference sasToken) {
        super.withSasToken(sasToken);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureTableStorageLinkedServiceTypeProperties withEncryptedCredential(String encryptedCredential) {
        super.withEncryptedCredential(encryptedCredential);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (credential() != null) {
            credential().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("connectionString", connectionString());
        jsonWriter.writeJsonField("accountKey", accountKey());
        jsonWriter.writeUntypedField("sasUri", sasUri());
        jsonWriter.writeJsonField("sasToken", sasToken());
        jsonWriter.writeStringField("encryptedCredential", encryptedCredential());
        jsonWriter.writeUntypedField("serviceEndpoint", this.serviceEndpoint);
        jsonWriter.writeJsonField("credential", this.credential);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureTableStorageLinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureTableStorageLinkedServiceTypeProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureTableStorageLinkedServiceTypeProperties.
     */
    public static AzureTableStorageLinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureTableStorageLinkedServiceTypeProperties deserializedAzureTableStorageLinkedServiceTypeProperties
                = new AzureTableStorageLinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectionString".equals(fieldName)) {
                    deserializedAzureTableStorageLinkedServiceTypeProperties.withConnectionString(reader.readUntyped());
                } else if ("accountKey".equals(fieldName)) {
                    deserializedAzureTableStorageLinkedServiceTypeProperties
                        .withAccountKey(AzureKeyVaultSecretReference.fromJson(reader));
                } else if ("sasUri".equals(fieldName)) {
                    deserializedAzureTableStorageLinkedServiceTypeProperties.withSasUri(reader.readUntyped());
                } else if ("sasToken".equals(fieldName)) {
                    deserializedAzureTableStorageLinkedServiceTypeProperties
                        .withSasToken(AzureKeyVaultSecretReference.fromJson(reader));
                } else if ("encryptedCredential".equals(fieldName)) {
                    deserializedAzureTableStorageLinkedServiceTypeProperties
                        .withEncryptedCredential(reader.getString());
                } else if ("serviceEndpoint".equals(fieldName)) {
                    deserializedAzureTableStorageLinkedServiceTypeProperties.serviceEndpoint = reader.readUntyped();
                } else if ("credential".equals(fieldName)) {
                    deserializedAzureTableStorageLinkedServiceTypeProperties.credential
                        = CredentialReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureTableStorageLinkedServiceTypeProperties;
        });
    }
}
