// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import java.io.IOException;

/**
 * Excel dataset properties.
 */
@Fluent
public final class ExcelDatasetTypeProperties implements JsonSerializable<ExcelDatasetTypeProperties> {
    /*
     * The location of the excel storage.
     */
    private DatasetLocation location;

    /*
     * The sheet name of excel file. Type: string (or Expression with resultType string).
     */
    private Object sheetName;

    /*
     * The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
     */
    private Object sheetIndex;

    /*
     * The partial data of one sheet. Type: string (or Expression with resultType string).
     */
    private Object range;

    /*
     * When used as input, treat the first row of data as headers. When used as output,write the headers into the output
     * as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
     */
    private Object firstRowAsHeader;

    /*
     * The data compression method used for the json dataset.
     */
    private DatasetCompression compression;

    /*
     * The null value string. Type: string (or Expression with resultType string).
     */
    private Object nullValue;

    /**
     * Creates an instance of ExcelDatasetTypeProperties class.
     */
    public ExcelDatasetTypeProperties() {
    }

    /**
     * Get the location property: The location of the excel storage.
     * 
     * @return the location value.
     */
    public DatasetLocation location() {
        return this.location;
    }

    /**
     * Set the location property: The location of the excel storage.
     * 
     * @param location the location value to set.
     * @return the ExcelDatasetTypeProperties object itself.
     */
    public ExcelDatasetTypeProperties withLocation(DatasetLocation location) {
        this.location = location;
        return this;
    }

    /**
     * Get the sheetName property: The sheet name of excel file. Type: string (or Expression with resultType string).
     * 
     * @return the sheetName value.
     */
    public Object sheetName() {
        return this.sheetName;
    }

    /**
     * Set the sheetName property: The sheet name of excel file. Type: string (or Expression with resultType string).
     * 
     * @param sheetName the sheetName value to set.
     * @return the ExcelDatasetTypeProperties object itself.
     */
    public ExcelDatasetTypeProperties withSheetName(Object sheetName) {
        this.sheetName = sheetName;
        return this;
    }

    /**
     * Get the sheetIndex property: The sheet index of excel file and default value is 0. Type: integer (or Expression
     * with resultType integer).
     * 
     * @return the sheetIndex value.
     */
    public Object sheetIndex() {
        return this.sheetIndex;
    }

    /**
     * Set the sheetIndex property: The sheet index of excel file and default value is 0. Type: integer (or Expression
     * with resultType integer).
     * 
     * @param sheetIndex the sheetIndex value to set.
     * @return the ExcelDatasetTypeProperties object itself.
     */
    public ExcelDatasetTypeProperties withSheetIndex(Object sheetIndex) {
        this.sheetIndex = sheetIndex;
        return this;
    }

    /**
     * Get the range property: The partial data of one sheet. Type: string (or Expression with resultType string).
     * 
     * @return the range value.
     */
    public Object range() {
        return this.range;
    }

    /**
     * Set the range property: The partial data of one sheet. Type: string (or Expression with resultType string).
     * 
     * @param range the range value to set.
     * @return the ExcelDatasetTypeProperties object itself.
     */
    public ExcelDatasetTypeProperties withRange(Object range) {
        this.range = range;
        return this;
    }

    /**
     * Get the firstRowAsHeader property: When used as input, treat the first row of data as headers. When used as
     * output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or
     * Expression with resultType boolean).
     * 
     * @return the firstRowAsHeader value.
     */
    public Object firstRowAsHeader() {
        return this.firstRowAsHeader;
    }

    /**
     * Set the firstRowAsHeader property: When used as input, treat the first row of data as headers. When used as
     * output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or
     * Expression with resultType boolean).
     * 
     * @param firstRowAsHeader the firstRowAsHeader value to set.
     * @return the ExcelDatasetTypeProperties object itself.
     */
    public ExcelDatasetTypeProperties withFirstRowAsHeader(Object firstRowAsHeader) {
        this.firstRowAsHeader = firstRowAsHeader;
        return this;
    }

    /**
     * Get the compression property: The data compression method used for the json dataset.
     * 
     * @return the compression value.
     */
    public DatasetCompression compression() {
        return this.compression;
    }

    /**
     * Set the compression property: The data compression method used for the json dataset.
     * 
     * @param compression the compression value to set.
     * @return the ExcelDatasetTypeProperties object itself.
     */
    public ExcelDatasetTypeProperties withCompression(DatasetCompression compression) {
        this.compression = compression;
        return this;
    }

    /**
     * Get the nullValue property: The null value string. Type: string (or Expression with resultType string).
     * 
     * @return the nullValue value.
     */
    public Object nullValue() {
        return this.nullValue;
    }

    /**
     * Set the nullValue property: The null value string. Type: string (or Expression with resultType string).
     * 
     * @param nullValue the nullValue value to set.
     * @return the ExcelDatasetTypeProperties object itself.
     */
    public ExcelDatasetTypeProperties withNullValue(Object nullValue) {
        this.nullValue = nullValue;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (location() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property location in model ExcelDatasetTypeProperties"));
        } else {
            location().validate();
        }
        if (compression() != null) {
            compression().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExcelDatasetTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("location", this.location);
        jsonWriter.writeUntypedField("sheetName", this.sheetName);
        jsonWriter.writeUntypedField("sheetIndex", this.sheetIndex);
        jsonWriter.writeUntypedField("range", this.range);
        jsonWriter.writeUntypedField("firstRowAsHeader", this.firstRowAsHeader);
        jsonWriter.writeJsonField("compression", this.compression);
        jsonWriter.writeUntypedField("nullValue", this.nullValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExcelDatasetTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExcelDatasetTypeProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExcelDatasetTypeProperties.
     */
    public static ExcelDatasetTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExcelDatasetTypeProperties deserializedExcelDatasetTypeProperties = new ExcelDatasetTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("location".equals(fieldName)) {
                    deserializedExcelDatasetTypeProperties.location = DatasetLocation.fromJson(reader);
                } else if ("sheetName".equals(fieldName)) {
                    deserializedExcelDatasetTypeProperties.sheetName = reader.readUntyped();
                } else if ("sheetIndex".equals(fieldName)) {
                    deserializedExcelDatasetTypeProperties.sheetIndex = reader.readUntyped();
                } else if ("range".equals(fieldName)) {
                    deserializedExcelDatasetTypeProperties.range = reader.readUntyped();
                } else if ("firstRowAsHeader".equals(fieldName)) {
                    deserializedExcelDatasetTypeProperties.firstRowAsHeader = reader.readUntyped();
                } else if ("compression".equals(fieldName)) {
                    deserializedExcelDatasetTypeProperties.compression = DatasetCompression.fromJson(reader);
                } else if ("nullValue".equals(fieldName)) {
                    deserializedExcelDatasetTypeProperties.nullValue = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExcelDatasetTypeProperties;
        });
    }
}
