// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.ScriptActivityScriptBlock;
import com.azure.resourcemanager.datafactory.models.ScriptActivityTypePropertiesLogSettings;
import java.io.IOException;
import java.util.List;

/**
 * Script activity properties.
 */
@Fluent
public final class ScriptActivityTypeProperties implements JsonSerializable<ScriptActivityTypeProperties> {
    /*
     * ScriptBlock execution timeout. Type: string (or Expression with resultType string), pattern:
     * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     */
    private Object scriptBlockExecutionTimeout;

    /*
     * Array of script blocks. Type: array.
     */
    private List<ScriptActivityScriptBlock> scripts;

    /*
     * Log settings of script activity.
     */
    private ScriptActivityTypePropertiesLogSettings logSettings;

    /**
     * Creates an instance of ScriptActivityTypeProperties class.
     */
    public ScriptActivityTypeProperties() {
    }

    /**
     * Get the scriptBlockExecutionTimeout property: ScriptBlock execution timeout. Type: string (or Expression with
     * resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     * @return the scriptBlockExecutionTimeout value.
     */
    public Object scriptBlockExecutionTimeout() {
        return this.scriptBlockExecutionTimeout;
    }

    /**
     * Set the scriptBlockExecutionTimeout property: ScriptBlock execution timeout. Type: string (or Expression with
     * resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     * @param scriptBlockExecutionTimeout the scriptBlockExecutionTimeout value to set.
     * @return the ScriptActivityTypeProperties object itself.
     */
    public ScriptActivityTypeProperties withScriptBlockExecutionTimeout(Object scriptBlockExecutionTimeout) {
        this.scriptBlockExecutionTimeout = scriptBlockExecutionTimeout;
        return this;
    }

    /**
     * Get the scripts property: Array of script blocks. Type: array.
     * 
     * @return the scripts value.
     */
    public List<ScriptActivityScriptBlock> scripts() {
        return this.scripts;
    }

    /**
     * Set the scripts property: Array of script blocks. Type: array.
     * 
     * @param scripts the scripts value to set.
     * @return the ScriptActivityTypeProperties object itself.
     */
    public ScriptActivityTypeProperties withScripts(List<ScriptActivityScriptBlock> scripts) {
        this.scripts = scripts;
        return this;
    }

    /**
     * Get the logSettings property: Log settings of script activity.
     * 
     * @return the logSettings value.
     */
    public ScriptActivityTypePropertiesLogSettings logSettings() {
        return this.logSettings;
    }

    /**
     * Set the logSettings property: Log settings of script activity.
     * 
     * @param logSettings the logSettings value to set.
     * @return the ScriptActivityTypeProperties object itself.
     */
    public ScriptActivityTypeProperties withLogSettings(ScriptActivityTypePropertiesLogSettings logSettings) {
        this.logSettings = logSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scripts() != null) {
            scripts().forEach(e -> e.validate());
        }
        if (logSettings() != null) {
            logSettings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("scriptBlockExecutionTimeout", this.scriptBlockExecutionTimeout);
        jsonWriter.writeArrayField("scripts", this.scripts, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("logSettings", this.logSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScriptActivityTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScriptActivityTypeProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScriptActivityTypeProperties.
     */
    public static ScriptActivityTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScriptActivityTypeProperties deserializedScriptActivityTypeProperties = new ScriptActivityTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scriptBlockExecutionTimeout".equals(fieldName)) {
                    deserializedScriptActivityTypeProperties.scriptBlockExecutionTimeout = reader.readUntyped();
                } else if ("scripts".equals(fieldName)) {
                    List<ScriptActivityScriptBlock> scripts
                        = reader.readArray(reader1 -> ScriptActivityScriptBlock.fromJson(reader1));
                    deserializedScriptActivityTypeProperties.scripts = scripts;
                } else if ("logSettings".equals(fieldName)) {
                    deserializedScriptActivityTypeProperties.logSettings
                        = ScriptActivityTypePropertiesLogSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScriptActivityTypeProperties;
        });
    }
}
