// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The key authorization type integration runtime.
 */
@Fluent
public final class LinkedIntegrationRuntimeKeyAuthorization extends LinkedIntegrationRuntimeType {
    /*
     * The authorization type for integration runtime sharing.
     */
    private String authorizationType = "Key";

    /*
     * The key used for authorization.
     */
    private SecureString key;

    /**
     * Creates an instance of LinkedIntegrationRuntimeKeyAuthorization class.
     */
    public LinkedIntegrationRuntimeKeyAuthorization() {
    }

    /**
     * Get the authorizationType property: The authorization type for integration runtime sharing.
     * 
     * @return the authorizationType value.
     */
    @Override
    public String authorizationType() {
        return this.authorizationType;
    }

    /**
     * Get the key property: The key used for authorization.
     * 
     * @return the key value.
     */
    public SecureString key() {
        return this.key;
    }

    /**
     * Set the key property: The key used for authorization.
     * 
     * @param key the key value to set.
     * @return the LinkedIntegrationRuntimeKeyAuthorization object itself.
     */
    public LinkedIntegrationRuntimeKeyAuthorization withKey(SecureString key) {
        this.key = key;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (key() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property key in model LinkedIntegrationRuntimeKeyAuthorization"));
        } else {
            key().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LinkedIntegrationRuntimeKeyAuthorization.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("key", this.key);
        jsonWriter.writeStringField("authorizationType", this.authorizationType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinkedIntegrationRuntimeKeyAuthorization from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinkedIntegrationRuntimeKeyAuthorization if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LinkedIntegrationRuntimeKeyAuthorization.
     */
    public static LinkedIntegrationRuntimeKeyAuthorization fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinkedIntegrationRuntimeKeyAuthorization deserializedLinkedIntegrationRuntimeKeyAuthorization
                = new LinkedIntegrationRuntimeKeyAuthorization();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("key".equals(fieldName)) {
                    deserializedLinkedIntegrationRuntimeKeyAuthorization.key = SecureString.fromJson(reader);
                } else if ("authorizationType".equals(fieldName)) {
                    deserializedLinkedIntegrationRuntimeKeyAuthorization.authorizationType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinkedIntegrationRuntimeKeyAuthorization;
        });
    }
}
