// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of a single parameter for an entity.
 */
@Fluent
public final class GlobalParameterSpecification implements JsonSerializable<GlobalParameterSpecification> {
    /*
     * Global Parameter type.
     */
    private GlobalParameterType type;

    /*
     * Value of parameter.
     */
    private Object value;

    /**
     * Creates an instance of GlobalParameterSpecification class.
     */
    public GlobalParameterSpecification() {
    }

    /**
     * Get the type property: Global Parameter type.
     * 
     * @return the type value.
     */
    public GlobalParameterType type() {
        return this.type;
    }

    /**
     * Set the type property: Global Parameter type.
     * 
     * @param type the type value to set.
     * @return the GlobalParameterSpecification object itself.
     */
    public GlobalParameterSpecification withType(GlobalParameterType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the value property: Value of parameter.
     * 
     * @return the value value.
     */
    public Object value() {
        return this.value;
    }

    /**
     * Set the value property: Value of parameter.
     * 
     * @param value the value value to set.
     * @return the GlobalParameterSpecification object itself.
     */
    public GlobalParameterSpecification withValue(Object value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property type in model GlobalParameterSpecification"));
        }
        if (value() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property value in model GlobalParameterSpecification"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GlobalParameterSpecification.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeUntypedField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GlobalParameterSpecification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GlobalParameterSpecification if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GlobalParameterSpecification.
     */
    public static GlobalParameterSpecification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GlobalParameterSpecification deserializedGlobalParameterSpecification = new GlobalParameterSpecification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedGlobalParameterSpecification.type = GlobalParameterType.fromString(reader.getString());
                } else if ("value".equals(fieldName)) {
                    deserializedGlobalParameterSpecification.value = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGlobalParameterSpecification;
        });
    }
}
