// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** Filter and return results from input array based on the conditions. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("Filter")
@JsonFlatten
@Fluent
public class FilterActivity extends ControlActivity {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(FilterActivity.class);

    /*
     * Input array on which filter should be applied.
     */
    @JsonProperty(value = "typeProperties.items", required = true)
    private Expression items;

    /*
     * Condition to be used for filtering the input.
     */
    @JsonProperty(value = "typeProperties.condition", required = true)
    private Expression condition;

    /**
     * Get the items property: Input array on which filter should be applied.
     *
     * @return the items value.
     */
    public Expression items() {
        return this.items;
    }

    /**
     * Set the items property: Input array on which filter should be applied.
     *
     * @param items the items value to set.
     * @return the FilterActivity object itself.
     */
    public FilterActivity withItems(Expression items) {
        this.items = items;
        return this;
    }

    /**
     * Get the condition property: Condition to be used for filtering the input.
     *
     * @return the condition value.
     */
    public Expression condition() {
        return this.condition;
    }

    /**
     * Set the condition property: Condition to be used for filtering the input.
     *
     * @param condition the condition value to set.
     * @return the FilterActivity object itself.
     */
    public FilterActivity withCondition(Expression condition) {
        this.condition = condition;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public FilterActivity withName(String name) {
        super.withName(name);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public FilterActivity withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public FilterActivity withDependsOn(List<ActivityDependency> dependsOn) {
        super.withDependsOn(dependsOn);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public FilterActivity withUserProperties(List<UserProperty> userProperties) {
        super.withUserProperties(userProperties);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (items() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property items in model FilterActivity"));
        } else {
            items().validate();
        }
        if (condition() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property condition in model FilterActivity"));
        } else {
            condition().validate();
        }
    }
}
