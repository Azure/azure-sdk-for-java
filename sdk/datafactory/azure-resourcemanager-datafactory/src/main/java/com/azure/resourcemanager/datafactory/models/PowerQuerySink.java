// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Power query sink.
 */
@Fluent
public final class PowerQuerySink extends DataFlowSink {
    /*
     * sink script.
     */
    private String script;

    /**
     * Creates an instance of PowerQuerySink class.
     */
    public PowerQuerySink() {
    }

    /**
     * Get the script property: sink script.
     * 
     * @return the script value.
     */
    public String script() {
        return this.script;
    }

    /**
     * Set the script property: sink script.
     * 
     * @param script the script value to set.
     * @return the PowerQuerySink object itself.
     */
    public PowerQuerySink withScript(String script) {
        this.script = script;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PowerQuerySink withSchemaLinkedService(LinkedServiceReference schemaLinkedService) {
        super.withSchemaLinkedService(schemaLinkedService);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PowerQuerySink withRejectedDataLinkedService(LinkedServiceReference rejectedDataLinkedService) {
        super.withRejectedDataLinkedService(rejectedDataLinkedService);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PowerQuerySink withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PowerQuerySink withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PowerQuerySink withDataset(DatasetReference dataset) {
        super.withDataset(dataset);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PowerQuerySink withLinkedService(LinkedServiceReference linkedService) {
        super.withLinkedService(linkedService);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PowerQuerySink withFlowlet(DataFlowReference flowlet) {
        super.withFlowlet(flowlet);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeJsonField("dataset", dataset());
        jsonWriter.writeJsonField("linkedService", linkedService());
        jsonWriter.writeJsonField("flowlet", flowlet());
        jsonWriter.writeJsonField("schemaLinkedService", schemaLinkedService());
        jsonWriter.writeJsonField("rejectedDataLinkedService", rejectedDataLinkedService());
        jsonWriter.writeStringField("script", this.script);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PowerQuerySink from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PowerQuerySink if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PowerQuerySink.
     */
    public static PowerQuerySink fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PowerQuerySink deserializedPowerQuerySink = new PowerQuerySink();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedPowerQuerySink.withName(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedPowerQuerySink.withDescription(reader.getString());
                } else if ("dataset".equals(fieldName)) {
                    deserializedPowerQuerySink.withDataset(DatasetReference.fromJson(reader));
                } else if ("linkedService".equals(fieldName)) {
                    deserializedPowerQuerySink.withLinkedService(LinkedServiceReference.fromJson(reader));
                } else if ("flowlet".equals(fieldName)) {
                    deserializedPowerQuerySink.withFlowlet(DataFlowReference.fromJson(reader));
                } else if ("schemaLinkedService".equals(fieldName)) {
                    deserializedPowerQuerySink.withSchemaLinkedService(LinkedServiceReference.fromJson(reader));
                } else if ("rejectedDataLinkedService".equals(fieldName)) {
                    deserializedPowerQuerySink.withRejectedDataLinkedService(LinkedServiceReference.fromJson(reader));
                } else if ("script".equals(fieldName)) {
                    deserializedPowerQuerySink.script = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPowerQuerySink;
        });
    }
}
