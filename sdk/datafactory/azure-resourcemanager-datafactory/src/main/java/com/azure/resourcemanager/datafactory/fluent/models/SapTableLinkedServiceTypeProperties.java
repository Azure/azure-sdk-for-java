// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import java.io.IOException;

/**
 * Properties specific to this linked service type.
 */
@Fluent
public final class SapTableLinkedServiceTypeProperties
    implements JsonSerializable<SapTableLinkedServiceTypeProperties> {
    /*
     * Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
     */
    private Object server;

    /*
     * System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a
     * string.) Type: string (or Expression with resultType string).
     */
    private Object systemNumber;

    /*
     * Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number
     * represented as a string) Type: string (or Expression with resultType string).
     */
    private Object clientId;

    /*
     * Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with
     * resultType string).
     */
    private Object language;

    /*
     * SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
     */
    private Object systemId;

    /*
     * Username to access the SAP server where the table is located. Type: string (or Expression with resultType
     * string).
     */
    private Object username;

    /*
     * Password to access the SAP server where the table is located.
     */
    private SecretBase password;

    /*
     * The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
     */
    private Object messageServer;

    /*
     * The service name or port number of the Message Server. Type: string (or Expression with resultType string).
     */
    private Object messageServerService;

    /*
     * SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on).
     * Type: string (or Expression with resultType string).
     */
    private Object sncMode;

    /*
     * Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with
     * resultType string).
     */
    private Object sncMyName;

    /*
     * Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression
     * with resultType string).
     */
    private Object sncPartnerName;

    /*
     * External security product's library to access the SAP server where the table is located. Type: string (or
     * Expression with resultType string).
     */
    private Object sncLibraryPath;

    /*
     * SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType
     * string).
     */
    private Object sncQop;

    /*
     * The Logon Group for the SAP System. Type: string (or Expression with resultType string).
     */
    private Object logonGroup;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime
     * credential manager. Type: string.
     */
    private String encryptedCredential;

    /**
     * Creates an instance of SapTableLinkedServiceTypeProperties class.
     */
    public SapTableLinkedServiceTypeProperties() {
    }

    /**
     * Get the server property: Host name of the SAP instance where the table is located. Type: string (or Expression
     * with resultType string).
     * 
     * @return the server value.
     */
    public Object server() {
        return this.server;
    }

    /**
     * Set the server property: Host name of the SAP instance where the table is located. Type: string (or Expression
     * with resultType string).
     * 
     * @param server the server value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withServer(Object server) {
        this.server = server;
        return this;
    }

    /**
     * Get the systemNumber property: System number of the SAP system where the table is located. (Usually a two-digit
     * decimal number represented as a string.) Type: string (or Expression with resultType string).
     * 
     * @return the systemNumber value.
     */
    public Object systemNumber() {
        return this.systemNumber;
    }

    /**
     * Set the systemNumber property: System number of the SAP system where the table is located. (Usually a two-digit
     * decimal number represented as a string.) Type: string (or Expression with resultType string).
     * 
     * @param systemNumber the systemNumber value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withSystemNumber(Object systemNumber) {
        this.systemNumber = systemNumber;
        return this;
    }

    /**
     * Get the clientId property: Client ID of the client on the SAP system where the table is located. (Usually a
     * three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
     * 
     * @return the clientId value.
     */
    public Object clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: Client ID of the client on the SAP system where the table is located. (Usually a
     * three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
     * 
     * @param clientId the clientId value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withClientId(Object clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the language property: Language of the SAP system where the table is located. The default value is EN. Type:
     * string (or Expression with resultType string).
     * 
     * @return the language value.
     */
    public Object language() {
        return this.language;
    }

    /**
     * Set the language property: Language of the SAP system where the table is located. The default value is EN. Type:
     * string (or Expression with resultType string).
     * 
     * @param language the language value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withLanguage(Object language) {
        this.language = language;
        return this;
    }

    /**
     * Get the systemId property: SystemID of the SAP system where the table is located. Type: string (or Expression
     * with resultType string).
     * 
     * @return the systemId value.
     */
    public Object systemId() {
        return this.systemId;
    }

    /**
     * Set the systemId property: SystemID of the SAP system where the table is located. Type: string (or Expression
     * with resultType string).
     * 
     * @param systemId the systemId value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withSystemId(Object systemId) {
        this.systemId = systemId;
        return this;
    }

    /**
     * Get the username property: Username to access the SAP server where the table is located. Type: string (or
     * Expression with resultType string).
     * 
     * @return the username value.
     */
    public Object username() {
        return this.username;
    }

    /**
     * Set the username property: Username to access the SAP server where the table is located. Type: string (or
     * Expression with resultType string).
     * 
     * @param username the username value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withUsername(Object username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: Password to access the SAP server where the table is located.
     * 
     * @return the password value.
     */
    public SecretBase password() {
        return this.password;
    }

    /**
     * Set the password property: Password to access the SAP server where the table is located.
     * 
     * @param password the password value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * Get the messageServer property: The hostname of the SAP Message Server. Type: string (or Expression with
     * resultType string).
     * 
     * @return the messageServer value.
     */
    public Object messageServer() {
        return this.messageServer;
    }

    /**
     * Set the messageServer property: The hostname of the SAP Message Server. Type: string (or Expression with
     * resultType string).
     * 
     * @param messageServer the messageServer value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withMessageServer(Object messageServer) {
        this.messageServer = messageServer;
        return this;
    }

    /**
     * Get the messageServerService property: The service name or port number of the Message Server. Type: string (or
     * Expression with resultType string).
     * 
     * @return the messageServerService value.
     */
    public Object messageServerService() {
        return this.messageServerService;
    }

    /**
     * Set the messageServerService property: The service name or port number of the Message Server. Type: string (or
     * Expression with resultType string).
     * 
     * @param messageServerService the messageServerService value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withMessageServerService(Object messageServerService) {
        this.messageServerService = messageServerService;
        return this;
    }

    /**
     * Get the sncMode property: SNC activation indicator to access the SAP server where the table is located. Must be
     * either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
     * 
     * @return the sncMode value.
     */
    public Object sncMode() {
        return this.sncMode;
    }

    /**
     * Set the sncMode property: SNC activation indicator to access the SAP server where the table is located. Must be
     * either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
     * 
     * @param sncMode the sncMode value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withSncMode(Object sncMode) {
        this.sncMode = sncMode;
        return this;
    }

    /**
     * Get the sncMyName property: Initiator's SNC name to access the SAP server where the table is located. Type:
     * string (or Expression with resultType string).
     * 
     * @return the sncMyName value.
     */
    public Object sncMyName() {
        return this.sncMyName;
    }

    /**
     * Set the sncMyName property: Initiator's SNC name to access the SAP server where the table is located. Type:
     * string (or Expression with resultType string).
     * 
     * @param sncMyName the sncMyName value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withSncMyName(Object sncMyName) {
        this.sncMyName = sncMyName;
        return this;
    }

    /**
     * Get the sncPartnerName property: Communication partner's SNC name to access the SAP server where the table is
     * located. Type: string (or Expression with resultType string).
     * 
     * @return the sncPartnerName value.
     */
    public Object sncPartnerName() {
        return this.sncPartnerName;
    }

    /**
     * Set the sncPartnerName property: Communication partner's SNC name to access the SAP server where the table is
     * located. Type: string (or Expression with resultType string).
     * 
     * @param sncPartnerName the sncPartnerName value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withSncPartnerName(Object sncPartnerName) {
        this.sncPartnerName = sncPartnerName;
        return this;
    }

    /**
     * Get the sncLibraryPath property: External security product's library to access the SAP server where the table is
     * located. Type: string (or Expression with resultType string).
     * 
     * @return the sncLibraryPath value.
     */
    public Object sncLibraryPath() {
        return this.sncLibraryPath;
    }

    /**
     * Set the sncLibraryPath property: External security product's library to access the SAP server where the table is
     * located. Type: string (or Expression with resultType string).
     * 
     * @param sncLibraryPath the sncLibraryPath value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withSncLibraryPath(Object sncLibraryPath) {
        this.sncLibraryPath = sncLibraryPath;
        return this;
    }

    /**
     * Get the sncQop property: SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or
     * Expression with resultType string).
     * 
     * @return the sncQop value.
     */
    public Object sncQop() {
        return this.sncQop;
    }

    /**
     * Set the sncQop property: SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or
     * Expression with resultType string).
     * 
     * @param sncQop the sncQop value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withSncQop(Object sncQop) {
        this.sncQop = sncQop;
        return this;
    }

    /**
     * Get the logonGroup property: The Logon Group for the SAP System. Type: string (or Expression with resultType
     * string).
     * 
     * @return the logonGroup value.
     */
    public Object logonGroup() {
        return this.logonGroup;
    }

    /**
     * Set the logonGroup property: The Logon Group for the SAP System. Type: string (or Expression with resultType
     * string).
     * 
     * @param logonGroup the logonGroup value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withLogonGroup(Object logonGroup) {
        this.logonGroup = logonGroup;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @return the encryptedCredential value.
     */
    public String encryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the SapTableLinkedServiceTypeProperties object itself.
     */
    public SapTableLinkedServiceTypeProperties withEncryptedCredential(String encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (password() != null) {
            password().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("server", this.server);
        jsonWriter.writeUntypedField("systemNumber", this.systemNumber);
        jsonWriter.writeUntypedField("clientId", this.clientId);
        jsonWriter.writeUntypedField("language", this.language);
        jsonWriter.writeUntypedField("systemId", this.systemId);
        jsonWriter.writeUntypedField("userName", this.username);
        jsonWriter.writeJsonField("password", this.password);
        jsonWriter.writeUntypedField("messageServer", this.messageServer);
        jsonWriter.writeUntypedField("messageServerService", this.messageServerService);
        jsonWriter.writeUntypedField("sncMode", this.sncMode);
        jsonWriter.writeUntypedField("sncMyName", this.sncMyName);
        jsonWriter.writeUntypedField("sncPartnerName", this.sncPartnerName);
        jsonWriter.writeUntypedField("sncLibraryPath", this.sncLibraryPath);
        jsonWriter.writeUntypedField("sncQop", this.sncQop);
        jsonWriter.writeUntypedField("logonGroup", this.logonGroup);
        jsonWriter.writeStringField("encryptedCredential", this.encryptedCredential);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SapTableLinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SapTableLinkedServiceTypeProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SapTableLinkedServiceTypeProperties.
     */
    public static SapTableLinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SapTableLinkedServiceTypeProperties deserializedSapTableLinkedServiceTypeProperties
                = new SapTableLinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("server".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.server = reader.readUntyped();
                } else if ("systemNumber".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.systemNumber = reader.readUntyped();
                } else if ("clientId".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.clientId = reader.readUntyped();
                } else if ("language".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.language = reader.readUntyped();
                } else if ("systemId".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.systemId = reader.readUntyped();
                } else if ("userName".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.username = reader.readUntyped();
                } else if ("password".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.password = SecretBase.fromJson(reader);
                } else if ("messageServer".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.messageServer = reader.readUntyped();
                } else if ("messageServerService".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.messageServerService = reader.readUntyped();
                } else if ("sncMode".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.sncMode = reader.readUntyped();
                } else if ("sncMyName".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.sncMyName = reader.readUntyped();
                } else if ("sncPartnerName".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.sncPartnerName = reader.readUntyped();
                } else if ("sncLibraryPath".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.sncLibraryPath = reader.readUntyped();
                } else if ("sncQop".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.sncQop = reader.readUntyped();
                } else if ("logonGroup".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.logonGroup = reader.readUntyped();
                } else if ("encryptedCredential".equals(fieldName)) {
                    deserializedSapTableLinkedServiceTypeProperties.encryptedCredential = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSapTableLinkedServiceTypeProperties;
        });
    }
}
