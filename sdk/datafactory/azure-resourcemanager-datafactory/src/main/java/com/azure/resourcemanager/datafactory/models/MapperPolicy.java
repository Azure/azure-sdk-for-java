// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * CDC Policy.
 */
@Fluent
public final class MapperPolicy implements JsonSerializable<MapperPolicy> {
    /*
     * Mode of running the CDC: batch vs continuous.
     */
    private String mode;

    /*
     * Defines the frequency and interval for running the CDC for batch mode.
     */
    private MapperPolicyRecurrence recurrence;

    /**
     * Creates an instance of MapperPolicy class.
     */
    public MapperPolicy() {
    }

    /**
     * Get the mode property: Mode of running the CDC: batch vs continuous.
     * 
     * @return the mode value.
     */
    public String mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Mode of running the CDC: batch vs continuous.
     * 
     * @param mode the mode value to set.
     * @return the MapperPolicy object itself.
     */
    public MapperPolicy withMode(String mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the recurrence property: Defines the frequency and interval for running the CDC for batch mode.
     * 
     * @return the recurrence value.
     */
    public MapperPolicyRecurrence recurrence() {
        return this.recurrence;
    }

    /**
     * Set the recurrence property: Defines the frequency and interval for running the CDC for batch mode.
     * 
     * @param recurrence the recurrence value to set.
     * @return the MapperPolicy object itself.
     */
    public MapperPolicy withRecurrence(MapperPolicyRecurrence recurrence) {
        this.recurrence = recurrence;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recurrence() != null) {
            recurrence().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mode", this.mode);
        jsonWriter.writeJsonField("recurrence", this.recurrence);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MapperPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MapperPolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MapperPolicy.
     */
    public static MapperPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MapperPolicy deserializedMapperPolicy = new MapperPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mode".equals(fieldName)) {
                    deserializedMapperPolicy.mode = reader.getString();
                } else if ("recurrence".equals(fieldName)) {
                    deserializedMapperPolicy.recurrence = MapperPolicyRecurrence.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMapperPolicy;
        });
    }
}
