// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.ScheduleTriggerRecurrence;
import java.io.IOException;

/**
 * Schedule Trigger properties.
 */
@Fluent
public final class ScheduleTriggerTypeProperties implements JsonSerializable<ScheduleTriggerTypeProperties> {
    /*
     * Recurrence schedule configuration.
     */
    private ScheduleTriggerRecurrence recurrence;

    /**
     * Creates an instance of ScheduleTriggerTypeProperties class.
     */
    public ScheduleTriggerTypeProperties() {
    }

    /**
     * Get the recurrence property: Recurrence schedule configuration.
     * 
     * @return the recurrence value.
     */
    public ScheduleTriggerRecurrence recurrence() {
        return this.recurrence;
    }

    /**
     * Set the recurrence property: Recurrence schedule configuration.
     * 
     * @param recurrence the recurrence value to set.
     * @return the ScheduleTriggerTypeProperties object itself.
     */
    public ScheduleTriggerTypeProperties withRecurrence(ScheduleTriggerRecurrence recurrence) {
        this.recurrence = recurrence;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recurrence() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property recurrence in model ScheduleTriggerTypeProperties"));
        } else {
            recurrence().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ScheduleTriggerTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("recurrence", this.recurrence);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScheduleTriggerTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScheduleTriggerTypeProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ScheduleTriggerTypeProperties.
     */
    public static ScheduleTriggerTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScheduleTriggerTypeProperties deserializedScheduleTriggerTypeProperties
                = new ScheduleTriggerTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recurrence".equals(fieldName)) {
                    deserializedScheduleTriggerTypeProperties.recurrence = ScheduleTriggerRecurrence.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScheduleTriggerTypeProperties;
        });
    }
}
