// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This
 * scheme follows mutual authentication; the server must also provide valid credentials to the client.
 */
@Fluent
public final class WebClientCertificateAuthentication extends WebLinkedServiceTypeProperties {
    /*
     * Type of authentication used to connect to the web table source.
     */
    private WebAuthenticationType authenticationType = WebAuthenticationType.CLIENT_CERTIFICATE;

    /*
     * Base64-encoded contents of a PFX file.
     */
    private SecretBase pfx;

    /*
     * Password for the PFX file.
     */
    private SecretBase password;

    /**
     * Creates an instance of WebClientCertificateAuthentication class.
     */
    public WebClientCertificateAuthentication() {
    }

    /**
     * Get the authenticationType property: Type of authentication used to connect to the web table source.
     * 
     * @return the authenticationType value.
     */
    @Override
    public WebAuthenticationType authenticationType() {
        return this.authenticationType;
    }

    /**
     * Get the pfx property: Base64-encoded contents of a PFX file.
     * 
     * @return the pfx value.
     */
    public SecretBase pfx() {
        return this.pfx;
    }

    /**
     * Set the pfx property: Base64-encoded contents of a PFX file.
     * 
     * @param pfx the pfx value to set.
     * @return the WebClientCertificateAuthentication object itself.
     */
    public WebClientCertificateAuthentication withPfx(SecretBase pfx) {
        this.pfx = pfx;
        return this;
    }

    /**
     * Get the password property: Password for the PFX file.
     * 
     * @return the password value.
     */
    public SecretBase password() {
        return this.password;
    }

    /**
     * Set the password property: Password for the PFX file.
     * 
     * @param password the password value to set.
     * @return the WebClientCertificateAuthentication object itself.
     */
    public WebClientCertificateAuthentication withPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WebClientCertificateAuthentication withUrl(Object url) {
        super.withUrl(url);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (pfx() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property pfx in model WebClientCertificateAuthentication"));
        } else {
            pfx().validate();
        }
        if (password() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property password in model WebClientCertificateAuthentication"));
        } else {
            password().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WebClientCertificateAuthentication.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("url", url());
        jsonWriter.writeJsonField("pfx", this.pfx);
        jsonWriter.writeJsonField("password", this.password);
        jsonWriter.writeStringField("authenticationType",
            this.authenticationType == null ? null : this.authenticationType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebClientCertificateAuthentication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebClientCertificateAuthentication if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WebClientCertificateAuthentication.
     */
    public static WebClientCertificateAuthentication fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebClientCertificateAuthentication deserializedWebClientCertificateAuthentication
                = new WebClientCertificateAuthentication();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("url".equals(fieldName)) {
                    deserializedWebClientCertificateAuthentication.withUrl(reader.readUntyped());
                } else if ("pfx".equals(fieldName)) {
                    deserializedWebClientCertificateAuthentication.pfx = SecretBase.fromJson(reader);
                } else if ("password".equals(fieldName)) {
                    deserializedWebClientCertificateAuthentication.password = SecretBase.fromJson(reader);
                } else if ("authenticationType".equals(fieldName)) {
                    deserializedWebClientCertificateAuthentication.authenticationType
                        = WebAuthenticationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebClientCertificateAuthentication;
        });
    }
}
