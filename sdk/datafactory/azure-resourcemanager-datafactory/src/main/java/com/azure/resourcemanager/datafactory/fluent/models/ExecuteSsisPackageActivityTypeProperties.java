// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.SsisExecutionCredential;
import com.azure.resourcemanager.datafactory.models.SsisExecutionParameter;
import com.azure.resourcemanager.datafactory.models.SsisLogLocation;
import com.azure.resourcemanager.datafactory.models.SsisPackageLocation;
import com.azure.resourcemanager.datafactory.models.SsisPropertyOverride;
import java.io.IOException;
import java.util.Map;

/**
 * Execute SSIS package activity properties.
 */
@Fluent
public final class ExecuteSsisPackageActivityTypeProperties
    implements JsonSerializable<ExecuteSsisPackageActivityTypeProperties> {
    /*
     * SSIS package location.
     */
    private SsisPackageLocation packageLocation;

    /*
     * Specifies the runtime to execute SSIS package. The value should be "x86" or "x64". Type: string (or Expression
     * with resultType string).
     */
    private Object runtime;

    /*
     * The logging level of SSIS package execution. Type: string (or Expression with resultType string).
     */
    private Object loggingLevel;

    /*
     * The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
     */
    private Object environmentPath;

    /*
     * The package execution credential.
     */
    private SsisExecutionCredential executionCredential;

    /*
     * The integration runtime reference.
     */
    private IntegrationRuntimeReference connectVia;

    /*
     * The project level parameters to execute the SSIS package.
     */
    private Map<String, SsisExecutionParameter> projectParameters;

    /*
     * The package level parameters to execute the SSIS package.
     */
    private Map<String, SsisExecutionParameter> packageParameters;

    /*
     * The project level connection managers to execute the SSIS package.
     */
    private Map<String, Map<String, SsisExecutionParameter>> projectConnectionManagers;

    /*
     * The package level connection managers to execute the SSIS package.
     */
    private Map<String, Map<String, SsisExecutionParameter>> packageConnectionManagers;

    /*
     * The property overrides to execute the SSIS package.
     */
    private Map<String, SsisPropertyOverride> propertyOverrides;

    /*
     * SSIS package execution log location.
     */
    private SsisLogLocation logLocation;

    /**
     * Creates an instance of ExecuteSsisPackageActivityTypeProperties class.
     */
    public ExecuteSsisPackageActivityTypeProperties() {
    }

    /**
     * Get the packageLocation property: SSIS package location.
     * 
     * @return the packageLocation value.
     */
    public SsisPackageLocation packageLocation() {
        return this.packageLocation;
    }

    /**
     * Set the packageLocation property: SSIS package location.
     * 
     * @param packageLocation the packageLocation value to set.
     * @return the ExecuteSsisPackageActivityTypeProperties object itself.
     */
    public ExecuteSsisPackageActivityTypeProperties withPackageLocation(SsisPackageLocation packageLocation) {
        this.packageLocation = packageLocation;
        return this;
    }

    /**
     * Get the runtime property: Specifies the runtime to execute SSIS package. The value should be "x86" or "x64".
     * Type: string (or Expression with resultType string).
     * 
     * @return the runtime value.
     */
    public Object runtime() {
        return this.runtime;
    }

    /**
     * Set the runtime property: Specifies the runtime to execute SSIS package. The value should be "x86" or "x64".
     * Type: string (or Expression with resultType string).
     * 
     * @param runtime the runtime value to set.
     * @return the ExecuteSsisPackageActivityTypeProperties object itself.
     */
    public ExecuteSsisPackageActivityTypeProperties withRuntime(Object runtime) {
        this.runtime = runtime;
        return this;
    }

    /**
     * Get the loggingLevel property: The logging level of SSIS package execution. Type: string (or Expression with
     * resultType string).
     * 
     * @return the loggingLevel value.
     */
    public Object loggingLevel() {
        return this.loggingLevel;
    }

    /**
     * Set the loggingLevel property: The logging level of SSIS package execution. Type: string (or Expression with
     * resultType string).
     * 
     * @param loggingLevel the loggingLevel value to set.
     * @return the ExecuteSsisPackageActivityTypeProperties object itself.
     */
    public ExecuteSsisPackageActivityTypeProperties withLoggingLevel(Object loggingLevel) {
        this.loggingLevel = loggingLevel;
        return this;
    }

    /**
     * Get the environmentPath property: The environment path to execute the SSIS package. Type: string (or Expression
     * with resultType string).
     * 
     * @return the environmentPath value.
     */
    public Object environmentPath() {
        return this.environmentPath;
    }

    /**
     * Set the environmentPath property: The environment path to execute the SSIS package. Type: string (or Expression
     * with resultType string).
     * 
     * @param environmentPath the environmentPath value to set.
     * @return the ExecuteSsisPackageActivityTypeProperties object itself.
     */
    public ExecuteSsisPackageActivityTypeProperties withEnvironmentPath(Object environmentPath) {
        this.environmentPath = environmentPath;
        return this;
    }

    /**
     * Get the executionCredential property: The package execution credential.
     * 
     * @return the executionCredential value.
     */
    public SsisExecutionCredential executionCredential() {
        return this.executionCredential;
    }

    /**
     * Set the executionCredential property: The package execution credential.
     * 
     * @param executionCredential the executionCredential value to set.
     * @return the ExecuteSsisPackageActivityTypeProperties object itself.
     */
    public ExecuteSsisPackageActivityTypeProperties
        withExecutionCredential(SsisExecutionCredential executionCredential) {
        this.executionCredential = executionCredential;
        return this;
    }

    /**
     * Get the connectVia property: The integration runtime reference.
     * 
     * @return the connectVia value.
     */
    public IntegrationRuntimeReference connectVia() {
        return this.connectVia;
    }

    /**
     * Set the connectVia property: The integration runtime reference.
     * 
     * @param connectVia the connectVia value to set.
     * @return the ExecuteSsisPackageActivityTypeProperties object itself.
     */
    public ExecuteSsisPackageActivityTypeProperties withConnectVia(IntegrationRuntimeReference connectVia) {
        this.connectVia = connectVia;
        return this;
    }

    /**
     * Get the projectParameters property: The project level parameters to execute the SSIS package.
     * 
     * @return the projectParameters value.
     */
    public Map<String, SsisExecutionParameter> projectParameters() {
        return this.projectParameters;
    }

    /**
     * Set the projectParameters property: The project level parameters to execute the SSIS package.
     * 
     * @param projectParameters the projectParameters value to set.
     * @return the ExecuteSsisPackageActivityTypeProperties object itself.
     */
    public ExecuteSsisPackageActivityTypeProperties
        withProjectParameters(Map<String, SsisExecutionParameter> projectParameters) {
        this.projectParameters = projectParameters;
        return this;
    }

    /**
     * Get the packageParameters property: The package level parameters to execute the SSIS package.
     * 
     * @return the packageParameters value.
     */
    public Map<String, SsisExecutionParameter> packageParameters() {
        return this.packageParameters;
    }

    /**
     * Set the packageParameters property: The package level parameters to execute the SSIS package.
     * 
     * @param packageParameters the packageParameters value to set.
     * @return the ExecuteSsisPackageActivityTypeProperties object itself.
     */
    public ExecuteSsisPackageActivityTypeProperties
        withPackageParameters(Map<String, SsisExecutionParameter> packageParameters) {
        this.packageParameters = packageParameters;
        return this;
    }

    /**
     * Get the projectConnectionManagers property: The project level connection managers to execute the SSIS package.
     * 
     * @return the projectConnectionManagers value.
     */
    public Map<String, Map<String, SsisExecutionParameter>> projectConnectionManagers() {
        return this.projectConnectionManagers;
    }

    /**
     * Set the projectConnectionManagers property: The project level connection managers to execute the SSIS package.
     * 
     * @param projectConnectionManagers the projectConnectionManagers value to set.
     * @return the ExecuteSsisPackageActivityTypeProperties object itself.
     */
    public ExecuteSsisPackageActivityTypeProperties
        withProjectConnectionManagers(Map<String, Map<String, SsisExecutionParameter>> projectConnectionManagers) {
        this.projectConnectionManagers = projectConnectionManagers;
        return this;
    }

    /**
     * Get the packageConnectionManagers property: The package level connection managers to execute the SSIS package.
     * 
     * @return the packageConnectionManagers value.
     */
    public Map<String, Map<String, SsisExecutionParameter>> packageConnectionManagers() {
        return this.packageConnectionManagers;
    }

    /**
     * Set the packageConnectionManagers property: The package level connection managers to execute the SSIS package.
     * 
     * @param packageConnectionManagers the packageConnectionManagers value to set.
     * @return the ExecuteSsisPackageActivityTypeProperties object itself.
     */
    public ExecuteSsisPackageActivityTypeProperties
        withPackageConnectionManagers(Map<String, Map<String, SsisExecutionParameter>> packageConnectionManagers) {
        this.packageConnectionManagers = packageConnectionManagers;
        return this;
    }

    /**
     * Get the propertyOverrides property: The property overrides to execute the SSIS package.
     * 
     * @return the propertyOverrides value.
     */
    public Map<String, SsisPropertyOverride> propertyOverrides() {
        return this.propertyOverrides;
    }

    /**
     * Set the propertyOverrides property: The property overrides to execute the SSIS package.
     * 
     * @param propertyOverrides the propertyOverrides value to set.
     * @return the ExecuteSsisPackageActivityTypeProperties object itself.
     */
    public ExecuteSsisPackageActivityTypeProperties
        withPropertyOverrides(Map<String, SsisPropertyOverride> propertyOverrides) {
        this.propertyOverrides = propertyOverrides;
        return this;
    }

    /**
     * Get the logLocation property: SSIS package execution log location.
     * 
     * @return the logLocation value.
     */
    public SsisLogLocation logLocation() {
        return this.logLocation;
    }

    /**
     * Set the logLocation property: SSIS package execution log location.
     * 
     * @param logLocation the logLocation value to set.
     * @return the ExecuteSsisPackageActivityTypeProperties object itself.
     */
    public ExecuteSsisPackageActivityTypeProperties withLogLocation(SsisLogLocation logLocation) {
        this.logLocation = logLocation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (packageLocation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property packageLocation in model ExecuteSsisPackageActivityTypeProperties"));
        } else {
            packageLocation().validate();
        }
        if (executionCredential() != null) {
            executionCredential().validate();
        }
        if (connectVia() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property connectVia in model ExecuteSsisPackageActivityTypeProperties"));
        } else {
            connectVia().validate();
        }
        if (projectParameters() != null) {
            projectParameters().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (packageParameters() != null) {
            packageParameters().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (projectConnectionManagers() != null) {
            projectConnectionManagers().values().forEach(e -> {
                if (e != null) {
                    e.values().forEach(e1 -> {
                        if (e1 != null) {
                            e1.validate();
                        }
                    });
                }
            });
        }
        if (packageConnectionManagers() != null) {
            packageConnectionManagers().values().forEach(e -> {
                if (e != null) {
                    e.values().forEach(e1 -> {
                        if (e1 != null) {
                            e1.validate();
                        }
                    });
                }
            });
        }
        if (propertyOverrides() != null) {
            propertyOverrides().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (logLocation() != null) {
            logLocation().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExecuteSsisPackageActivityTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("packageLocation", this.packageLocation);
        jsonWriter.writeJsonField("connectVia", this.connectVia);
        jsonWriter.writeUntypedField("runtime", this.runtime);
        jsonWriter.writeUntypedField("loggingLevel", this.loggingLevel);
        jsonWriter.writeUntypedField("environmentPath", this.environmentPath);
        jsonWriter.writeJsonField("executionCredential", this.executionCredential);
        jsonWriter.writeMapField("projectParameters", this.projectParameters,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("packageParameters", this.packageParameters,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("projectConnectionManagers", this.projectConnectionManagers,
            (writer, element) -> writer.writeMap(element, (writer1, element1) -> writer1.writeJson(element1)));
        jsonWriter.writeMapField("packageConnectionManagers", this.packageConnectionManagers,
            (writer, element) -> writer.writeMap(element, (writer1, element1) -> writer1.writeJson(element1)));
        jsonWriter.writeMapField("propertyOverrides", this.propertyOverrides,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("logLocation", this.logLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExecuteSsisPackageActivityTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExecuteSsisPackageActivityTypeProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExecuteSsisPackageActivityTypeProperties.
     */
    public static ExecuteSsisPackageActivityTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExecuteSsisPackageActivityTypeProperties deserializedExecuteSsisPackageActivityTypeProperties
                = new ExecuteSsisPackageActivityTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("packageLocation".equals(fieldName)) {
                    deserializedExecuteSsisPackageActivityTypeProperties.packageLocation
                        = SsisPackageLocation.fromJson(reader);
                } else if ("connectVia".equals(fieldName)) {
                    deserializedExecuteSsisPackageActivityTypeProperties.connectVia
                        = IntegrationRuntimeReference.fromJson(reader);
                } else if ("runtime".equals(fieldName)) {
                    deserializedExecuteSsisPackageActivityTypeProperties.runtime = reader.readUntyped();
                } else if ("loggingLevel".equals(fieldName)) {
                    deserializedExecuteSsisPackageActivityTypeProperties.loggingLevel = reader.readUntyped();
                } else if ("environmentPath".equals(fieldName)) {
                    deserializedExecuteSsisPackageActivityTypeProperties.environmentPath = reader.readUntyped();
                } else if ("executionCredential".equals(fieldName)) {
                    deserializedExecuteSsisPackageActivityTypeProperties.executionCredential
                        = SsisExecutionCredential.fromJson(reader);
                } else if ("projectParameters".equals(fieldName)) {
                    Map<String, SsisExecutionParameter> projectParameters
                        = reader.readMap(reader1 -> SsisExecutionParameter.fromJson(reader1));
                    deserializedExecuteSsisPackageActivityTypeProperties.projectParameters = projectParameters;
                } else if ("packageParameters".equals(fieldName)) {
                    Map<String, SsisExecutionParameter> packageParameters
                        = reader.readMap(reader1 -> SsisExecutionParameter.fromJson(reader1));
                    deserializedExecuteSsisPackageActivityTypeProperties.packageParameters = packageParameters;
                } else if ("projectConnectionManagers".equals(fieldName)) {
                    Map<String, Map<String, SsisExecutionParameter>> projectConnectionManagers = reader
                        .readMap(reader1 -> reader1.readMap(reader2 -> SsisExecutionParameter.fromJson(reader2)));
                    deserializedExecuteSsisPackageActivityTypeProperties.projectConnectionManagers
                        = projectConnectionManagers;
                } else if ("packageConnectionManagers".equals(fieldName)) {
                    Map<String, Map<String, SsisExecutionParameter>> packageConnectionManagers = reader
                        .readMap(reader1 -> reader1.readMap(reader2 -> SsisExecutionParameter.fromJson(reader2)));
                    deserializedExecuteSsisPackageActivityTypeProperties.packageConnectionManagers
                        = packageConnectionManagers;
                } else if ("propertyOverrides".equals(fieldName)) {
                    Map<String, SsisPropertyOverride> propertyOverrides
                        = reader.readMap(reader1 -> SsisPropertyOverride.fromJson(reader1));
                    deserializedExecuteSsisPackageActivityTypeProperties.propertyOverrides = propertyOverrides;
                } else if ("logLocation".equals(fieldName)) {
                    deserializedExecuteSsisPackageActivityTypeProperties.logLocation = SsisLogLocation.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExecuteSsisPackageActivityTypeProperties;
        });
    }
}
