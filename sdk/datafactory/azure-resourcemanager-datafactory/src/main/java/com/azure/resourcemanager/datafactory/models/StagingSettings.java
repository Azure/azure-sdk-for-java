// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Staging settings.
 */
@Fluent
public final class StagingSettings implements JsonSerializable<StagingSettings> {
    /*
     * Staging linked service reference.
     */
    private LinkedServiceReference linkedServiceName;

    /*
     * The path to storage for storing the interim data. Type: string (or Expression with resultType string).
     */
    private Object path;

    /*
     * Specifies whether to use compression when copying data via an interim staging. Default value is false. Type:
     * boolean (or Expression with resultType boolean).
     */
    private Object enableCompression;

    /*
     * Staging settings.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of StagingSettings class.
     */
    public StagingSettings() {
    }

    /**
     * Get the linkedServiceName property: Staging linked service reference.
     * 
     * @return the linkedServiceName value.
     */
    public LinkedServiceReference linkedServiceName() {
        return this.linkedServiceName;
    }

    /**
     * Set the linkedServiceName property: Staging linked service reference.
     * 
     * @param linkedServiceName the linkedServiceName value to set.
     * @return the StagingSettings object itself.
     */
    public StagingSettings withLinkedServiceName(LinkedServiceReference linkedServiceName) {
        this.linkedServiceName = linkedServiceName;
        return this;
    }

    /**
     * Get the path property: The path to storage for storing the interim data. Type: string (or Expression with
     * resultType string).
     * 
     * @return the path value.
     */
    public Object path() {
        return this.path;
    }

    /**
     * Set the path property: The path to storage for storing the interim data. Type: string (or Expression with
     * resultType string).
     * 
     * @param path the path value to set.
     * @return the StagingSettings object itself.
     */
    public StagingSettings withPath(Object path) {
        this.path = path;
        return this;
    }

    /**
     * Get the enableCompression property: Specifies whether to use compression when copying data via an interim
     * staging. Default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     * @return the enableCompression value.
     */
    public Object enableCompression() {
        return this.enableCompression;
    }

    /**
     * Set the enableCompression property: Specifies whether to use compression when copying data via an interim
     * staging. Default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     * @param enableCompression the enableCompression value to set.
     * @return the StagingSettings object itself.
     */
    public StagingSettings withEnableCompression(Object enableCompression) {
        this.enableCompression = enableCompression;
        return this;
    }

    /**
     * Get the additionalProperties property: Staging settings.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Staging settings.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the StagingSettings object itself.
     */
    public StagingSettings withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (linkedServiceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property linkedServiceName in model StagingSettings"));
        } else {
            linkedServiceName().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StagingSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("linkedServiceName", this.linkedServiceName);
        jsonWriter.writeUntypedField("path", this.path);
        jsonWriter.writeUntypedField("enableCompression", this.enableCompression);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StagingSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StagingSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StagingSettings.
     */
    public static StagingSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StagingSettings deserializedStagingSettings = new StagingSettings();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("linkedServiceName".equals(fieldName)) {
                    deserializedStagingSettings.linkedServiceName = LinkedServiceReference.fromJson(reader);
                } else if ("path".equals(fieldName)) {
                    deserializedStagingSettings.path = reader.readUntyped();
                } else if ("enableCompression".equals(fieldName)) {
                    deserializedStagingSettings.enableCompression = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedStagingSettings.additionalProperties = additionalProperties;

            return deserializedStagingSettings;
        });
    }
}
