// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.Map;

/** Linked service for an HTTP source. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("HttpServer")
@JsonFlatten
@Fluent
public class HttpLinkedService extends LinkedService {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(HttpLinkedService.class);

    /*
     * The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type:
     * string (or Expression with resultType string).
     */
    @JsonProperty(value = "typeProperties.url", required = true)
    private Object url;

    /*
     * The authentication type to be used to connect to the HTTP server.
     */
    @JsonProperty(value = "typeProperties.authenticationType")
    private HttpAuthenticationType authenticationType;

    /*
     * User name for Basic, Digest, or Windows authentication. Type: string (or
     * Expression with resultType string).
     */
    @JsonProperty(value = "typeProperties.userName")
    private Object username;

    /*
     * Password for Basic, Digest, Windows, or ClientCertificate with
     * EmbeddedCertData authentication.
     */
    @JsonProperty(value = "typeProperties.password")
    private SecretBase password;

    /*
     * The additional HTTP headers in the request to RESTful API used for
     * authorization. Type: object (or Expression with resultType object).
     */
    @JsonProperty(value = "typeProperties.authHeaders")
    private Object authHeaders;

    /*
     * Base64 encoded certificate data for ClientCertificate authentication.
     * For on-premises copy with ClientCertificate authentication, either
     * CertThumbprint or EmbeddedCertData/Password should be specified. Type:
     * string (or Expression with resultType string).
     */
    @JsonProperty(value = "typeProperties.embeddedCertData")
    private Object embeddedCertData;

    /*
     * Thumbprint of certificate for ClientCertificate authentication. Only
     * valid for on-premises copy. For on-premises copy with ClientCertificate
     * authentication, either CertThumbprint or EmbeddedCertData/Password
     * should be specified. Type: string (or Expression with resultType
     * string).
     */
    @JsonProperty(value = "typeProperties.certThumbprint")
    private Object certThumbprint;

    /*
     * The encrypted credential used for authentication. Credentials are
     * encrypted using the integration runtime credential manager. Type: string
     * (or Expression with resultType string).
     */
    @JsonProperty(value = "typeProperties.encryptedCredential")
    private Object encryptedCredential;

    /*
     * If true, validate the HTTPS server SSL certificate. Default value is
     * true. Type: boolean (or Expression with resultType boolean).
     */
    @JsonProperty(value = "typeProperties.enableServerCertificateValidation")
    private Object enableServerCertificateValidation;

    /**
     * Get the url property: The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or
     * Expression with resultType string).
     *
     * @return the url value.
     */
    public Object url() {
        return this.url;
    }

    /**
     * Set the url property: The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or
     * Expression with resultType string).
     *
     * @param url the url value to set.
     * @return the HttpLinkedService object itself.
     */
    public HttpLinkedService withUrl(Object url) {
        this.url = url;
        return this;
    }

    /**
     * Get the authenticationType property: The authentication type to be used to connect to the HTTP server.
     *
     * @return the authenticationType value.
     */
    public HttpAuthenticationType authenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: The authentication type to be used to connect to the HTTP server.
     *
     * @param authenticationType the authenticationType value to set.
     * @return the HttpLinkedService object itself.
     */
    public HttpLinkedService withAuthenticationType(HttpAuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get the username property: User name for Basic, Digest, or Windows authentication. Type: string (or Expression
     * with resultType string).
     *
     * @return the username value.
     */
    public Object username() {
        return this.username;
    }

    /**
     * Set the username property: User name for Basic, Digest, or Windows authentication. Type: string (or Expression
     * with resultType string).
     *
     * @param username the username value to set.
     * @return the HttpLinkedService object itself.
     */
    public HttpLinkedService withUsername(Object username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData
     * authentication.
     *
     * @return the password value.
     */
    public SecretBase password() {
        return this.password;
    }

    /**
     * Set the password property: Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData
     * authentication.
     *
     * @param password the password value to set.
     * @return the HttpLinkedService object itself.
     */
    public HttpLinkedService withPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * Get the authHeaders property: The additional HTTP headers in the request to RESTful API used for authorization.
     * Type: object (or Expression with resultType object).
     *
     * @return the authHeaders value.
     */
    public Object authHeaders() {
        return this.authHeaders;
    }

    /**
     * Set the authHeaders property: The additional HTTP headers in the request to RESTful API used for authorization.
     * Type: object (or Expression with resultType object).
     *
     * @param authHeaders the authHeaders value to set.
     * @return the HttpLinkedService object itself.
     */
    public HttpLinkedService withAuthHeaders(Object authHeaders) {
        this.authHeaders = authHeaders;
        return this;
    }

    /**
     * Get the embeddedCertData property: Base64 encoded certificate data for ClientCertificate authentication. For
     * on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should
     * be specified. Type: string (or Expression with resultType string).
     *
     * @return the embeddedCertData value.
     */
    public Object embeddedCertData() {
        return this.embeddedCertData;
    }

    /**
     * Set the embeddedCertData property: Base64 encoded certificate data for ClientCertificate authentication. For
     * on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should
     * be specified. Type: string (or Expression with resultType string).
     *
     * @param embeddedCertData the embeddedCertData value to set.
     * @return the HttpLinkedService object itself.
     */
    public HttpLinkedService withEmbeddedCertData(Object embeddedCertData) {
        this.embeddedCertData = embeddedCertData;
        return this;
    }

    /**
     * Get the certThumbprint property: Thumbprint of certificate for ClientCertificate authentication. Only valid for
     * on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or
     * EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
     *
     * @return the certThumbprint value.
     */
    public Object certThumbprint() {
        return this.certThumbprint;
    }

    /**
     * Set the certThumbprint property: Thumbprint of certificate for ClientCertificate authentication. Only valid for
     * on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or
     * EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
     *
     * @param certThumbprint the certThumbprint value to set.
     * @return the HttpLinkedService object itself.
     */
    public HttpLinkedService withCertThumbprint(Object certThumbprint) {
        this.certThumbprint = certThumbprint;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string (or Expression with resultType string).
     *
     * @return the encryptedCredential value.
     */
    public Object encryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string (or Expression with resultType string).
     *
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the HttpLinkedService object itself.
     */
    public HttpLinkedService withEncryptedCredential(Object encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Get the enableServerCertificateValidation property: If true, validate the HTTPS server SSL certificate. Default
     * value is true. Type: boolean (or Expression with resultType boolean).
     *
     * @return the enableServerCertificateValidation value.
     */
    public Object enableServerCertificateValidation() {
        return this.enableServerCertificateValidation;
    }

    /**
     * Set the enableServerCertificateValidation property: If true, validate the HTTPS server SSL certificate. Default
     * value is true. Type: boolean (or Expression with resultType boolean).
     *
     * @param enableServerCertificateValidation the enableServerCertificateValidation value to set.
     * @return the HttpLinkedService object itself.
     */
    public HttpLinkedService withEnableServerCertificateValidation(Object enableServerCertificateValidation) {
        this.enableServerCertificateValidation = enableServerCertificateValidation;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HttpLinkedService withConnectVia(IntegrationRuntimeReference connectVia) {
        super.withConnectVia(connectVia);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HttpLinkedService withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HttpLinkedService withParameters(Map<String, ParameterSpecification> parameters) {
        super.withParameters(parameters);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HttpLinkedService withAnnotations(List<Object> annotations) {
        super.withAnnotations(annotations);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (url() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property url in model HttpLinkedService"));
        }
        if (password() != null) {
            password().validate();
        }
    }
}
