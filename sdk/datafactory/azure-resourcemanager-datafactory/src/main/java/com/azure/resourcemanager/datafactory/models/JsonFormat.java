// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * The data stored in JSON format.
 */
@Fluent
public final class JsonFormat extends DatasetStorageFormat {
    /*
     * Type of dataset storage format.
     */
    private String type = "JsonFormat";

    /*
     * File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value
     * is 'setOfObjects'. It is case-sensitive.
     */
    private Object filePattern;

    /*
     * The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with
     * resultType string).
     */
    private Object nestingSeparator;

    /*
     * The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte
     * order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name'
     * column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078.
     * Type: string (or Expression with resultType string).
     */
    private Object encodingName;

    /*
     * The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with
     * resultType string).
     */
    private Object jsonNodeReference;

    /*
     * The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For
     * fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start
     * from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or
     * Expression with resultType object).
     */
    private Object jsonPathDefinition;

    /**
     * Creates an instance of JsonFormat class.
     */
    public JsonFormat() {
    }

    /**
     * Get the type property: Type of dataset storage format.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the filePattern property: File pattern of JSON. To be more specific, the way of separating a collection of
     * JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
     * 
     * @return the filePattern value.
     */
    public Object filePattern() {
        return this.filePattern;
    }

    /**
     * Set the filePattern property: File pattern of JSON. To be more specific, the way of separating a collection of
     * JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
     * 
     * @param filePattern the filePattern value to set.
     * @return the JsonFormat object itself.
     */
    public JsonFormat withFilePattern(Object filePattern) {
        this.filePattern = filePattern;
        return this;
    }

    /**
     * Get the nestingSeparator property: The character used to separate nesting levels. Default value is '.' (dot).
     * Type: string (or Expression with resultType string).
     * 
     * @return the nestingSeparator value.
     */
    public Object nestingSeparator() {
        return this.nestingSeparator;
    }

    /**
     * Set the nestingSeparator property: The character used to separate nesting levels. Default value is '.' (dot).
     * Type: string (or Expression with resultType string).
     * 
     * @param nestingSeparator the nestingSeparator value to set.
     * @return the JsonFormat object itself.
     */
    public JsonFormat withNestingSeparator(Object nestingSeparator) {
        this.nestingSeparator = nestingSeparator;
        return this;
    }

    /**
     * Get the encodingName property: The code page name of the preferred encoding. If not provided, the default value
     * is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values
     * can be found in the 'Name' column of the table of encodings in the following reference:
     * https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
     * 
     * @return the encodingName value.
     */
    public Object encodingName() {
        return this.encodingName;
    }

    /**
     * Set the encodingName property: The code page name of the preferred encoding. If not provided, the default value
     * is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values
     * can be found in the 'Name' column of the table of encodings in the following reference:
     * https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
     * 
     * @param encodingName the encodingName value to set.
     * @return the JsonFormat object itself.
     */
    public JsonFormat withEncodingName(Object encodingName) {
        this.encodingName = encodingName;
        return this;
    }

    /**
     * Get the jsonNodeReference property: The JSONPath of the JSON array element to be flattened. Example:
     * "$.ArrayPath". Type: string (or Expression with resultType string).
     * 
     * @return the jsonNodeReference value.
     */
    public Object jsonNodeReference() {
        return this.jsonNodeReference;
    }

    /**
     * Set the jsonNodeReference property: The JSONPath of the JSON array element to be flattened. Example:
     * "$.ArrayPath". Type: string (or Expression with resultType string).
     * 
     * @param jsonNodeReference the jsonNodeReference value to set.
     * @return the JsonFormat object itself.
     */
    public JsonFormat withJsonNodeReference(Object jsonNodeReference) {
        this.jsonNodeReference = jsonNodeReference;
        return this;
    }

    /**
     * Get the jsonPathDefinition property: The JSONPath definition for each column mapping with a customized column
     * name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array
     * chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path",
     * "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
     * 
     * @return the jsonPathDefinition value.
     */
    public Object jsonPathDefinition() {
        return this.jsonPathDefinition;
    }

    /**
     * Set the jsonPathDefinition property: The JSONPath definition for each column mapping with a customized column
     * name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array
     * chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path",
     * "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
     * 
     * @param jsonPathDefinition the jsonPathDefinition value to set.
     * @return the JsonFormat object itself.
     */
    public JsonFormat withJsonPathDefinition(Object jsonPathDefinition) {
        this.jsonPathDefinition = jsonPathDefinition;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonFormat withSerializer(Object serializer) {
        super.withSerializer(serializer);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonFormat withDeserializer(Object deserializer) {
        super.withDeserializer(deserializer);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("serializer", serializer());
        jsonWriter.writeUntypedField("deserializer", deserializer());
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeUntypedField("filePattern", this.filePattern);
        jsonWriter.writeUntypedField("nestingSeparator", this.nestingSeparator);
        jsonWriter.writeUntypedField("encodingName", this.encodingName);
        jsonWriter.writeUntypedField("jsonNodeReference", this.jsonNodeReference);
        jsonWriter.writeUntypedField("jsonPathDefinition", this.jsonPathDefinition);
        if (additionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JsonFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JsonFormat if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the JsonFormat.
     */
    public static JsonFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JsonFormat deserializedJsonFormat = new JsonFormat();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serializer".equals(fieldName)) {
                    deserializedJsonFormat.withSerializer(reader.readUntyped());
                } else if ("deserializer".equals(fieldName)) {
                    deserializedJsonFormat.withDeserializer(reader.readUntyped());
                } else if ("type".equals(fieldName)) {
                    deserializedJsonFormat.type = reader.getString();
                } else if ("filePattern".equals(fieldName)) {
                    deserializedJsonFormat.filePattern = reader.readUntyped();
                } else if ("nestingSeparator".equals(fieldName)) {
                    deserializedJsonFormat.nestingSeparator = reader.readUntyped();
                } else if ("encodingName".equals(fieldName)) {
                    deserializedJsonFormat.encodingName = reader.readUntyped();
                } else if ("jsonNodeReference".equals(fieldName)) {
                    deserializedJsonFormat.jsonNodeReference = reader.readUntyped();
                } else if ("jsonPathDefinition".equals(fieldName)) {
                    deserializedJsonFormat.jsonPathDefinition = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedJsonFormat.withAdditionalProperties(additionalProperties);

            return deserializedJsonFormat;
        });
    }
}
