// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.Expression;
import java.io.IOException;

/**
 * Filter activity properties.
 */
@Fluent
public final class FilterActivityTypeProperties implements JsonSerializable<FilterActivityTypeProperties> {
    /*
     * Input array on which filter should be applied.
     */
    private Expression items;

    /*
     * Condition to be used for filtering the input.
     */
    private Expression condition;

    /**
     * Creates an instance of FilterActivityTypeProperties class.
     */
    public FilterActivityTypeProperties() {
    }

    /**
     * Get the items property: Input array on which filter should be applied.
     * 
     * @return the items value.
     */
    public Expression items() {
        return this.items;
    }

    /**
     * Set the items property: Input array on which filter should be applied.
     * 
     * @param items the items value to set.
     * @return the FilterActivityTypeProperties object itself.
     */
    public FilterActivityTypeProperties withItems(Expression items) {
        this.items = items;
        return this;
    }

    /**
     * Get the condition property: Condition to be used for filtering the input.
     * 
     * @return the condition value.
     */
    public Expression condition() {
        return this.condition;
    }

    /**
     * Set the condition property: Condition to be used for filtering the input.
     * 
     * @param condition the condition value to set.
     * @return the FilterActivityTypeProperties object itself.
     */
    public FilterActivityTypeProperties withCondition(Expression condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (items() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property items in model FilterActivityTypeProperties"));
        } else {
            items().validate();
        }
        if (condition() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property condition in model FilterActivityTypeProperties"));
        } else {
            condition().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FilterActivityTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("items", this.items);
        jsonWriter.writeJsonField("condition", this.condition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FilterActivityTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FilterActivityTypeProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FilterActivityTypeProperties.
     */
    public static FilterActivityTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FilterActivityTypeProperties deserializedFilterActivityTypeProperties = new FilterActivityTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("items".equals(fieldName)) {
                    deserializedFilterActivityTypeProperties.items = Expression.fromJson(reader);
                } else if ("condition".equals(fieldName)) {
                    deserializedFilterActivityTypeProperties.condition = Expression.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFilterActivityTypeProperties;
        });
    }
}
