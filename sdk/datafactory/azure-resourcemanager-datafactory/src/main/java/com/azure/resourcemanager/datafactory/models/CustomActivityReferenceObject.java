// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Reference objects for custom activity.
 */
@Fluent
public final class CustomActivityReferenceObject implements JsonSerializable<CustomActivityReferenceObject> {
    /*
     * Linked service references.
     */
    private List<LinkedServiceReference> linkedServices;

    /*
     * Dataset references.
     */
    private List<DatasetReference> datasets;

    /**
     * Creates an instance of CustomActivityReferenceObject class.
     */
    public CustomActivityReferenceObject() {
    }

    /**
     * Get the linkedServices property: Linked service references.
     * 
     * @return the linkedServices value.
     */
    public List<LinkedServiceReference> linkedServices() {
        return this.linkedServices;
    }

    /**
     * Set the linkedServices property: Linked service references.
     * 
     * @param linkedServices the linkedServices value to set.
     * @return the CustomActivityReferenceObject object itself.
     */
    public CustomActivityReferenceObject withLinkedServices(List<LinkedServiceReference> linkedServices) {
        this.linkedServices = linkedServices;
        return this;
    }

    /**
     * Get the datasets property: Dataset references.
     * 
     * @return the datasets value.
     */
    public List<DatasetReference> datasets() {
        return this.datasets;
    }

    /**
     * Set the datasets property: Dataset references.
     * 
     * @param datasets the datasets value to set.
     * @return the CustomActivityReferenceObject object itself.
     */
    public CustomActivityReferenceObject withDatasets(List<DatasetReference> datasets) {
        this.datasets = datasets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (linkedServices() != null) {
            linkedServices().forEach(e -> e.validate());
        }
        if (datasets() != null) {
            datasets().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("linkedServices", this.linkedServices,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("datasets", this.datasets, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomActivityReferenceObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomActivityReferenceObject if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomActivityReferenceObject.
     */
    public static CustomActivityReferenceObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomActivityReferenceObject deserializedCustomActivityReferenceObject
                = new CustomActivityReferenceObject();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("linkedServices".equals(fieldName)) {
                    List<LinkedServiceReference> linkedServices
                        = reader.readArray(reader1 -> LinkedServiceReference.fromJson(reader1));
                    deserializedCustomActivityReferenceObject.linkedServices = linkedServices;
                } else if ("datasets".equals(fieldName)) {
                    List<DatasetReference> datasets = reader.readArray(reader1 -> DatasetReference.fromJson(reader1));
                    deserializedCustomActivityReferenceObject.datasets = datasets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomActivityReferenceObject;
        });
    }
}
