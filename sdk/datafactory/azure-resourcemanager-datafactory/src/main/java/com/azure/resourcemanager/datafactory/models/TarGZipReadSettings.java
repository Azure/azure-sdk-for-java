// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * The TarGZip compression read settings.
 */
@Fluent
public final class TarGZipReadSettings extends CompressionReadSettings {
    /*
     * The Compression setting type.
     */
    private String type = "TarGZipReadSettings";

    /*
     * Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
     */
    private Object preserveCompressionFileNameAsFolder;

    /**
     * Creates an instance of TarGZipReadSettings class.
     */
    public TarGZipReadSettings() {
    }

    /**
     * Get the type property: The Compression setting type.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the preserveCompressionFileNameAsFolder property: Preserve the compression file name as folder path. Type:
     * boolean (or Expression with resultType boolean).
     * 
     * @return the preserveCompressionFileNameAsFolder value.
     */
    public Object preserveCompressionFileNameAsFolder() {
        return this.preserveCompressionFileNameAsFolder;
    }

    /**
     * Set the preserveCompressionFileNameAsFolder property: Preserve the compression file name as folder path. Type:
     * boolean (or Expression with resultType boolean).
     * 
     * @param preserveCompressionFileNameAsFolder the preserveCompressionFileNameAsFolder value to set.
     * @return the TarGZipReadSettings object itself.
     */
    public TarGZipReadSettings withPreserveCompressionFileNameAsFolder(Object preserveCompressionFileNameAsFolder) {
        this.preserveCompressionFileNameAsFolder = preserveCompressionFileNameAsFolder;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeUntypedField("preserveCompressionFileNameAsFolder", this.preserveCompressionFileNameAsFolder);
        if (additionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TarGZipReadSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TarGZipReadSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TarGZipReadSettings.
     */
    public static TarGZipReadSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TarGZipReadSettings deserializedTarGZipReadSettings = new TarGZipReadSettings();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedTarGZipReadSettings.type = reader.getString();
                } else if ("preserveCompressionFileNameAsFolder".equals(fieldName)) {
                    deserializedTarGZipReadSettings.preserveCompressionFileNameAsFolder = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedTarGZipReadSettings.withAdditionalProperties(additionalProperties);

            return deserializedTarGZipReadSettings;
        });
    }
}
