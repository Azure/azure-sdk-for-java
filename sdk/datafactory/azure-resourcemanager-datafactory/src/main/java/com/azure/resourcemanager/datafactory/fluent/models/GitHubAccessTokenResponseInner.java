// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Get GitHub access token response definition.
 */
@Fluent
public final class GitHubAccessTokenResponseInner implements JsonSerializable<GitHubAccessTokenResponseInner> {
    /*
     * GitHub access token.
     */
    private String gitHubAccessToken;

    /**
     * Creates an instance of GitHubAccessTokenResponseInner class.
     */
    public GitHubAccessTokenResponseInner() {
    }

    /**
     * Get the gitHubAccessToken property: GitHub access token.
     * 
     * @return the gitHubAccessToken value.
     */
    public String gitHubAccessToken() {
        return this.gitHubAccessToken;
    }

    /**
     * Set the gitHubAccessToken property: GitHub access token.
     * 
     * @param gitHubAccessToken the gitHubAccessToken value to set.
     * @return the GitHubAccessTokenResponseInner object itself.
     */
    public GitHubAccessTokenResponseInner withGitHubAccessToken(String gitHubAccessToken) {
        this.gitHubAccessToken = gitHubAccessToken;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("gitHubAccessToken", this.gitHubAccessToken);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GitHubAccessTokenResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GitHubAccessTokenResponseInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GitHubAccessTokenResponseInner.
     */
    public static GitHubAccessTokenResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GitHubAccessTokenResponseInner deserializedGitHubAccessTokenResponseInner
                = new GitHubAccessTokenResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("gitHubAccessToken".equals(fieldName)) {
                    deserializedGitHubAccessTokenResponseInner.gitHubAccessToken = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGitHubAccessTokenResponseInner;
        });
    }
}
