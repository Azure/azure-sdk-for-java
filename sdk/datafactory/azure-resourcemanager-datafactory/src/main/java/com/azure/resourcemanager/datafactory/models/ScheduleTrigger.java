// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** Trigger that creates pipeline runs periodically, on schedule. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("ScheduleTrigger")
@JsonFlatten
@Fluent
public class ScheduleTrigger extends MultiplePipelineTrigger {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ScheduleTrigger.class);

    /*
     * Recurrence schedule configuration.
     */
    @JsonProperty(value = "typeProperties.recurrence", required = true)
    private ScheduleTriggerRecurrence recurrence;

    /**
     * Get the recurrence property: Recurrence schedule configuration.
     *
     * @return the recurrence value.
     */
    public ScheduleTriggerRecurrence recurrence() {
        return this.recurrence;
    }

    /**
     * Set the recurrence property: Recurrence schedule configuration.
     *
     * @param recurrence the recurrence value to set.
     * @return the ScheduleTrigger object itself.
     */
    public ScheduleTrigger withRecurrence(ScheduleTriggerRecurrence recurrence) {
        this.recurrence = recurrence;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ScheduleTrigger withPipelines(List<TriggerPipelineReference> pipelines) {
        super.withPipelines(pipelines);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ScheduleTrigger withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ScheduleTrigger withAnnotations(List<Object> annotations) {
        super.withAnnotations(annotations);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (recurrence() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property recurrence in model ScheduleTrigger"));
        } else {
            recurrence().validate();
        }
    }
}
