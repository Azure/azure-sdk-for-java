// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeUpdateResult;
import com.azure.resourcemanager.datafactory.models.SelfHostedIntegrationRuntimeNodeStatus;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Properties of Self-hosted integration runtime node.
 */
@Fluent
public final class SelfHostedIntegrationRuntimeNodeInner
    implements JsonSerializable<SelfHostedIntegrationRuntimeNodeInner> {
    /*
     * Name of the integration runtime node.
     */
    private String nodeName;

    /*
     * Machine name of the integration runtime node.
     */
    private String machineName;

    /*
     * URI for the host machine of the integration runtime.
     */
    private String hostServiceUri;

    /*
     * Status of the integration runtime node.
     */
    private SelfHostedIntegrationRuntimeNodeStatus status;

    /*
     * The integration runtime capabilities dictionary
     */
    private Map<String, String> capabilities;

    /*
     * Status of the integration runtime node version.
     */
    private String versionStatus;

    /*
     * Version of the integration runtime node.
     */
    private String version;

    /*
     * The time at which the integration runtime node was registered in ISO8601 format.
     */
    private OffsetDateTime registerTime;

    /*
     * The most recent time at which the integration runtime was connected in ISO8601 format.
     */
    private OffsetDateTime lastConnectTime;

    /*
     * The time at which the integration runtime will expire in ISO8601 format.
     */
    private OffsetDateTime expiryTime;

    /*
     * The time the node last started up.
     */
    private OffsetDateTime lastStartTime;

    /*
     * The integration runtime node last stop time.
     */
    private OffsetDateTime lastStopTime;

    /*
     * The result of the last integration runtime node update.
     */
    private IntegrationRuntimeUpdateResult lastUpdateResult;

    /*
     * The last time for the integration runtime node update start.
     */
    private OffsetDateTime lastStartUpdateTime;

    /*
     * The last time for the integration runtime node update end.
     */
    private OffsetDateTime lastEndUpdateTime;

    /*
     * Indicates whether this node is the active dispatcher for integration runtime requests.
     */
    private Boolean isActiveDispatcher;

    /*
     * Maximum concurrent jobs on the integration runtime node.
     */
    private Integer concurrentJobsLimit;

    /*
     * The maximum concurrent jobs in this integration runtime.
     */
    private Integer maxConcurrentJobs;

    /*
     * Properties of Self-hosted integration runtime node.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of SelfHostedIntegrationRuntimeNodeInner class.
     */
    public SelfHostedIntegrationRuntimeNodeInner() {
    }

    /**
     * Get the nodeName property: Name of the integration runtime node.
     * 
     * @return the nodeName value.
     */
    public String nodeName() {
        return this.nodeName;
    }

    /**
     * Get the machineName property: Machine name of the integration runtime node.
     * 
     * @return the machineName value.
     */
    public String machineName() {
        return this.machineName;
    }

    /**
     * Get the hostServiceUri property: URI for the host machine of the integration runtime.
     * 
     * @return the hostServiceUri value.
     */
    public String hostServiceUri() {
        return this.hostServiceUri;
    }

    /**
     * Get the status property: Status of the integration runtime node.
     * 
     * @return the status value.
     */
    public SelfHostedIntegrationRuntimeNodeStatus status() {
        return this.status;
    }

    /**
     * Get the capabilities property: The integration runtime capabilities dictionary.
     * 
     * @return the capabilities value.
     */
    public Map<String, String> capabilities() {
        return this.capabilities;
    }

    /**
     * Get the versionStatus property: Status of the integration runtime node version.
     * 
     * @return the versionStatus value.
     */
    public String versionStatus() {
        return this.versionStatus;
    }

    /**
     * Get the version property: Version of the integration runtime node.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the registerTime property: The time at which the integration runtime node was registered in ISO8601 format.
     * 
     * @return the registerTime value.
     */
    public OffsetDateTime registerTime() {
        return this.registerTime;
    }

    /**
     * Get the lastConnectTime property: The most recent time at which the integration runtime was connected in ISO8601
     * format.
     * 
     * @return the lastConnectTime value.
     */
    public OffsetDateTime lastConnectTime() {
        return this.lastConnectTime;
    }

    /**
     * Get the expiryTime property: The time at which the integration runtime will expire in ISO8601 format.
     * 
     * @return the expiryTime value.
     */
    public OffsetDateTime expiryTime() {
        return this.expiryTime;
    }

    /**
     * Get the lastStartTime property: The time the node last started up.
     * 
     * @return the lastStartTime value.
     */
    public OffsetDateTime lastStartTime() {
        return this.lastStartTime;
    }

    /**
     * Get the lastStopTime property: The integration runtime node last stop time.
     * 
     * @return the lastStopTime value.
     */
    public OffsetDateTime lastStopTime() {
        return this.lastStopTime;
    }

    /**
     * Get the lastUpdateResult property: The result of the last integration runtime node update.
     * 
     * @return the lastUpdateResult value.
     */
    public IntegrationRuntimeUpdateResult lastUpdateResult() {
        return this.lastUpdateResult;
    }

    /**
     * Get the lastStartUpdateTime property: The last time for the integration runtime node update start.
     * 
     * @return the lastStartUpdateTime value.
     */
    public OffsetDateTime lastStartUpdateTime() {
        return this.lastStartUpdateTime;
    }

    /**
     * Get the lastEndUpdateTime property: The last time for the integration runtime node update end.
     * 
     * @return the lastEndUpdateTime value.
     */
    public OffsetDateTime lastEndUpdateTime() {
        return this.lastEndUpdateTime;
    }

    /**
     * Get the isActiveDispatcher property: Indicates whether this node is the active dispatcher for integration runtime
     * requests.
     * 
     * @return the isActiveDispatcher value.
     */
    public Boolean isActiveDispatcher() {
        return this.isActiveDispatcher;
    }

    /**
     * Get the concurrentJobsLimit property: Maximum concurrent jobs on the integration runtime node.
     * 
     * @return the concurrentJobsLimit value.
     */
    public Integer concurrentJobsLimit() {
        return this.concurrentJobsLimit;
    }

    /**
     * Get the maxConcurrentJobs property: The maximum concurrent jobs in this integration runtime.
     * 
     * @return the maxConcurrentJobs value.
     */
    public Integer maxConcurrentJobs() {
        return this.maxConcurrentJobs;
    }

    /**
     * Get the additionalProperties property: Properties of Self-hosted integration runtime node.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Properties of Self-hosted integration runtime node.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the SelfHostedIntegrationRuntimeNodeInner object itself.
     */
    public SelfHostedIntegrationRuntimeNodeInner withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SelfHostedIntegrationRuntimeNodeInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SelfHostedIntegrationRuntimeNodeInner if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SelfHostedIntegrationRuntimeNodeInner.
     */
    public static SelfHostedIntegrationRuntimeNodeInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SelfHostedIntegrationRuntimeNodeInner deserializedSelfHostedIntegrationRuntimeNodeInner
                = new SelfHostedIntegrationRuntimeNodeInner();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nodeName".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.nodeName = reader.getString();
                } else if ("machineName".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.machineName = reader.getString();
                } else if ("hostServiceUri".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.hostServiceUri = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.status
                        = SelfHostedIntegrationRuntimeNodeStatus.fromString(reader.getString());
                } else if ("capabilities".equals(fieldName)) {
                    Map<String, String> capabilities = reader.readMap(reader1 -> reader1.getString());
                    deserializedSelfHostedIntegrationRuntimeNodeInner.capabilities = capabilities;
                } else if ("versionStatus".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.versionStatus = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.version = reader.getString();
                } else if ("registerTime".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.registerTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastConnectTime".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.lastConnectTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("expiryTime".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.expiryTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastStartTime".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.lastStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastStopTime".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.lastStopTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastUpdateResult".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.lastUpdateResult
                        = IntegrationRuntimeUpdateResult.fromString(reader.getString());
                } else if ("lastStartUpdateTime".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.lastStartUpdateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastEndUpdateTime".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.lastEndUpdateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("isActiveDispatcher".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.isActiveDispatcher
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("concurrentJobsLimit".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.concurrentJobsLimit
                        = reader.getNullable(JsonReader::getInt);
                } else if ("maxConcurrentJobs".equals(fieldName)) {
                    deserializedSelfHostedIntegrationRuntimeNodeInner.maxConcurrentJobs
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedSelfHostedIntegrationRuntimeNodeInner.additionalProperties = additionalProperties;

            return deserializedSelfHostedIntegrationRuntimeNodeInner;
        });
    }
}
