// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Sql Server family connector common linked service properties.
 */
@Fluent
public class SqlServerBaseLinkedServiceTypeProperties
    implements JsonSerializable<SqlServerBaseLinkedServiceTypeProperties> {
    /*
     * The name or network address of the instance of SQL Server to which to connect, used by recommended version. Type:
     * string (or Expression with resultType string).
     */
    private Object server;

    /*
     * The name of the database, used by recommended version. Type: string (or Expression with resultType string).
     */
    private Object database;

    /*
     * Indicate whether TLS encryption is required for all data sent between the client and server, used by recommended
     * version. Possible values are true/yes/mandatory, false/no/optional and strict. Type: string (or Expression with
     * resultType string).
     */
    private Object encrypt;

    /*
     * Indicate whether the channel will be encrypted while bypassing walking the certificate chain to validate trust,
     * used by recommended version. Type: Boolean (or Expression with resultType boolean).
     */
    private Object trustServerCertificate;

    /*
     * The host name to use when validating the server certificate for the connection. When not specified, the server
     * name from the Data Source is used for certificate validation, used by recommended version. Type: string (or
     * Expression with resultType string).
     */
    private Object hostnameInCertificate;

    /*
     * The application workload type when connecting to a server, used by recommended version. Possible values are
     * ReadOnly and ReadWrite. Type: string (or Expression with resultType string).
     */
    private Object applicationIntent;

    /*
     * The length of time (in seconds) to wait for a connection to the server before terminating the attempt and
     * generating an error, used by recommended version. Type: integer (or Expression with resultType integer).
     */
    private Object connectTimeout;

    /*
     * The number of re-connections attempted after identifying that there was an idle connection failure, used by
     * recommended version. This must be an integer between 0 and 255. Type: integer (or Expression with resultType
     * integer).
     */
    private Object connectRetryCount;

    /*
     * The amount of time (in seconds) between each re-connection attempt after identifying that there was an idle
     * connection failure, used by recommended version. This must be an integer between 1 and 60. Type: integer (or
     * Expression with resultType integer).
     */
    private Object connectRetryInterval;

    /*
     * The minimum time, in seconds, for the connection to live in the connection pool before being destroyed, used by
     * recommended version. Type: integer (or Expression with resultType integer).
     */
    private Object loadBalanceTimeout;

    /*
     * The default wait time (in seconds) before terminating the attempt to execute a command and generating an error,
     * used by recommended version. Type: integer (or Expression with resultType integer).
     */
    private Object commandTimeout;

    /*
     * Indicate whether User ID and Password are specified in the connection (when false) or whether the current Windows
     * account credentials are used for authentication (when true), used by recommended version. Type: Boolean (or
     * Expression with resultType boolean).
     */
    private Object integratedSecurity;

    /*
     * The name or address of the partner server to connect to if the primary server is down, used by recommended
     * version. Type: string (or Expression with resultType string).
     */
    private Object failoverPartner;

    /*
     * The maximum number of connections allowed in the connection pool for this specific connection string, used by
     * recommended version. Type: integer (or Expression with resultType integer).
     */
    private Object maxPoolSize;

    /*
     * The minimum number of connections allowed in the connection pool for this specific connection string, used by
     * recommended version. Type: integer (or Expression with resultType integer).
     */
    private Object minPoolSize;

    /*
     * When true, an application can maintain multiple active result sets (MARS). When false, an application must
     * process or cancel all result sets from one batch before it can execute any other batch on that connection, used
     * by recommended version. Type: Boolean (or Expression with resultType boolean).
     */
    private Object multipleActiveResultSets;

    /*
     * If your application is connecting to an AlwaysOn availability group (AG) on different subnets, setting
     * MultiSubnetFailover=true provides faster detection of and connection to the (currently) active server, used by
     * recommended version. Type: Boolean (or Expression with resultType boolean).
     */
    private Object multiSubnetFailover;

    /*
     * The size in bytes of the network packets used to communicate with an instance of server, used by recommended
     * version. Type: integer (or Expression with resultType integer).
     */
    private Object packetSize;

    /*
     * Indicate whether the connection will be pooled or explicitly opened every time that the connection is requested,
     * used by recommended version. Type: Boolean (or Expression with resultType boolean).
     */
    private Object pooling;

    /**
     * Creates an instance of SqlServerBaseLinkedServiceTypeProperties class.
     */
    public SqlServerBaseLinkedServiceTypeProperties() {
    }

    /**
     * Get the server property: The name or network address of the instance of SQL Server to which to connect, used by
     * recommended version. Type: string (or Expression with resultType string).
     * 
     * @return the server value.
     */
    public Object server() {
        return this.server;
    }

    /**
     * Set the server property: The name or network address of the instance of SQL Server to which to connect, used by
     * recommended version. Type: string (or Expression with resultType string).
     * 
     * @param server the server value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withServer(Object server) {
        this.server = server;
        return this;
    }

    /**
     * Get the database property: The name of the database, used by recommended version. Type: string (or Expression
     * with resultType string).
     * 
     * @return the database value.
     */
    public Object database() {
        return this.database;
    }

    /**
     * Set the database property: The name of the database, used by recommended version. Type: string (or Expression
     * with resultType string).
     * 
     * @param database the database value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withDatabase(Object database) {
        this.database = database;
        return this;
    }

    /**
     * Get the encrypt property: Indicate whether TLS encryption is required for all data sent between the client and
     * server, used by recommended version. Possible values are true/yes/mandatory, false/no/optional and strict. Type:
     * string (or Expression with resultType string).
     * 
     * @return the encrypt value.
     */
    public Object encrypt() {
        return this.encrypt;
    }

    /**
     * Set the encrypt property: Indicate whether TLS encryption is required for all data sent between the client and
     * server, used by recommended version. Possible values are true/yes/mandatory, false/no/optional and strict. Type:
     * string (or Expression with resultType string).
     * 
     * @param encrypt the encrypt value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withEncrypt(Object encrypt) {
        this.encrypt = encrypt;
        return this;
    }

    /**
     * Get the trustServerCertificate property: Indicate whether the channel will be encrypted while bypassing walking
     * the certificate chain to validate trust, used by recommended version. Type: Boolean (or Expression with
     * resultType boolean).
     * 
     * @return the trustServerCertificate value.
     */
    public Object trustServerCertificate() {
        return this.trustServerCertificate;
    }

    /**
     * Set the trustServerCertificate property: Indicate whether the channel will be encrypted while bypassing walking
     * the certificate chain to validate trust, used by recommended version. Type: Boolean (or Expression with
     * resultType boolean).
     * 
     * @param trustServerCertificate the trustServerCertificate value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withTrustServerCertificate(Object trustServerCertificate) {
        this.trustServerCertificate = trustServerCertificate;
        return this;
    }

    /**
     * Get the hostnameInCertificate property: The host name to use when validating the server certificate for the
     * connection. When not specified, the server name from the Data Source is used for certificate validation, used by
     * recommended version. Type: string (or Expression with resultType string).
     * 
     * @return the hostnameInCertificate value.
     */
    public Object hostnameInCertificate() {
        return this.hostnameInCertificate;
    }

    /**
     * Set the hostnameInCertificate property: The host name to use when validating the server certificate for the
     * connection. When not specified, the server name from the Data Source is used for certificate validation, used by
     * recommended version. Type: string (or Expression with resultType string).
     * 
     * @param hostnameInCertificate the hostnameInCertificate value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withHostnameInCertificate(Object hostnameInCertificate) {
        this.hostnameInCertificate = hostnameInCertificate;
        return this;
    }

    /**
     * Get the applicationIntent property: The application workload type when connecting to a server, used by
     * recommended version. Possible values are ReadOnly and ReadWrite. Type: string (or Expression with resultType
     * string).
     * 
     * @return the applicationIntent value.
     */
    public Object applicationIntent() {
        return this.applicationIntent;
    }

    /**
     * Set the applicationIntent property: The application workload type when connecting to a server, used by
     * recommended version. Possible values are ReadOnly and ReadWrite. Type: string (or Expression with resultType
     * string).
     * 
     * @param applicationIntent the applicationIntent value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withApplicationIntent(Object applicationIntent) {
        this.applicationIntent = applicationIntent;
        return this;
    }

    /**
     * Get the connectTimeout property: The length of time (in seconds) to wait for a connection to the server before
     * terminating the attempt and generating an error, used by recommended version. Type: integer (or Expression with
     * resultType integer).
     * 
     * @return the connectTimeout value.
     */
    public Object connectTimeout() {
        return this.connectTimeout;
    }

    /**
     * Set the connectTimeout property: The length of time (in seconds) to wait for a connection to the server before
     * terminating the attempt and generating an error, used by recommended version. Type: integer (or Expression with
     * resultType integer).
     * 
     * @param connectTimeout the connectTimeout value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withConnectTimeout(Object connectTimeout) {
        this.connectTimeout = connectTimeout;
        return this;
    }

    /**
     * Get the connectRetryCount property: The number of re-connections attempted after identifying that there was an
     * idle connection failure, used by recommended version. This must be an integer between 0 and 255. Type: integer
     * (or Expression with resultType integer).
     * 
     * @return the connectRetryCount value.
     */
    public Object connectRetryCount() {
        return this.connectRetryCount;
    }

    /**
     * Set the connectRetryCount property: The number of re-connections attempted after identifying that there was an
     * idle connection failure, used by recommended version. This must be an integer between 0 and 255. Type: integer
     * (or Expression with resultType integer).
     * 
     * @param connectRetryCount the connectRetryCount value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withConnectRetryCount(Object connectRetryCount) {
        this.connectRetryCount = connectRetryCount;
        return this;
    }

    /**
     * Get the connectRetryInterval property: The amount of time (in seconds) between each re-connection attempt after
     * identifying that there was an idle connection failure, used by recommended version. This must be an integer
     * between 1 and 60. Type: integer (or Expression with resultType integer).
     * 
     * @return the connectRetryInterval value.
     */
    public Object connectRetryInterval() {
        return this.connectRetryInterval;
    }

    /**
     * Set the connectRetryInterval property: The amount of time (in seconds) between each re-connection attempt after
     * identifying that there was an idle connection failure, used by recommended version. This must be an integer
     * between 1 and 60. Type: integer (or Expression with resultType integer).
     * 
     * @param connectRetryInterval the connectRetryInterval value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withConnectRetryInterval(Object connectRetryInterval) {
        this.connectRetryInterval = connectRetryInterval;
        return this;
    }

    /**
     * Get the loadBalanceTimeout property: The minimum time, in seconds, for the connection to live in the connection
     * pool before being destroyed, used by recommended version. Type: integer (or Expression with resultType integer).
     * 
     * @return the loadBalanceTimeout value.
     */
    public Object loadBalanceTimeout() {
        return this.loadBalanceTimeout;
    }

    /**
     * Set the loadBalanceTimeout property: The minimum time, in seconds, for the connection to live in the connection
     * pool before being destroyed, used by recommended version. Type: integer (or Expression with resultType integer).
     * 
     * @param loadBalanceTimeout the loadBalanceTimeout value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withLoadBalanceTimeout(Object loadBalanceTimeout) {
        this.loadBalanceTimeout = loadBalanceTimeout;
        return this;
    }

    /**
     * Get the commandTimeout property: The default wait time (in seconds) before terminating the attempt to execute a
     * command and generating an error, used by recommended version. Type: integer (or Expression with resultType
     * integer).
     * 
     * @return the commandTimeout value.
     */
    public Object commandTimeout() {
        return this.commandTimeout;
    }

    /**
     * Set the commandTimeout property: The default wait time (in seconds) before terminating the attempt to execute a
     * command and generating an error, used by recommended version. Type: integer (or Expression with resultType
     * integer).
     * 
     * @param commandTimeout the commandTimeout value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withCommandTimeout(Object commandTimeout) {
        this.commandTimeout = commandTimeout;
        return this;
    }

    /**
     * Get the integratedSecurity property: Indicate whether User ID and Password are specified in the connection (when
     * false) or whether the current Windows account credentials are used for authentication (when true), used by
     * recommended version. Type: Boolean (or Expression with resultType boolean).
     * 
     * @return the integratedSecurity value.
     */
    public Object integratedSecurity() {
        return this.integratedSecurity;
    }

    /**
     * Set the integratedSecurity property: Indicate whether User ID and Password are specified in the connection (when
     * false) or whether the current Windows account credentials are used for authentication (when true), used by
     * recommended version. Type: Boolean (or Expression with resultType boolean).
     * 
     * @param integratedSecurity the integratedSecurity value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withIntegratedSecurity(Object integratedSecurity) {
        this.integratedSecurity = integratedSecurity;
        return this;
    }

    /**
     * Get the failoverPartner property: The name or address of the partner server to connect to if the primary server
     * is down, used by recommended version. Type: string (or Expression with resultType string).
     * 
     * @return the failoverPartner value.
     */
    public Object failoverPartner() {
        return this.failoverPartner;
    }

    /**
     * Set the failoverPartner property: The name or address of the partner server to connect to if the primary server
     * is down, used by recommended version. Type: string (or Expression with resultType string).
     * 
     * @param failoverPartner the failoverPartner value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withFailoverPartner(Object failoverPartner) {
        this.failoverPartner = failoverPartner;
        return this;
    }

    /**
     * Get the maxPoolSize property: The maximum number of connections allowed in the connection pool for this specific
     * connection string, used by recommended version. Type: integer (or Expression with resultType integer).
     * 
     * @return the maxPoolSize value.
     */
    public Object maxPoolSize() {
        return this.maxPoolSize;
    }

    /**
     * Set the maxPoolSize property: The maximum number of connections allowed in the connection pool for this specific
     * connection string, used by recommended version. Type: integer (or Expression with resultType integer).
     * 
     * @param maxPoolSize the maxPoolSize value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withMaxPoolSize(Object maxPoolSize) {
        this.maxPoolSize = maxPoolSize;
        return this;
    }

    /**
     * Get the minPoolSize property: The minimum number of connections allowed in the connection pool for this specific
     * connection string, used by recommended version. Type: integer (or Expression with resultType integer).
     * 
     * @return the minPoolSize value.
     */
    public Object minPoolSize() {
        return this.minPoolSize;
    }

    /**
     * Set the minPoolSize property: The minimum number of connections allowed in the connection pool for this specific
     * connection string, used by recommended version. Type: integer (or Expression with resultType integer).
     * 
     * @param minPoolSize the minPoolSize value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withMinPoolSize(Object minPoolSize) {
        this.minPoolSize = minPoolSize;
        return this;
    }

    /**
     * Get the multipleActiveResultSets property: When true, an application can maintain multiple active result sets
     * (MARS). When false, an application must process or cancel all result sets from one batch before it can execute
     * any other batch on that connection, used by recommended version. Type: Boolean (or Expression with resultType
     * boolean).
     * 
     * @return the multipleActiveResultSets value.
     */
    public Object multipleActiveResultSets() {
        return this.multipleActiveResultSets;
    }

    /**
     * Set the multipleActiveResultSets property: When true, an application can maintain multiple active result sets
     * (MARS). When false, an application must process or cancel all result sets from one batch before it can execute
     * any other batch on that connection, used by recommended version. Type: Boolean (or Expression with resultType
     * boolean).
     * 
     * @param multipleActiveResultSets the multipleActiveResultSets value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withMultipleActiveResultSets(Object multipleActiveResultSets) {
        this.multipleActiveResultSets = multipleActiveResultSets;
        return this;
    }

    /**
     * Get the multiSubnetFailover property: If your application is connecting to an AlwaysOn availability group (AG) on
     * different subnets, setting MultiSubnetFailover=true provides faster detection of and connection to the
     * (currently) active server, used by recommended version. Type: Boolean (or Expression with resultType boolean).
     * 
     * @return the multiSubnetFailover value.
     */
    public Object multiSubnetFailover() {
        return this.multiSubnetFailover;
    }

    /**
     * Set the multiSubnetFailover property: If your application is connecting to an AlwaysOn availability group (AG) on
     * different subnets, setting MultiSubnetFailover=true provides faster detection of and connection to the
     * (currently) active server, used by recommended version. Type: Boolean (or Expression with resultType boolean).
     * 
     * @param multiSubnetFailover the multiSubnetFailover value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withMultiSubnetFailover(Object multiSubnetFailover) {
        this.multiSubnetFailover = multiSubnetFailover;
        return this;
    }

    /**
     * Get the packetSize property: The size in bytes of the network packets used to communicate with an instance of
     * server, used by recommended version. Type: integer (or Expression with resultType integer).
     * 
     * @return the packetSize value.
     */
    public Object packetSize() {
        return this.packetSize;
    }

    /**
     * Set the packetSize property: The size in bytes of the network packets used to communicate with an instance of
     * server, used by recommended version. Type: integer (or Expression with resultType integer).
     * 
     * @param packetSize the packetSize value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withPacketSize(Object packetSize) {
        this.packetSize = packetSize;
        return this;
    }

    /**
     * Get the pooling property: Indicate whether the connection will be pooled or explicitly opened every time that the
     * connection is requested, used by recommended version. Type: Boolean (or Expression with resultType boolean).
     * 
     * @return the pooling value.
     */
    public Object pooling() {
        return this.pooling;
    }

    /**
     * Set the pooling property: Indicate whether the connection will be pooled or explicitly opened every time that the
     * connection is requested, used by recommended version. Type: Boolean (or Expression with resultType boolean).
     * 
     * @param pooling the pooling value to set.
     * @return the SqlServerBaseLinkedServiceTypeProperties object itself.
     */
    public SqlServerBaseLinkedServiceTypeProperties withPooling(Object pooling) {
        this.pooling = pooling;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("server", this.server);
        jsonWriter.writeUntypedField("database", this.database);
        jsonWriter.writeUntypedField("encrypt", this.encrypt);
        jsonWriter.writeUntypedField("trustServerCertificate", this.trustServerCertificate);
        jsonWriter.writeUntypedField("hostNameInCertificate", this.hostnameInCertificate);
        jsonWriter.writeUntypedField("applicationIntent", this.applicationIntent);
        jsonWriter.writeUntypedField("connectTimeout", this.connectTimeout);
        jsonWriter.writeUntypedField("connectRetryCount", this.connectRetryCount);
        jsonWriter.writeUntypedField("connectRetryInterval", this.connectRetryInterval);
        jsonWriter.writeUntypedField("loadBalanceTimeout", this.loadBalanceTimeout);
        jsonWriter.writeUntypedField("commandTimeout", this.commandTimeout);
        jsonWriter.writeUntypedField("integratedSecurity", this.integratedSecurity);
        jsonWriter.writeUntypedField("failoverPartner", this.failoverPartner);
        jsonWriter.writeUntypedField("maxPoolSize", this.maxPoolSize);
        jsonWriter.writeUntypedField("minPoolSize", this.minPoolSize);
        jsonWriter.writeUntypedField("multipleActiveResultSets", this.multipleActiveResultSets);
        jsonWriter.writeUntypedField("multiSubnetFailover", this.multiSubnetFailover);
        jsonWriter.writeUntypedField("packetSize", this.packetSize);
        jsonWriter.writeUntypedField("pooling", this.pooling);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerBaseLinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerBaseLinkedServiceTypeProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlServerBaseLinkedServiceTypeProperties.
     */
    public static SqlServerBaseLinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerBaseLinkedServiceTypeProperties deserializedSqlServerBaseLinkedServiceTypeProperties
                = new SqlServerBaseLinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("server".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.server = reader.readUntyped();
                } else if ("database".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.database = reader.readUntyped();
                } else if ("encrypt".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.encrypt = reader.readUntyped();
                } else if ("trustServerCertificate".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.trustServerCertificate = reader.readUntyped();
                } else if ("hostNameInCertificate".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.hostnameInCertificate = reader.readUntyped();
                } else if ("applicationIntent".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.applicationIntent = reader.readUntyped();
                } else if ("connectTimeout".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.connectTimeout = reader.readUntyped();
                } else if ("connectRetryCount".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.connectRetryCount = reader.readUntyped();
                } else if ("connectRetryInterval".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.connectRetryInterval = reader.readUntyped();
                } else if ("loadBalanceTimeout".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.loadBalanceTimeout = reader.readUntyped();
                } else if ("commandTimeout".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.commandTimeout = reader.readUntyped();
                } else if ("integratedSecurity".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.integratedSecurity = reader.readUntyped();
                } else if ("failoverPartner".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.failoverPartner = reader.readUntyped();
                } else if ("maxPoolSize".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.maxPoolSize = reader.readUntyped();
                } else if ("minPoolSize".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.minPoolSize = reader.readUntyped();
                } else if ("multipleActiveResultSets".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.multipleActiveResultSets
                        = reader.readUntyped();
                } else if ("multiSubnetFailover".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.multiSubnetFailover = reader.readUntyped();
                } else if ("packetSize".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.packetSize = reader.readUntyped();
                } else if ("pooling".equals(fieldName)) {
                    deserializedSqlServerBaseLinkedServiceTypeProperties.pooling = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerBaseLinkedServiceTypeProperties;
        });
    }
}
