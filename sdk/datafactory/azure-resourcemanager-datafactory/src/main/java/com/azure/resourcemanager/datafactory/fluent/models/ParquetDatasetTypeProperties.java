// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import java.io.IOException;

/**
 * Parquet dataset properties.
 */
@Fluent
public final class ParquetDatasetTypeProperties implements JsonSerializable<ParquetDatasetTypeProperties> {
    /*
     * The location of the parquet storage.
     */
    private DatasetLocation location;

    /*
     * The data compressionCodec. Type: string (or Expression with resultType string).
     */
    private Object compressionCodec;

    /**
     * Creates an instance of ParquetDatasetTypeProperties class.
     */
    public ParquetDatasetTypeProperties() {
    }

    /**
     * Get the location property: The location of the parquet storage.
     * 
     * @return the location value.
     */
    public DatasetLocation location() {
        return this.location;
    }

    /**
     * Set the location property: The location of the parquet storage.
     * 
     * @param location the location value to set.
     * @return the ParquetDatasetTypeProperties object itself.
     */
    public ParquetDatasetTypeProperties withLocation(DatasetLocation location) {
        this.location = location;
        return this;
    }

    /**
     * Get the compressionCodec property: The data compressionCodec. Type: string (or Expression with resultType
     * string).
     * 
     * @return the compressionCodec value.
     */
    public Object compressionCodec() {
        return this.compressionCodec;
    }

    /**
     * Set the compressionCodec property: The data compressionCodec. Type: string (or Expression with resultType
     * string).
     * 
     * @param compressionCodec the compressionCodec value to set.
     * @return the ParquetDatasetTypeProperties object itself.
     */
    public ParquetDatasetTypeProperties withCompressionCodec(Object compressionCodec) {
        this.compressionCodec = compressionCodec;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (location() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property location in model ParquetDatasetTypeProperties"));
        } else {
            location().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ParquetDatasetTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("location", this.location);
        jsonWriter.writeUntypedField("compressionCodec", this.compressionCodec);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ParquetDatasetTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ParquetDatasetTypeProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ParquetDatasetTypeProperties.
     */
    public static ParquetDatasetTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ParquetDatasetTypeProperties deserializedParquetDatasetTypeProperties = new ParquetDatasetTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("location".equals(fieldName)) {
                    deserializedParquetDatasetTypeProperties.location = DatasetLocation.fromJson(reader);
                } else if ("compressionCodec".equals(fieldName)) {
                    deserializedParquetDatasetTypeProperties.compressionCodec = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedParquetDatasetTypeProperties;
        });
    }
}
