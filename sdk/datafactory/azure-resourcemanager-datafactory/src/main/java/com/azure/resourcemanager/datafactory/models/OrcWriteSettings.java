// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Orc write settings.
 */
@Fluent
public final class OrcWriteSettings extends FormatWriteSettings {
    /*
     * The write setting type.
     */
    private String type = "OrcWriteSettings";

    /*
     * Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or
     * Expression with resultType integer).
     */
    private Object maxRowsPerFile;

    /*
     * Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store
     * without partitionOptions. Type: string (or Expression with resultType string).
     */
    private Object fileNamePrefix;

    /**
     * Creates an instance of OrcWriteSettings class.
     */
    public OrcWriteSettings() {
    }

    /**
     * Get the type property: The write setting type.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the maxRowsPerFile property: Limit the written file's row count to be smaller than or equal to the specified
     * count. Type: integer (or Expression with resultType integer).
     * 
     * @return the maxRowsPerFile value.
     */
    public Object maxRowsPerFile() {
        return this.maxRowsPerFile;
    }

    /**
     * Set the maxRowsPerFile property: Limit the written file's row count to be smaller than or equal to the specified
     * count. Type: integer (or Expression with resultType integer).
     * 
     * @param maxRowsPerFile the maxRowsPerFile value to set.
     * @return the OrcWriteSettings object itself.
     */
    public OrcWriteSettings withMaxRowsPerFile(Object maxRowsPerFile) {
        this.maxRowsPerFile = maxRowsPerFile;
        return this;
    }

    /**
     * Get the fileNamePrefix property: Specifies the file name pattern
     * &lt;fileNamePrefix&gt;_&lt;fileIndex&gt;.&lt;fileExtension&gt; when copy from non-file based store without
     * partitionOptions. Type: string (or Expression with resultType string).
     * 
     * @return the fileNamePrefix value.
     */
    public Object fileNamePrefix() {
        return this.fileNamePrefix;
    }

    /**
     * Set the fileNamePrefix property: Specifies the file name pattern
     * &lt;fileNamePrefix&gt;_&lt;fileIndex&gt;.&lt;fileExtension&gt; when copy from non-file based store without
     * partitionOptions. Type: string (or Expression with resultType string).
     * 
     * @param fileNamePrefix the fileNamePrefix value to set.
     * @return the OrcWriteSettings object itself.
     */
    public OrcWriteSettings withFileNamePrefix(Object fileNamePrefix) {
        this.fileNamePrefix = fileNamePrefix;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeUntypedField("maxRowsPerFile", this.maxRowsPerFile);
        jsonWriter.writeUntypedField("fileNamePrefix", this.fileNamePrefix);
        if (additionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrcWriteSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrcWriteSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OrcWriteSettings.
     */
    public static OrcWriteSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrcWriteSettings deserializedOrcWriteSettings = new OrcWriteSettings();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedOrcWriteSettings.type = reader.getString();
                } else if ("maxRowsPerFile".equals(fieldName)) {
                    deserializedOrcWriteSettings.maxRowsPerFile = reader.readUntyped();
                } else if ("fileNamePrefix".equals(fieldName)) {
                    deserializedOrcWriteSettings.fileNamePrefix = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedOrcWriteSettings.withAdditionalProperties(additionalProperties);

            return deserializedOrcWriteSettings;
        });
    }
}
