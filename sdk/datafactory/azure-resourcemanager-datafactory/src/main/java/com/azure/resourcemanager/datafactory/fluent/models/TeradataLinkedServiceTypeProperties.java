// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import com.azure.resourcemanager.datafactory.models.TeradataAuthenticationType;
import java.io.IOException;

/**
 * Teradata linked service properties.
 */
@Fluent
public final class TeradataLinkedServiceTypeProperties
    implements JsonSerializable<TeradataLinkedServiceTypeProperties> {
    /*
     * Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Only applied for
     * version 1.0.
     */
    private Object connectionString;

    /*
     * Server name for connection. Type: string (or Expression with resultType string).
     */
    private Object server;

    /*
     * AuthenticationType to be used for connection.
     */
    private TeradataAuthenticationType authenticationType;

    /*
     * Username for authentication. Type: string (or Expression with resultType string).
     */
    private Object username;

    /*
     * Password for authentication.
     */
    private SecretBase password;

    /*
     * SSL mode for connection. Valid values including: “Disable”, “Allow”, “Prefer”, “Require”, “Verify-CA”,
     * “Verify-Full”. Default value is “Verify-Full”. Type: string (or Expression with resultType string). Only applied
     * for version 2.0.
     */
    private Object sslMode;

    /*
     * The port numbers when connecting to server through non HTTPS/TLS connections. Type: integer (or Expression with
     * resultType integer). Only used for V2. Only applied for version 2.0.
     */
    private Object portNumber;

    /*
     * The port numbers when connecting to server through HTTPS/TLS connections. Type: integer (or Expression with
     * resultType integer). Only applied for version 2.0.
     */
    private Object httpsPortNumber;

    /*
     * Specifies whether to encrypt all communication with the Teradata database. Allowed values are 0 or 1. This
     * setting will be ignored for HTTPS/TLS connections. Type: integer (or Expression with resultType integer). Only
     * applied for version 2.0.
     */
    private Object useDataEncryption;

    /*
     * The character set to use for the connection. Type: string (or Expression with resultType string). Only applied
     * for version 2.0.
     */
    private Object characterSet;

    /*
     * The maximum size of the response buffer for SQL requests, in bytes. Type: integer. Only applied for version 2.0.
     */
    private Object maxRespSize;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime
     * credential manager. Type: string.
     */
    private String encryptedCredential;

    /**
     * Creates an instance of TeradataLinkedServiceTypeProperties class.
     */
    public TeradataLinkedServiceTypeProperties() {
    }

    /**
     * Get the connectionString property: Teradata ODBC connection string. Type: string, SecureString or
     * AzureKeyVaultSecretReference. Only applied for version 1.0.
     * 
     * @return the connectionString value.
     */
    public Object connectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: Teradata ODBC connection string. Type: string, SecureString or
     * AzureKeyVaultSecretReference. Only applied for version 1.0.
     * 
     * @param connectionString the connectionString value to set.
     * @return the TeradataLinkedServiceTypeProperties object itself.
     */
    public TeradataLinkedServiceTypeProperties withConnectionString(Object connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Get the server property: Server name for connection. Type: string (or Expression with resultType string).
     * 
     * @return the server value.
     */
    public Object server() {
        return this.server;
    }

    /**
     * Set the server property: Server name for connection. Type: string (or Expression with resultType string).
     * 
     * @param server the server value to set.
     * @return the TeradataLinkedServiceTypeProperties object itself.
     */
    public TeradataLinkedServiceTypeProperties withServer(Object server) {
        this.server = server;
        return this;
    }

    /**
     * Get the authenticationType property: AuthenticationType to be used for connection.
     * 
     * @return the authenticationType value.
     */
    public TeradataAuthenticationType authenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: AuthenticationType to be used for connection.
     * 
     * @param authenticationType the authenticationType value to set.
     * @return the TeradataLinkedServiceTypeProperties object itself.
     */
    public TeradataLinkedServiceTypeProperties withAuthenticationType(TeradataAuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get the username property: Username for authentication. Type: string (or Expression with resultType string).
     * 
     * @return the username value.
     */
    public Object username() {
        return this.username;
    }

    /**
     * Set the username property: Username for authentication. Type: string (or Expression with resultType string).
     * 
     * @param username the username value to set.
     * @return the TeradataLinkedServiceTypeProperties object itself.
     */
    public TeradataLinkedServiceTypeProperties withUsername(Object username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: Password for authentication.
     * 
     * @return the password value.
     */
    public SecretBase password() {
        return this.password;
    }

    /**
     * Set the password property: Password for authentication.
     * 
     * @param password the password value to set.
     * @return the TeradataLinkedServiceTypeProperties object itself.
     */
    public TeradataLinkedServiceTypeProperties withPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * Get the sslMode property: SSL mode for connection. Valid values including: “Disable”, “Allow”, “Prefer”,
     * “Require”, “Verify-CA”, “Verify-Full”. Default value is “Verify-Full”. Type: string (or Expression with
     * resultType string). Only applied for version 2.0.
     * 
     * @return the sslMode value.
     */
    public Object sslMode() {
        return this.sslMode;
    }

    /**
     * Set the sslMode property: SSL mode for connection. Valid values including: “Disable”, “Allow”, “Prefer”,
     * “Require”, “Verify-CA”, “Verify-Full”. Default value is “Verify-Full”. Type: string (or Expression with
     * resultType string). Only applied for version 2.0.
     * 
     * @param sslMode the sslMode value to set.
     * @return the TeradataLinkedServiceTypeProperties object itself.
     */
    public TeradataLinkedServiceTypeProperties withSslMode(Object sslMode) {
        this.sslMode = sslMode;
        return this;
    }

    /**
     * Get the portNumber property: The port numbers when connecting to server through non HTTPS/TLS connections. Type:
     * integer (or Expression with resultType integer). Only used for V2. Only applied for version 2.0.
     * 
     * @return the portNumber value.
     */
    public Object portNumber() {
        return this.portNumber;
    }

    /**
     * Set the portNumber property: The port numbers when connecting to server through non HTTPS/TLS connections. Type:
     * integer (or Expression with resultType integer). Only used for V2. Only applied for version 2.0.
     * 
     * @param portNumber the portNumber value to set.
     * @return the TeradataLinkedServiceTypeProperties object itself.
     */
    public TeradataLinkedServiceTypeProperties withPortNumber(Object portNumber) {
        this.portNumber = portNumber;
        return this;
    }

    /**
     * Get the httpsPortNumber property: The port numbers when connecting to server through HTTPS/TLS connections. Type:
     * integer (or Expression with resultType integer). Only applied for version 2.0.
     * 
     * @return the httpsPortNumber value.
     */
    public Object httpsPortNumber() {
        return this.httpsPortNumber;
    }

    /**
     * Set the httpsPortNumber property: The port numbers when connecting to server through HTTPS/TLS connections. Type:
     * integer (or Expression with resultType integer). Only applied for version 2.0.
     * 
     * @param httpsPortNumber the httpsPortNumber value to set.
     * @return the TeradataLinkedServiceTypeProperties object itself.
     */
    public TeradataLinkedServiceTypeProperties withHttpsPortNumber(Object httpsPortNumber) {
        this.httpsPortNumber = httpsPortNumber;
        return this;
    }

    /**
     * Get the useDataEncryption property: Specifies whether to encrypt all communication with the Teradata database.
     * Allowed values are 0 or 1. This setting will be ignored for HTTPS/TLS connections. Type: integer (or Expression
     * with resultType integer). Only applied for version 2.0.
     * 
     * @return the useDataEncryption value.
     */
    public Object useDataEncryption() {
        return this.useDataEncryption;
    }

    /**
     * Set the useDataEncryption property: Specifies whether to encrypt all communication with the Teradata database.
     * Allowed values are 0 or 1. This setting will be ignored for HTTPS/TLS connections. Type: integer (or Expression
     * with resultType integer). Only applied for version 2.0.
     * 
     * @param useDataEncryption the useDataEncryption value to set.
     * @return the TeradataLinkedServiceTypeProperties object itself.
     */
    public TeradataLinkedServiceTypeProperties withUseDataEncryption(Object useDataEncryption) {
        this.useDataEncryption = useDataEncryption;
        return this;
    }

    /**
     * Get the characterSet property: The character set to use for the connection. Type: string (or Expression with
     * resultType string). Only applied for version 2.0.
     * 
     * @return the characterSet value.
     */
    public Object characterSet() {
        return this.characterSet;
    }

    /**
     * Set the characterSet property: The character set to use for the connection. Type: string (or Expression with
     * resultType string). Only applied for version 2.0.
     * 
     * @param characterSet the characterSet value to set.
     * @return the TeradataLinkedServiceTypeProperties object itself.
     */
    public TeradataLinkedServiceTypeProperties withCharacterSet(Object characterSet) {
        this.characterSet = characterSet;
        return this;
    }

    /**
     * Get the maxRespSize property: The maximum size of the response buffer for SQL requests, in bytes. Type: integer.
     * Only applied for version 2.0.
     * 
     * @return the maxRespSize value.
     */
    public Object maxRespSize() {
        return this.maxRespSize;
    }

    /**
     * Set the maxRespSize property: The maximum size of the response buffer for SQL requests, in bytes. Type: integer.
     * Only applied for version 2.0.
     * 
     * @param maxRespSize the maxRespSize value to set.
     * @return the TeradataLinkedServiceTypeProperties object itself.
     */
    public TeradataLinkedServiceTypeProperties withMaxRespSize(Object maxRespSize) {
        this.maxRespSize = maxRespSize;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @return the encryptedCredential value.
     */
    public String encryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the TeradataLinkedServiceTypeProperties object itself.
     */
    public TeradataLinkedServiceTypeProperties withEncryptedCredential(String encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (password() != null) {
            password().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (this.connectionString != null) {
            jsonWriter.writeUntypedField("connectionString", this.connectionString);
        }
        if (this.server != null) {
            jsonWriter.writeUntypedField("server", this.server);
        }
        jsonWriter.writeStringField("authenticationType",
            this.authenticationType == null ? null : this.authenticationType.toString());
        if (this.username != null) {
            jsonWriter.writeUntypedField("username", this.username);
        }
        jsonWriter.writeJsonField("password", this.password);
        if (this.sslMode != null) {
            jsonWriter.writeUntypedField("sslMode", this.sslMode);
        }
        if (this.portNumber != null) {
            jsonWriter.writeUntypedField("portNumber", this.portNumber);
        }
        if (this.httpsPortNumber != null) {
            jsonWriter.writeUntypedField("httpsPortNumber", this.httpsPortNumber);
        }
        if (this.useDataEncryption != null) {
            jsonWriter.writeUntypedField("useDataEncryption", this.useDataEncryption);
        }
        if (this.characterSet != null) {
            jsonWriter.writeUntypedField("characterSet", this.characterSet);
        }
        if (this.maxRespSize != null) {
            jsonWriter.writeUntypedField("maxRespSize", this.maxRespSize);
        }
        jsonWriter.writeStringField("encryptedCredential", this.encryptedCredential);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TeradataLinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TeradataLinkedServiceTypeProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TeradataLinkedServiceTypeProperties.
     */
    public static TeradataLinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TeradataLinkedServiceTypeProperties deserializedTeradataLinkedServiceTypeProperties
                = new TeradataLinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectionString".equals(fieldName)) {
                    deserializedTeradataLinkedServiceTypeProperties.connectionString = reader.readUntyped();
                } else if ("server".equals(fieldName)) {
                    deserializedTeradataLinkedServiceTypeProperties.server = reader.readUntyped();
                } else if ("authenticationType".equals(fieldName)) {
                    deserializedTeradataLinkedServiceTypeProperties.authenticationType
                        = TeradataAuthenticationType.fromString(reader.getString());
                } else if ("username".equals(fieldName)) {
                    deserializedTeradataLinkedServiceTypeProperties.username = reader.readUntyped();
                } else if ("password".equals(fieldName)) {
                    deserializedTeradataLinkedServiceTypeProperties.password = SecretBase.fromJson(reader);
                } else if ("sslMode".equals(fieldName)) {
                    deserializedTeradataLinkedServiceTypeProperties.sslMode = reader.readUntyped();
                } else if ("portNumber".equals(fieldName)) {
                    deserializedTeradataLinkedServiceTypeProperties.portNumber = reader.readUntyped();
                } else if ("httpsPortNumber".equals(fieldName)) {
                    deserializedTeradataLinkedServiceTypeProperties.httpsPortNumber = reader.readUntyped();
                } else if ("useDataEncryption".equals(fieldName)) {
                    deserializedTeradataLinkedServiceTypeProperties.useDataEncryption = reader.readUntyped();
                } else if ("characterSet".equals(fieldName)) {
                    deserializedTeradataLinkedServiceTypeProperties.characterSet = reader.readUntyped();
                } else if ("maxRespSize".equals(fieldName)) {
                    deserializedTeradataLinkedServiceTypeProperties.maxRespSize = reader.readUntyped();
                } else if ("encryptedCredential".equals(fieldName)) {
                    deserializedTeradataLinkedServiceTypeProperties.encryptedCredential = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTeradataLinkedServiceTypeProperties;
        });
    }
}
