// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response body with a run identifier.
 */
@Fluent
public final class CreateRunResponseInner implements JsonSerializable<CreateRunResponseInner> {
    /*
     * Identifier of a run.
     */
    private String runId;

    /**
     * Creates an instance of CreateRunResponseInner class.
     */
    public CreateRunResponseInner() {
    }

    /**
     * Get the runId property: Identifier of a run.
     * 
     * @return the runId value.
     */
    public String runId() {
        return this.runId;
    }

    /**
     * Set the runId property: Identifier of a run.
     * 
     * @param runId the runId value to set.
     * @return the CreateRunResponseInner object itself.
     */
    public CreateRunResponseInner withRunId(String runId) {
        this.runId = runId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (runId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property runId in model CreateRunResponseInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CreateRunResponseInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("runId", this.runId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateRunResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateRunResponseInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateRunResponseInner.
     */
    public static CreateRunResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateRunResponseInner deserializedCreateRunResponseInner = new CreateRunResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("runId".equals(fieldName)) {
                    deserializedCreateRunResponseInner.runId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCreateRunResponseInner;
        });
    }
}
