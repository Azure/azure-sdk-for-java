// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.UserAccessPolicy;
import java.io.IOException;

/**
 * Get Data Plane read only token response definition.
 */
@Fluent
public final class AccessPolicyResponseInner implements JsonSerializable<AccessPolicyResponseInner> {
    /*
     * The user access policy.
     */
    private UserAccessPolicy policy;

    /*
     * Data Plane read only access token.
     */
    private String accessToken;

    /*
     * Data Plane service base URL.
     */
    private String dataPlaneUrl;

    /**
     * Creates an instance of AccessPolicyResponseInner class.
     */
    public AccessPolicyResponseInner() {
    }

    /**
     * Get the policy property: The user access policy.
     * 
     * @return the policy value.
     */
    public UserAccessPolicy policy() {
        return this.policy;
    }

    /**
     * Set the policy property: The user access policy.
     * 
     * @param policy the policy value to set.
     * @return the AccessPolicyResponseInner object itself.
     */
    public AccessPolicyResponseInner withPolicy(UserAccessPolicy policy) {
        this.policy = policy;
        return this;
    }

    /**
     * Get the accessToken property: Data Plane read only access token.
     * 
     * @return the accessToken value.
     */
    public String accessToken() {
        return this.accessToken;
    }

    /**
     * Set the accessToken property: Data Plane read only access token.
     * 
     * @param accessToken the accessToken value to set.
     * @return the AccessPolicyResponseInner object itself.
     */
    public AccessPolicyResponseInner withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }

    /**
     * Get the dataPlaneUrl property: Data Plane service base URL.
     * 
     * @return the dataPlaneUrl value.
     */
    public String dataPlaneUrl() {
        return this.dataPlaneUrl;
    }

    /**
     * Set the dataPlaneUrl property: Data Plane service base URL.
     * 
     * @param dataPlaneUrl the dataPlaneUrl value to set.
     * @return the AccessPolicyResponseInner object itself.
     */
    public AccessPolicyResponseInner withDataPlaneUrl(String dataPlaneUrl) {
        this.dataPlaneUrl = dataPlaneUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (policy() != null) {
            policy().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("policy", this.policy);
        jsonWriter.writeStringField("accessToken", this.accessToken);
        jsonWriter.writeStringField("dataPlaneUrl", this.dataPlaneUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessPolicyResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessPolicyResponseInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessPolicyResponseInner.
     */
    public static AccessPolicyResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessPolicyResponseInner deserializedAccessPolicyResponseInner = new AccessPolicyResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policy".equals(fieldName)) {
                    deserializedAccessPolicyResponseInner.policy = UserAccessPolicy.fromJson(reader);
                } else if ("accessToken".equals(fieldName)) {
                    deserializedAccessPolicyResponseInner.accessToken = reader.getString();
                } else if ("dataPlaneUrl".equals(fieldName)) {
                    deserializedAccessPolicyResponseInner.dataPlaneUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessPolicyResponseInner;
        });
    }
}
