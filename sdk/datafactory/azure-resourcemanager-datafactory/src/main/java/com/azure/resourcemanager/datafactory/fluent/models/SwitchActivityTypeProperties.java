// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.SwitchCase;
import java.io.IOException;
import java.util.List;

/**
 * Switch activity properties.
 */
@Fluent
public final class SwitchActivityTypeProperties implements JsonSerializable<SwitchActivityTypeProperties> {
    /*
     * An expression that would evaluate to a string or integer. This is used to determine the block of activities in
     * cases that will be executed.
     */
    private Expression on;

    /*
     * List of cases that correspond to expected values of the 'on' property. This is an optional property and if not
     * provided, the activity will execute activities provided in defaultActivities.
     */
    private List<SwitchCase> cases;

    /*
     * List of activities to execute if no case condition is satisfied. This is an optional property and if not
     * provided, the activity will exit without any action.
     */
    private List<Activity> defaultActivities;

    /**
     * Creates an instance of SwitchActivityTypeProperties class.
     */
    public SwitchActivityTypeProperties() {
    }

    /**
     * Get the on property: An expression that would evaluate to a string or integer. This is used to determine the
     * block of activities in cases that will be executed.
     * 
     * @return the on value.
     */
    public Expression on() {
        return this.on;
    }

    /**
     * Set the on property: An expression that would evaluate to a string or integer. This is used to determine the
     * block of activities in cases that will be executed.
     * 
     * @param on the on value to set.
     * @return the SwitchActivityTypeProperties object itself.
     */
    public SwitchActivityTypeProperties withOn(Expression on) {
        this.on = on;
        return this;
    }

    /**
     * Get the cases property: List of cases that correspond to expected values of the 'on' property. This is an
     * optional property and if not provided, the activity will execute activities provided in defaultActivities.
     * 
     * @return the cases value.
     */
    public List<SwitchCase> cases() {
        return this.cases;
    }

    /**
     * Set the cases property: List of cases that correspond to expected values of the 'on' property. This is an
     * optional property and if not provided, the activity will execute activities provided in defaultActivities.
     * 
     * @param cases the cases value to set.
     * @return the SwitchActivityTypeProperties object itself.
     */
    public SwitchActivityTypeProperties withCases(List<SwitchCase> cases) {
        this.cases = cases;
        return this;
    }

    /**
     * Get the defaultActivities property: List of activities to execute if no case condition is satisfied. This is an
     * optional property and if not provided, the activity will exit without any action.
     * 
     * @return the defaultActivities value.
     */
    public List<Activity> defaultActivities() {
        return this.defaultActivities;
    }

    /**
     * Set the defaultActivities property: List of activities to execute if no case condition is satisfied. This is an
     * optional property and if not provided, the activity will exit without any action.
     * 
     * @param defaultActivities the defaultActivities value to set.
     * @return the SwitchActivityTypeProperties object itself.
     */
    public SwitchActivityTypeProperties withDefaultActivities(List<Activity> defaultActivities) {
        this.defaultActivities = defaultActivities;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (on() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property on in model SwitchActivityTypeProperties"));
        } else {
            on().validate();
        }
        if (cases() != null) {
            cases().forEach(e -> e.validate());
        }
        if (defaultActivities() != null) {
            defaultActivities().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SwitchActivityTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("on", this.on);
        jsonWriter.writeArrayField("cases", this.cases, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("defaultActivities", this.defaultActivities,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SwitchActivityTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SwitchActivityTypeProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SwitchActivityTypeProperties.
     */
    public static SwitchActivityTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SwitchActivityTypeProperties deserializedSwitchActivityTypeProperties = new SwitchActivityTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("on".equals(fieldName)) {
                    deserializedSwitchActivityTypeProperties.on = Expression.fromJson(reader);
                } else if ("cases".equals(fieldName)) {
                    List<SwitchCase> cases = reader.readArray(reader1 -> SwitchCase.fromJson(reader1));
                    deserializedSwitchActivityTypeProperties.cases = cases;
                } else if ("defaultActivities".equals(fieldName)) {
                    List<Activity> defaultActivities = reader.readArray(reader1 -> Activity.fromJson(reader1));
                    deserializedSwitchActivityTypeProperties.defaultActivities = defaultActivities;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSwitchActivityTypeProperties;
        });
    }
}
