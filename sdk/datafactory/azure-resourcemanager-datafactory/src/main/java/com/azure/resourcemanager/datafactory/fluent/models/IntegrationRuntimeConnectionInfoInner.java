// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Connection information for encrypting the on-premises data source credentials.
 */
@Fluent
public final class IntegrationRuntimeConnectionInfoInner
    implements JsonSerializable<IntegrationRuntimeConnectionInfoInner> {
    /*
     * The token generated in service. Callers use this token to authenticate to integration runtime.
     */
    private String serviceToken;

    /*
     * The integration runtime SSL certificate thumbprint. Click-Once application uses it to do server validation.
     */
    private String identityCertThumbprint;

    /*
     * The on-premises integration runtime host URL.
     */
    private String hostServiceUri;

    /*
     * The integration runtime version.
     */
    private String version;

    /*
     * The public key for encrypting a credential when transferring the credential to the integration runtime.
     */
    private String publicKey;

    /*
     * Whether the identity certificate is expired.
     */
    private Boolean isIdentityCertExprired;

    /*
     * Connection information for encrypting the on-premises data source credentials.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of IntegrationRuntimeConnectionInfoInner class.
     */
    public IntegrationRuntimeConnectionInfoInner() {
    }

    /**
     * Get the serviceToken property: The token generated in service. Callers use this token to authenticate to
     * integration runtime.
     * 
     * @return the serviceToken value.
     */
    public String serviceToken() {
        return this.serviceToken;
    }

    /**
     * Get the identityCertThumbprint property: The integration runtime SSL certificate thumbprint. Click-Once
     * application uses it to do server validation.
     * 
     * @return the identityCertThumbprint value.
     */
    public String identityCertThumbprint() {
        return this.identityCertThumbprint;
    }

    /**
     * Get the hostServiceUri property: The on-premises integration runtime host URL.
     * 
     * @return the hostServiceUri value.
     */
    public String hostServiceUri() {
        return this.hostServiceUri;
    }

    /**
     * Get the version property: The integration runtime version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the publicKey property: The public key for encrypting a credential when transferring the credential to the
     * integration runtime.
     * 
     * @return the publicKey value.
     */
    public String publicKey() {
        return this.publicKey;
    }

    /**
     * Get the isIdentityCertExprired property: Whether the identity certificate is expired.
     * 
     * @return the isIdentityCertExprired value.
     */
    public Boolean isIdentityCertExprired() {
        return this.isIdentityCertExprired;
    }

    /**
     * Get the additionalProperties property: Connection information for encrypting the on-premises data source
     * credentials.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Connection information for encrypting the on-premises data source
     * credentials.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the IntegrationRuntimeConnectionInfoInner object itself.
     */
    public IntegrationRuntimeConnectionInfoInner withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IntegrationRuntimeConnectionInfoInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IntegrationRuntimeConnectionInfoInner if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IntegrationRuntimeConnectionInfoInner.
     */
    public static IntegrationRuntimeConnectionInfoInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IntegrationRuntimeConnectionInfoInner deserializedIntegrationRuntimeConnectionInfoInner
                = new IntegrationRuntimeConnectionInfoInner();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceToken".equals(fieldName)) {
                    deserializedIntegrationRuntimeConnectionInfoInner.serviceToken = reader.getString();
                } else if ("identityCertThumbprint".equals(fieldName)) {
                    deserializedIntegrationRuntimeConnectionInfoInner.identityCertThumbprint = reader.getString();
                } else if ("hostServiceUri".equals(fieldName)) {
                    deserializedIntegrationRuntimeConnectionInfoInner.hostServiceUri = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedIntegrationRuntimeConnectionInfoInner.version = reader.getString();
                } else if ("publicKey".equals(fieldName)) {
                    deserializedIntegrationRuntimeConnectionInfoInner.publicKey = reader.getString();
                } else if ("isIdentityCertExprired".equals(fieldName)) {
                    deserializedIntegrationRuntimeConnectionInfoInner.isIdentityCertExprired
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedIntegrationRuntimeConnectionInfoInner.additionalProperties = additionalProperties;

            return deserializedIntegrationRuntimeConnectionInfoInner;
        });
    }
}
