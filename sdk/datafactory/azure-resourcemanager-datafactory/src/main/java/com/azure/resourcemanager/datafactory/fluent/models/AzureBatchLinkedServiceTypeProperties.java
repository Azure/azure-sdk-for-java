// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datafactory.models.CredentialReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import java.io.IOException;

/**
 * Azure Batch linked service properties.
 */
@Fluent
public final class AzureBatchLinkedServiceTypeProperties
    implements JsonSerializable<AzureBatchLinkedServiceTypeProperties> {
    /*
     * The Azure Batch account name. Type: string (or Expression with resultType string).
     */
    private Object accountName;

    /*
     * The Azure Batch account access key.
     */
    private SecretBase accessKey;

    /*
     * The Azure Batch URI. Type: string (or Expression with resultType string).
     */
    private Object batchUri;

    /*
     * The Azure Batch pool name. Type: string (or Expression with resultType string).
     */
    private Object poolName;

    /*
     * The Azure Storage linked service reference.
     */
    private LinkedServiceReference linkedServiceName;

    /*
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime
     * credential manager. Type: string.
     */
    private String encryptedCredential;

    /*
     * The credential reference containing authentication information.
     */
    private CredentialReference credential;

    /**
     * Creates an instance of AzureBatchLinkedServiceTypeProperties class.
     */
    public AzureBatchLinkedServiceTypeProperties() {
    }

    /**
     * Get the accountName property: The Azure Batch account name. Type: string (or Expression with resultType string).
     * 
     * @return the accountName value.
     */
    public Object accountName() {
        return this.accountName;
    }

    /**
     * Set the accountName property: The Azure Batch account name. Type: string (or Expression with resultType string).
     * 
     * @param accountName the accountName value to set.
     * @return the AzureBatchLinkedServiceTypeProperties object itself.
     */
    public AzureBatchLinkedServiceTypeProperties withAccountName(Object accountName) {
        this.accountName = accountName;
        return this;
    }

    /**
     * Get the accessKey property: The Azure Batch account access key.
     * 
     * @return the accessKey value.
     */
    public SecretBase accessKey() {
        return this.accessKey;
    }

    /**
     * Set the accessKey property: The Azure Batch account access key.
     * 
     * @param accessKey the accessKey value to set.
     * @return the AzureBatchLinkedServiceTypeProperties object itself.
     */
    public AzureBatchLinkedServiceTypeProperties withAccessKey(SecretBase accessKey) {
        this.accessKey = accessKey;
        return this;
    }

    /**
     * Get the batchUri property: The Azure Batch URI. Type: string (or Expression with resultType string).
     * 
     * @return the batchUri value.
     */
    public Object batchUri() {
        return this.batchUri;
    }

    /**
     * Set the batchUri property: The Azure Batch URI. Type: string (or Expression with resultType string).
     * 
     * @param batchUri the batchUri value to set.
     * @return the AzureBatchLinkedServiceTypeProperties object itself.
     */
    public AzureBatchLinkedServiceTypeProperties withBatchUri(Object batchUri) {
        this.batchUri = batchUri;
        return this;
    }

    /**
     * Get the poolName property: The Azure Batch pool name. Type: string (or Expression with resultType string).
     * 
     * @return the poolName value.
     */
    public Object poolName() {
        return this.poolName;
    }

    /**
     * Set the poolName property: The Azure Batch pool name. Type: string (or Expression with resultType string).
     * 
     * @param poolName the poolName value to set.
     * @return the AzureBatchLinkedServiceTypeProperties object itself.
     */
    public AzureBatchLinkedServiceTypeProperties withPoolName(Object poolName) {
        this.poolName = poolName;
        return this;
    }

    /**
     * Get the linkedServiceName property: The Azure Storage linked service reference.
     * 
     * @return the linkedServiceName value.
     */
    public LinkedServiceReference linkedServiceName() {
        return this.linkedServiceName;
    }

    /**
     * Set the linkedServiceName property: The Azure Storage linked service reference.
     * 
     * @param linkedServiceName the linkedServiceName value to set.
     * @return the AzureBatchLinkedServiceTypeProperties object itself.
     */
    public AzureBatchLinkedServiceTypeProperties withLinkedServiceName(LinkedServiceReference linkedServiceName) {
        this.linkedServiceName = linkedServiceName;
        return this;
    }

    /**
     * Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @return the encryptedCredential value.
     */
    public String encryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted
     * using the integration runtime credential manager. Type: string.
     * 
     * @param encryptedCredential the encryptedCredential value to set.
     * @return the AzureBatchLinkedServiceTypeProperties object itself.
     */
    public AzureBatchLinkedServiceTypeProperties withEncryptedCredential(String encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Get the credential property: The credential reference containing authentication information.
     * 
     * @return the credential value.
     */
    public CredentialReference credential() {
        return this.credential;
    }

    /**
     * Set the credential property: The credential reference containing authentication information.
     * 
     * @param credential the credential value to set.
     * @return the AzureBatchLinkedServiceTypeProperties object itself.
     */
    public AzureBatchLinkedServiceTypeProperties withCredential(CredentialReference credential) {
        this.credential = credential;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (accountName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property accountName in model AzureBatchLinkedServiceTypeProperties"));
        }
        if (accessKey() != null) {
            accessKey().validate();
        }
        if (batchUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property batchUri in model AzureBatchLinkedServiceTypeProperties"));
        }
        if (poolName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property poolName in model AzureBatchLinkedServiceTypeProperties"));
        }
        if (linkedServiceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property linkedServiceName in model AzureBatchLinkedServiceTypeProperties"));
        } else {
            linkedServiceName().validate();
        }
        if (credential() != null) {
            credential().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureBatchLinkedServiceTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("accountName", this.accountName);
        jsonWriter.writeUntypedField("batchUri", this.batchUri);
        jsonWriter.writeUntypedField("poolName", this.poolName);
        jsonWriter.writeJsonField("linkedServiceName", this.linkedServiceName);
        jsonWriter.writeJsonField("accessKey", this.accessKey);
        jsonWriter.writeStringField("encryptedCredential", this.encryptedCredential);
        jsonWriter.writeJsonField("credential", this.credential);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureBatchLinkedServiceTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureBatchLinkedServiceTypeProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureBatchLinkedServiceTypeProperties.
     */
    public static AzureBatchLinkedServiceTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureBatchLinkedServiceTypeProperties deserializedAzureBatchLinkedServiceTypeProperties
                = new AzureBatchLinkedServiceTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accountName".equals(fieldName)) {
                    deserializedAzureBatchLinkedServiceTypeProperties.accountName = reader.readUntyped();
                } else if ("batchUri".equals(fieldName)) {
                    deserializedAzureBatchLinkedServiceTypeProperties.batchUri = reader.readUntyped();
                } else if ("poolName".equals(fieldName)) {
                    deserializedAzureBatchLinkedServiceTypeProperties.poolName = reader.readUntyped();
                } else if ("linkedServiceName".equals(fieldName)) {
                    deserializedAzureBatchLinkedServiceTypeProperties.linkedServiceName
                        = LinkedServiceReference.fromJson(reader);
                } else if ("accessKey".equals(fieldName)) {
                    deserializedAzureBatchLinkedServiceTypeProperties.accessKey = SecretBase.fromJson(reader);
                } else if ("encryptedCredential".equals(fieldName)) {
                    deserializedAzureBatchLinkedServiceTypeProperties.encryptedCredential = reader.getString();
                } else if ("credential".equals(fieldName)) {
                    deserializedAzureBatchLinkedServiceTypeProperties.credential = CredentialReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureBatchLinkedServiceTypeProperties;
        });
    }
}
