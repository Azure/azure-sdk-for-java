// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Databricks Notebook activity properties.
 */
@Fluent
public final class DatabricksNotebookActivityTypeProperties
    implements JsonSerializable<DatabricksNotebookActivityTypeProperties> {
    /*
     * The absolute path of the notebook to be run in the Databricks Workspace. This path must begin with a slash. Type:
     * string (or Expression with resultType string).
     */
    private Object notebookPath;

    /*
     * Base parameters to be used for each run of this job.If the notebook takes a parameter that is not specified, the
     * default value from the notebook will be used.
     */
    private Map<String, Object> baseParameters;

    /*
     * A list of libraries to be installed on the cluster that will execute the job.
     */
    private List<Map<String, Object>> libraries;

    /**
     * Creates an instance of DatabricksNotebookActivityTypeProperties class.
     */
    public DatabricksNotebookActivityTypeProperties() {
    }

    /**
     * Get the notebookPath property: The absolute path of the notebook to be run in the Databricks Workspace. This path
     * must begin with a slash. Type: string (or Expression with resultType string).
     * 
     * @return the notebookPath value.
     */
    public Object notebookPath() {
        return this.notebookPath;
    }

    /**
     * Set the notebookPath property: The absolute path of the notebook to be run in the Databricks Workspace. This path
     * must begin with a slash. Type: string (or Expression with resultType string).
     * 
     * @param notebookPath the notebookPath value to set.
     * @return the DatabricksNotebookActivityTypeProperties object itself.
     */
    public DatabricksNotebookActivityTypeProperties withNotebookPath(Object notebookPath) {
        this.notebookPath = notebookPath;
        return this;
    }

    /**
     * Get the baseParameters property: Base parameters to be used for each run of this job.If the notebook takes a
     * parameter that is not specified, the default value from the notebook will be used.
     * 
     * @return the baseParameters value.
     */
    public Map<String, Object> baseParameters() {
        return this.baseParameters;
    }

    /**
     * Set the baseParameters property: Base parameters to be used for each run of this job.If the notebook takes a
     * parameter that is not specified, the default value from the notebook will be used.
     * 
     * @param baseParameters the baseParameters value to set.
     * @return the DatabricksNotebookActivityTypeProperties object itself.
     */
    public DatabricksNotebookActivityTypeProperties withBaseParameters(Map<String, Object> baseParameters) {
        this.baseParameters = baseParameters;
        return this;
    }

    /**
     * Get the libraries property: A list of libraries to be installed on the cluster that will execute the job.
     * 
     * @return the libraries value.
     */
    public List<Map<String, Object>> libraries() {
        return this.libraries;
    }

    /**
     * Set the libraries property: A list of libraries to be installed on the cluster that will execute the job.
     * 
     * @param libraries the libraries value to set.
     * @return the DatabricksNotebookActivityTypeProperties object itself.
     */
    public DatabricksNotebookActivityTypeProperties withLibraries(List<Map<String, Object>> libraries) {
        this.libraries = libraries;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (notebookPath() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property notebookPath in model DatabricksNotebookActivityTypeProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DatabricksNotebookActivityTypeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("notebookPath", this.notebookPath);
        jsonWriter.writeMapField("baseParameters", this.baseParameters,
            (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeArrayField("libraries", this.libraries,
            (writer, element) -> writer.writeMap(element, (writer1, element1) -> writer1.writeUntyped(element1)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabricksNotebookActivityTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabricksNotebookActivityTypeProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DatabricksNotebookActivityTypeProperties.
     */
    public static DatabricksNotebookActivityTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabricksNotebookActivityTypeProperties deserializedDatabricksNotebookActivityTypeProperties
                = new DatabricksNotebookActivityTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("notebookPath".equals(fieldName)) {
                    deserializedDatabricksNotebookActivityTypeProperties.notebookPath = reader.readUntyped();
                } else if ("baseParameters".equals(fieldName)) {
                    Map<String, Object> baseParameters = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDatabricksNotebookActivityTypeProperties.baseParameters = baseParameters;
                } else if ("libraries".equals(fieldName)) {
                    List<Map<String, Object>> libraries
                        = reader.readArray(reader1 -> reader1.readMap(reader2 -> reader2.readUntyped()));
                    deserializedDatabricksNotebookActivityTypeProperties.libraries = libraries;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabricksNotebookActivityTypeProperties;
        });
    }
}
