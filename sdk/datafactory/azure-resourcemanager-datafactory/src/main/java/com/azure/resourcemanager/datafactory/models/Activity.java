// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * A pipeline activity.
 */
@Fluent
public class Activity implements JsonSerializable<Activity> {
    /*
     * Type of activity.
     */
    private String type = "Activity";

    /*
     * Activity name.
     */
    private String name;

    /*
     * Activity description.
     */
    private String description;

    /*
     * Activity state. This is an optional property and if not provided, the state will be Active by default.
     */
    private ActivityState state;

    /*
     * Status result of the activity when the state is set to Inactive. This is an optional property and if not provided
     * when the activity is inactive, the status will be Succeeded by default.
     */
    private ActivityOnInactiveMarkAs onInactiveMarkAs;

    /*
     * Activity depends on condition.
     */
    private List<ActivityDependency> dependsOn;

    /*
     * Activity user properties.
     */
    private List<UserProperty> userProperties;

    /*
     * A pipeline activity.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of Activity class.
     */
    public Activity() {
    }

    /**
     * Get the type property: Type of activity.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: Activity name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Activity name.
     * 
     * @param name the name value to set.
     * @return the Activity object itself.
     */
    public Activity withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the description property: Activity description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Activity description.
     * 
     * @param description the description value to set.
     * @return the Activity object itself.
     */
    public Activity withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the state property: Activity state. This is an optional property and if not provided, the state will be
     * Active by default.
     * 
     * @return the state value.
     */
    public ActivityState state() {
        return this.state;
    }

    /**
     * Set the state property: Activity state. This is an optional property and if not provided, the state will be
     * Active by default.
     * 
     * @param state the state value to set.
     * @return the Activity object itself.
     */
    public Activity withState(ActivityState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the onInactiveMarkAs property: Status result of the activity when the state is set to Inactive. This is an
     * optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
     * 
     * @return the onInactiveMarkAs value.
     */
    public ActivityOnInactiveMarkAs onInactiveMarkAs() {
        return this.onInactiveMarkAs;
    }

    /**
     * Set the onInactiveMarkAs property: Status result of the activity when the state is set to Inactive. This is an
     * optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
     * 
     * @param onInactiveMarkAs the onInactiveMarkAs value to set.
     * @return the Activity object itself.
     */
    public Activity withOnInactiveMarkAs(ActivityOnInactiveMarkAs onInactiveMarkAs) {
        this.onInactiveMarkAs = onInactiveMarkAs;
        return this;
    }

    /**
     * Get the dependsOn property: Activity depends on condition.
     * 
     * @return the dependsOn value.
     */
    public List<ActivityDependency> dependsOn() {
        return this.dependsOn;
    }

    /**
     * Set the dependsOn property: Activity depends on condition.
     * 
     * @param dependsOn the dependsOn value to set.
     * @return the Activity object itself.
     */
    public Activity withDependsOn(List<ActivityDependency> dependsOn) {
        this.dependsOn = dependsOn;
        return this;
    }

    /**
     * Get the userProperties property: Activity user properties.
     * 
     * @return the userProperties value.
     */
    public List<UserProperty> userProperties() {
        return this.userProperties;
    }

    /**
     * Set the userProperties property: Activity user properties.
     * 
     * @param userProperties the userProperties value to set.
     * @return the Activity object itself.
     */
    public Activity withUserProperties(List<UserProperty> userProperties) {
        this.userProperties = userProperties;
        return this;
    }

    /**
     * Get the additionalProperties property: A pipeline activity.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: A pipeline activity.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the Activity object itself.
     */
    public Activity withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model Activity"));
        }
        if (dependsOn() != null) {
            dependsOn().forEach(e -> e.validate());
        }
        if (userProperties() != null) {
            userProperties().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Activity.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("onInactiveMarkAs",
            this.onInactiveMarkAs == null ? null : this.onInactiveMarkAs.toString());
        jsonWriter.writeArrayField("dependsOn", this.dependsOn, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("userProperties", this.userProperties,
            (writer, element) -> writer.writeJson(element));
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Activity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Activity if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Activity.
     */
    public static Activity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Container".equals(discriminatorValue)) {
                    return ControlActivity.fromJsonKnownDiscriminator(readerToUse.reset());
                } else if ("ExecutePipeline".equals(discriminatorValue)) {
                    return ExecutePipelineActivity.fromJson(readerToUse.reset());
                } else if ("IfCondition".equals(discriminatorValue)) {
                    return IfConditionActivity.fromJson(readerToUse.reset());
                } else if ("Switch".equals(discriminatorValue)) {
                    return SwitchActivity.fromJson(readerToUse.reset());
                } else if ("ForEach".equals(discriminatorValue)) {
                    return ForEachActivity.fromJson(readerToUse.reset());
                } else if ("Wait".equals(discriminatorValue)) {
                    return WaitActivity.fromJson(readerToUse.reset());
                } else if ("Fail".equals(discriminatorValue)) {
                    return FailActivity.fromJson(readerToUse.reset());
                } else if ("Until".equals(discriminatorValue)) {
                    return UntilActivity.fromJson(readerToUse.reset());
                } else if ("Validation".equals(discriminatorValue)) {
                    return ValidationActivity.fromJson(readerToUse.reset());
                } else if ("Filter".equals(discriminatorValue)) {
                    return FilterActivity.fromJson(readerToUse.reset());
                } else if ("SetVariable".equals(discriminatorValue)) {
                    return SetVariableActivity.fromJson(readerToUse.reset());
                } else if ("AppendVariable".equals(discriminatorValue)) {
                    return AppendVariableActivity.fromJson(readerToUse.reset());
                } else if ("WebHook".equals(discriminatorValue)) {
                    return WebhookActivity.fromJson(readerToUse.reset());
                } else if ("Execution".equals(discriminatorValue)) {
                    return ExecutionActivity.fromJsonKnownDiscriminator(readerToUse.reset());
                } else if ("Copy".equals(discriminatorValue)) {
                    return CopyActivity.fromJson(readerToUse.reset());
                } else if ("HDInsightHive".equals(discriminatorValue)) {
                    return HDInsightHiveActivity.fromJson(readerToUse.reset());
                } else if ("HDInsightPig".equals(discriminatorValue)) {
                    return HDInsightPigActivity.fromJson(readerToUse.reset());
                } else if ("HDInsightMapReduce".equals(discriminatorValue)) {
                    return HDInsightMapReduceActivity.fromJson(readerToUse.reset());
                } else if ("HDInsightStreaming".equals(discriminatorValue)) {
                    return HDInsightStreamingActivity.fromJson(readerToUse.reset());
                } else if ("HDInsightSpark".equals(discriminatorValue)) {
                    return HDInsightSparkActivity.fromJson(readerToUse.reset());
                } else if ("ExecuteSSISPackage".equals(discriminatorValue)) {
                    return ExecuteSsisPackageActivity.fromJson(readerToUse.reset());
                } else if ("Custom".equals(discriminatorValue)) {
                    return CustomActivity.fromJson(readerToUse.reset());
                } else if ("SqlServerStoredProcedure".equals(discriminatorValue)) {
                    return SqlServerStoredProcedureActivity.fromJson(readerToUse.reset());
                } else if ("Delete".equals(discriminatorValue)) {
                    return DeleteActivity.fromJson(readerToUse.reset());
                } else if ("AzureDataExplorerCommand".equals(discriminatorValue)) {
                    return AzureDataExplorerCommandActivity.fromJson(readerToUse.reset());
                } else if ("Lookup".equals(discriminatorValue)) {
                    return LookupActivity.fromJson(readerToUse.reset());
                } else if ("WebActivity".equals(discriminatorValue)) {
                    return WebActivity.fromJson(readerToUse.reset());
                } else if ("GetMetadata".equals(discriminatorValue)) {
                    return GetMetadataActivity.fromJson(readerToUse.reset());
                } else if ("AzureMLBatchExecution".equals(discriminatorValue)) {
                    return AzureMLBatchExecutionActivity.fromJson(readerToUse.reset());
                } else if ("AzureMLUpdateResource".equals(discriminatorValue)) {
                    return AzureMLUpdateResourceActivity.fromJson(readerToUse.reset());
                } else if ("AzureMLExecutePipeline".equals(discriminatorValue)) {
                    return AzureMLExecutePipelineActivity.fromJson(readerToUse.reset());
                } else if ("DataLakeAnalyticsU-SQL".equals(discriminatorValue)) {
                    return DataLakeAnalyticsUsqlActivity.fromJson(readerToUse.reset());
                } else if ("DatabricksNotebook".equals(discriminatorValue)) {
                    return DatabricksNotebookActivity.fromJson(readerToUse.reset());
                } else if ("DatabricksSparkJar".equals(discriminatorValue)) {
                    return DatabricksSparkJarActivity.fromJson(readerToUse.reset());
                } else if ("DatabricksSparkPython".equals(discriminatorValue)) {
                    return DatabricksSparkPythonActivity.fromJson(readerToUse.reset());
                } else if ("AzureFunctionActivity".equals(discriminatorValue)) {
                    return AzureFunctionActivity.fromJson(readerToUse.reset());
                } else if ("ExecuteDataFlow".equals(discriminatorValue)) {
                    return ExecuteDataFlowActivity.fromJson(readerToUse.reset());
                } else if ("Script".equals(discriminatorValue)) {
                    return ScriptActivity.fromJson(readerToUse.reset());
                } else if ("SynapseNotebook".equals(discriminatorValue)) {
                    return SynapseNotebookActivity.fromJson(readerToUse.reset());
                } else if ("SparkJob".equals(discriminatorValue)) {
                    return SynapseSparkJobDefinitionActivity.fromJson(readerToUse.reset());
                } else if ("ExecuteWranglingDataflow".equals(discriminatorValue)) {
                    return ExecuteWranglingDataflowActivity.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static Activity fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Activity deserializedActivity = new Activity();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedActivity.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedActivity.type = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedActivity.description = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedActivity.state = ActivityState.fromString(reader.getString());
                } else if ("onInactiveMarkAs".equals(fieldName)) {
                    deserializedActivity.onInactiveMarkAs = ActivityOnInactiveMarkAs.fromString(reader.getString());
                } else if ("dependsOn".equals(fieldName)) {
                    List<ActivityDependency> dependsOn
                        = reader.readArray(reader1 -> ActivityDependency.fromJson(reader1));
                    deserializedActivity.dependsOn = dependsOn;
                } else if ("userProperties".equals(fieldName)) {
                    List<UserProperty> userProperties = reader.readArray(reader1 -> UserProperty.fromJson(reader1));
                    deserializedActivity.userProperties = userProperties;
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedActivity.additionalProperties = additionalProperties;

            return deserializedActivity;
        });
    }
}
