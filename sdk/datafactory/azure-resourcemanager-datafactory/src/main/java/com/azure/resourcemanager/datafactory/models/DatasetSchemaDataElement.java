// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Columns that define the physical type schema of the dataset.
 */
@Fluent
public final class DatasetSchemaDataElement implements JsonSerializable<DatasetSchemaDataElement> {
    /*
     * Name of the schema column. Type: string (or Expression with resultType string).
     */
    private Object name;

    /*
     * Type of the schema column. Type: string (or Expression with resultType string).
     */
    private Object type;

    /*
     * Columns that define the physical type schema of the dataset.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of DatasetSchemaDataElement class.
     */
    public DatasetSchemaDataElement() {
    }

    /**
     * Get the name property: Name of the schema column. Type: string (or Expression with resultType string).
     * 
     * @return the name value.
     */
    public Object name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the schema column. Type: string (or Expression with resultType string).
     * 
     * @param name the name value to set.
     * @return the DatasetSchemaDataElement object itself.
     */
    public DatasetSchemaDataElement withName(Object name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Type of the schema column. Type: string (or Expression with resultType string).
     * 
     * @return the type value.
     */
    public Object type() {
        return this.type;
    }

    /**
     * Set the type property: Type of the schema column. Type: string (or Expression with resultType string).
     * 
     * @param type the type value to set.
     * @return the DatasetSchemaDataElement object itself.
     */
    public DatasetSchemaDataElement withType(Object type) {
        this.type = type;
        return this;
    }

    /**
     * Get the additionalProperties property: Columns that define the physical type schema of the dataset.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Columns that define the physical type schema of the dataset.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the DatasetSchemaDataElement object itself.
     */
    public DatasetSchemaDataElement withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("name", this.name);
        jsonWriter.writeUntypedField("type", this.type);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatasetSchemaDataElement from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatasetSchemaDataElement if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatasetSchemaDataElement.
     */
    public static DatasetSchemaDataElement fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatasetSchemaDataElement deserializedDatasetSchemaDataElement = new DatasetSchemaDataElement();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDatasetSchemaDataElement.name = reader.readUntyped();
                } else if ("type".equals(fieldName)) {
                    deserializedDatasetSchemaDataElement.type = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedDatasetSchemaDataElement.additionalProperties = additionalProperties;

            return deserializedDatasetSchemaDataElement;
        });
    }
}
