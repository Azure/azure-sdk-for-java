// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Ssis project.
 */
@Fluent
public final class SsisProject extends SsisObjectMetadata {
    /*
     * Type of metadata.
     */
    private SsisObjectMetadataType type = SsisObjectMetadataType.PROJECT;

    /*
     * Folder id which contains project.
     */
    private Long folderId;

    /*
     * Project version.
     */
    private Long version;

    /*
     * Environment reference in project
     */
    private List<SsisEnvironmentReference> environmentRefs;

    /*
     * Parameters in project
     */
    private List<SsisParameter> parameters;

    /**
     * Creates an instance of SsisProject class.
     */
    public SsisProject() {
    }

    /**
     * Get the type property: Type of metadata.
     * 
     * @return the type value.
     */
    @Override
    public SsisObjectMetadataType type() {
        return this.type;
    }

    /**
     * Get the folderId property: Folder id which contains project.
     * 
     * @return the folderId value.
     */
    public Long folderId() {
        return this.folderId;
    }

    /**
     * Set the folderId property: Folder id which contains project.
     * 
     * @param folderId the folderId value to set.
     * @return the SsisProject object itself.
     */
    public SsisProject withFolderId(Long folderId) {
        this.folderId = folderId;
        return this;
    }

    /**
     * Get the version property: Project version.
     * 
     * @return the version value.
     */
    public Long version() {
        return this.version;
    }

    /**
     * Set the version property: Project version.
     * 
     * @param version the version value to set.
     * @return the SsisProject object itself.
     */
    public SsisProject withVersion(Long version) {
        this.version = version;
        return this;
    }

    /**
     * Get the environmentRefs property: Environment reference in project.
     * 
     * @return the environmentRefs value.
     */
    public List<SsisEnvironmentReference> environmentRefs() {
        return this.environmentRefs;
    }

    /**
     * Set the environmentRefs property: Environment reference in project.
     * 
     * @param environmentRefs the environmentRefs value to set.
     * @return the SsisProject object itself.
     */
    public SsisProject withEnvironmentRefs(List<SsisEnvironmentReference> environmentRefs) {
        this.environmentRefs = environmentRefs;
        return this;
    }

    /**
     * Get the parameters property: Parameters in project.
     * 
     * @return the parameters value.
     */
    public List<SsisParameter> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Parameters in project.
     * 
     * @param parameters the parameters value to set.
     * @return the SsisProject object itself.
     */
    public SsisProject withParameters(List<SsisParameter> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SsisProject withId(Long id) {
        super.withId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SsisProject withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SsisProject withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (environmentRefs() != null) {
            environmentRefs().forEach(e -> e.validate());
        }
        if (parameters() != null) {
            parameters().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("id", id());
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeNumberField("folderId", this.folderId);
        jsonWriter.writeNumberField("version", this.version);
        jsonWriter.writeArrayField("environmentRefs", this.environmentRefs,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("parameters", this.parameters, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SsisProject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SsisProject if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SsisProject.
     */
    public static SsisProject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SsisProject deserializedSsisProject = new SsisProject();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedSsisProject.withId(reader.getNullable(JsonReader::getLong));
                } else if ("name".equals(fieldName)) {
                    deserializedSsisProject.withName(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedSsisProject.withDescription(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedSsisProject.type = SsisObjectMetadataType.fromString(reader.getString());
                } else if ("folderId".equals(fieldName)) {
                    deserializedSsisProject.folderId = reader.getNullable(JsonReader::getLong);
                } else if ("version".equals(fieldName)) {
                    deserializedSsisProject.version = reader.getNullable(JsonReader::getLong);
                } else if ("environmentRefs".equals(fieldName)) {
                    List<SsisEnvironmentReference> environmentRefs
                        = reader.readArray(reader1 -> SsisEnvironmentReference.fromJson(reader1));
                    deserializedSsisProject.environmentRefs = environmentRefs;
                } else if ("parameters".equals(fieldName)) {
                    List<SsisParameter> parameters = reader.readArray(reader1 -> SsisParameter.fromJson(reader1));
                    deserializedSsisProject.parameters = parameters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSsisProject;
        });
    }
}
