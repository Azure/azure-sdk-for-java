// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MapperConnection;
import com.azure.resourcemanager.datafactory.models.MapperDslConnectorProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MapperConnectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MapperConnection model = BinaryData.fromString(
            "{\"linkedService\":{\"referenceName\":\"dfmmpzhzzwvy\",\"parameters\":{\"aondjrkclamgg\":\"datayngydgrpxncaki\",\"oqeykglt\":\"datavlmfej\",\"tlgflwfgz\":\"datagxhqfgqkayejs\",\"lijjjrtvam\":\"dataiucijjcea\"}},\"linkedServiceType\":\"szknxkvccxe\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{\"name\":\"ignohi\",\"value\":\"datagqogjwpindedva\"},{\"name\":\"xbhmed\",\"value\":\"datalbjywfcfxzirzzih\"}]}")
            .toObject(MapperConnection.class);
        Assertions.assertEquals("dfmmpzhzzwvy", model.linkedService().referenceName());
        Assertions.assertEquals("szknxkvccxe", model.linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE, model.type());
        Assertions.assertEquals(false, model.isInlineDataset());
        Assertions.assertEquals("ignohi", model.commonDslConnectorProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MapperConnection model = new MapperConnection()
            .withLinkedService(new LinkedServiceReference().withReferenceName("dfmmpzhzzwvy")
                .withParameters(mapOf("aondjrkclamgg", "datayngydgrpxncaki", "oqeykglt", "datavlmfej", "tlgflwfgz",
                    "datagxhqfgqkayejs", "lijjjrtvam", "dataiucijjcea")))
            .withLinkedServiceType("szknxkvccxe")
            .withType(ConnectionType.LINKEDSERVICETYPE)
            .withIsInlineDataset(false)
            .withCommonDslConnectorProperties(
                Arrays.asList(new MapperDslConnectorProperties().withName("ignohi").withValue("datagqogjwpindedva"),
                    new MapperDslConnectorProperties().withName("xbhmed").withValue("datalbjywfcfxzirzzih")));
        model = BinaryData.fromObject(model).toObject(MapperConnection.class);
        Assertions.assertEquals("dfmmpzhzzwvy", model.linkedService().referenceName());
        Assertions.assertEquals("szknxkvccxe", model.linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE, model.type());
        Assertions.assertEquals(false, model.isInlineDataset());
        Assertions.assertEquals("ignohi", model.commonDslConnectorProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
