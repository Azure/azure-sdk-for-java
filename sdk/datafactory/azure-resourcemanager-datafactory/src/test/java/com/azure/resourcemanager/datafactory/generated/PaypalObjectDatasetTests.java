// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PaypalObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PaypalObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PaypalObjectDataset model = BinaryData.fromString(
            "{\"type\":\"PaypalObject\",\"typeProperties\":{\"tableName\":\"datau\"},\"description\":\"ajvvq\",\"structure\":\"datao\",\"schema\":\"dataon\",\"linkedServiceName\":{\"referenceName\":\"livgti\",\"parameters\":{\"mrvkxeojtdyulglh\":\"dataqjqjcajgofytkhhk\",\"xspxgogypbztgae\":\"datalwruklfq\"}},\"parameters\":{\"lvry\":{\"type\":\"Bool\",\"defaultValue\":\"datavctvuzimbwttm\"},\"ajnpdwzjgg\":{\"type\":\"Float\",\"defaultValue\":\"datarnwuk\"},\"ayfiq\":{\"type\":\"Int\",\"defaultValue\":\"dataepemz\"}},\"annotations\":[\"dataxcor\",\"datavudyhgtrttcuayi\"],\"folder\":{\"name\":\"nkmm\"},\"\":{\"qgqexowqzrtgqr\":\"dataf\",\"obothx\":\"datakkvfygkuobpwainp\",\"qgzyvextc\":\"dataewhpnyjt\",\"whdlrifioz\":\"dataslroldow\"}}")
            .toObject(PaypalObjectDataset.class);
        Assertions.assertEquals("ajvvq", model.description());
        Assertions.assertEquals("livgti", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("lvry").type());
        Assertions.assertEquals("nkmm", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PaypalObjectDataset model = new PaypalObjectDataset().withDescription("ajvvq")
            .withStructure("datao")
            .withSchema("dataon")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("livgti")
                .withParameters(mapOf("mrvkxeojtdyulglh", "dataqjqjcajgofytkhhk", "xspxgogypbztgae", "datalwruklfq")))
            .withParameters(mapOf("lvry",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datavctvuzimbwttm"),
                "ajnpdwzjgg", new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datarnwuk"),
                "ayfiq", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataepemz")))
            .withAnnotations(Arrays.asList("dataxcor", "datavudyhgtrttcuayi"))
            .withFolder(new DatasetFolder().withName("nkmm"))
            .withTableName("datau");
        model = BinaryData.fromObject(model).toObject(PaypalObjectDataset.class);
        Assertions.assertEquals("ajvvq", model.description());
        Assertions.assertEquals("livgti", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("lvry").type());
        Assertions.assertEquals("nkmm", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
