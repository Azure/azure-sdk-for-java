// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.GlobalParameterResourceInner;
import com.azure.resourcemanager.datafactory.models.GlobalParameterSpecification;
import com.azure.resourcemanager.datafactory.models.GlobalParameterType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GlobalParameterResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GlobalParameterResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"zsylollgt\":{\"type\":\"String\",\"value\":\"dataifmcsypobkdqzr\"},\"rkihcirld\":{\"type\":\"Float\",\"value\":\"datazzydmxzjijpvua\"},\"urnnqbnqbpiz\":{\"type\":\"Object\",\"value\":\"dataxrdcoxnbkkja\"},\"fihwu\":{\"type\":\"Float\",\"value\":\"dataltgrdogypxrxv\"}},\"name\":\"ctafsrbxrblm\",\"type\":\"owxih\",\"etag\":\"nxw\",\"id\":\"gnepz\"}")
            .toObject(GlobalParameterResourceInner.class);
        Assertions.assertEquals("gnepz", model.id());
        Assertions.assertEquals(GlobalParameterType.STRING, model.properties().get("zsylollgt").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GlobalParameterResourceInner model = new GlobalParameterResourceInner().withId("gnepz")
            .withProperties(mapOf("zsylollgt",
                new GlobalParameterSpecification().withType(GlobalParameterType.STRING).withValue("dataifmcsypobkdqzr"),
                "rkihcirld",
                new GlobalParameterSpecification().withType(GlobalParameterType.FLOAT).withValue("datazzydmxzjijpvua"),
                "urnnqbnqbpiz",
                new GlobalParameterSpecification().withType(GlobalParameterType.OBJECT).withValue("dataxrdcoxnbkkja"),
                "fihwu",
                new GlobalParameterSpecification().withType(GlobalParameterType.FLOAT).withValue("dataltgrdogypxrxv")));
        model = BinaryData.fromObject(model).toObject(GlobalParameterResourceInner.class);
        Assertions.assertEquals("gnepz", model.id());
        Assertions.assertEquals(GlobalParameterType.STRING, model.properties().get("zsylollgt").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
