// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CassandraSource;
import com.azure.resourcemanager.datafactory.models.CassandraSourceReadConsistencyLevels;
import org.junit.jupiter.api.Assertions;

public final class CassandraSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CassandraSource model =
            BinaryData
                .fromString(
                    "{\"type\":\"CassandraSource\",\"query\":\"dataattaloomf\",\"consistencyLevel\":\"ALL\",\"queryTimeout\":\"datatwzslrprftq\",\"additionalColumns\":\"datavouyqzhoikemho\",\"sourceRetryCount\":\"dataabmxoo\",\"sourceRetryWait\":\"dataoogozerccz\",\"maxConcurrentConnections\":\"databnkgkuujeq\",\"disableMetricsCollection\":\"dataqafjkajlogvfn\",\"\":{\"wehjybboqyxi\":\"dataolvazkqkycgej\",\"vdgemymyddzjtx\":\"datac\",\"lys\":\"datavgslm\"}}")
                .toObject(CassandraSource.class);
        Assertions.assertEquals(CassandraSourceReadConsistencyLevels.ALL, model.consistencyLevel());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CassandraSource model =
            new CassandraSource()
                .withSourceRetryCount("dataabmxoo")
                .withSourceRetryWait("dataoogozerccz")
                .withMaxConcurrentConnections("databnkgkuujeq")
                .withDisableMetricsCollection("dataqafjkajlogvfn")
                .withQueryTimeout("datatwzslrprftq")
                .withAdditionalColumns("datavouyqzhoikemho")
                .withQuery("dataattaloomf")
                .withConsistencyLevel(CassandraSourceReadConsistencyLevels.ALL);
        model = BinaryData.fromObject(model).toObject(CassandraSource.class);
        Assertions.assertEquals(CassandraSourceReadConsistencyLevels.ALL, model.consistencyLevel());
    }
}
