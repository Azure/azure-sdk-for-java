// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.OracleTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OracleTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OracleTableDataset model = BinaryData.fromString(
            "{\"type\":\"jwqdmr\",\"typeProperties\":{\"tableName\":\"dataaqgblkkncyp\",\"schema\":\"dataevspsaney\",\"table\":\"dataerpiobnhrfbrj\"},\"description\":\"nilppqcai\",\"structure\":\"datazwfwlrfdjwlzseod\",\"schema\":\"datafdrslzymqx\",\"linkedServiceName\":{\"referenceName\":\"erwycuhytjwgetfi\",\"parameters\":{\"stubw\":\"dataeqjxzizebjrahg\"}},\"parameters\":{\"xliqmsck\":{\"type\":\"Bool\",\"defaultValue\":\"datas\"},\"rsofxcacr\":{\"type\":\"Array\",\"defaultValue\":\"datamdoiiyobqzwjal\"},\"lsxfk\":{\"type\":\"Bool\",\"defaultValue\":\"datafmrsuydldpr\"},\"rjwbuocqflm\":{\"type\":\"Array\",\"defaultValue\":\"datatirjvqxvwkiocxo\"}},\"annotations\":[\"datalqxbctatezyo\",\"datadbcqq\",\"datalsjxcscnito\"],\"folder\":{\"name\":\"ahjjido\"},\"\":{\"i\":\"dataltcvmahpuwkupbbn\",\"zhrcqdfwbif\":\"datalh\",\"ynb\":\"datanhlsforsimtfcqm\",\"zamadlerzi\":\"datapelpfijtezgxmpe\"}}")
            .toObject(OracleTableDataset.class);
        Assertions.assertEquals("nilppqcai", model.description());
        Assertions.assertEquals("erwycuhytjwgetfi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("xliqmsck").type());
        Assertions.assertEquals("ahjjido", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OracleTableDataset model = new OracleTableDataset().withDescription("nilppqcai")
            .withStructure("datazwfwlrfdjwlzseod")
            .withSchema("datafdrslzymqx")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("erwycuhytjwgetfi")
                .withParameters(mapOf("stubw", "dataeqjxzizebjrahg")))
            .withParameters(mapOf("xliqmsck",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datas"), "rsofxcacr",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datamdoiiyobqzwjal"),
                "lsxfk", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datafmrsuydldpr"),
                "rjwbuocqflm",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datatirjvqxvwkiocxo")))
            .withAnnotations(Arrays.asList("datalqxbctatezyo", "datadbcqq", "datalsjxcscnito"))
            .withFolder(new DatasetFolder().withName("ahjjido"))
            .withTableName("dataaqgblkkncyp")
            .withSchemaTypePropertiesSchema("dataevspsaney")
            .withTable("dataerpiobnhrfbrj");
        model = BinaryData.fromObject(model).toObject(OracleTableDataset.class);
        Assertions.assertEquals("nilppqcai", model.description());
        Assertions.assertEquals("erwycuhytjwgetfi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("xliqmsck").type());
        Assertions.assertEquals("ahjjido", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
