// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.SsisVariable;
import org.junit.jupiter.api.Assertions;

public final class SsisVariableTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SsisVariable model =
            BinaryData
                .fromString(
                    "{\"id\":3924573771796741823,\"name\":\"fknjqsstnwvravn\",\"description\":\"klkwqisnlpa\",\"dataType\":\"ketotktdmewwlk\",\"sensitive\":false,\"value\":\"pgqqdhtctx\",\"sensitiveValue\":\"egykjmpadbzjo\"}")
                .toObject(SsisVariable.class);
        Assertions.assertEquals(3924573771796741823L, model.id());
        Assertions.assertEquals("fknjqsstnwvravn", model.name());
        Assertions.assertEquals("klkwqisnlpa", model.description());
        Assertions.assertEquals("ketotktdmewwlk", model.dataType());
        Assertions.assertEquals(false, model.sensitive());
        Assertions.assertEquals("pgqqdhtctx", model.value());
        Assertions.assertEquals("egykjmpadbzjo", model.sensitiveValue());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SsisVariable model =
            new SsisVariable()
                .withId(3924573771796741823L)
                .withName("fknjqsstnwvravn")
                .withDescription("klkwqisnlpa")
                .withDataType("ketotktdmewwlk")
                .withSensitive(false)
                .withValue("pgqqdhtctx")
                .withSensitiveValue("egykjmpadbzjo");
        model = BinaryData.fromObject(model).toObject(SsisVariable.class);
        Assertions.assertEquals(3924573771796741823L, model.id());
        Assertions.assertEquals("fknjqsstnwvravn", model.name());
        Assertions.assertEquals("klkwqisnlpa", model.description());
        Assertions.assertEquals("ketotktdmewwlk", model.dataType());
        Assertions.assertEquals(false, model.sensitive());
        Assertions.assertEquals("pgqqdhtctx", model.value());
        Assertions.assertEquals("egykjmpadbzjo", model.sensitiveValue());
    }
}
