// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.ResponsysObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ResponsysObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResponsysObjectDataset model = BinaryData.fromString(
            "{\"type\":\"ResponsysObject\",\"typeProperties\":{\"tableName\":\"datapdzy\"},\"description\":\"khxfpz\",\"structure\":\"dataudqhad\",\"schema\":\"datavvlyibweuaugtxl\",\"linkedServiceName\":{\"referenceName\":\"ncoqxtvytzq\",\"parameters\":{\"zbdbrlbo\":\"datadjvzmxyrazzstjvc\",\"acbibtk\":\"dataltyo\"}},\"parameters\":{\"iiul\":{\"type\":\"Int\",\"defaultValue\":\"datapmwxdsokrlnrpeyl\"},\"xwwwvunknsgvxhx\":{\"type\":\"Int\",\"defaultValue\":\"dataiqlnh\"},\"tehqyoytrcoufkq\":{\"type\":\"Float\",\"defaultValue\":\"dataatrtcqyfjvifbmo\"}},\"annotations\":[\"dataukdfpknvkiv\"],\"folder\":{\"name\":\"ezchmeodhzjlrknc\"},\"\":{\"eqkwqphfvsfts\":\"dataxmu\",\"hdtezgfctu\":\"datatwlpxca\"}}")
            .toObject(ResponsysObjectDataset.class);
        Assertions.assertEquals("khxfpz", model.description());
        Assertions.assertEquals("ncoqxtvytzq", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("iiul").type());
        Assertions.assertEquals("ezchmeodhzjlrknc", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResponsysObjectDataset model = new ResponsysObjectDataset().withDescription("khxfpz")
            .withStructure("dataudqhad")
            .withSchema("datavvlyibweuaugtxl")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ncoqxtvytzq")
                .withParameters(mapOf("zbdbrlbo", "datadjvzmxyrazzstjvc", "acbibtk", "dataltyo")))
            .withParameters(mapOf("iiul",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datapmwxdsokrlnrpeyl"),
                "xwwwvunknsgvxhx",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataiqlnh"),
                "tehqyoytrcoufkq",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataatrtcqyfjvifbmo")))
            .withAnnotations(Arrays.asList("dataukdfpknvkiv"))
            .withFolder(new DatasetFolder().withName("ezchmeodhzjlrknc"))
            .withTableName("datapdzy");
        model = BinaryData.fromObject(model).toObject(ResponsysObjectDataset.class);
        Assertions.assertEquals("khxfpz", model.description());
        Assertions.assertEquals("ncoqxtvytzq", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("iiul").type());
        Assertions.assertEquals("ezchmeodhzjlrknc", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
