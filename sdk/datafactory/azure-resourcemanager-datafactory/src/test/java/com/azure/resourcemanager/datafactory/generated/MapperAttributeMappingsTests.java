// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.MapperAttributeMapping;
import com.azure.resourcemanager.datafactory.models.MapperAttributeMappings;
import com.azure.resourcemanager.datafactory.models.MapperAttributeReference;
import com.azure.resourcemanager.datafactory.models.MapperConnectionReference;
import com.azure.resourcemanager.datafactory.models.MappingType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MapperAttributeMappingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MapperAttributeMappings model = BinaryData.fromString(
            "{\"attributeMappings\":[{\"name\":\"oepnxwdv\",\"type\":\"Direct\",\"functionName\":\"gv\",\"expression\":\"mxaursqftibtyi\",\"attributeReference\":{\"name\":\"vpi\",\"entity\":\"qjpnqnoowsbed\",\"entityConnectionReference\":{\"connectionName\":\"exkxbhx\",\"type\":\"linkedservicetype\"}},\"attributeReferences\":[{\"name\":\"gmnhjevd\",\"entity\":\"nfa\",\"entityConnectionReference\":{\"connectionName\":\"kskmqozzkivyhjrl\",\"type\":\"linkedservicetype\"}}]}]}")
            .toObject(MapperAttributeMappings.class);
        Assertions.assertEquals("oepnxwdv", model.attributeMappings().get(0).name());
        Assertions.assertEquals(MappingType.DIRECT, model.attributeMappings().get(0).type());
        Assertions.assertEquals("gv", model.attributeMappings().get(0).functionName());
        Assertions.assertEquals("mxaursqftibtyi", model.attributeMappings().get(0).expression());
        Assertions.assertEquals("vpi", model.attributeMappings().get(0).attributeReference().name());
        Assertions.assertEquals("qjpnqnoowsbed", model.attributeMappings().get(0).attributeReference().entity());
        Assertions.assertEquals("exkxbhx",
            model.attributeMappings().get(0).attributeReference().entityConnectionReference().connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.attributeMappings().get(0).attributeReference().entityConnectionReference().type());
        Assertions.assertEquals("gmnhjevd", model.attributeMappings().get(0).attributeReferences().get(0).name());
        Assertions.assertEquals("nfa", model.attributeMappings().get(0).attributeReferences().get(0).entity());
        Assertions.assertEquals("kskmqozzkivyhjrl",
            model.attributeMappings().get(0).attributeReferences().get(0).entityConnectionReference().connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.attributeMappings().get(0).attributeReferences().get(0).entityConnectionReference().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MapperAttributeMappings model = new MapperAttributeMappings()
            .withAttributeMappings(Arrays.asList(new MapperAttributeMapping().withName("oepnxwdv")
                .withType(MappingType.DIRECT)
                .withFunctionName("gv")
                .withExpression("mxaursqftibtyi")
                .withAttributeReference(new MapperAttributeReference().withName("vpi")
                    .withEntity("qjpnqnoowsbed")
                    .withEntityConnectionReference(new MapperConnectionReference().withConnectionName("exkxbhx")
                        .withType(ConnectionType.LINKEDSERVICETYPE)))
                .withAttributeReferences(Arrays.asList(new MapperAttributeReference().withName("gmnhjevd")
                    .withEntity("nfa")
                    .withEntityConnectionReference(
                        new MapperConnectionReference().withConnectionName("kskmqozzkivyhjrl")
                            .withType(ConnectionType.LINKEDSERVICETYPE))))));
        model = BinaryData.fromObject(model).toObject(MapperAttributeMappings.class);
        Assertions.assertEquals("oepnxwdv", model.attributeMappings().get(0).name());
        Assertions.assertEquals(MappingType.DIRECT, model.attributeMappings().get(0).type());
        Assertions.assertEquals("gv", model.attributeMappings().get(0).functionName());
        Assertions.assertEquals("mxaursqftibtyi", model.attributeMappings().get(0).expression());
        Assertions.assertEquals("vpi", model.attributeMappings().get(0).attributeReference().name());
        Assertions.assertEquals("qjpnqnoowsbed", model.attributeMappings().get(0).attributeReference().entity());
        Assertions.assertEquals("exkxbhx",
            model.attributeMappings().get(0).attributeReference().entityConnectionReference().connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.attributeMappings().get(0).attributeReference().entityConnectionReference().type());
        Assertions.assertEquals("gmnhjevd", model.attributeMappings().get(0).attributeReferences().get(0).name());
        Assertions.assertEquals("nfa", model.attributeMappings().get(0).attributeReferences().get(0).entity());
        Assertions.assertEquals("kskmqozzkivyhjrl",
            model.attributeMappings().get(0).attributeReferences().get(0).entityConnectionReference().connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.attributeMappings().get(0).attributeReferences().get(0).entityConnectionReference().type());
    }
}
