// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.HubspotObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HubspotObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HubspotObjectDataset model = BinaryData.fromString(
            "{\"type\":\"HubspotObject\",\"typeProperties\":{\"tableName\":\"datamxxyfrdjid\"},\"description\":\"tfvgwfwsldigwo\",\"structure\":\"datapvydd\",\"schema\":\"datavclrsn\",\"linkedServiceName\":{\"referenceName\":\"frppwwqclmdmt\",\"parameters\":{\"iqmcjb\":\"dataepzpxzxlcqzfxai\"}},\"parameters\":{\"dmhk\":{\"type\":\"Array\",\"defaultValue\":\"datapqnip\"}},\"annotations\":[\"dataeobwkeuzltenlbf\",\"datalmxoz\",\"datasn\",\"dataoduomtxjbrixym\"],\"folder\":{\"name\":\"kk\"},\"\":{\"mrzcqfevnkyakc\":\"dataurhwishy\",\"de\":\"datatehognsddjk\",\"zogfcnxcxg\":\"dataesu\",\"ifjc\":\"dataumtcqxmyvkxixypa\"}}")
            .toObject(HubspotObjectDataset.class);
        Assertions.assertEquals("tfvgwfwsldigwo", model.description());
        Assertions.assertEquals("frppwwqclmdmt", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("dmhk").type());
        Assertions.assertEquals("kk", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HubspotObjectDataset model = new HubspotObjectDataset().withDescription("tfvgwfwsldigwo")
            .withStructure("datapvydd")
            .withSchema("datavclrsn")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("frppwwqclmdmt")
                .withParameters(mapOf("iqmcjb", "dataepzpxzxlcqzfxai")))
            .withParameters(
                mapOf("dmhk", new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datapqnip")))
            .withAnnotations(Arrays.asList("dataeobwkeuzltenlbf", "datalmxoz", "datasn", "dataoduomtxjbrixym"))
            .withFolder(new DatasetFolder().withName("kk"))
            .withTableName("datamxxyfrdjid");
        model = BinaryData.fromObject(model).toObject(HubspotObjectDataset.class);
        Assertions.assertEquals("tfvgwfwsldigwo", model.description());
        Assertions.assertEquals("frppwwqclmdmt", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("dmhk").type());
        Assertions.assertEquals("kk", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
