// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.OraclePartitionSettings;
import com.azure.resourcemanager.datafactory.models.OracleSource;

public final class OracleSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OracleSource model = BinaryData.fromString(
            "{\"type\":\"OracleSource\",\"oracleReaderQuery\":\"datalwlppoh\",\"queryTimeout\":\"datafgalexy\",\"partitionOption\":\"datagkadtwd\",\"partitionSettings\":{\"partitionNames\":\"datajxtfvxcjd\",\"partitionColumnName\":\"datasg\",\"partitionUpperBound\":\"datayjkwltnsn\",\"partitionLowerBound\":\"datavm\"},\"additionalColumns\":\"dataihsclpnbidnlodkq\",\"sourceRetryCount\":\"datankptixawoyzg\",\"sourceRetryWait\":\"datavrygg\",\"maxConcurrentConnections\":\"datacp\",\"disableMetricsCollection\":\"datahoplqtzgtpsbym\",\"\":{\"rqzbqy\":\"datat\",\"ahbynlbwcnnfp\":\"datagfqqrarolc\"}}")
            .toObject(OracleSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OracleSource model = new OracleSource().withSourceRetryCount("datankptixawoyzg")
            .withSourceRetryWait("datavrygg")
            .withMaxConcurrentConnections("datacp")
            .withDisableMetricsCollection("datahoplqtzgtpsbym")
            .withOracleReaderQuery("datalwlppoh")
            .withQueryTimeout("datafgalexy")
            .withPartitionOption("datagkadtwd")
            .withPartitionSettings(new OraclePartitionSettings().withPartitionNames("datajxtfvxcjd")
                .withPartitionColumnName("datasg")
                .withPartitionUpperBound("datayjkwltnsn")
                .withPartitionLowerBound("datavm"))
            .withAdditionalColumns("dataihsclpnbidnlodkq");
        model = BinaryData.fromObject(model).toObject(OracleSource.class);
    }
}
