// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.OraclePartitionSettings;
import com.azure.resourcemanager.datafactory.models.OracleSource;

public final class OracleSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OracleSource model = BinaryData.fromString(
            "{\"type\":\"OracleSource\",\"oracleReaderQuery\":\"datad\",\"queryTimeout\":\"datadldm\",\"partitionOption\":\"dataqftywb\",\"partitionSettings\":{\"partitionNames\":\"datazhdciuxotb\",\"partitionColumnName\":\"datalgkkiuq\",\"partitionUpperBound\":\"datapafobpyeobrtaevq\",\"partitionLowerBound\":\"datadhpkiiunyr\"},\"additionalColumns\":\"datackelowsmr\",\"sourceRetryCount\":\"datatqhrtnqssqyn\",\"sourceRetryWait\":\"dataskitok\",\"maxConcurrentConnections\":\"dataamefzzgwjoau\",\"disableMetricsCollection\":\"datamdpndouylf\",\"\":{\"zassrs\":\"dataqinaokxouknzh\"}}")
            .toObject(OracleSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OracleSource model = new OracleSource().withSourceRetryCount("datatqhrtnqssqyn")
            .withSourceRetryWait("dataskitok")
            .withMaxConcurrentConnections("dataamefzzgwjoau")
            .withDisableMetricsCollection("datamdpndouylf")
            .withOracleReaderQuery("datad")
            .withQueryTimeout("datadldm")
            .withPartitionOption("dataqftywb")
            .withPartitionSettings(new OraclePartitionSettings().withPartitionNames("datazhdciuxotb")
                .withPartitionColumnName("datalgkkiuq")
                .withPartitionUpperBound("datapafobpyeobrtaevq")
                .withPartitionLowerBound("datadhpkiiunyr"))
            .withAdditionalColumns("datackelowsmr");
        model = BinaryData.fromObject(model).toObject(OracleSource.class);
    }
}
