// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityRun;
import java.util.HashMap;
import java.util.Map;

public final class ActivityRunTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ActivityRun model = BinaryData.fromString(
            "{\"pipelineName\":\"qhzvhxnkomt\",\"pipelineRunId\":\"bo\",\"activityName\":\"pnvdxz\",\"activityType\":\"ihfrbbcevqa\",\"activityRunId\":\"ltd\",\"linkedServiceName\":\"fkqojpy\",\"status\":\"gtrd\",\"activityRunStart\":\"2021-05-17T05:05:59Z\",\"activityRunEnd\":\"2021-08-15T02:13:51Z\",\"durationInMs\":2043504503,\"input\":\"datadymbrny\",\"output\":\"dataxmprafwg\",\"error\":\"datahocxvdfffwafqrou\",\"\":{\"kbunzoz\":\"datapavehhr\",\"cdyuibhmfdnbzyd\":\"datadhcxgkmoy\"}}")
            .toObject(ActivityRun.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ActivityRun model = new ActivityRun().withAdditionalProperties(
            mapOf("durationInMs", 2043504503, "linkedServiceName", "fkqojpy", "activityRunStart",
                "2021-05-17T05:05:59Z", "activityRunEnd", "2021-08-15T02:13:51Z", "activityName", "pnvdxz", "error",
                "datahocxvdfffwafqrou", "pipelineName", "qhzvhxnkomt", "output", "dataxmprafwg", "activityRunId", "ltd",
                "input", "datadymbrny", "pipelineRunId", "bo", "activityType", "ihfrbbcevqa", "status", "gtrd"));
        model = BinaryData.fromObject(model).toObject(ActivityRun.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
