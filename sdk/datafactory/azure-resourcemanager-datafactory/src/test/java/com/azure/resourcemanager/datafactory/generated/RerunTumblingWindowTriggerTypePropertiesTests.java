// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.RerunTumblingWindowTriggerTypeProperties;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class RerunTumblingWindowTriggerTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RerunTumblingWindowTriggerTypeProperties model = BinaryData.fromString(
            "{\"parentTrigger\":\"dataozdzbhtfmgpio\",\"requestedStartTime\":\"2021-06-14T16:53:17Z\",\"requestedEndTime\":\"2021-01-15T05:57:27Z\",\"rerunConcurrency\":1333339842}")
            .toObject(RerunTumblingWindowTriggerTypeProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-14T16:53:17Z"), model.requestedStartTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-15T05:57:27Z"), model.requestedEndTime());
        Assertions.assertEquals(1333339842, model.rerunConcurrency());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RerunTumblingWindowTriggerTypeProperties model
            = new RerunTumblingWindowTriggerTypeProperties().withParentTrigger("dataozdzbhtfmgpio")
                .withRequestedStartTime(OffsetDateTime.parse("2021-06-14T16:53:17Z"))
                .withRequestedEndTime(OffsetDateTime.parse("2021-01-15T05:57:27Z"))
                .withRerunConcurrency(1333339842);
        model = BinaryData.fromObject(model).toObject(RerunTumblingWindowTriggerTypeProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-14T16:53:17Z"), model.requestedStartTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-15T05:57:27Z"), model.requestedEndTime());
        Assertions.assertEquals(1333339842, model.rerunConcurrency());
    }
}
