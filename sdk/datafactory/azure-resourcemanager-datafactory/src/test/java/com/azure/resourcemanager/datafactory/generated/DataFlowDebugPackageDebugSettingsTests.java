// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugPackageDebugSettings;
import com.azure.resourcemanager.datafactory.models.DataFlowSourceSetting;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataFlowDebugPackageDebugSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataFlowDebugPackageDebugSettings model = BinaryData.fromString(
            "{\"sourceSettings\":[{\"sourceName\":\"zrxklobd\",\"rowLimit\":61809023,\"\":{\"op\":\"datamkmlmvevfx\",\"hrdd\":\"datahbzxli\",\"nzqcy\":\"datatfgxqbawpcb\"}}],\"parameters\":{\"ofyuicd\":\"datap\",\"ybww\":\"datazb\",\"muvapc\":\"databdvibidmhmwffpl\"},\"datasetParameters\":\"datacrrvweyo\"}")
            .toObject(DataFlowDebugPackageDebugSettings.class);
        Assertions.assertEquals("zrxklobd", model.sourceSettings().get(0).sourceName());
        Assertions.assertEquals(61809023, model.sourceSettings().get(0).rowLimit());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataFlowDebugPackageDebugSettings model = new DataFlowDebugPackageDebugSettings()
            .withSourceSettings(Arrays.asList(new DataFlowSourceSetting().withSourceName("zrxklobd")
                .withRowLimit(61809023)
                .withAdditionalProperties(mapOf())))
            .withParameters(mapOf("ofyuicd", "datap", "ybww", "datazb", "muvapc", "databdvibidmhmwffpl"))
            .withDatasetParameters("datacrrvweyo");
        model = BinaryData.fromObject(model).toObject(DataFlowDebugPackageDebugSettings.class);
        Assertions.assertEquals("zrxklobd", model.sourceSettings().get(0).sourceName());
        Assertions.assertEquals(61809023, model.sourceSettings().get(0).rowLimit());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
