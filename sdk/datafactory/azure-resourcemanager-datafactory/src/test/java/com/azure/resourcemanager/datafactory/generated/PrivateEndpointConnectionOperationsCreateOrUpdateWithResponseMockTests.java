// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.PrivateEndpoint;
import com.azure.resourcemanager.datafactory.models.PrivateEndpointConnectionResource;
import com.azure.resourcemanager.datafactory.models.PrivateLinkConnectionApprovalRequest;
import com.azure.resourcemanager.datafactory.models.PrivateLinkConnectionState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionOperationsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"kyj\",\"privateEndpoint\":{\"id\":\"ggidnnsi\"},\"privateLinkServiceConnectionState\":{\"status\":\"cmedceishsg\",\"description\":\"rzunkvnoicwe\",\"actionsRequired\":\"ovnfuj\"}},\"name\":\"igglkoflephdnya\",\"type\":\"okhzymsldomgwc\",\"etag\":\"zdxjmkzkgtj\",\"id\":\"gntuuzlg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnectionResource response
            = manager.privateEndpointConnectionOperations()
                .define("sacf")
                .withExistingFactory("wpjgwmpcykavy", "crovahr")
                .withProperties(new PrivateLinkConnectionApprovalRequest()
                    .withPrivateLinkServiceConnectionState(new PrivateLinkConnectionState().withStatus("imqvolake")
                        .withDescription("rqmweaik")
                        .withActionsRequired("oshubvzhmxcwpsu"))
                    .withPrivateEndpoint(new PrivateEndpoint().withId("pnmpy")))
                .withIfMatch("cxcwloffhlrxldy")
                .create();

        Assertions.assertEquals("gntuuzlg", response.id());
        Assertions.assertEquals("cmedceishsg", response.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("rzunkvnoicwe",
            response.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("ovnfuj", response.properties().privateLinkServiceConnectionState().actionsRequired());
    }
}
