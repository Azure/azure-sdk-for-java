// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.datafactory.fluent.models.PipelineRunInner;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;

public final class PipelineRunInnerTests {
    @Test
    public void testDeserialize() {
        PipelineRunInner model =
            BinaryData
                .fromString(
                    "{\"runId\":\"cvdrhvoodsot\",\"runGroupId\":\"bzdopcj\",\"isLatest\":true,\"pipelineName\":\"dldwmgxc\",\"parameters\":{\"niyqslui\":\"lpmutwuoegrpkhj\",\"mpaxmodfvuefywsb\":\"pdggkzzlvm\",\"rfouyftaakcpw\":\"fvmwy\"},\"runDimensions\":{\"xkp\":\"vqtmnub\",\"mquxvypo\":\"ksmond\",\"smocmbq\":\"gkopkwhojvpajqgx\"},\"invokedBy\":{\"name\":\"mkcxozapvh\",\"id\":\"xprglyatddc\",\"invokedByType\":\"bcuejrjxgci\",\"pipelineName\":\"brh\",\"pipelineRunId\":\"xsdqrhzoymibmrqy\"},\"lastUpdated\":\"2021-02-21T21:27:59Z\",\"runStart\":\"2021-04-13T12:13:43Z\",\"runEnd\":\"2021-05-29T06:31:11Z\",\"durationInMs\":651919856,\"status\":\"dtmhrkwofyyvoqa\",\"message\":\"iexpbtgiwbwo\",\"\":{}}")
                .toObject(PipelineRunInner.class);
    }

    @Test
    public void testSerialize() throws IOException {
        PipelineRunInner model =
            new PipelineRunInner()
                .withAdditionalProperties(
                    mapOf(
                        "durationInMs",
                        651919856,
                        "runDimensions",
                        JacksonAdapter
                            .createDefaultSerializerAdapter()
                            .deserialize(
                                "{\"xkp\":\"vqtmnub\",\"mquxvypo\":\"ksmond\",\"smocmbq\":\"gkopkwhojvpajqgx\"}",
                                Object.class,
                                SerializerEncoding.JSON),
                        "invokedBy",
                        JacksonAdapter
                            .createDefaultSerializerAdapter()
                            .deserialize(
                                "{\"name\":\"mkcxozapvh\",\"id\":\"xprglyatddc\",\"invokedByType\":\"bcuejrjxgci\",\"pipelineName\":\"brh\",\"pipelineRunId\":\"xsdqrhzoymibmrqy\"}",
                                Object.class,
                                SerializerEncoding.JSON),
                        "runStart",
                        "2021-04-13T12:13:43Z",
                        "message",
                        "iexpbtgiwbwo",
                        "pipelineName",
                        "dldwmgxc",
                        "lastUpdated",
                        "2021-02-21T21:27:59Z",
                        "isLatest",
                        true,
                        "runId",
                        "cvdrhvoodsot",
                        "runEnd",
                        "2021-05-29T06:31:11Z",
                        "runGroupId",
                        "bzdopcj",
                        "parameters",
                        JacksonAdapter
                            .createDefaultSerializerAdapter()
                            .deserialize(
                                "{\"niyqslui\":\"lpmutwuoegrpkhj\",\"mpaxmodfvuefywsb\":\"pdggkzzlvm\",\"rfouyftaakcpw\":\"fvmwy\"}",
                                Object.class,
                                SerializerEncoding.JSON),
                        "status",
                        "dtmhrkwofyyvoqa"));
        model = BinaryData.fromObject(model).toObject(PipelineRunInner.class);
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
