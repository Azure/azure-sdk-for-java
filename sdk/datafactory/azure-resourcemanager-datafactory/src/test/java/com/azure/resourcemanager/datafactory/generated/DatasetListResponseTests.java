// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.DatasetResourceInner;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetListResponse;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatasetListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatasetListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"type\":\"auwzizxbmpgc\",\"description\":\"fuzmuvpbtt\",\"structure\":\"datamorppxebmnzbtbh\",\"schema\":\"dataglkfg\",\"linkedServiceName\":{\"referenceName\":\"hdneuelfph\",\"parameters\":{\"quuvxzxcl\":\"datahtozfikdow\",\"sg\":\"dataithhqzon\",\"c\":\"datab\",\"acffgdkzzewkfvhq\":\"datahfwdsjnkaljutiis\"}},\"parameters\":{\"uflrwd\":{\"type\":\"Object\",\"defaultValue\":\"datavpnpp\"}},\"annotations\":[\"datalxyjr\",\"datasag\"],\"folder\":{\"name\":\"nihgwqapnedg\"},\"\":{\"vdrhvoo\":\"datavkcvqvpkeqd\",\"dopcjwvnh\":\"datasotbob\",\"mgxcxrslpm\":\"datald\",\"qsluicp\":\"datatwuoegrpkhjwni\"}},\"name\":\"gk\",\"type\":\"lvmbmpaxmodfvuef\",\"etag\":\"sbpfvmwyhr\",\"id\":\"uyfta\"},{\"properties\":{\"type\":\"cpwi\",\"description\":\"vqtmnub\",\"structure\":\"datakpzksmondjmq\",\"schema\":\"datavypomgkopkwho\",\"linkedServiceName\":{\"referenceName\":\"v\",\"parameters\":{\"mocmbqfqvmk\":\"dataqgxy\"}},\"parameters\":{\"yat\":{\"type\":\"SecureString\",\"defaultValue\":\"datapvhelxprg\"}},\"annotations\":[\"datakcbcue\"],\"folder\":{\"name\":\"xgc\"},\"\":{\"sxsdqrhzoymibm\":\"databrh\",\"hwflu\":\"dataqyib\",\"voqacpiexpbt\":\"datazdtmhrkwofy\"}},\"name\":\"wbwo\",\"type\":\"washr\",\"etag\":\"tkcnqxwb\",\"id\":\"kulpiujwaasi\"},{\"properties\":{\"type\":\"i\",\"description\":\"byuqerpqlp\",\"structure\":\"datacciuqgbdbutau\",\"schema\":\"databtkuwhh\",\"linkedServiceName\":{\"referenceName\":\"hykojoxafnndlpic\",\"parameters\":{\"kkpwdreqnovvq\":\"dataymkcdyhb\"}},\"parameters\":{\"rsndsytgadgvra\":{\"type\":\"Array\",\"defaultValue\":\"dataxywsuws\"},\"arrwlquu\":{\"type\":\"SecureString\",\"defaultValue\":\"dataneqn\"}},\"annotations\":[\"dataqkacewii\"],\"folder\":{\"name\":\"ubjibww\"},\"\":{\"kn\":\"dataohqkvpuvksgpls\",\"synljphuopxodl\":\"datan\",\"sjswsrms\":\"dataiyntorzihle\",\"ox\":\"datayzrpzbchckqqzq\"}},\"name\":\"suiizynkedyat\",\"type\":\"yhqmibzyhwi\",\"etag\":\"mypyynpcdpu\",\"id\":\"zgmwznmabikns\"},{\"properties\":{\"type\":\"gj\",\"description\":\"bldtlww\",\"structure\":\"datakdmtncvokotll\",\"schema\":\"datayhgsy\",\"linkedServiceName\":{\"referenceName\":\"cogjltdtbn\",\"parameters\":{\"ocrkvcikh\":\"datad\",\"qgxqquezikyw\":\"datavpa\",\"lla\":\"datagxk\"}},\"parameters\":{\"ivgvvcna\":{\"type\":\"String\",\"defaultValue\":\"datauipiccjzk\"},\"rdvstkwqqtch\":{\"type\":\"Bool\",\"defaultValue\":\"datayrnxxmueedn\"}},\"annotations\":[\"datamfmtdaaygdvw\",\"datagpiohgwxrtfudxe\",\"dataxg\"],\"folder\":{\"name\":\"gvr\"},\"\":{\"dblx\":\"datapkukghi\",\"fnjhfjxwmszkkfo\":\"datawi\",\"kzikfjawneaivxwc\":\"datarey\",\"fatkld\":\"dataelpcirelsfeaenwa\"}},\"name\":\"bjhwuaan\",\"type\":\"jos\",\"etag\":\"youlp\",\"id\":\"v\"}],\"nextLink\":\"glrvimjwosytxi\"}")
            .toObject(DatasetListResponse.class);
        Assertions.assertEquals("uyfta", model.value().get(0).id());
        Assertions.assertEquals("fuzmuvpbtt", model.value().get(0).properties().description());
        Assertions.assertEquals("hdneuelfph", model.value().get(0).properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT,
            model.value().get(0).properties().parameters().get("uflrwd").type());
        Assertions.assertEquals("nihgwqapnedg", model.value().get(0).properties().folder().name());
        Assertions.assertEquals("glrvimjwosytxi", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatasetListResponse model = new DatasetListResponse().withValue(Arrays.asList(
            new DatasetResourceInner().withId("uyfta")
                .withProperties(new Dataset().withDescription("fuzmuvpbtt")
                    .withStructure("datamorppxebmnzbtbh")
                    .withSchema("dataglkfg")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("hdneuelfph")
                        .withParameters(mapOf("quuvxzxcl", "datahtozfikdow", "sg", "dataithhqzon", "c", "datab",
                            "acffgdkzzewkfvhq", "datahfwdsjnkaljutiis")))
                    .withParameters(mapOf("uflrwd",
                        new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datavpnpp")))
                    .withAnnotations(Arrays.asList("datalxyjr", "datasag"))
                    .withFolder(new DatasetFolder().withName("nihgwqapnedg"))
                    .withAdditionalProperties(mapOf("type", "auwzizxbmpgc"))),
            new DatasetResourceInner().withId("kulpiujwaasi")
                .withProperties(new Dataset().withDescription("vqtmnub")
                    .withStructure("datakpzksmondjmq")
                    .withSchema("datavypomgkopkwho")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("v")
                        .withParameters(mapOf("mocmbqfqvmk", "dataqgxy")))
                    .withParameters(mapOf("yat",
                        new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                            .withDefaultValue("datapvhelxprg")))
                    .withAnnotations(Arrays.asList("datakcbcue"))
                    .withFolder(new DatasetFolder().withName("xgc"))
                    .withAdditionalProperties(mapOf("type", "cpwi"))),
            new DatasetResourceInner().withId("zgmwznmabikns")
                .withProperties(new Dataset().withDescription("byuqerpqlp")
                    .withStructure("datacciuqgbdbutau")
                    .withSchema("databtkuwhh")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("hykojoxafnndlpic")
                        .withParameters(mapOf("kkpwdreqnovvq", "dataymkcdyhb")))
                    .withParameters(mapOf("rsndsytgadgvra",
                        new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataxywsuws"),
                        "arrwlquu",
                        new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                            .withDefaultValue("dataneqn")))
                    .withAnnotations(Arrays.asList("dataqkacewii"))
                    .withFolder(new DatasetFolder().withName("ubjibww"))
                    .withAdditionalProperties(mapOf("type", "i"))),
            new DatasetResourceInner().withId("v")
                .withProperties(new Dataset().withDescription("bldtlww")
                    .withStructure("datakdmtncvokotll")
                    .withSchema("datayhgsy")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("cogjltdtbn")
                        .withParameters(mapOf("ocrkvcikh", "datad", "qgxqquezikyw", "datavpa", "lla", "datagxk")))
                    .withParameters(mapOf("ivgvvcna",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datauipiccjzk"),
                        "rdvstkwqqtch",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datayrnxxmueedn")))
                    .withAnnotations(Arrays.asList("datamfmtdaaygdvw", "datagpiohgwxrtfudxe", "dataxg"))
                    .withFolder(new DatasetFolder().withName("gvr"))
                    .withAdditionalProperties(mapOf("type", "gj")))))
            .withNextLink("glrvimjwosytxi");
        model = BinaryData.fromObject(model).toObject(DatasetListResponse.class);
        Assertions.assertEquals("uyfta", model.value().get(0).id());
        Assertions.assertEquals("fuzmuvpbtt", model.value().get(0).properties().description());
        Assertions.assertEquals("hdneuelfph", model.value().get(0).properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT,
            model.value().get(0).properties().parameters().get("uflrwd").type());
        Assertions.assertEquals("nihgwqapnedg", model.value().get(0).properties().folder().name());
        Assertions.assertEquals("glrvimjwosytxi", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
