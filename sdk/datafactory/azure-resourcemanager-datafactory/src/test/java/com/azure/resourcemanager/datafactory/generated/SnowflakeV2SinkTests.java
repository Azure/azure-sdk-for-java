// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.SnowflakeImportCopyCommand;
import com.azure.resourcemanager.datafactory.models.SnowflakeV2Sink;
import java.util.HashMap;
import java.util.Map;

public final class SnowflakeV2SinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeV2Sink model = BinaryData.fromString(
            "{\"type\":\"SnowflakeV2Sink\",\"preCopyScript\":\"datacf\",\"importSettings\":{\"type\":\"SnowflakeImportCopyCommand\",\"additionalCopyOptions\":{\"nstqwnpeg\":\"datakvb\"},\"additionalFormatOptions\":{\"beekzyebpatwbbf\":\"datadqeflvdfaqcqlex\",\"nwohlcahhfuydgd\":\"datadfl\",\"bpduzeebde\":\"dataitavgayuspzlcv\"},\"\":{\"gbbozivfoyq\":\"datawkhruzz\",\"vvscbpkmo\":\"datanlhsxeasxsqq\",\"qyibwu\":\"datadukp\"}},\"writeBatchSize\":\"datamorsyirfkxazuboi\",\"writeBatchTimeout\":\"datarw\",\"sinkRetryCount\":\"databjzdvaqoilgkz\",\"sinkRetryWait\":\"datazpvjwego\",\"maxConcurrentConnections\":\"dataceqyrajdvvs\",\"disableMetricsCollection\":\"datatyypercazcchvww\",\"\":{\"tfhhay\":\"datazztv\",\"liguwqoszcm\":\"dataxkfgxxef\"}}")
            .toObject(SnowflakeV2Sink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeV2Sink model = new SnowflakeV2Sink().withWriteBatchSize("datamorsyirfkxazuboi")
            .withWriteBatchTimeout("datarw").withSinkRetryCount("databjzdvaqoilgkz").withSinkRetryWait("datazpvjwego")
            .withMaxConcurrentConnections("dataceqyrajdvvs").withDisableMetricsCollection("datatyypercazcchvww")
            .withPreCopyScript("datacf").withImportSettings(
                new SnowflakeImportCopyCommand().withAdditionalCopyOptions(mapOf("nstqwnpeg", "datakvb"))
                    .withAdditionalFormatOptions(mapOf("beekzyebpatwbbf", "datadqeflvdfaqcqlex", "nwohlcahhfuydgd",
                        "datadfl", "bpduzeebde", "dataitavgayuspzlcv")));
        model = BinaryData.fromObject(model).toObject(SnowflakeV2Sink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
