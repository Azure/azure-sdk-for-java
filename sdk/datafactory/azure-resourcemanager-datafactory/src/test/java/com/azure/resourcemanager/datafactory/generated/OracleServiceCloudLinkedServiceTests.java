// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.OracleServiceCloudLinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class OracleServiceCloudLinkedServiceTests {
    @Test
    public void testDeserialize() {
        OracleServiceCloudLinkedService model =
            BinaryData
                .fromString(
                    "{\"type\":\"OracleServiceCloud\",\"typeProperties\":{\"password\":{\"type\":\"SecretBase\"}},\"connectVia\":{\"referenceName\":\"nyrukoil\",\"parameters\":{}},\"description\":\"uwj\",\"parameters\":{\"lh\":{\"type\":\"Float\"},\"p\":{\"type\":\"String\"},\"z\":{\"type\":\"Object\"},\"qkkwhbgxvellvul\":{\"type\":\"Bool\"}},\"annotations\":[],\"\":{}}")
                .toObject(OracleServiceCloudLinkedService.class);
        Assertions.assertEquals("nyrukoil", model.connectVia().referenceName());
        Assertions.assertEquals("uwj", model.description());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("lh").type());
    }

    @Test
    public void testSerialize() {
        OracleServiceCloudLinkedService model =
            new OracleServiceCloudLinkedService()
                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("nyrukoil").withParameters(mapOf()))
                .withDescription("uwj")
                .withParameters(
                    mapOf(
                        "lh",
                        new ParameterSpecification().withType(ParameterType.FLOAT),
                        "p",
                        new ParameterSpecification().withType(ParameterType.STRING),
                        "z",
                        new ParameterSpecification().withType(ParameterType.OBJECT),
                        "qkkwhbgxvellvul",
                        new ParameterSpecification().withType(ParameterType.BOOL)))
                .withAnnotations(Arrays.asList())
                .withPassword(new SecretBase());
        model = BinaryData.fromObject(model).toObject(OracleServiceCloudLinkedService.class);
        Assertions.assertEquals("nyrukoil", model.connectVia().referenceName());
        Assertions.assertEquals("uwj", model.description());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("lh").type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
