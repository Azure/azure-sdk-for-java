// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ChangeDataCapture;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureFolder;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.DataMapperMapping;
import com.azure.resourcemanager.datafactory.models.FrequencyType;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MapperAttributeMapping;
import com.azure.resourcemanager.datafactory.models.MapperAttributeMappings;
import com.azure.resourcemanager.datafactory.models.MapperConnection;
import com.azure.resourcemanager.datafactory.models.MapperConnectionReference;
import com.azure.resourcemanager.datafactory.models.MapperDslConnectorProperties;
import com.azure.resourcemanager.datafactory.models.MapperPolicy;
import com.azure.resourcemanager.datafactory.models.MapperPolicyRecurrence;
import com.azure.resourcemanager.datafactory.models.MapperSourceConnectionsInfo;
import com.azure.resourcemanager.datafactory.models.MapperTable;
import com.azure.resourcemanager.datafactory.models.MapperTableSchema;
import com.azure.resourcemanager.datafactory.models.MapperTargetConnectionsInfo;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ChangeDataCaptureTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChangeDataCapture model = BinaryData.fromString(
            "{\"folder\":{\"name\":\"igptajbrzmqxucyc\"},\"description\":\"oclxiut\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{\"name\":\"yzjdnrqjbt\",\"properties\":{\"schema\":[{},{},{},{}],\"dslConnectorProperties\":[{},{}]}},{\"name\":\"qbzg\",\"properties\":{\"schema\":[{}],\"dslConnectorProperties\":[{}]}}],\"connection\":{\"linkedService\":{\"referenceName\":\"tbwbqamteuli\",\"parameters\":{\"uxx\":\"datapkcvmwf\",\"iciijqpkzfbojx\":\"datapmywbormcq\",\"nkwywzwofa\":\"datamcsmyqwixvcp\",\"t\":\"dataickduoiqta\"}},\"linkedServiceType\":\"sknxrwzawnvsbcf\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{\"name\":\"hycvdimwrzre\",\"value\":\"datagy\"},{\"name\":\"utrwpweryekz\",\"value\":\"datahmeott\"},{\"name\":\"jyosxwwh\",\"value\":\"datajtfvpndpmiljpn\"}]}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{\"name\":\"qllzsauzpjlxeehu\",\"properties\":{\"schema\":[{},{},{},{}],\"dslConnectorProperties\":[{},{},{},{}]}},{\"name\":\"aymezx\",\"properties\":{\"schema\":[{},{},{},{}],\"dslConnectorProperties\":[{},{}]}}],\"connection\":{\"linkedService\":{\"referenceName\":\"fdsajred\",\"parameters\":{\"afpwzyifrkgwl\":\"datayshtuwgmev\",\"zdyi\":\"dataxeqipx\",\"abnsmj\":\"datasfayorpravkjoges\",\"qpkevmyltjc\":\"datawynqxaekqsykvwj\"}},\"linkedServiceType\":\"pxklurccl\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{\"name\":\"oytzpose\",\"value\":\"dataigpxvkq\"}]},\"dataMapperMappings\":[{\"targetEntityName\":\"xvpif\",\"sourceEntityName\":\"aifyzyzeyuubeids\",\"sourceConnectionReference\":{\"connectionName\":\"ytoithgygvfl\",\"type\":\"linkedservicetype\"},\"attributeMappingInfo\":{\"attributeMappings\":[{},{}]},\"sourceDenormalizeInfo\":\"dataynkrxwetw\"},{\"targetEntityName\":\"rcyrucpcunnu\",\"sourceEntityName\":\"qumoeno\",\"sourceConnectionReference\":{\"connectionName\":\"ienhqhskndnelq\",\"type\":\"linkedservicetype\"},\"attributeMappingInfo\":{\"attributeMappings\":[{},{},{}]},\"sourceDenormalizeInfo\":\"datawf\"}],\"relationships\":[\"datan\",\"datayopetxivc\",\"datarl\"]},{\"targetEntities\":[{\"name\":\"caephbl\",\"properties\":{\"schema\":[{}],\"dslConnectorProperties\":[{}]}},{\"name\":\"bqsdtcjbctvi\",\"properties\":{\"schema\":[{},{},{},{}],\"dslConnectorProperties\":[{},{},{},{}]}},{\"name\":\"uo\",\"properties\":{\"schema\":[{},{},{},{}],\"dslConnectorProperties\":[{}]}},{\"name\":\"sqhzvbrzcdbanfz\",\"properties\":{\"schema\":[{},{},{}],\"dslConnectorProperties\":[{},{},{},{}]}}],\"connection\":{\"linkedService\":{\"referenceName\":\"atkdbmwnrd\",\"parameters\":{\"axljal\":\"databqbnaomhjrmkuh\",\"cjmobcanc\":\"datai\",\"xf\":\"dataexxqcwg\"}},\"linkedServiceType\":\"aknokzwjjzrl\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{\"name\":\"yfytpq\",\"value\":\"datax\"},{\"name\":\"m\",\"value\":\"datajivyqlkjuv\"}]},\"dataMapperMappings\":[{\"targetEntityName\":\"slzoyov\",\"sourceEntityName\":\"dbpqvybefgvm\",\"sourceConnectionReference\":{\"connectionName\":\"kcvtl\",\"type\":\"linkedservicetype\"},\"attributeMappingInfo\":{\"attributeMappings\":[{},{},{}]},\"sourceDenormalizeInfo\":\"datacua\"},{\"targetEntityName\":\"rhunlp\",\"sourceEntityName\":\"ykycndzfqi\",\"sourceConnectionReference\":{\"connectionName\":\"euy\",\"type\":\"linkedservicetype\"},\"attributeMappingInfo\":{\"attributeMappings\":[{},{},{},{}]},\"sourceDenormalizeInfo\":\"datagltbxoeeo\"},{\"targetEntityName\":\"lnf\",\"sourceEntityName\":\"y\",\"sourceConnectionReference\":{\"connectionName\":\"qdbpbhfckdvezc\",\"type\":\"linkedservicetype\"},\"attributeMappingInfo\":{\"attributeMappings\":[{},{},{}]},\"sourceDenormalizeInfo\":\"dataddubbnqfblhkal\"}],\"relationships\":[\"dataavawugiqj\",\"dataiogqgdminictte\",\"datajohiyg\",\"datapnbonhpcz\"]},{\"targetEntities\":[{\"name\":\"tp\",\"properties\":{\"schema\":[{}],\"dslConnectorProperties\":[{},{}]}}],\"connection\":{\"linkedService\":{\"referenceName\":\"chkhufm\",\"parameters\":{\"zulo\":\"datamqyjgy\"}},\"linkedServiceType\":\"aeuzanh\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{\"name\":\"wphpzfngqj\",\"value\":\"dataidftujwjjufwbe\"},{\"name\":\"k\",\"value\":\"datarhtssr\"},{\"name\":\"nmdvha\",\"value\":\"datavjytiqswbq\"}]},\"dataMapperMappings\":[{\"targetEntityName\":\"xiytxtdgukvl\",\"sourceEntityName\":\"ktg\",\"sourceConnectionReference\":{\"connectionName\":\"youambewr\",\"type\":\"linkedservicetype\"},\"attributeMappingInfo\":{\"attributeMappings\":[{}]},\"sourceDenormalizeInfo\":\"datagmmuteyxey\"},{\"targetEntityName\":\"qigijiitnspxlzde\",\"sourceEntityName\":\"grijwaiufanrayb\",\"sourceConnectionReference\":{\"connectionName\":\"qfrojsydgrhyd\",\"type\":\"linkedservicetype\"},\"attributeMappingInfo\":{\"attributeMappings\":[{},{},{},{}]},\"sourceDenormalizeInfo\":\"dataskieca\"}],\"relationships\":[\"datazmxieqvdsmaklix\",\"datacahyhx\"]}],\"policy\":{\"mode\":\"ybxawoijpodtblx\",\"recurrence\":{\"frequency\":\"Minute\",\"interval\":1810381006}},\"allowVNetOverride\":false,\"status\":\"qhykincn\"}")
            .toObject(ChangeDataCapture.class);
        Assertions.assertEquals("igptajbrzmqxucyc", model.folder().name());
        Assertions.assertEquals("oclxiut", model.description());
        Assertions.assertEquals("yzjdnrqjbt", model.sourceConnectionsInfo().get(0).sourceEntities().get(0).name());
        Assertions.assertEquals("tbwbqamteuli",
            model.sourceConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("sknxrwzawnvsbcf",
            model.sourceConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(false, model.sourceConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("hycvdimwrzre",
            model.sourceConnectionsInfo().get(0).connection().commonDslConnectorProperties().get(0).name());
        Assertions.assertEquals("qllzsauzpjlxeehu",
            model.targetConnectionsInfo().get(0).targetEntities().get(0).name());
        Assertions.assertEquals("fdsajred",
            model.targetConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("pxklurccl", model.targetConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(true, model.targetConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("oytzpose",
            model.targetConnectionsInfo().get(0).connection().commonDslConnectorProperties().get(0).name());
        Assertions.assertEquals("xvpif",
            model.targetConnectionsInfo().get(0).dataMapperMappings().get(0).targetEntityName());
        Assertions.assertEquals("aifyzyzeyuubeids",
            model.targetConnectionsInfo().get(0).dataMapperMappings().get(0).sourceEntityName());
        Assertions.assertEquals("ytoithgygvfl",
            model.targetConnectionsInfo()
                .get(0)
                .dataMapperMappings()
                .get(0)
                .sourceConnectionReference()
                .connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.targetConnectionsInfo().get(0).dataMapperMappings().get(0).sourceConnectionReference().type());
        Assertions.assertEquals("ybxawoijpodtblx", model.policy().mode());
        Assertions.assertEquals(FrequencyType.MINUTE, model.policy().recurrence().frequency());
        Assertions.assertEquals(1810381006, model.policy().recurrence().interval());
        Assertions.assertEquals(false, model.allowVNetOverride());
        Assertions.assertEquals("qhykincn", model.status());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChangeDataCapture model
            = new ChangeDataCapture().withFolder(new ChangeDataCaptureFolder().withName("igptajbrzmqxucyc"))
                .withDescription("oclxiut")
                .withSourceConnectionsInfo(Arrays.asList(new MapperSourceConnectionsInfo()
                    .withSourceEntities(Arrays.asList(
                        new MapperTable().withName("yzjdnrqjbt")
                            .withSchema(Arrays.asList(new MapperTableSchema(), new MapperTableSchema(),
                                new MapperTableSchema(), new MapperTableSchema()))
                            .withDslConnectorProperties(
                                Arrays.asList(new MapperDslConnectorProperties(), new MapperDslConnectorProperties())),
                        new MapperTable().withName("qbzg")
                            .withSchema(Arrays.asList(new MapperTableSchema()))
                            .withDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties()))))
                    .withConnection(new MapperConnection()
                        .withLinkedService(new LinkedServiceReference().withReferenceName("tbwbqamteuli")
                            .withParameters(mapOf("uxx", "datapkcvmwf", "iciijqpkzfbojx", "datapmywbormcq",
                                "nkwywzwofa", "datamcsmyqwixvcp", "t", "dataickduoiqta")))
                        .withLinkedServiceType("sknxrwzawnvsbcf")
                        .withType(ConnectionType.LINKEDSERVICETYPE)
                        .withIsInlineDataset(false)
                        .withCommonDslConnectorProperties(Arrays.asList(
                            new MapperDslConnectorProperties().withName("hycvdimwrzre").withValue("datagy"),
                            new MapperDslConnectorProperties().withName("utrwpweryekz").withValue("datahmeott"),
                            new MapperDslConnectorProperties().withName("jyosxwwh").withValue("datajtfvpndpmiljpn"))))))
                .withTargetConnectionsInfo(Arrays.asList(
                    new MapperTargetConnectionsInfo()
                        .withTargetEntities(Arrays.asList(
                            new MapperTable().withName("qllzsauzpjlxeehu")
                                .withSchema(Arrays.asList(new MapperTableSchema(), new MapperTableSchema(),
                                    new MapperTableSchema(), new MapperTableSchema()))
                                .withDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties(),
                                    new MapperDslConnectorProperties(), new MapperDslConnectorProperties(),
                                    new MapperDslConnectorProperties())),
                            new MapperTable().withName("aymezx")
                                .withSchema(Arrays.asList(new MapperTableSchema(), new MapperTableSchema(),
                                    new MapperTableSchema(), new MapperTableSchema()))
                                .withDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties(),
                                    new MapperDslConnectorProperties()))))
                        .withConnection(
                            new MapperConnection()
                                .withLinkedService(new LinkedServiceReference().withReferenceName("fdsajred")
                                    .withParameters(mapOf("afpwzyifrkgwl", "datayshtuwgmev", "zdyi", "dataxeqipx",
                                        "abnsmj", "datasfayorpravkjoges", "qpkevmyltjc", "datawynqxaekqsykvwj")))
                                .withLinkedServiceType("pxklurccl")
                                .withType(ConnectionType.LINKEDSERVICETYPE)
                                .withIsInlineDataset(true)
                                .withCommonDslConnectorProperties(Arrays.asList(
                                    new MapperDslConnectorProperties().withName("oytzpose").withValue("dataigpxvkq"))))
                        .withDataMapperMappings(
                            Arrays.asList(
                                new DataMapperMapping().withTargetEntityName("xvpif")
                                    .withSourceEntityName("aifyzyzeyuubeids")
                                    .withSourceConnectionReference(
                                        new MapperConnectionReference().withConnectionName("ytoithgygvfl")
                                            .withType(ConnectionType.LINKEDSERVICETYPE))
                                    .withAttributeMappingInfo(new MapperAttributeMappings().withAttributeMappings(
                                        Arrays.asList(new MapperAttributeMapping(), new MapperAttributeMapping())))
                                    .withSourceDenormalizeInfo("dataynkrxwetw"),
                                new DataMapperMapping().withTargetEntityName("rcyrucpcunnu")
                                    .withSourceEntityName("qumoeno")
                                    .withSourceConnectionReference(
                                        new MapperConnectionReference().withConnectionName("ienhqhskndnelq")
                                            .withType(ConnectionType.LINKEDSERVICETYPE))
                                    .withAttributeMappingInfo(new MapperAttributeMappings()
                                        .withAttributeMappings(Arrays.asList(new MapperAttributeMapping(),
                                            new MapperAttributeMapping(), new MapperAttributeMapping())))
                                    .withSourceDenormalizeInfo("datawf")))
                        .withRelationships(Arrays.asList("datan", "datayopetxivc", "datarl")),
                    new MapperTargetConnectionsInfo()
                        .withTargetEntities(
                            Arrays.asList(
                                new MapperTable().withName("caephbl")
                                    .withSchema(Arrays.asList(new MapperTableSchema()))
                                    .withDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties())),
                                new MapperTable().withName("bqsdtcjbctvi")
                                    .withSchema(Arrays.asList(new MapperTableSchema(), new MapperTableSchema(),
                                        new MapperTableSchema(), new MapperTableSchema()))
                                    .withDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties(),
                                        new MapperDslConnectorProperties(), new MapperDslConnectorProperties(),
                                        new MapperDslConnectorProperties())),
                                new MapperTable().withName("uo")
                                    .withSchema(Arrays.asList(new MapperTableSchema(), new MapperTableSchema(),
                                        new MapperTableSchema(), new MapperTableSchema()))
                                    .withDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties())),
                                new MapperTable().withName("sqhzvbrzcdbanfz")
                                    .withSchema(Arrays.asList(new MapperTableSchema(), new MapperTableSchema(),
                                        new MapperTableSchema()))
                                    .withDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties(),
                                        new MapperDslConnectorProperties(), new MapperDslConnectorProperties(),
                                        new MapperDslConnectorProperties()))))
                        .withConnection(
                            new MapperConnection()
                                .withLinkedService(new LinkedServiceReference().withReferenceName("atkdbmwnrd")
                                    .withParameters(mapOf("axljal", "databqbnaomhjrmkuh", "cjmobcanc", "datai", "xf",
                                        "dataexxqcwg")))
                                .withLinkedServiceType("aknokzwjjzrl")
                                .withType(ConnectionType.LINKEDSERVICETYPE)
                                .withIsInlineDataset(false)
                                .withCommonDslConnectorProperties(Arrays.asList(
                                    new MapperDslConnectorProperties().withName("yfytpq").withValue("datax"),
                                    new MapperDslConnectorProperties().withName("m").withValue("datajivyqlkjuv"))))
                        .withDataMapperMappings(Arrays.asList(new DataMapperMapping().withTargetEntityName("slzoyov")
                            .withSourceEntityName("dbpqvybefgvm")
                            .withSourceConnectionReference(new MapperConnectionReference().withConnectionName("kcvtl")
                                .withType(ConnectionType.LINKEDSERVICETYPE))
                            .withAttributeMappingInfo(new MapperAttributeMappings()
                                .withAttributeMappings(Arrays.asList(new MapperAttributeMapping(),
                                    new MapperAttributeMapping(), new MapperAttributeMapping())))
                            .withSourceDenormalizeInfo("datacua"),
                            new DataMapperMapping().withTargetEntityName("rhunlp")
                                .withSourceEntityName("ykycndzfqi")
                                .withSourceConnectionReference(new MapperConnectionReference().withConnectionName("euy")
                                    .withType(ConnectionType.LINKEDSERVICETYPE))
                                .withAttributeMappingInfo(new MapperAttributeMappings().withAttributeMappings(
                                    Arrays.asList(new MapperAttributeMapping(), new MapperAttributeMapping(),
                                        new MapperAttributeMapping(), new MapperAttributeMapping())))
                                .withSourceDenormalizeInfo("datagltbxoeeo"),
                            new DataMapperMapping().withTargetEntityName("lnf")
                                .withSourceEntityName("y")
                                .withSourceConnectionReference(
                                    new MapperConnectionReference().withConnectionName("qdbpbhfckdvezc")
                                        .withType(ConnectionType.LINKEDSERVICETYPE))
                                .withAttributeMappingInfo(new MapperAttributeMappings()
                                    .withAttributeMappings(Arrays.asList(new MapperAttributeMapping(),
                                        new MapperAttributeMapping(), new MapperAttributeMapping())))
                                .withSourceDenormalizeInfo("dataddubbnqfblhkal")))
                        .withRelationships(
                            Arrays.asList("dataavawugiqj", "dataiogqgdminictte", "datajohiyg", "datapnbonhpcz")),
                    new MapperTargetConnectionsInfo()
                        .withTargetEntities(
                            Arrays.asList(new MapperTable().withName("tp")
                                .withSchema(Arrays.asList(new MapperTableSchema()))
                                .withDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties(),
                                    new MapperDslConnectorProperties()))))
                        .withConnection(new MapperConnection()
                            .withLinkedService(new LinkedServiceReference().withReferenceName("chkhufm")
                                .withParameters(mapOf("zulo", "datamqyjgy")))
                            .withLinkedServiceType("aeuzanh")
                            .withType(ConnectionType.LINKEDSERVICETYPE)
                            .withIsInlineDataset(false)
                            .withCommonDslConnectorProperties(Arrays.asList(
                                new MapperDslConnectorProperties().withName("wphpzfngqj")
                                    .withValue("dataidftujwjjufwbe"),
                                new MapperDslConnectorProperties().withName("k").withValue("datarhtssr"),
                                new MapperDslConnectorProperties().withName("nmdvha").withValue("datavjytiqswbq"))))
                        .withDataMapperMappings(Arrays.asList(
                            new DataMapperMapping().withTargetEntityName("xiytxtdgukvl")
                                .withSourceEntityName("ktg")
                                .withSourceConnectionReference(
                                    new MapperConnectionReference().withConnectionName("youambewr")
                                        .withType(ConnectionType.LINKEDSERVICETYPE))
                                .withAttributeMappingInfo(new MapperAttributeMappings()
                                    .withAttributeMappings(Arrays.asList(new MapperAttributeMapping())))
                                .withSourceDenormalizeInfo("datagmmuteyxey"),
                            new DataMapperMapping().withTargetEntityName("qigijiitnspxlzde")
                                .withSourceEntityName("grijwaiufanrayb")
                                .withSourceConnectionReference(
                                    new MapperConnectionReference().withConnectionName("qfrojsydgrhyd")
                                        .withType(ConnectionType.LINKEDSERVICETYPE))
                                .withAttributeMappingInfo(new MapperAttributeMappings().withAttributeMappings(
                                    Arrays.asList(new MapperAttributeMapping(), new MapperAttributeMapping(),
                                        new MapperAttributeMapping(), new MapperAttributeMapping())))
                                .withSourceDenormalizeInfo("dataskieca")))
                        .withRelationships(Arrays.asList("datazmxieqvdsmaklix", "datacahyhx"))))
                .withPolicy(new MapperPolicy().withMode("ybxawoijpodtblx")
                    .withRecurrence(
                        new MapperPolicyRecurrence().withFrequency(FrequencyType.MINUTE).withInterval(1810381006)))
                .withAllowVNetOverride(false)
                .withStatus("qhykincn");
        model = BinaryData.fromObject(model).toObject(ChangeDataCapture.class);
        Assertions.assertEquals("igptajbrzmqxucyc", model.folder().name());
        Assertions.assertEquals("oclxiut", model.description());
        Assertions.assertEquals("yzjdnrqjbt", model.sourceConnectionsInfo().get(0).sourceEntities().get(0).name());
        Assertions.assertEquals("tbwbqamteuli",
            model.sourceConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("sknxrwzawnvsbcf",
            model.sourceConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(false, model.sourceConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("hycvdimwrzre",
            model.sourceConnectionsInfo().get(0).connection().commonDslConnectorProperties().get(0).name());
        Assertions.assertEquals("qllzsauzpjlxeehu",
            model.targetConnectionsInfo().get(0).targetEntities().get(0).name());
        Assertions.assertEquals("fdsajred",
            model.targetConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("pxklurccl", model.targetConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(true, model.targetConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("oytzpose",
            model.targetConnectionsInfo().get(0).connection().commonDslConnectorProperties().get(0).name());
        Assertions.assertEquals("xvpif",
            model.targetConnectionsInfo().get(0).dataMapperMappings().get(0).targetEntityName());
        Assertions.assertEquals("aifyzyzeyuubeids",
            model.targetConnectionsInfo().get(0).dataMapperMappings().get(0).sourceEntityName());
        Assertions.assertEquals("ytoithgygvfl",
            model.targetConnectionsInfo()
                .get(0)
                .dataMapperMappings()
                .get(0)
                .sourceConnectionReference()
                .connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.targetConnectionsInfo().get(0).dataMapperMappings().get(0).sourceConnectionReference().type());
        Assertions.assertEquals("ybxawoijpodtblx", model.policy().mode());
        Assertions.assertEquals(FrequencyType.MINUTE, model.policy().recurrence().frequency());
        Assertions.assertEquals(1810381006, model.policy().recurrence().interval());
        Assertions.assertEquals(false, model.allowVNetOverride());
        Assertions.assertEquals("qhykincn", model.status());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
