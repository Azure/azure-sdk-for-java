// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LinkedService model = BinaryData.fromString(
            "{\"type\":\"LinkedService\",\"version\":\"tdum\",\"connectVia\":{\"referenceName\":\"p\",\"parameters\":{\"fgohdneuelfphs\":\"databmnzbtbhjpgl\",\"v\":\"datayhtozfikdowwqu\",\"lvithhqzonosgg\":\"datazx\",\"ljuti\":\"datahcohfwdsjnk\"}},\"description\":\"wacf\",\"parameters\":{\"vhqcrail\":{\"type\":\"Array\",\"defaultValue\":\"datazewk\"},\"wdmhdlxyjrxs\":{\"type\":\"String\",\"defaultValue\":\"datappfufl\"},\"pnedgf\":{\"type\":\"Float\",\"defaultValue\":\"datafcnihgwq\"},\"dcvd\":{\"type\":\"Bool\",\"defaultValue\":\"datakcvqvpke\"}},\"annotations\":[\"dataood\"],\"\":{\"d\":\"databobzdopcjwvnhd\",\"twuoegrpkhjwni\":\"datamgxcxrslpm\"}}")
            .toObject(LinkedService.class);
        Assertions.assertEquals("tdum", model.version());
        Assertions.assertEquals("p", model.connectVia().referenceName());
        Assertions.assertEquals("wacf", model.description());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("vhqcrail").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LinkedService model = new LinkedService().withVersion("tdum")
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("p")
                .withParameters(mapOf("fgohdneuelfphs", "databmnzbtbhjpgl", "v", "datayhtozfikdowwqu", "lvithhqzonosgg",
                    "datazx", "ljuti", "datahcohfwdsjnk")))
            .withDescription("wacf")
            .withParameters(mapOf("vhqcrail",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datazewk"), "wdmhdlxyjrxs",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datappfufl"), "pnedgf",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datafcnihgwq"), "dcvd",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datakcvqvpke")))
            .withAnnotations(Arrays.asList("dataood"))
            .withAdditionalProperties(mapOf("type", "LinkedService"));
        model = BinaryData.fromObject(model).toObject(LinkedService.class);
        Assertions.assertEquals("tdum", model.version());
        Assertions.assertEquals("p", model.connectVia().referenceName());
        Assertions.assertEquals("wacf", model.description());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("vhqcrail").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
