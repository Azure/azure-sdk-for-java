// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LinkedService model = BinaryData.fromString(
            "{\"type\":\"nqpeh\",\"connectVia\":{\"referenceName\":\"doy\",\"parameters\":{\"sl\":\"datafthnzdn\",\"ynduha\":\"datanayqi\"}},\"description\":\"qlkth\",\"parameters\":{\"cdui\":{\"type\":\"Array\",\"defaultValue\":\"datalbg\"},\"lfmmdnbbglzpswi\":{\"type\":\"Float\",\"defaultValue\":\"datagccymvaolpssl\"},\"bzmnvdfznud\":{\"type\":\"SecureString\",\"defaultValue\":\"datacwyhzdxssa\"},\"ylpstdbhhxsrzdz\":{\"type\":\"SecureString\",\"defaultValue\":\"datavxzbncb\"}},\"annotations\":[\"datarsc\",\"datantnev\",\"dataiwjmygtdssls\"],\"\":{\"abnetshh\":\"dataweriofzpyqsem\",\"bmwmbesldnkw\":\"datazhedplvwiw\",\"gaokonzmnsikv\":\"datatppjflcx\"}}")
            .toObject(LinkedService.class);
        Assertions.assertEquals("doy", model.connectVia().referenceName());
        Assertions.assertEquals("qlkth", model.description());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("cdui").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LinkedService model
            = new LinkedService()
                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("doy")
                    .withParameters(mapOf("sl", "datafthnzdn", "ynduha", "datanayqi")))
                .withDescription("qlkth")
                .withParameters(mapOf("cdui",
                    new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datalbg"),
                    "lfmmdnbbglzpswi",
                    new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datagccymvaolpssl"),
                    "bzmnvdfznud",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                        .withDefaultValue("datacwyhzdxssa"),
                    "ylpstdbhhxsrzdz",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datavxzbncb")))
                .withAnnotations(Arrays.asList("datarsc", "datantnev", "dataiwjmygtdssls"))
                .withAdditionalProperties(mapOf("type", "nqpeh"));
        model = BinaryData.fromObject(model).toObject(LinkedService.class);
        Assertions.assertEquals("doy", model.connectVia().referenceName());
        Assertions.assertEquals("qlkth", model.description());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("cdui").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
