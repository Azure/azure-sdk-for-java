// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import com.azure.resourcemanager.datafactory.models.SparkAuthenticationType;
import com.azure.resourcemanager.datafactory.models.SparkLinkedService;
import com.azure.resourcemanager.datafactory.models.SparkServerType;
import com.azure.resourcemanager.datafactory.models.SparkThriftTransportProtocol;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class SparkLinkedServiceTests {
    @Test
    public void testDeserialize() {
        SparkLinkedService model =
            BinaryData
                .fromString(
                    "{\"type\":\"Spark\",\"typeProperties\":{\"serverType\":\"SharkServer2\",\"thriftTransportProtocol\":\"HTTP"
                        + " \",\"authenticationType\":\"WindowsAzureHDInsightService\",\"password\":{\"type\":\"SecretBase\"}},\"connectVia\":{\"referenceName\":\"qimiymqr\",\"parameters\":{}},\"description\":\"hfupetasvvoqsbpk\",\"parameters\":{\"k\":{\"type\":\"String\"},\"yao\":{\"type\":\"String\"},\"owpuohdkcpr\":{\"type\":\"Int\"},\"xrztiochlu\":{\"type\":\"Array\"}},\"annotations\":[],\"\":{}}")
                .toObject(SparkLinkedService.class);
        Assertions.assertEquals("qimiymqr", model.connectVia().referenceName());
        Assertions.assertEquals("hfupetasvvoqsbpk", model.description());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("k").type());
        Assertions.assertEquals(SparkServerType.SHARK_SERVER2, model.serverType());
        Assertions.assertEquals(SparkThriftTransportProtocol.HTTP, model.thriftTransportProtocol());
        Assertions.assertEquals(SparkAuthenticationType.WINDOWS_AZURE_HDINSIGHT_SERVICE, model.authenticationType());
    }

    @Test
    public void testSerialize() {
        SparkLinkedService model =
            new SparkLinkedService()
                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("qimiymqr").withParameters(mapOf()))
                .withDescription("hfupetasvvoqsbpk")
                .withParameters(
                    mapOf(
                        "k",
                        new ParameterSpecification().withType(ParameterType.STRING),
                        "yao",
                        new ParameterSpecification().withType(ParameterType.STRING),
                        "owpuohdkcpr",
                        new ParameterSpecification().withType(ParameterType.INT),
                        "xrztiochlu",
                        new ParameterSpecification().withType(ParameterType.ARRAY)))
                .withAnnotations(Arrays.asList())
                .withServerType(SparkServerType.SHARK_SERVER2)
                .withThriftTransportProtocol(SparkThriftTransportProtocol.HTTP)
                .withAuthenticationType(SparkAuthenticationType.WINDOWS_AZURE_HDINSIGHT_SERVICE)
                .withPassword(new SecretBase());
        model = BinaryData.fromObject(model).toObject(SparkLinkedService.class);
        Assertions.assertEquals("qimiymqr", model.connectVia().referenceName());
        Assertions.assertEquals("hfupetasvvoqsbpk", model.description());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("k").type());
        Assertions.assertEquals(SparkServerType.SHARK_SERVER2, model.serverType());
        Assertions.assertEquals(SparkThriftTransportProtocol.HTTP, model.thriftTransportProtocol());
        Assertions.assertEquals(SparkAuthenticationType.WINDOWS_AZURE_HDINSIGHT_SERVICE, model.authenticationType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
