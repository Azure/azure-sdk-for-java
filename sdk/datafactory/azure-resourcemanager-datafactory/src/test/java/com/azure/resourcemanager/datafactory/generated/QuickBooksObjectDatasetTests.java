// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.QuickBooksObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class QuickBooksObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        QuickBooksObjectDataset model = BinaryData.fromString(
            "{\"type\":\"QuickBooksObject\",\"typeProperties\":{\"tableName\":\"datazw\"},\"description\":\"zuh\",\"structure\":\"datatiaczhfjdccjny\",\"schema\":\"databt\",\"linkedServiceName\":{\"referenceName\":\"uhjcgj\",\"parameters\":{\"r\":\"datantomnlzthcdbszsb\",\"dct\":\"dataxeyvidcowlrm\"}},\"parameters\":{\"ryzgavpln\":{\"type\":\"Object\",\"defaultValue\":\"datajoezvw\"}},\"annotations\":[\"datafiekkiskyyy\",\"dataek\",\"datafffyshdawjlmlcuf\"],\"folder\":{\"name\":\"iutfofhoajjylsy\"},\"\":{\"ceevogir\":\"datanufzvlqquyh\",\"mds\":\"datapwnqtvuxeu\",\"axxfdlypkcpw\":\"dataij\"}}")
            .toObject(QuickBooksObjectDataset.class);
        Assertions.assertEquals("zuh", model.description());
        Assertions.assertEquals("uhjcgj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("ryzgavpln").type());
        Assertions.assertEquals("iutfofhoajjylsy", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        QuickBooksObjectDataset model = new QuickBooksObjectDataset().withDescription("zuh")
            .withStructure("datatiaczhfjdccjny")
            .withSchema("databt")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("uhjcgj")
                .withParameters(mapOf("r", "datantomnlzthcdbszsb", "dct", "dataxeyvidcowlrm")))
            .withParameters(mapOf("ryzgavpln",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datajoezvw")))
            .withAnnotations(Arrays.asList("datafiekkiskyyy", "dataek", "datafffyshdawjlmlcuf"))
            .withFolder(new DatasetFolder().withName("iutfofhoajjylsy"))
            .withTableName("datazw");
        model = BinaryData.fromObject(model).toObject(QuickBooksObjectDataset.class);
        Assertions.assertEquals("zuh", model.description());
        Assertions.assertEquals("uhjcgj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("ryzgavpln").type());
        Assertions.assertEquals("iutfofhoajjylsy", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
