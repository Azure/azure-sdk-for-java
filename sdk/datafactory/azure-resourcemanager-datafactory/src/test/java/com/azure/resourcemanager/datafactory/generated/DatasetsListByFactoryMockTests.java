// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.DatasetResource;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DatasetsListByFactoryMockTests {
    @Test
    public void testListByFactory() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"type\":\"Dataset\",\"description\":\"mxibpcnm\",\"structure\":\"datayzka\",\"schema\":\"datatiprriqwftrjd\",\"linkedServiceName\":{\"referenceName\":\"ingrcjoycqnd\",\"parameters\":{\"hntchigub\":\"datatzytesz\",\"dcmjfieydtnpqtwo\":\"dataidwgyazppefsdo\",\"goaxtwtkkmuir\":\"datafhsckecume\",\"iiudnmojjmimy\":\"datakoaxstqqjqliyxze\"}},\"parameters\":{\"zmijirpwltbl\":{\"type\":\"Float\",\"defaultValue\":\"datataaxluo\"}},\"annotations\":[\"databafcmsotudnkr\"],\"folder\":{\"name\":\"hyqeiguxixfe\"},\"\":{\"ikanybo\":\"datamavinumdngqyvzzr\",\"zzqolmoifxl\":\"dataagaigtpj\",\"jubjqjxobmv\":\"databwdkjqxqj\",\"arneug\":\"datajtzatr\"}},\"name\":\"pkjyo\",\"type\":\"wcxedkkd\",\"etag\":\"frisreh\",\"id\":\"fiflpiq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DatasetResource> response
            = manager.datasets().listByFactory("khlopy", "rsvyjrqhpz", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("fiflpiq", response.iterator().next().id());
        Assertions.assertEquals("mxibpcnm", response.iterator().next().properties().description());
        Assertions.assertEquals("ingrcjoycqnd",
            response.iterator().next().properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT,
            response.iterator().next().properties().parameters().get("zmijirpwltbl").type());
        Assertions.assertEquals("hyqeiguxixfe", response.iterator().next().properties().folder().name());
    }
}
