// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.DataFlowDebugSessionInfoInner;
import com.azure.resourcemanager.datafactory.models.QueryDataFlowDebugSessionsResponse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class QueryDataFlowDebugSessionsResponseTests {
    @Test
    public void testDeserialize() {
        QueryDataFlowDebugSessionsResponse model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"dataFlowName\":\"oftrmaequia\",\"computeType\":\"icslfaoq\",\"coreCount\":1792279483,\"nodeCount\":580732645,\"integrationRuntimeName\":\"halns\",\"sessionId\":\"ccsphkaivwi\",\"startTime\":\"scywuggwoluhc\",\"timeToLiveInMinutes\":600880906,\"lastActivityTime\":\"mhairsbrgzdwmsw\",\"\":{}},{\"dataFlowName\":\"w\",\"computeType\":\"ggicccnxqhue\",\"coreCount\":721394724,\"nodeCount\":735026566,\"integrationRuntimeName\":\"stvlzywemhzrnc\",\"sessionId\":\"tclusiypbsfgy\",\"startTime\":\"uslfead\",\"timeToLiveInMinutes\":358703588,\"lastActivityTime\":\"ukyhejhzis\",\"\":{}},{\"dataFlowName\":\"elolppvksrpqvuj\",\"computeType\":\"aehtwd\",\"coreCount\":1778813982,\"nodeCount\":1438579727,\"integrationRuntimeName\":\"iby\",\"sessionId\":\"dl\",\"startTime\":\"shfwpracstwity\",\"timeToLiveInMinutes\":56359046,\"lastActivityTime\":\"xccedcpnmdyodn\",\"\":{}},{\"dataFlowName\":\"tjc\",\"computeType\":\"hlt\",\"coreCount\":841084025,\"nodeCount\":1925543989,\"integrationRuntimeName\":\"avvwxqi\",\"sessionId\":\"qunyowxwlmdjr\",\"startTime\":\"fgbvfvpdbo\",\"timeToLiveInMinutes\":2095776205,\"lastActivityTime\":\"zsjqlh\",\"\":{}}],\"nextLink\":\"bdeibqipqk\"}")
                .toObject(QueryDataFlowDebugSessionsResponse.class);
        Assertions.assertEquals("oftrmaequia", model.value().get(0).dataFlowName());
        Assertions.assertEquals("icslfaoq", model.value().get(0).computeType());
        Assertions.assertEquals(1792279483, model.value().get(0).coreCount());
        Assertions.assertEquals(580732645, model.value().get(0).nodeCount());
        Assertions.assertEquals("halns", model.value().get(0).integrationRuntimeName());
        Assertions.assertEquals("ccsphkaivwi", model.value().get(0).sessionId());
        Assertions.assertEquals("scywuggwoluhc", model.value().get(0).startTime());
        Assertions.assertEquals(600880906, model.value().get(0).timeToLiveInMinutes());
        Assertions.assertEquals("mhairsbrgzdwmsw", model.value().get(0).lastActivityTime());
        Assertions.assertEquals("bdeibqipqk", model.nextLink());
    }

    @Test
    public void testSerialize() {
        QueryDataFlowDebugSessionsResponse model =
            new QueryDataFlowDebugSessionsResponse()
                .withValue(
                    Arrays
                        .asList(
                            new DataFlowDebugSessionInfoInner()
                                .withDataFlowName("oftrmaequia")
                                .withComputeType("icslfaoq")
                                .withCoreCount(1792279483)
                                .withNodeCount(580732645)
                                .withIntegrationRuntimeName("halns")
                                .withSessionId("ccsphkaivwi")
                                .withStartTime("scywuggwoluhc")
                                .withTimeToLiveInMinutes(600880906)
                                .withLastActivityTime("mhairsbrgzdwmsw")
                                .withAdditionalProperties(mapOf()),
                            new DataFlowDebugSessionInfoInner()
                                .withDataFlowName("w")
                                .withComputeType("ggicccnxqhue")
                                .withCoreCount(721394724)
                                .withNodeCount(735026566)
                                .withIntegrationRuntimeName("stvlzywemhzrnc")
                                .withSessionId("tclusiypbsfgy")
                                .withStartTime("uslfead")
                                .withTimeToLiveInMinutes(358703588)
                                .withLastActivityTime("ukyhejhzis")
                                .withAdditionalProperties(mapOf()),
                            new DataFlowDebugSessionInfoInner()
                                .withDataFlowName("elolppvksrpqvuj")
                                .withComputeType("aehtwd")
                                .withCoreCount(1778813982)
                                .withNodeCount(1438579727)
                                .withIntegrationRuntimeName("iby")
                                .withSessionId("dl")
                                .withStartTime("shfwpracstwity")
                                .withTimeToLiveInMinutes(56359046)
                                .withLastActivityTime("xccedcpnmdyodn")
                                .withAdditionalProperties(mapOf()),
                            new DataFlowDebugSessionInfoInner()
                                .withDataFlowName("tjc")
                                .withComputeType("hlt")
                                .withCoreCount(841084025)
                                .withNodeCount(1925543989)
                                .withIntegrationRuntimeName("avvwxqi")
                                .withSessionId("qunyowxwlmdjr")
                                .withStartTime("fgbvfvpdbo")
                                .withTimeToLiveInMinutes(2095776205)
                                .withLastActivityTime("zsjqlh")
                                .withAdditionalProperties(mapOf())))
                .withNextLink("bdeibqipqk");
        model = BinaryData.fromObject(model).toObject(QueryDataFlowDebugSessionsResponse.class);
        Assertions.assertEquals("oftrmaequia", model.value().get(0).dataFlowName());
        Assertions.assertEquals("icslfaoq", model.value().get(0).computeType());
        Assertions.assertEquals(1792279483, model.value().get(0).coreCount());
        Assertions.assertEquals(580732645, model.value().get(0).nodeCount());
        Assertions.assertEquals("halns", model.value().get(0).integrationRuntimeName());
        Assertions.assertEquals("ccsphkaivwi", model.value().get(0).sessionId());
        Assertions.assertEquals("scywuggwoluhc", model.value().get(0).startTime());
        Assertions.assertEquals(600880906, model.value().get(0).timeToLiveInMinutes());
        Assertions.assertEquals("mhairsbrgzdwmsw", model.value().get(0).lastActivityTime());
        Assertions.assertEquals("bdeibqipqk", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
