// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.HttpAuthenticationType;
import com.azure.resourcemanager.datafactory.models.HttpLinkedService;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class HttpLinkedServiceTests {
    @Test
    public void testDeserialize() {
        HttpLinkedService model =
            BinaryData
                .fromString(
                    "{\"type\":\"HttpServer\",\"typeProperties\":{\"authenticationType\":\"Anonymous\",\"password\":{\"type\":\"SecretBase\"}},\"connectVia\":{\"referenceName\":\"yckzex\",\"parameters\":{}},\"description\":\"ckywymxga\",\"parameters\":{\"tfohf\":{\"type\":\"Array\"},\"zvkiwrsiwdy\":{\"type\":\"Array\"}},\"annotations\":[],\"\":{}}")
                .toObject(HttpLinkedService.class);
        Assertions.assertEquals("yckzex", model.connectVia().referenceName());
        Assertions.assertEquals("ckywymxga", model.description());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("tfohf").type());
        Assertions.assertEquals(HttpAuthenticationType.ANONYMOUS, model.authenticationType());
    }

    @Test
    public void testSerialize() {
        HttpLinkedService model =
            new HttpLinkedService()
                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("yckzex").withParameters(mapOf()))
                .withDescription("ckywymxga")
                .withParameters(
                    mapOf(
                        "tfohf",
                        new ParameterSpecification().withType(ParameterType.ARRAY),
                        "zvkiwrsiwdy",
                        new ParameterSpecification().withType(ParameterType.ARRAY)))
                .withAnnotations(Arrays.asList())
                .withAuthenticationType(HttpAuthenticationType.ANONYMOUS)
                .withPassword(new SecretBase());
        model = BinaryData.fromObject(model).toObject(HttpLinkedService.class);
        Assertions.assertEquals("yckzex", model.connectVia().referenceName());
        Assertions.assertEquals("ckywymxga", model.description());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("tfohf").type());
        Assertions.assertEquals(HttpAuthenticationType.ANONYMOUS, model.authenticationType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
