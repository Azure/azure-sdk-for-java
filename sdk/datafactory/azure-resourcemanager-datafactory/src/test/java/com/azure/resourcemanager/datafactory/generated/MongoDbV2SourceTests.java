// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.MongoDbCursorMethodsProperties;
import com.azure.resourcemanager.datafactory.models.MongoDbV2Source;
import java.util.HashMap;
import java.util.Map;

public final class MongoDbV2SourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbV2Source model = BinaryData.fromString(
            "{\"type\":\"MongoDbV2Source\",\"filter\":\"datadexnicq\",\"cursorMethods\":{\"project\":\"dataqttfqgdoowgqooip\",\"sort\":\"datasvsnedhkj\",\"skip\":\"datafvetwfreqvfl\",\"limit\":\"datatjuuikqzdcwqal\",\"\":{\"olkw\":\"dataiytpjisci\",\"lnodrfc\":\"datapvlsljutawg\",\"yxduxhopy\":\"dataehlopipvpeaeyj\",\"embvfa\":\"datavcbm\"}},\"batchSize\":\"dataxjoa\",\"queryTimeout\":\"dataxmumfbkaxzrycvac\",\"additionalColumns\":\"datazjysyphxeoqm\",\"sourceRetryCount\":\"datahikcei\",\"sourceRetryWait\":\"datavosb\",\"maxConcurrentConnections\":\"datawrbqooxvprq\",\"disableMetricsCollection\":\"dataqh\",\"\":{\"kif\":\"datapqrtnkngjnhxufoc\",\"tped\":\"dataj\",\"qqoz\":\"datahfpfsesiywcrejtp\",\"mfjktd\":\"dataesbpqw\"}}")
            .toObject(MongoDbV2Source.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbV2Source model = new MongoDbV2Source().withSourceRetryCount("datahikcei")
            .withSourceRetryWait("datavosb")
            .withMaxConcurrentConnections("datawrbqooxvprq")
            .withDisableMetricsCollection("dataqh")
            .withFilter("datadexnicq")
            .withCursorMethods(new MongoDbCursorMethodsProperties().withProject("dataqttfqgdoowgqooip")
                .withSort("datasvsnedhkj")
                .withSkip("datafvetwfreqvfl")
                .withLimit("datatjuuikqzdcwqal")
                .withAdditionalProperties(mapOf()))
            .withBatchSize("dataxjoa")
            .withQueryTimeout("dataxmumfbkaxzrycvac")
            .withAdditionalColumns("datazjysyphxeoqm");
        model = BinaryData.fromObject(model).toObject(MongoDbV2Source.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
