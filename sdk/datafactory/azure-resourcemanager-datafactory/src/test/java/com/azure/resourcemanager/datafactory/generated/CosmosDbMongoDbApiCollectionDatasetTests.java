// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CosmosDbMongoDbApiCollectionDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CosmosDbMongoDbApiCollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CosmosDbMongoDbApiCollectionDataset model = BinaryData.fromString(
            "{\"type\":\"wfsaa\",\"typeProperties\":{\"collection\":\"dataxcmmhipbvskcitly\"},\"description\":\"fgb\",\"structure\":\"datavm\",\"schema\":\"datad\",\"linkedServiceName\":{\"referenceName\":\"liuajklnacgdnx\",\"parameters\":{\"jaojpzngdrzige\":\"datanmzr\",\"dkhwqdmohhe\":\"datawsadsqyu\",\"yevyigdeipnfizej\":\"datayuunx\",\"acndjzwhaj\":\"datali\"}},\"parameters\":{\"hdyncradxs\":{\"type\":\"String\",\"defaultValue\":\"datao\"},\"pfapmqnmelyk\":{\"type\":\"Object\",\"defaultValue\":\"datae\"},\"n\":{\"type\":\"SecureString\",\"defaultValue\":\"dataihiclmsln\"}},\"annotations\":[\"datazlbbbajdexquaw\"],\"folder\":{\"name\":\"zbf\"},\"\":{\"vvxn\":\"datajizwhpnbmajvvyx\",\"ybfmlngfwhrmvl\":\"datakzixbk\",\"nrzblxna\":\"dataknujmw\",\"kovohwvpr\":\"datahsmfndcbsyhludzj\"}}")
            .toObject(CosmosDbMongoDbApiCollectionDataset.class);
        Assertions.assertEquals("fgb", model.description());
        Assertions.assertEquals("liuajklnacgdnx", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("hdyncradxs").type());
        Assertions.assertEquals("zbf", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CosmosDbMongoDbApiCollectionDataset model = new CosmosDbMongoDbApiCollectionDataset().withDescription("fgb")
            .withStructure("datavm")
            .withSchema("datad")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("liuajklnacgdnx")
                .withParameters(mapOf("jaojpzngdrzige", "datanmzr", "dkhwqdmohhe", "datawsadsqyu", "yevyigdeipnfizej",
                    "datayuunx", "acndjzwhaj", "datali")))
            .withParameters(mapOf("hdyncradxs",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datao"), "pfapmqnmelyk",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datae"), "n",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("dataihiclmsln")))
            .withAnnotations(Arrays.asList("datazlbbbajdexquaw"))
            .withFolder(new DatasetFolder().withName("zbf"))
            .withCollection("dataxcmmhipbvskcitly");
        model = BinaryData.fromObject(model).toObject(CosmosDbMongoDbApiCollectionDataset.class);
        Assertions.assertEquals("fgb", model.description());
        Assertions.assertEquals("liuajklnacgdnx", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("hdyncradxs").type());
        Assertions.assertEquals("zbf", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
