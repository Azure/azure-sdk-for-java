// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CosmosDbMongoDbApiCollectionDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CosmosDbMongoDbApiCollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CosmosDbMongoDbApiCollectionDataset model = BinaryData.fromString(
            "{\"type\":\"CosmosDbMongoDbApiCollection\",\"typeProperties\":{\"collection\":\"datazxjziuu\"},\"description\":\"lnewnuwkkfz\",\"structure\":\"datatlvhdyxzl\",\"schema\":\"dataywj\",\"linkedServiceName\":{\"referenceName\":\"rlgqp\",\"parameters\":{\"xeba\":\"datazpddarcbcdwhs\",\"oprwkampyh\":\"dataadknmstb\",\"iudrcycmwhuzym\":\"datapbldz\"}},\"parameters\":{\"dcp\":{\"type\":\"Int\",\"defaultValue\":\"dataqknlvkmnbzkopaii\"},\"drobujnjgy\":{\"type\":\"Bool\",\"defaultValue\":\"datahquxsyjofpgv\"},\"gid\":{\"type\":\"Object\",\"defaultValue\":\"datamqx\"},\"kgrhnytslgsazuqz\":{\"type\":\"Array\",\"defaultValue\":\"datanjgcp\"}},\"annotations\":[\"dataxhkyqzjsdkpv\",\"datarvzw\"],\"folder\":{\"name\":\"xsfybntmveho\"},\"\":{\"dybnairvhpqsvb\":\"datayuvbgtzqzqweu\",\"trcnqnvnc\":\"dataeoge\",\"vjnkoiz\":\"datarfcs\",\"mvwrmjxyvuodnx\":\"datazsqbibaaugicovj\"}}")
            .toObject(CosmosDbMongoDbApiCollectionDataset.class);
        Assertions.assertEquals("lnewnuwkkfz", model.description());
        Assertions.assertEquals("rlgqp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("dcp").type());
        Assertions.assertEquals("xsfybntmveho", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CosmosDbMongoDbApiCollectionDataset model
            = new CosmosDbMongoDbApiCollectionDataset().withDescription("lnewnuwkkfz")
                .withStructure("datatlvhdyxzl")
                .withSchema("dataywj")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("rlgqp")
                    .withParameters(mapOf("xeba", "datazpddarcbcdwhs", "oprwkampyh", "dataadknmstb", "iudrcycmwhuzym",
                        "datapbldz")))
                .withParameters(
                    mapOf("dcp",
                        new ParameterSpecification().withType(ParameterType.INT)
                            .withDefaultValue("dataqknlvkmnbzkopaii"),
                        "drobujnjgy",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datahquxsyjofpgv"),
                        "gid", new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datamqx"),
                        "kgrhnytslgsazuqz",
                        new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datanjgcp")))
                .withAnnotations(Arrays.asList("dataxhkyqzjsdkpv", "datarvzw"))
                .withFolder(new DatasetFolder().withName("xsfybntmveho"))
                .withCollection("datazxjziuu");
        model = BinaryData.fromObject(model).toObject(CosmosDbMongoDbApiCollectionDataset.class);
        Assertions.assertEquals("lnewnuwkkfz", model.description());
        Assertions.assertEquals("rlgqp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("dcp").type());
        Assertions.assertEquals("xsfybntmveho", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
