// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.FileShareDatasetTypeProperties;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import java.util.HashMap;
import java.util.Map;

public final class FileShareDatasetTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FileShareDatasetTypeProperties model = BinaryData.fromString(
            "{\"folderPath\":\"dataequ\",\"fileName\":\"datazyyopoaytwwgwqub\",\"modifiedDatetimeStart\":\"databvufrkwjiemimdtn\",\"modifiedDatetimeEnd\":\"datawew\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"datareeedddrftfquul\",\"deserializer\":\"datalhs\",\"\":{\"b\":\"dataeeu\",\"e\":\"datanqyxfedq\",\"nxoqgv\":\"datadqw\"}},\"fileFilter\":\"datapgg\",\"compression\":{\"type\":\"datameyobqajejirvavr\",\"level\":\"datagpogpl\",\"\":{\"rnjhinaeges\":\"datavlnhx\",\"pl\":\"dataxnepqmjm\",\"ovadkrmjx\":\"datakfykkfh\",\"jqbzkqmxv\":\"datawqpdke\"}}}")
            .toObject(FileShareDatasetTypeProperties.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FileShareDatasetTypeProperties model = new FileShareDatasetTypeProperties().withFolderPath("dataequ")
            .withFileName("datazyyopoaytwwgwqub")
            .withModifiedDatetimeStart("databvufrkwjiemimdtn")
            .withModifiedDatetimeEnd("datawew")
            .withFormat(new DatasetStorageFormat().withSerializer("datareeedddrftfquul")
                .withDeserializer("datalhs")
                .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
            .withFileFilter("datapgg")
            .withCompression(new DatasetCompression().withType("datameyobqajejirvavr")
                .withLevel("datagpogpl")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(FileShareDatasetTypeProperties.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
