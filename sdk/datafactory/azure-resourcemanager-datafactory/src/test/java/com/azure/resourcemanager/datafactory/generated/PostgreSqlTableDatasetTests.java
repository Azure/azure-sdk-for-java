// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PostgreSqlTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PostgreSqlTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PostgreSqlTableDataset model = BinaryData.fromString(
            "{\"type\":\"PostgreSqlTable\",\"typeProperties\":{\"tableName\":\"datansastl\",\"table\":\"datamgomicttrvlv\",\"schema\":\"datamxokxxamqecjrzvl\"},\"description\":\"vqxdemklphx\",\"structure\":\"datawlojkbgnfbrzj\",\"schema\":\"datasunhaevlah\",\"linkedServiceName\":{\"referenceName\":\"czywywuahwc\",\"parameters\":{\"jfdaj\":\"datawcnnaax\",\"omggew\":\"datafgi\",\"yznvussu\":\"dataqbxex\",\"xayzqbyeyw\":\"datakslws\"}},\"parameters\":{\"dzt\":{\"type\":\"String\",\"defaultValue\":\"datartlikff\"},\"dteqjmyqxuhg\":{\"type\":\"String\",\"defaultValue\":\"datafbgynzfwv\"},\"wrrlccklyf\":{\"type\":\"Array\",\"defaultValue\":\"datanyprijyoxxjxbs\"},\"apvibzi\":{\"type\":\"Array\",\"defaultValue\":\"dataspauemqomxoalknu\"}},\"annotations\":[\"dataichca\"],\"folder\":{\"name\":\"hjxnrkbnvfccklz\"},\"\":{\"pksywicklktgkdp\":\"datafgvlxyxmncti\",\"efuhb\":\"datatqjytdc\"}}")
            .toObject(PostgreSqlTableDataset.class);
        Assertions.assertEquals("vqxdemklphx", model.description());
        Assertions.assertEquals("czywywuahwc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("dzt").type());
        Assertions.assertEquals("hjxnrkbnvfccklz", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PostgreSqlTableDataset model = new PostgreSqlTableDataset().withDescription("vqxdemklphx")
            .withStructure("datawlojkbgnfbrzj")
            .withSchema("datasunhaevlah")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("czywywuahwc")
                .withParameters(mapOf("jfdaj", "datawcnnaax", "omggew", "datafgi", "yznvussu", "dataqbxex",
                    "xayzqbyeyw", "datakslws")))
            .withParameters(mapOf("dzt",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datartlikff"),
                "dteqjmyqxuhg",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datafbgynzfwv"),
                "wrrlccklyf",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datanyprijyoxxjxbs"),
                "apvibzi",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataspauemqomxoalknu")))
            .withAnnotations(Arrays.asList("dataichca"))
            .withFolder(new DatasetFolder().withName("hjxnrkbnvfccklz"))
            .withTableName("datansastl")
            .withTable("datamgomicttrvlv")
            .withSchemaTypePropertiesSchema("datamxokxxamqecjrzvl");
        model = BinaryData.fromObject(model).toObject(PostgreSqlTableDataset.class);
        Assertions.assertEquals("vqxdemklphx", model.description());
        Assertions.assertEquals("czywywuahwc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("dzt").type());
        Assertions.assertEquals("hjxnrkbnvfccklz", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
