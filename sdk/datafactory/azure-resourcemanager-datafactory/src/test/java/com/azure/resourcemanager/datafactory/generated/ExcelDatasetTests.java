// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import com.azure.resourcemanager.datafactory.models.ExcelDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExcelDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExcelDataset model = BinaryData.fromString(
            "{\"type\":\"Excel\",\"typeProperties\":{\"location\":{\"type\":\"DatasetLocation\",\"folderPath\":\"dataybydhui\",\"fileName\":\"dataouwudhuaorh\",\"\":{\"amqprlo\":\"datahwvumosqir\",\"zcmtagelajdyolj\":\"datarugejcvjkjy\",\"qfmzsizzhravrc\":\"dataqy\"}},\"sheetName\":\"datajymgqbgcxhn\",\"sheetIndex\":\"datagzxlermkmerghski\",\"range\":\"datanpupkcbkfuk\",\"firstRowAsHeader\":\"datajqnvtsdyd\",\"compression\":{\"type\":\"datakpafyaloowwziz\",\"level\":\"datayuf\",\"\":{\"kqiyvnd\":\"datastifgufyjf\",\"symzqhrqpf\":\"dataokgw\",\"tznxlu\":\"datalpe\"}},\"nullValue\":\"dataujqbbgsimwejl\"},\"description\":\"kbpjzobdwbcpra\",\"structure\":\"datakuhydtnaczkfwfat\",\"schema\":\"datawphn\",\"linkedServiceName\":{\"referenceName\":\"kivdwgtqcume\",\"parameters\":{\"iuycsbskowk\":\"dataaqgoqb\",\"rb\":\"databhz\",\"asfgqgucyhfaimqv\":\"datahtmqowi\",\"oehgfmqmskkixvlz\":\"dataruozkgyfp\"}},\"parameters\":{\"vzjyielb\":{\"type\":\"String\",\"defaultValue\":\"datapevasyn\"},\"nmpecqxgiqasifub\":{\"type\":\"Int\",\"defaultValue\":\"datavbqv\"},\"nxjkhtupsvyouw\":{\"type\":\"Int\",\"defaultValue\":\"datastlpwqp\"}},\"annotations\":[\"datayxfwkztsmsfb\",\"datavy\",\"datalznfhkqytkztado\",\"datagfzdgjfcycrsvl\"],\"folder\":{\"name\":\"h\"},\"\":{\"wqajquzxpixhy\":\"datakzju\",\"soscien\":\"dataipnfdb\",\"rtek\":\"datazfvbennmfkbpj\"}}")
            .toObject(ExcelDataset.class);
        Assertions.assertEquals("kbpjzobdwbcpra", model.description());
        Assertions.assertEquals("kivdwgtqcume", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("vzjyielb").type());
        Assertions.assertEquals("h", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExcelDataset model = new ExcelDataset().withDescription("kbpjzobdwbcpra")
            .withStructure("datakuhydtnaczkfwfat")
            .withSchema("datawphn")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("kivdwgtqcume")
                .withParameters(mapOf("iuycsbskowk", "dataaqgoqb", "rb", "databhz", "asfgqgucyhfaimqv", "datahtmqowi",
                    "oehgfmqmskkixvlz", "dataruozkgyfp")))
            .withParameters(mapOf("vzjyielb",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datapevasyn"),
                "nmpecqxgiqasifub",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datavbqv"), "nxjkhtupsvyouw",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datastlpwqp")))
            .withAnnotations(Arrays.asList("datayxfwkztsmsfb", "datavy", "datalznfhkqytkztado", "datagfzdgjfcycrsvl"))
            .withFolder(new DatasetFolder().withName("h"))
            .withLocation(new DatasetLocation().withFolderPath("dataybydhui")
                .withFileName("dataouwudhuaorh")
                .withAdditionalProperties(mapOf("type", "DatasetLocation")))
            .withSheetName("datajymgqbgcxhn")
            .withSheetIndex("datagzxlermkmerghski")
            .withRange("datanpupkcbkfuk")
            .withFirstRowAsHeader("datajqnvtsdyd")
            .withCompression(new DatasetCompression().withType("datakpafyaloowwziz")
                .withLevel("datayuf")
                .withAdditionalProperties(mapOf()))
            .withNullValue("dataujqbbgsimwejl");
        model = BinaryData.fromObject(model).toObject(ExcelDataset.class);
        Assertions.assertEquals("kbpjzobdwbcpra", model.description());
        Assertions.assertEquals("kivdwgtqcume", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("vzjyielb").type());
        Assertions.assertEquals("h", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
