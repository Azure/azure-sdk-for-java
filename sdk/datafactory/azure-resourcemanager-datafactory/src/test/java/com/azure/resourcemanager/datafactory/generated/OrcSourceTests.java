// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.OrcSource;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import java.util.HashMap;
import java.util.Map;

public final class OrcSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrcSource model =
            BinaryData
                .fromString(
                    "{\"type\":\"OrcSource\",\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"datareiwdskie\",\"disableMetricsCollection\":\"dataaenalepta\",\"\":{\"aodbhgxbadbo\":\"dataol\"}},\"additionalColumns\":\"datakmihggv\",\"sourceRetryCount\":\"dataqwyxbatr\",\"sourceRetryWait\":\"dataynlslgxif\",\"maxConcurrentConnections\":\"datasclqwk\",\"disableMetricsCollection\":\"datage\",\"\":{\"ueq\":\"dataambzfxgshaq\"}}")
                .toObject(OrcSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrcSource model =
            new OrcSource()
                .withSourceRetryCount("dataqwyxbatr")
                .withSourceRetryWait("dataynlslgxif")
                .withMaxConcurrentConnections("datasclqwk")
                .withDisableMetricsCollection("datage")
                .withStoreSettings(
                    new StoreReadSettings()
                        .withMaxConcurrentConnections("datareiwdskie")
                        .withDisableMetricsCollection("dataaenalepta")
                        .withAdditionalProperties(mapOf("type", "StoreReadSettings")))
                .withAdditionalColumns("datakmihggv");
        model = BinaryData.fromObject(model).toObject(OrcSource.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
