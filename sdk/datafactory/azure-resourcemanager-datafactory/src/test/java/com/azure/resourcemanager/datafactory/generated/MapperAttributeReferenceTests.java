// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.MapperAttributeReference;
import com.azure.resourcemanager.datafactory.models.MapperConnectionReference;
import org.junit.jupiter.api.Assertions;

public final class MapperAttributeReferenceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MapperAttributeReference model = BinaryData.fromString(
            "{\"name\":\"jj\",\"entity\":\"wbeqrkuor\",\"entityConnectionReference\":{\"connectionName\":\"sruqnmdvha\",\"type\":\"linkedservicetype\"}}")
            .toObject(MapperAttributeReference.class);
        Assertions.assertEquals("jj", model.name());
        Assertions.assertEquals("wbeqrkuor", model.entity());
        Assertions.assertEquals("sruqnmdvha", model.entityConnectionReference().connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE, model.entityConnectionReference().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MapperAttributeReference model = new MapperAttributeReference().withName("jj")
            .withEntity("wbeqrkuor")
            .withEntityConnectionReference(new MapperConnectionReference().withConnectionName("sruqnmdvha")
                .withType(ConnectionType.LINKEDSERVICETYPE));
        model = BinaryData.fromObject(model).toObject(MapperAttributeReference.class);
        Assertions.assertEquals("jj", model.name());
        Assertions.assertEquals("wbeqrkuor", model.entity());
        Assertions.assertEquals("sruqnmdvha", model.entityConnectionReference().connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE, model.entityConnectionReference().type());
    }
}
