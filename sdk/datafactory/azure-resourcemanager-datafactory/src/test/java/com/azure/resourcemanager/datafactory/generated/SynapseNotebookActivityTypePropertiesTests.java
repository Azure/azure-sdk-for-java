// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.SynapseNotebookActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.BigDataPoolParametrizationReference;
import com.azure.resourcemanager.datafactory.models.BigDataPoolReferenceType;
import com.azure.resourcemanager.datafactory.models.ConfigurationType;
import com.azure.resourcemanager.datafactory.models.NotebookParameter;
import com.azure.resourcemanager.datafactory.models.NotebookParameterType;
import com.azure.resourcemanager.datafactory.models.NotebookReferenceType;
import com.azure.resourcemanager.datafactory.models.SparkConfigurationParametrizationReference;
import com.azure.resourcemanager.datafactory.models.SparkConfigurationReferenceType;
import com.azure.resourcemanager.datafactory.models.SynapseNotebookReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SynapseNotebookActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SynapseNotebookActivityTypeProperties model = BinaryData.fromString(
            "{\"notebook\":{\"type\":\"NotebookReference\",\"referenceName\":\"datalwvvho\"},\"sparkPool\":{\"type\":\"BigDataPoolReference\",\"referenceName\":\"datad\"},\"parameters\":{\"ejzd\":{\"value\":\"datab\",\"type\":\"float\"},\"gzkfjq\":{\"value\":\"datackijv\",\"type\":\"int\"}},\"executorSize\":\"databpjlr\",\"conf\":\"dataryjxj\",\"driverSize\":\"datagi\",\"numExecutors\":\"datajalccixwtwzg\",\"configurationType\":\"Default\",\"targetSparkConfiguration\":{\"type\":\"SparkConfigurationReference\",\"referenceName\":\"datawqr\"},\"sparkConfig\":{\"mfufs\":\"dataznz\",\"uwxehozazb\":\"datavsjiojvetlcqaa\",\"imyccdog\":\"datacbdkqrywv\",\"kakdjnszj\":\"datahwhvgo\"}}")
            .toObject(SynapseNotebookActivityTypeProperties.class);
        Assertions.assertEquals(NotebookReferenceType.NOTEBOOK_REFERENCE, model.notebook().type());
        Assertions.assertEquals(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE, model.sparkPool().type());
        Assertions.assertEquals(NotebookParameterType.FLOAT, model.parameters().get("ejzd").type());
        Assertions.assertEquals(ConfigurationType.DEFAULT, model.configurationType());
        Assertions.assertEquals(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE,
            model.targetSparkConfiguration().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SynapseNotebookActivityTypeProperties model = new SynapseNotebookActivityTypeProperties()
            .withNotebook(new SynapseNotebookReference().withType(NotebookReferenceType.NOTEBOOK_REFERENCE)
                .withReferenceName("datalwvvho"))
            .withSparkPool(new BigDataPoolParametrizationReference()
                .withType(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE).withReferenceName("datad"))
            .withParameters(
                mapOf("ejzd", new NotebookParameter().withValue("datab").withType(NotebookParameterType.FLOAT),
                    "gzkfjq", new NotebookParameter().withValue("datackijv").withType(NotebookParameterType.INT)))
            .withExecutorSize("databpjlr").withConf("dataryjxj").withDriverSize("datagi")
            .withNumExecutors("datajalccixwtwzg").withConfigurationType(ConfigurationType.DEFAULT)
            .withTargetSparkConfiguration(new SparkConfigurationParametrizationReference()
                .withType(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE).withReferenceName("datawqr"))
            .withSparkConfig(mapOf("mfufs", "dataznz", "uwxehozazb", "datavsjiojvetlcqaa", "imyccdog", "datacbdkqrywv",
                "kakdjnszj", "datahwhvgo"));
        model = BinaryData.fromObject(model).toObject(SynapseNotebookActivityTypeProperties.class);
        Assertions.assertEquals(NotebookReferenceType.NOTEBOOK_REFERENCE, model.notebook().type());
        Assertions.assertEquals(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE, model.sparkPool().type());
        Assertions.assertEquals(NotebookParameterType.FLOAT, model.parameters().get("ejzd").type());
        Assertions.assertEquals(ConfigurationType.DEFAULT, model.configurationType());
        Assertions.assertEquals(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE,
            model.targetSparkConfiguration().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
