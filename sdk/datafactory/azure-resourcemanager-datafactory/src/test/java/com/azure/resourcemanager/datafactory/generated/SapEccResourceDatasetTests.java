// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapEccResourceDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapEccResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapEccResourceDataset model = BinaryData.fromString(
            "{\"type\":\"SapEccResource\",\"typeProperties\":{\"path\":\"datawtoi\"},\"description\":\"bxitrapwzhlutj\",\"structure\":\"datazelsr\",\"schema\":\"datamvupm\",\"linkedServiceName\":{\"referenceName\":\"akosysycvldee\",\"parameters\":{\"egbvbbd\":\"datasaipusuof\",\"f\":\"dataedfflzvsluazz\",\"ee\":\"dataveugpx\",\"scboxra\":\"datapup\"}},\"parameters\":{\"fdr\":{\"type\":\"Float\",\"defaultValue\":\"datarjgobekxeheowsec\"},\"seesacuicnvq\":{\"type\":\"Int\",\"defaultValue\":\"dataskiwrjsbdb\"},\"vmrfaptndrmmn\":{\"type\":\"Array\",\"defaultValue\":\"datau\"}},\"annotations\":[\"datak\",\"dataxrqkekcdavi\",\"dataebeqrfza\",\"dataqymcwt\"],\"folder\":{\"name\":\"ceplbrzgkuorwpq\"},\"\":{\"ykk\":\"dataweobptscr\",\"sbnlyoifgdfzjqth\":\"dataelayynoyjyfls\",\"kxxlwwo\":\"datakcvoevcwfzo\",\"ubdmg\":\"dataxgbsdzcgcvypj\"}}")
            .toObject(SapEccResourceDataset.class);
        Assertions.assertEquals("bxitrapwzhlutj", model.description());
        Assertions.assertEquals("akosysycvldee", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("fdr").type());
        Assertions.assertEquals("ceplbrzgkuorwpq", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapEccResourceDataset model = new SapEccResourceDataset().withDescription("bxitrapwzhlutj")
            .withStructure("datazelsr")
            .withSchema("datamvupm")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("akosysycvldee")
                .withParameters(mapOf("egbvbbd", "datasaipusuof", "f", "dataedfflzvsluazz", "ee", "dataveugpx",
                    "scboxra", "datapup")))
            .withParameters(mapOf("fdr",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datarjgobekxeheowsec"),
                "seesacuicnvq",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataskiwrjsbdb"),
                "vmrfaptndrmmn", new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datau")))
            .withAnnotations(Arrays.asList("datak", "dataxrqkekcdavi", "dataebeqrfza", "dataqymcwt"))
            .withFolder(new DatasetFolder().withName("ceplbrzgkuorwpq"))
            .withPath("datawtoi");
        model = BinaryData.fromObject(model).toObject(SapEccResourceDataset.class);
        Assertions.assertEquals("bxitrapwzhlutj", model.description());
        Assertions.assertEquals("akosysycvldee", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("fdr").type());
        Assertions.assertEquals("ceplbrzgkuorwpq", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
