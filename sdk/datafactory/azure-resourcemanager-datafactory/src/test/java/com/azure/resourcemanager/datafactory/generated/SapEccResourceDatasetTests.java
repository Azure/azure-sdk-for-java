// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapEccResourceDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapEccResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapEccResourceDataset model = BinaryData.fromString(
            "{\"type\":\"tbuvedwuuqbmen\",\"typeProperties\":{\"path\":\"datatabvbbkflewgsl\"},\"description\":\"q\",\"structure\":\"datawclykcr\",\"schema\":\"dataekkbnj\",\"linkedServiceName\":{\"referenceName\":\"evmp\",\"parameters\":{\"gpkkhpj\":\"dataeuenthshnfiyg\",\"nmtrd\":\"dataglaqlmi\",\"wgecpvfpnrzikvo\":\"datapxi\"}},\"parameters\":{\"hpxukxgoyxon\":{\"type\":\"Float\",\"defaultValue\":\"datahyfivxdifbwbli\"},\"uqr\":{\"type\":\"String\",\"defaultValue\":\"datadqrxro\"},\"tktwjrppifey\":{\"type\":\"SecureString\",\"defaultValue\":\"dataxfuaefewx\"},\"ojklwjpzw\":{\"type\":\"String\",\"defaultValue\":\"dataelrmdcizhvks\"}},\"annotations\":[\"datawksmpyeyzolb\"],\"folder\":{\"name\":\"lytfxudui\"},\"\":{\"wkqwo\":\"datami\",\"ng\":\"datawsnliy\",\"wrgavtfy\":\"datauqzgpdglkfv\",\"ryxpi\":\"datasedfmzu\"}}")
            .toObject(SapEccResourceDataset.class);
        Assertions.assertEquals("q", model.description());
        Assertions.assertEquals("evmp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("hpxukxgoyxon").type());
        Assertions.assertEquals("lytfxudui", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapEccResourceDataset model = new SapEccResourceDataset().withDescription("q")
            .withStructure("datawclykcr")
            .withSchema("dataekkbnj")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("evmp")
                .withParameters(
                    mapOf("gpkkhpj", "dataeuenthshnfiyg", "nmtrd", "dataglaqlmi", "wgecpvfpnrzikvo", "datapxi")))
            .withParameters(
                mapOf("hpxukxgoyxon",
                    new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datahyfivxdifbwbli"),
                    "uqr", new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datadqrxro"),
                    "tktwjrppifey",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                        .withDefaultValue("dataxfuaefewx"),
                    "ojklwjpzw",
                    new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataelrmdcizhvks")))
            .withAnnotations(Arrays.asList("datawksmpyeyzolb"))
            .withFolder(new DatasetFolder().withName("lytfxudui"))
            .withPath("datatabvbbkflewgsl");
        model = BinaryData.fromObject(model).toObject(SapEccResourceDataset.class);
        Assertions.assertEquals("q", model.description());
        Assertions.assertEquals("evmp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("hpxukxgoyxon").type());
        Assertions.assertEquals("lytfxudui", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
