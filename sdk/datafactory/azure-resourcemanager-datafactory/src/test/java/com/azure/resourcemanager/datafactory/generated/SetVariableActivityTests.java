// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.SecureInputOutputPolicy;
import com.azure.resourcemanager.datafactory.models.SetVariableActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SetVariableActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SetVariableActivity model = BinaryData.fromString(
            "{\"type\":\"SetVariable\",\"typeProperties\":{\"variableName\":\"lxlxlezzym\",\"value\":\"datazoiud\",\"setSystemVariable\":false},\"policy\":{\"secureInput\":false,\"secureOutput\":false},\"name\":\"xajiaycgxwacuudn\",\"description\":\"tsjafvzds\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"m\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"bsgzewyfh\":\"datavbnmzjwh\",\"lzqmwmwoggbxias\":\"dataz\",\"cnpfl\":\"dataiz\",\"pixuj\":\"dataedwhvhlzp\"}},{\"activity\":\"y\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Failed\",\"Failed\"],\"\":{\"bbnvctbtm\":\"datad\",\"lrvklyp\":\"dataanmpt\",\"soxykrmalen\":\"datauqyaisdiwokgv\"}},{\"activity\":\"bvahj\",\"dependencyConditions\":[\"Succeeded\",\"Completed\"],\"\":{\"jopsgedsyykueif\":\"dataebg\"}}],\"userProperties\":[{\"name\":\"ntlf\",\"value\":\"dataiq\"},{\"name\":\"vazffzhbh\",\"value\":\"datalgwlrdgp\"},{\"name\":\"dbimehdxcy\",\"value\":\"datayfhwkbhapfnyo\"}],\"\":{\"zunbcvfzc\":\"dataebehjrmfejeihnhw\",\"gudobutkq\":\"datayirngfujvxafrqq\"}}")
            .toObject(SetVariableActivity.class);
        Assertions.assertEquals("xajiaycgxwacuudn", model.name());
        Assertions.assertEquals("tsjafvzds", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("m", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ntlf", model.userProperties().get(0).name());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("lxlxlezzym", model.variableName());
        Assertions.assertEquals(false, model.setSystemVariable());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SetVariableActivity model = new SetVariableActivity().withName("xajiaycgxwacuudn")
            .withDescription("tsjafvzds")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("m")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("y")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED,
                        DependencyCondition.FAILED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("bvahj")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("ntlf").withValue("dataiq"),
                new UserProperty().withName("vazffzhbh").withValue("datalgwlrdgp"),
                new UserProperty().withName("dbimehdxcy").withValue("datayfhwkbhapfnyo")))
            .withPolicy(new SecureInputOutputPolicy().withSecureInput(false).withSecureOutput(false))
            .withVariableName("lxlxlezzym")
            .withValue("datazoiud")
            .withSetSystemVariable(false);
        model = BinaryData.fromObject(model).toObject(SetVariableActivity.class);
        Assertions.assertEquals("xajiaycgxwacuudn", model.name());
        Assertions.assertEquals("tsjafvzds", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("m", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ntlf", model.userProperties().get(0).name());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("lxlxlezzym", model.variableName());
        Assertions.assertEquals(false, model.setSystemVariable());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
