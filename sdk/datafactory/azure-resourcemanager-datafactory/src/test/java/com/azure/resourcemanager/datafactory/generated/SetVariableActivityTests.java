// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.SecureInputOutputPolicy;
import com.azure.resourcemanager.datafactory.models.SetVariableActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SetVariableActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SetVariableActivity model = BinaryData.fromString(
            "{\"type\":\"SetVariable\",\"typeProperties\":{\"variableName\":\"adjllhzl\",\"value\":\"datavr\",\"setSystemVariable\":true},\"policy\":{\"secureInput\":true,\"secureOutput\":true},\"name\":\"vomxtosdbvudo\",\"description\":\"oheebzewbif\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"dhd\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Completed\",\"Failed\"],\"\":{\"fhmuaoouu\":\"datawrhkjmp\",\"hlggobjcfb\":\"datahfdggsrzol\",\"phzdkikjyhaqkglu\":\"datagelfkhmgsphoc\"}},{\"activity\":\"myqitsar\",\"dependencyConditions\":[\"Failed\"],\"\":{\"yryy\":\"datammjwmldgrwglmmca\"}}],\"userProperties\":[{\"name\":\"venmvhbgpgvlii\",\"value\":\"dataueltcoiszqf\"},{\"name\":\"biyvowyyvsbjpy\",\"value\":\"datalzxjiruq\"},{\"name\":\"rshtwdgoqxfbsci\",\"value\":\"dataizrorupduwqovlq\"}],\"\":{\"kovubfugdgpmtzqp\":\"dataehagorbspotq\",\"vetuqi\":\"datavochmeximhmi\"}}")
            .toObject(SetVariableActivity.class);
        Assertions.assertEquals("vomxtosdbvudo", model.name());
        Assertions.assertEquals("oheebzewbif", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("dhd", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("venmvhbgpgvlii", model.userProperties().get(0).name());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("adjllhzl", model.variableName());
        Assertions.assertEquals(true, model.setSystemVariable());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SetVariableActivity model = new SetVariableActivity().withName("vomxtosdbvudo")
            .withDescription("oheebzewbif")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("dhd")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("myqitsar")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("venmvhbgpgvlii").withValue("dataueltcoiszqf"),
                    new UserProperty().withName("biyvowyyvsbjpy").withValue("datalzxjiruq"),
                    new UserProperty().withName("rshtwdgoqxfbsci").withValue("dataizrorupduwqovlq")))
            .withPolicy(new SecureInputOutputPolicy().withSecureInput(true).withSecureOutput(true))
            .withVariableName("adjllhzl")
            .withValue("datavr")
            .withSetSystemVariable(true);
        model = BinaryData.fromObject(model).toObject(SetVariableActivity.class);
        Assertions.assertEquals("vomxtosdbvudo", model.name());
        Assertions.assertEquals("oheebzewbif", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("dhd", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("venmvhbgpgvlii", model.userProperties().get(0).name());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("adjllhzl", model.variableName());
        Assertions.assertEquals(true, model.setSystemVariable());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
