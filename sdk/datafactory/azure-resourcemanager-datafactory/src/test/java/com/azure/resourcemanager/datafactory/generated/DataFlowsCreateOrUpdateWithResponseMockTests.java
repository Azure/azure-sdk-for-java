// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.DataFlow;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataFlowsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"type\":\"DataFlow\",\"description\":\"lcekonmcxriqfrrx\",\"annotations\":[\"datavrhcjhszmymfr\",\"dataosmic\",\"datakizqqdawmrk\"],\"folder\":{\"name\":\"xbbhjgnjlzdjzhx\"}},\"name\":\"bxsok\",\"type\":\"awr\",\"etag\":\"rodrtkw\",\"id\":\"gllnyohnhfu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DataFlowResource response = manager.dataFlows()
            .define("ya")
            .withExistingFactory("iixnx", "cvyi")
            .withProperties(new DataFlow().withDescription("wegijdejs")
                .withAnnotations(Arrays.asList("datacggoqmblhcba"))
                .withFolder(new DataFlowFolder().withName("waathdrbaaqt")))
            .withIfMatch("exxn")
            .create();

        Assertions.assertEquals("gllnyohnhfu", response.id());
        Assertions.assertEquals("lcekonmcxriqfrrx", response.properties().description());
        Assertions.assertEquals("xbbhjgnjlzdjzhx", response.properties().folder().name());
    }
}
