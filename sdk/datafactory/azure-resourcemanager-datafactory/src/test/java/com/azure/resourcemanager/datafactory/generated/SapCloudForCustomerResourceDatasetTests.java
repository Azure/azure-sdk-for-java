// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapCloudForCustomerResourceDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapCloudForCustomerResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapCloudForCustomerResourceDataset model = BinaryData.fromString(
            "{\"type\":\"SapCloudForCustomerResource\",\"typeProperties\":{\"path\":\"datawequfl\"},\"description\":\"yopoa\",\"structure\":\"datawwgw\",\"schema\":\"datab\",\"linkedServiceName\":{\"referenceName\":\"tbvufrkwjiemim\",\"parameters\":{\"reeedddrftfquul\":\"datapowewjs\"}},\"parameters\":{\"b\":{\"type\":\"Bool\",\"defaultValue\":\"dataiigeeu\"}},\"annotations\":[\"datayxfedqnetd\",\"datawynxoqgvbz\"],\"folder\":{\"name\":\"pw\"},\"\":{\"a\":\"dataobqajejir\"}}")
            .toObject(SapCloudForCustomerResourceDataset.class);
        Assertions.assertEquals("yopoa", model.description());
        Assertions.assertEquals("tbvufrkwjiemim", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("b").type());
        Assertions.assertEquals("pw", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapCloudForCustomerResourceDataset model = new SapCloudForCustomerResourceDataset().withDescription("yopoa")
            .withStructure("datawwgw")
            .withSchema("datab")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("tbvufrkwjiemim")
                .withParameters(mapOf("reeedddrftfquul", "datapowewjs")))
            .withParameters(
                mapOf("b", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataiigeeu")))
            .withAnnotations(Arrays.asList("datayxfedqnetd", "datawynxoqgvbz"))
            .withFolder(new DatasetFolder().withName("pw"))
            .withPath("datawequfl");
        model = BinaryData.fromObject(model).toObject(SapCloudForCustomerResourceDataset.class);
        Assertions.assertEquals("yopoa", model.description());
        Assertions.assertEquals("tbvufrkwjiemim", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("b").type());
        Assertions.assertEquals("pw", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
