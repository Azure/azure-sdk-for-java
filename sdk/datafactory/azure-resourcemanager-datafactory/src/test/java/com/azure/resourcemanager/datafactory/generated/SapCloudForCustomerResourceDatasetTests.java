// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapCloudForCustomerResourceDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapCloudForCustomerResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapCloudForCustomerResourceDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"SapCloudForCustomerResource\",\"typeProperties\":{\"path\":\"datamy\"},\"description\":\"dzyyrwnmwtqil\",\"structure\":\"datannkynkstd\",\"schema\":\"datawhjfp\",\"linkedServiceName\":{\"referenceName\":\"fxaqjyihjcwwv\",\"parameters\":{\"spwweifdyfa\":\"datackfavhkh\",\"a\":\"dataexnguwnrdpuz\"}},\"parameters\":{\"bszam\":{\"type\":\"Array\",\"defaultValue\":\"datatgg\"},\"lrnhhjtvhqsz\":{\"type\":\"SecureString\",\"defaultValue\":\"dataejpdcliqwzutiy\"}},\"annotations\":[\"dataovqmqcudptoqwr\",\"datafckjthlokmx\",\"dataawfubkngejjxu\",\"dataowynj\"],\"folder\":{\"name\":\"zmxuktdrsjtmnk\"},\"\":{\"nuhcfhepisq\":\"datauwfzcfdtstiaxty\"}}")
                .toObject(SapCloudForCustomerResourceDataset.class);
        Assertions.assertEquals("dzyyrwnmwtqil", model.description());
        Assertions.assertEquals("fxaqjyihjcwwv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("bszam").type());
        Assertions.assertEquals("zmxuktdrsjtmnk", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapCloudForCustomerResourceDataset model =
            new SapCloudForCustomerResourceDataset()
                .withDescription("dzyyrwnmwtqil")
                .withStructure("datannkynkstd")
                .withSchema("datawhjfp")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("fxaqjyihjcwwv")
                        .withParameters(mapOf("spwweifdyfa", "datackfavhkh", "a", "dataexnguwnrdpuz")))
                .withParameters(
                    mapOf(
                        "bszam",
                        new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datatgg"),
                        "lrnhhjtvhqsz",
                        new ParameterSpecification()
                            .withType(ParameterType.SECURE_STRING)
                            .withDefaultValue("dataejpdcliqwzutiy")))
                .withAnnotations(
                    Arrays.asList("dataovqmqcudptoqwr", "datafckjthlokmx", "dataawfubkngejjxu", "dataowynj"))
                .withFolder(new DatasetFolder().withName("zmxuktdrsjtmnk"))
                .withPath("datamy");
        model = BinaryData.fromObject(model).toObject(SapCloudForCustomerResourceDataset.class);
        Assertions.assertEquals("dzyyrwnmwtqil", model.description());
        Assertions.assertEquals("fxaqjyihjcwwv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("bszam").type());
        Assertions.assertEquals("zmxuktdrsjtmnk", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
