// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.DataMapperMapping;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MapperAttributeMapping;
import com.azure.resourcemanager.datafactory.models.MapperAttributeMappings;
import com.azure.resourcemanager.datafactory.models.MapperAttributeReference;
import com.azure.resourcemanager.datafactory.models.MapperConnection;
import com.azure.resourcemanager.datafactory.models.MapperConnectionReference;
import com.azure.resourcemanager.datafactory.models.MapperDslConnectorProperties;
import com.azure.resourcemanager.datafactory.models.MapperTable;
import com.azure.resourcemanager.datafactory.models.MapperTableSchema;
import com.azure.resourcemanager.datafactory.models.MapperTargetConnectionsInfo;
import com.azure.resourcemanager.datafactory.models.MappingType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MapperTargetConnectionsInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MapperTargetConnectionsInfo model = BinaryData.fromString(
            "{\"targetEntities\":[{\"name\":\"uzgfxonjtpusl\",\"properties\":{\"schema\":[{\"name\":\"tiotzb\",\"dataType\":\"bollgryfqiuasig\"}],\"dslConnectorProperties\":[{\"name\":\"ocnequygdjboqgrm\",\"value\":\"datajkqev\"},{\"name\":\"rmmwiuawvcmj\",\"value\":\"dataxiid\"},{\"name\":\"czskoswoqiqazu\",\"value\":\"datamxzkr\"},{\"name\":\"oiisbamnppcce\",\"value\":\"dataztdsbeza\"}]}},{\"name\":\"f\",\"properties\":{\"schema\":[{\"name\":\"izhyhnep\",\"dataType\":\"etiarxqiubxdukec\"},{\"name\":\"dazvdhctm\",\"dataType\":\"os\"},{\"name\":\"dblnsntrp\",\"dataType\":\"qkio\"},{\"name\":\"btfmhklbnldpvcbh\",\"dataType\":\"zyqu\"}],\"dslConnectorProperties\":[{\"name\":\"xut\",\"value\":\"databrruyuuatv\"},{\"name\":\"bjwcolbmx\",\"value\":\"datanwtpcpahprz\"}]}},{\"name\":\"xhmtfhocnxzc\",\"properties\":{\"schema\":[{\"name\":\"xnoqrxtdisn\",\"dataType\":\"vhdl\"},{\"name\":\"did\",\"dataType\":\"epfwwt\"}],\"dslConnectorProperties\":[{\"name\":\"esxxhmwcdbckyoi\",\"value\":\"datakxhnegknj\"},{\"name\":\"bhtmeplvuk\",\"value\":\"databrlbpgs\"},{\"name\":\"agnchjhgemuowaky\",\"value\":\"datalhjym\"}]}},{\"name\":\"gqtagd\",\"properties\":{\"schema\":[{\"name\":\"ol\",\"dataType\":\"mevtfycnlbvgjc\"},{\"name\":\"kk\",\"dataType\":\"iiy\"}],\"dslConnectorProperties\":[{\"name\":\"k\",\"value\":\"databcufqbvntn\"}]}}],\"connection\":{\"linkedService\":{\"referenceName\":\"qsorh\",\"parameters\":{\"pwzvmdoksqdti\":\"dataxgnlykmx\",\"cqchygtvxbyjane\":\"datalwxlboncqbazq\",\"od\":\"dataubdpkxyqvgxi\",\"kxdxuwsaifmcwn\":\"datatvo\"}},\"linkedServiceType\":\"bzlehgc\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{\"name\":\"olg\",\"value\":\"datayxpvelszerqze\"},{\"name\":\"o\",\"value\":\"dataintxwa\"},{\"name\":\"glzoblqwa\",\"value\":\"datar\"}]},\"dataMapperMappings\":[{\"targetEntityName\":\"mz\",\"sourceEntityName\":\"bhdvafjrqpjiy\",\"sourceConnectionReference\":{\"connectionName\":\"crgaxwmzwdf\",\"type\":\"linkedservicetype\"},\"attributeMappingInfo\":{\"attributeMappings\":[{\"name\":\"pdltbq\",\"type\":\"Direct\",\"functionName\":\"fg\",\"expression\":\"saetgzdgvpyig\",\"attributeReference\":{},\"attributeReferences\":[{},{}]},{\"name\":\"lzdcduwjoedxng\",\"type\":\"Aggregate\",\"functionName\":\"fpaurw\",\"expression\":\"ilfjqqacdmk\",\"attributeReference\":{},\"attributeReferences\":[{},{}]},{\"name\":\"vjw\",\"type\":\"Direct\",\"functionName\":\"akeciqchx\",\"expression\":\"uicdsiwdfmmpzhzz\",\"attributeReference\":{},\"attributeReferences\":[{},{}]}]},\"sourceDenormalizeInfo\":\"datagyngydgrpxncak\"}],\"relationships\":[\"dataondjrkclam\",\"dataglvlmfejdoqeyk\",\"dataltygxhqfgqkayej\",\"dataxtlgflwfg\"]}")
            .toObject(MapperTargetConnectionsInfo.class);
        Assertions.assertEquals("uzgfxonjtpusl", model.targetEntities().get(0).name());
        Assertions.assertEquals("tiotzb", model.targetEntities().get(0).schema().get(0).name());
        Assertions.assertEquals("bollgryfqiuasig", model.targetEntities().get(0).schema().get(0).dataType());
        Assertions.assertEquals("ocnequygdjboqgrm",
            model.targetEntities().get(0).dslConnectorProperties().get(0).name());
        Assertions.assertEquals("qsorh", model.connection().linkedService().referenceName());
        Assertions.assertEquals("bzlehgc", model.connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE, model.connection().type());
        Assertions.assertEquals(false, model.connection().isInlineDataset());
        Assertions.assertEquals("olg", model.connection().commonDslConnectorProperties().get(0).name());
        Assertions.assertEquals("mz", model.dataMapperMappings().get(0).targetEntityName());
        Assertions.assertEquals("bhdvafjrqpjiy", model.dataMapperMappings().get(0).sourceEntityName());
        Assertions.assertEquals("crgaxwmzwdf",
            model.dataMapperMappings().get(0).sourceConnectionReference().connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.dataMapperMappings().get(0).sourceConnectionReference().type());
        Assertions.assertEquals("pdltbq",
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).name());
        Assertions.assertEquals(MappingType.DIRECT,
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).type());
        Assertions.assertEquals("fg",
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).functionName());
        Assertions.assertEquals("saetgzdgvpyig",
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).expression());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MapperTargetConnectionsInfo model
            = new MapperTargetConnectionsInfo()
                .withTargetEntities(Arrays.asList(
                    new MapperTable().withName("uzgfxonjtpusl")
                        .withSchema(
                            Arrays.asList(new MapperTableSchema().withName("tiotzb").withDataType("bollgryfqiuasig")))
                        .withDslConnectorProperties(Arrays.asList(
                            new MapperDslConnectorProperties().withName("ocnequygdjboqgrm").withValue("datajkqev"),
                            new MapperDslConnectorProperties().withName("rmmwiuawvcmj").withValue("dataxiid"),
                            new MapperDslConnectorProperties().withName("czskoswoqiqazu")
                                .withValue("datamxzkr"),
                            new MapperDslConnectorProperties().withName("oiisbamnppcce").withValue("dataztdsbeza"))),
                    new MapperTable().withName("f")
                        .withSchema(
                            Arrays.asList(new MapperTableSchema().withName("izhyhnep").withDataType("etiarxqiubxdukec"),
                                new MapperTableSchema().withName("dazvdhctm").withDataType("os"),
                                new MapperTableSchema().withName("dblnsntrp").withDataType("qkio"),
                                new MapperTableSchema().withName("btfmhklbnldpvcbh").withDataType("zyqu")))
                        .withDslConnectorProperties(Arrays.asList(
                            new MapperDslConnectorProperties().withName("xut").withValue("databrruyuuatv"),
                            new MapperDslConnectorProperties().withName("bjwcolbmx").withValue("datanwtpcpahprz"))),
                    new MapperTable().withName("xhmtfhocnxzc")
                        .withSchema(Arrays.asList(new MapperTableSchema().withName("xnoqrxtdisn").withDataType("vhdl"),
                            new MapperTableSchema().withName("did").withDataType("epfwwt")))
                        .withDslConnectorProperties(Arrays.asList(
                            new MapperDslConnectorProperties().withName("esxxhmwcdbckyoi").withValue("datakxhnegknj"),
                            new MapperDslConnectorProperties().withName("bhtmeplvuk").withValue("databrlbpgs"),
                            new MapperDslConnectorProperties().withName("agnchjhgemuowaky").withValue("datalhjym"))),
                    new MapperTable().withName("gqtagd")
                        .withSchema(Arrays.asList(new MapperTableSchema().withName("ol").withDataType("mevtfycnlbvgjc"),
                            new MapperTableSchema().withName("kk").withDataType("iiy")))
                        .withDslConnectorProperties(Arrays
                            .asList(new MapperDslConnectorProperties().withName("k").withValue("databcufqbvntn")))))
                .withConnection(
                    new MapperConnection()
                        .withLinkedService(new LinkedServiceReference().withReferenceName("qsorh")
                            .withParameters(mapOf("pwzvmdoksqdti", "dataxgnlykmx", "cqchygtvxbyjane",
                                "datalwxlboncqbazq", "od", "dataubdpkxyqvgxi", "kxdxuwsaifmcwn", "datatvo")))
                        .withLinkedServiceType("bzlehgc")
                        .withType(ConnectionType.LINKEDSERVICETYPE)
                        .withIsInlineDataset(false)
                        .withCommonDslConnectorProperties(Arrays
                            .asList(new MapperDslConnectorProperties().withName("olg").withValue("datayxpvelszerqze"),
                                new MapperDslConnectorProperties().withName("o").withValue("dataintxwa"),
                                new MapperDslConnectorProperties().withName("glzoblqwa").withValue("datar"))))
                .withDataMapperMappings(
                    Arrays.asList(new DataMapperMapping().withTargetEntityName("mz")
                        .withSourceEntityName("bhdvafjrqpjiy")
                        .withSourceConnectionReference(new MapperConnectionReference().withConnectionName("crgaxwmzwdf")
                            .withType(ConnectionType.LINKEDSERVICETYPE))
                        .withAttributeMappingInfo(
                            new MapperAttributeMappings()
                                .withAttributeMappings(Arrays.asList(
                                    new MapperAttributeMapping().withName("pdltbq")
                                        .withType(MappingType.DIRECT)
                                        .withFunctionName("fg")
                                        .withExpression("saetgzdgvpyig")
                                        .withAttributeReference(new MapperAttributeReference())
                                        .withAttributeReferences(Arrays.asList(new MapperAttributeReference(),
                                            new MapperAttributeReference())),
                                    new MapperAttributeMapping().withName("lzdcduwjoedxng")
                                        .withType(MappingType.AGGREGATE)
                                        .withFunctionName("fpaurw")
                                        .withExpression("ilfjqqacdmk")
                                        .withAttributeReference(new MapperAttributeReference())
                                        .withAttributeReferences(Arrays.asList(new MapperAttributeReference(),
                                            new MapperAttributeReference())),
                                    new MapperAttributeMapping().withName("vjw")
                                        .withType(MappingType.DIRECT)
                                        .withFunctionName("akeciqchx")
                                        .withExpression("uicdsiwdfmmpzhzz")
                                        .withAttributeReference(new MapperAttributeReference())
                                        .withAttributeReferences(Arrays.asList(new MapperAttributeReference(),
                                            new MapperAttributeReference())))))
                        .withSourceDenormalizeInfo("datagyngydgrpxncak")))
                .withRelationships(
                    Arrays.asList("dataondjrkclam", "dataglvlmfejdoqeyk", "dataltygxhqfgqkayej", "dataxtlgflwfg"));
        model = BinaryData.fromObject(model).toObject(MapperTargetConnectionsInfo.class);
        Assertions.assertEquals("uzgfxonjtpusl", model.targetEntities().get(0).name());
        Assertions.assertEquals("tiotzb", model.targetEntities().get(0).schema().get(0).name());
        Assertions.assertEquals("bollgryfqiuasig", model.targetEntities().get(0).schema().get(0).dataType());
        Assertions.assertEquals("ocnequygdjboqgrm",
            model.targetEntities().get(0).dslConnectorProperties().get(0).name());
        Assertions.assertEquals("qsorh", model.connection().linkedService().referenceName());
        Assertions.assertEquals("bzlehgc", model.connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE, model.connection().type());
        Assertions.assertEquals(false, model.connection().isInlineDataset());
        Assertions.assertEquals("olg", model.connection().commonDslConnectorProperties().get(0).name());
        Assertions.assertEquals("mz", model.dataMapperMappings().get(0).targetEntityName());
        Assertions.assertEquals("bhdvafjrqpjiy", model.dataMapperMappings().get(0).sourceEntityName());
        Assertions.assertEquals("crgaxwmzwdf",
            model.dataMapperMappings().get(0).sourceConnectionReference().connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.dataMapperMappings().get(0).sourceConnectionReference().type());
        Assertions.assertEquals("pdltbq",
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).name());
        Assertions.assertEquals(MappingType.DIRECT,
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).type());
        Assertions.assertEquals("fg",
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).functionName());
        Assertions.assertEquals("saetgzdgvpyig",
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).expression());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
