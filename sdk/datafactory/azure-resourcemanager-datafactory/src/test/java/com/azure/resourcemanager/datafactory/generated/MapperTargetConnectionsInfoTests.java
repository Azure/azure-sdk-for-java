// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.DataMapperMapping;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MapperAttributeMapping;
import com.azure.resourcemanager.datafactory.models.MapperAttributeMappings;
import com.azure.resourcemanager.datafactory.models.MapperAttributeReference;
import com.azure.resourcemanager.datafactory.models.MapperConnection;
import com.azure.resourcemanager.datafactory.models.MapperConnectionReference;
import com.azure.resourcemanager.datafactory.models.MapperDslConnectorProperties;
import com.azure.resourcemanager.datafactory.models.MapperTable;
import com.azure.resourcemanager.datafactory.models.MapperTableSchema;
import com.azure.resourcemanager.datafactory.models.MapperTargetConnectionsInfo;
import com.azure.resourcemanager.datafactory.models.MappingType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MapperTargetConnectionsInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MapperTargetConnectionsInfo model = BinaryData.fromString(
            "{\"targetEntities\":[{\"name\":\"vfdjkpdxp\",\"properties\":{\"schema\":[{\"name\":\"nmgzvyfijdkzuqnw\",\"dataType\":\"thuqolyahluq\"},{\"name\":\"ulsutrjbhxy\",\"dataType\":\"hyqezvqq\"}],\"dslConnectorProperties\":[{\"name\":\"ftbcvexreuquow\",\"value\":\"datajv\"},{\"name\":\"hreagk\",\"value\":\"dataxv\"},{\"name\":\"tvbczsulm\",\"value\":\"dataglmep\"},{\"name\":\"fs\",\"value\":\"datakgsangpszng\"}]}},{\"name\":\"p\",\"properties\":{\"schema\":[{\"name\":\"ecjujcng\",\"dataType\":\"dyedmzrgjfo\"}],\"dslConnectorProperties\":[{\"name\":\"noitpkpztr\",\"value\":\"datagxvcoqrasw\"}]}},{\"name\":\"yxp\",\"properties\":{\"schema\":[{\"name\":\"ialwv\",\"dataType\":\"buhzacaq\"}],\"dslConnectorProperties\":[{\"name\":\"co\",\"value\":\"dataujpdsxzak\"},{\"name\":\"jkmvbi\",\"value\":\"datajofqcvovjufycs\"}]}}],\"connection\":{\"linkedService\":{\"referenceName\":\"bemyeji\",\"parameters\":{\"hortu\":\"dataxeg\",\"cbgqnzmnhiil\":\"dataawlpjfelqerpp\",\"ccgzpraoxnyu\":\"dataalwcjgckbb\",\"sgftipwc\":\"datafa\"}},\"linkedServiceType\":\"yubhiqdx\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{\"name\":\"hza\",\"value\":\"datacnuhiigbylbuigv\"},{\"name\":\"atvcrkdlbnbq\",\"value\":\"datah\"},{\"name\":\"yhzlwxaeaovurexd\",\"value\":\"datasbdweaderzmwnt\"}]},\"dataMapperMappings\":[{\"targetEntityName\":\"ttmvmmagoaqylkjz\",\"sourceEntityName\":\"iua\",\"sourceConnectionReference\":{\"connectionName\":\"gmxitpfi\",\"type\":\"linkedservicetype\"},\"attributeMappingInfo\":{\"attributeMappings\":[{\"name\":\"krlgjm\",\"type\":\"Aggregate\",\"functionName\":\"vcqguefzh\",\"expression\":\"p\",\"attributeReference\":{},\"attributeReferences\":[{},{},{}]},{\"name\":\"relyujlfyoum\",\"type\":\"Derived\",\"functionName\":\"eclcdigptajbrzm\",\"expression\":\"ucycijo\",\"attributeReference\":{},\"attributeReferences\":[{},{}]}]},\"sourceDenormalizeInfo\":\"datatgjcy\"},{\"targetEntityName\":\"zjd\",\"sourceEntityName\":\"qjbtxjeaoqaqbzgy\",\"sourceConnectionReference\":{\"connectionName\":\"wvua\",\"type\":\"linkedservicetype\"},\"attributeMappingInfo\":{\"attributeMappings\":[{\"name\":\"teuli\",\"type\":\"Derived\",\"functionName\":\"kcvmwfauxxepmy\",\"expression\":\"ormcqmic\",\"attributeReference\":{},\"attributeReferences\":[{},{},{},{}]},{\"name\":\"kzfbojxjmcsmyq\",\"type\":\"Aggregate\",\"functionName\":\"cp\",\"expression\":\"kwywzwofalic\",\"attributeReference\":{},\"attributeReferences\":[{},{},{}]},{\"name\":\"qtamtyvsknxrw\",\"type\":\"Aggregate\",\"functionName\":\"vsbcfhzagxnvhy\",\"expression\":\"dimwrzregzgyu\",\"attributeReference\":{},\"attributeReferences\":[{}]},{\"name\":\"pweryekzk\",\"type\":\"Direct\",\"functionName\":\"ottaw\",\"expression\":\"osxw\",\"attributeReference\":{},\"attributeReferences\":[{}]}]},\"sourceDenormalizeInfo\":\"datatfvpndpmiljpn\"}],\"relationships\":[\"dataudqll\",\"datasauzpjlx\"]}")
            .toObject(MapperTargetConnectionsInfo.class);
        Assertions.assertEquals("vfdjkpdxp", model.targetEntities().get(0).name());
        Assertions.assertEquals("nmgzvyfijdkzuqnw", model.targetEntities().get(0).schema().get(0).name());
        Assertions.assertEquals("thuqolyahluq", model.targetEntities().get(0).schema().get(0).dataType());
        Assertions.assertEquals("ftbcvexreuquow", model.targetEntities().get(0).dslConnectorProperties().get(0).name());
        Assertions.assertEquals("bemyeji", model.connection().linkedService().referenceName());
        Assertions.assertEquals("yubhiqdx", model.connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE, model.connection().type());
        Assertions.assertEquals(true, model.connection().isInlineDataset());
        Assertions.assertEquals("hza", model.connection().commonDslConnectorProperties().get(0).name());
        Assertions.assertEquals("ttmvmmagoaqylkjz", model.dataMapperMappings().get(0).targetEntityName());
        Assertions.assertEquals("iua", model.dataMapperMappings().get(0).sourceEntityName());
        Assertions.assertEquals("gmxitpfi",
            model.dataMapperMappings().get(0).sourceConnectionReference().connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.dataMapperMappings().get(0).sourceConnectionReference().type());
        Assertions.assertEquals("krlgjm",
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).name());
        Assertions.assertEquals(MappingType.AGGREGATE,
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).type());
        Assertions.assertEquals("vcqguefzh",
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).functionName());
        Assertions.assertEquals("p",
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).expression());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MapperTargetConnectionsInfo model
            = new MapperTargetConnectionsInfo()
                .withTargetEntities(Arrays.asList(
                    new MapperTable().withName("vfdjkpdxp")
                        .withSchema(Arrays.asList(
                            new MapperTableSchema().withName("nmgzvyfijdkzuqnw").withDataType("thuqolyahluq"),
                            new MapperTableSchema().withName("ulsutrjbhxy").withDataType("hyqezvqq")))
                        .withDslConnectorProperties(Arrays.asList(
                            new MapperDslConnectorProperties().withName("ftbcvexreuquow").withValue("datajv"),
                            new MapperDslConnectorProperties().withName("hreagk").withValue("dataxv"),
                            new MapperDslConnectorProperties().withName("tvbczsulm").withValue("dataglmep"),
                            new MapperDslConnectorProperties().withName("fs").withValue("datakgsangpszng"))),
                    new MapperTable().withName("p")
                        .withSchema(
                            Arrays.asList(new MapperTableSchema().withName("ecjujcng").withDataType("dyedmzrgjfo")))
                        .withDslConnectorProperties(Arrays.asList(
                            new MapperDslConnectorProperties().withName("noitpkpztr").withValue("datagxvcoqrasw"))),
                    new MapperTable().withName("yxp")
                        .withSchema(Arrays.asList(new MapperTableSchema().withName("ialwv").withDataType("buhzacaq")))
                        .withDslConnectorProperties(
                            Arrays.asList(new MapperDslConnectorProperties().withName("co").withValue("dataujpdsxzak"),
                                new MapperDslConnectorProperties().withName("jkmvbi")
                                    .withValue("datajofqcvovjufycs")))))
                .withConnection(new MapperConnection()
                    .withLinkedService(new LinkedServiceReference().withReferenceName("bemyeji")
                        .withParameters(mapOf("hortu", "dataxeg", "cbgqnzmnhiil", "dataawlpjfelqerpp", "ccgzpraoxnyu",
                            "dataalwcjgckbb", "sgftipwc", "datafa")))
                    .withLinkedServiceType("yubhiqdx")
                    .withType(ConnectionType.LINKEDSERVICETYPE)
                    .withIsInlineDataset(true)
                    .withCommonDslConnectorProperties(Arrays
                        .asList(new MapperDslConnectorProperties().withName("hza").withValue("datacnuhiigbylbuigv"),
                            new MapperDslConnectorProperties().withName("atvcrkdlbnbq").withValue("datah"),
                            new MapperDslConnectorProperties().withName("yhzlwxaeaovurexd")
                                .withValue("datasbdweaderzmwnt"))))
                .withDataMapperMappings(Arrays.asList(
                    new DataMapperMapping().withTargetEntityName("ttmvmmagoaqylkjz")
                        .withSourceEntityName("iua")
                        .withSourceConnectionReference(new MapperConnectionReference().withConnectionName("gmxitpfi")
                            .withType(ConnectionType.LINKEDSERVICETYPE))
                        .withAttributeMappingInfo(
                            new MapperAttributeMappings().withAttributeMappings(Arrays.asList(
                                new MapperAttributeMapping().withName("krlgjm")
                                    .withType(MappingType.AGGREGATE)
                                    .withFunctionName("vcqguefzh")
                                    .withExpression("p")
                                    .withAttributeReference(new MapperAttributeReference())
                                    .withAttributeReferences(Arrays.asList(new MapperAttributeReference(),
                                        new MapperAttributeReference(), new MapperAttributeReference())),
                                new MapperAttributeMapping().withName("relyujlfyoum")
                                    .withType(MappingType.DERIVED)
                                    .withFunctionName("eclcdigptajbrzm")
                                    .withExpression("ucycijo")
                                    .withAttributeReference(new MapperAttributeReference())
                                    .withAttributeReferences(Arrays.asList(new MapperAttributeReference(),
                                        new MapperAttributeReference())))))
                        .withSourceDenormalizeInfo("datatgjcy"),
                    new DataMapperMapping().withTargetEntityName("zjd")
                        .withSourceEntityName("qjbtxjeaoqaqbzgy")
                        .withSourceConnectionReference(new MapperConnectionReference().withConnectionName("wvua")
                            .withType(ConnectionType.LINKEDSERVICETYPE))
                        .withAttributeMappingInfo(
                            new MapperAttributeMappings()
                                .withAttributeMappings(Arrays.asList(
                                    new MapperAttributeMapping().withName("teuli")
                                        .withType(MappingType.DERIVED)
                                        .withFunctionName("kcvmwfauxxepmy")
                                        .withExpression("ormcqmic")
                                        .withAttributeReference(new MapperAttributeReference())
                                        .withAttributeReferences(Arrays.asList(new MapperAttributeReference(),
                                            new MapperAttributeReference(), new MapperAttributeReference(),
                                            new MapperAttributeReference())),
                                    new MapperAttributeMapping().withName("kzfbojxjmcsmyq")
                                        .withType(MappingType.AGGREGATE)
                                        .withFunctionName("cp")
                                        .withExpression("kwywzwofalic")
                                        .withAttributeReference(new MapperAttributeReference())
                                        .withAttributeReferences(Arrays.asList(new MapperAttributeReference(),
                                            new MapperAttributeReference(), new MapperAttributeReference())),
                                    new MapperAttributeMapping().withName("qtamtyvsknxrw")
                                        .withType(MappingType.AGGREGATE)
                                        .withFunctionName("vsbcfhzagxnvhy")
                                        .withExpression("dimwrzregzgyu")
                                        .withAttributeReference(new MapperAttributeReference())
                                        .withAttributeReferences(Arrays.asList(new MapperAttributeReference())),
                                    new MapperAttributeMapping().withName("pweryekzk")
                                        .withType(MappingType.DIRECT)
                                        .withFunctionName("ottaw")
                                        .withExpression("osxw")
                                        .withAttributeReference(new MapperAttributeReference())
                                        .withAttributeReferences(Arrays.asList(new MapperAttributeReference())))))
                        .withSourceDenormalizeInfo("datatfvpndpmiljpn")))
                .withRelationships(Arrays.asList("dataudqll", "datasauzpjlx"));
        model = BinaryData.fromObject(model).toObject(MapperTargetConnectionsInfo.class);
        Assertions.assertEquals("vfdjkpdxp", model.targetEntities().get(0).name());
        Assertions.assertEquals("nmgzvyfijdkzuqnw", model.targetEntities().get(0).schema().get(0).name());
        Assertions.assertEquals("thuqolyahluq", model.targetEntities().get(0).schema().get(0).dataType());
        Assertions.assertEquals("ftbcvexreuquow", model.targetEntities().get(0).dslConnectorProperties().get(0).name());
        Assertions.assertEquals("bemyeji", model.connection().linkedService().referenceName());
        Assertions.assertEquals("yubhiqdx", model.connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE, model.connection().type());
        Assertions.assertEquals(true, model.connection().isInlineDataset());
        Assertions.assertEquals("hza", model.connection().commonDslConnectorProperties().get(0).name());
        Assertions.assertEquals("ttmvmmagoaqylkjz", model.dataMapperMappings().get(0).targetEntityName());
        Assertions.assertEquals("iua", model.dataMapperMappings().get(0).sourceEntityName());
        Assertions.assertEquals("gmxitpfi",
            model.dataMapperMappings().get(0).sourceConnectionReference().connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.dataMapperMappings().get(0).sourceConnectionReference().type());
        Assertions.assertEquals("krlgjm",
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).name());
        Assertions.assertEquals(MappingType.AGGREGATE,
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).type());
        Assertions.assertEquals("vcqguefzh",
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).functionName());
        Assertions.assertEquals("p",
            model.dataMapperMappings().get(0).attributeMappingInfo().attributeMappings().get(0).expression());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
