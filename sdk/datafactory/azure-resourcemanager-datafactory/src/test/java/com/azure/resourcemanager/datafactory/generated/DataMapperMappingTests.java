// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.DataMapperMapping;
import com.azure.resourcemanager.datafactory.models.MapperAttributeMapping;
import com.azure.resourcemanager.datafactory.models.MapperAttributeMappings;
import com.azure.resourcemanager.datafactory.models.MapperAttributeReference;
import com.azure.resourcemanager.datafactory.models.MapperConnectionReference;
import com.azure.resourcemanager.datafactory.models.MappingType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DataMapperMappingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataMapperMapping model = BinaryData.fromString(
            "{\"targetEntityName\":\"huxiqhzlraymez\",\"sourceEntityName\":\"skihmxrfd\",\"sourceConnectionReference\":{\"connectionName\":\"rednw\",\"type\":\"linkedservicetype\"},\"attributeMappingInfo\":{\"attributeMappings\":[{\"name\":\"gmevuafpwzy\",\"type\":\"Aggregate\",\"functionName\":\"gwltxeqip\",\"expression\":\"zdyi\",\"attributeReference\":{\"name\":\"ayorprav\",\"entity\":\"oge\",\"entityConnectionReference\":{\"connectionName\":\"bnsmjkwynqxaek\",\"type\":\"linkedservicetype\"}},\"attributeReferences\":[{\"name\":\"jtqpkevmyltjcrsp\",\"entity\":\"l\",\"entityConnectionReference\":{}},{\"name\":\"clf\",\"entity\":\"annnoytzposewx\",\"entityConnectionReference\":{}},{\"name\":\"xvkqm\",\"entity\":\"pxvpifdfaif\",\"entityConnectionReference\":{}},{\"name\":\"zeyuubeidszl\",\"entity\":\"toi\",\"entityConnectionReference\":{}}]}]},\"sourceDenormalizeInfo\":\"dataygvfltgvdihoyn\"}")
            .toObject(DataMapperMapping.class);
        Assertions.assertEquals("huxiqhzlraymez", model.targetEntityName());
        Assertions.assertEquals("skihmxrfd", model.sourceEntityName());
        Assertions.assertEquals("rednw", model.sourceConnectionReference().connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE, model.sourceConnectionReference().type());
        Assertions.assertEquals("gmevuafpwzy", model.attributeMappingInfo().attributeMappings().get(0).name());
        Assertions.assertEquals(MappingType.AGGREGATE, model.attributeMappingInfo().attributeMappings().get(0).type());
        Assertions.assertEquals("gwltxeqip", model.attributeMappingInfo().attributeMappings().get(0).functionName());
        Assertions.assertEquals("zdyi", model.attributeMappingInfo().attributeMappings().get(0).expression());
        Assertions.assertEquals("ayorprav",
            model.attributeMappingInfo().attributeMappings().get(0).attributeReference().name());
        Assertions.assertEquals("oge",
            model.attributeMappingInfo().attributeMappings().get(0).attributeReference().entity());
        Assertions.assertEquals("bnsmjkwynqxaek",
            model.attributeMappingInfo()
                .attributeMappings()
                .get(0)
                .attributeReference()
                .entityConnectionReference()
                .connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.attributeMappingInfo()
                .attributeMappings()
                .get(0)
                .attributeReference()
                .entityConnectionReference()
                .type());
        Assertions.assertEquals("jtqpkevmyltjcrsp",
            model.attributeMappingInfo().attributeMappings().get(0).attributeReferences().get(0).name());
        Assertions.assertEquals("l",
            model.attributeMappingInfo().attributeMappings().get(0).attributeReferences().get(0).entity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataMapperMapping model = new DataMapperMapping().withTargetEntityName("huxiqhzlraymez")
            .withSourceEntityName("skihmxrfd")
            .withSourceConnectionReference(
                new MapperConnectionReference().withConnectionName("rednw").withType(ConnectionType.LINKEDSERVICETYPE))
            .withAttributeMappingInfo(new MapperAttributeMappings()
                .withAttributeMappings(Arrays.asList(new MapperAttributeMapping().withName("gmevuafpwzy")
                    .withType(MappingType.AGGREGATE)
                    .withFunctionName("gwltxeqip")
                    .withExpression("zdyi")
                    .withAttributeReference(new MapperAttributeReference().withName("ayorprav")
                        .withEntity("oge")
                        .withEntityConnectionReference(
                            new MapperConnectionReference().withConnectionName("bnsmjkwynqxaek")
                                .withType(ConnectionType.LINKEDSERVICETYPE)))
                    .withAttributeReferences(Arrays.asList(
                        new MapperAttributeReference().withName("jtqpkevmyltjcrsp")
                            .withEntity("l")
                            .withEntityConnectionReference(new MapperConnectionReference()),
                        new MapperAttributeReference().withName("clf")
                            .withEntity("annnoytzposewx")
                            .withEntityConnectionReference(new MapperConnectionReference()),
                        new MapperAttributeReference().withName("xvkqm")
                            .withEntity("pxvpifdfaif")
                            .withEntityConnectionReference(new MapperConnectionReference()),
                        new MapperAttributeReference().withName("zeyuubeidszl")
                            .withEntity("toi")
                            .withEntityConnectionReference(new MapperConnectionReference()))))))
            .withSourceDenormalizeInfo("dataygvfltgvdihoyn");
        model = BinaryData.fromObject(model).toObject(DataMapperMapping.class);
        Assertions.assertEquals("huxiqhzlraymez", model.targetEntityName());
        Assertions.assertEquals("skihmxrfd", model.sourceEntityName());
        Assertions.assertEquals("rednw", model.sourceConnectionReference().connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE, model.sourceConnectionReference().type());
        Assertions.assertEquals("gmevuafpwzy", model.attributeMappingInfo().attributeMappings().get(0).name());
        Assertions.assertEquals(MappingType.AGGREGATE, model.attributeMappingInfo().attributeMappings().get(0).type());
        Assertions.assertEquals("gwltxeqip", model.attributeMappingInfo().attributeMappings().get(0).functionName());
        Assertions.assertEquals("zdyi", model.attributeMappingInfo().attributeMappings().get(0).expression());
        Assertions.assertEquals("ayorprav",
            model.attributeMappingInfo().attributeMappings().get(0).attributeReference().name());
        Assertions.assertEquals("oge",
            model.attributeMappingInfo().attributeMappings().get(0).attributeReference().entity());
        Assertions.assertEquals("bnsmjkwynqxaek",
            model.attributeMappingInfo()
                .attributeMappings()
                .get(0)
                .attributeReference()
                .entityConnectionReference()
                .connectionName());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.attributeMappingInfo()
                .attributeMappings()
                .get(0)
                .attributeReference()
                .entityConnectionReference()
                .type());
        Assertions.assertEquals("jtqpkevmyltjcrsp",
            model.attributeMappingInfo().attributeMappings().get(0).attributeReferences().get(0).name());
        Assertions.assertEquals("l",
            model.attributeMappingInfo().attributeMappings().get(0).attributeReferences().get(0).entity());
    }
}
