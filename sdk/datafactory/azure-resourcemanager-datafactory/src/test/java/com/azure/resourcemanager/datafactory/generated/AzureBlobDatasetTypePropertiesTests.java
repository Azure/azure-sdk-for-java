// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.AzureBlobDatasetTypeProperties;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import java.util.HashMap;
import java.util.Map;

public final class AzureBlobDatasetTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureBlobDatasetTypeProperties model = BinaryData.fromString(
            "{\"folderPath\":\"datahkapitsks\",\"tableRootLocation\":\"datayfttibjepzwhju\",\"fileName\":\"datadgbggcjxzh\",\"modifiedDatetimeStart\":\"dataivwehsudym\",\"modifiedDatetimeEnd\":\"databhdosmbngkql\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"dataduvxd\",\"deserializer\":\"dataexatmdmnrsen\",\"\":{\"xznntwgkvyohp\":\"datarxyddmiploisjkzs\",\"wytb\":\"dataapzupz\",\"mxpqkjnpyriwn\":\"datajzghximkg\",\"xmmqmt\":\"dataot\"}},\"compression\":{\"type\":\"dataky\",\"level\":\"dataexwdonbexf\",\"\":{\"fozuumrtgjq\":\"dataaubheeggzgrnqt\",\"nsyxzxjmk\":\"dataacan\",\"lazof\":\"datanb\"}}}")
            .toObject(AzureBlobDatasetTypeProperties.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureBlobDatasetTypeProperties model = new AzureBlobDatasetTypeProperties().withFolderPath("datahkapitsks")
            .withTableRootLocation("datayfttibjepzwhju").withFileName("datadgbggcjxzh")
            .withModifiedDatetimeStart("dataivwehsudym").withModifiedDatetimeEnd("databhdosmbngkql")
            .withFormat(new DatasetStorageFormat().withSerializer("dataduvxd").withDeserializer("dataexatmdmnrsen")
                .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
            .withCompression(new DatasetCompression().withType("dataky").withLevel("dataexwdonbexf")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureBlobDatasetTypeProperties.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
