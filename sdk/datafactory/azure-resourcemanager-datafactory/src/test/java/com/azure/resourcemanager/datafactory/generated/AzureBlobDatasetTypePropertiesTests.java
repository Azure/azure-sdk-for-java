// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.AzureBlobDatasetTypeProperties;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import java.util.HashMap;
import java.util.Map;

public final class AzureBlobDatasetTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureBlobDatasetTypeProperties model = BinaryData.fromString(
            "{\"folderPath\":\"datawnlzuvi\",\"tableRootLocation\":\"datalghfrbzakpjtcqra\",\"fileName\":\"dataojpsucm\",\"modifiedDatetimeStart\":\"datamcwqxynqjgs\",\"modifiedDatetimeEnd\":\"datakyvscbgngcrus\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"datarcpgcvsvkkjbjolp\",\"deserializer\":\"dataklkvuznadvh\",\"\":{\"emqwtq\":\"dataeoigowxxbhtpsyio\",\"mwdvgjqcrb\":\"datazzgyksikawan\",\"cmahiwfrya\":\"dataompnbnfgyweojbep\"}},\"compression\":{\"type\":\"datach\",\"level\":\"datapitskshfyftti\",\"\":{\"x\":\"datapzwhjunfdgbggc\"}}}")
            .toObject(AzureBlobDatasetTypeProperties.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureBlobDatasetTypeProperties model = new AzureBlobDatasetTypeProperties().withFolderPath("datawnlzuvi")
            .withTableRootLocation("datalghfrbzakpjtcqra")
            .withFileName("dataojpsucm")
            .withModifiedDatetimeStart("datamcwqxynqjgs")
            .withModifiedDatetimeEnd("datakyvscbgngcrus")
            .withFormat(new DatasetStorageFormat().withSerializer("datarcpgcvsvkkjbjolp")
                .withDeserializer("dataklkvuznadvh")
                .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
            .withCompression(new DatasetCompression().withType("datach")
                .withLevel("datapitskshfyftti")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureBlobDatasetTypeProperties.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
