// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.AzureBlobDatasetTypeProperties;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import java.util.HashMap;
import java.util.Map;

public final class AzureBlobDatasetTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureBlobDatasetTypeProperties model = BinaryData.fromString(
            "{\"folderPath\":\"dataky\",\"tableRootLocation\":\"dataexwdonbexf\",\"fileName\":\"datadaubheeggzgr\",\"modifiedDatetimeStart\":\"datatlfozuumrtgjqgac\",\"modifiedDatetimeEnd\":\"datatnsyxzxjm\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"databc\",\"deserializer\":\"datazofmexvtemaspm\",\"\":{\"hntofe\":\"datadscdkxwdpwjcbha\",\"fixoskk\":\"datafh\",\"zzmrgtxdhmfpp\":\"datadfivsujybsr\"}},\"compression\":{\"type\":\"datamgikesmkwt\",\"level\":\"datafragjhxerx\",\"\":{\"vmmnii\":\"datakdbtq\",\"bggicnqwlctmw\":\"datayholhjns\"}}}")
            .toObject(AzureBlobDatasetTypeProperties.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureBlobDatasetTypeProperties model = new AzureBlobDatasetTypeProperties().withFolderPath("dataky")
            .withTableRootLocation("dataexwdonbexf")
            .withFileName("datadaubheeggzgr")
            .withModifiedDatetimeStart("datatlfozuumrtgjqgac")
            .withModifiedDatetimeEnd("datatnsyxzxjm")
            .withFormat(new DatasetStorageFormat().withSerializer("databc")
                .withDeserializer("datazofmexvtemaspm")
                .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
            .withCompression(new DatasetCompression().withType("datamgikesmkwt")
                .withLevel("datafragjhxerx")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureBlobDatasetTypeProperties.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
