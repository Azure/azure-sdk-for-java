// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.LinkedServiceResourceInner;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.LinkedServiceListResponse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class LinkedServiceListResponseTests {
    @Test
    public void testDeserialize() {
        LinkedServiceListResponse model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"type\":\"LinkedService\",\"description\":\"rsyn\",\"parameters\":{},\"annotations\":[],\"\":{}},\"name\":\"by\",\"type\":\"zfcl\",\"etag\":\"axdbabph\",\"id\":\"rqlfktsthsucocmn\"}],\"nextLink\":\"azt\"}")
                .toObject(LinkedServiceListResponse.class);
        Assertions.assertEquals("rqlfktsthsucocmn", model.value().get(0).id());
        Assertions.assertEquals("rsyn", model.value().get(0).properties().description());
        Assertions.assertEquals("azt", model.nextLink());
    }

    @Test
    public void testSerialize() {
        LinkedServiceListResponse model =
            new LinkedServiceListResponse()
                .withValue(
                    Arrays
                        .asList(
                            new LinkedServiceResourceInner()
                                .withId("rqlfktsthsucocmn")
                                .withProperties(
                                    new LinkedService()
                                        .withDescription("rsyn")
                                        .withParameters(mapOf())
                                        .withAnnotations(Arrays.asList())
                                        .withAdditionalProperties(mapOf("type", "LinkedService")))))
                .withNextLink("azt");
        model = BinaryData.fromObject(model).toObject(LinkedServiceListResponse.class);
        Assertions.assertEquals("rqlfktsthsucocmn", model.value().get(0).id());
        Assertions.assertEquals("rsyn", model.value().get(0).properties().description());
        Assertions.assertEquals("azt", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
