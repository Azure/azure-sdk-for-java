// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.LinkedServiceResourceInner;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.LinkedServiceListResponse;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LinkedServiceListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LinkedServiceListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"type\":\"gpw\",\"connectVia\":{\"referenceName\":\"uh\",\"parameters\":{\"uusdttouwa\":\"databsjyofdx\"}},\"description\":\"ekqvkeln\",\"parameters\":{\"sxyawjoyaqcs\":{\"type\":\"SecureString\",\"defaultValue\":\"datawyjsflhhcaalnjix\"},\"zyexzn\":{\"type\":\"Float\",\"defaultValue\":\"datapkii\"},\"xknalaulppg\":{\"type\":\"Array\",\"defaultValue\":\"dataxhnrztfolhb\"}},\"annotations\":[\"datapnapnyiropuh\",\"dataigvpgylg\",\"datagit\",\"datamedjvcslynqwwncw\"],\"\":{\"rmgucnap\":\"dataxgk\"}},\"name\":\"eoellwptfdygp\",\"type\":\"b\",\"etag\":\"ceopzfqrhhuaopp\",\"id\":\"qeqxo\"}],\"nextLink\":\"dahzxctobg\"}")
            .toObject(LinkedServiceListResponse.class);
        Assertions.assertEquals("qeqxo", model.value().get(0).id());
        Assertions.assertEquals("uh", model.value().get(0).properties().connectVia().referenceName());
        Assertions.assertEquals("ekqvkeln", model.value().get(0).properties().description());
        Assertions.assertEquals(ParameterType.SECURE_STRING,
            model.value().get(0).properties().parameters().get("sxyawjoyaqcs").type());
        Assertions.assertEquals("dahzxctobg", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LinkedServiceListResponse model
            = new LinkedServiceListResponse().withValue(Arrays.asList(new LinkedServiceResourceInner().withId("qeqxo")
                .withProperties(new LinkedService()
                    .withConnectVia(new IntegrationRuntimeReference().withReferenceName("uh")
                        .withParameters(mapOf("uusdttouwa", "databsjyofdx")))
                    .withDescription("ekqvkeln")
                    .withParameters(mapOf("sxyawjoyaqcs",
                        new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                            .withDefaultValue("datawyjsflhhcaalnjix"),
                        "zyexzn",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datapkii"),
                        "xknalaulppg",
                        new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataxhnrztfolhb")))
                    .withAnnotations(
                        Arrays.asList("datapnapnyiropuh", "dataigvpgylg", "datagit", "datamedjvcslynqwwncw"))
                    .withAdditionalProperties(mapOf("type", "gpw")))))
                .withNextLink("dahzxctobg");
        model = BinaryData.fromObject(model).toObject(LinkedServiceListResponse.class);
        Assertions.assertEquals("qeqxo", model.value().get(0).id());
        Assertions.assertEquals("uh", model.value().get(0).properties().connectVia().referenceName());
        Assertions.assertEquals("ekqvkeln", model.value().get(0).properties().description());
        Assertions.assertEquals(ParameterType.SECURE_STRING,
            model.value().get(0).properties().parameters().get("sxyawjoyaqcs").type());
        Assertions.assertEquals("dahzxctobg", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
