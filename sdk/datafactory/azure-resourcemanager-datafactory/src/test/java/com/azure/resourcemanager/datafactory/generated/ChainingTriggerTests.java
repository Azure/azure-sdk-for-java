// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ChainingTrigger;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ChainingTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChainingTrigger model = BinaryData.fromString(
            "{\"type\":\"ChainingTrigger\",\"pipeline\":{\"pipelineReference\":{\"referenceName\":\"kwdtuwbrw\",\"name\":\"qtyuywzcc\"},\"parameters\":{\"rk\":\"dataliy\"}},\"typeProperties\":{\"dependsOn\":[{\"referenceName\":\"lvitbtloxrbotzvr\",\"name\":\"xpayjselrfqstbfu\"},{\"referenceName\":\"mln\",\"name\":\"vbeyugg\"},{\"referenceName\":\"fshntykenmjznjq\",\"name\":\"yaaevrkxyjsuapp\"}],\"runDimension\":\"mujiguusbwmsy\"},\"description\":\"bjtzd\",\"runtimeState\":\"Disabled\",\"annotations\":[\"dataqiilfovmcjchbof\"],\"\":{\"krerurcjgkau\":\"dataqvjfszvecedoptez\",\"xqsbwepduyqxvj\":\"datazbrdibdbk\",\"yaylt\":\"dataarddbn\"}}")
            .toObject(ChainingTrigger.class);
        Assertions.assertEquals("bjtzd", model.description());
        Assertions.assertEquals("kwdtuwbrw", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("qtyuywzcc", model.pipeline().pipelineReference().name());
        Assertions.assertEquals("lvitbtloxrbotzvr", model.dependsOn().get(0).referenceName());
        Assertions.assertEquals("xpayjselrfqstbfu", model.dependsOn().get(0).name());
        Assertions.assertEquals("mujiguusbwmsy", model.runDimension());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChainingTrigger model
            = new ChainingTrigger().withDescription("bjtzd").withAnnotations(Arrays.asList("dataqiilfovmcjchbof"))
                .withPipeline(new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("kwdtuwbrw").withName("qtyuywzcc"))
                    .withParameters(mapOf("rk", "dataliy")))
                .withDependsOn(Arrays.asList(
                    new PipelineReference().withReferenceName("lvitbtloxrbotzvr").withName("xpayjselrfqstbfu"),
                    new PipelineReference().withReferenceName("mln").withName("vbeyugg"),
                    new PipelineReference().withReferenceName("fshntykenmjznjq").withName("yaaevrkxyjsuapp")))
                .withRunDimension("mujiguusbwmsy");
        model = BinaryData.fromObject(model).toObject(ChainingTrigger.class);
        Assertions.assertEquals("bjtzd", model.description());
        Assertions.assertEquals("kwdtuwbrw", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("qtyuywzcc", model.pipeline().pipelineReference().name());
        Assertions.assertEquals("lvitbtloxrbotzvr", model.dependsOn().get(0).referenceName());
        Assertions.assertEquals("xpayjselrfqstbfu", model.dependsOn().get(0).name());
        Assertions.assertEquals("mujiguusbwmsy", model.runDimension());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
