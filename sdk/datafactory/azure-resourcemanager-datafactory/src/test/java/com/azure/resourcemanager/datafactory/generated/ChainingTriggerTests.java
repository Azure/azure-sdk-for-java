// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ChainingTrigger;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ChainingTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChainingTrigger model = BinaryData.fromString(
            "{\"type\":\"ChainingTrigger\",\"pipeline\":{\"pipelineReference\":{\"referenceName\":\"tbsck\",\"name\":\"gew\"},\"parameters\":{\"j\":\"datauzoxm\",\"gcfvfwwev\":\"dataxbtkzvtiqtgr\"}},\"typeProperties\":{\"dependsOn\":[{\"referenceName\":\"zrhexivqaqzt\",\"name\":\"gblriznr\"}],\"runDimension\":\"qu\"},\"description\":\"l\",\"runtimeState\":\"Stopped\",\"annotations\":[\"dataljlwkjoj\"],\"\":{\"yneyoxj\":\"datanzrjqlqh\"}}")
            .toObject(ChainingTrigger.class);
        Assertions.assertEquals("l", model.description());
        Assertions.assertEquals("tbsck", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("gew", model.pipeline().pipelineReference().name());
        Assertions.assertEquals("zrhexivqaqzt", model.dependsOn().get(0).referenceName());
        Assertions.assertEquals("gblriznr", model.dependsOn().get(0).name());
        Assertions.assertEquals("qu", model.runDimension());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChainingTrigger model = new ChainingTrigger().withDescription("l")
            .withAnnotations(Arrays.asList("dataljlwkjoj"))
            .withPipeline(new TriggerPipelineReference()
                .withPipelineReference(new PipelineReference().withReferenceName("tbsck").withName("gew"))
                .withParameters(mapOf("j", "datauzoxm", "gcfvfwwev", "dataxbtkzvtiqtgr")))
            .withDependsOn(
                Arrays.asList(new PipelineReference().withReferenceName("zrhexivqaqzt").withName("gblriznr")))
            .withRunDimension("qu");
        model = BinaryData.fromObject(model).toObject(ChainingTrigger.class);
        Assertions.assertEquals("l", model.description());
        Assertions.assertEquals("tbsck", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("gew", model.pipeline().pipelineReference().name());
        Assertions.assertEquals("zrhexivqaqzt", model.dependsOn().get(0).referenceName());
        Assertions.assertEquals("gblriznr", model.dependsOn().get(0).name());
        Assertions.assertEquals("qu", model.runDimension());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
