// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AvroSource;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import java.util.HashMap;
import java.util.Map;

public final class AvroSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AvroSource model = BinaryData.fromString(
            "{\"type\":\"AvroSource\",\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"datariyhdbbj\",\"disableMetricsCollection\":\"datajmcybrpwjenbxtk\",\"\":{\"yxnhu\":\"datarxauuhdkhkizyx\"}},\"additionalColumns\":\"datawip\",\"sourceRetryCount\":\"datayivpezzyrpdx\",\"sourceRetryWait\":\"datafpqxse\",\"maxConcurrentConnections\":\"datazkpdmmowftfrqeb\",\"disableMetricsCollection\":\"dataop\",\"\":{\"rdsdkvhuiadyh\":\"datafekfxmgjywwid\",\"dokuqnkoskf\":\"datadisypgapfdwhwbe\",\"rjee\":\"datanjay\",\"m\":\"datambh\"}}")
            .toObject(AvroSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AvroSource model = new AvroSource().withSourceRetryCount("datayivpezzyrpdx")
            .withSourceRetryWait("datafpqxse")
            .withMaxConcurrentConnections("datazkpdmmowftfrqeb")
            .withDisableMetricsCollection("dataop")
            .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("datariyhdbbj")
                .withDisableMetricsCollection("datajmcybrpwjenbxtk")
                .withAdditionalProperties(mapOf("type", "StoreReadSettings")))
            .withAdditionalColumns("datawip");
        model = BinaryData.fromObject(model).toObject(AvroSource.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
