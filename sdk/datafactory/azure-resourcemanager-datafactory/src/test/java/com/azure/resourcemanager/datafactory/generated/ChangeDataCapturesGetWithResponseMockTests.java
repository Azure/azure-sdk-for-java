// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureResource;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.FrequencyType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChangeDataCapturesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"folder\":{\"name\":\"wjowgdwc\"},\"description\":\"yyzmxuelpl\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"ldmflngjtltx\"},\"linkedServiceType\":\"byq\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{}]}},{\"sourceEntities\":[{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"ptockgjvflch\"},\"linkedServiceType\":\"b\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{},{}]}},{\"sourceEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"nlsmfqglvflxltng\"},\"linkedServiceType\":\"lpgclo\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{},{}]}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"fzcymyb\"},\"linkedServiceType\":\"v\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{}]},\"dataMapperMappings\":[{}],\"relationships\":[\"databgitkowflc\",\"dataxqwy\"]},{\"targetEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"qqgaysynejdvt\"},\"linkedServiceType\":\"gwxilbazrui\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{},{},{},{}]},\"dataMapperMappings\":[{},{},{}],\"relationships\":[\"dataslylqzw\",\"datalhxgsjzrifgubpn\",\"dataiwlernch\",\"dataxpsonkku\"]},{\"targetEntities\":[{}],\"connection\":{\"linkedService\":{\"referenceName\":\"zrng\"},\"linkedServiceType\":\"eunp\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{},{}]},\"dataMapperMappings\":[{}],\"relationships\":[\"datawmqgya\",\"datan\",\"dataxwxnnjvodqne\"]}],\"policy\":{\"mode\":\"y\",\"recurrence\":{\"frequency\":\"Minute\",\"interval\":1237768460}},\"allowVNetOverride\":false,\"status\":\"ngbh\"},\"name\":\"tyvwxc\",\"type\":\"hhzjhmxynszadgv\",\"etag\":\"oxmlb\",\"\":{\"ibqnuhr\":\"datasecwsw\",\"gesaolceb\":\"dataiwnb\",\"olfupxhrl\":\"dataditccuzjlcmzgh\",\"lrcrxxkvuzpsoujc\":\"datatknmp\"},\"id\":\"ubpjwwvies\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ChangeDataCaptureResource response = manager.changeDataCaptures()
            .getWithResponse("exdwwraim", "kazamidgoyawgps", "kymm", "imbesgi", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ubpjwwvies", response.id());
        Assertions.assertEquals("wjowgdwc", response.folder().name());
        Assertions.assertEquals("yyzmxuelpl", response.description());
        Assertions.assertEquals("ldmflngjtltx",
            response.sourceConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("byq", response.sourceConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(false, response.sourceConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("fzcymyb",
            response.targetConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("v", response.targetConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(false, response.targetConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("y", response.policy().mode());
        Assertions.assertEquals(FrequencyType.MINUTE, response.policy().recurrence().frequency());
        Assertions.assertEquals(1237768460, response.policy().recurrence().interval());
        Assertions.assertEquals(false, response.allowVNetOverride());
        Assertions.assertEquals("ngbh", response.status());
    }
}
