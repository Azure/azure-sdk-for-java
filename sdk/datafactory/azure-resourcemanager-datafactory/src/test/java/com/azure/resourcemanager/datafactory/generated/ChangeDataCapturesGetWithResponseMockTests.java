// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureResource;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.FrequencyType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChangeDataCapturesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"folder\":{\"name\":\"f\"},\"description\":\"hjlpznxjymdql\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{}],\"connection\":{\"linkedService\":{\"referenceName\":\"wltabmcm\"},\"linkedServiceType\":\"e\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{}]}},{\"sourceEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"gfya\"},\"linkedServiceType\":\"pkybgrugklwubkmd\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{},{},{}]}},{\"sourceEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"mau\"},\"linkedServiceType\":\"rzlfpk\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{},{}]}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"gztxcjnwzvlzwyk\"},\"linkedServiceType\":\"qq\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{},{}]},\"dataMapperMappings\":[{},{}],\"relationships\":[\"datagivkfhiaa\",\"datalxpwhvu\",\"datahjl\"]},{\"targetEntities\":[{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"nrfuabqotyoa\"},\"linkedServiceType\":\"rlydmldjtrxq\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{}]},\"dataMapperMappings\":[{},{},{}],\"relationships\":[\"dataqajhyufexb\"]},{\"targetEntities\":[{}],\"connection\":{\"linkedService\":{\"referenceName\":\"ntzjvquwxxouflnc\"},\"linkedServiceType\":\"b\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{},{}]},\"dataMapperMappings\":[{},{}],\"relationships\":[\"datankrvpkkifjtx\",\"datady\",\"dataymijadh\"]},{\"targetEntities\":[{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"qjqutixykjlypmvo\"},\"linkedServiceType\":\"fnsfbnt\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{},{}]},\"dataMapperMappings\":[{},{},{}],\"relationships\":[\"dataqddedhkhqwbm\"]}],\"policy\":{\"mode\":\"unxfdpulpnc\",\"recurrence\":{\"frequency\":\"Minute\",\"interval\":874037530}},\"allowVNetOverride\":true,\"status\":\"aeyczb\"},\"name\":\"skpnbdzjuq\",\"type\":\"qyusvgrbaax\",\"etag\":\"tkuchbnydzhafpbc\",\"\":{\"u\":\"datantw\",\"hbumoq\":\"datatffqa\",\"ik\":\"dataaixsalgzzm\",\"nsndcmghddsgjb\":\"datacagmmegukefmujg\"},\"id\":\"z\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ChangeDataCaptureResource response = manager.changeDataCaptures()
            .getWithResponse("uvphkhszesxsyrvj", "wpknbwh", "ev", "own", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("z", response.id());
        Assertions.assertEquals("f", response.folder().name());
        Assertions.assertEquals("hjlpznxjymdql", response.description());
        Assertions.assertEquals("wltabmcm",
            response.sourceConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("e", response.sourceConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(true, response.sourceConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("gztxcjnwzvlzwyk",
            response.targetConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("qq", response.targetConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(true, response.targetConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("unxfdpulpnc", response.policy().mode());
        Assertions.assertEquals(FrequencyType.MINUTE, response.policy().recurrence().frequency());
        Assertions.assertEquals(874037530, response.policy().recurrence().interval());
        Assertions.assertEquals(true, response.allowVNetOverride());
        Assertions.assertEquals("aeyczb", response.status());
    }
}
