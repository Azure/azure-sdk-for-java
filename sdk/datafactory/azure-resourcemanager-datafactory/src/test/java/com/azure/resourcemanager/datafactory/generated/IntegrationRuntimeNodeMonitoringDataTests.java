// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeNodeMonitoringData;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;

public final class IntegrationRuntimeNodeMonitoringDataTests {
    @Test
    public void testDeserialize() {
        IntegrationRuntimeNodeMonitoringData model =
            BinaryData
                .fromString(
                    "{\"nodeName\":\"wvl\",\"availableMemoryInMB\":137418501,\"cpuUtilization\":240696862,\"concurrentJobsLimit\":989865410,\"concurrentJobsRunning\":1111271416,\"maxConcurrentJobs\":1685715671,\"sentBytes\":93.34921,\"receivedBytes\":28.421885,\"\":{}}")
                .toObject(IntegrationRuntimeNodeMonitoringData.class);
    }

    @Test
    public void testSerialize() {
        IntegrationRuntimeNodeMonitoringData model =
            new IntegrationRuntimeNodeMonitoringData()
                .withAdditionalProperties(
                    mapOf(
                        "nodeName",
                        "wvl",
                        "cpuUtilization",
                        240696862,
                        "receivedBytes",
                        28.421885f,
                        "concurrentJobsLimit",
                        989865410,
                        "concurrentJobsRunning",
                        1111271416,
                        "maxConcurrentJobs",
                        1685715671,
                        "availableMemoryInMB",
                        137418501,
                        "sentBytes",
                        93.34921f));
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeNodeMonitoringData.class);
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
