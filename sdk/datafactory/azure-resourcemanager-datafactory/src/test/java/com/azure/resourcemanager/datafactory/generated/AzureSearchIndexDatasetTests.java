// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSearchIndexDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSearchIndexDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSearchIndexDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"AzureSearchIndex\",\"typeProperties\":{\"indexName\":\"dataryqycymzrlcfgdwz\"},\"description\":\"zfdhea\",\"structure\":\"datayciwzkil\",\"schema\":\"dataqadfgesv\",\"linkedServiceName\":{\"referenceName\":\"oha\",\"parameters\":{\"ovqmxqsxofx\":\"dataizmadjrsbgailj\",\"kgltsxooiobhieb\":\"datankiu\",\"tlsrvqzgaqsosrn\":\"datau\",\"npesw\":\"datalvgrghnhuoxrqhjn\"}},\"parameters\":{\"zdvmsnao\":{\"type\":\"Array\",\"defaultValue\":\"datagebzqzmcsviujo\"}},\"annotations\":[\"dataxoxvimdvetqh\",\"databitqsbyu\"],\"folder\":{\"name\":\"omr\"},\"\":{\"xbdpbcehwbd\":\"datamgrmsdbvqxgfygfk\"}}")
                .toObject(AzureSearchIndexDataset.class);
        Assertions.assertEquals("zfdhea", model.description());
        Assertions.assertEquals("oha", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("zdvmsnao").type());
        Assertions.assertEquals("omr", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSearchIndexDataset model =
            new AzureSearchIndexDataset()
                .withDescription("zfdhea")
                .withStructure("datayciwzkil")
                .withSchema("dataqadfgesv")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("oha")
                        .withParameters(
                            mapOf(
                                "ovqmxqsxofx",
                                "dataizmadjrsbgailj",
                                "kgltsxooiobhieb",
                                "datankiu",
                                "tlsrvqzgaqsosrn",
                                "datau",
                                "npesw",
                                "datalvgrghnhuoxrqhjn")))
                .withParameters(
                    mapOf(
                        "zdvmsnao",
                        new ParameterSpecification()
                            .withType(ParameterType.ARRAY)
                            .withDefaultValue("datagebzqzmcsviujo")))
                .withAnnotations(Arrays.asList("dataxoxvimdvetqh", "databitqsbyu"))
                .withFolder(new DatasetFolder().withName("omr"))
                .withIndexName("dataryqycymzrlcfgdwz");
        model = BinaryData.fromObject(model).toObject(AzureSearchIndexDataset.class);
        Assertions.assertEquals("zfdhea", model.description());
        Assertions.assertEquals("oha", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("zdvmsnao").type());
        Assertions.assertEquals("omr", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
