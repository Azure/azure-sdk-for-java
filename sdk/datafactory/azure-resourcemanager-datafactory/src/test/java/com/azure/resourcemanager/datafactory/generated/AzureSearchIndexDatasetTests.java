// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSearchIndexDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSearchIndexDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSearchIndexDataset model = BinaryData.fromString(
            "{\"type\":\"uiygtcyzcjefpub\",\"typeProperties\":{\"indexName\":\"datajyffwflbkjc\"},\"description\":\"djcgldry\",\"structure\":\"datar\",\"schema\":\"databhzirmx\",\"linkedServiceName\":{\"referenceName\":\"aujbfomfbozpj\",\"parameters\":{\"thpsnxebycymp\":\"datafppqcwdnnj\"}},\"parameters\":{\"sebcxno\":{\"type\":\"String\",\"defaultValue\":\"datannp\"},\"gspjlf\":{\"type\":\"Bool\",\"defaultValue\":\"datadyzssjlmykdygj\"}},\"annotations\":[\"datangwqxcrbcrgyoim\"],\"folder\":{\"name\":\"z\"},\"\":{\"kognhtvagwnn\":\"datat\"}}")
            .toObject(AzureSearchIndexDataset.class);
        Assertions.assertEquals("djcgldry", model.description());
        Assertions.assertEquals("aujbfomfbozpj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("sebcxno").type());
        Assertions.assertEquals("z", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSearchIndexDataset model = new AzureSearchIndexDataset().withDescription("djcgldry")
            .withStructure("datar")
            .withSchema("databhzirmx")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("aujbfomfbozpj")
                .withParameters(mapOf("thpsnxebycymp", "datafppqcwdnnj")))
            .withParameters(mapOf("sebcxno",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datannp"), "gspjlf",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datadyzssjlmykdygj")))
            .withAnnotations(Arrays.asList("datangwqxcrbcrgyoim"))
            .withFolder(new DatasetFolder().withName("z"))
            .withIndexName("datajyffwflbkjc");
        model = BinaryData.fromObject(model).toObject(AzureSearchIndexDataset.class);
        Assertions.assertEquals("djcgldry", model.description());
        Assertions.assertEquals("aujbfomfbozpj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("sebcxno").type());
        Assertions.assertEquals("z", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
