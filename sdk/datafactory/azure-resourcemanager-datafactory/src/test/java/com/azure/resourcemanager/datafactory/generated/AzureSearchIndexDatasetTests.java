// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSearchIndexDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSearchIndexDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSearchIndexDataset model = BinaryData.fromString(
            "{\"type\":\"AzureSearchIndex\",\"typeProperties\":{\"indexName\":\"dataki\"},\"description\":\"oifm\",\"structure\":\"datalpwdjraurf\",\"schema\":\"dataznurttu\",\"linkedServiceName\":{\"referenceName\":\"aaaxx\",\"parameters\":{\"ecxstowa\":\"datajmdkqtxfrm\",\"tjaqgbl\":\"dataehxuihwes\",\"spsaneyvaerpiob\":\"datakncypmte\"}},\"parameters\":{\"raq\":{\"type\":\"Float\",\"defaultValue\":\"datarjokjwqd\"},\"f\":{\"type\":\"Bool\",\"defaultValue\":\"datappqcaigazwfwl\"},\"odt\":{\"type\":\"Float\",\"defaultValue\":\"datalzs\"},\"ytjwgetfigw\":{\"type\":\"Array\",\"defaultValue\":\"datarslzymqxserwycu\"}},\"annotations\":[\"datajxzi\",\"dataebjrahgdstubwg\"],\"folder\":{\"name\":\"sshxliqm\"},\"\":{\"alw\":\"datawhfmdoiiyobqzw\",\"crmvjfmr\":\"datasofxc\",\"elsxfkzr\":\"datauydldp\",\"rjwbuocqflm\":\"datatirjvqxvwkiocxo\"}}")
            .toObject(AzureSearchIndexDataset.class);
        Assertions.assertEquals("oifm", model.description());
        Assertions.assertEquals("aaaxx", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("raq").type());
        Assertions.assertEquals("sshxliqm", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSearchIndexDataset model
            = new AzureSearchIndexDataset().withDescription("oifm")
                .withStructure("datalpwdjraurf")
                .withSchema("dataznurttu")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("aaaxx")
                    .withParameters(mapOf("ecxstowa", "datajmdkqtxfrm", "tjaqgbl", "dataehxuihwes", "spsaneyvaerpiob",
                        "datakncypmte")))
                .withParameters(mapOf("raq",
                    new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datarjokjwqd"), "f",
                    new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datappqcaigazwfwl"),
                    "odt", new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datalzs"),
                    "ytjwgetfigw",
                    new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datarslzymqxserwycu")))
                .withAnnotations(Arrays.asList("datajxzi", "dataebjrahgdstubwg"))
                .withFolder(new DatasetFolder().withName("sshxliqm"))
                .withIndexName("dataki");
        model = BinaryData.fromObject(model).toObject(AzureSearchIndexDataset.class);
        Assertions.assertEquals("oifm", model.description());
        Assertions.assertEquals("aaaxx", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("raq").type());
        Assertions.assertEquals("sshxliqm", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
