// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DataLakeAnalyticsUsqlActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataLakeAnalyticsUsqlActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataLakeAnalyticsUsqlActivity model = BinaryData.fromString(
            "{\"type\":\"DataLakeAnalyticsU-SQL\",\"typeProperties\":{\"scriptPath\":\"datagstmlhrziggc\",\"scriptLinkedService\":{\"referenceName\":\"zynimkk\",\"parameters\":{\"douicho\":\"dataowcutohmxmj\"}},\"degreeOfParallelism\":\"datamenn\",\"priority\":\"dataqjakqdqnne\",\"parameters\":{\"eqllrpcqyxqf\":\"datauuguzesfgg\",\"qeqtlsipedgtup\":\"datarvmvdqhageho\"},\"runtimeVersion\":\"datavxeubngwidgxy\",\"compilationMode\":\"dataovlph\"},\"linkedServiceName\":{\"referenceName\":\"mfvyhmivy\",\"parameters\":{\"k\":\"datao\"}},\"policy\":{\"timeout\":\"dataoprgcs\",\"retry\":\"datacorxibwsf\",\"retryIntervalInSeconds\":817850977,\"secureInput\":false,\"secureOutput\":true,\"\":{\"assclgolbpwegz\":\"dataxenmuev\",\"k\":\"dataionlgnes\"}},\"name\":\"nhfd\",\"description\":\"skv\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"hlbxrqbi\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Completed\"],\"\":{\"c\":\"dataxxiizkehfkp\"}}],\"userProperties\":[{\"name\":\"wbkrwihb\",\"value\":\"dataufmui\"},{\"name\":\"hqpqfowxdihux\",\"value\":\"datadgotoon\"}],\"\":{\"jqxknaeuhxnpad\":\"datai\",\"dvnaxtbnjmj\":\"datajaeqaolfyqjgob\",\"bdfmhzgtieybimit\":\"datagrwvl\",\"wab\":\"dataxeetkwloozeg\"}}")
            .toObject(DataLakeAnalyticsUsqlActivity.class);
        Assertions.assertEquals("nhfd", model.name());
        Assertions.assertEquals("skv", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("hlbxrqbi", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wbkrwihb", model.userProperties().get(0).name());
        Assertions.assertEquals("mfvyhmivy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(817850977, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("zynimkk", model.scriptLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataLakeAnalyticsUsqlActivity model = new DataLakeAnalyticsUsqlActivity().withName("nhfd")
            .withDescription("skv")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("hlbxrqbi")
                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED,
                    DependencyCondition.COMPLETED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("wbkrwihb").withValue("dataufmui"),
                new UserProperty().withName("hqpqfowxdihux").withValue("datadgotoon")))
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("mfvyhmivy").withParameters(mapOf("k", "datao")))
            .withPolicy(new ActivityPolicy().withTimeout("dataoprgcs")
                .withRetry("datacorxibwsf")
                .withRetryIntervalInSeconds(817850977)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withScriptPath("datagstmlhrziggc")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("zynimkk")
                .withParameters(mapOf("douicho", "dataowcutohmxmj")))
            .withDegreeOfParallelism("datamenn")
            .withPriority("dataqjakqdqnne")
            .withParameters(mapOf("eqllrpcqyxqf", "datauuguzesfgg", "qeqtlsipedgtup", "datarvmvdqhageho"))
            .withRuntimeVersion("datavxeubngwidgxy")
            .withCompilationMode("dataovlph");
        model = BinaryData.fromObject(model).toObject(DataLakeAnalyticsUsqlActivity.class);
        Assertions.assertEquals("nhfd", model.name());
        Assertions.assertEquals("skv", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("hlbxrqbi", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wbkrwihb", model.userProperties().get(0).name());
        Assertions.assertEquals("mfvyhmivy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(817850977, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("zynimkk", model.scriptLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
