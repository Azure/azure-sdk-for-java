// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DataLakeAnalyticsUsqlActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataLakeAnalyticsUsqlActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataLakeAnalyticsUsqlActivity model = BinaryData.fromString(
            "{\"type\":\"DataLakeAnalyticsU-SQL\",\"typeProperties\":{\"scriptPath\":\"datalfrwym\",\"scriptLinkedService\":{\"referenceName\":\"ujtnnd\",\"parameters\":{\"pljyt\":\"datayc\",\"fxhzvrsrgbfaqg\":\"dataqbtijybpfwgclppw\"}},\"degreeOfParallelism\":\"datakisipjgvm\",\"priority\":\"dataurr\",\"parameters\":{\"bwjopk\":\"datazbxu\",\"bwffgconiydgn\":\"datadubq\"},\"runtimeVersion\":\"datagyytn\",\"compilationMode\":\"datalankosd\"},\"linkedServiceName\":{\"referenceName\":\"mf\",\"parameters\":{\"ybdivxvxw\":\"dataefkhki\",\"czco\":\"datafmqzndlgqtuq\"}},\"policy\":{\"timeout\":\"datacwtxaafcvqhmsdo\",\"retry\":\"datarzsninkhbm\",\"retryIntervalInSeconds\":1593239802,\"secureInput\":false,\"secureOutput\":false,\"\":{\"mcp\":\"dataphz\",\"qzxkpxrful\":\"dataepkrdge\",\"bp\":\"datahhmnd\",\"jmel\":\"datadg\"}},\"name\":\"kzmfmgboyliopbo\",\"description\":\"faiyvmpfebsummy\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"xsdup\",\"dependencyConditions\":[\"Failed\",\"Skipped\"],\"\":{\"vh\":\"datahgb\",\"zvclzutvqkoi\":\"dataskos\"}}],\"userProperties\":[{\"name\":\"pfskqwjlohkaffyn\",\"value\":\"datawvbqbytyijxkuc\"},{\"name\":\"pqp\",\"value\":\"dataxkayvxegiufjnjg\"}],\"\":{\"unuvawmxx\":\"datajppbalcftiwbd\",\"pzqrb\":\"datao\",\"wrufiouafxp\":\"datayza\"}}")
            .toObject(DataLakeAnalyticsUsqlActivity.class);
        Assertions.assertEquals("kzmfmgboyliopbo", model.name());
        Assertions.assertEquals("faiyvmpfebsummy", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("xsdup", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("pfskqwjlohkaffyn", model.userProperties().get(0).name());
        Assertions.assertEquals("mf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1593239802, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("ujtnnd", model.scriptLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataLakeAnalyticsUsqlActivity model = new DataLakeAnalyticsUsqlActivity().withName("kzmfmgboyliopbo")
            .withDescription("faiyvmpfebsummy")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("xsdup")
                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("pfskqwjlohkaffyn").withValue("datawvbqbytyijxkuc"),
                    new UserProperty().withName("pqp").withValue("dataxkayvxegiufjnjg")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("mf")
                .withParameters(mapOf("ybdivxvxw", "dataefkhki", "czco", "datafmqzndlgqtuq")))
            .withPolicy(new ActivityPolicy().withTimeout("datacwtxaafcvqhmsdo")
                .withRetry("datarzsninkhbm")
                .withRetryIntervalInSeconds(1593239802)
                .withSecureInput(false)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withScriptPath("datalfrwym")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("ujtnnd")
                .withParameters(mapOf("pljyt", "datayc", "fxhzvrsrgbfaqg", "dataqbtijybpfwgclppw")))
            .withDegreeOfParallelism("datakisipjgvm")
            .withPriority("dataurr")
            .withParameters(mapOf("bwjopk", "datazbxu", "bwffgconiydgn", "datadubq"))
            .withRuntimeVersion("datagyytn")
            .withCompilationMode("datalankosd");
        model = BinaryData.fromObject(model).toObject(DataLakeAnalyticsUsqlActivity.class);
        Assertions.assertEquals("kzmfmgboyliopbo", model.name());
        Assertions.assertEquals("faiyvmpfebsummy", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("xsdup", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("pfskqwjlohkaffyn", model.userProperties().get(0).name());
        Assertions.assertEquals("mf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1593239802, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("ujtnnd", model.scriptLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
