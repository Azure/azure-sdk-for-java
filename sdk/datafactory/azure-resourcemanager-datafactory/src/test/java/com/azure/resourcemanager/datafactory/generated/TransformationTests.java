// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.Transformation;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TransformationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Transformation model = BinaryData.fromString(
            "{\"name\":\"a\",\"description\":\"mhudfjecehokwcp\",\"dataset\":{\"referenceName\":\"wloesqrggvrbn\",\"parameters\":{\"uwj\":\"datakoilaci\",\"pjlh\":\"datae\"}},\"linkedService\":{\"referenceName\":\"xpzruzythqkk\",\"parameters\":{\"lnx\":\"datagxvellv\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"itmujdtvm\",\"datasetParameters\":\"datayymffhmjp\",\"parameters\":{\"zuvrzmzqmz\":\"datayx\"},\"\":{\"vnmdyfoeboj\":\"databr\"}}}")
            .toObject(Transformation.class);
        Assertions.assertEquals("a", model.name());
        Assertions.assertEquals("mhudfjecehokwcp", model.description());
        Assertions.assertEquals("wloesqrggvrbn", model.dataset().referenceName());
        Assertions.assertEquals("xpzruzythqkk", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("itmujdtvm", model.flowlet().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Transformation model = new Transformation().withName("a")
            .withDescription("mhudfjecehokwcp")
            .withDataset(new DatasetReference().withReferenceName("wloesqrggvrbn")
                .withParameters(mapOf("uwj", "datakoilaci", "pjlh", "datae")))
            .withLinkedService(new LinkedServiceReference().withReferenceName("xpzruzythqkk")
                .withParameters(mapOf("lnx", "datagxvellv")))
            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                .withReferenceName("itmujdtvm")
                .withDatasetParameters("datayymffhmjp")
                .withParameters(mapOf("zuvrzmzqmz", "datayx"))
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(Transformation.class);
        Assertions.assertEquals("a", model.name());
        Assertions.assertEquals("mhudfjecehokwcp", model.description());
        Assertions.assertEquals("wloesqrggvrbn", model.dataset().referenceName());
        Assertions.assertEquals("xpzruzythqkk", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("itmujdtvm", model.flowlet().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
