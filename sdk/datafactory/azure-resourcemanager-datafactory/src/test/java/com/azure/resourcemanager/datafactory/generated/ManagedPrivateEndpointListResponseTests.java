// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ManagedPrivateEndpointResourceInner;
import com.azure.resourcemanager.datafactory.models.ConnectionStateProperties;
import com.azure.resourcemanager.datafactory.models.ManagedPrivateEndpoint;
import com.azure.resourcemanager.datafactory.models.ManagedPrivateEndpointListResponse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedPrivateEndpointListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedPrivateEndpointListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"connectionState\":{\"actionsRequired\":\"dulontacn\",\"description\":\"w\",\"status\":\"htuevrhrljy\"},\"fqdns\":[\"wxhn\",\"duugwbsre\",\"rfqkfuar\",\"nlvhhtklnvnafvv\"],\"groupId\":\"f\",\"isReserved\":false,\"privateLinkResourceId\":\"jboslcqxypok\",\"provisioningState\":\"minqcym\",\"\":{\"dxxewuninv\":\"datagn\",\"h\":\"datadb\",\"tddmf\":\"dataqdtvqecrqctmxx\"}},\"name\":\"uytxzvtznapxban\",\"type\":\"vvoxczytprwnw\",\"etag\":\"oevytlyokr\",\"id\":\"o\"},{\"properties\":{\"connectionState\":{\"actionsRequired\":\"vnsasbcrymodi\",\"description\":\"xkl\",\"status\":\"d\"},\"fqdns\":[\"zpmkmlmvev\",\"xzopjhbzxl\",\"ohrdddt\"],\"groupId\":\"xqbawpc\",\"isReserved\":false,\"privateLinkResourceId\":\"qcy\",\"provisioningState\":\"apqofyuicdhz\",\"\":{\"d\":\"databwwg\"}},\"name\":\"bid\",\"type\":\"m\",\"etag\":\"f\",\"id\":\"fmuvapckccr\"},{\"properties\":{\"connectionState\":{\"actionsRequired\":\"eyoxoyyukphai\",\"description\":\"oir\",\"status\":\"boshbragapyyrmfs\"},\"fqdns\":[\"avbopfp\",\"dbwnu\"],\"groupId\":\"ahxku\",\"isReserved\":true,\"privateLinkResourceId\":\"caac\",\"provisioningState\":\"mmcpug\",\"\":{\"whoqhnlbqnbldxe\":\"dataqepvufhbzeh\",\"orim\":\"dataclgsc\",\"viyfcaabeolhbhlv\":\"datarsrrmoucsofldp\",\"bsxtkcudfbsfarfs\":\"datamxuq\"}},\"name\":\"wlkjxn\",\"type\":\"vwgf\",\"etag\":\"mhqykizmdksa\",\"id\":\"fcluqvo\"},{\"properties\":{\"connectionState\":{\"actionsRequired\":\"cjimryvwgcwwpbmz\",\"description\":\"esyds\",\"status\":\"efoh\"},\"fqdns\":[\"vopwndyqleallk\",\"mtkhlowkxxpvbr\",\"fjmzsyzfho\"],\"groupId\":\"h\",\"isReserved\":true,\"privateLinkResourceId\":\"ychunsjlpjrtwszh\",\"provisioningState\":\"uic\",\"\":{\"dpyflubhv\":\"datatrrmhwrb\",\"lw\":\"dataglrocuy\",\"ooclutnp\":\"datahmem\",\"ujxsglhsr\":\"datamemczjkmmyk\"}},\"name\":\"yejylmbkzudnigrf\",\"type\":\"otjewlpxuzzjgnre\",\"etag\":\"yhqotoihiqakydi\",\"id\":\"brkwpzdqt\"}],\"nextLink\":\"cspodaqax\"}")
            .toObject(ManagedPrivateEndpointListResponse.class);
        Assertions.assertEquals("o", model.value().get(0).id());
        Assertions.assertEquals("wxhn", model.value().get(0).properties().fqdns().get(0));
        Assertions.assertEquals("f", model.value().get(0).properties().groupId());
        Assertions.assertEquals("jboslcqxypok", model.value().get(0).properties().privateLinkResourceId());
        Assertions.assertEquals("cspodaqax", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedPrivateEndpointListResponse model = new ManagedPrivateEndpointListResponse()
            .withValue(Arrays.asList(
                new ManagedPrivateEndpointResourceInner().withId("o")
                    .withProperties(new ManagedPrivateEndpoint().withConnectionState(new ConnectionStateProperties())
                        .withFqdns(Arrays.asList("wxhn", "duugwbsre", "rfqkfuar", "nlvhhtklnvnafvv"))
                        .withGroupId("f")
                        .withPrivateLinkResourceId("jboslcqxypok")
                        .withAdditionalProperties(mapOf("isReserved", false, "provisioningState", "minqcym"))),
                new ManagedPrivateEndpointResourceInner().withId("fmuvapckccr")
                    .withProperties(new ManagedPrivateEndpoint().withConnectionState(new ConnectionStateProperties())
                        .withFqdns(Arrays.asList("zpmkmlmvev", "xzopjhbzxl", "ohrdddt"))
                        .withGroupId("xqbawpc")
                        .withPrivateLinkResourceId("qcy")
                        .withAdditionalProperties(mapOf("isReserved", false, "provisioningState", "apqofyuicdhz"))),
                new ManagedPrivateEndpointResourceInner().withId("fcluqvo")
                    .withProperties(new ManagedPrivateEndpoint().withConnectionState(new ConnectionStateProperties())
                        .withFqdns(Arrays.asList("avbopfp", "dbwnu"))
                        .withGroupId("ahxku")
                        .withPrivateLinkResourceId("caac")
                        .withAdditionalProperties(mapOf("isReserved", true, "provisioningState", "mmcpug"))),
                new ManagedPrivateEndpointResourceInner().withId("brkwpzdqt")
                    .withProperties(new ManagedPrivateEndpoint().withConnectionState(new ConnectionStateProperties())
                        .withFqdns(Arrays.asList("vopwndyqleallk", "mtkhlowkxxpvbr", "fjmzsyzfho"))
                        .withGroupId("h")
                        .withPrivateLinkResourceId("ychunsjlpjrtwszh")
                        .withAdditionalProperties(mapOf("isReserved", true, "provisioningState", "uic")))))
            .withNextLink("cspodaqax");
        model = BinaryData.fromObject(model).toObject(ManagedPrivateEndpointListResponse.class);
        Assertions.assertEquals("o", model.value().get(0).id());
        Assertions.assertEquals("wxhn", model.value().get(0).properties().fqdns().get(0));
        Assertions.assertEquals("f", model.value().get(0).properties().groupId());
        Assertions.assertEquals("jboslcqxypok", model.value().get(0).properties().privateLinkResourceId());
        Assertions.assertEquals("cspodaqax", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
