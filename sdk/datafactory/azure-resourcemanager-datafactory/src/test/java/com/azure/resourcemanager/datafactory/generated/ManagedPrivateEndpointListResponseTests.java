// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ManagedPrivateEndpointResourceInner;
import com.azure.resourcemanager.datafactory.models.ManagedPrivateEndpoint;
import com.azure.resourcemanager.datafactory.models.ManagedPrivateEndpointListResponse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ManagedPrivateEndpointListResponseTests {
    @Test
    public void testDeserialize() {
        ManagedPrivateEndpointListResponse model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"fqdns\":[],\"groupId\":\"d\",\"isReserved\":false,\"privateLinkResourceId\":\"jihy\",\"provisioningState\":\"zphv\",\"\":{}},\"name\":\"y\",\"type\":\"c\",\"etag\":\"upkvipmdsc\",\"id\":\"qupevzh\"}],\"nextLink\":\"totxhojujb\"}")
                .toObject(ManagedPrivateEndpointListResponse.class);
        Assertions.assertEquals("qupevzh", model.value().get(0).id());
        Assertions.assertEquals("d", model.value().get(0).properties().groupId());
        Assertions.assertEquals("jihy", model.value().get(0).properties().privateLinkResourceId());
        Assertions.assertEquals("totxhojujb", model.nextLink());
    }

    @Test
    public void testSerialize() {
        ManagedPrivateEndpointListResponse model =
            new ManagedPrivateEndpointListResponse()
                .withValue(
                    Arrays
                        .asList(
                            new ManagedPrivateEndpointResourceInner()
                                .withId("qupevzh")
                                .withProperties(
                                    new ManagedPrivateEndpoint()
                                        .withFqdns(Arrays.asList())
                                        .withGroupId("d")
                                        .withPrivateLinkResourceId("jihy")
                                        .withAdditionalProperties(
                                            mapOf("isReserved", false, "provisioningState", "zphv")))))
                .withNextLink("totxhojujb");
        model = BinaryData.fromObject(model).toObject(ManagedPrivateEndpointListResponse.class);
        Assertions.assertEquals("qupevzh", model.value().get(0).id());
        Assertions.assertEquals("d", model.value().get(0).properties().groupId());
        Assertions.assertEquals("jihy", model.value().get(0).properties().privateLinkResourceId());
        Assertions.assertEquals("totxhojujb", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
