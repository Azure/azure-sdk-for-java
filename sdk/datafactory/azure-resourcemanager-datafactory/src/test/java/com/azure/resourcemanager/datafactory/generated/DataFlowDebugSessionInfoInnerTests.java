// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.DataFlowDebugSessionInfoInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataFlowDebugSessionInfoInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataFlowDebugSessionInfoInner model = BinaryData.fromString(
            "{\"dataFlowName\":\"lyrtltlaprlt\",\"computeType\":\"atbhjmznn\",\"coreCount\":998957841,\"nodeCount\":421693668,\"integrationRuntimeName\":\"ala\",\"sessionId\":\"lagun\",\"startTime\":\"gfebwlnb\",\"timeToLiveInMinutes\":1797453594,\"lastActivityTime\":\"e\",\"\":{\"yyzglgouwtlmjjy\":\"datazqavbpdqmjx\",\"eytu\":\"dataojqtobaxk\",\"snkq\":\"datalbfjkwr\",\"hdenxaulk\":\"datahsyrqunj\"}}")
            .toObject(DataFlowDebugSessionInfoInner.class);
        Assertions.assertEquals("lyrtltlaprlt", model.dataFlowName());
        Assertions.assertEquals("atbhjmznn", model.computeType());
        Assertions.assertEquals(998957841, model.coreCount());
        Assertions.assertEquals(421693668, model.nodeCount());
        Assertions.assertEquals("ala", model.integrationRuntimeName());
        Assertions.assertEquals("lagun", model.sessionId());
        Assertions.assertEquals("gfebwlnb", model.startTime());
        Assertions.assertEquals(1797453594, model.timeToLiveInMinutes());
        Assertions.assertEquals("e", model.lastActivityTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataFlowDebugSessionInfoInner model = new DataFlowDebugSessionInfoInner().withDataFlowName("lyrtltlaprlt")
            .withComputeType("atbhjmznn")
            .withCoreCount(998957841)
            .withNodeCount(421693668)
            .withIntegrationRuntimeName("ala")
            .withSessionId("lagun")
            .withStartTime("gfebwlnb")
            .withTimeToLiveInMinutes(1797453594)
            .withLastActivityTime("e")
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(DataFlowDebugSessionInfoInner.class);
        Assertions.assertEquals("lyrtltlaprlt", model.dataFlowName());
        Assertions.assertEquals("atbhjmznn", model.computeType());
        Assertions.assertEquals(998957841, model.coreCount());
        Assertions.assertEquals(421693668, model.nodeCount());
        Assertions.assertEquals("ala", model.integrationRuntimeName());
        Assertions.assertEquals("lagun", model.sessionId());
        Assertions.assertEquals("gfebwlnb", model.startTime());
        Assertions.assertEquals(1797453594, model.timeToLiveInMinutes());
        Assertions.assertEquals("e", model.lastActivityTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
