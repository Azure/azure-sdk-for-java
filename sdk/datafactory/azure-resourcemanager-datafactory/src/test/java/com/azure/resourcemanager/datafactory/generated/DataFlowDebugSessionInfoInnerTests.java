// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.DataFlowDebugSessionInfoInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DataFlowDebugSessionInfoInnerTests {
    @Test
    public void testDeserialize() {
        DataFlowDebugSessionInfoInner model =
            BinaryData
                .fromString(
                    "{\"dataFlowName\":\"vxndz\",\"computeType\":\"krefajpjo\",\"coreCount\":1325211412,\"nodeCount\":327121713,\"integrationRuntimeName\":\"hgbijt\",\"sessionId\":\"vfxzsjab\",\"startTime\":\"systawfsdjp\",\"timeToLiveInMinutes\":387671304,\"lastActivityTime\":\"bjxbkzbzk\",\"\":{}}")
                .toObject(DataFlowDebugSessionInfoInner.class);
        Assertions.assertEquals("vxndz", model.dataFlowName());
        Assertions.assertEquals("krefajpjo", model.computeType());
        Assertions.assertEquals(1325211412, model.coreCount());
        Assertions.assertEquals(327121713, model.nodeCount());
        Assertions.assertEquals("hgbijt", model.integrationRuntimeName());
        Assertions.assertEquals("vfxzsjab", model.sessionId());
        Assertions.assertEquals("systawfsdjp", model.startTime());
        Assertions.assertEquals(387671304, model.timeToLiveInMinutes());
        Assertions.assertEquals("bjxbkzbzk", model.lastActivityTime());
    }

    @Test
    public void testSerialize() {
        DataFlowDebugSessionInfoInner model =
            new DataFlowDebugSessionInfoInner()
                .withDataFlowName("vxndz")
                .withComputeType("krefajpjo")
                .withCoreCount(1325211412)
                .withNodeCount(327121713)
                .withIntegrationRuntimeName("hgbijt")
                .withSessionId("vfxzsjab")
                .withStartTime("systawfsdjp")
                .withTimeToLiveInMinutes(387671304)
                .withLastActivityTime("bjxbkzbzk")
                .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(DataFlowDebugSessionInfoInner.class);
        Assertions.assertEquals("vxndz", model.dataFlowName());
        Assertions.assertEquals("krefajpjo", model.computeType());
        Assertions.assertEquals(1325211412, model.coreCount());
        Assertions.assertEquals(327121713, model.nodeCount());
        Assertions.assertEquals("hgbijt", model.integrationRuntimeName());
        Assertions.assertEquals("vfxzsjab", model.sessionId());
        Assertions.assertEquals("systawfsdjp", model.startTime());
        Assertions.assertEquals(387671304, model.timeToLiveInMinutes());
        Assertions.assertEquals("bjxbkzbzk", model.lastActivityTime());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
