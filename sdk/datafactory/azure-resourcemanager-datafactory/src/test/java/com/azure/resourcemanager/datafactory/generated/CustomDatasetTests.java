// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomDataset model = BinaryData.fromString(
            "{\"type\":\"CustomDataset\",\"typeProperties\":\"dataekfsrm\",\"description\":\"klajvcfocz\",\"structure\":\"datapejovt\",\"schema\":\"dataxnhwh\",\"linkedServiceName\":{\"referenceName\":\"noyrzaaoeehpmj\",\"parameters\":{\"xc\":\"datajeatea\",\"zkdolrndwdbvxvza\":\"dataxoxdjxldnaryyi\"}},\"parameters\":{\"fthmcxqqxmy\":{\"type\":\"Object\",\"defaultValue\":\"dataqxlun\"},\"a\":{\"type\":\"Object\",\"defaultValue\":\"dataa\"}},\"annotations\":[\"datahrvmzrqrazadi\",\"dataznllaslk\"],\"folder\":{\"name\":\"jqjpv\"},\"\":{\"wbqgroigbsfsgsa\":\"datahxjtgzgtai\",\"xspmrjc\":\"datanwldfmhljq\",\"hsxrznmgsdaluyc\":\"dataryldsxeb\"}}")
            .toObject(CustomDataset.class);
        Assertions.assertEquals("klajvcfocz", model.description());
        Assertions.assertEquals("noyrzaaoeehpmj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("fthmcxqqxmy").type());
        Assertions.assertEquals("jqjpv", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomDataset model = new CustomDataset().withDescription("klajvcfocz")
            .withStructure("datapejovt")
            .withSchema("dataxnhwh")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("noyrzaaoeehpmj")
                .withParameters(mapOf("xc", "datajeatea", "zkdolrndwdbvxvza", "dataxoxdjxldnaryyi")))
            .withParameters(mapOf("fthmcxqqxmy",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataqxlun"), "a",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataa")))
            .withAnnotations(Arrays.asList("datahrvmzrqrazadi", "dataznllaslk"))
            .withFolder(new DatasetFolder().withName("jqjpv"))
            .withTypeProperties("dataekfsrm");
        model = BinaryData.fromObject(model).toObject(CustomDataset.class);
        Assertions.assertEquals("klajvcfocz", model.description());
        Assertions.assertEquals("noyrzaaoeehpmj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("fthmcxqqxmy").type());
        Assertions.assertEquals("jqjpv", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
