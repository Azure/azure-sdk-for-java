// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomDataset model = BinaryData.fromString(
            "{\"type\":\"CustomDataset\",\"typeProperties\":\"dataxvmdr\",\"description\":\"n\",\"structure\":\"dataovazoymdvhhpl\",\"schema\":\"datawwd\",\"linkedServiceName\":{\"referenceName\":\"atveqm\",\"parameters\":{\"armhpwbuklv\":\"dataswzeyxry\",\"aemcezevftmh\":\"datamfasgtlvhqpoilos\",\"okjyghzt\":\"datal\"}},\"parameters\":{\"vwiftd\":{\"type\":\"Array\",\"defaultValue\":\"datatpcflcezsw\"},\"jnqswxd\":{\"type\":\"Int\",\"defaultValue\":\"databfpfhruptsyq\"},\"clqddnhfknebw\":{\"type\":\"Object\",\"defaultValue\":\"datamxqukrcdio\"}},\"annotations\":[\"datapnyzcwyjs\",\"datakaqldqabnwvpa\",\"databqxfbb\",\"datagcfddofxnfb\"],\"folder\":{\"name\":\"yrqaedwovoc\"},\"\":{\"fmi\":\"datagoeayokr\"}}")
            .toObject(CustomDataset.class);
        Assertions.assertEquals("n", model.description());
        Assertions.assertEquals("atveqm", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("vwiftd").type());
        Assertions.assertEquals("yrqaedwovoc", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomDataset model
            = new CustomDataset().withDescription("n")
                .withStructure("dataovazoymdvhhpl")
                .withSchema("datawwd")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("atveqm")
                    .withParameters(mapOf("armhpwbuklv", "dataswzeyxry", "aemcezevftmh", "datamfasgtlvhqpoilos",
                        "okjyghzt", "datal")))
                .withParameters(mapOf("vwiftd",
                    new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datatpcflcezsw"),
                    "jnqswxd",
                    new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("databfpfhruptsyq"),
                    "clqddnhfknebw",
                    new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datamxqukrcdio")))
                .withAnnotations(Arrays.asList("datapnyzcwyjs", "datakaqldqabnwvpa", "databqxfbb", "datagcfddofxnfb"))
                .withFolder(new DatasetFolder().withName("yrqaedwovoc"))
                .withTypeProperties("dataxvmdr");
        model = BinaryData.fromObject(model).toObject(CustomDataset.class);
        Assertions.assertEquals("n", model.description());
        Assertions.assertEquals("atveqm", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("vwiftd").type());
        Assertions.assertEquals("yrqaedwovoc", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
