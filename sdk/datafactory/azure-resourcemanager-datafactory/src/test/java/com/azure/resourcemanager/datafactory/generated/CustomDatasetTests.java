// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomDataset model = BinaryData.fromString(
            "{\"type\":\"owrer\",\"typeProperties\":\"datapulnrfcqufmcihp\",\"description\":\"xptch\",\"structure\":\"datayqqidqimlgbbfjm\",\"schema\":\"datajvxlhmpmh\",\"linkedServiceName\":{\"referenceName\":\"ftyaphq\",\"parameters\":{\"lsn\":\"datay\",\"mcqixuanccqvjf\":\"dataowm\"}},\"parameters\":{\"vmufzgug\":{\"type\":\"Bool\",\"defaultValue\":\"datamquxpjhcfaaradci\"},\"ssnqe\":{\"type\":\"Object\",\"defaultValue\":\"datawala\"},\"xxrwqfmdqecvtamq\":{\"type\":\"String\",\"defaultValue\":\"datatbptgcsma\"}},\"annotations\":[\"datanobfewwpsibx\",\"datavuqoqjrkblndyc\"],\"folder\":{\"name\":\"ycvtqnzjcy\"},\"\":{\"jdleajvmvvlooubs\":\"datahembtbwnalbadpi\",\"upfazusj\":\"dataxipjeopskgocjom\"}}")
            .toObject(CustomDataset.class);
        Assertions.assertEquals("xptch", model.description());
        Assertions.assertEquals("ftyaphq", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("vmufzgug").type());
        Assertions.assertEquals("ycvtqnzjcy", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomDataset model = new CustomDataset().withDescription("xptch")
            .withStructure("datayqqidqimlgbbfjm")
            .withSchema("datajvxlhmpmh")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ftyaphq")
                .withParameters(mapOf("lsn", "datay", "mcqixuanccqvjf", "dataowm")))
            .withParameters(mapOf("vmufzgug",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datamquxpjhcfaaradci"),
                "ssnqe", new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datawala"),
                "xxrwqfmdqecvtamq",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datatbptgcsma")))
            .withAnnotations(Arrays.asList("datanobfewwpsibx", "datavuqoqjrkblndyc"))
            .withFolder(new DatasetFolder().withName("ycvtqnzjcy"))
            .withTypeProperties("datapulnrfcqufmcihp");
        model = BinaryData.fromObject(model).toObject(CustomDataset.class);
        Assertions.assertEquals("xptch", model.description());
        Assertions.assertEquals("ftyaphq", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("vmufzgug").type());
        Assertions.assertEquals("ycvtqnzjcy", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
