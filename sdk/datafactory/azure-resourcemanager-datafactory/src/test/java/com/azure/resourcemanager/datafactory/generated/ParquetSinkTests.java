// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ParquetSink;
import com.azure.resourcemanager.datafactory.models.ParquetWriteSettings;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.HashMap;
import java.util.Map;

public final class ParquetSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ParquetSink model = BinaryData.fromString(
            "{\"type\":\"ParquetSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"dataj\",\"disableMetricsCollection\":\"datacxeosylgjpp\",\"copyBehavior\":\"dataujbqrfwnpwvpnb\",\"\":{\"eaiaycauvlf\":\"dataomck\",\"cxwuyrydlvfnuc\":\"datactjqpzqivfgemvu\",\"rcdumkqhat\":\"datawfljjatjmnd\",\"sskvzvkdd\":\"datakomdyf\"}},\"formatSettings\":{\"type\":\"ParquetWriteSettings\",\"maxRowsPerFile\":\"dataepvjrmkks\",\"fileNamePrefix\":\"datamkbfduawokrhhjy\",\"\":{\"xmbnmjimggzkq\":\"datamuwvsdyruosid\",\"nfbms\":\"datapldrnbjhd\"}},\"writeBatchSize\":\"datatzufk\",\"writeBatchTimeout\":\"dataerbdd\",\"sinkRetryCount\":\"datangdctmjz\",\"sinkRetryWait\":\"dataaeu\",\"maxConcurrentConnections\":\"datagvheqzlqevas\",\"disableMetricsCollection\":\"datagoodfh\",\"\":{\"jlizlzxh\":\"dataegdynydd\",\"sjwawl\":\"datacuglgmfznholaf\",\"yk\":\"dataqmznkcwiok\"}}")
            .toObject(ParquetSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ParquetSink model = new ParquetSink().withWriteBatchSize("datatzufk").withWriteBatchTimeout("dataerbdd")
            .withSinkRetryCount("datangdctmjz").withSinkRetryWait("dataaeu")
            .withMaxConcurrentConnections("datagvheqzlqevas").withDisableMetricsCollection("datagoodfh")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("dataj")
                .withDisableMetricsCollection("datacxeosylgjpp").withCopyBehavior("dataujbqrfwnpwvpnb")
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(new ParquetWriteSettings().withMaxRowsPerFile("dataepvjrmkks")
                .withFileNamePrefix("datamkbfduawokrhhjy"));
        model = BinaryData.fromObject(model).toObject(ParquetSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
