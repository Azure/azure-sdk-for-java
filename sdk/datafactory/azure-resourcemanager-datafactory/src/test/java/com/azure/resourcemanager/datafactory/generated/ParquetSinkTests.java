// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ParquetSink;
import com.azure.resourcemanager.datafactory.models.ParquetWriteSettings;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.HashMap;
import java.util.Map;

public final class ParquetSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ParquetSink model =
            BinaryData
                .fromString(
                    "{\"type\":\"ParquetSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"datakhgatynkih\",\"disableMetricsCollection\":\"dataixyb\",\"copyBehavior\":\"datawjzo\",\"\":{\"unvwvaolfg\":\"dataaenlzjxztgdu\",\"zht\":\"datatczzv\",\"chsrp\":\"dataeuiptud\",\"iokdrjdeyfnq\":\"datajkqfabjuaktshwup\"}},\"formatSettings\":{\"type\":\"ParquetWriteSettings\",\"maxRowsPerFile\":\"dataa\",\"fileNamePrefix\":\"datazpqctuplpkj\",\"\":{\"lu\":\"datanrnzl\",\"varfqverxelquqze\":\"dataoeftrbxomaa\"}},\"writeBatchSize\":\"datavjmllzykalbaum\",\"writeBatchTimeout\":\"datadwqiucpj\",\"sinkRetryCount\":\"datatbss\",\"sinkRetryWait\":\"datajw\",\"maxConcurrentConnections\":\"datal\",\"disableMetricsCollection\":\"dataftt\",\"\":{\"av\":\"datalvrofhhitjhh\",\"uahllmbllshkfdri\":\"datar\",\"r\":\"dataoopfrdfjjrhx\",\"evxbqyavcxjols\":\"datauoqpobwarsdxkwm\"}}")
                .toObject(ParquetSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ParquetSink model =
            new ParquetSink()
                .withWriteBatchSize("datavjmllzykalbaum")
                .withWriteBatchTimeout("datadwqiucpj")
                .withSinkRetryCount("datatbss")
                .withSinkRetryWait("datajw")
                .withMaxConcurrentConnections("datal")
                .withDisableMetricsCollection("dataftt")
                .withStoreSettings(
                    new StoreWriteSettings()
                        .withMaxConcurrentConnections("datakhgatynkih")
                        .withDisableMetricsCollection("dataixyb")
                        .withCopyBehavior("datawjzo")
                        .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
                .withFormatSettings(
                    new ParquetWriteSettings().withMaxRowsPerFile("dataa").withFileNamePrefix("datazpqctuplpkj"));
        model = BinaryData.fromObject(model).toObject(ParquetSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
