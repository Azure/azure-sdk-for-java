// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.ParquetSink;
import com.azure.resourcemanager.datafactory.models.ParquetWriteSettings;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class ParquetSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ParquetSink model = BinaryData.fromString(
            "{\"type\":\"ParquetSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"dataxazuboigorwpbbjz\",\"disableMetricsCollection\":\"dataaqoilgkznnzpvjw\",\"copyBehavior\":\"dataoviceqyrajdvvsa\",\"metadata\":[{\"name\":\"datapercazcchvwwcha\",\"value\":\"datatvotfhhayfxkf\"},{\"name\":\"dataxefzliguw\",\"value\":\"dataszcmfmynljigjc\"},{\"name\":\"dataa\",\"value\":\"datawtivsk\"}],\"\":{\"hbxvvu\":\"datapnpunrvjb\",\"kj\":\"dataq\"}},\"formatSettings\":{\"type\":\"ParquetWriteSettings\",\"maxRowsPerFile\":\"dataajqnsrcqd\",\"fileNamePrefix\":\"datamlqamd\",\"\":{\"r\":\"datakdmr\",\"lsnprda\":\"dataakc\"}},\"writeBatchSize\":\"dataqgabbxexacgmt\",\"writeBatchTimeout\":\"dataxb\",\"sinkRetryCount\":\"databovexsnmww\",\"sinkRetryWait\":\"datamujlsztpygqwkd\",\"maxConcurrentConnections\":\"datasn\",\"disableMetricsCollection\":\"datakci\",\"\":{\"dn\":\"datafejzmyvlbzmngxz\"}}")
            .toObject(ParquetSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ParquetSink model = new ParquetSink().withWriteBatchSize("dataqgabbxexacgmt")
            .withWriteBatchTimeout("dataxb")
            .withSinkRetryCount("databovexsnmww")
            .withSinkRetryWait("datamujlsztpygqwkd")
            .withMaxConcurrentConnections("datasn")
            .withDisableMetricsCollection("datakci")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("dataxazuboigorwpbbjz")
                .withDisableMetricsCollection("dataaqoilgkznnzpvjw")
                .withCopyBehavior("dataoviceqyrajdvvsa")
                .withMetadata(
                    Arrays.asList(new MetadataItem().withName("datapercazcchvwwcha").withValue("datatvotfhhayfxkf"),
                        new MetadataItem().withName("dataxefzliguw").withValue("dataszcmfmynljigjc"),
                        new MetadataItem().withName("dataa").withValue("datawtivsk")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(
                new ParquetWriteSettings().withMaxRowsPerFile("dataajqnsrcqd").withFileNamePrefix("datamlqamd"));
        model = BinaryData.fromObject(model).toObject(ParquetSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
