// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.ParquetSink;
import com.azure.resourcemanager.datafactory.models.ParquetWriteSettings;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class ParquetSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ParquetSink model = BinaryData.fromString(
            "{\"type\":\"ParquetSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"dataoaafksormfhr\",\"disableMetricsCollection\":\"datawxmnrdfjobhrvon\",\"copyBehavior\":\"dataupjmjigypbdfrtas\",\"metadata\":[{\"name\":\"datato\",\"value\":\"dataxojijttsyrxynnfs\"},{\"name\":\"dataycissh\",\"value\":\"dataxft\"}],\"\":{\"durf\":\"datacduq\",\"tzslfrztpnry\":\"dataaawry\",\"rvcighlhddvnobes\":\"dataxxa\",\"ehoucmeuu\":\"datawbtnfqlwcaxjph\"}},\"formatSettings\":{\"type\":\"ParquetWriteSettings\",\"maxRowsPerFile\":\"dataiotlcxofqjnin\",\"fileNamePrefix\":\"datakqekqtiuveaz\",\"\":{\"lspih\":\"datawbiwygwpwquxiqg\",\"fizef\":\"dataxgvviotvoolk\",\"fwaehs\":\"databrndaquxvuf\"}},\"writeBatchSize\":\"datas\",\"writeBatchTimeout\":\"dataavpy\",\"sinkRetryCount\":\"dataeyeblkgupgnstq\",\"sinkRetryWait\":\"dataxfmhioart\",\"maxConcurrentConnections\":\"datahu\",\"disableMetricsCollection\":\"datatqgt\",\"\":{\"nbtnn\":\"datactreotzgkokfztrv\",\"wsbznjngerw\":\"dataamkegyskmh\",\"qzafjycfbdbzbabo\":\"datatlpsswoslqmft\"}}")
            .toObject(ParquetSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ParquetSink model = new ParquetSink().withWriteBatchSize("datas")
            .withWriteBatchTimeout("dataavpy")
            .withSinkRetryCount("dataeyeblkgupgnstq")
            .withSinkRetryWait("dataxfmhioart")
            .withMaxConcurrentConnections("datahu")
            .withDisableMetricsCollection("datatqgt")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("dataoaafksormfhr")
                .withDisableMetricsCollection("datawxmnrdfjobhrvon")
                .withCopyBehavior("dataupjmjigypbdfrtas")
                .withMetadata(Arrays.asList(new MetadataItem().withName("datato").withValue("dataxojijttsyrxynnfs"),
                    new MetadataItem().withName("dataycissh").withValue("dataxft")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(new ParquetWriteSettings().withMaxRowsPerFile("dataiotlcxofqjnin")
                .withFileNamePrefix("datakqekqtiuveaz"));
        model = BinaryData.fromObject(model).toObject(ParquetSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
