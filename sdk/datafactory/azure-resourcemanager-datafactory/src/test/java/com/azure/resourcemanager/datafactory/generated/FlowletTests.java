// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSink;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.Flowlet;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.Transformation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FlowletTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Flowlet model = BinaryData.fromString(
            "{\"type\":\"Flowlet\",\"typeProperties\":{\"sources\":[{\"schemaLinkedService\":{\"referenceName\":\"cvgllixdg\",\"parameters\":{\"hu\":\"datagwewqkjvxprwpxso\"}},\"name\":\"xlcskltez\",\"description\":\"ggg\",\"dataset\":{\"referenceName\":\"fbgrdcgubsrt\",\"parameters\":{\"fcm\":\"datalperpilttjzgc\"}},\"linkedService\":{\"referenceName\":\"fbodetresrgvts\",\"parameters\":{\"ai\":\"dataft\",\"pdxxzetwwz\":\"datamuqkevzgjypanhx\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"tnxlkfhglhr\",\"datasetParameters\":\"datax\",\"parameters\":{\"elqxovppqi\":\"datacrsnhpc\",\"l\":\"dataukklvzrlr\"},\"\":{\"dsyenzsieuscpl\":\"dataetjsczivfqbqna\",\"itdshezsvkolru\":\"datayvdgxlyzk\"}}},{\"schemaLinkedService\":{\"referenceName\":\"ovmozsayebraz\",\"parameters\":{\"kipfsdyepf\":\"datapzbtzuyk\",\"ztgaz\":\"dataocmbezacf\",\"okctgkppgkqzkc\":\"datayqejga\",\"cqvhoejgoiutgwrm\":\"datazmffngdyfcixrh\"}},\"name\":\"a\",\"description\":\"qha\",\"dataset\":{\"referenceName\":\"ntacih\",\"parameters\":{\"aqgrv\":\"datagmipnmliqmvlbhik\",\"dtsdfjy\":\"datapomxpu\",\"mpyzgleo\":\"dataesocwiqbuou\",\"bwwzvdajf\":\"datajsb\"}},\"linkedService\":{\"referenceName\":\"n\",\"parameters\":{\"jjrlhiqlwix\":\"dataaciq\",\"pg\":\"datatbouguxtnd\",\"alapdlndbe\":\"datattbas\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"kixvvlwy\",\"datasetParameters\":\"databb\",\"parameters\":{\"gzfeuzj\":\"datazfjmsp\",\"mi\":\"datajmphfkyezolgj\"},\"\":{\"iadhbatec\":\"datadoccnxshanzb\",\"wiinjdllw\":\"dataatsdohzniucbdaom\",\"g\":\"datatlepowavvqxua\",\"si\":\"dataqwulynkgfcfdru\"}}},{\"schemaLinkedService\":{\"referenceName\":\"xtclhuulriqbyok\",\"parameters\":{\"cdjwsu\":\"databzsxebrslttfy\",\"holhujbfw\":\"dataardnagttpufpbpgn\",\"whdmcvhtbbz\":\"dataiplkysolsyjprxs\"}},\"name\":\"hfvhuwzbxpcqz\",\"description\":\"hotjec\",\"dataset\":{\"referenceName\":\"mx\",\"parameters\":{\"derltfokyksyim\":\"datarrskapbxwieexuy\",\"i\":\"dataccgrvkcxzznn\"}},\"linkedService\":{\"referenceName\":\"rsejegprkj\",\"parameters\":{\"wgxql\":\"datarjmwvvbtuqkxxi\",\"qfkyfhiwvjaqu\":\"dataekotjgxi\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ynvskpajbmgeume\",\"datasetParameters\":\"datajbxcbccwkqmtxa\",\"parameters\":{\"ilg\":\"dataiscr\"},\"\":{\"uqimldahlfxl\":\"dataqrejdaa\"}}},{\"schemaLinkedService\":{\"referenceName\":\"ifmuadjnfsncsk\",\"parameters\":{\"tlcgctjchfjvmy\":\"datashjgczetybnxg\",\"ebecuvlbefv\":\"dataj\"}},\"name\":\"cljkxpyl\",\"description\":\"oxz\",\"dataset\":{\"referenceName\":\"psyxjije\",\"parameters\":{\"wjxildfkcefeyg\":\"datavrbkerdkdkgaw\",\"jo\":\"dataq\"}},\"linkedService\":{\"referenceName\":\"fmn\",\"parameters\":{\"on\":\"datadjnxument\",\"xym\":\"datawhy\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"i\",\"datasetParameters\":\"datatowlhlsycoyb\",\"parameters\":{\"qwmchqohtfxc\":\"datasqubfajcywh\"},\"\":{\"wsmosao\":\"dataukiymjzpwdlvwt\",\"amppultassaekewn\":\"datahq\",\"jlcyizy\":\"datazeajbk\",\"e\":\"datadcvxodkrvfsxxby\"}}}],\"sinks\":[{\"schemaLinkedService\":{\"referenceName\":\"gecpwgoljtzx\",\"parameters\":{\"pjxvazyjf\":\"datasdobygoogxq\",\"djnosdkvibf\":\"datacsa\",\"trnzpducdaaktu\":\"datasgm\",\"oimyfpqd\":\"dataktz\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"kpp\",\"parameters\":{\"ffffg\":\"dataytfvpctfji\",\"ejjk\":\"datauhznwhvuldbk\"}},\"name\":\"igaw\",\"description\":\"zmxjqif\",\"dataset\":{\"referenceName\":\"jjsbcmlzaahzbhur\",\"parameters\":{\"ojusuzgfjzcva\":\"datakolirhh\",\"ahfxwccok\":\"dataxoia\",\"c\":\"dataxkukm\"}},\"linkedService\":{\"referenceName\":\"nuhhoqeqshav\",\"parameters\":{\"yrqolnthbbnkgz\":\"datak\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"drnzkjthf\",\"datasetParameters\":\"datayjncjm\",\"parameters\":{\"pfiddhl\":\"datayfj\",\"ocuselqk\":\"dataufzcqyjmqrfu\",\"sjmrkkhm\":\"datasazrhxuddqmdtff\",\"jawh\":\"datadmdlgyqixokw\"},\"\":{\"qdlcvmyolc\":\"datanqf\",\"tvsnvl\":\"dataymjc\",\"atuwqkokbc\":\"dataqdnzyza\",\"msn\":\"dataothymgobl\"}}},{\"schemaLinkedService\":{\"referenceName\":\"wimaaneakhtmh\",\"parameters\":{\"vkhgv\":\"datayanrfvq\",\"ymhcctopuo\":\"dataogxkfnaoa\",\"hquhczygxvhajp\":\"datayrnskb\",\"xqnwhscoz\":\"datae\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"mvgxsmpknpwir\",\"parameters\":{\"dnmckap\":\"datafewxqouox\",\"cdgmoqu\":\"datahknqiijge\",\"kyow\":\"dataqih\"}},\"name\":\"tjouwhldxwhi\",\"description\":\"roqksmfxm\",\"dataset\":{\"referenceName\":\"prstvkitbfj\",\"parameters\":{\"rqxw\":\"dataotnplfacqocc\",\"a\":\"datatjtdrhutfd\",\"eh\":\"datatxop\"}},\"linkedService\":{\"referenceName\":\"dkmdzgsszx\",\"parameters\":{\"rlsirnccla\":\"datakbbxuh\",\"suxxc\":\"datavoyn\",\"dsaidjanormovdxx\":\"databmyqjog\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"tujmoil\",\"datasetParameters\":\"datawemhdee\",\"parameters\":{\"egrhrh\":\"datalkyozdsfzj\",\"xvgjbfi\":\"dataslejtvxj\"},\"\":{\"moxsa\":\"datanjodfcbjqqwmtq\"}}},{\"schemaLinkedService\":{\"referenceName\":\"xej\",\"parameters\":{\"zsinqbdnddb\":\"datacywnfyszza\",\"jmyitrchwudl\":\"dataozsyvrm\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"eihtpmnoejh\",\"parameters\":{\"rfgxkyd\":\"datamsibzo\",\"hl\":\"datamypgfqvmty\",\"jpewpyjlfx\":\"datakxp\",\"qcrzgeuqxbpia\":\"datam\"}},\"name\":\"w\",\"description\":\"ujegqdtadra\",\"dataset\":{\"referenceName\":\"ddhjkr\",\"parameters\":{\"fpjbqggwe\":\"datazyhgsqtnqsktx\"}},\"linkedService\":{\"referenceName\":\"w\",\"parameters\":{\"bf\":\"datamnc\",\"dfb\":\"datauscstunmlh\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"iichgjsysmvxodgw\",\"datasetParameters\":\"datakzsifcuvb\",\"parameters\":{\"ec\":\"datagcwx\"},\"\":{\"zagbbgiarksykp\":\"datajtrdxr\",\"cdosqkptj\":\"datadqxwabzrwiqrxhac\",\"d\":\"datagkifmmainwh\"}}},{\"schemaLinkedService\":{\"referenceName\":\"pbqwuntobu\",\"parameters\":{\"lw\":\"datazz\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"ydjufbnklbl\",\"parameters\":{\"ytlbtlqhopxouvm\":\"dataegjwdabalfdxaglz\"}},\"name\":\"siflikyypzkgxf\",\"description\":\"myrqsdbpokszan\",\"dataset\":{\"referenceName\":\"wgpterdiuw\",\"parameters\":{\"tsdetjygowifcq\":\"datakskw\",\"gzyy\":\"dataolzkgys\",\"tvdxxhe\":\"datazoxlvoc\",\"zbwaybfmdafbgym\":\"datagmlilwzghjhjvmab\"}},\"linkedService\":{\"referenceName\":\"napreojxrjnbsco\",\"parameters\":{\"neychbjizq\":\"datavi\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"nwdxzedpqlrfbor\",\"datasetParameters\":\"datap\",\"parameters\":{\"pdjtaqh\":\"datafyzavfrbypicdb\"},\"\":{\"njhx\":\"dataazpdg\"}}}],\"transformations\":[{\"name\":\"hmgpczqulpt\",\"description\":\"vcpxtzhigqqbtimp\",\"dataset\":{\"referenceName\":\"blornsih\",\"parameters\":{\"fczmnn\":\"datadsmusuaawjakxwj\"}},\"linkedService\":{\"referenceName\":\"xyxvqban\",\"parameters\":{\"mgm\":\"datatgirnb\",\"p\":\"datadorgmynltw\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"foeajogsy\",\"datasetParameters\":\"dataetamfddrvlkpzwb\",\"parameters\":{\"edbiucvkhhwmjpjb\":\"dataecchdidrmuhkahm\",\"ppiybxv\":\"dataeunxcqrrihufoi\",\"bgk\":\"datanzuz\"},\"\":{\"nhdimjuktirz\":\"datacpiuzvk\",\"gpucdocfq\":\"dataa\"}}},{\"name\":\"lwgofm\",\"description\":\"wrjlvzkl\",\"dataset\":{\"referenceName\":\"bgikyjtkakvlbi\",\"parameters\":{\"ptuoska\":\"datavpz\",\"y\":\"dataizjixwfgcd\",\"mdmuqoh\":\"datakcxwnujvqynvavi\",\"wjc\":\"dataihraxqudd\"}},\"linkedService\":{\"referenceName\":\"brhlhpvzadb\",\"parameters\":{\"rmvzti\":\"dataninafhxrz\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"viqlluk\",\"datasetParameters\":\"datarcqxgcbvzarmqc\",\"parameters\":{\"invagovjyhd\":\"datakst\",\"txnmxgnmguz\":\"dataxbrdvcehqwh\",\"kbd\":\"datauwvorbalkjn\",\"gxiynecovagzk\":\"datalltqstqkqs\"},\"\":{\"awzlzklaslgaciz\":\"databanlxunpqcckq\",\"jtighsxj\":\"dataxlrarwpewsaudo\",\"lahovuuwx\":\"dataytnkqb\"}}},{\"name\":\"mehjnhjioti\",\"description\":\"bbcngkeg\",\"dataset\":{\"referenceName\":\"y\",\"parameters\":{\"zox\":\"databfetwily\"}},\"linkedService\":{\"referenceName\":\"xql\",\"parameters\":{\"ewnahwkxjjmzt\":\"datalqownkiua\",\"dhdyswcrptveaj\":\"datalmsoodtmve\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"vlgsrgkrfiz\",\"datasetParameters\":\"dataywlptyuqh\",\"parameters\":{\"ykpfu\":\"datacs\"},\"\":{\"cf\":\"dataxcn\",\"pjprdpwr\":\"datakkpyycpaw\"}}}],\"script\":\"fpcfjf\",\"scriptLines\":[\"gzawk\",\"yep\",\"yamnnidmdiawp\",\"xkzrn\"]},\"description\":\"kctd\",\"annotations\":[\"datasgwqpsqaz\",\"datahqodv\",\"datagcnbhcbmjk\",\"datati\"],\"folder\":{\"name\":\"ynts\"}}")
            .toObject(Flowlet.class);
        Assertions.assertEquals("kctd", model.description());
        Assertions.assertEquals("ynts", model.folder().name());
        Assertions.assertEquals("xlcskltez", model.sources().get(0).name());
        Assertions.assertEquals("ggg", model.sources().get(0).description());
        Assertions.assertEquals("fbgrdcgubsrt", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("fbodetresrgvts", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("tnxlkfhglhr", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("cvgllixdg", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("igaw", model.sinks().get(0).name());
        Assertions.assertEquals("zmxjqif", model.sinks().get(0).description());
        Assertions.assertEquals("jjsbcmlzaahzbhur", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("nuhhoqeqshav", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("drnzkjthf", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("gecpwgoljtzx", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("kpp", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("hmgpczqulpt", model.transformations().get(0).name());
        Assertions.assertEquals("vcpxtzhigqqbtimp", model.transformations().get(0).description());
        Assertions.assertEquals("blornsih", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("xyxvqban", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("foeajogsy", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("fpcfjf", model.script());
        Assertions.assertEquals("gzawk", model.scriptLines().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Flowlet model = new Flowlet().withDescription("kctd")
            .withAnnotations(Arrays.asList("datasgwqpsqaz", "datahqodv", "datagcnbhcbmjk", "datati"))
            .withFolder(new DataFlowFolder().withName("ynts"))
            .withSources(Arrays.asList(
                new DataFlowSource().withName("xlcskltez")
                    .withDescription("ggg")
                    .withDataset(new DatasetReference().withReferenceName("fbgrdcgubsrt")
                        .withParameters(mapOf("fcm", "datalperpilttjzgc")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("fbodetresrgvts")
                        .withParameters(mapOf("ai", "dataft", "pdxxzetwwz", "datamuqkevzgjypanhx")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("tnxlkfhglhr")
                        .withDatasetParameters("datax")
                        .withParameters(mapOf("elqxovppqi", "datacrsnhpc", "l", "dataukklvzrlr"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("cvgllixdg")
                        .withParameters(mapOf("hu", "datagwewqkjvxprwpxso"))),
                new DataFlowSource().withName("a")
                    .withDescription("qha")
                    .withDataset(new DatasetReference().withReferenceName("ntacih")
                        .withParameters(mapOf("aqgrv", "datagmipnmliqmvlbhik", "dtsdfjy", "datapomxpu", "mpyzgleo",
                            "dataesocwiqbuou", "bwwzvdajf", "datajsb")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("n")
                        .withParameters(
                            mapOf("jjrlhiqlwix", "dataaciq", "pg", "datatbouguxtnd", "alapdlndbe", "datattbas")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("kixvvlwy")
                        .withDatasetParameters("databb")
                        .withParameters(mapOf("gzfeuzj", "datazfjmsp", "mi", "datajmphfkyezolgj"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ovmozsayebraz")
                        .withParameters(mapOf("kipfsdyepf", "datapzbtzuyk", "ztgaz", "dataocmbezacf", "okctgkppgkqzkc",
                            "datayqejga", "cqvhoejgoiutgwrm", "datazmffngdyfcixrh"))),
                new DataFlowSource().withName("hfvhuwzbxpcqz")
                    .withDescription("hotjec")
                    .withDataset(new DatasetReference().withReferenceName("mx")
                        .withParameters(mapOf("derltfokyksyim", "datarrskapbxwieexuy", "i", "dataccgrvkcxzznn")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("rsejegprkj")
                        .withParameters(mapOf("wgxql", "datarjmwvvbtuqkxxi", "qfkyfhiwvjaqu", "dataekotjgxi")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("ynvskpajbmgeume")
                        .withDatasetParameters("datajbxcbccwkqmtxa")
                        .withParameters(mapOf("ilg", "dataiscr"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("xtclhuulriqbyok")
                        .withParameters(mapOf("cdjwsu", "databzsxebrslttfy", "holhujbfw", "dataardnagttpufpbpgn",
                            "whdmcvhtbbz", "dataiplkysolsyjprxs"))),
                new DataFlowSource().withName("cljkxpyl")
                    .withDescription("oxz")
                    .withDataset(new DatasetReference().withReferenceName("psyxjije")
                        .withParameters(mapOf("wjxildfkcefeyg", "datavrbkerdkdkgaw", "jo", "dataq")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("fmn")
                        .withParameters(mapOf("on", "datadjnxument", "xym", "datawhy")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("i")
                        .withDatasetParameters("datatowlhlsycoyb")
                        .withParameters(mapOf("qwmchqohtfxc", "datasqubfajcywh"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ifmuadjnfsncsk")
                        .withParameters(mapOf("tlcgctjchfjvmy", "datashjgczetybnxg", "ebecuvlbefv", "dataj")))))
            .withSinks(
                Arrays
                    .asList(
                        new DataFlowSink().withName("igaw")
                            .withDescription("zmxjqif")
                            .withDataset(
                                new DatasetReference().withReferenceName("jjsbcmlzaahzbhur")
                                    .withParameters(mapOf("ojusuzgfjzcva", "datakolirhh", "ahfxwccok", "dataxoia", "c",
                                        "dataxkukm")))
                            .withLinkedService(new LinkedServiceReference().withReferenceName("nuhhoqeqshav")
                                .withParameters(mapOf("yrqolnthbbnkgz", "datak")))
                            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                .withReferenceName("drnzkjthf")
                                .withDatasetParameters("datayjncjm")
                                .withParameters(mapOf("pfiddhl", "datayfj", "ocuselqk", "dataufzcqyjmqrfu", "sjmrkkhm",
                                    "datasazrhxuddqmdtff", "jawh", "datadmdlgyqixokw"))
                                .withAdditionalProperties(mapOf()))
                            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("gecpwgoljtzx")
                                .withParameters(mapOf("pjxvazyjf", "datasdobygoogxq", "djnosdkvibf", "datacsa",
                                    "trnzpducdaaktu", "datasgm", "oimyfpqd", "dataktz")))
                            .withRejectedDataLinkedService(new LinkedServiceReference()
                                .withReferenceName("kpp")
                                .withParameters(mapOf("ffffg", "dataytfvpctfji", "ejjk", "datauhznwhvuldbk"))),
                        new DataFlowSink().withName("tjouwhldxwhi")
                            .withDescription("roqksmfxm")
                            .withDataset(new DatasetReference().withReferenceName("prstvkitbfj")
                                .withParameters(
                                    mapOf("rqxw", "dataotnplfacqocc", "a", "datatjtdrhutfd", "eh", "datatxop")))
                            .withLinkedService(new LinkedServiceReference().withReferenceName("dkmdzgsszx")
                                .withParameters(mapOf("rlsirnccla", "datakbbxuh", "suxxc", "datavoyn",
                                    "dsaidjanormovdxx", "databmyqjog")))
                            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                .withReferenceName("tujmoil")
                                .withDatasetParameters("datawemhdee")
                                .withParameters(mapOf("egrhrh", "datalkyozdsfzj", "xvgjbfi", "dataslejtvxj"))
                                .withAdditionalProperties(mapOf()))
                            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("wimaaneakhtmh")
                                .withParameters(mapOf("vkhgv", "datayanrfvq", "ymhcctopuo", "dataogxkfnaoa",
                                    "hquhczygxvhajp", "datayrnskb", "xqnwhscoz", "datae")))
                            .withRejectedDataLinkedService(
                                new LinkedServiceReference().withReferenceName("mvgxsmpknpwir")
                                    .withParameters(mapOf("dnmckap", "datafewxqouox", "cdgmoqu", "datahknqiijge",
                                        "kyow", "dataqih"))),
                        new DataFlowSink().withName("w")
                            .withDescription("ujegqdtadra")
                            .withDataset(new DatasetReference().withReferenceName("ddhjkr")
                                .withParameters(mapOf("fpjbqggwe", "datazyhgsqtnqsktx")))
                            .withLinkedService(new LinkedServiceReference().withReferenceName("w")
                                .withParameters(mapOf("bf", "datamnc", "dfb", "datauscstunmlh")))
                            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                .withReferenceName("iichgjsysmvxodgw")
                                .withDatasetParameters("datakzsifcuvb")
                                .withParameters(mapOf("ec", "datagcwx"))
                                .withAdditionalProperties(mapOf()))
                            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("xej")
                                .withParameters(mapOf("zsinqbdnddb", "datacywnfyszza", "jmyitrchwudl", "dataozsyvrm")))
                            .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("eihtpmnoejh")
                                .withParameters(mapOf("rfgxkyd", "datamsibzo", "hl", "datamypgfqvmty", "jpewpyjlfx",
                                    "datakxp", "qcrzgeuqxbpia", "datam"))),
                        new DataFlowSink().withName("siflikyypzkgxf")
                            .withDescription("myrqsdbpokszan")
                            .withDataset(new DatasetReference().withReferenceName("wgpterdiuw")
                                .withParameters(mapOf("tsdetjygowifcq", "datakskw", "gzyy", "dataolzkgys", "tvdxxhe",
                                    "datazoxlvoc", "zbwaybfmdafbgym", "datagmlilwzghjhjvmab")))
                            .withLinkedService(new LinkedServiceReference().withReferenceName("napreojxrjnbsco")
                                .withParameters(mapOf("neychbjizq", "datavi")))
                            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                .withReferenceName("nwdxzedpqlrfbor")
                                .withDatasetParameters("datap")
                                .withParameters(mapOf("pdjtaqh", "datafyzavfrbypicdb"))
                                .withAdditionalProperties(mapOf()))
                            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("pbqwuntobu")
                                .withParameters(mapOf("lw", "datazz")))
                            .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("ydjufbnklbl")
                                .withParameters(mapOf("ytlbtlqhopxouvm", "dataegjwdabalfdxaglz")))))
            .withTransformations(Arrays.asList(
                new Transformation().withName("hmgpczqulpt")
                    .withDescription("vcpxtzhigqqbtimp")
                    .withDataset(new DatasetReference().withReferenceName("blornsih")
                        .withParameters(mapOf("fczmnn", "datadsmusuaawjakxwj")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("xyxvqban")
                        .withParameters(mapOf("mgm", "datatgirnb", "p", "datadorgmynltw")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("foeajogsy")
                        .withDatasetParameters("dataetamfddrvlkpzwb")
                        .withParameters(mapOf("edbiucvkhhwmjpjb", "dataecchdidrmuhkahm", "ppiybxv",
                            "dataeunxcqrrihufoi", "bgk", "datanzuz"))
                        .withAdditionalProperties(mapOf())),
                new Transformation().withName("lwgofm")
                    .withDescription("wrjlvzkl")
                    .withDataset(new DatasetReference().withReferenceName("bgikyjtkakvlbi")
                        .withParameters(mapOf("ptuoska", "datavpz", "y", "dataizjixwfgcd", "mdmuqoh",
                            "datakcxwnujvqynvavi", "wjc", "dataihraxqudd")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("brhlhpvzadb")
                        .withParameters(mapOf("rmvzti", "dataninafhxrz")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("viqlluk")
                        .withDatasetParameters("datarcqxgcbvzarmqc")
                        .withParameters(mapOf("invagovjyhd", "datakst", "txnmxgnmguz", "dataxbrdvcehqwh", "kbd",
                            "datauwvorbalkjn", "gxiynecovagzk", "datalltqstqkqs"))
                        .withAdditionalProperties(mapOf())),
                new Transformation().withName("mehjnhjioti")
                    .withDescription("bbcngkeg")
                    .withDataset(
                        new DatasetReference().withReferenceName("y").withParameters(mapOf("zox", "databfetwily")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("xql")
                        .withParameters(mapOf("ewnahwkxjjmzt", "datalqownkiua", "dhdyswcrptveaj", "datalmsoodtmve")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("vlgsrgkrfiz")
                        .withDatasetParameters("dataywlptyuqh")
                        .withParameters(mapOf("ykpfu", "datacs"))
                        .withAdditionalProperties(mapOf()))))
            .withScript("fpcfjf")
            .withScriptLines(Arrays.asList("gzawk", "yep", "yamnnidmdiawp", "xkzrn"));
        model = BinaryData.fromObject(model).toObject(Flowlet.class);
        Assertions.assertEquals("kctd", model.description());
        Assertions.assertEquals("ynts", model.folder().name());
        Assertions.assertEquals("xlcskltez", model.sources().get(0).name());
        Assertions.assertEquals("ggg", model.sources().get(0).description());
        Assertions.assertEquals("fbgrdcgubsrt", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("fbodetresrgvts", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("tnxlkfhglhr", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("cvgllixdg", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("igaw", model.sinks().get(0).name());
        Assertions.assertEquals("zmxjqif", model.sinks().get(0).description());
        Assertions.assertEquals("jjsbcmlzaahzbhur", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("nuhhoqeqshav", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("drnzkjthf", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("gecpwgoljtzx", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("kpp", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("hmgpczqulpt", model.transformations().get(0).name());
        Assertions.assertEquals("vcpxtzhigqqbtimp", model.transformations().get(0).description());
        Assertions.assertEquals("blornsih", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("xyxvqban", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("foeajogsy", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("fpcfjf", model.script());
        Assertions.assertEquals("gzawk", model.scriptLines().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
