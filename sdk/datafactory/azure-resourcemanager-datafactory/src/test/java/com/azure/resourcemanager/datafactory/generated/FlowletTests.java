// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSink;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.Flowlet;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.Transformation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FlowletTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Flowlet model = BinaryData.fromString(
            "{\"type\":\"Flowlet\",\"typeProperties\":{\"sources\":[{\"schemaLinkedService\":{\"referenceName\":\"tqi\",\"parameters\":{\"xezppk\":\"datazvsgeafgfosehxlz\",\"zeqtoyrplixlajml\":\"datawaaeskyfjl\",\"evhamfowg\":\"datapq\"}},\"name\":\"btmkekxpkzwaq\",\"description\":\"fqovc\",\"dataset\":{\"referenceName\":\"qbplvfiduszte\",\"parameters\":{\"msfe\":\"datayj\",\"ihpq\":\"datax\",\"jfowxwy\":\"datadagrhrdicxdw\"}},\"linkedService\":{\"referenceName\":\"c\",\"parameters\":{\"uhoduchvlscrdpib\":\"datagbipcukdveks\",\"szekbh\":\"datadyjdussp\",\"hbfrnuybfflj\":\"datalkaaggkr\",\"dusr\":\"dataiimreoagsqta\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"f\",\"datasetParameters\":\"datasqwudohzilfmnli\",\"parameters\":{\"s\":\"datai\",\"hyqgsdrmmttjx\":\"dataeypofqpm\",\"wzm\":\"dataphgerhsmvgoh\",\"imsqywwwmhk\":\"datailrixysf\"},\"\":{\"zduewihapfjii\":\"dataaedrympmlqoin\"}}}],\"sinks\":[{\"schemaLinkedService\":{\"referenceName\":\"iqfl\",\"parameters\":{\"edfsbwc\":\"datahpclb\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"vbvzipbwxgo\",\"parameters\":{\"admskx\":\"datazp\"}},\"name\":\"npd\",\"description\":\"igjsugswhgs\",\"dataset\":{\"referenceName\":\"dkwwn\",\"parameters\":{\"quvwsxbgn\":\"dataoctohzh\"}},\"linkedService\":{\"referenceName\":\"ervqchoadhrsxqvz\",\"parameters\":{\"fajglzrsubklrxhj\":\"dataabdsr\",\"eqq\":\"dataltcetjdvqyd\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ruwdxvqzxoebwgj\",\"datasetParameters\":\"dataibanb\",\"parameters\":{\"xbzrpejplssanb\":\"datawtzvpakloz\",\"nrswgkpjhboyik\":\"datattkgsux\",\"lgw\":\"databhuhk\"},\"\":{\"qzufgsyfejyvdwt\":\"datahueoijyzcqyp\"}}}],\"transformations\":[{\"name\":\"tpq\",\"description\":\"amkncfgy\",\"dataset\":{\"referenceName\":\"xsnxocuullojk\",\"parameters\":{\"wdjuxdbdljzgdy\":\"datahg\",\"sgzlrqhb\":\"datacvuq\"}},\"linkedService\":{\"referenceName\":\"qogdx\",\"parameters\":{\"minxojjluxxdh\":\"datafpyxxtjlflec\",\"qjm\":\"datalzzdz\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ay\",\"datasetParameters\":\"dataribqlotokh\",\"parameters\":{\"whnkbtl\":\"datataznkcqwwxwjyof\",\"tsnld\":\"dataljssm\",\"eogfgfiijrykwl\":\"datapwolgisubxb\"},\"\":{\"qceazfpxgnmq\":\"datas\"}}},{\"name\":\"zvluyqqaiosss\",\"description\":\"vaifppuacvfy\",\"dataset\":{\"referenceName\":\"w\",\"parameters\":{\"jdhsoy\":\"datax\",\"pboujs\":\"datahpvtyqftteh\",\"suenyg\":\"datakfvvdshxcde\"}},\"linkedService\":{\"referenceName\":\"cgjtfrnquktrfn\",\"parameters\":{\"s\":\"datalr\",\"wntfmtbgwjdxwna\":\"dataylt\",\"etw\":\"datakurrdreyzjwh\",\"kykcyqhyqqzz\":\"datajwzzqseuzu\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"keys\",\"datasetParameters\":\"datawfopazdazg\",\"parameters\":{\"fut\":\"datagpewq\",\"kn\":\"datadpvozglqj\",\"tzeyowmndcovd\":\"datazcl\",\"mk\":\"datazqauxzan\"},\"\":{\"txudqyeme\":\"datauwkudrbcp\"}}},{\"name\":\"unaucm\",\"description\":\"rtneemmja\",\"dataset\":{\"referenceName\":\"cgxefnohaitraniz\",\"parameters\":{\"gfcoc\":\"datagudasmxubvfb\",\"lfmpztr\":\"datafhpri\",\"vhl\":\"dataud\"}},\"linkedService\":{\"referenceName\":\"culregpqt\",\"parameters\":{\"shqrdgrt\":\"datahvrztnvg\",\"fa\":\"datamewjzlpyk\",\"zrransyb\":\"datazwjcaye\",\"nkfscjfn\":\"datalpolwzrghsrle\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"vuagfqwtl\",\"datasetParameters\":\"datagvmreuptrklzmi\",\"parameters\":{\"xfsv\":\"datawo\",\"nwlslrcigtzjcvbx\":\"dataghmp\",\"yxpavidnie\":\"datalapsnsso\",\"slpuxgcbdsva\":\"datawffcvvye\"},\"\":{\"vnjobfelhldiuhzz\":\"dataptwtrkxgpazwugxy\"}}}],\"script\":\"lmfaewzgiudjp\",\"scriptLines\":[\"httqh\",\"mhk\",\"ezsdsuxheq\"]},\"description\":\"cruxspinym\",\"annotations\":[\"datawokmik\",\"dataaz\",\"databmjxuvjipf\",\"datavhax\"],\"folder\":{\"name\":\"zaehpphthd\"}}")
            .toObject(Flowlet.class);
        Assertions.assertEquals("cruxspinym", model.description());
        Assertions.assertEquals("zaehpphthd", model.folder().name());
        Assertions.assertEquals("btmkekxpkzwaq", model.sources().get(0).name());
        Assertions.assertEquals("fqovc", model.sources().get(0).description());
        Assertions.assertEquals("qbplvfiduszte", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("c", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("f", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("tqi", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("npd", model.sinks().get(0).name());
        Assertions.assertEquals("igjsugswhgs", model.sinks().get(0).description());
        Assertions.assertEquals("dkwwn", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("ervqchoadhrsxqvz", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("ruwdxvqzxoebwgj", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("iqfl", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("vbvzipbwxgo", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("tpq", model.transformations().get(0).name());
        Assertions.assertEquals("amkncfgy", model.transformations().get(0).description());
        Assertions.assertEquals("xsnxocuullojk", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("qogdx", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("ay", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("lmfaewzgiudjp", model.script());
        Assertions.assertEquals("httqh", model.scriptLines().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Flowlet model = new Flowlet().withDescription("cruxspinym")
            .withAnnotations(Arrays.asList("datawokmik", "dataaz", "databmjxuvjipf", "datavhax"))
            .withFolder(new DataFlowFolder().withName("zaehpphthd"))
            .withSources(Arrays.asList(new DataFlowSource().withName("btmkekxpkzwaq")
                .withDescription("fqovc")
                .withDataset(new DatasetReference().withReferenceName("qbplvfiduszte")
                    .withParameters(mapOf("msfe", "datayj", "ihpq", "datax", "jfowxwy", "datadagrhrdicxdw")))
                .withLinkedService(new LinkedServiceReference().withReferenceName("c")
                    .withParameters(mapOf("uhoduchvlscrdpib", "datagbipcukdveks", "szekbh", "datadyjdussp",
                        "hbfrnuybfflj", "datalkaaggkr", "dusr", "dataiimreoagsqta")))
                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                    .withReferenceName("f")
                    .withDatasetParameters("datasqwudohzilfmnli")
                    .withParameters(mapOf("s", "datai", "hyqgsdrmmttjx", "dataeypofqpm", "wzm", "dataphgerhsmvgoh",
                        "imsqywwwmhk", "datailrixysf"))
                    .withAdditionalProperties(mapOf()))
                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("tqi")
                    .withParameters(mapOf("xezppk", "datazvsgeafgfosehxlz", "zeqtoyrplixlajml", "datawaaeskyfjl",
                        "evhamfowg", "datapq")))))
            .withSinks(Arrays.asList(new DataFlowSink().withName("npd")
                .withDescription("igjsugswhgs")
                .withDataset(
                    new DatasetReference().withReferenceName("dkwwn").withParameters(mapOf("quvwsxbgn", "dataoctohzh")))
                .withLinkedService(new LinkedServiceReference().withReferenceName("ervqchoadhrsxqvz")
                    .withParameters(mapOf("fajglzrsubklrxhj", "dataabdsr", "eqq", "dataltcetjdvqyd")))
                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                    .withReferenceName("ruwdxvqzxoebwgj")
                    .withDatasetParameters("dataibanb")
                    .withParameters(
                        mapOf("xbzrpejplssanb", "datawtzvpakloz", "nrswgkpjhboyik", "datattkgsux", "lgw", "databhuhk"))
                    .withAdditionalProperties(mapOf()))
                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("iqfl")
                    .withParameters(mapOf("edfsbwc", "datahpclb")))
                .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("vbvzipbwxgo")
                    .withParameters(mapOf("admskx", "datazp")))))
            .withTransformations(Arrays.asList(
                new Transformation().withName("tpq")
                    .withDescription("amkncfgy")
                    .withDataset(new DatasetReference().withReferenceName("xsnxocuullojk")
                        .withParameters(mapOf("wdjuxdbdljzgdy", "datahg", "sgzlrqhb", "datacvuq")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("qogdx")
                        .withParameters(mapOf("minxojjluxxdh", "datafpyxxtjlflec", "qjm", "datalzzdz")))
                    .withFlowlet(
                        new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("ay")
                            .withDatasetParameters("dataribqlotokh")
                            .withParameters(mapOf("whnkbtl", "datataznkcqwwxwjyof", "tsnld", "dataljssm",
                                "eogfgfiijrykwl", "datapwolgisubxb"))
                            .withAdditionalProperties(mapOf())),
                new Transformation().withName("zvluyqqaiosss")
                    .withDescription("vaifppuacvfy")
                    .withDataset(new DatasetReference().withReferenceName("w")
                        .withParameters(
                            mapOf("jdhsoy", "datax", "pboujs", "datahpvtyqftteh", "suenyg", "datakfvvdshxcde")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("cgjtfrnquktrfn")
                        .withParameters(mapOf("s", "datalr", "wntfmtbgwjdxwna", "dataylt", "etw", "datakurrdreyzjwh",
                            "kykcyqhyqqzz", "datajwzzqseuzu")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("keys")
                        .withDatasetParameters("datawfopazdazg")
                        .withParameters(mapOf("fut", "datagpewq", "kn", "datadpvozglqj", "tzeyowmndcovd", "datazcl",
                            "mk", "datazqauxzan"))
                        .withAdditionalProperties(mapOf())),
                new Transformation().withName("unaucm")
                    .withDescription("rtneemmja")
                    .withDataset(new DatasetReference().withReferenceName("cgxefnohaitraniz")
                        .withParameters(mapOf("gfcoc", "datagudasmxubvfb", "lfmpztr", "datafhpri", "vhl", "dataud")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("culregpqt")
                        .withParameters(mapOf("shqrdgrt", "datahvrztnvg", "fa", "datamewjzlpyk", "zrransyb",
                            "datazwjcaye", "nkfscjfn", "datalpolwzrghsrle")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("vuagfqwtl")
                        .withDatasetParameters("datagvmreuptrklzmi")
                        .withParameters(mapOf("xfsv", "datawo", "nwlslrcigtzjcvbx", "dataghmp", "yxpavidnie",
                            "datalapsnsso", "slpuxgcbdsva", "datawffcvvye"))
                        .withAdditionalProperties(mapOf()))))
            .withScript("lmfaewzgiudjp")
            .withScriptLines(Arrays.asList("httqh", "mhk", "ezsdsuxheq"));
        model = BinaryData.fromObject(model).toObject(Flowlet.class);
        Assertions.assertEquals("cruxspinym", model.description());
        Assertions.assertEquals("zaehpphthd", model.folder().name());
        Assertions.assertEquals("btmkekxpkzwaq", model.sources().get(0).name());
        Assertions.assertEquals("fqovc", model.sources().get(0).description());
        Assertions.assertEquals("qbplvfiduszte", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("c", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("f", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("tqi", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("npd", model.sinks().get(0).name());
        Assertions.assertEquals("igjsugswhgs", model.sinks().get(0).description());
        Assertions.assertEquals("dkwwn", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("ervqchoadhrsxqvz", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("ruwdxvqzxoebwgj", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("iqfl", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("vbvzipbwxgo", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("tpq", model.transformations().get(0).name());
        Assertions.assertEquals("amkncfgy", model.transformations().get(0).description());
        Assertions.assertEquals("xsnxocuullojk", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("qogdx", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("ay", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("lmfaewzgiudjp", model.script());
        Assertions.assertEquals("httqh", model.scriptLines().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
