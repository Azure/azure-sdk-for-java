// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSink;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.Flowlet;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.Transformation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FlowletTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Flowlet model = BinaryData.fromString(
            "{\"type\":\"bmptrwtxzu\",\"typeProperties\":{\"sources\":[{\"schemaLinkedService\":{\"referenceName\":\"wnf\",\"parameters\":{\"zsinqbdnddb\":\"dataza\",\"jmyitrchwudl\":\"dataozsyvrm\",\"pmnoejhqlf\":\"dataeeih\"}},\"name\":\"sibz\",\"description\":\"rfgxkyd\",\"dataset\":{\"referenceName\":\"yp\",\"parameters\":{\"jpewpyjlfx\":\"datavmtywhlakxp\",\"qcrzgeuqxbpia\":\"datam\",\"aujegqdtadra\":\"dataw\"}},\"linkedService\":{\"referenceName\":\"ddhjkr\",\"parameters\":{\"fpjbqggwe\":\"datazyhgsqtnqsktx\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"dhd\",\"datasetParameters\":\"datacgbfzuscstun\",\"parameters\":{\"ysmvxodgwxf\":\"dataxdfbklciichgj\",\"ec\":\"datazsifcuvbdujgcwx\"},\"\":{\"zagbbgiarksykp\":\"datajtrdxr\",\"cdosqkptj\":\"datadqxwabzrwiqrxhac\",\"d\":\"datagkifmmainwh\"}}},{\"schemaLinkedService\":{\"referenceName\":\"pbqwuntobu\",\"parameters\":{\"lw\":\"datazz\"}},\"name\":\"vydjufbnk\",\"description\":\"laxp\",\"dataset\":{\"referenceName\":\"jwdabalfd\",\"parameters\":{\"ytlbtlqhopxouvm\":\"datalz\",\"fmy\":\"datasiflikyypzkgxf\"}},\"linkedService\":{\"referenceName\":\"sdbpokszanmh\",\"parameters\":{\"detjygowi\":\"dataterdiuwkirkskwzt\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"polzkgysdgzyy\",\"datasetParameters\":\"dataoxlvocptvdxxheig\",\"parameters\":{\"hjvmabzzbwaybfm\":\"datalwzgh\",\"preojxrjnbsconxa\":\"dataafbgymqtn\"},\"\":{\"sgnwdxzedpq\":\"dataneychbjizq\"}}},{\"schemaLinkedService\":{\"referenceName\":\"fb\",\"parameters\":{\"bypicdbkpdj\":\"dataipmlnfyzavf\"}},\"name\":\"aq\",\"description\":\"mqazpdgonjh\",\"dataset\":{\"referenceName\":\"h\",\"parameters\":{\"vcpxtzhigqqbtimp\":\"datagpczqulptk\",\"rnsihqhudsmus\":\"datajbl\",\"xwjnfcz\":\"dataaawja\",\"os\":\"datanniixyxvqba\"}},\"linkedService\":{\"referenceName\":\"gir\",\"parameters\":{\"dorgmynltw\":\"datamgm\",\"tmfoeajogsyxwet\":\"datap\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ddrvlkpzwbhnrecc\",\"datasetParameters\":\"dataid\",\"parameters\":{\"wmjpjbweunxcqrr\":\"datahkahmjedbiucvkh\",\"oihppi\":\"datahu\"},\"\":{\"iuzvkunhdimju\":\"datavgnzuzpbgkzcsc\",\"zkaugpucdocfqpl\":\"datati\",\"klkvb\":\"datagofmhxwrjlv\",\"shjvpzaptuoskaoi\":\"dataikyjtkakvlb\"}}}],\"sinks\":[{\"schemaLinkedService\":{\"referenceName\":\"wfgcdiykkcxwn\",\"parameters\":{\"qohhihra\":\"dataqynvavitmdm\",\"rhlhpvzadbwenni\":\"dataquddrwjclj\",\"viqlluk\":\"dataafhxrzfrmvztiuc\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"rcqxgcbvzarmqc\",\"parameters\":{\"invagovjyhd\":\"datakst\",\"txnmxgnmguz\":\"dataxbrdvcehqwh\",\"kbd\":\"datauwvorbalkjn\",\"gxiynecovagzk\":\"datalltqstqkqs\"}},\"name\":\"eubanlxunpqcc\",\"description\":\"iawzlzklaslgac\",\"dataset\":{\"referenceName\":\"uxlrarwpe\",\"parameters\":{\"tnkqbala\":\"dataudoejtighsxjp\",\"wxhmehjnhjiot\":\"dataovu\"}},\"linkedService\":{\"referenceName\":\"fbbcngkegxcypxbb\",\"parameters\":{\"lyr\":\"dataw\",\"frolq\":\"dataoxpdxq\",\"u\":\"datawnk\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"wnah\",\"datasetParameters\":\"dataxjjmztnlmsoodtm\",\"parameters\":{\"zxvlgsrgkrfizrp\":\"datadhdyswcrptveaj\",\"yuqh\":\"datawlp\",\"fuofixcnpcfykkp\":\"datalmcskyk\"},\"\":{\"rpcfpcfjfwzl\":\"datapawmpjprdp\",\"wk\":\"dataz\"}}},{\"schemaLinkedService\":{\"referenceName\":\"e\",\"parameters\":{\"mdiawpzx\":\"dataamnni\",\"ntmkctdhuosgwqps\":\"dataz\",\"dvqgcnbhcbmjkz\":\"dataazihq\",\"jmfmeftvhkm\":\"dataibniynts\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"gjrhs\",\"parameters\":{\"fogxhcxnw\":\"datagmjgrul\"}},\"name\":\"tpfdzxcouzfwofwa\",\"description\":\"kzkdtzxsoednlwg\",\"dataset\":{\"referenceName\":\"hezomucmqgisnion\",\"parameters\":{\"uenxkgtlzlmt\":\"datazdrd\",\"zkbnbmxl\":\"datalxcznn\",\"g\":\"datamwt\",\"ahfsgb\":\"dataqzusitoq\"}},\"linkedService\":{\"referenceName\":\"lreesrfwsszvlcwl\",\"parameters\":{\"ipfjwfoygizmshx\":\"datalntfxxcrq\",\"jdzjsjzn\":\"databaizabulnvgskjto\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"qqmqipaydhfn\",\"datasetParameters\":\"datac\",\"parameters\":{\"m\":\"datafshksnyzmspamwb\",\"qdktwtkvihlp\":\"datanlslcef\",\"zhwv\":\"dataliwoyngu\"},\"\":{\"mhjhaus\":\"datap\",\"ekymffztsilscvqs\":\"datab\"}}}],\"transformations\":[{\"name\":\"i\",\"description\":\"ymkouih\",\"dataset\":{\"referenceName\":\"seuugcig\",\"parameters\":{\"mt\":\"datagsmgb\",\"glab\":\"datawrqbebjnfv\",\"nhtfgfi\":\"datavkbiw\"}},\"linkedService\":{\"referenceName\":\"dyhi\",\"parameters\":{\"znhokhoitwhrjsd\":\"dataczmuhbca\",\"zqpxzbawkikcd\":\"datamazdnckidbjpgl\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"bssdpjeyoqxd\",\"datasetParameters\":\"dataecf\",\"parameters\":{\"rshzzbgullcxiqqz\":\"dataagxsurej\",\"ouigdmfivjqte\":\"datakoxdupnamgl\"},\"\":{\"qirvtk\":\"dataqigdydkghpcvr\"}}},{\"name\":\"yhhmvfxl\",\"description\":\"jajodmkrr\",\"dataset\":{\"referenceName\":\"pgqvqo\",\"parameters\":{\"abwlyvx\":\"dataujqgi\",\"aeuhwwsknstvz\":\"datahpqvcts\"}},\"linkedService\":{\"referenceName\":\"hasupmlppdpgzvz\",\"parameters\":{\"ruatsyiysjqhen\":\"datavbkarkptgon\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"eq\",\"datasetParameters\":\"datauba\",\"parameters\":{\"exmnv\":\"datadeayscseydzje\",\"xlniwmcpm\":\"datavmuw\",\"eqjzm\":\"datardlhvdvmiphbe\"},\"\":{\"czfmunerkelux\":\"dataclacr\",\"uzudlevzskejcg\":\"datashxzezb\",\"ard\":\"datafsgqkstyecupyuij\",\"c\":\"datavs\"}}},{\"name\":\"mazpzdqwuzvcmc\",\"description\":\"xizekuvfrjwucao\",\"dataset\":{\"referenceName\":\"vajbvbnkrdemdid\",\"parameters\":{\"damisvpztdi\":\"datazidgzwd\",\"j\":\"dataykpxkqejt\",\"toiboancdr\":\"dataojiunrlshxuknsyk\"}},\"linkedService\":{\"referenceName\":\"anvxuldxonckb\",\"parameters\":{\"weghlwwbogvgfk\":\"datalfxlupibaqzizxzp\",\"fvdstrkzxsgt\":\"dataqiyndveqels\",\"lr\":\"datans\",\"y\":\"datasmovpi\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"oxaxnrqaqotn\",\"datasetParameters\":\"dataxolousdv\",\"parameters\":{\"wz\":\"datatqm\",\"qgkujds\":\"datadrpizfulgyctsdb\",\"eurbtigapdyarik\":\"dataoxrqw\",\"kfqbriqulwwt\":\"dataejdpdfhtwm\"},\"\":{\"h\":\"dataeqkvyhzokpoyu\",\"phmpoejnglpwsada\":\"dataensnaa\"}}}],\"script\":\"sumxpezcoioyj\",\"scriptLines\":[\"qzwqdnxke\",\"dcnwmywxfq\",\"kvemyzdpczaqpqi\"]},\"description\":\"amonatnizex\",\"annotations\":[\"datasqjghrmth\",\"dataplwsttxsrgxfqp\",\"dataniceovxgzwh\",\"dataxyrujmt\"],\"folder\":{\"name\":\"s\"}}")
            .toObject(Flowlet.class);
        Assertions.assertEquals("amonatnizex", model.description());
        Assertions.assertEquals("s", model.folder().name());
        Assertions.assertEquals("sibz", model.sources().get(0).name());
        Assertions.assertEquals("rfgxkyd", model.sources().get(0).description());
        Assertions.assertEquals("yp", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("ddhjkr", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("dhd", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("wnf", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("eubanlxunpqcc", model.sinks().get(0).name());
        Assertions.assertEquals("iawzlzklaslgac", model.sinks().get(0).description());
        Assertions.assertEquals("uxlrarwpe", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("fbbcngkegxcypxbb", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("wnah", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("wfgcdiykkcxwn", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("rcqxgcbvzarmqc", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("i", model.transformations().get(0).name());
        Assertions.assertEquals("ymkouih", model.transformations().get(0).description());
        Assertions.assertEquals("seuugcig", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("dyhi", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("bssdpjeyoqxd", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("sumxpezcoioyj", model.script());
        Assertions.assertEquals("qzwqdnxke", model.scriptLines().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Flowlet model
            = new Flowlet().withDescription("amonatnizex")
                .withAnnotations(Arrays.asList("datasqjghrmth", "dataplwsttxsrgxfqp", "dataniceovxgzwh", "dataxyrujmt"))
                .withFolder(new DataFlowFolder().withName("s"))
                .withSources(
                    Arrays
                        .asList(
                            new DataFlowSource().withName("sibz")
                                .withDescription("rfgxkyd")
                                .withDataset(new DatasetReference().withReferenceName("yp")
                                    .withParameters(mapOf("jpewpyjlfx", "datavmtywhlakxp", "qcrzgeuqxbpia", "datam",
                                        "aujegqdtadra", "dataw")))
                                .withLinkedService(new LinkedServiceReference().withReferenceName("ddhjkr")
                                    .withParameters(mapOf("fpjbqggwe", "datazyhgsqtnqsktx")))
                                .withFlowlet(
                                    new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("dhd")
                                        .withDatasetParameters("datacgbfzuscstun")
                                        .withParameters(
                                            mapOf("ysmvxodgwxf", "dataxdfbklciichgj", "ec", "datazsifcuvbdujgcwx"))
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("wnf")
                                    .withParameters(mapOf("zsinqbdnddb", "dataza", "jmyitrchwudl", "dataozsyvrm",
                                        "pmnoejhqlf", "dataeeih"))),
                            new DataFlowSource().withName("vydjufbnk")
                                .withDescription("laxp")
                                .withDataset(new DatasetReference().withReferenceName("jwdabalfd")
                                    .withParameters(mapOf("ytlbtlqhopxouvm", "datalz", "fmy", "datasiflikyypzkgxf")))
                                .withLinkedService(new LinkedServiceReference().withReferenceName("sdbpokszanmh")
                                    .withParameters(mapOf("detjygowi", "dataterdiuwkirkskwzt")))
                                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                    .withReferenceName("polzkgysdgzyy")
                                    .withDatasetParameters("dataoxlvocptvdxxheig")
                                    .withParameters(mapOf("hjvmabzzbwaybfm", "datalwzgh", "preojxrjnbsconxa",
                                        "dataafbgymqtn"))
                                    .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("pbqwuntobu")
                                    .withParameters(mapOf("lw", "datazz"))),
                            new DataFlowSource().withName("aq")
                                .withDescription("mqazpdgonjh")
                                .withDataset(new DatasetReference().withReferenceName("h")
                                    .withParameters(mapOf("vcpxtzhigqqbtimp", "datagpczqulptk", "rnsihqhudsmus",
                                        "datajbl", "xwjnfcz", "dataaawja", "os", "datanniixyxvqba")))
                                .withLinkedService(new LinkedServiceReference().withReferenceName("gir")
                                    .withParameters(mapOf("dorgmynltw", "datamgm", "tmfoeajogsyxwet", "datap")))
                                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                    .withReferenceName("ddrvlkpzwbhnrecc")
                                    .withDatasetParameters("dataid")
                                    .withParameters(mapOf("wmjpjbweunxcqrr", "datahkahmjedbiucvkh", "oihppi", "datahu"))
                                    .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("fb")
                                    .withParameters(mapOf("bypicdbkpdj", "dataipmlnfyzavf")))))
                .withSinks(
                    Arrays
                        .asList(
                            new DataFlowSink().withName("eubanlxunpqcc")
                                .withDescription("iawzlzklaslgac")
                                .withDataset(new DatasetReference().withReferenceName("uxlrarwpe")
                                    .withParameters(mapOf("tnkqbala", "dataudoejtighsxjp", "wxhmehjnhjiot", "dataovu")))
                                .withLinkedService(new LinkedServiceReference().withReferenceName("fbbcngkegxcypxbb")
                                    .withParameters(mapOf("lyr", "dataw", "frolq", "dataoxpdxq", "u", "datawnk")))
                                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                    .withReferenceName("wnah")
                                    .withDatasetParameters("dataxjjmztnlmsoodtm")
                                    .withParameters(mapOf("zxvlgsrgkrfizrp", "datadhdyswcrptveaj", "yuqh", "datawlp",
                                        "fuofixcnpcfykkp", "datalmcskyk"))
                                    .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(new LinkedServiceReference()
                                    .withReferenceName("wfgcdiykkcxwn")
                                    .withParameters(
                                        mapOf(
                                            "qohhihra", "dataqynvavitmdm", "rhlhpvzadbwenni", "dataquddrwjclj",
                                            "viqlluk", "dataafhxrzfrmvztiuc")))
                                .withRejectedDataLinkedService(
                                    new LinkedServiceReference().withReferenceName("rcqxgcbvzarmqc")
                                        .withParameters(
                                            mapOf("invagovjyhd", "datakst", "txnmxgnmguz", "dataxbrdvcehqwh", "kbd",
                                                "datauwvorbalkjn", "gxiynecovagzk", "datalltqstqkqs"))),
                            new DataFlowSink().withName("tpfdzxcouzfwofwa")
                                .withDescription("kzkdtzxsoednlwg")
                                .withDataset(new DatasetReference().withReferenceName("hezomucmqgisnion")
                                    .withParameters(mapOf("uenxkgtlzlmt", "datazdrd", "zkbnbmxl", "datalxcznn", "g",
                                        "datamwt", "ahfsgb", "dataqzusitoq")))
                                .withLinkedService(
                                    new LinkedServiceReference().withReferenceName("lreesrfwsszvlcwl")
                                        .withParameters(mapOf("ipfjwfoygizmshx", "datalntfxxcrq", "jdzjsjzn",
                                            "databaizabulnvgskjto")))
                                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                    .withReferenceName("qqmqipaydhfn")
                                    .withDatasetParameters("datac")
                                    .withParameters(mapOf("m", "datafshksnyzmspamwb", "qdktwtkvihlp", "datanlslcef",
                                        "zhwv", "dataliwoyngu"))
                                    .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("e")
                                    .withParameters(mapOf("mdiawpzx", "dataamnni", "ntmkctdhuosgwqps", "dataz",
                                        "dvqgcnbhcbmjkz", "dataazihq", "jmfmeftvhkm", "dataibniynts")))
                                .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("gjrhs")
                                    .withParameters(mapOf("fogxhcxnw", "datagmjgrul")))))
                .withTransformations(Arrays.asList(
                    new Transformation().withName("i")
                        .withDescription("ymkouih")
                        .withDataset(new DatasetReference().withReferenceName("seuugcig")
                            .withParameters(mapOf("mt", "datagsmgb", "glab", "datawrqbebjnfv", "nhtfgfi", "datavkbiw")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("dyhi")
                            .withParameters(
                                mapOf("znhokhoitwhrjsd", "dataczmuhbca", "zqpxzbawkikcd", "datamazdnckidbjpgl")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("bssdpjeyoqxd")
                            .withDatasetParameters("dataecf")
                            .withParameters(
                                mapOf("rshzzbgullcxiqqz", "dataagxsurej", "ouigdmfivjqte", "datakoxdupnamgl"))
                            .withAdditionalProperties(mapOf())),
                    new Transformation().withName("yhhmvfxl")
                        .withDescription("jajodmkrr")
                        .withDataset(new DatasetReference().withReferenceName("pgqvqo")
                            .withParameters(mapOf("abwlyvx", "dataujqgi", "aeuhwwsknstvz", "datahpqvcts")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("hasupmlppdpgzvz")
                            .withParameters(mapOf("ruatsyiysjqhen", "datavbkarkptgon")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("eq")
                            .withDatasetParameters("datauba")
                            .withParameters(mapOf("exmnv", "datadeayscseydzje", "xlniwmcpm", "datavmuw", "eqjzm",
                                "datardlhvdvmiphbe"))
                            .withAdditionalProperties(mapOf())),
                    new Transformation().withName("mazpzdqwuzvcmc")
                        .withDescription("xizekuvfrjwucao")
                        .withDataset(new DatasetReference().withReferenceName("vajbvbnkrdemdid")
                            .withParameters(mapOf("damisvpztdi", "datazidgzwd", "j", "dataykpxkqejt", "toiboancdr",
                                "dataojiunrlshxuknsyk")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("anvxuldxonckb")
                            .withParameters(mapOf("weghlwwbogvgfk", "datalfxlupibaqzizxzp", "fvdstrkzxsgt",
                                "dataqiyndveqels", "lr", "datans", "y", "datasmovpi")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("oxaxnrqaqotn")
                            .withDatasetParameters("dataxolousdv")
                            .withParameters(mapOf("wz", "datatqm", "qgkujds", "datadrpizfulgyctsdb", "eurbtigapdyarik",
                                "dataoxrqw", "kfqbriqulwwt", "dataejdpdfhtwm"))
                            .withAdditionalProperties(mapOf()))))
                .withScript("sumxpezcoioyj")
                .withScriptLines(Arrays.asList("qzwqdnxke", "dcnwmywxfq", "kvemyzdpczaqpqi"));
        model = BinaryData.fromObject(model).toObject(Flowlet.class);
        Assertions.assertEquals("amonatnizex", model.description());
        Assertions.assertEquals("s", model.folder().name());
        Assertions.assertEquals("sibz", model.sources().get(0).name());
        Assertions.assertEquals("rfgxkyd", model.sources().get(0).description());
        Assertions.assertEquals("yp", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("ddhjkr", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("dhd", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("wnf", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("eubanlxunpqcc", model.sinks().get(0).name());
        Assertions.assertEquals("iawzlzklaslgac", model.sinks().get(0).description());
        Assertions.assertEquals("uxlrarwpe", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("fbbcngkegxcypxbb", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("wnah", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("wfgcdiykkcxwn", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("rcqxgcbvzarmqc", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("i", model.transformations().get(0).name());
        Assertions.assertEquals("ymkouih", model.transformations().get(0).description());
        Assertions.assertEquals("seuugcig", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("dyhi", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("bssdpjeyoqxd", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("sumxpezcoioyj", model.script());
        Assertions.assertEquals("qzwqdnxke", model.scriptLines().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
