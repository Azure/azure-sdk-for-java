// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowSink;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.Flowlet;
import com.azure.resourcemanager.datafactory.models.Transformation;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class FlowletTests {
    @Test
    public void testDeserialize() {
        Flowlet model =
            BinaryData
                .fromString(
                    "{\"type\":\"Flowlet\",\"typeProperties\":{\"sources\":[{\"name\":\"hrv\",\"description\":\"unzo\"}],\"sinks\":[{\"name\":\"moy\",\"description\":\"dyuib\"}],\"transformations\":[{\"name\":\"zydvfvf\",\"description\":\"naeo\"},{\"name\":\"hmgorffukiscv\",\"description\":\"zhwplefaxvxilc\"},{\"name\":\"hnze\",\"description\":\"xtjjfzqlqhycav\"}],\"script\":\"dbeesmie\",\"scriptLines\":[\"ra\",\"iaa\",\"iuagydwqfbylyrfg\"]},\"description\":\"gtcojocqwo\",\"annotations\":[],\"folder\":{\"name\":\"vusfzld\"}}")
                .toObject(Flowlet.class);
        Assertions.assertEquals("gtcojocqwo", model.description());
        Assertions.assertEquals("vusfzld", model.folder().name());
        Assertions.assertEquals("hrv", model.sources().get(0).name());
        Assertions.assertEquals("unzo", model.sources().get(0).description());
        Assertions.assertEquals("moy", model.sinks().get(0).name());
        Assertions.assertEquals("dyuib", model.sinks().get(0).description());
        Assertions.assertEquals("zydvfvf", model.transformations().get(0).name());
        Assertions.assertEquals("naeo", model.transformations().get(0).description());
        Assertions.assertEquals("dbeesmie", model.script());
        Assertions.assertEquals("ra", model.scriptLines().get(0));
    }

    @Test
    public void testSerialize() {
        Flowlet model =
            new Flowlet()
                .withDescription("gtcojocqwo")
                .withAnnotations(Arrays.asList())
                .withFolder(new DataFlowFolder().withName("vusfzld"))
                .withSources(Arrays.asList(new DataFlowSource().withName("hrv").withDescription("unzo")))
                .withSinks(Arrays.asList(new DataFlowSink().withName("moy").withDescription("dyuib")))
                .withTransformations(
                    Arrays
                        .asList(
                            new Transformation().withName("zydvfvf").withDescription("naeo"),
                            new Transformation().withName("hmgorffukiscv").withDescription("zhwplefaxvxilc"),
                            new Transformation().withName("hnze").withDescription("xtjjfzqlqhycav")))
                .withScript("dbeesmie")
                .withScriptLines(Arrays.asList("ra", "iaa", "iuagydwqfbylyrfg"));
        model = BinaryData.fromObject(model).toObject(Flowlet.class);
        Assertions.assertEquals("gtcojocqwo", model.description());
        Assertions.assertEquals("vusfzld", model.folder().name());
        Assertions.assertEquals("hrv", model.sources().get(0).name());
        Assertions.assertEquals("unzo", model.sources().get(0).description());
        Assertions.assertEquals("moy", model.sinks().get(0).name());
        Assertions.assertEquals("dyuib", model.sinks().get(0).description());
        Assertions.assertEquals("zydvfvf", model.transformations().get(0).name());
        Assertions.assertEquals("naeo", model.transformations().get(0).description());
        Assertions.assertEquals("dbeesmie", model.script());
        Assertions.assertEquals("ra", model.scriptLines().get(0));
    }
}
