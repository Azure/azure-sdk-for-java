// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.PrivateEndpoint;
import com.azure.resourcemanager.datafactory.models.PrivateLinkConnectionApprovalRequest;
import com.azure.resourcemanager.datafactory.models.PrivateLinkConnectionState;
import org.junit.jupiter.api.Assertions;

public final class PrivateLinkConnectionApprovalRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateLinkConnectionApprovalRequest model =
            BinaryData
                .fromString(
                    "{\"privateLinkServiceConnectionState\":{\"status\":\"lrxw\",\"description\":\"aukhfkvcisiz\",\"actionsRequired\":\"a\"},\"privateEndpoint\":{\"id\":\"xjw\"}}")
                .toObject(PrivateLinkConnectionApprovalRequest.class);
        Assertions.assertEquals("lrxw", model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("aukhfkvcisiz", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("a", model.privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("xjw", model.privateEndpoint().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateLinkConnectionApprovalRequest model =
            new PrivateLinkConnectionApprovalRequest()
                .withPrivateLinkServiceConnectionState(
                    new PrivateLinkConnectionState()
                        .withStatus("lrxw")
                        .withDescription("aukhfkvcisiz")
                        .withActionsRequired("a"))
                .withPrivateEndpoint(new PrivateEndpoint().withId("xjw"));
        model = BinaryData.fromObject(model).toObject(PrivateLinkConnectionApprovalRequest.class);
        Assertions.assertEquals("lrxw", model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("aukhfkvcisiz", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("a", model.privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("xjw", model.privateEndpoint().id());
    }
}
