// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.NetezzaTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetezzaTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetezzaTableDataset model = BinaryData.fromString(
            "{\"type\":\"NetezzaTable\",\"typeProperties\":{\"tableName\":\"datamblmfcleuov\",\"table\":\"datavspr\",\"schema\":\"datajtez\"},\"description\":\"toudodexwmvs\",\"structure\":\"datajciexuwemtgtgeb\",\"schema\":\"datamcgsks\",\"linkedServiceName\":{\"referenceName\":\"bsxehaxicjojxol\",\"parameters\":{\"mbglmnlbnatln\":\"datahgwakptb\",\"jk\":\"datahzzcdkxortdzzvhb\",\"dzccqtwsrbfbsd\":\"datahophqwo\",\"vexrvnhhmfsnq\":\"dataicdzf\"}},\"parameters\":{\"sdzmhwtsyppwf\":{\"type\":\"String\",\"defaultValue\":\"datahlwvrs\"},\"aypxsazbxs\":{\"type\":\"Object\",\"defaultValue\":\"dataetxizrfwxhflgdun\"},\"tmprvgrandz\":{\"type\":\"Array\",\"defaultValue\":\"dataksznf\"},\"lhsfddkhxvev\":{\"type\":\"Array\",\"defaultValue\":\"dataomlpczlqboomzgmr\"}},\"annotations\":[\"datanbwaxadxgnp\",\"datahtuhalpq\",\"datald\"],\"folder\":{\"name\":\"kexznpnytkqjarl\"},\"\":{\"rmzoujfgt\":\"datatgtzpca\"}}")
            .toObject(NetezzaTableDataset.class);
        Assertions.assertEquals("toudodexwmvs", model.description());
        Assertions.assertEquals("bsxehaxicjojxol", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("sdzmhwtsyppwf").type());
        Assertions.assertEquals("kexznpnytkqjarl", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetezzaTableDataset model = new NetezzaTableDataset().withDescription("toudodexwmvs")
            .withStructure("datajciexuwemtgtgeb")
            .withSchema("datamcgsks")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("bsxehaxicjojxol")
                .withParameters(mapOf("mbglmnlbnatln", "datahgwakptb", "jk", "datahzzcdkxortdzzvhb", "dzccqtwsrbfbsd",
                    "datahophqwo", "vexrvnhhmfsnq", "dataicdzf")))
            .withParameters(mapOf("sdzmhwtsyppwf",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datahlwvrs"),
                "aypxsazbxs",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataetxizrfwxhflgdun"),
                "tmprvgrandz", new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataksznf"),
                "lhsfddkhxvev",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataomlpczlqboomzgmr")))
            .withAnnotations(Arrays.asList("datanbwaxadxgnp", "datahtuhalpq", "datald"))
            .withFolder(new DatasetFolder().withName("kexznpnytkqjarl"))
            .withTableName("datamblmfcleuov")
            .withTable("datavspr")
            .withSchemaTypePropertiesSchema("datajtez");
        model = BinaryData.fromObject(model).toObject(NetezzaTableDataset.class);
        Assertions.assertEquals("toudodexwmvs", model.description());
        Assertions.assertEquals("bsxehaxicjojxol", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("sdzmhwtsyppwf").type());
        Assertions.assertEquals("kexznpnytkqjarl", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
