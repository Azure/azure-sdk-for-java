// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.NetezzaTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetezzaTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetezzaTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"NetezzaTable\",\"typeProperties\":{\"tableName\":\"datadvfjd\",\"table\":\"dataephtoshqtuar\",\"schema\":\"datagujrcnxaeypyq\"},\"description\":\"zfyasyddqbws\",\"structure\":\"datawyyeomiflrvfe\",\"schema\":\"datactshwfrhhasabvau\",\"linkedServiceName\":{\"referenceName\":\"nwwumkbpg\",\"parameters\":{\"rpdgitenyuksli\":\"databwtpwbjlpfwuq\",\"amrplanch\":\"datampnxg\",\"z\":\"dataotmmxlmxejwyv\",\"sbeqieiuxhj\":\"datajwvtuekbbypqsm\"}},\"parameters\":{\"zyxvta\":{\"type\":\"String\",\"defaultValue\":\"datalnjjhrgkjjpcpih\"},\"urdgc\":{\"type\":\"Float\",\"defaultValue\":\"dataatoidne\"}},\"annotations\":[\"datanaqve\",\"datagnpuelrnanbrpkoc\",\"dataxfbagegjtjltcki\"],\"folder\":{\"name\":\"gfagijxmdbo\"},\"\":{\"invzsod\":\"datahxhahuq\"}}")
                .toObject(NetezzaTableDataset.class);
        Assertions.assertEquals("zfyasyddqbws", model.description());
        Assertions.assertEquals("nwwumkbpg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("zyxvta").type());
        Assertions.assertEquals("gfagijxmdbo", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetezzaTableDataset model =
            new NetezzaTableDataset()
                .withDescription("zfyasyddqbws")
                .withStructure("datawyyeomiflrvfe")
                .withSchema("datactshwfrhhasabvau")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("nwwumkbpg")
                        .withParameters(
                            mapOf(
                                "rpdgitenyuksli",
                                "databwtpwbjlpfwuq",
                                "amrplanch",
                                "datampnxg",
                                "z",
                                "dataotmmxlmxejwyv",
                                "sbeqieiuxhj",
                                "datajwvtuekbbypqsm")))
                .withParameters(
                    mapOf(
                        "zyxvta",
                        new ParameterSpecification()
                            .withType(ParameterType.STRING)
                            .withDefaultValue("datalnjjhrgkjjpcpih"),
                        "urdgc",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataatoidne")))
                .withAnnotations(Arrays.asList("datanaqve", "datagnpuelrnanbrpkoc", "dataxfbagegjtjltcki"))
                .withFolder(new DatasetFolder().withName("gfagijxmdbo"))
                .withTableName("datadvfjd")
                .withTable("dataephtoshqtuar")
                .withSchemaTypePropertiesSchema("datagujrcnxaeypyq");
        model = BinaryData.fromObject(model).toObject(NetezzaTableDataset.class);
        Assertions.assertEquals("zfyasyddqbws", model.description());
        Assertions.assertEquals("nwwumkbpg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("zyxvta").type());
        Assertions.assertEquals("gfagijxmdbo", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
