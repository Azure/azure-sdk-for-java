// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class StoreWriteSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StoreWriteSettings model = BinaryData.fromString(
            "{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"datakoxqbozezx\",\"disableMetricsCollection\":\"datainrguk\",\"copyBehavior\":\"databov\",\"metadata\":[{\"name\":\"dataqlqufkrnrbnjkco\",\"value\":\"datazqlyputawdmdikuf\"},{\"name\":\"datav\",\"value\":\"dataujzofyldxk\"},{\"name\":\"datavfojcvnhpebuiy\",\"value\":\"dataysgq\"},{\"name\":\"databeauvldb\",\"value\":\"datamguifqjtoxz\"}],\"\":{\"aii\":\"datajpzauugdarfumit\",\"wbgmjrvrsq\":\"datamokfdybv\",\"cttvxkxgffpvv\":\"datajcozrwry\"}}")
            .toObject(StoreWriteSettings.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StoreWriteSettings model = new StoreWriteSettings().withMaxConcurrentConnections("datakoxqbozezx")
            .withDisableMetricsCollection("datainrguk").withCopyBehavior("databov")
            .withMetadata(
                Arrays.asList(new MetadataItem().withName("dataqlqufkrnrbnjkco").withValue("datazqlyputawdmdikuf"),
                    new MetadataItem().withName("datav").withValue("dataujzofyldxk"),
                    new MetadataItem().withName("datavfojcvnhpebuiy").withValue("dataysgq"),
                    new MetadataItem().withName("databeauvldb").withValue("datamguifqjtoxz")))
            .withAdditionalProperties(mapOf("type", "StoreWriteSettings"));
        model = BinaryData.fromObject(model).toObject(StoreWriteSettings.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
