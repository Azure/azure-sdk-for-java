// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.IntegrationRuntimeMonitoringDataInner;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeNodeMonitoringData;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeMonitoringDataInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeMonitoringDataInner model = BinaryData.fromString(
            "{\"name\":\"xsbkyvpyca\",\"nodes\":[{\"nodeName\":\"p\",\"availableMemoryInMB\":1414672968,\"cpuUtilization\":172271307,\"concurrentJobsLimit\":1834539320,\"concurrentJobsRunning\":2051758335,\"maxConcurrentJobs\":1514524475,\"sentBytes\":30.272806,\"receivedBytes\":79.5002,\"\":{\"srtslhspkdeem\":\"dataseyvj\",\"ahvljuaha\":\"dataofmxagkvtmelmqkr\"}}]}")
            .toObject(IntegrationRuntimeMonitoringDataInner.class);
        Assertions.assertEquals("xsbkyvpyca", model.name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeMonitoringDataInner model = new IntegrationRuntimeMonitoringDataInner().withName("xsbkyvpyca")
            .withNodes(Arrays.asList(new IntegrationRuntimeNodeMonitoringData()
                .withAdditionalProperties(mapOf("nodeName", "p", "cpuUtilization", 172271307, "receivedBytes", 79.5002f,
                    "concurrentJobsLimit", 1834539320, "concurrentJobsRunning", 2051758335, "maxConcurrentJobs",
                    1514524475, "availableMemoryInMB", 1414672968, "sentBytes", 30.272806f))));
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeMonitoringDataInner.class);
        Assertions.assertEquals("xsbkyvpyca", model.name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
