// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.IntegrationRuntimeMonitoringDataInner;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeNodeMonitoringData;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeMonitoringDataInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeMonitoringDataInner model =
            BinaryData
                .fromString(
                    "{\"name\":\"k\",\"nodes\":[{\"nodeName\":\"io\",\"availableMemoryInMB\":952194839,\"cpuUtilization\":1578257059,\"concurrentJobsLimit\":391809232,\"concurrentJobsRunning\":1039189909,\"maxConcurrentJobs\":1375924345,\"sentBytes\":68.58864,\"receivedBytes\":66.46081,\"\":{\"jooxdjebw\":\"datasowzxcugi\"}}]}")
                .toObject(IntegrationRuntimeMonitoringDataInner.class);
        Assertions.assertEquals("k", model.name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeMonitoringDataInner model =
            new IntegrationRuntimeMonitoringDataInner()
                .withName("k")
                .withNodes(
                    Arrays
                        .asList(
                            new IntegrationRuntimeNodeMonitoringData()
                                .withAdditionalProperties(
                                    mapOf(
                                        "nodeName",
                                        "io",
                                        "cpuUtilization",
                                        1578257059,
                                        "receivedBytes",
                                        66.46081f,
                                        "concurrentJobsLimit",
                                        391809232,
                                        "concurrentJobsRunning",
                                        1039189909,
                                        "maxConcurrentJobs",
                                        1375924345,
                                        "availableMemoryInMB",
                                        952194839,
                                        "sentBytes",
                                        68.58864f))));
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeMonitoringDataInner.class);
        Assertions.assertEquals("k", model.name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
