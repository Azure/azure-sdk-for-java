// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SquareObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SquareObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SquareObjectDataset model = BinaryData.fromString(
            "{\"type\":\"SquareObject\",\"typeProperties\":{\"tableName\":\"dataheexzhhllxwk\"},\"description\":\"oxdjklf\",\"structure\":\"datantk\",\"schema\":\"datay\",\"linkedServiceName\":{\"referenceName\":\"mddslwnlgjdlh\",\"parameters\":{\"s\":\"datapybnnnlpqdn\",\"jerndzzywxqraqx\":\"dataatupmrslwknrdvvm\",\"putl\":\"datakdeetnne\"}},\"parameters\":{\"sxwasfwqjz\":{\"type\":\"Array\",\"defaultValue\":\"datajmr\"},\"cfguam\":{\"type\":\"Int\",\"defaultValue\":\"datafqdnpp\"},\"blukgctvnspjvsy\":{\"type\":\"Array\",\"defaultValue\":\"datamuvkgdwpj\"}},\"annotations\":[\"datalhdukcsqvyeegx\",\"dataulojwumfjdymeq\",\"datanxpfyxdjspnonx\"],\"folder\":{\"name\":\"qpzhna\"},\"\":{\"evtwll\":\"datagcmcvdjlwwe\"}}")
            .toObject(SquareObjectDataset.class);
        Assertions.assertEquals("oxdjklf", model.description());
        Assertions.assertEquals("mddslwnlgjdlh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("sxwasfwqjz").type());
        Assertions.assertEquals("qpzhna", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SquareObjectDataset model
            = new SquareObjectDataset().withDescription("oxdjklf")
                .withStructure("datantk")
                .withSchema("datay")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("mddslwnlgjdlh")
                    .withParameters(mapOf("s", "datapybnnnlpqdn", "jerndzzywxqraqx", "dataatupmrslwknrdvvm", "putl",
                        "datakdeetnne")))
                .withParameters(mapOf("sxwasfwqjz",
                    new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datajmr"), "cfguam",
                    new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datafqdnpp"),
                    "blukgctvnspjvsy",
                    new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datamuvkgdwpj")))
                .withAnnotations(Arrays.asList("datalhdukcsqvyeegx", "dataulojwumfjdymeq", "datanxpfyxdjspnonx"))
                .withFolder(new DatasetFolder().withName("qpzhna"))
                .withTableName("dataheexzhhllxwk");
        model = BinaryData.fromObject(model).toObject(SquareObjectDataset.class);
        Assertions.assertEquals("oxdjklf", model.description());
        Assertions.assertEquals("mddslwnlgjdlh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("sxwasfwqjz").type());
        Assertions.assertEquals("qpzhna", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
