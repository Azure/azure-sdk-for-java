// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SquareObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SquareObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SquareObjectDataset model = BinaryData.fromString(
            "{\"type\":\"SquareObject\",\"typeProperties\":{\"tableName\":\"dataqnneqrypyurvs\"},\"description\":\"ovtuer\",\"structure\":\"datazhbwcxyb\",\"schema\":\"datazycxhaoegjzg\",\"linkedServiceName\":{\"referenceName\":\"ljbnwczsrazcb\",\"parameters\":{\"uapasizzfmugykw\":\"datacqhxhj\",\"gthdzi\":\"dataycuotennd\",\"erwjqvswtwo\":\"datajzffp\"}},\"parameters\":{\"rrsguogk\":{\"type\":\"Object\",\"defaultValue\":\"datamzxvfybxmmrvnuvq\"},\"ftvvqtmvif\":{\"type\":\"Float\",\"defaultValue\":\"dataotpyabensjflw\"},\"xgosnxa\":{\"type\":\"Int\",\"defaultValue\":\"datasimalbmti\"},\"nlsbnucqxhpaqo\":{\"type\":\"Array\",\"defaultValue\":\"datacdfmzxaoxlhmvjc\"}},\"annotations\":[\"dataejoysoxovlznk\",\"dataeldkqdlqqhn\"],\"folder\":{\"name\":\"ykkxa\"},\"\":{\"pxiema\":\"datauptiicgvpzgyxcc\",\"tfmocn\":\"datamztjekxsnnbrysg\"}}")
            .toObject(SquareObjectDataset.class);
        Assertions.assertEquals("ovtuer", model.description());
        Assertions.assertEquals("ljbnwczsrazcb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("rrsguogk").type());
        Assertions.assertEquals("ykkxa", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SquareObjectDataset model = new SquareObjectDataset().withDescription("ovtuer")
            .withStructure("datazhbwcxyb")
            .withSchema("datazycxhaoegjzg")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ljbnwczsrazcb")
                .withParameters(
                    mapOf("uapasizzfmugykw", "datacqhxhj", "gthdzi", "dataycuotennd", "erwjqvswtwo", "datajzffp")))
            .withParameters(mapOf("rrsguogk",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datamzxvfybxmmrvnuvq"),
                "ftvvqtmvif",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataotpyabensjflw"),
                "xgosnxa", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datasimalbmti"),
                "nlsbnucqxhpaqo",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datacdfmzxaoxlhmvjc")))
            .withAnnotations(Arrays.asList("dataejoysoxovlznk", "dataeldkqdlqqhn"))
            .withFolder(new DatasetFolder().withName("ykkxa"))
            .withTableName("dataqnneqrypyurvs");
        model = BinaryData.fromObject(model).toObject(SquareObjectDataset.class);
        Assertions.assertEquals("ovtuer", model.description());
        Assertions.assertEquals("ljbnwczsrazcb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("rrsguogk").type());
        Assertions.assertEquals("ykkxa", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
