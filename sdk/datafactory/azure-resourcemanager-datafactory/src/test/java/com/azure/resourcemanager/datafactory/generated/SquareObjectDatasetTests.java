// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SquareObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SquareObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SquareObjectDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"SquareObject\",\"typeProperties\":{\"tableName\":\"dataktdutydvvgkmo\"},\"description\":\"pcjes\",\"structure\":\"datavuztnsvmsh\",\"schema\":\"datagygfohrm\",\"linkedServiceName\":{\"referenceName\":\"hhlclpkr\",\"parameters\":{\"utivrfnztxtmrm\":\"databmjjv\",\"ii\":\"dataftj\",\"hfh\":\"dataohlgrjcx\"}},\"parameters\":{\"ylyumb\":{\"type\":\"Object\",\"defaultValue\":\"datawfogbv\"}},\"annotations\":[\"datarlnuom\",\"dataxhdkhmemx\"],\"folder\":{\"name\":\"apesnbyoullyfz\"},\"\":{\"g\":\"datarmxxjvwbat\",\"ommdzphxulx\":\"datakmwfwzlmpxfmdjs\"}}")
                .toObject(SquareObjectDataset.class);
        Assertions.assertEquals("pcjes", model.description());
        Assertions.assertEquals("hhlclpkr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("ylyumb").type());
        Assertions.assertEquals("apesnbyoullyfz", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SquareObjectDataset model =
            new SquareObjectDataset()
                .withDescription("pcjes")
                .withStructure("datavuztnsvmsh")
                .withSchema("datagygfohrm")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("hhlclpkr")
                        .withParameters(mapOf("utivrfnztxtmrm", "databmjjv", "ii", "dataftj", "hfh", "dataohlgrjcx")))
                .withParameters(
                    mapOf(
                        "ylyumb",
                        new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datawfogbv")))
                .withAnnotations(Arrays.asList("datarlnuom", "dataxhdkhmemx"))
                .withFolder(new DatasetFolder().withName("apesnbyoullyfz"))
                .withTableName("dataktdutydvvgkmo");
        model = BinaryData.fromObject(model).toObject(SquareObjectDataset.class);
        Assertions.assertEquals("pcjes", model.description());
        Assertions.assertEquals("hhlclpkr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("ylyumb").type());
        Assertions.assertEquals("apesnbyoullyfz", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
