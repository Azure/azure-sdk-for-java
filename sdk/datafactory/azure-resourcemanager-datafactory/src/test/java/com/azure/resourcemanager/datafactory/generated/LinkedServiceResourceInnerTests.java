// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.LinkedServiceResourceInner;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LinkedServiceResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LinkedServiceResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"type\":\"LinkedService\",\"version\":\"hzdxssadbzm\",\"connectVia\":{\"referenceName\":\"dfznudaodv\",\"parameters\":{\"bhhxsrzdzuc\":\"datancblylpst\",\"ntnev\":\"datarsc\",\"tmweriofzpyq\":\"dataiwjmygtdssls\",\"hhszh\":\"dataemwabnet\"}},\"description\":\"plvwiwubmwmbes\",\"parameters\":{\"z\":{\"type\":\"Array\",\"defaultValue\":\"datawtppjflcxogaoko\"}},\"annotations\":[\"dataikvmkqzeqqk\",\"datal\",\"datafzxmhhvhgureodkw\",\"databdagxt\"],\"\":{\"akbogqxndlkzgxh\":\"datadxbx\",\"podxunkb\":\"dataripl\"}},\"name\":\"xmubyyntwlrbq\",\"type\":\"oievseotgqrlltm\",\"etag\":\"lauwzizxbmpgcjef\",\"id\":\"muvp\"}")
            .toObject(LinkedServiceResourceInner.class);
        Assertions.assertEquals("muvp", model.id());
        Assertions.assertEquals("hzdxssadbzm", model.properties().version());
        Assertions.assertEquals("dfznudaodv", model.properties().connectVia().referenceName());
        Assertions.assertEquals("plvwiwubmwmbes", model.properties().description());
        Assertions.assertEquals(ParameterType.ARRAY, model.properties().parameters().get("z").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LinkedServiceResourceInner model = new LinkedServiceResourceInner().withId("muvp")
            .withProperties(new LinkedService().withVersion("hzdxssadbzm")
                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("dfznudaodv")
                    .withParameters(mapOf("bhhxsrzdzuc", "datancblylpst", "ntnev", "datarsc", "tmweriofzpyq",
                        "dataiwjmygtdssls", "hhszh", "dataemwabnet")))
                .withDescription("plvwiwubmwmbes")
                .withParameters(mapOf("z",
                    new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datawtppjflcxogaoko")))
                .withAnnotations(Arrays.asList("dataikvmkqzeqqk", "datal", "datafzxmhhvhgureodkw", "databdagxt"))
                .withAdditionalProperties(mapOf("type", "LinkedService")));
        model = BinaryData.fromObject(model).toObject(LinkedServiceResourceInner.class);
        Assertions.assertEquals("muvp", model.id());
        Assertions.assertEquals("hzdxssadbzm", model.properties().version());
        Assertions.assertEquals("dfznudaodv", model.properties().connectVia().referenceName());
        Assertions.assertEquals("plvwiwubmwmbes", model.properties().description());
        Assertions.assertEquals(ParameterType.ARRAY, model.properties().parameters().get("z").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
