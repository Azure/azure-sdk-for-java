// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.LinkedServiceResourceInner;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class LinkedServiceResourceInnerTests {
    @Test
    public void testDeserialize() {
        LinkedServiceResourceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"type\":\"LinkedService\",\"connectVia\":{\"referenceName\":\"twwrqp\",\"parameters\":{}},\"description\":\"kzywbiex\",\"parameters\":{\"eaxib\":{\"type\":\"String\"},\"wbhqwal\":{\"type\":\"String\"},\"yoxa\":{\"type\":\"String\"},\"kzjancuxrhdwbav\":{\"type\":\"Int\"}},\"annotations\":[],\"\":{}},\"name\":\"jswztsdbpg\",\"type\":\"ytxhp\",\"etag\":\"bzpfzab\",\"id\":\"cuh\"}")
                .toObject(LinkedServiceResourceInner.class);
        Assertions.assertEquals("cuh", model.id());
        Assertions.assertEquals("twwrqp", model.properties().connectVia().referenceName());
        Assertions.assertEquals("kzywbiex", model.properties().description());
        Assertions.assertEquals(ParameterType.STRING, model.properties().parameters().get("eaxib").type());
    }

    @Test
    public void testSerialize() {
        LinkedServiceResourceInner model =
            new LinkedServiceResourceInner()
                .withId("cuh")
                .withProperties(
                    new LinkedService()
                        .withConnectVia(
                            new IntegrationRuntimeReference().withReferenceName("twwrqp").withParameters(mapOf()))
                        .withDescription("kzywbiex")
                        .withParameters(
                            mapOf(
                                "eaxib",
                                new ParameterSpecification().withType(ParameterType.STRING),
                                "wbhqwal",
                                new ParameterSpecification().withType(ParameterType.STRING),
                                "yoxa",
                                new ParameterSpecification().withType(ParameterType.STRING),
                                "kzjancuxrhdwbav",
                                new ParameterSpecification().withType(ParameterType.INT)))
                        .withAnnotations(Arrays.asList())
                        .withAdditionalProperties(mapOf("type", "LinkedService")));
        model = BinaryData.fromObject(model).toObject(LinkedServiceResourceInner.class);
        Assertions.assertEquals("cuh", model.id());
        Assertions.assertEquals("twwrqp", model.properties().connectVia().referenceName());
        Assertions.assertEquals("kzywbiex", model.properties().description());
        Assertions.assertEquals(ParameterType.STRING, model.properties().parameters().get("eaxib").type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
