// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AmazonRdsForSqlServerTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AmazonRdsForSqlServerTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AmazonRdsForSqlServerTableDataset model = BinaryData.fromString(
            "{\"type\":\"AmazonRdsForSqlServerTable\",\"typeProperties\":{\"schema\":\"datawvxcimp\",\"table\":\"datajrmplzmsl\"},\"description\":\"nkn\",\"structure\":\"datauysjhvrr\",\"schema\":\"datafswarmybw\",\"linkedServiceName\":{\"referenceName\":\"rotgeysyq\",\"parameters\":{\"xia\":\"dataehfwwcbf\"}},\"parameters\":{\"yzguaxfhvjixg\":{\"type\":\"String\",\"defaultValue\":\"datacfjisosfzlnraxn\"},\"xdoicqpkntly\":{\"type\":\"SecureString\",\"defaultValue\":\"datadqwsjmihuvrqp\"},\"nsbmzjritukoym\":{\"type\":\"Int\",\"defaultValue\":\"datap\"},\"ndu\":{\"type\":\"Int\",\"defaultValue\":\"dataexmizzjxwjoqfzw\"}},\"annotations\":[\"dataw\",\"datavolxtqmricdsflzb\"],\"folder\":{\"name\":\"mjfgoxedrmra\"},\"\":{\"uzsoowxcsm\":\"datachvvoyiogbntnwz\",\"bsp\":\"datatlcappnvc\"}}")
            .toObject(AmazonRdsForSqlServerTableDataset.class);
        Assertions.assertEquals("nkn", model.description());
        Assertions.assertEquals("rotgeysyq", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("yzguaxfhvjixg").type());
        Assertions.assertEquals("mjfgoxedrmra", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AmazonRdsForSqlServerTableDataset model = new AmazonRdsForSqlServerTableDataset().withDescription("nkn")
            .withStructure("datauysjhvrr")
            .withSchema("datafswarmybw")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("rotgeysyq")
                .withParameters(mapOf("xia", "dataehfwwcbf")))
            .withParameters(mapOf("yzguaxfhvjixg",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datacfjisosfzlnraxn"),
                "xdoicqpkntly",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("datadqwsjmihuvrqp"),
                "nsbmzjritukoym", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datap"),
                "ndu",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataexmizzjxwjoqfzw")))
            .withAnnotations(Arrays.asList("dataw", "datavolxtqmricdsflzb"))
            .withFolder(new DatasetFolder().withName("mjfgoxedrmra"))
            .withSchemaTypePropertiesSchema("datawvxcimp")
            .withTable("datajrmplzmsl");
        model = BinaryData.fromObject(model).toObject(AmazonRdsForSqlServerTableDataset.class);
        Assertions.assertEquals("nkn", model.description());
        Assertions.assertEquals("rotgeysyq", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("yzguaxfhvjixg").type());
        Assertions.assertEquals("mjfgoxedrmra", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
