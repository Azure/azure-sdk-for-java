// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AmazonRdsForSqlServerTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AmazonRdsForSqlServerTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AmazonRdsForSqlServerTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"AmazonRdsForSqlServerTable\",\"typeProperties\":{\"schema\":\"datamhbtqyzycgcmbkyg\",\"table\":\"datajdqosxzmdzlybqfu\"},\"description\":\"ekzfkicx\",\"structure\":\"dataevmnk\",\"schema\":\"datahvsr\",\"linkedServiceName\":{\"referenceName\":\"jokvlwvbjsa\",\"parameters\":{\"a\":\"datavmf\",\"dhgxgiea\":\"datawbpzgfgqp\"}},\"parameters\":{\"uhwyxjsfmaxcebn\":{\"type\":\"Object\",\"defaultValue\":\"dataxavlozukgs\"},\"xpjpvemdf\":{\"type\":\"Bool\",\"defaultValue\":\"dataskemqqerw\"}},\"annotations\":[\"datatu\",\"databrxz\",\"datahyt\"],\"folder\":{\"name\":\"kjgeecwtfma\"},\"\":{\"sl\":\"datamnhtwofxfmhlvyq\",\"iekhjgqq\":\"dataqrmlq\",\"luwozf\":\"dataugwespscvsmsp\"}}")
                .toObject(AmazonRdsForSqlServerTableDataset.class);
        Assertions.assertEquals("ekzfkicx", model.description());
        Assertions.assertEquals("jokvlwvbjsa", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("uhwyxjsfmaxcebn").type());
        Assertions.assertEquals("kjgeecwtfma", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AmazonRdsForSqlServerTableDataset model =
            new AmazonRdsForSqlServerTableDataset()
                .withDescription("ekzfkicx")
                .withStructure("dataevmnk")
                .withSchema("datahvsr")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("jokvlwvbjsa")
                        .withParameters(mapOf("a", "datavmf", "dhgxgiea", "datawbpzgfgqp")))
                .withParameters(
                    mapOf(
                        "uhwyxjsfmaxcebn",
                        new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataxavlozukgs"),
                        "xpjpvemdf",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataskemqqerw")))
                .withAnnotations(Arrays.asList("datatu", "databrxz", "datahyt"))
                .withFolder(new DatasetFolder().withName("kjgeecwtfma"))
                .withSchemaTypePropertiesSchema("datamhbtqyzycgcmbkyg")
                .withTable("datajdqosxzmdzlybqfu");
        model = BinaryData.fromObject(model).toObject(AmazonRdsForSqlServerTableDataset.class);
        Assertions.assertEquals("ekzfkicx", model.description());
        Assertions.assertEquals("jokvlwvbjsa", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("uhwyxjsfmaxcebn").type());
        Assertions.assertEquals("kjgeecwtfma", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
