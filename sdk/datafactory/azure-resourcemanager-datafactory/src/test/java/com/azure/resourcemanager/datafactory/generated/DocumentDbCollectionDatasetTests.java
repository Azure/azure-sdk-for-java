// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DocumentDbCollectionDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DocumentDbCollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DocumentDbCollectionDataset model = BinaryData.fromString(
            "{\"type\":\"DocumentDbCollection\",\"typeProperties\":{\"collectionName\":\"dataflcezs\"},\"description\":\"vwiftd\",\"structure\":\"datavbfpfhru\",\"schema\":\"datasyqcjnqswxdowum\",\"linkedServiceName\":{\"referenceName\":\"qukr\",\"parameters\":{\"eddp\":\"dataohclqddnhfkneb\",\"smkaqldqab\":\"datayzcwy\",\"bbigcfd\":\"datawvpaqbqx\",\"bmjyyrqaedwovoc\":\"dataofxn\"}},\"parameters\":{\"adhed\":{\"type\":\"Float\",\"defaultValue\":\"dataeayokrwfmihw\"}},\"annotations\":[\"databdczvothmkhjao\"],\"folder\":{\"name\":\"wfcn\"},\"\":{\"lhscmyh\":\"datapo\",\"okndwpppqwojoevz\":\"datahjvszfq\",\"zlyvapbkrbuog\":\"dataufytdxmly\",\"cuhaizijv\":\"datatdlt\"}}")
            .toObject(DocumentDbCollectionDataset.class);
        Assertions.assertEquals("vwiftd", model.description());
        Assertions.assertEquals("qukr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("adhed").type());
        Assertions.assertEquals("wfcn", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DocumentDbCollectionDataset model = new DocumentDbCollectionDataset().withDescription("vwiftd")
            .withStructure("datavbfpfhru")
            .withSchema("datasyqcjnqswxdowum")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("qukr")
                .withParameters(mapOf("eddp", "dataohclqddnhfkneb", "smkaqldqab", "datayzcwy", "bbigcfd",
                    "datawvpaqbqx", "bmjyyrqaedwovoc", "dataofxn")))
            .withParameters(mapOf("adhed",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataeayokrwfmihw")))
            .withAnnotations(Arrays.asList("databdczvothmkhjao"))
            .withFolder(new DatasetFolder().withName("wfcn"))
            .withCollectionName("dataflcezs");
        model = BinaryData.fromObject(model).toObject(DocumentDbCollectionDataset.class);
        Assertions.assertEquals("vwiftd", model.description());
        Assertions.assertEquals("qukr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("adhed").type());
        Assertions.assertEquals("wfcn", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
