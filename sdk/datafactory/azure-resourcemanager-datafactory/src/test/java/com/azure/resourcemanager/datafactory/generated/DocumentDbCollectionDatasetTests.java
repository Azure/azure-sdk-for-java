// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DocumentDbCollectionDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DocumentDbCollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DocumentDbCollectionDataset model = BinaryData.fromString(
            "{\"type\":\"DocumentDbCollection\",\"typeProperties\":{\"collectionName\":\"dataja\"},\"description\":\"vzff\",\"structure\":\"datatj\",\"schema\":\"dataoss\",\"linkedServiceName\":{\"referenceName\":\"fjxtvlxxzqfc\",\"parameters\":{\"hjmbji\":\"dataiomxeezw\",\"hpyvdkgdet\":\"dataegmxdbsohc\",\"canzb\":\"dataz\"}},\"parameters\":{\"smuffiwjb\":{\"type\":\"Int\",\"defaultValue\":\"datayckyvne\"},\"scsl\":{\"type\":\"Object\",\"defaultValue\":\"databpzujqjtotdxp\"}},\"annotations\":[\"datausiecktybhjuxid\",\"datahxomilddxjx\",\"dataugxwjwilmqrslaat\"],\"folder\":{\"name\":\"wuj\"},\"\":{\"qqy\":\"dataxqgqwlxrhgtvhv\",\"ejogmkor\":\"databkkteo\",\"ofnqhlbs\":\"datavmvm\",\"yalhtgm\":\"dataosnqliwkmzojfe\"}}")
            .toObject(DocumentDbCollectionDataset.class);
        Assertions.assertEquals("vzff", model.description());
        Assertions.assertEquals("fjxtvlxxzqfc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("smuffiwjb").type());
        Assertions.assertEquals("wuj", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DocumentDbCollectionDataset model = new DocumentDbCollectionDataset().withDescription("vzff")
            .withStructure("datatj")
            .withSchema("dataoss")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("fjxtvlxxzqfc")
                .withParameters(mapOf("hjmbji", "dataiomxeezw", "hpyvdkgdet", "dataegmxdbsohc", "canzb", "dataz")))
            .withParameters(mapOf("smuffiwjb",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datayckyvne"), "scsl",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("databpzujqjtotdxp")))
            .withAnnotations(Arrays.asList("datausiecktybhjuxid", "datahxomilddxjx", "dataugxwjwilmqrslaat"))
            .withFolder(new DatasetFolder().withName("wuj"))
            .withCollectionName("dataja");
        model = BinaryData.fromObject(model).toObject(DocumentDbCollectionDataset.class);
        Assertions.assertEquals("vzff", model.description());
        Assertions.assertEquals("fjxtvlxxzqfc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("smuffiwjb").type());
        Assertions.assertEquals("wuj", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
