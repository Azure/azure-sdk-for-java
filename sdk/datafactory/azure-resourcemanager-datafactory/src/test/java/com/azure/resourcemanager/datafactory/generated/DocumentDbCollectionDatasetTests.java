// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DocumentDbCollectionDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DocumentDbCollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DocumentDbCollectionDataset model = BinaryData.fromString(
            "{\"type\":\"DocumentDbCollection\",\"typeProperties\":{\"collectionName\":\"dataghmmtbtdvucfvvra\"},\"description\":\"eurdeewlsuxp\",\"structure\":\"datawkdwjyjiznioroof\",\"schema\":\"datataspmcrei\",\"linkedServiceName\":{\"referenceName\":\"uftrni\",\"parameters\":{\"wfmsxj\":\"datainuwqxungrob\"}},\"parameters\":{\"ugeerclbltbhpwac\":{\"type\":\"Array\",\"defaultValue\":\"dataxmvzjow\"}},\"annotations\":[\"dataurjwmvwryvdifkii\",\"datagpruccwme\",\"databtxsytrtexeg\"],\"folder\":{\"name\":\"qjywi\"},\"\":{\"ndiloqkajwjuria\":\"dataycfjnc\",\"llanhzc\":\"datasb\",\"ygzkztxfexwacyy\":\"datanjxizbax\"}}")
            .toObject(DocumentDbCollectionDataset.class);
        Assertions.assertEquals("eurdeewlsuxp", model.description());
        Assertions.assertEquals("uftrni", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("ugeerclbltbhpwac").type());
        Assertions.assertEquals("qjywi", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DocumentDbCollectionDataset model = new DocumentDbCollectionDataset().withDescription("eurdeewlsuxp")
            .withStructure("datawkdwjyjiznioroof")
            .withSchema("datataspmcrei")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("uftrni")
                .withParameters(mapOf("wfmsxj", "datainuwqxungrob")))
            .withParameters(mapOf("ugeerclbltbhpwac",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataxmvzjow")))
            .withAnnotations(Arrays.asList("dataurjwmvwryvdifkii", "datagpruccwme", "databtxsytrtexeg"))
            .withFolder(new DatasetFolder().withName("qjywi"))
            .withCollectionName("dataghmmtbtdvucfvvra");
        model = BinaryData.fromObject(model).toObject(DocumentDbCollectionDataset.class);
        Assertions.assertEquals("eurdeewlsuxp", model.description());
        Assertions.assertEquals("uftrni", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("ugeerclbltbhpwac").type());
        Assertions.assertEquals("qjywi", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
