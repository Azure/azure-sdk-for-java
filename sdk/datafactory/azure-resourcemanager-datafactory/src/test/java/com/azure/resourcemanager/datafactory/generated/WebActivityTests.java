// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.WebActivity;
import com.azure.resourcemanager.datafactory.models.WebActivityAuthentication;
import com.azure.resourcemanager.datafactory.models.WebActivityMethod;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class WebActivityTests {
    @Test
    public void testDeserialize() {
        WebActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"WebActivity\",\"typeProperties\":{\"method\":\"PUT\",\"authentication\":{\"type\":\"oc\"},\"disableCertValidation\":false,\"datasets\":[{\"referenceName\":\"adh\",\"parameters\":{}},{\"referenceName\":\"tecaa\",\"parameters\":{}},{\"referenceName\":\"dohzniucbdaombwi\",\"parameters\":{}}],\"linkedServices\":[{\"referenceName\":\"llwkt\",\"parameters\":{}}],\"connectVia\":{\"referenceName\":\"owavvqxuajgcqw\",\"parameters\":{}}},\"linkedServiceName\":{\"referenceName\":\"kgfcfdruws\",\"parameters\":{}},\"policy\":{\"retryIntervalInSeconds\":453247963,\"secureInput\":false,\"secureOutput\":false,\"\":{}},\"name\":\"byokvjgbzsxe\",\"description\":\"slt\",\"dependsOn\":[{\"activity\":\"hcdjwsuoardnagt\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Completed\",\"Completed\"],\"\":{}},{\"activity\":\"nrholhujb\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Failed\"],\"\":{}},{\"activity\":\"ysolsy\",\"dependencyConditions\":[\"Skipped\"],\"\":{}},{\"activity\":\"lwhdmcvhtbb\",\"dependencyConditions\":[\"Completed\"],\"\":{}}],\"userProperties\":[{\"name\":\"wzbxpc\"}],\"\":{}}")
                .toObject(WebActivity.class);
        Assertions.assertEquals("byokvjgbzsxe", model.name());
        Assertions.assertEquals("slt", model.description());
        Assertions.assertEquals("hcdjwsuoardnagt", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wzbxpc", model.userProperties().get(0).name());
        Assertions.assertEquals("kgfcfdruws", model.linkedServiceName().referenceName());
        Assertions.assertEquals(453247963, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(WebActivityMethod.PUT, model.method());
        Assertions.assertEquals("oc", model.authentication().type());
        Assertions.assertEquals(false, model.disableCertValidation());
        Assertions.assertEquals("adh", model.datasets().get(0).referenceName());
        Assertions.assertEquals("llwkt", model.linkedServices().get(0).referenceName());
        Assertions.assertEquals("owavvqxuajgcqw", model.connectVia().referenceName());
    }

    @Test
    public void testSerialize() {
        WebActivity model =
            new WebActivity()
                .withName("byokvjgbzsxe")
                .withDescription("slt")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("hcdjwsuoardnagt")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("nrholhujb")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("ysolsy")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("lwhdmcvhtbb")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("wzbxpc")))
                .withLinkedServiceName(
                    new LinkedServiceReference().withReferenceName("kgfcfdruws").withParameters(mapOf()))
                .withPolicy(
                    new ActivityPolicy()
                        .withRetryIntervalInSeconds(453247963)
                        .withSecureInput(false)
                        .withSecureOutput(false)
                        .withAdditionalProperties(mapOf()))
                .withMethod(WebActivityMethod.PUT)
                .withAuthentication(new WebActivityAuthentication().withType("oc"))
                .withDisableCertValidation(false)
                .withDatasets(
                    Arrays
                        .asList(
                            new DatasetReference().withReferenceName("adh").withParameters(mapOf()),
                            new DatasetReference().withReferenceName("tecaa").withParameters(mapOf()),
                            new DatasetReference().withReferenceName("dohzniucbdaombwi").withParameters(mapOf())))
                .withLinkedServices(
                    Arrays.asList(new LinkedServiceReference().withReferenceName("llwkt").withParameters(mapOf())))
                .withConnectVia(
                    new IntegrationRuntimeReference().withReferenceName("owavvqxuajgcqw").withParameters(mapOf()));
        model = BinaryData.fromObject(model).toObject(WebActivity.class);
        Assertions.assertEquals("byokvjgbzsxe", model.name());
        Assertions.assertEquals("slt", model.description());
        Assertions.assertEquals("hcdjwsuoardnagt", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wzbxpc", model.userProperties().get(0).name());
        Assertions.assertEquals("kgfcfdruws", model.linkedServiceName().referenceName());
        Assertions.assertEquals(453247963, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(WebActivityMethod.PUT, model.method());
        Assertions.assertEquals("oc", model.authentication().type());
        Assertions.assertEquals(false, model.disableCertValidation());
        Assertions.assertEquals("adh", model.datasets().get(0).referenceName());
        Assertions.assertEquals("llwkt", model.linkedServices().get(0).referenceName());
        Assertions.assertEquals("owavvqxuajgcqw", model.connectVia().referenceName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
