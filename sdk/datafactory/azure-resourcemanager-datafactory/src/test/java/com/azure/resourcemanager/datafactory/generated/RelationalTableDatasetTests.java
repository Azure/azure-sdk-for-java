// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.RelationalTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RelationalTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RelationalTableDataset model = BinaryData.fromString(
            "{\"type\":\"d\",\"typeProperties\":{\"tableName\":\"datapkwmamrlfizjud\"},\"description\":\"upngyhy\",\"structure\":\"datayafewcmodxw\",\"schema\":\"dataytxnxrqx\",\"linkedServiceName\":{\"referenceName\":\"tzeargvfvkhbj\",\"parameters\":{\"w\":\"datapjxsd\",\"ynepkt\":\"dataignybffqcw\",\"conyse\":\"datamwg\",\"ouoxfalo\":\"datajijfhpxni\"}},\"parameters\":{\"gfap\":{\"type\":\"Int\",\"defaultValue\":\"datayporsynieunbyd\"}},\"annotations\":[\"dataubwt\",\"dataay\"],\"folder\":{\"name\":\"vjfqreeoxvqjmrn\"},\"\":{\"ivixzhpjg\":\"datahsdbfbm\"}}")
            .toObject(RelationalTableDataset.class);
        Assertions.assertEquals("upngyhy", model.description());
        Assertions.assertEquals("tzeargvfvkhbj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("gfap").type());
        Assertions.assertEquals("vjfqreeoxvqjmrn", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RelationalTableDataset model = new RelationalTableDataset().withDescription("upngyhy")
            .withStructure("datayafewcmodxw")
            .withSchema("dataytxnxrqx")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("tzeargvfvkhbj")
                .withParameters(mapOf("w", "datapjxsd", "ynepkt", "dataignybffqcw", "conyse", "datamwg", "ouoxfalo",
                    "datajijfhpxni")))
            .withParameters(mapOf("gfap",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datayporsynieunbyd")))
            .withAnnotations(Arrays.asList("dataubwt", "dataay"))
            .withFolder(new DatasetFolder().withName("vjfqreeoxvqjmrn"))
            .withTableName("datapkwmamrlfizjud");
        model = BinaryData.fromObject(model).toObject(RelationalTableDataset.class);
        Assertions.assertEquals("upngyhy", model.description());
        Assertions.assertEquals("tzeargvfvkhbj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("gfap").type());
        Assertions.assertEquals("vjfqreeoxvqjmrn", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
