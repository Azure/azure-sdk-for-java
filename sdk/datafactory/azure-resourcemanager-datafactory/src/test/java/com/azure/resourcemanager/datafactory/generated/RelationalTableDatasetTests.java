// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.RelationalTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RelationalTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RelationalTableDataset model = BinaryData.fromString(
            "{\"type\":\"RelationalTable\",\"typeProperties\":{\"tableName\":\"datakxie\"},\"description\":\"lnml\",\"structure\":\"datafcnuestbsli\",\"schema\":\"datadnccotelik\",\"linkedServiceName\":{\"referenceName\":\"iytehhxtzxqdwbym\",\"parameters\":{\"ncrdo\":\"datan\",\"byh\":\"datactysecpekhx\",\"lfymtrts\":\"datatzcvimmwckoz\"}},\"parameters\":{\"rjschjxncqzah\":{\"type\":\"SecureString\",\"defaultValue\":\"datatzckjbcbkgnr\"},\"bimor\":{\"type\":\"Int\",\"defaultValue\":\"databgd\"}},\"annotations\":[\"dataxosgihtrxue\",\"databmxqfgvz\"],\"folder\":{\"name\":\"swshesgcsqose\"},\"\":{\"spfyvslazip\":\"datangoufpizpbmfx\",\"jtyc\":\"datalxgtdu\"}}")
            .toObject(RelationalTableDataset.class);
        Assertions.assertEquals("lnml", model.description());
        Assertions.assertEquals("iytehhxtzxqdwbym", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("rjschjxncqzah").type());
        Assertions.assertEquals("swshesgcsqose", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RelationalTableDataset model = new RelationalTableDataset().withDescription("lnml")
            .withStructure("datafcnuestbsli")
            .withSchema("datadnccotelik")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("iytehhxtzxqdwbym")
                .withParameters(mapOf("ncrdo", "datan", "byh", "datactysecpekhx", "lfymtrts", "datatzcvimmwckoz")))
            .withParameters(mapOf("rjschjxncqzah",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datatzckjbcbkgnr"),
                "bimor", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("databgd")))
            .withAnnotations(Arrays.asList("dataxosgihtrxue", "databmxqfgvz"))
            .withFolder(new DatasetFolder().withName("swshesgcsqose"))
            .withTableName("datakxie");
        model = BinaryData.fromObject(model).toObject(RelationalTableDataset.class);
        Assertions.assertEquals("lnml", model.description());
        Assertions.assertEquals("iytehhxtzxqdwbym", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("rjschjxncqzah").type());
        Assertions.assertEquals("swshesgcsqose", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
