// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SalesforceV2ObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SalesforceV2ObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SalesforceV2ObjectDataset model = BinaryData.fromString(
            "{\"type\":\"SalesforceV2Object\",\"typeProperties\":{\"objectApiName\":\"datahoxfzz\",\"reportId\":\"datamupbus\"},\"description\":\"ugozwplxzgzumnot\",\"structure\":\"dataxkkbygbgiqkwys\",\"schema\":\"databbnhtt\",\"linkedServiceName\":{\"referenceName\":\"izonzsur\",\"parameters\":{\"oxyipdthjfvnh\":\"datajasfzhzzcarci\"}},\"parameters\":{\"ssjgbfbb\":{\"type\":\"Bool\",\"defaultValue\":\"dataputfelfchnu\"}},\"annotations\":[\"dataxxczzunfnbp\"],\"folder\":{\"name\":\"eivkb\"},\"\":{\"nuqhqp\":\"dataepgh\",\"ttfsclgg\":\"datat\",\"bfytnhdnihuzzjuz\":\"datagygn\"}}")
            .toObject(SalesforceV2ObjectDataset.class);
        Assertions.assertEquals("ugozwplxzgzumnot", model.description());
        Assertions.assertEquals("izonzsur", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("ssjgbfbb").type());
        Assertions.assertEquals("eivkb", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SalesforceV2ObjectDataset model = new SalesforceV2ObjectDataset().withDescription("ugozwplxzgzumnot")
            .withStructure("dataxkkbygbgiqkwys")
            .withSchema("databbnhtt")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("izonzsur")
                .withParameters(mapOf("oxyipdthjfvnh", "datajasfzhzzcarci")))
            .withParameters(mapOf("ssjgbfbb",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataputfelfchnu")))
            .withAnnotations(Arrays.asList("dataxxczzunfnbp"))
            .withFolder(new DatasetFolder().withName("eivkb"))
            .withObjectApiName("datahoxfzz")
            .withReportId("datamupbus");
        model = BinaryData.fromObject(model).toObject(SalesforceV2ObjectDataset.class);
        Assertions.assertEquals("ugozwplxzgzumnot", model.description());
        Assertions.assertEquals("izonzsur", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("ssjgbfbb").type());
        Assertions.assertEquals("eivkb", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
