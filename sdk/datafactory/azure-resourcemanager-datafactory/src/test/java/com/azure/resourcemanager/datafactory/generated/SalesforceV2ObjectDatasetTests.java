// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SalesforceV2ObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SalesforceV2ObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SalesforceV2ObjectDataset model = BinaryData.fromString(
            "{\"type\":\"SalesforceV2Object\",\"typeProperties\":{\"objectApiName\":\"dataalrjwaez\",\"reportId\":\"dataybsps\"},\"description\":\"mtcepzimfcfs\",\"structure\":\"datawexpasckpgbmly\",\"schema\":\"datawslxgcmxtoejtq\",\"linkedServiceName\":{\"referenceName\":\"qct\",\"parameters\":{\"zntbpcaddpxqrx\":\"datadkxzxol\",\"jfzizxl\":\"dataperrplfmfvm\"}},\"parameters\":{\"agbahdbtjmku\":{\"type\":\"Float\",\"defaultValue\":\"databarxknfvbsy\"},\"lo\":{\"type\":\"Object\",\"defaultValue\":\"datarklbizrxhuqfvpa\"},\"g\":{\"type\":\"Bool\",\"defaultValue\":\"datavcxgqtquirgo\"},\"uoqhqrcsksxqfhl\":{\"type\":\"SecureString\",\"defaultValue\":\"dataucujtjuzvyjxuxch\"}},\"annotations\":[\"datavdagvyjcdpncvfye\",\"datayodiij\",\"datasapqhipajsniv\",\"datamevljbcuwrfgpjfv\"],\"folder\":{\"name\":\"seodvlmdzgv\"},\"\":{\"crsm\":\"datazzugctygbbmumljv\",\"umnru\":\"dataojmxwc\",\"keqjftvltjop\":\"dataq\"}}")
            .toObject(SalesforceV2ObjectDataset.class);
        Assertions.assertEquals("mtcepzimfcfs", model.description());
        Assertions.assertEquals("qct", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("agbahdbtjmku").type());
        Assertions.assertEquals("seodvlmdzgv", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SalesforceV2ObjectDataset model = new SalesforceV2ObjectDataset().withDescription("mtcepzimfcfs")
            .withStructure("datawexpasckpgbmly")
            .withSchema("datawslxgcmxtoejtq")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("qct")
                .withParameters(mapOf("zntbpcaddpxqrx", "datadkxzxol", "jfzizxl", "dataperrplfmfvm")))
            .withParameters(mapOf("agbahdbtjmku",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("databarxknfvbsy"), "lo",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datarklbizrxhuqfvpa"),
                "g", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datavcxgqtquirgo"),
                "uoqhqrcsksxqfhl",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("dataucujtjuzvyjxuxch")))
            .withAnnotations(
                Arrays.asList("datavdagvyjcdpncvfye", "datayodiij", "datasapqhipajsniv", "datamevljbcuwrfgpjfv"))
            .withFolder(new DatasetFolder().withName("seodvlmdzgv"))
            .withObjectApiName("dataalrjwaez")
            .withReportId("dataybsps");
        model = BinaryData.fromObject(model).toObject(SalesforceV2ObjectDataset.class);
        Assertions.assertEquals("mtcepzimfcfs", model.description());
        Assertions.assertEquals("qct", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("agbahdbtjmku").type());
        Assertions.assertEquals("seodvlmdzgv", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
