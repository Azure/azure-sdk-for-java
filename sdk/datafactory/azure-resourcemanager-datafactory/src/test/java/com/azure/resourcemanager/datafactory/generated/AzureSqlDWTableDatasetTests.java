// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSqlDWTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSqlDWTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSqlDWTableDataset model = BinaryData.fromString(
            "{\"type\":\"gwlckihbamyqs\",\"typeProperties\":{\"tableName\":\"datax\",\"schema\":\"datazsvmaigb\",\"table\":\"datavhyejthgeecbp\"},\"description\":\"knp\",\"structure\":\"datazjwdizcr\",\"schema\":\"datax\",\"linkedServiceName\":{\"referenceName\":\"ujzkcsexgkrs\",\"parameters\":{\"nwzoknvu\":\"dataykkbxktxbbwl\",\"a\":\"dataddlggb\",\"lkvggcmfnsffet\":\"datalgzubak\",\"gsmepnqvxgvoh\":\"datakmixwewzls\"}},\"parameters\":{\"gannvwxqhp\":{\"type\":\"String\",\"defaultValue\":\"dataxmoevvudeepf\"}},\"annotations\":[\"databohxvzgaybvrh\",\"dataog\"],\"folder\":{\"name\":\"xnwfmzvzt\"},\"\":{\"fcssanybzzghvd\":\"databpamq\",\"jsvcdhlyw\":\"dataeum\"}}")
            .toObject(AzureSqlDWTableDataset.class);
        Assertions.assertEquals("knp", model.description());
        Assertions.assertEquals("ujzkcsexgkrs", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("gannvwxqhp").type());
        Assertions.assertEquals("xnwfmzvzt", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSqlDWTableDataset model = new AzureSqlDWTableDataset().withDescription("knp")
            .withStructure("datazjwdizcr")
            .withSchema("datax")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ujzkcsexgkrs")
                .withParameters(mapOf("nwzoknvu", "dataykkbxktxbbwl", "a", "dataddlggb", "lkvggcmfnsffet",
                    "datalgzubak", "gsmepnqvxgvoh", "datakmixwewzls")))
            .withParameters(mapOf("gannvwxqhp",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataxmoevvudeepf")))
            .withAnnotations(Arrays.asList("databohxvzgaybvrh", "dataog"))
            .withFolder(new DatasetFolder().withName("xnwfmzvzt"))
            .withTableName("datax")
            .withSchemaTypePropertiesSchema("datazsvmaigb")
            .withTable("datavhyejthgeecbp");
        model = BinaryData.fromObject(model).toObject(AzureSqlDWTableDataset.class);
        Assertions.assertEquals("knp", model.description());
        Assertions.assertEquals("ujzkcsexgkrs", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("gannvwxqhp").type());
        Assertions.assertEquals("xnwfmzvzt", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
