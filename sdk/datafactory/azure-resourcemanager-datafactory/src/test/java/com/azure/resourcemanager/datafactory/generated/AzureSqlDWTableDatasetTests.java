// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSqlDWTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSqlDWTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSqlDWTableDataset model = BinaryData.fromString(
            "{\"type\":\"AzureSqlDWTable\",\"typeProperties\":{\"tableName\":\"datatnxodwxm\",\"schema\":\"datajwiygmgsevmdmze\",\"table\":\"datarstgfczljdnc\"},\"description\":\"tjva\",\"structure\":\"datayznm\",\"schema\":\"datacdo\",\"linkedServiceName\":{\"referenceName\":\"cvucgytoxu\",\"parameters\":{\"bgszplusdek\":\"datatnzqsaqm\",\"kyejidbdq\":\"datadzzmssgpgv\"}},\"parameters\":{\"wztlvvwsnmrkky\":{\"type\":\"String\",\"defaultValue\":\"datay\"},\"auxuvavcpfpdofu\":{\"type\":\"Float\",\"defaultValue\":\"dataepwpwfk\"},\"lfngojfsqebuuxj\":{\"type\":\"Bool\",\"defaultValue\":\"datalbtxluevsolzw\"}},\"annotations\":[\"dataxfjwp\",\"datakktpmbmxbmbr\"],\"folder\":{\"name\":\"zx\"},\"\":{\"mhweqjfyxyd\":\"datakhxsdplaumy\",\"vxakglh\":\"datatokvqbvwglgwz\",\"fga\":\"datases\"}}")
            .toObject(AzureSqlDWTableDataset.class);
        Assertions.assertEquals("tjva", model.description());
        Assertions.assertEquals("cvucgytoxu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("wztlvvwsnmrkky").type());
        Assertions.assertEquals("zx", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSqlDWTableDataset model = new AzureSqlDWTableDataset().withDescription("tjva")
            .withStructure("datayznm")
            .withSchema("datacdo")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("cvucgytoxu")
                .withParameters(mapOf("bgszplusdek", "datatnzqsaqm", "kyejidbdq", "datadzzmssgpgv")))
            .withParameters(mapOf("wztlvvwsnmrkky",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datay"),
                "auxuvavcpfpdofu",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataepwpwfk"),
                "lfngojfsqebuuxj",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datalbtxluevsolzw")))
            .withAnnotations(Arrays.asList("dataxfjwp", "datakktpmbmxbmbr"))
            .withFolder(new DatasetFolder().withName("zx"))
            .withTableName("datatnxodwxm")
            .withSchemaTypePropertiesSchema("datajwiygmgsevmdmze")
            .withTable("datarstgfczljdnc");
        model = BinaryData.fromObject(model).toObject(AzureSqlDWTableDataset.class);
        Assertions.assertEquals("tjva", model.description());
        Assertions.assertEquals("cvucgytoxu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("wztlvvwsnmrkky").type());
        Assertions.assertEquals("zx", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
