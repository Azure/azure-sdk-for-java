// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSqlDWTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSqlDWTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSqlDWTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"AzureSqlDWTable\",\"typeProperties\":{\"tableName\":\"dataxjfsg\",\"schema\":\"dataspoebnx\",\"table\":\"datacowscuyfqlam\"},\"description\":\"qhsujkafuzp\",\"structure\":\"dataqpwnikxkcajgr\",\"schema\":\"datact\",\"linkedServiceName\":{\"referenceName\":\"vgoo\",\"parameters\":{\"tm\":\"dataazmzlpcx\",\"ic\":\"dataxxr\"}},\"parameters\":{\"hkvpyeyoa\":{\"type\":\"SecureString\",\"defaultValue\":\"datajd\"}},\"annotations\":[\"datampnqup\",\"datakjr\"],\"folder\":{\"name\":\"ky\"},\"\":{\"hqdcclcvqsr\":\"databdx\"}}")
                .toObject(AzureSqlDWTableDataset.class);
        Assertions.assertEquals("qhsujkafuzp", model.description());
        Assertions.assertEquals("vgoo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("hkvpyeyoa").type());
        Assertions.assertEquals("ky", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSqlDWTableDataset model =
            new AzureSqlDWTableDataset()
                .withDescription("qhsujkafuzp")
                .withStructure("dataqpwnikxkcajgr")
                .withSchema("datact")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("vgoo")
                        .withParameters(mapOf("tm", "dataazmzlpcx", "ic", "dataxxr")))
                .withParameters(
                    mapOf(
                        "hkvpyeyoa",
                        new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datajd")))
                .withAnnotations(Arrays.asList("datampnqup", "datakjr"))
                .withFolder(new DatasetFolder().withName("ky"))
                .withTableName("dataxjfsg")
                .withSchemaTypePropertiesSchema("dataspoebnx")
                .withTable("datacowscuyfqlam");
        model = BinaryData.fromObject(model).toObject(AzureSqlDWTableDataset.class);
        Assertions.assertEquals("qhsujkafuzp", model.description());
        Assertions.assertEquals("vgoo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("hkvpyeyoa").type());
        Assertions.assertEquals("ky", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
