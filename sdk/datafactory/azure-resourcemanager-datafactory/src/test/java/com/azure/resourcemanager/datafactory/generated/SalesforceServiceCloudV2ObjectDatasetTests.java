// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SalesforceServiceCloudV2ObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SalesforceServiceCloudV2ObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SalesforceServiceCloudV2ObjectDataset model = BinaryData.fromString(
            "{\"type\":\"SalesforceServiceCloudV2Object\",\"typeProperties\":{\"objectApiName\":\"datadtejobjzrlwt\",\"reportId\":\"datacnzalgmpupjh\"},\"description\":\"ylyu\",\"structure\":\"datavb\",\"schema\":\"datazlzj\",\"linkedServiceName\":{\"referenceName\":\"bkpcutz\",\"parameters\":{\"imbdqraokdarluob\":\"dataydpoknse\",\"j\":\"datavalqwzkny\",\"dlff\":\"dataysvclfjyclvi\",\"fouzfbpg\":\"dataleirmtxfqpfildcg\"}},\"parameters\":{\"jatgngwn\":{\"type\":\"Int\",\"defaultValue\":\"datadbzdylb\"},\"dq\":{\"type\":\"Bool\",\"defaultValue\":\"datatecgprzsqm\"},\"oyxuucol\":{\"type\":\"Array\",\"defaultValue\":\"datazbyqhaath\"},\"lhrvmgsbpgmncr\":{\"type\":\"SecureString\",\"defaultValue\":\"dataruxrzh\"}},\"annotations\":[\"dataiforomppzsauq\"],\"folder\":{\"name\":\"hplfcmpuaiugoc\"},\"\":{\"iccu\":\"datalyspjym\",\"qwbbxiwtwfgo\":\"datancfunlakgixhqjqh\",\"bkyy\":\"datalalvemnnzug\"}}")
            .toObject(SalesforceServiceCloudV2ObjectDataset.class);
        Assertions.assertEquals("ylyu", model.description());
        Assertions.assertEquals("bkpcutz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("jatgngwn").type());
        Assertions.assertEquals("hplfcmpuaiugoc", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SalesforceServiceCloudV2ObjectDataset model
            = new SalesforceServiceCloudV2ObjectDataset().withDescription("ylyu")
                .withStructure("datavb")
                .withSchema("datazlzj")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("bkpcutz")
                    .withParameters(mapOf("imbdqraokdarluob", "dataydpoknse", "j", "datavalqwzkny", "dlff",
                        "dataysvclfjyclvi", "fouzfbpg", "dataleirmtxfqpfildcg")))
                .withParameters(mapOf("jatgngwn",
                    new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datadbzdylb"), "dq",
                    new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datatecgprzsqm"),
                    "oyxuucol",
                    new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datazbyqhaath"),
                    "lhrvmgsbpgmncr",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("dataruxrzh")))
                .withAnnotations(Arrays.asList("dataiforomppzsauq"))
                .withFolder(new DatasetFolder().withName("hplfcmpuaiugoc"))
                .withObjectApiName("datadtejobjzrlwt")
                .withReportId("datacnzalgmpupjh");
        model = BinaryData.fromObject(model).toObject(SalesforceServiceCloudV2ObjectDataset.class);
        Assertions.assertEquals("ylyu", model.description());
        Assertions.assertEquals("bkpcutz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("jatgngwn").type());
        Assertions.assertEquals("hplfcmpuaiugoc", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
