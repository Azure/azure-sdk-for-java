// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ActivityDependencyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ActivityDependency model = BinaryData.fromString(
            "{\"activity\":\"nmwcpmgu\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Completed\",\"Failed\"],\"\":{\"jjziuxxpsh\":\"datactkahzov\",\"enr\":\"dataeekulfgslqubkwd\",\"pjuohminyfl\":\"datasutujba\"}}")
            .toObject(ActivityDependency.class);
        Assertions.assertEquals("nmwcpmgu", model.activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependencyConditions().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ActivityDependency model = new ActivityDependency().withActivity("nmwcpmgu")
            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED,
                DependencyCondition.COMPLETED, DependencyCondition.FAILED))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(ActivityDependency.class);
        Assertions.assertEquals("nmwcpmgu", model.activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependencyConditions().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
