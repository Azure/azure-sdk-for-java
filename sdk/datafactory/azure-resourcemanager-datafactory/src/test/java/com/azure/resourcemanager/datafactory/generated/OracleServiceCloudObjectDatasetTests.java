// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.OracleServiceCloudObjectDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OracleServiceCloudObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OracleServiceCloudObjectDataset model = BinaryData.fromString(
            "{\"type\":\"OracleServiceCloudObject\",\"typeProperties\":{\"tableName\":\"datasyajmmczupd\"},\"description\":\"grufsdbkuxkdi\",\"structure\":\"datagsivxwkscwbsh\",\"schema\":\"datahvlms\",\"linkedServiceName\":{\"referenceName\":\"eylaulpuexy\",\"parameters\":{\"lspgnndefyhsb\":\"dataztyecxd\",\"ltaprq\":\"datahwlvsvs\",\"cuhbgftfvqukkmvz\":\"datafkmvzrkpmonxdw\",\"dqrjylwqqsemjhh\":\"dataneg\"}},\"parameters\":{\"tdpfz\":{\"type\":\"String\",\"defaultValue\":\"dataehztbejrdzwy\"},\"mjkykqflkm\":{\"type\":\"Bool\",\"defaultValue\":\"dataifnjwj\"},\"hc\":{\"type\":\"Bool\",\"defaultValue\":\"dataxmysmkbndnrihpja\"},\"ig\":{\"type\":\"Object\",\"defaultValue\":\"datajn\"}},\"annotations\":[\"datalkrnpsbnmrmhkip\"],\"folder\":{\"name\":\"dvdpfgwdxm\"},\"\":{\"unddvjlpbjszqj\":\"datalnpbiec\",\"ypbrzwi\":\"dataskjvaycxrwknsbg\",\"cebtpgvut\":\"datapzcyhk\"}}")
            .toObject(OracleServiceCloudObjectDataset.class);
        Assertions.assertEquals("grufsdbkuxkdi", model.description());
        Assertions.assertEquals("eylaulpuexy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("tdpfz").type());
        Assertions.assertEquals("dvdpfgwdxm", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OracleServiceCloudObjectDataset model = new OracleServiceCloudObjectDataset().withDescription("grufsdbkuxkdi")
            .withStructure("datagsivxwkscwbsh")
            .withSchema("datahvlms")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("eylaulpuexy")
                .withParameters(mapOf("lspgnndefyhsb", "dataztyecxd", "ltaprq", "datahwlvsvs", "cuhbgftfvqukkmvz",
                    "datafkmvzrkpmonxdw", "dqrjylwqqsemjhh", "dataneg")))
            .withParameters(mapOf("tdpfz",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataehztbejrdzwy"),
                "mjkykqflkm", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataifnjwj"),
                "hc",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataxmysmkbndnrihpja"),
                "ig", new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datajn")))
            .withAnnotations(Arrays.asList("datalkrnpsbnmrmhkip"))
            .withFolder(new DatasetFolder().withName("dvdpfgwdxm"))
            .withTableName("datasyajmmczupd");
        model = BinaryData.fromObject(model).toObject(OracleServiceCloudObjectDataset.class);
        Assertions.assertEquals("grufsdbkuxkdi", model.description());
        Assertions.assertEquals("eylaulpuexy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("tdpfz").type());
        Assertions.assertEquals("dvdpfgwdxm", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
