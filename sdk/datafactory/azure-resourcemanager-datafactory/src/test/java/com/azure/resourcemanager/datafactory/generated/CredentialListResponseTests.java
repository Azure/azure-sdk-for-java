// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.CredentialResourceInner;
import com.azure.resourcemanager.datafactory.models.Credential;
import com.azure.resourcemanager.datafactory.models.CredentialListResponse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CredentialListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CredentialListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"type\":\"pvmjcdoewbid\",\"description\":\"t\",\"annotations\":[\"dataxvgpiude\",\"datagfsxzec\",\"dataaxwk\",\"datafykhvuhxepmru\"],\"\":{\"mvguihywart\":\"dataabaobnslujdjltym\",\"j\":\"datapphkixkykxds\",\"kkflrmymyincqlhr\":\"dataemmucfxh\"}},\"name\":\"wslmiiiovgqcg\",\"type\":\"ugqkctotiowlxteq\",\"etag\":\"tjgwdtguk\",\"id\":\"nblwphqlkcc\"},{\"properties\":{\"type\":\"gygqwah\",\"description\":\"ulwgniiprglvawuw\",\"annotations\":[\"datafypiv\",\"datasbbjpmcu\"],\"\":{\"mhbrbqgvg\":\"dataifoxxkubvphav\",\"efjokn\":\"datavpbbt\",\"biqmrjgei\":\"datasqyzqedikdfr\"}},\"name\":\"qlggwfi\",\"type\":\"cxmjpbyephmg\",\"etag\":\"ljvrcmyfqipgxhnp\",\"id\":\"yqwcabvnuil\"}],\"nextLink\":\"yaswlpaugmr\"}")
            .toObject(CredentialListResponse.class);
        Assertions.assertEquals("nblwphqlkcc", model.value().get(0).id());
        Assertions.assertEquals("t", model.value().get(0).properties().description());
        Assertions.assertEquals("yaswlpaugmr", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CredentialListResponse model
            = new CredentialListResponse()
                .withValue(Arrays.asList(
                    new CredentialResourceInner().withId("nblwphqlkcc")
                        .withProperties(new Credential().withDescription("t")
                            .withAnnotations(
                                Arrays.asList("dataxvgpiude", "datagfsxzec", "dataaxwk", "datafykhvuhxepmru"))
                            .withAdditionalProperties(mapOf("type", "pvmjcdoewbid"))),
                    new CredentialResourceInner().withId("yqwcabvnuil")
                        .withProperties(new Credential().withDescription("ulwgniiprglvawuw")
                            .withAnnotations(Arrays.asList("datafypiv", "datasbbjpmcu"))
                            .withAdditionalProperties(mapOf("type", "gygqwah")))))
                .withNextLink("yaswlpaugmr");
        model = BinaryData.fromObject(model).toObject(CredentialListResponse.class);
        Assertions.assertEquals("nblwphqlkcc", model.value().get(0).id());
        Assertions.assertEquals("t", model.value().get(0).properties().description());
        Assertions.assertEquals("yaswlpaugmr", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
