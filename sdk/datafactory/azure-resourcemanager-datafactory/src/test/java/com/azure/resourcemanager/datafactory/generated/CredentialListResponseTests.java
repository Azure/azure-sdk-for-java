// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.CredentialResourceInner;
import com.azure.resourcemanager.datafactory.models.Credential;
import com.azure.resourcemanager.datafactory.models.CredentialListResponse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CredentialListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CredentialListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"type\":\"Credential\",\"description\":\"iwdcxsmlzzhzd\",\"annotations\":[\"datatlgy\",\"datalhqvlnnpxybafi\",\"datageaar\",\"datagjekglklby\"],\"\":{\"wvmzegjonfhjir\":\"datadw\",\"z\":\"datagdn\",\"tk\":\"datarfkspzhz\",\"lkeuac\":\"datajcitdigsxcdglj\"}},\"name\":\"omflrytswfp\",\"type\":\"dgycxnmskwhqjjy\",\"etag\":\"urlpshh\",\"id\":\"pedwqsl\"},{\"properties\":{\"type\":\"Credential\",\"description\":\"hmpqvw\",\"annotations\":[\"dataondcbrw\",\"datamuvqejosovyr\"],\"\":{\"sinuqtljqobbpih\":\"dataa\",\"bbmpxdlvykfre\":\"datahcecybmrqbr\"}},\"name\":\"rseqwjksghudgz\",\"type\":\"ogjggsvoujkxibda\",\"etag\":\"rkmdyom\",\"id\":\"fbvfbhdy\"},{\"properties\":{\"type\":\"Credential\",\"description\":\"hpwpgddeimawzovg\",\"annotations\":[\"datamuikjcjcaztbws\"],\"\":{\"ytwvczcswkacve\":\"dataowxwcomli\",\"pqthehnmnaoya\":\"datayfdvlvhbwrnfxtgd\"}},\"name\":\"coeqswankltytm\",\"type\":\"roznnhdrlktgj\",\"etag\":\"gguxhemlwyw\",\"id\":\"eczgfb\"},{\"properties\":{\"type\":\"Credential\",\"description\":\"klelssxb\",\"annotations\":[\"datasxz\"],\"\":{\"sqplpvmjcd\":\"datasrlsmd\"}},\"name\":\"wb\",\"type\":\"yvteowxvgpiudeu\",\"etag\":\"sxze\",\"id\":\"axwk\"}],\"nextLink\":\"ykhv\"}")
            .toObject(CredentialListResponse.class);
        Assertions.assertEquals("pedwqsl", model.value().get(0).id());
        Assertions.assertEquals("iwdcxsmlzzhzd", model.value().get(0).properties().description());
        Assertions.assertEquals("ykhv", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CredentialListResponse model
            = new CredentialListResponse()
                .withValue(Arrays.asList(
                    new CredentialResourceInner().withId("pedwqsl")
                        .withProperties(new Credential().withDescription("iwdcxsmlzzhzd")
                            .withAnnotations(
                                Arrays.asList("datatlgy", "datalhqvlnnpxybafi", "datageaar", "datagjekglklby"))
                            .withAdditionalProperties(mapOf("type", "Credential"))),
                    new CredentialResourceInner().withId("fbvfbhdy")
                        .withProperties(new Credential().withDescription("hmpqvw")
                            .withAnnotations(Arrays.asList("dataondcbrw", "datamuvqejosovyr"))
                            .withAdditionalProperties(mapOf("type", "Credential"))),
                    new CredentialResourceInner().withId("eczgfb")
                        .withProperties(new Credential().withDescription("hpwpgddeimawzovg")
                            .withAnnotations(Arrays.asList("datamuikjcjcaztbws"))
                            .withAdditionalProperties(mapOf("type", "Credential"))),
                    new CredentialResourceInner().withId("axwk")
                        .withProperties(new Credential().withDescription("klelssxb")
                            .withAnnotations(Arrays.asList("datasxz"))
                            .withAdditionalProperties(mapOf("type", "Credential")))))
                .withNextLink("ykhv");
        model = BinaryData.fromObject(model).toObject(CredentialListResponse.class);
        Assertions.assertEquals("pedwqsl", model.value().get(0).id());
        Assertions.assertEquals("iwdcxsmlzzhzd", model.value().get(0).properties().description());
        Assertions.assertEquals("ykhv", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
