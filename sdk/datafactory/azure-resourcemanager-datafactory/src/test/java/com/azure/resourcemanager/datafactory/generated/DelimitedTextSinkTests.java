// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DelimitedTextSink;
import com.azure.resourcemanager.datafactory.models.DelimitedTextWriteSettings;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class DelimitedTextSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DelimitedTextSink model = BinaryData.fromString(
            "{\"type\":\"DelimitedTextSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"datauvwlfzjrjgla\",\"disableMetricsCollection\":\"datazgzscgs\",\"copyBehavior\":\"dataujkeytpmlrjnnbmo\",\"metadata\":[{\"name\":\"dataqtvatujph\",\"value\":\"datafxvvogw\"},{\"name\":\"dataxox\",\"value\":\"dataiqkkmpf\"},{\"name\":\"datad\",\"value\":\"datazwmtsm\"},{\"name\":\"dataciyp\",\"value\":\"datanrgmgnvcusv\"}],\"\":{\"sn\":\"datazbdbv\",\"fom\":\"datahym\"}},\"formatSettings\":{\"type\":\"DelimitedTextWriteSettings\",\"quoteAllText\":\"datahiktecsmocqw\",\"fileExtension\":\"dataydaakett\",\"maxRowsPerFile\":\"datacxviwfsqj\",\"fileNamePrefix\":\"databsafqiwlduot\",\"\":{\"kfzpr\":\"datazdas\",\"lbddlnzmff\":\"dataqomuzohnpkof\",\"junmgd\":\"datavowlammvazvwzien\"}},\"writeBatchSize\":\"dataeivrhjxdnkgztfgc\",\"writeBatchTimeout\":\"datavbreh\",\"sinkRetryCount\":\"dataqggzahng\",\"sinkRetryWait\":\"dataseiidfpwbybmxf\",\"maxConcurrentConnections\":\"datazgolfensibqi\",\"disableMetricsCollection\":\"datapyjzv\",\"\":{\"vz\":\"datalfs\"}}")
            .toObject(DelimitedTextSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DelimitedTextSink model = new DelimitedTextSink().withWriteBatchSize("dataeivrhjxdnkgztfgc")
            .withWriteBatchTimeout("datavbreh")
            .withSinkRetryCount("dataqggzahng")
            .withSinkRetryWait("dataseiidfpwbybmxf")
            .withMaxConcurrentConnections("datazgolfensibqi")
            .withDisableMetricsCollection("datapyjzv")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("datauvwlfzjrjgla")
                .withDisableMetricsCollection("datazgzscgs")
                .withCopyBehavior("dataujkeytpmlrjnnbmo")
                .withMetadata(Arrays.asList(new MetadataItem().withName("dataqtvatujph").withValue("datafxvvogw"),
                    new MetadataItem().withName("dataxox").withValue("dataiqkkmpf"),
                    new MetadataItem().withName("datad").withValue("datazwmtsm"),
                    new MetadataItem().withName("dataciyp").withValue("datanrgmgnvcusv")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(new DelimitedTextWriteSettings().withQuoteAllText("datahiktecsmocqw")
                .withFileExtension("dataydaakett")
                .withMaxRowsPerFile("datacxviwfsqj")
                .withFileNamePrefix("databsafqiwlduot"));
        model = BinaryData.fromObject(model).toObject(DelimitedTextSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
