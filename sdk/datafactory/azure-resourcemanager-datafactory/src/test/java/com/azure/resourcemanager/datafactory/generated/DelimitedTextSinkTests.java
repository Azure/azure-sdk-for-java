// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DelimitedTextSink;
import com.azure.resourcemanager.datafactory.models.DelimitedTextWriteSettings;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class DelimitedTextSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DelimitedTextSink model = BinaryData.fromString(
            "{\"type\":\"DelimitedTextSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"datab\",\"disableMetricsCollection\":\"datad\",\"copyBehavior\":\"dataluvcwu\",\"metadata\":[{\"name\":\"dataxoaq\",\"value\":\"dataqfpkrmlbkvqog\"},{\"name\":\"datawfoqdn\",\"value\":\"datame\"},{\"name\":\"datanvscyu\",\"value\":\"datawsynt\"},{\"name\":\"datarluqaqn\",\"value\":\"datag\"}],\"\":{\"pifvpsmv\":\"datafejbozkl\"}},\"formatSettings\":{\"type\":\"DelimitedTextWriteSettings\",\"quoteAllText\":\"datauw\",\"fileExtension\":\"datasnplqfi\",\"maxRowsPerFile\":\"datafqmdjz\",\"fileNamePrefix\":\"datavmkplrjkmpaxoey\",\"\":{\"qhwfskmkdr\":\"datafaogvmqzagrq\",\"ldwcxjvexlutxcmc\":\"datakdpn\",\"yypvhdulds\":\"datacotqocn\",\"zzbr\":\"datal\"}},\"writeBatchSize\":\"datakeylk\",\"writeBatchTimeout\":\"dataaagrdfwvgl\",\"sinkRetryCount\":\"datasphvosucry\",\"sinkRetryWait\":\"dataohthzfotfrf\",\"maxConcurrentConnections\":\"datajkahdofshgmqx\",\"disableMetricsCollection\":\"datappnitrmzvnrfkzn\",\"\":{\"rxhwpgkrnx\":\"datattbmo\",\"gcnz\":\"datajmil\"}}")
            .toObject(DelimitedTextSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DelimitedTextSink model = new DelimitedTextSink().withWriteBatchSize("datakeylk")
            .withWriteBatchTimeout("dataaagrdfwvgl")
            .withSinkRetryCount("datasphvosucry")
            .withSinkRetryWait("dataohthzfotfrf")
            .withMaxConcurrentConnections("datajkahdofshgmqx")
            .withDisableMetricsCollection("datappnitrmzvnrfkzn")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("datab")
                .withDisableMetricsCollection("datad")
                .withCopyBehavior("dataluvcwu")
                .withMetadata(Arrays.asList(new MetadataItem().withName("dataxoaq").withValue("dataqfpkrmlbkvqog"),
                    new MetadataItem().withName("datawfoqdn").withValue("datame"),
                    new MetadataItem().withName("datanvscyu").withValue("datawsynt"),
                    new MetadataItem().withName("datarluqaqn").withValue("datag")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(new DelimitedTextWriteSettings().withQuoteAllText("datauw")
                .withFileExtension("datasnplqfi")
                .withMaxRowsPerFile("datafqmdjz")
                .withFileNamePrefix("datavmkplrjkmpaxoey"));
        model = BinaryData.fromObject(model).toObject(DelimitedTextSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
