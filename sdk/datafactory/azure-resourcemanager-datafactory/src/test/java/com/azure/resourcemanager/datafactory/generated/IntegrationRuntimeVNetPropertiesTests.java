// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeVNetProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeVNetPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeVNetProperties model = BinaryData.fromString(
            "{\"vNetId\":\"qbxmnnidotmp\",\"subnet\":\"zuh\",\"publicIPs\":[\"ttqhpvaru\"],\"subnetId\":\"uwj\",\"\":{\"gmrodb\":\"dataqfpqqllavzlh\",\"z\":\"dataapqra\"}}")
            .toObject(IntegrationRuntimeVNetProperties.class);
        Assertions.assertEquals("qbxmnnidotmp", model.vNetId());
        Assertions.assertEquals("zuh", model.subnet());
        Assertions.assertEquals("ttqhpvaru", model.publicIPs().get(0));
        Assertions.assertEquals("uwj", model.subnetId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeVNetProperties model = new IntegrationRuntimeVNetProperties().withVNetId("qbxmnnidotmp")
            .withSubnet("zuh")
            .withPublicIPs(Arrays.asList("ttqhpvaru"))
            .withSubnetId("uwj")
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeVNetProperties.class);
        Assertions.assertEquals("qbxmnnidotmp", model.vNetId());
        Assertions.assertEquals("zuh", model.subnet());
        Assertions.assertEquals("ttqhpvaru", model.publicIPs().get(0));
        Assertions.assertEquals("uwj", model.subnetId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
