// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MagentoObjectDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class MagentoObjectDatasetTests {
    @Test
    public void testDeserialize() {
        MagentoObjectDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"MagentoObject\",\"typeProperties\":{},\"description\":\"owxwcomli\",\"linkedServiceName\":{\"referenceName\":\"wvczcswkacve\",\"parameters\":{}},\"parameters\":{\"hbwrnfxtgddpqth\":{\"type\":\"Array\"},\"mnaoy\":{\"type\":\"SecureString\"},\"coeqswankltytm\":{\"type\":\"Bool\"},\"oznnhdrlktgj\":{\"type\":\"String\"}},\"annotations\":[],\"folder\":{\"name\":\"xhem\"},\"\":{}}")
                .toObject(MagentoObjectDataset.class);
        Assertions.assertEquals("owxwcomli", model.description());
        Assertions.assertEquals("wvczcswkacve", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("hbwrnfxtgddpqth").type());
        Assertions.assertEquals("xhem", model.folder().name());
    }

    @Test
    public void testSerialize() {
        MagentoObjectDataset model =
            new MagentoObjectDataset()
                .withDescription("owxwcomli")
                .withLinkedServiceName(
                    new LinkedServiceReference().withReferenceName("wvczcswkacve").withParameters(mapOf()))
                .withParameters(
                    mapOf(
                        "hbwrnfxtgddpqth",
                        new ParameterSpecification().withType(ParameterType.ARRAY),
                        "mnaoy",
                        new ParameterSpecification().withType(ParameterType.SECURE_STRING),
                        "coeqswankltytm",
                        new ParameterSpecification().withType(ParameterType.BOOL),
                        "oznnhdrlktgj",
                        new ParameterSpecification().withType(ParameterType.STRING)))
                .withAnnotations(Arrays.asList())
                .withFolder(new DatasetFolder().withName("xhem"));
        model = BinaryData.fromObject(model).toObject(MagentoObjectDataset.class);
        Assertions.assertEquals("owxwcomli", model.description());
        Assertions.assertEquals("wvczcswkacve", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("hbwrnfxtgddpqth").type());
        Assertions.assertEquals("xhem", model.folder().name());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
