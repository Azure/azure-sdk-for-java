// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MagentoObjectDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MagentoObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MagentoObjectDataset model = BinaryData.fromString(
            "{\"type\":\"MagentoObject\",\"typeProperties\":{\"tableName\":\"datasvkllrz\"},\"description\":\"hhkbc\",\"structure\":\"dataazk\",\"schema\":\"datajthprgfwhfzhhr\",\"linkedServiceName\":{\"referenceName\":\"rmrfyyqjcni\",\"parameters\":{\"ztqe\":\"datarsddcuqddldaoyv\",\"zzw\":\"dataqjojesxjht\"}},\"parameters\":{\"guzlweoyxfoaf\":{\"type\":\"Array\",\"defaultValue\":\"dataoyineuaxpmezit\"}},\"annotations\":[\"datapzlx\"],\"folder\":{\"name\":\"dhgwhlbpjuaj\"},\"\":{\"svdtyydd\":\"dataavmitnwlyhbuj\"}}")
            .toObject(MagentoObjectDataset.class);
        Assertions.assertEquals("hhkbc", model.description());
        Assertions.assertEquals("rmrfyyqjcni", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("guzlweoyxfoaf").type());
        Assertions.assertEquals("dhgwhlbpjuaj", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MagentoObjectDataset model = new MagentoObjectDataset().withDescription("hhkbc")
            .withStructure("dataazk")
            .withSchema("datajthprgfwhfzhhr")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("rmrfyyqjcni")
                .withParameters(mapOf("ztqe", "datarsddcuqddldaoyv", "zzw", "dataqjojesxjht")))
            .withParameters(mapOf("guzlweoyxfoaf",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataoyineuaxpmezit")))
            .withAnnotations(Arrays.asList("datapzlx"))
            .withFolder(new DatasetFolder().withName("dhgwhlbpjuaj"))
            .withTableName("datasvkllrz");
        model = BinaryData.fromObject(model).toObject(MagentoObjectDataset.class);
        Assertions.assertEquals("hhkbc", model.description());
        Assertions.assertEquals("rmrfyyqjcni", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("guzlweoyxfoaf").type());
        Assertions.assertEquals("dhgwhlbpjuaj", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
