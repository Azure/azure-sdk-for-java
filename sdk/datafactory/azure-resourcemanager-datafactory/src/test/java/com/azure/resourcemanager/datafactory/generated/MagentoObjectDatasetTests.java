// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MagentoObjectDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MagentoObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MagentoObjectDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"MagentoObject\",\"typeProperties\":{\"tableName\":\"dataznlf\"},\"description\":\"fzx\",\"structure\":\"dataz\",\"schema\":\"dataugtkxncwdytnlr\",\"linkedServiceName\":{\"referenceName\":\"cmwbejywwwvn\",\"parameters\":{\"dfyziruqvgnjxi\":\"datakrmqevrhhafqf\",\"gikyluyu\":\"datakgyjmzbm\",\"c\":\"datambrdcvoloxtv\"}},\"parameters\":{\"vokkyankxvcpt\":{\"type\":\"Object\",\"defaultValue\":\"datammglvnbenkp\"},\"rdxpcpautfzptr\":{\"type\":\"Int\",\"defaultValue\":\"databhnkxasomafegazh\"}},\"annotations\":[\"dataytrtffvpkdx\",\"datayuwenbq\"],\"folder\":{\"name\":\"awvoqatdjkal\"},\"\":{\"smxfzynfemqy\":\"datae\",\"wgssdquupirnb\":\"datakkp\",\"irzyudrq\":\"datalqyvdsqxkjwdzp\"}}")
                .toObject(MagentoObjectDataset.class);
        Assertions.assertEquals("fzx", model.description());
        Assertions.assertEquals("cmwbejywwwvn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("vokkyankxvcpt").type());
        Assertions.assertEquals("awvoqatdjkal", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MagentoObjectDataset model =
            new MagentoObjectDataset()
                .withDescription("fzx")
                .withStructure("dataz")
                .withSchema("dataugtkxncwdytnlr")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("cmwbejywwwvn")
                        .withParameters(
                            mapOf(
                                "dfyziruqvgnjxi",
                                "datakrmqevrhhafqf",
                                "gikyluyu",
                                "datakgyjmzbm",
                                "c",
                                "datambrdcvoloxtv")))
                .withParameters(
                    mapOf(
                        "vokkyankxvcpt",
                        new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datammglvnbenkp"),
                        "rdxpcpautfzptr",
                        new ParameterSpecification()
                            .withType(ParameterType.INT)
                            .withDefaultValue("databhnkxasomafegazh")))
                .withAnnotations(Arrays.asList("dataytrtffvpkdx", "datayuwenbq"))
                .withFolder(new DatasetFolder().withName("awvoqatdjkal"))
                .withTableName("dataznlf");
        model = BinaryData.fromObject(model).toObject(MagentoObjectDataset.class);
        Assertions.assertEquals("fzx", model.description());
        Assertions.assertEquals("cmwbejywwwvn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("vokkyankxvcpt").type());
        Assertions.assertEquals("awvoqatdjkal", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
