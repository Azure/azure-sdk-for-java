// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CompressionReadSettings;
import com.azure.resourcemanager.datafactory.models.ParquetReadSettings;
import com.azure.resourcemanager.datafactory.models.ParquetSource;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import java.util.HashMap;
import java.util.Map;

public final class ParquetSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ParquetSource model = BinaryData.fromString(
            "{\"type\":\"mnkvpafoe\",\"storeSettings\":{\"type\":\"lrjdkyp\",\"maxConcurrentConnections\":\"datavilgn\",\"disableMetricsCollection\":\"datatjbldgikokjwgej\",\"\":{\"gsyszdtgw\":\"datazezwnqhcpk\",\"prourtmccd\":\"dataqcutk\",\"dcvlbxr\":\"datajtoypluxvjutckfh\",\"mzcxlgmuhxw\":\"datazvujp\"}},\"formatSettings\":{\"type\":\"q\",\"compressionProperties\":{\"type\":\"jczpfoispc\",\"\":{\"hazmcuggtsovozy\":\"datavmvsbgyq\",\"ugubob\":\"datapkrncjrq\",\"qcyhfubz\":\"dataqnwhcmvdow\"}},\"\":{\"fhjefiu\":\"datarawbftznxf\",\"bkdieismdkvfim\":\"databrnrilljucod\"}},\"additionalColumns\":\"datacij\",\"sourceRetryCount\":\"datacsk\",\"sourceRetryWait\":\"datawzmji\",\"maxConcurrentConnections\":\"dataqyllcckgfo\",\"disableMetricsCollection\":\"datarbfyjmenq\",\"\":{\"qtvsfsvq\":\"dataf\",\"hdaczixf\":\"datazgaweixnoblaz\",\"s\":\"datauw\"}}")
            .toObject(ParquetSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ParquetSource model = new ParquetSource().withSourceRetryCount("datacsk")
            .withSourceRetryWait("datawzmji")
            .withMaxConcurrentConnections("dataqyllcckgfo")
            .withDisableMetricsCollection("datarbfyjmenq")
            .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("datavilgn")
                .withDisableMetricsCollection("datatjbldgikokjwgej")
                .withAdditionalProperties(mapOf("type", "lrjdkyp")))
            .withFormatSettings(new ParquetReadSettings().withCompressionProperties(
                new CompressionReadSettings().withAdditionalProperties(mapOf("type", "jczpfoispc"))))
            .withAdditionalColumns("datacij");
        model = BinaryData.fromObject(model).toObject(ParquetSource.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
