// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeResource;
import com.azure.resourcemanager.datafactory.models.SelfHostedIntegrationRuntime;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IntegrationRuntimesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"type\":\"Managed\",\"description\":\"nycgzlicytfpywpe\",\"\":{\"jlqdpqkcbflzzdd\":\"datausxr\",\"rrsufvtmse\":\"datarew\",\"rphdakwwiezeut\":\"dataqguz\"}},\"name\":\"qawmoxvq\",\"type\":\"zatvnejlocmqladl\",\"etag\":\"lwtxsh\",\"id\":\"zhhzl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IntegrationRuntimeResource response = manager.integrationRuntimes()
            .define("qgoioexh")
            .withExistingFactory("nts", "sphi")
            .withProperties(new SelfHostedIntegrationRuntime().withDescription("kfkwzk"))
            .withIfMatch("izoamttxyddkvi")
            .create();

        Assertions.assertEquals("zhhzl", response.id());
        Assertions.assertEquals("nycgzlicytfpywpe", response.properties().description());
    }
}
