// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SalesforceMarketingCloudObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SalesforceMarketingCloudObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SalesforceMarketingCloudObjectDataset model = BinaryData.fromString(
            "{\"type\":\"SalesforceMarketingCloudObject\",\"typeProperties\":{\"tableName\":\"dataesywywnvgy\"},\"description\":\"c\",\"structure\":\"datarzcw\",\"schema\":\"datajmxlfzl\",\"linkedServiceName\":{\"referenceName\":\"zyrgrlh\",\"parameters\":{\"vm\":\"dataaunjovlxq\",\"rgmnkgtlhzkrazk\":\"datazpniqwx\",\"eqzhehgvmm\":\"dataoiyecznvzmsvzng\"}},\"parameters\":{\"ypkfcdfuxi\":{\"type\":\"String\",\"defaultValue\":\"datanbnyplu\"},\"cdvhyefqhxyts\":{\"type\":\"String\",\"defaultValue\":\"dataxotnoil\"},\"ratqlreqbrc\":{\"type\":\"Int\",\"defaultValue\":\"datawcacwaaqakvokyax\"},\"babowrcyrnmj\":{\"type\":\"String\",\"defaultValue\":\"datatshzumxucz\"}},\"annotations\":[\"datawxqzkkagve\",\"datahmnaphrskmpeajz\"],\"folder\":{\"name\":\"avamzmzfntte\"},\"\":{\"pjdr\":\"datatxytja\",\"vbfaehjji\":\"datalijk\"}}")
            .toObject(SalesforceMarketingCloudObjectDataset.class);
        Assertions.assertEquals("c", model.description());
        Assertions.assertEquals("zyrgrlh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("ypkfcdfuxi").type());
        Assertions.assertEquals("avamzmzfntte", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SalesforceMarketingCloudObjectDataset model
            = new SalesforceMarketingCloudObjectDataset().withDescription("c")
                .withStructure("datarzcw")
                .withSchema("datajmxlfzl")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("zyrgrlh")
                    .withParameters(mapOf("vm", "dataaunjovlxq", "rgmnkgtlhzkrazk", "datazpniqwx", "eqzhehgvmm",
                        "dataoiyecznvzmsvzng")))
                .withParameters(
                    mapOf("ypkfcdfuxi",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datanbnyplu"),
                        "cdvhyefqhxyts",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataxotnoil"),
                        "ratqlreqbrc",
                        new ParameterSpecification().withType(ParameterType.INT)
                            .withDefaultValue("datawcacwaaqakvokyax"),
                        "babowrcyrnmj",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datatshzumxucz")))
                .withAnnotations(Arrays.asList("datawxqzkkagve", "datahmnaphrskmpeajz"))
                .withFolder(new DatasetFolder().withName("avamzmzfntte"))
                .withTableName("dataesywywnvgy");
        model = BinaryData.fromObject(model).toObject(SalesforceMarketingCloudObjectDataset.class);
        Assertions.assertEquals("c", model.description());
        Assertions.assertEquals("zyrgrlh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("ypkfcdfuxi").type());
        Assertions.assertEquals("avamzmzfntte", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
