// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SalesforceMarketingCloudObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SalesforceMarketingCloudObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SalesforceMarketingCloudObjectDataset model = BinaryData.fromString(
            "{\"type\":\"jhgvte\",\"typeProperties\":{\"tableName\":\"datajpgbml\"},\"description\":\"runudmakkshrna\",\"structure\":\"dataczkwohdigeyuocf\",\"schema\":\"dataamodw\",\"linkedServiceName\":{\"referenceName\":\"baktvxer\",\"parameters\":{\"eonmtojxgdo\":\"datazvrnnbegra\"}},\"parameters\":{\"qsjknaqszbwgpmdm\":{\"type\":\"Array\",\"defaultValue\":\"datak\"},\"dargkwim\":{\"type\":\"Bool\",\"defaultValue\":\"dataevveswghhbqqhd\"},\"uwczzcujwxvbk\":{\"type\":\"Float\",\"defaultValue\":\"dataeeeuq\"}},\"annotations\":[\"datak\",\"datahfwlajwdajydj\",\"datajgi\",\"datavspewyzhydtkbmtr\"],\"folder\":{\"name\":\"lviaigarma\"},\"\":{\"ysclwbjgiynqr\":\"datagcneviccwb\",\"weofvsxauphzefi\":\"dataoi\",\"gtiivzkd\":\"dataeyydx\",\"ywmwtacrscfc\":\"dataexccwldgfq\"}}")
            .toObject(SalesforceMarketingCloudObjectDataset.class);
        Assertions.assertEquals("runudmakkshrna", model.description());
        Assertions.assertEquals("baktvxer", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("qsjknaqszbwgpmdm").type());
        Assertions.assertEquals("lviaigarma", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SalesforceMarketingCloudObjectDataset model
            = new SalesforceMarketingCloudObjectDataset().withDescription("runudmakkshrna")
                .withStructure("dataczkwohdigeyuocf")
                .withSchema("dataamodw")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("baktvxer")
                    .withParameters(mapOf("eonmtojxgdo", "datazvrnnbegra")))
                .withParameters(mapOf("qsjknaqszbwgpmdm",
                    new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datak"), "dargkwim",
                    new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataevveswghhbqqhd"),
                    "uwczzcujwxvbk",
                    new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataeeeuq")))
                .withAnnotations(Arrays.asList("datak", "datahfwlajwdajydj", "datajgi", "datavspewyzhydtkbmtr"))
                .withFolder(new DatasetFolder().withName("lviaigarma"))
                .withTableName("datajpgbml");
        model = BinaryData.fromObject(model).toObject(SalesforceMarketingCloudObjectDataset.class);
        Assertions.assertEquals("runudmakkshrna", model.description());
        Assertions.assertEquals("baktvxer", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("qsjknaqszbwgpmdm").type());
        Assertions.assertEquals("lviaigarma", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
