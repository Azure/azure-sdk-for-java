// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ConnectionStateProperties;
import com.azure.resourcemanager.datafactory.models.ManagedPrivateEndpoint;
import com.azure.resourcemanager.datafactory.models.ManagedPrivateEndpointResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ManagedPrivateEndpointsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"connectionState\":{\"actionsRequired\":\"w\",\"description\":\"irnfnlyvdryx\",\"status\":\"qwta\"},\"fqdns\":[\"cawxslstekb\"],\"groupId\":\"q\",\"isReserved\":true,\"privateLinkResourceId\":\"xycvoexbxr\",\"provisioningState\":\"vxwlfmbb\",\"\":{\"zfwyeg\":\"datagmnelo\",\"mdlfkjjucpt\":\"datautfk\",\"msybvjfnuyoy\":\"datakesdfujfpnwfzabl\"}},\"name\":\"a\",\"type\":\"nnlasf\",\"etag\":\"jyvu\",\"id\":\"exlpmbtmc\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DataFactoryManager manager = DataFactoryManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        ManagedPrivateEndpointResource response = manager.managedPrivateEndpoints().define("e")
            .withExistingManagedVirtualNetwork("duyastybomiyj", "jsseemhdf", "lai")
            .withProperties(new ManagedPrivateEndpoint().withConnectionState(new ConnectionStateProperties())
                .withFqdns(Arrays.asList("elxd", "zdfst")).withGroupId("uzoglvtzrjlej")
                .withPrivateLinkResourceId("zrqkgibpeh")
                .withAdditionalProperties(mapOf("isReserved", false, "provisioningState", "ctzcm")))
            .withIfMatch("mgparbirgw").create();

        Assertions.assertEquals("exlpmbtmc", response.id());
        Assertions.assertEquals("cawxslstekb", response.properties().fqdns().get(0));
        Assertions.assertEquals("q", response.properties().groupId());
        Assertions.assertEquals("xycvoexbxr", response.properties().privateLinkResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
