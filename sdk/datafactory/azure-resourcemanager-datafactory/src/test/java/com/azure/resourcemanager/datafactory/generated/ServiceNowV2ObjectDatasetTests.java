// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.ServiceNowV2ObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServiceNowV2ObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceNowV2ObjectDataset model = BinaryData.fromString(
            "{\"type\":\"vyjehyvnfjngo\",\"typeProperties\":{\"tableName\":\"dataaxtmvmycvjpaxjd\"},\"description\":\"rdvhbgtuhwh\",\"structure\":\"datanwenbphyl\",\"schema\":\"datazgz\",\"linkedServiceName\":{\"referenceName\":\"x\",\"parameters\":{\"etxpun\":\"datasebkc\",\"uiqr\":\"dataerma\"}},\"parameters\":{\"rwjbsycukbocsits\":{\"type\":\"String\",\"defaultValue\":\"dataubqwxvsxrbiyzjl\"},\"yqs\":{\"type\":\"Object\",\"defaultValue\":\"datasgzpwqieyxjkc\"},\"qepeftmub\":{\"type\":\"Object\",\"defaultValue\":\"datam\"},\"zeq\":{\"type\":\"Object\",\"defaultValue\":\"dataoepeqlhbtysy\"}},\"annotations\":[\"datapqnofkwhgy\"],\"folder\":{\"name\":\"yfdbvooelmik\"},\"\":{\"qmlmwjwsmnwb\":\"dataqykgjjsmvsi\",\"vque\":\"dataacvemmriyz\",\"lolxxhcyn\":\"dataxplcsinb\"}}")
            .toObject(ServiceNowV2ObjectDataset.class);
        Assertions.assertEquals("rdvhbgtuhwh", model.description());
        Assertions.assertEquals("x", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("rwjbsycukbocsits").type());
        Assertions.assertEquals("yfdbvooelmik", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceNowV2ObjectDataset model = new ServiceNowV2ObjectDataset().withDescription("rdvhbgtuhwh")
            .withStructure("datanwenbphyl")
            .withSchema("datazgz")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("x")
                .withParameters(mapOf("etxpun", "datasebkc", "uiqr", "dataerma")))
            .withParameters(mapOf("rwjbsycukbocsits",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataubqwxvsxrbiyzjl"),
                "yqs",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datasgzpwqieyxjkc"),
                "qepeftmub", new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datam"),
                "zeq",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataoepeqlhbtysy")))
            .withAnnotations(Arrays.asList("datapqnofkwhgy"))
            .withFolder(new DatasetFolder().withName("yfdbvooelmik"))
            .withTableName("dataaxtmvmycvjpaxjd");
        model = BinaryData.fromObject(model).toObject(ServiceNowV2ObjectDataset.class);
        Assertions.assertEquals("rdvhbgtuhwh", model.description());
        Assertions.assertEquals("x", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("rwjbsycukbocsits").type());
        Assertions.assertEquals("yfdbvooelmik", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
