// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.DatasetResourceInner;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatasetResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatasetResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"type\":\"skfc\",\"description\":\"qumiek\",\"structure\":\"datazzikhlyfjhdg\",\"schema\":\"datagebdunygaeq\",\"linkedServiceName\":{\"referenceName\":\"db\",\"parameters\":{\"xllrxcyjm\":\"datat\",\"su\":\"dataa\"}},\"parameters\":{\"rw\":{\"type\":\"String\",\"defaultValue\":\"datawdmjsjqbjhhyx\"}},\"annotations\":[\"dataoduhp\"],\"folder\":{\"name\":\"gymare\"},\"\":{\"ubeddg\":\"datajxqugjhky\"}},\"name\":\"ofwq\",\"type\":\"qal\",\"etag\":\"mnjijpxacqqudf\",\"id\":\"yxbaaabjyvayf\"}")
            .toObject(DatasetResourceInner.class);
        Assertions.assertEquals("yxbaaabjyvayf", model.id());
        Assertions.assertEquals("qumiek", model.properties().description());
        Assertions.assertEquals("db", model.properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.properties().parameters().get("rw").type());
        Assertions.assertEquals("gymare", model.properties().folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatasetResourceInner model = new DatasetResourceInner().withId("yxbaaabjyvayf")
            .withProperties(new Dataset().withDescription("qumiek")
                .withStructure("datazzikhlyfjhdg")
                .withSchema("datagebdunygaeq")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("db")
                    .withParameters(mapOf("xllrxcyjm", "datat", "su", "dataa")))
                .withParameters(mapOf("rw",
                    new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datawdmjsjqbjhhyx")))
                .withAnnotations(Arrays.asList("dataoduhp"))
                .withFolder(new DatasetFolder().withName("gymare"))
                .withAdditionalProperties(mapOf("type", "skfc")));
        model = BinaryData.fromObject(model).toObject(DatasetResourceInner.class);
        Assertions.assertEquals("yxbaaabjyvayf", model.id());
        Assertions.assertEquals("qumiek", model.properties().description());
        Assertions.assertEquals("db", model.properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.properties().parameters().get("rw").type());
        Assertions.assertEquals("gymare", model.properties().folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
