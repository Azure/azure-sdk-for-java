// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.DatasetResourceInner;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatasetResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatasetResourceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"type\":\"Dataset\",\"description\":\"szkkfoqre\",\"structure\":\"datakzikfjawneaivxwc\",\"schema\":\"datalpcirelsf\",\"linkedServiceName\":{\"referenceName\":\"aenwabf\",\"parameters\":{\"nozj\":\"datalddxbjhwua\"}},\"parameters\":{\"ag\":{\"type\":\"Array\",\"defaultValue\":\"dataoulpjrv\"}},\"annotations\":[\"dataimjwosyt\",\"dataitc\"],\"folder\":{\"name\":\"cktqumiekkezzi\"},\"\":{\"hdgqggeb\":\"datayf\"}},\"name\":\"nyga\",\"type\":\"idb\",\"etag\":\"atpxl\",\"id\":\"xcyjmoadsuvarmy\"}")
                .toObject(DatasetResourceInner.class);
        Assertions.assertEquals("xcyjmoadsuvarmy", model.id());
        Assertions.assertEquals("szkkfoqre", model.properties().description());
        Assertions.assertEquals("aenwabf", model.properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.properties().parameters().get("ag").type());
        Assertions.assertEquals("cktqumiekkezzi", model.properties().folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatasetResourceInner model =
            new DatasetResourceInner()
                .withId("xcyjmoadsuvarmy")
                .withProperties(
                    new Dataset()
                        .withDescription("szkkfoqre")
                        .withStructure("datakzikfjawneaivxwc")
                        .withSchema("datalpcirelsf")
                        .withLinkedServiceName(
                            new LinkedServiceReference()
                                .withReferenceName("aenwabf")
                                .withParameters(mapOf("nozj", "datalddxbjhwua")))
                        .withParameters(
                            mapOf(
                                "ag",
                                new ParameterSpecification()
                                    .withType(ParameterType.ARRAY)
                                    .withDefaultValue("dataoulpjrv")))
                        .withAnnotations(Arrays.asList("dataimjwosyt", "dataitc"))
                        .withFolder(new DatasetFolder().withName("cktqumiekkezzi"))
                        .withAdditionalProperties(mapOf("type", "Dataset")));
        model = BinaryData.fromObject(model).toObject(DatasetResourceInner.class);
        Assertions.assertEquals("xcyjmoadsuvarmy", model.id());
        Assertions.assertEquals("szkkfoqre", model.properties().description());
        Assertions.assertEquals("aenwabf", model.properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.properties().parameters().get("ag").type());
        Assertions.assertEquals("cktqumiekkezzi", model.properties().folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
