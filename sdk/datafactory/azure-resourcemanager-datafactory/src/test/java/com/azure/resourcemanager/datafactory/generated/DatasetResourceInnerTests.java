// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.DatasetResourceInner;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatasetResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatasetResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"type\":\"Dataset\",\"description\":\"kniod\",\"structure\":\"dataoebwnujhemms\",\"schema\":\"datadkcrodt\",\"linkedServiceName\":{\"referenceName\":\"infwjlfltkacjve\",\"parameters\":{\"kfpagao\":\"datalfoakg\",\"jnsjervtiagxsd\":\"datapulpqblylsyxk\",\"beyvpnqicvinvkjj\":\"datazuempsbzkf\"}},\"parameters\":{\"aztz\":{\"type\":\"Int\",\"defaultValue\":\"datauukzclewyhmlw\"},\"fz\":{\"type\":\"Int\",\"defaultValue\":\"datancckw\"},\"xzfe\":{\"type\":\"Int\",\"defaultValue\":\"dataxxbuyq\"}},\"annotations\":[\"datappriol\"],\"folder\":{\"name\":\"jaltolmnc\"},\"\":{\"ucqdpfuvglsb\":\"databqwcsdbnwdcf\",\"cormr\":\"datajcanvxbvtvudut\",\"f\":\"dataxqtvcofu\",\"u\":\"datavkg\"}},\"name\":\"dknnqvsazn\",\"type\":\"tor\",\"etag\":\"sgsahmkycgr\",\"id\":\"wjue\"}")
            .toObject(DatasetResourceInner.class);
        Assertions.assertEquals("wjue", model.id());
        Assertions.assertEquals("kniod", model.properties().description());
        Assertions.assertEquals("infwjlfltkacjve", model.properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.properties().parameters().get("aztz").type());
        Assertions.assertEquals("jaltolmnc", model.properties().folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatasetResourceInner model = new DatasetResourceInner().withId("wjue")
            .withProperties(new Dataset().withDescription("kniod")
                .withStructure("dataoebwnujhemms")
                .withSchema("datadkcrodt")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("infwjlfltkacjve")
                    .withParameters(mapOf("kfpagao", "datalfoakg", "jnsjervtiagxsd", "datapulpqblylsyxk",
                        "beyvpnqicvinvkjj", "datazuempsbzkf")))
                .withParameters(mapOf("aztz",
                    new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datauukzclewyhmlw"),
                    "fz", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datancckw"),
                    "xzfe", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataxxbuyq")))
                .withAnnotations(Arrays.asList("datappriol"))
                .withFolder(new DatasetFolder().withName("jaltolmnc"))
                .withAdditionalProperties(mapOf("type", "Dataset")));
        model = BinaryData.fromObject(model).toObject(DatasetResourceInner.class);
        Assertions.assertEquals("wjue", model.id());
        Assertions.assertEquals("kniod", model.properties().description());
        Assertions.assertEquals("infwjlfltkacjve", model.properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.properties().parameters().get("aztz").type());
        Assertions.assertEquals("jaltolmnc", model.properties().folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
