// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.CustomActivity;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomActivity model = BinaryData.fromString(
            "{\"type\":\"Custom\",\"typeProperties\":{\"command\":\"dataluszi\",\"resourceLinkedService\":{\"referenceName\":\"rcpxlki\",\"parameters\":{\"svcmceh\":\"datatbvh\",\"krp\":\"datarhwriihwxchyyf\"}},\"folderPath\":\"datanminsqjnuii\",\"referenceObjects\":{\"linkedServices\":[{\"referenceName\":\"rpeyigfdppgkk\",\"parameters\":{\"jgdybg\":\"datagjld\",\"tfwculsbnapzfdzm\":\"datatseznowzfxkof\",\"rbclj\":\"datal\"}},{\"referenceName\":\"rj\",\"parameters\":{\"dpbmoq\":\"datanzzlfvefskjbasm\",\"apmeomcpvmakdtg\":\"datasvukgfzby\",\"myewbfo\":\"datanyubnw\",\"etj\":\"datawv\"}},{\"referenceName\":\"njbahxyfdd\",\"parameters\":{\"jh\":\"dataksr\",\"acyxnzadflv\":\"datacrmptjsixawipj\",\"vapo\":\"datakhgdzrcq\",\"hlovmx\":\"dataeminerejrd\"}},{\"referenceName\":\"ztdcadbm\",\"parameters\":{\"mh\":\"dataqmitrpa\",\"sziuhm\":\"datawcy\"}}],\"datasets\":[{\"referenceName\":\"hupoeljf\",\"parameters\":{\"awbsdeqqbdcbnrg\":\"datayoxajit\",\"mtgtnb\":\"datapnor\"}},{\"referenceName\":\"sopuwesmxodyto\",\"parameters\":{\"einhnsdg\":\"datal\"}},{\"referenceName\":\"uaqtqnqm\",\"parameters\":{\"ukenkuyombkgkyo\":\"datatzgomu\",\"yxkzxrm\":\"datauihprvokodr\",\"kafdxgtgcfkeaeup\":\"dataoycufkxygxoub\"}},{\"referenceName\":\"htlk\",\"parameters\":{\"ysrswzhciazweb\":\"dataqebbqetxsuxvjjwl\",\"yvzodnx\":\"dataskmqkanuxju\",\"ufancjlkrskz\":\"datacdgk\"}}]},\"extendedProperties\":{\"qjwvqia\":\"databafqzihmvw\"},\"retentionTimeInDays\":\"dataqjzvivwd\",\"autoUserSpecification\":\"datatcfulmzxhgwzbyst\"},\"linkedServiceName\":{\"referenceName\":\"uwehntjss\",\"parameters\":{\"ca\":\"datanatpymvqich\"}},\"policy\":{\"timeout\":\"datayjzn\",\"retry\":\"datayou\",\"retryIntervalInSeconds\":64897243,\"secureInput\":true,\"secureOutput\":true,\"\":{\"uasutdhmilhzy\":\"datavincnihmwvhcgc\",\"un\":\"datadjc\"}},\"name\":\"dadyrhmpokfxcbb\",\"description\":\"xgajyrac\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"eouhjetxupxe\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"geaenkfsxtsmzva\":\"dataru\"}}],\"userProperties\":[{\"name\":\"ajalbsw\",\"value\":\"databrllvvazu\"},{\"name\":\"cqzznwlxzmszx\",\"value\":\"datafai\"}],\"\":{\"lxjbrqbut\":\"datadqvdivzjyxsjbl\",\"vawe\":\"dataacnqudmyd\"}}")
            .toObject(CustomActivity.class);
        Assertions.assertEquals("dadyrhmpokfxcbb", model.name());
        Assertions.assertEquals("xgajyrac", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("eouhjetxupxe", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ajalbsw", model.userProperties().get(0).name());
        Assertions.assertEquals("uwehntjss", model.linkedServiceName().referenceName());
        Assertions.assertEquals(64897243, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("rcpxlki", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("rpeyigfdppgkk", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("hupoeljf", model.referenceObjects().datasets().get(0).referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomActivity model
            = new CustomActivity().withName("dadyrhmpokfxcbb")
                .withDescription("xgajyrac")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("eouhjetxupxe")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("ajalbsw").withValue("databrllvvazu"),
                    new UserProperty().withName("cqzznwlxzmszx").withValue("datafai")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("uwehntjss")
                    .withParameters(mapOf("ca", "datanatpymvqich")))
                .withPolicy(new ActivityPolicy().withTimeout("datayjzn")
                    .withRetry("datayou")
                    .withRetryIntervalInSeconds(64897243)
                    .withSecureInput(true)
                    .withSecureOutput(true)
                    .withAdditionalProperties(mapOf()))
                .withCommand("dataluszi")
                .withResourceLinkedService(new LinkedServiceReference().withReferenceName("rcpxlki")
                    .withParameters(mapOf("svcmceh", "datatbvh", "krp", "datarhwriihwxchyyf")))
                .withFolderPath("datanminsqjnuii")
                .withReferenceObjects(
                    new CustomActivityReferenceObject()
                        .withLinkedServices(Arrays.asList(
                            new LinkedServiceReference().withReferenceName("rpeyigfdppgkk")
                                .withParameters(mapOf("jgdybg", "datagjld", "tfwculsbnapzfdzm", "datatseznowzfxkof",
                                    "rbclj", "datal")),
                            new LinkedServiceReference().withReferenceName("rj")
                                .withParameters(mapOf("dpbmoq", "datanzzlfvefskjbasm", "apmeomcpvmakdtg",
                                    "datasvukgfzby", "myewbfo", "datanyubnw", "etj", "datawv")),
                            new LinkedServiceReference().withReferenceName("njbahxyfdd")
                                .withParameters(mapOf("jh", "dataksr", "acyxnzadflv", "datacrmptjsixawipj", "vapo",
                                    "datakhgdzrcq", "hlovmx", "dataeminerejrd")),
                            new LinkedServiceReference().withReferenceName("ztdcadbm")
                                .withParameters(mapOf("mh", "dataqmitrpa", "sziuhm", "datawcy"))))
                        .withDatasets(Arrays.asList(
                            new DatasetReference().withReferenceName("hupoeljf")
                                .withParameters(mapOf("awbsdeqqbdcbnrg", "datayoxajit", "mtgtnb", "datapnor")),
                            new DatasetReference().withReferenceName("sopuwesmxodyto")
                                .withParameters(mapOf("einhnsdg", "datal")),
                            new DatasetReference().withReferenceName("uaqtqnqm")
                                .withParameters(mapOf("ukenkuyombkgkyo", "datatzgomu", "yxkzxrm", "datauihprvokodr",
                                    "kafdxgtgcfkeaeup", "dataoycufkxygxoub")),
                            new DatasetReference().withReferenceName("htlk")
                                .withParameters(mapOf("ysrswzhciazweb", "dataqebbqetxsuxvjjwl", "yvzodnx",
                                    "dataskmqkanuxju", "ufancjlkrskz", "datacdgk")))))
                .withExtendedProperties(mapOf("qjwvqia", "databafqzihmvw"))
                .withRetentionTimeInDays("dataqjzvivwd")
                .withAutoUserSpecification("datatcfulmzxhgwzbyst");
        model = BinaryData.fromObject(model).toObject(CustomActivity.class);
        Assertions.assertEquals("dadyrhmpokfxcbb", model.name());
        Assertions.assertEquals("xgajyrac", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("eouhjetxupxe", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ajalbsw", model.userProperties().get(0).name());
        Assertions.assertEquals("uwehntjss", model.linkedServiceName().referenceName());
        Assertions.assertEquals(64897243, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("rcpxlki", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("rpeyigfdppgkk", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("hupoeljf", model.referenceObjects().datasets().get(0).referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
