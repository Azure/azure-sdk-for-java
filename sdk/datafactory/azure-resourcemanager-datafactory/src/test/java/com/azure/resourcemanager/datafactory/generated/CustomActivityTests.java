// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.CustomActivity;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomActivity model = BinaryData.fromString(
            "{\"type\":\"Custom\",\"typeProperties\":{\"command\":\"datazqg\",\"resourceLinkedService\":{\"referenceName\":\"arbvblatvbjkq\",\"parameters\":{\"fej\":\"datadgi\",\"ifujynfjwktiyhiy\":\"dataipe\",\"pdafuft\":\"dataatvaodif\"}},\"folderPath\":\"datapsjrqhgnr\",\"referenceObjects\":{\"linkedServices\":[{\"referenceName\":\"wtrxpwuxy\",\"parameters\":{\"oakutdth\":\"datamvshgbjukaswg\",\"tjsebcuynqdl\":\"dataoafhhiyk\",\"vqu\":\"dataptefdvjgbemrjb\"}},{\"referenceName\":\"pdprjethyhbnoye\",\"parameters\":{\"giqoib\":\"datavdrzxobtek\"}},{\"referenceName\":\"aumoguzx\",\"parameters\":{\"tpgkybdktyvr\":\"datarj\",\"psc\":\"datamrqbeqzhnpx\",\"dn\":\"datanygajqmpfrgouwef\",\"akdyqxjpzykkw\":\"datagathvlwhr\"}}],\"datasets\":[{\"referenceName\":\"kpby\",\"parameters\":{\"bsdg\":\"datawi\"}},{\"referenceName\":\"he\",\"parameters\":{\"urthmbgavw\":\"datarbojzfsznephb\",\"mi\":\"dataqjetoaijayvu\"}},{\"referenceName\":\"fnqjcx\",\"parameters\":{\"noxjbhltxtpgqqin\":\"dataeqwxivjhmld\",\"cwawblkkc\":\"dataktayafg\",\"ncqqhbjmvbe\":\"dataixsgklxgsqhczok\",\"ejnwwqyyfctfs\":\"datanlukeqzcbqv\"}}]},\"extendedProperties\":{\"rybbhktnuzor\":\"datarugh\",\"izjqpdfsaut\":\"dataa\"},\"retentionTimeInDays\":\"datatisl\",\"autoUserSpecification\":\"dataxs\"},\"linkedServiceName\":{\"referenceName\":\"diqemcghorrj\",\"parameters\":{\"cfnzpybrflqv\":\"dataczbbvrmvhtmzwgi\"}},\"policy\":{\"timeout\":\"dataqwpmmm\",\"retry\":\"datap\",\"retryIntervalInSeconds\":910562634,\"secureInput\":true,\"secureOutput\":false,\"\":{\"gfqgefxypxmkexjo\":\"databgboqnciiiwuufo\",\"jdaxezfdsoglji\":\"dataa\",\"aifwogqwdxtpmfa\":\"datawduwn\",\"znnkmms\":\"datahk\"}},\"name\":\"nigjoxhzcmgmcsj\",\"description\":\"bu\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"fvbayqwj\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Completed\",\"Failed\"],\"\":{\"uupbihuinjy\":\"datakxl\",\"ejryvvu\":\"datanqwep\"}},{\"activity\":\"tcnxtpamwjbm\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Skipped\",\"Skipped\"],\"\":{\"ycknq\":\"datajutvovhuifblyv\"}},{\"activity\":\"bvssjby\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Succeeded\"],\"\":{\"u\":\"datannqifuhsjz\",\"upfndafrziwjcy\":\"datamplt\",\"vd\":\"datazaneave\"}}],\"userProperties\":[{\"name\":\"hworhzes\",\"value\":\"datadvmxu\"},{\"name\":\"rqpawwjvdohz\",\"value\":\"datawu\"},{\"name\":\"lae\",\"value\":\"datahftlsfwpvflm\"},{\"name\":\"jdu\",\"value\":\"datatxbrj\"}],\"\":{\"uqwdmny\":\"datay\",\"ornzpr\":\"datafvxfsshocxd\"}}")
            .toObject(CustomActivity.class);
        Assertions.assertEquals("nigjoxhzcmgmcsj", model.name());
        Assertions.assertEquals("bu", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("fvbayqwj", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hworhzes", model.userProperties().get(0).name());
        Assertions.assertEquals("diqemcghorrj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(910562634, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("arbvblatvbjkq", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("wtrxpwuxy", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("kpby", model.referenceObjects().datasets().get(0).referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomActivity model = new CustomActivity().withName("nigjoxhzcmgmcsj")
            .withDescription("bu")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("fvbayqwj")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.COMPLETED, DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("tcnxtpamwjbm")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                        DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("bvssjby")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                        DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("hworhzes").withValue("datadvmxu"),
                new UserProperty().withName("rqpawwjvdohz").withValue("datawu"),
                new UserProperty().withName("lae").withValue("datahftlsfwpvflm"),
                new UserProperty().withName("jdu").withValue("datatxbrj")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("diqemcghorrj")
                .withParameters(mapOf("cfnzpybrflqv", "dataczbbvrmvhtmzwgi")))
            .withPolicy(new ActivityPolicy().withTimeout("dataqwpmmm")
                .withRetry("datap")
                .withRetryIntervalInSeconds(910562634)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withCommand("datazqg")
            .withResourceLinkedService(new LinkedServiceReference().withReferenceName("arbvblatvbjkq")
                .withParameters(mapOf("fej", "datadgi", "ifujynfjwktiyhiy", "dataipe", "pdafuft", "dataatvaodif")))
            .withFolderPath("datapsjrqhgnr")
            .withReferenceObjects(new CustomActivityReferenceObject()
                .withLinkedServices(Arrays.asList(
                    new LinkedServiceReference().withReferenceName("wtrxpwuxy")
                        .withParameters(mapOf("oakutdth", "datamvshgbjukaswg", "tjsebcuynqdl", "dataoafhhiyk", "vqu",
                            "dataptefdvjgbemrjb")),
                    new LinkedServiceReference().withReferenceName("pdprjethyhbnoye")
                        .withParameters(mapOf("giqoib", "datavdrzxobtek")),
                    new LinkedServiceReference().withReferenceName("aumoguzx")
                        .withParameters(mapOf("tpgkybdktyvr", "datarj", "psc", "datamrqbeqzhnpx", "dn",
                            "datanygajqmpfrgouwef", "akdyqxjpzykkw", "datagathvlwhr"))))
                .withDatasets(Arrays.asList(
                    new DatasetReference().withReferenceName("kpby").withParameters(mapOf("bsdg", "datawi")),
                    new DatasetReference().withReferenceName("he")
                        .withParameters(mapOf("urthmbgavw", "datarbojzfsznephb", "mi", "dataqjetoaijayvu")),
                    new DatasetReference().withReferenceName("fnqjcx")
                        .withParameters(mapOf("noxjbhltxtpgqqin", "dataeqwxivjhmld", "cwawblkkc", "dataktayafg",
                            "ncqqhbjmvbe", "dataixsgklxgsqhczok", "ejnwwqyyfctfs", "datanlukeqzcbqv")))))
            .withExtendedProperties(mapOf("rybbhktnuzor", "datarugh", "izjqpdfsaut", "dataa"))
            .withRetentionTimeInDays("datatisl")
            .withAutoUserSpecification("dataxs");
        model = BinaryData.fromObject(model).toObject(CustomActivity.class);
        Assertions.assertEquals("nigjoxhzcmgmcsj", model.name());
        Assertions.assertEquals("bu", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("fvbayqwj", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hworhzes", model.userProperties().get(0).name());
        Assertions.assertEquals("diqemcghorrj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(910562634, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("arbvblatvbjkq", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("wtrxpwuxy", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("kpby", model.referenceObjects().datasets().get(0).referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
