// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.CustomActivity;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomActivity model = BinaryData.fromString(
            "{\"type\":\"Custom\",\"typeProperties\":{\"command\":\"datagathvlwhr\",\"resourceLinkedService\":{\"referenceName\":\"kdyqxjpzykk\",\"parameters\":{\"sdg\":\"datakkpbybhqwil\",\"kir\":\"datahe\",\"rth\":\"dataojzfsznephbc\",\"ijayvuymib\":\"databgavwbqjeto\"}},\"folderPath\":\"dataqjcxp\",\"referenceObjects\":{\"linkedServices\":[{\"referenceName\":\"wxivj\",\"parameters\":{\"ink\":\"datadvnoxjbhltxtpgq\"}},{\"referenceName\":\"tayafg\",\"parameters\":{\"xgsqhczokunc\":\"dataawblkkccixsgk\",\"qzcbqvjejnwwqyy\":\"dataqhbjmvbeznluk\"}}],\"datasets\":[{\"referenceName\":\"fsdhmrughm\",\"parameters\":{\"pd\":\"databhktnuzorxatizj\",\"lcfxsgjdiqemcgh\":\"datasautviti\",\"bvrmvhtmzwgir\":\"datarrjawfcz\",\"lqvtv\":\"datafnzpybr\"}}]},\"extendedProperties\":{\"p\":\"datapmmmh\",\"iiiwu\":\"dataxthpsugebgboqn\"},\"retentionTimeInDays\":\"dataofgfqge\",\"autoUserSpecification\":\"dataypxm\"},\"linkedServiceName\":{\"referenceName\":\"xjonasjdaxezf\",\"parameters\":{\"ogqw\":\"datagljihwduwncaif\",\"fachkzzn\":\"dataxtp\"}},\"policy\":{\"timeout\":\"datamsfnigjoxhz\",\"retry\":\"datagmcsjyfbut\",\"retryIntervalInSeconds\":1000793246,\"secureInput\":false,\"secureOutput\":false,\"\":{\"jloehhhkxlquupb\":\"dataayqwj\"}},\"name\":\"huinjymnq\",\"description\":\"ptejryvvu\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"amwjb\",\"dependencyConditions\":[\"Completed\",\"Failed\"],\"\":{\"ifblyvqycknqmb\":\"datayxjjutvovh\",\"i\":\"datassjbyneusnncnn\",\"wupfndafrz\":\"datauhsjzduumpl\"}}],\"userProperties\":[{\"name\":\"cy\",\"value\":\"datazaneave\"},{\"name\":\"vd\",\"value\":\"dataulhworhzesqdvm\"}],\"\":{\"wu\":\"datarqpawwjvdohz\",\"hftlsfwpvflm\":\"datalae\"}}")
            .toObject(CustomActivity.class);
        Assertions.assertEquals("huinjymnq", model.name());
        Assertions.assertEquals("ptejryvvu", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("amwjb", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("cy", model.userProperties().get(0).name());
        Assertions.assertEquals("xjonasjdaxezf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1000793246, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("kdyqxjpzykk", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("wxivj", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("fsdhmrughm", model.referenceObjects().datasets().get(0).referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomActivity model
            = new CustomActivity().withName("huinjymnq")
                .withDescription("ptejryvvu")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("amwjb")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("cy").withValue("datazaneave"),
                    new UserProperty().withName("vd").withValue("dataulhworhzesqdvm")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("xjonasjdaxezf")
                    .withParameters(mapOf("ogqw", "datagljihwduwncaif", "fachkzzn", "dataxtp")))
                .withPolicy(new ActivityPolicy().withTimeout("datamsfnigjoxhz")
                    .withRetry("datagmcsjyfbut")
                    .withRetryIntervalInSeconds(1000793246)
                    .withSecureInput(false)
                    .withSecureOutput(false)
                    .withAdditionalProperties(mapOf()))
                .withCommand("datagathvlwhr")
                .withResourceLinkedService(new LinkedServiceReference().withReferenceName("kdyqxjpzykk")
                    .withParameters(mapOf("sdg", "datakkpbybhqwil", "kir", "datahe", "rth", "dataojzfsznephbc",
                        "ijayvuymib", "databgavwbqjeto")))
                .withFolderPath("dataqjcxp")
                .withReferenceObjects(
                    new CustomActivityReferenceObject()
                        .withLinkedServices(Arrays.asList(
                            new LinkedServiceReference().withReferenceName("wxivj")
                                .withParameters(mapOf("ink", "datadvnoxjbhltxtpgq")),
                            new LinkedServiceReference().withReferenceName("tayafg")
                                .withParameters(mapOf("xgsqhczokunc", "dataawblkkccixsgk", "qzcbqvjejnwwqyy",
                                    "dataqhbjmvbeznluk"))))
                        .withDatasets(Arrays.asList(new DatasetReference().withReferenceName("fsdhmrughm")
                            .withParameters(mapOf("pd", "databhktnuzorxatizj", "lcfxsgjdiqemcgh", "datasautviti",
                                "bvrmvhtmzwgir", "datarrjawfcz", "lqvtv", "datafnzpybr")))))
                .withExtendedProperties(mapOf("p", "datapmmmh", "iiiwu", "dataxthpsugebgboqn"))
                .withRetentionTimeInDays("dataofgfqge")
                .withAutoUserSpecification("dataypxm");
        model = BinaryData.fromObject(model).toObject(CustomActivity.class);
        Assertions.assertEquals("huinjymnq", model.name());
        Assertions.assertEquals("ptejryvvu", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("amwjb", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("cy", model.userProperties().get(0).name());
        Assertions.assertEquals("xjonasjdaxezf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1000793246, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("kdyqxjpzykk", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("wxivj", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("fsdhmrughm", model.referenceObjects().datasets().get(0).referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
