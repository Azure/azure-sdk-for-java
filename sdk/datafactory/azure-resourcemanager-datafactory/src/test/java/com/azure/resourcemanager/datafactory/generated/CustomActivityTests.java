// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.CustomActivity;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class CustomActivityTests {
    @Test
    public void testDeserialize() {
        CustomActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"Custom\",\"typeProperties\":{\"resourceLinkedService\":{\"referenceName\":\"qnacyheq\",\"parameters\":{}},\"referenceObjects\":{\"linkedServices\":[],\"datasets\":[]},\"extendedProperties\":{}},\"linkedServiceName\":{\"referenceName\":\"zfymcwmbupyvqyvl\",\"parameters\":{}},\"policy\":{\"retryIntervalInSeconds\":944098021,\"secureInput\":false,\"secureOutput\":false,\"\":{}},\"name\":\"ieswhddzydisn\",\"description\":\"pywyjlnld\",\"dependsOn\":[{\"activity\":\"ttdiia\",\"dependencyConditions\":[\"Failed\",\"Succeeded\"],\"\":{}},{\"activity\":\"jihw\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Succeeded\",\"Completed\"],\"\":{}},{\"activity\":\"vcjwqwoqsratj\",\"dependencyConditions\":[\"Skipped\",\"Completed\"],\"\":{}},{\"activity\":\"s\",\"dependencyConditions\":[\"Skipped\"],\"\":{}}],\"userProperties\":[{\"name\":\"gdkkagvwukh\"},{\"name\":\"usmmor\"},{\"name\":\"mzhwilzzhni\"}],\"\":{}}")
                .toObject(CustomActivity.class);
        Assertions.assertEquals("ieswhddzydisn", model.name());
        Assertions.assertEquals("pywyjlnld", model.description());
        Assertions.assertEquals("ttdiia", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("gdkkagvwukh", model.userProperties().get(0).name());
        Assertions.assertEquals("zfymcwmbupyvqyvl", model.linkedServiceName().referenceName());
        Assertions.assertEquals(944098021, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("qnacyheq", model.resourceLinkedService().referenceName());
    }

    @Test
    public void testSerialize() {
        CustomActivity model =
            new CustomActivity()
                .withName("ieswhddzydisn")
                .withDescription("pywyjlnld")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("ttdiia")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("jihw")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("vcjwqwoqsratj")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("s")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("gdkkagvwukh"),
                            new UserProperty().withName("usmmor"),
                            new UserProperty().withName("mzhwilzzhni")))
                .withLinkedServiceName(
                    new LinkedServiceReference().withReferenceName("zfymcwmbupyvqyvl").withParameters(mapOf()))
                .withPolicy(
                    new ActivityPolicy()
                        .withRetryIntervalInSeconds(944098021)
                        .withSecureInput(false)
                        .withSecureOutput(false)
                        .withAdditionalProperties(mapOf()))
                .withResourceLinkedService(
                    new LinkedServiceReference().withReferenceName("qnacyheq").withParameters(mapOf()))
                .withReferenceObjects(
                    new CustomActivityReferenceObject()
                        .withLinkedServices(Arrays.asList())
                        .withDatasets(Arrays.asList()))
                .withExtendedProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(CustomActivity.class);
        Assertions.assertEquals("ieswhddzydisn", model.name());
        Assertions.assertEquals("pywyjlnld", model.description());
        Assertions.assertEquals("ttdiia", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("gdkkagvwukh", model.userProperties().get(0).name());
        Assertions.assertEquals("zfymcwmbupyvqyvl", model.linkedServiceName().referenceName());
        Assertions.assertEquals(944098021, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("qnacyheq", model.resourceLinkedService().referenceName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
