// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.InformixTableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InformixTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InformixTableDataset model = BinaryData.fromString(
            "{\"type\":\"InformixTable\",\"typeProperties\":{\"tableName\":\"datazizyxdu\"},\"description\":\"nqzbrq\",\"structure\":\"datak\",\"schema\":\"datackviyjucamns\",\"linkedServiceName\":{\"referenceName\":\"qoitwhmucjiu\",\"parameters\":{\"elyqdvpqfbxg\":\"datayvehyk\"}},\"parameters\":{\"yw\":{\"type\":\"Array\",\"defaultValue\":\"datasdmtxqlefnoh\"},\"ey\":{\"type\":\"String\",\"defaultValue\":\"datapkyll\"},\"vcneqswxhqhgk\":{\"type\":\"Int\",\"defaultValue\":\"datapwdmsfwtwrsv\"},\"ncpmyh\":{\"type\":\"Array\",\"defaultValue\":\"datazvulqevv\"}},\"annotations\":[\"datadmvghcmi\",\"datamlwkfefbcyj\",\"datatalqee\",\"dataudfyimooaez\"],\"folder\":{\"name\":\"ms\"},\"\":{\"zbaeeek\":\"datahlqwbywa\"}}")
            .toObject(InformixTableDataset.class);
        Assertions.assertEquals("nqzbrq", model.description());
        Assertions.assertEquals("qoitwhmucjiu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("yw").type());
        Assertions.assertEquals("ms", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InformixTableDataset model = new InformixTableDataset().withDescription("nqzbrq")
            .withStructure("datak")
            .withSchema("datackviyjucamns")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("qoitwhmucjiu")
                .withParameters(mapOf("elyqdvpqfbxg", "datayvehyk")))
            .withParameters(mapOf("yw",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datasdmtxqlefnoh"), "ey",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datapkyll"),
                "vcneqswxhqhgk",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datapwdmsfwtwrsv"), "ncpmyh",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datazvulqevv")))
            .withAnnotations(Arrays.asList("datadmvghcmi", "datamlwkfefbcyj", "datatalqee", "dataudfyimooaez"))
            .withFolder(new DatasetFolder().withName("ms"))
            .withTableName("datazizyxdu");
        model = BinaryData.fromObject(model).toObject(InformixTableDataset.class);
        Assertions.assertEquals("nqzbrq", model.description());
        Assertions.assertEquals("qoitwhmucjiu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("yw").type());
        Assertions.assertEquals("ms", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
