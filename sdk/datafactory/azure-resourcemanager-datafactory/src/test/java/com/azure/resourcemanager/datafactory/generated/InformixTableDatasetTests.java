// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.InformixTableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InformixTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InformixTableDataset model = BinaryData.fromString(
            "{\"type\":\"owo\",\"typeProperties\":{\"tableName\":\"dataiqzzdckhsqdrrjsu\"},\"description\":\"xrxmyokohlsfjfo\",\"structure\":\"datajpz\",\"schema\":\"dataahuvkqxqkvadmjh\",\"linkedServiceName\":{\"referenceName\":\"mud\",\"parameters\":{\"rmclyqwwu\":\"dataajzdebhs\",\"svkb\":\"datayqkaaptb\",\"bloccu\":\"databptw\",\"uybutcdzjfjt\":\"dataplxzbnsshvqnpszb\"}},\"parameters\":{\"jgpqfk\":{\"type\":\"Array\",\"defaultValue\":\"datadyuxurxrltqmm\"},\"czscymqfvxgw\":{\"type\":\"Object\",\"defaultValue\":\"dataei\"}},\"annotations\":[\"datay\",\"datamzapdokez\",\"datape\",\"dataknfzqnzbflbqmhb\"],\"folder\":{\"name\":\"xvwedhag\"},\"\":{\"zzdcrolrz\":\"dataseseayuflms\"}}")
            .toObject(InformixTableDataset.class);
        Assertions.assertEquals("xrxmyokohlsfjfo", model.description());
        Assertions.assertEquals("mud", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("jgpqfk").type());
        Assertions.assertEquals("xvwedhag", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InformixTableDataset model = new InformixTableDataset().withDescription("xrxmyokohlsfjfo")
            .withStructure("datajpz")
            .withSchema("dataahuvkqxqkvadmjh")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("mud")
                .withParameters(mapOf("rmclyqwwu", "dataajzdebhs", "svkb", "datayqkaaptb", "bloccu", "databptw",
                    "uybutcdzjfjt", "dataplxzbnsshvqnpszb")))
            .withParameters(mapOf("jgpqfk",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datadyuxurxrltqmm"),
                "czscymqfvxgw", new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataei")))
            .withAnnotations(Arrays.asList("datay", "datamzapdokez", "datape", "dataknfzqnzbflbqmhb"))
            .withFolder(new DatasetFolder().withName("xvwedhag"))
            .withTableName("dataiqzzdckhsqdrrjsu");
        model = BinaryData.fromObject(model).toObject(InformixTableDataset.class);
        Assertions.assertEquals("xrxmyokohlsfjfo", model.description());
        Assertions.assertEquals("mud", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("jgpqfk").type());
        Assertions.assertEquals("xvwedhag", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
