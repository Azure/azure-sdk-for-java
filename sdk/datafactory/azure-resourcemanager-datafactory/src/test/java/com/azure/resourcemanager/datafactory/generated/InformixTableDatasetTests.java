// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.InformixTableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InformixTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InformixTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"InformixTable\",\"typeProperties\":{\"tableName\":\"dataspth\"},\"description\":\"fmwtblgm\",\"structure\":\"datakqoikxiefwln\",\"schema\":\"datakffcnuestbsl\",\"linkedServiceName\":{\"referenceName\":\"e\",\"parameters\":{\"ikjiytehhxt\":\"dataccote\",\"n\":\"dataxqdwbymuq\"}},\"parameters\":{\"pek\":{\"type\":\"Bool\",\"defaultValue\":\"dataorctyse\"},\"tzcvimmwckoz\":{\"type\":\"Float\",\"defaultValue\":\"databyh\"},\"xup\":{\"type\":\"String\",\"defaultValue\":\"dataymtrts\"},\"rfrjschjxncqzahg\":{\"type\":\"String\",\"defaultValue\":\"datackjbcbkg\"}},\"annotations\":[\"datagdobimor\"],\"folder\":{\"name\":\"xosgihtrxue\"},\"\":{\"znjqswshe\":\"dataxqfg\"}}")
                .toObject(InformixTableDataset.class);
        Assertions.assertEquals("fmwtblgm", model.description());
        Assertions.assertEquals("e", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("pek").type());
        Assertions.assertEquals("xosgihtrxue", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InformixTableDataset model =
            new InformixTableDataset()
                .withDescription("fmwtblgm")
                .withStructure("datakqoikxiefwln")
                .withSchema("datakffcnuestbsl")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("e")
                        .withParameters(mapOf("ikjiytehhxt", "dataccote", "n", "dataxqdwbymuq")))
                .withParameters(
                    mapOf(
                        "pek",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataorctyse"),
                        "tzcvimmwckoz",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("databyh"),
                        "xup",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataymtrts"),
                        "rfrjschjxncqzahg",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datackjbcbkg")))
                .withAnnotations(Arrays.asList("datagdobimor"))
                .withFolder(new DatasetFolder().withName("xosgihtrxue"))
                .withTableName("dataspth");
        model = BinaryData.fromObject(model).toObject(InformixTableDataset.class);
        Assertions.assertEquals("fmwtblgm", model.description());
        Assertions.assertEquals("e", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("pek").type());
        Assertions.assertEquals("xosgihtrxue", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
