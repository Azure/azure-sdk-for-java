// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSink;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataFlowSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataFlowSink model = BinaryData.fromString(
            "{\"schemaLinkedService\":{\"referenceName\":\"fki\",\"parameters\":{\"axikhfjqebglcxk\":\"datavsaaxwsp\",\"g\":\"datagzzromv\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"emtm\",\"parameters\":{\"pat\":\"datafsvpink\"}},\"name\":\"tdiswxspvckojaz\",\"description\":\"gspftesu\",\"dataset\":{\"referenceName\":\"pvpvd\",\"parameters\":{\"xzfxn\":\"datatcovqseusrfjb\",\"ihdcyyyzlw\":\"datamlbmuoswkjm\"}},\"linkedService\":{\"referenceName\":\"wzjnufz\",\"parameters\":{\"qgnnbz\":\"datam\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"tedzu\",\"datasetParameters\":\"datajtvgjsx\",\"parameters\":{\"btdphti\":\"datajjvavdpww\"},\"\":{\"hks\":\"datafofwan\",\"riwgybjp\":\"dataauwazcgwd\"}}}")
            .toObject(DataFlowSink.class);
        Assertions.assertEquals("tdiswxspvckojaz", model.name());
        Assertions.assertEquals("gspftesu", model.description());
        Assertions.assertEquals("pvpvd", model.dataset().referenceName());
        Assertions.assertEquals("wzjnufz", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("tedzu", model.flowlet().referenceName());
        Assertions.assertEquals("fki", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("emtm", model.rejectedDataLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataFlowSink model = new DataFlowSink().withName("tdiswxspvckojaz")
            .withDescription("gspftesu")
            .withDataset(new DatasetReference().withReferenceName("pvpvd")
                .withParameters(mapOf("xzfxn", "datatcovqseusrfjb", "ihdcyyyzlw", "datamlbmuoswkjm")))
            .withLinkedService(
                new LinkedServiceReference().withReferenceName("wzjnufz").withParameters(mapOf("qgnnbz", "datam")))
            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                .withReferenceName("tedzu")
                .withDatasetParameters("datajtvgjsx")
                .withParameters(mapOf("btdphti", "datajjvavdpww"))
                .withAdditionalProperties(mapOf()))
            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("fki")
                .withParameters(mapOf("axikhfjqebglcxk", "datavsaaxwsp", "g", "datagzzromv")))
            .withRejectedDataLinkedService(
                new LinkedServiceReference().withReferenceName("emtm").withParameters(mapOf("pat", "datafsvpink")));
        model = BinaryData.fromObject(model).toObject(DataFlowSink.class);
        Assertions.assertEquals("tdiswxspvckojaz", model.name());
        Assertions.assertEquals("gspftesu", model.description());
        Assertions.assertEquals("pvpvd", model.dataset().referenceName());
        Assertions.assertEquals("wzjnufz", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("tedzu", model.flowlet().referenceName());
        Assertions.assertEquals("fki", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("emtm", model.rejectedDataLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
