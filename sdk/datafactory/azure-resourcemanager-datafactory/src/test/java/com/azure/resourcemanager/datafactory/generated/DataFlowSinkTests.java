// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSink;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataFlowSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataFlowSink model = BinaryData.fromString(
            "{\"schemaLinkedService\":{\"referenceName\":\"pp\",\"parameters\":{\"dcwmqsyrilmhxdqa\":\"dataohoqkpjtnqjilayw\",\"tmfwobbjwhl\":\"datalfylnkkbjpjvlyw\",\"nqzocrdzg\":\"datayj\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"euntgxdncaqtti\",\"parameters\":{\"uvny\":\"datai\",\"hlqtxnrflkn\":\"datatzgixgyrihlgmgb\",\"hipx\":\"datarndpgfjodhdaqotw\",\"uumljcirvpefyc\":\"datagsabvcipowzafc\"}},\"name\":\"veitit\",\"description\":\"s\",\"dataset\":{\"referenceName\":\"ajlnsjhwjuyxx\",\"parameters\":{\"aytuadxkxeqbwp\":\"datavmv\",\"xsl\":\"datatghyksarcdr\",\"x\":\"datavlzladl\",\"wzdanojisgglmvo\":\"datapbqhvfdqqjwkr\"}},\"linkedService\":{\"referenceName\":\"tuz\",\"parameters\":{\"kaehxsmzyg\":\"datatibpv\",\"eivmak\":\"datafwakw\",\"tfjmskdchmaiub\":\"datahysowljuxlkbect\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"zwpvgmfa\",\"datasetParameters\":\"datazazmg\",\"parameters\":{\"zrthqet\":\"datadgjqafkmkro\"},\"\":{\"iezeagm\":\"datartvaoznqni\",\"lzmb\":\"dataeituugedhfpjs\",\"fsyrledjc\":\"datasyjdeolctae\"}}}")
            .toObject(DataFlowSink.class);
        Assertions.assertEquals("veitit", model.name());
        Assertions.assertEquals("s", model.description());
        Assertions.assertEquals("ajlnsjhwjuyxx", model.dataset().referenceName());
        Assertions.assertEquals("tuz", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("zwpvgmfa", model.flowlet().referenceName());
        Assertions.assertEquals("pp", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("euntgxdncaqtti", model.rejectedDataLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataFlowSink model
            = new DataFlowSink().withName("veitit")
                .withDescription("s")
                .withDataset(new DatasetReference().withReferenceName("ajlnsjhwjuyxx")
                    .withParameters(mapOf("aytuadxkxeqbwp", "datavmv", "xsl", "datatghyksarcdr", "x", "datavlzladl",
                        "wzdanojisgglmvo", "datapbqhvfdqqjwkr")))
                .withLinkedService(new LinkedServiceReference().withReferenceName("tuz")
                    .withParameters(mapOf("kaehxsmzyg", "datatibpv", "eivmak", "datafwakw", "tfjmskdchmaiub",
                        "datahysowljuxlkbect")))
                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                    .withReferenceName("zwpvgmfa")
                    .withDatasetParameters("datazazmg")
                    .withParameters(mapOf("zrthqet", "datadgjqafkmkro"))
                    .withAdditionalProperties(mapOf()))
                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("pp")
                    .withParameters(mapOf("dcwmqsyrilmhxdqa", "dataohoqkpjtnqjilayw", "tmfwobbjwhl",
                        "datalfylnkkbjpjvlyw", "nqzocrdzg", "datayj")))
                .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("euntgxdncaqtti")
                    .withParameters(mapOf("uvny", "datai", "hlqtxnrflkn", "datatzgixgyrihlgmgb", "hipx",
                        "datarndpgfjodhdaqotw", "uumljcirvpefyc", "datagsabvcipowzafc")));
        model = BinaryData.fromObject(model).toObject(DataFlowSink.class);
        Assertions.assertEquals("veitit", model.name());
        Assertions.assertEquals("s", model.description());
        Assertions.assertEquals("ajlnsjhwjuyxx", model.dataset().referenceName());
        Assertions.assertEquals("tuz", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("zwpvgmfa", model.flowlet().referenceName());
        Assertions.assertEquals("pp", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("euntgxdncaqtti", model.rejectedDataLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
