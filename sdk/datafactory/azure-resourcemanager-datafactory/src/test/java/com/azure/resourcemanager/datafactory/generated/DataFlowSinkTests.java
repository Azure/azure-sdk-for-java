// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSink;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataFlowSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataFlowSink model = BinaryData.fromString(
            "{\"schemaLinkedService\":{\"referenceName\":\"wimaaneakhtmh\",\"parameters\":{\"vkhgv\":\"datayanrfvq\",\"ymhcctopuo\":\"dataogxkfnaoa\",\"hquhczygxvhajp\":\"datayrnskb\",\"xqnwhscoz\":\"datae\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"mvgxsmpknpwir\",\"parameters\":{\"dnmckap\":\"datafewxqouox\",\"cdgmoqu\":\"datahknqiijge\",\"kyow\":\"dataqih\"}},\"name\":\"tjouwhldxwhi\",\"description\":\"roqksmfxm\",\"dataset\":{\"referenceName\":\"prstvkitbfj\",\"parameters\":{\"rqxw\":\"dataotnplfacqocc\",\"a\":\"datatjtdrhutfd\",\"eh\":\"datatxop\"}},\"linkedService\":{\"referenceName\":\"dkmdzgsszx\",\"parameters\":{\"rlsirnccla\":\"datakbbxuh\",\"suxxc\":\"datavoyn\",\"dsaidjanormovdxx\":\"databmyqjog\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"tujmoil\",\"datasetParameters\":\"datawemhdee\",\"parameters\":{\"egrhrh\":\"datalkyozdsfzj\",\"xvgjbfi\":\"dataslejtvxj\"},\"\":{\"moxsa\":\"datanjodfcbjqqwmtq\"}}}")
            .toObject(DataFlowSink.class);
        Assertions.assertEquals("tjouwhldxwhi", model.name());
        Assertions.assertEquals("roqksmfxm", model.description());
        Assertions.assertEquals("prstvkitbfj", model.dataset().referenceName());
        Assertions.assertEquals("dkmdzgsszx", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("tujmoil", model.flowlet().referenceName());
        Assertions.assertEquals("wimaaneakhtmh", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("mvgxsmpknpwir", model.rejectedDataLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataFlowSink model = new DataFlowSink().withName("tjouwhldxwhi")
            .withDescription("roqksmfxm")
            .withDataset(new DatasetReference().withReferenceName("prstvkitbfj")
                .withParameters(mapOf("rqxw", "dataotnplfacqocc", "a", "datatjtdrhutfd", "eh", "datatxop")))
            .withLinkedService(new LinkedServiceReference().withReferenceName("dkmdzgsszx")
                .withParameters(
                    mapOf("rlsirnccla", "datakbbxuh", "suxxc", "datavoyn", "dsaidjanormovdxx", "databmyqjog")))
            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                .withReferenceName("tujmoil")
                .withDatasetParameters("datawemhdee")
                .withParameters(mapOf("egrhrh", "datalkyozdsfzj", "xvgjbfi", "dataslejtvxj"))
                .withAdditionalProperties(mapOf()))
            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("wimaaneakhtmh")
                .withParameters(mapOf("vkhgv", "datayanrfvq", "ymhcctopuo", "dataogxkfnaoa", "hquhczygxvhajp",
                    "datayrnskb", "xqnwhscoz", "datae")))
            .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("mvgxsmpknpwir")
                .withParameters(mapOf("dnmckap", "datafewxqouox", "cdgmoqu", "datahknqiijge", "kyow", "dataqih")));
        model = BinaryData.fromObject(model).toObject(DataFlowSink.class);
        Assertions.assertEquals("tjouwhldxwhi", model.name());
        Assertions.assertEquals("roqksmfxm", model.description());
        Assertions.assertEquals("prstvkitbfj", model.dataset().referenceName());
        Assertions.assertEquals("dkmdzgsszx", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("tujmoil", model.flowlet().referenceName());
        Assertions.assertEquals("wimaaneakhtmh", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("mvgxsmpknpwir", model.rejectedDataLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
