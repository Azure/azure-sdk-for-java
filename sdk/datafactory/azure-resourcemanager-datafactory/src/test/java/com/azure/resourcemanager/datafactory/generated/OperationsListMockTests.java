// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.Operation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"ednmqxba\",\"origin\":\"vxejicpmglcvmuqx\",\"display\":{\"description\":\"nkjrtcifxled\",\"provider\":\"ugai\",\"resource\":\"vsj\",\"operation\":\"mnvtpbohzc\"},\"properties\":{\"serviceSpecification\":{\"logSpecifications\":[{\"name\":\"aqfvplfy\",\"displayName\":\"b\",\"blobDuration\":\"zshmqnnbbvq\"},{\"name\":\"wuwxtqdtvejilq\",\"displayName\":\"jxpro\",\"blobDuration\":\"yddrs\"},{\"name\":\"rxnweiytkeqjviaw\",\"displayName\":\"vbc\",\"blobDuration\":\"heelmiuprfqyrwtd\"},{\"name\":\"xr\",\"displayName\":\"ewdfualgkfoj\",\"blobDuration\":\"mdtuyimdoprkpdg\"}],\"metricSpecifications\":[{\"name\":\"tbebxjedy\",\"displayName\":\"ngnhoxbpq\",\"displayDescription\":\"aavxxv\",\"unit\":\"spptxdra\",\"aggregationType\":\"hqwfrtbvqtog\",\"enableRegionalMdmAccount\":\"devkntyguqsq\",\"sourceMdmAccount\":\"rentjyamijg\",\"sourceMdmNamespace\":\"izvvwyhszewhzaiu\",\"availabilities\":[{}],\"dimensions\":[{},{}]}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Operation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ednmqxba", response.iterator().next().name());
        Assertions.assertEquals("vxejicpmglcvmuqx", response.iterator().next().origin());
        Assertions.assertEquals("nkjrtcifxled", response.iterator().next().display().description());
        Assertions.assertEquals("ugai", response.iterator().next().display().provider());
        Assertions.assertEquals("vsj", response.iterator().next().display().resource());
        Assertions.assertEquals("mnvtpbohzc", response.iterator().next().display().operation());
        Assertions.assertEquals("aqfvplfy",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("b",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).displayName());
        Assertions.assertEquals("zshmqnnbbvq",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).blobDuration());
        Assertions.assertEquals("tbebxjedy",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("ngnhoxbpq",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("aavxxv",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals("spptxdra",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("hqwfrtbvqtog",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals("devkntyguqsq",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).enableRegionalMdmAccount());
        Assertions.assertEquals("rentjyamijg",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).sourceMdmAccount());
        Assertions.assertEquals("izvvwyhszewhzaiu",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).sourceMdmNamespace());
    }
}
