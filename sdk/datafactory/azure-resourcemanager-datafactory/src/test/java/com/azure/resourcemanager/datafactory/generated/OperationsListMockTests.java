// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.Operation;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"name\":\"sdwcx\",\"origin\":\"gidyansnunvgqtvg\",\"display\":{\"description\":\"rbn\",\"provider\":\"dyvrdsvsjgt\",\"resource\":\"rmibm\",\"operation\":\"xspztirvzbmhmk\"},\"properties\":{\"serviceSpecification\":{\"logSpecifications\":[{\"name\":\"ngpawy\",\"displayName\":\"bw\",\"blobDuration\":\"fz\"},{\"name\":\"qtpwhicnnanqzrml\",\"displayName\":\"ptmzsdwx\",\"blobDuration\":\"tpuzxinwj\"}],\"metricSpecifications\":[{\"name\":\"rhzd\",\"displayName\":\"eauhldq\",\"displayDescription\":\"kx\",\"unit\":\"nroewwrhvdwrowe\",\"aggregationType\":\"goijhc\",\"enableRegionalMdmAccount\":\"nprviivc\",\"sourceMdmAccount\":\"pc\",\"sourceMdmNamespace\":\"itvym\",\"availabilities\":[{}],\"dimensions\":[{}]}]}}}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DataFactoryManager manager = DataFactoryManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Operation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("sdwcx", response.iterator().next().name());
        Assertions.assertEquals("gidyansnunvgqtvg", response.iterator().next().origin());
        Assertions.assertEquals("rbn", response.iterator().next().display().description());
        Assertions.assertEquals("dyvrdsvsjgt", response.iterator().next().display().provider());
        Assertions.assertEquals("rmibm", response.iterator().next().display().resource());
        Assertions.assertEquals("xspztirvzbmhmk", response.iterator().next().display().operation());
        Assertions.assertEquals("ngpawy",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("bw",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).displayName());
        Assertions.assertEquals("fz",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).blobDuration());
        Assertions.assertEquals("rhzd",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("eauhldq",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("kx",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals("nroewwrhvdwrowe",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("goijhc",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals("nprviivc",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).enableRegionalMdmAccount());
        Assertions.assertEquals("pc",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).sourceMdmAccount());
        Assertions.assertEquals("itvym",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).sourceMdmNamespace());
    }
}
