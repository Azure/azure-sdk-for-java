// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.Operation;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"name\":\"mjlkknw\",\"origin\":\"avmrnrhsvkj\",\"display\":{\"description\":\"rmiivk\",\"provider\":\"cqynvfekjvclbkk\",\"resource\":\"frbdlsjftqahfvpm\",\"operation\":\"mu\"},\"properties\":{\"serviceSpecification\":{\"logSpecifications\":[{\"name\":\"wkyhn\",\"displayName\":\"tknpb\",\"blobDuration\":\"tkwstumjtg\"}],\"metricSpecifications\":[{\"name\":\"psnldjjg\",\"displayName\":\"bbon\",\"displayDescription\":\"m\",\"unit\":\"seykprgpqnesu\",\"aggregationType\":\"smtgzadpwhldx\",\"enableRegionalMdmAccount\":\"rytthzsgmugzssgz\",\"sourceMdmAccount\":\"vvqetvc\",\"sourceMdmNamespace\":\"bz\",\"availabilities\":[{},{}],\"dimensions\":[{}]},{\"name\":\"tmabrhiaomld\",\"displayName\":\"qoajpxtkraf\",\"displayDescription\":\"iquir\",\"unit\":\"qusdznnhhjdfy\",\"aggregationType\":\"iupdmbhaumpw\",\"enableRegionalMdmAccount\":\"ero\",\"sourceMdmAccount\":\"nvjouzjkjxbraqz\",\"sourceMdmNamespace\":\"vogfmpdlm\",\"availabilities\":[{},{},{},{}],\"dimensions\":[{},{},{},{}]}]}}}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DataFactoryManager manager =
            DataFactoryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Operation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("mjlkknw", response.iterator().next().name());
        Assertions.assertEquals("avmrnrhsvkj", response.iterator().next().origin());
        Assertions.assertEquals("rmiivk", response.iterator().next().display().description());
        Assertions.assertEquals("cqynvfekjvclbkk", response.iterator().next().display().provider());
        Assertions.assertEquals("frbdlsjftqahfvpm", response.iterator().next().display().resource());
        Assertions.assertEquals("mu", response.iterator().next().display().operation());
        Assertions
            .assertEquals("wkyhn", response.iterator().next().serviceSpecification().logSpecifications().get(0).name());
        Assertions
            .assertEquals(
                "tknpb", response.iterator().next().serviceSpecification().logSpecifications().get(0).displayName());
        Assertions
            .assertEquals(
                "tkwstumjtg",
                response.iterator().next().serviceSpecification().logSpecifications().get(0).blobDuration());
        Assertions
            .assertEquals(
                "psnldjjg", response.iterator().next().serviceSpecification().metricSpecifications().get(0).name());
        Assertions
            .assertEquals(
                "bbon", response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions
            .assertEquals(
                "m",
                response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions
            .assertEquals(
                "seykprgpqnesu",
                response.iterator().next().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions
            .assertEquals(
                "smtgzadpwhldx",
                response.iterator().next().serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions
            .assertEquals(
                "rytthzsgmugzssgz",
                response
                    .iterator()
                    .next()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .enableRegionalMdmAccount());
        Assertions
            .assertEquals(
                "vvqetvc",
                response.iterator().next().serviceSpecification().metricSpecifications().get(0).sourceMdmAccount());
        Assertions
            .assertEquals(
                "bz",
                response.iterator().next().serviceSpecification().metricSpecifications().get(0).sourceMdmNamespace());
    }
}
