// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ScriptActivity;
import com.azure.resourcemanager.datafactory.models.ScriptActivityLogDestination;
import com.azure.resourcemanager.datafactory.models.ScriptActivityScriptBlock;
import com.azure.resourcemanager.datafactory.models.ScriptActivityTypePropertiesLogSettings;
import com.azure.resourcemanager.datafactory.models.ScriptType;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ScriptActivityTests {
    @Test
    public void testDeserialize() {
        ScriptActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"Script\",\"typeProperties\":{\"scripts\":[{\"type\":\"Query\",\"parameters\":[]},{\"type\":\"Query\",\"parameters\":[]},{\"type\":\"Query\",\"parameters\":[]},{\"type\":\"Query\",\"parameters\":[]}],\"logSettings\":{\"logDestination\":\"ActivityOutput\"}},\"linkedServiceName\":{\"referenceName\":\"qycmmoxf\",\"parameters\":{}},\"policy\":{\"retryIntervalInSeconds\":771708153,\"secureInput\":true,\"secureOutput\":false,\"\":{}},\"name\":\"li\",\"description\":\"ycgnwplrrbphc\",\"dependsOn\":[{\"activity\":\"bibticuhqvum\",\"dependencyConditions\":[\"Succeeded\"],\"\":{}}],\"userProperties\":[{\"name\":\"qbbewfcuqfpyyxm\"},{\"name\":\"rmtmvwi\"},{\"name\":\"uweyyjshcyb\"},{\"name\":\"fuppoxprc\"}],\"\":{}}")
                .toObject(ScriptActivity.class);
        Assertions.assertEquals("li", model.name());
        Assertions.assertEquals("ycgnwplrrbphc", model.description());
        Assertions.assertEquals("bibticuhqvum", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qbbewfcuqfpyyxm", model.userProperties().get(0).name());
        Assertions.assertEquals("qycmmoxf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(771708153, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(ScriptType.QUERY, model.scripts().get(0).type());
        Assertions.assertEquals(ScriptActivityLogDestination.ACTIVITY_OUTPUT, model.logSettings().logDestination());
    }

    @Test
    public void testSerialize() {
        ScriptActivity model =
            new ScriptActivity()
                .withName("li")
                .withDescription("ycgnwplrrbphc")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("bibticuhqvum")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("qbbewfcuqfpyyxm"),
                            new UserProperty().withName("rmtmvwi"),
                            new UserProperty().withName("uweyyjshcyb"),
                            new UserProperty().withName("fuppoxprc")))
                .withLinkedServiceName(
                    new LinkedServiceReference().withReferenceName("qycmmoxf").withParameters(mapOf()))
                .withPolicy(
                    new ActivityPolicy()
                        .withRetryIntervalInSeconds(771708153)
                        .withSecureInput(true)
                        .withSecureOutput(false)
                        .withAdditionalProperties(mapOf()))
                .withScripts(
                    Arrays
                        .asList(
                            new ScriptActivityScriptBlock().withType(ScriptType.QUERY).withParameters(Arrays.asList()),
                            new ScriptActivityScriptBlock().withType(ScriptType.QUERY).withParameters(Arrays.asList()),
                            new ScriptActivityScriptBlock().withType(ScriptType.QUERY).withParameters(Arrays.asList()),
                            new ScriptActivityScriptBlock().withType(ScriptType.QUERY).withParameters(Arrays.asList())))
                .withLogSettings(
                    new ScriptActivityTypePropertiesLogSettings()
                        .withLogDestination(ScriptActivityLogDestination.ACTIVITY_OUTPUT));
        model = BinaryData.fromObject(model).toObject(ScriptActivity.class);
        Assertions.assertEquals("li", model.name());
        Assertions.assertEquals("ycgnwplrrbphc", model.description());
        Assertions.assertEquals("bibticuhqvum", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qbbewfcuqfpyyxm", model.userProperties().get(0).name());
        Assertions.assertEquals("qycmmoxf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(771708153, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(ScriptType.QUERY, model.scripts().get(0).type());
        Assertions.assertEquals(ScriptActivityLogDestination.ACTIVITY_OUTPUT, model.logSettings().logDestination());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
