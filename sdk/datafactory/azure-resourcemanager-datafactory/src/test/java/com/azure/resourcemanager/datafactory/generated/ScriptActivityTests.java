// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.ScriptActivity;
import com.azure.resourcemanager.datafactory.models.ScriptActivityLogDestination;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameter;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterDirection;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterType;
import com.azure.resourcemanager.datafactory.models.ScriptActivityScriptBlock;
import com.azure.resourcemanager.datafactory.models.ScriptActivityTypePropertiesLogSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptActivity model = BinaryData.fromString(
            "{\"type\":\"sb\",\"typeProperties\":{\"scriptBlockExecutionTimeout\":\"datacnwqeixyjlfobj\",\"scripts\":[{\"text\":\"datatsvnlod\",\"type\":\"datavcqowcglf\",\"parameters\":[{\"name\":\"datasyskivlz\",\"type\":\"Int32\",\"value\":\"datavlgcppns\",\"direction\":\"Output\",\"size\":1864282211}]}],\"logSettings\":{\"logDestination\":\"ExternalStore\",\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"urwgty\",\"parameters\":{\"d\":\"dataoxollc\"}},\"path\":\"datacjsktejcmh\"}}},\"linkedServiceName\":{\"referenceName\":\"eavbezzp\",\"parameters\":{\"whodfwvzxrfr\":\"datadvv\"}},\"policy\":{\"timeout\":\"datayktlofgpnswv\",\"retry\":\"dataekwpgdfpoqbekk\",\"retryIntervalInSeconds\":539669660,\"secureInput\":true,\"secureOutput\":true,\"\":{\"flgtq\":\"datawprbzfbdsnc\",\"jomnkeaiamh\":\"dataowtazqexwkkjx\",\"clzrot\":\"datajxud\",\"fkdf\":\"datairttlwuqgaaj\"}},\"name\":\"kmeeowdo\",\"description\":\"jaqfebtvnsk\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"tsy\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"gomdqght\":\"datajcbzijnykf\",\"kkdb\":\"dataweltnev\",\"lieyyfqhndj\":\"datagurnxqiwgrj\",\"hsgpym\":\"datayovuyxccrajx\"}}],\"userProperties\":[{\"name\":\"sdj\",\"value\":\"datarlpsj\"},{\"name\":\"nnuqszy\",\"value\":\"dataoiufrqsmjgddbunx\"}],\"\":{\"whacurmmbun\":\"datataqsfphg\"}}")
            .toObject(ScriptActivity.class);
        Assertions.assertEquals("kmeeowdo", model.name());
        Assertions.assertEquals("jaqfebtvnsk", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("tsy", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("sdj", model.userProperties().get(0).name());
        Assertions.assertEquals("eavbezzp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(539669660, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(ScriptActivityParameterType.INT32, model.scripts().get(0).parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.OUTPUT,
            model.scripts().get(0).parameters().get(0).direction());
        Assertions.assertEquals(1864282211, model.scripts().get(0).parameters().get(0).size());
        Assertions.assertEquals(ScriptActivityLogDestination.EXTERNAL_STORE, model.logSettings().logDestination());
        Assertions.assertEquals("urwgty",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptActivity model = new ScriptActivity().withName("kmeeowdo")
            .withDescription("jaqfebtvnsk")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("tsy")
                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("sdj").withValue("datarlpsj"),
                new UserProperty().withName("nnuqszy").withValue("dataoiufrqsmjgddbunx")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("eavbezzp")
                .withParameters(mapOf("whodfwvzxrfr", "datadvv")))
            .withPolicy(new ActivityPolicy().withTimeout("datayktlofgpnswv")
                .withRetry("dataekwpgdfpoqbekk")
                .withRetryIntervalInSeconds(539669660)
                .withSecureInput(true)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withScriptBlockExecutionTimeout("datacnwqeixyjlfobj")
            .withScripts(Arrays.asList(new ScriptActivityScriptBlock().withText("datatsvnlod")
                .withType("datavcqowcglf")
                .withParameters(Arrays.asList(new ScriptActivityParameter().withName("datasyskivlz")
                    .withType(ScriptActivityParameterType.INT32)
                    .withValue("datavlgcppns")
                    .withDirection(ScriptActivityParameterDirection.OUTPUT)
                    .withSize(1864282211)))))
            .withLogSettings(new ScriptActivityTypePropertiesLogSettings()
                .withLogDestination(ScriptActivityLogDestination.EXTERNAL_STORE)
                .withLogLocationSettings(new LogLocationSettings().withLinkedServiceName(
                    new LinkedServiceReference().withReferenceName("urwgty").withParameters(mapOf("d", "dataoxollc")))
                    .withPath("datacjsktejcmh")));
        model = BinaryData.fromObject(model).toObject(ScriptActivity.class);
        Assertions.assertEquals("kmeeowdo", model.name());
        Assertions.assertEquals("jaqfebtvnsk", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("tsy", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("sdj", model.userProperties().get(0).name());
        Assertions.assertEquals("eavbezzp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(539669660, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(ScriptActivityParameterType.INT32, model.scripts().get(0).parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.OUTPUT,
            model.scripts().get(0).parameters().get(0).direction());
        Assertions.assertEquals(1864282211, model.scripts().get(0).parameters().get(0).size());
        Assertions.assertEquals(ScriptActivityLogDestination.EXTERNAL_STORE, model.logSettings().logDestination());
        Assertions.assertEquals("urwgty",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
