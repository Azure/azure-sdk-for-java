// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.ScriptActivity;
import com.azure.resourcemanager.datafactory.models.ScriptActivityLogDestination;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameter;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterDirection;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterType;
import com.azure.resourcemanager.datafactory.models.ScriptActivityScriptBlock;
import com.azure.resourcemanager.datafactory.models.ScriptActivityTypePropertiesLogSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptActivity model = BinaryData.fromString(
            "{\"type\":\"Script\",\"typeProperties\":{\"scriptBlockExecutionTimeout\":\"datavkzg\",\"scripts\":[{\"text\":\"datanvfekj\",\"type\":\"dataclbkkjz\",\"parameters\":[{\"name\":\"datalsjftqahfvpmw\",\"type\":\"Int64\",\"value\":\"datacjnkawkyh\",\"direction\":\"Input\",\"size\":53251602},{\"name\":\"datapbzktk\",\"type\":\"Double\",\"value\":\"datamjtgzu\",\"direction\":\"Output\",\"size\":2076493341}]},{\"text\":\"datal\",\"type\":\"dataj\",\"parameters\":[{\"name\":\"databbon\",\"type\":\"Guid\",\"value\":\"datafseykprgpqnesu\",\"direction\":\"Output\",\"size\":1419451177},{\"name\":\"datazadpwhldx\",\"type\":\"Int32\",\"value\":\"datatt\",\"direction\":\"Input\",\"size\":995318961},{\"name\":\"datagzssg\",\"type\":\"Boolean\",\"value\":\"datavqetvcxabzwehvs\",\"direction\":\"InputOutput\",\"size\":905453692},{\"name\":\"datahiaomldtkqoajp\",\"type\":\"Int32\",\"value\":\"dataafhz\",\"direction\":\"Output\",\"size\":1911604908}]},{\"text\":\"dataozqusdznnhh\",\"type\":\"datadfyusiupdmbh\",\"parameters\":[{\"name\":\"datawgteroaenvjouz\",\"type\":\"Int64\",\"value\":\"databraqzrbvogfm\",\"direction\":\"InputOutput\",\"size\":1572339861},{\"name\":\"datanlqnklbwyqoyp\",\"type\":\"Int32\",\"value\":\"dataajxmgxsp\",\"direction\":\"Input\",\"size\":779229082}]}],\"logSettings\":{\"logDestination\":\"ActivityOutput\",\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"kwvjo\",\"parameters\":{\"cloyvr\":\"dataaiydjgkdjmylhcjx\",\"bkigzvugwbc\":\"datazepnlwuhtfabafk\",\"ixp\":\"dataabsqpttulhanjui\",\"sk\":\"datatfdujuoiien\"}},\"path\":\"dataaqb\"}}},\"linkedServiceName\":{\"referenceName\":\"cnbnlpp\",\"parameters\":{\"pnobcqnym\":\"dataipfazsayrkd\",\"xcno\":\"dataswrtifxbhuzv\",\"es\":\"datakwvzrxaixxi\"}},\"policy\":{\"timeout\":\"datavpuu\",\"retry\":\"datayfjmoreh\",\"retryIntervalInSeconds\":453447066,\"secureInput\":true,\"secureOutput\":false,\"\":{\"jfmh\":\"datairrphtj\",\"gpqfflswqehtfr\":\"datadnxrwgd\",\"evtykfxos\":\"datazqeinnbu\",\"uhfwklsthjvyk\":\"dataz\"}},\"name\":\"wpgwpulrtjweuoro\",\"description\":\"nkxswohshncd\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"tdidhhacpwdlctgi\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"oshkqthuijvi\":\"datar\",\"wp\":\"datatw\",\"uxo\":\"databgoe\"}},{\"activity\":\"fsfuzqpigirnmd\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Skipped\"],\"\":{\"e\":\"datayf\",\"kllbfnn\":\"dataiuv\",\"jcyhvyrhgeuvujyw\":\"dataertgq\",\"xpcxylquowunwac\":\"datadkjayi\"}},{\"activity\":\"jpgwseulfzxgh\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Completed\",\"Failed\"],\"\":{\"ujlmbpjnalsbxv\":\"datamkzdtjngkfipxol\",\"rmevkckoce\":\"datauxcdenthgp\",\"arohw\":\"datahlvfniryh\"}}],\"userProperties\":[{\"name\":\"hzwsjqrmxpyzn\",\"value\":\"dataamnkgmos\"},{\"name\":\"yfyvodctpczzqusf\",\"value\":\"datagwsrr\"}],\"\":{\"swyaejffvf\":\"datajolyspk\",\"wcuhqfxferfza\":\"datakhgqsjecccfyc\"}}")
            .toObject(ScriptActivity.class);
        Assertions.assertEquals("wpgwpulrtjweuoro", model.name());
        Assertions.assertEquals("nkxswohshncd", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("tdidhhacpwdlctgi", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hzwsjqrmxpyzn", model.userProperties().get(0).name());
        Assertions.assertEquals("cnbnlpp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(453447066, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(ScriptActivityParameterType.INT64, model.scripts().get(0).parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.INPUT,
            model.scripts().get(0).parameters().get(0).direction());
        Assertions.assertEquals(53251602, model.scripts().get(0).parameters().get(0).size());
        Assertions.assertEquals(ScriptActivityLogDestination.ACTIVITY_OUTPUT, model.logSettings().logDestination());
        Assertions.assertEquals("kwvjo", model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptActivity model = new ScriptActivity().withName("wpgwpulrtjweuoro")
            .withDescription("nkxswohshncd")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("tdidhhacpwdlctgi")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("fsfuzqpigirnmd")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("jpgwseulfzxgh")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SKIPPED,
                        DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("hzwsjqrmxpyzn").withValue("dataamnkgmos"),
                new UserProperty().withName("yfyvodctpczzqusf").withValue("datagwsrr")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("cnbnlpp")
                .withParameters(
                    mapOf("pnobcqnym", "dataipfazsayrkd", "xcno", "dataswrtifxbhuzv", "es", "datakwvzrxaixxi")))
            .withPolicy(new ActivityPolicy().withTimeout("datavpuu")
                .withRetry("datayfjmoreh")
                .withRetryIntervalInSeconds(453447066)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withScriptBlockExecutionTimeout("datavkzg")
            .withScripts(
                Arrays
                    .asList(
                        new ScriptActivityScriptBlock().withText("datanvfekj")
                            .withType("dataclbkkjz")
                            .withParameters(Arrays.asList(
                                new ScriptActivityParameter().withName("datalsjftqahfvpmw")
                                    .withType(ScriptActivityParameterType.INT64)
                                    .withValue("datacjnkawkyh")
                                    .withDirection(ScriptActivityParameterDirection.INPUT)
                                    .withSize(53251602),
                                new ScriptActivityParameter().withName("datapbzktk")
                                    .withType(ScriptActivityParameterType.DOUBLE)
                                    .withValue("datamjtgzu")
                                    .withDirection(ScriptActivityParameterDirection.OUTPUT)
                                    .withSize(2076493341))),
                        new ScriptActivityScriptBlock().withText("datal")
                            .withType("dataj")
                            .withParameters(
                                Arrays.asList(
                                    new ScriptActivityParameter().withName("databbon")
                                        .withType(ScriptActivityParameterType.GUID)
                                        .withValue("datafseykprgpqnesu")
                                        .withDirection(ScriptActivityParameterDirection.OUTPUT)
                                        .withSize(1419451177),
                                    new ScriptActivityParameter().withName("datazadpwhldx")
                                        .withType(ScriptActivityParameterType.INT32)
                                        .withValue("datatt")
                                        .withDirection(ScriptActivityParameterDirection.INPUT)
                                        .withSize(995318961),
                                    new ScriptActivityParameter().withName("datagzssg")
                                        .withType(ScriptActivityParameterType.BOOLEAN)
                                        .withValue("datavqetvcxabzwehvs")
                                        .withDirection(ScriptActivityParameterDirection.INPUT_OUTPUT)
                                        .withSize(905453692),
                                    new ScriptActivityParameter().withName("datahiaomldtkqoajp")
                                        .withType(ScriptActivityParameterType.INT32)
                                        .withValue("dataafhz")
                                        .withDirection(ScriptActivityParameterDirection.OUTPUT)
                                        .withSize(1911604908))),
                        new ScriptActivityScriptBlock().withText("dataozqusdznnhh")
                            .withType("datadfyusiupdmbh")
                            .withParameters(Arrays.asList(
                                new ScriptActivityParameter().withName("datawgteroaenvjouz")
                                    .withType(ScriptActivityParameterType.INT64)
                                    .withValue("databraqzrbvogfm")
                                    .withDirection(ScriptActivityParameterDirection.INPUT_OUTPUT)
                                    .withSize(1572339861),
                                new ScriptActivityParameter().withName("datanlqnklbwyqoyp")
                                    .withType(ScriptActivityParameterType.INT32)
                                    .withValue("dataajxmgxsp")
                                    .withDirection(ScriptActivityParameterDirection.INPUT)
                                    .withSize(779229082)))))
            .withLogSettings(
                new ScriptActivityTypePropertiesLogSettings()
                    .withLogDestination(ScriptActivityLogDestination.ACTIVITY_OUTPUT)
                    .withLogLocationSettings(new LogLocationSettings()
                        .withLinkedServiceName(new LinkedServiceReference().withReferenceName("kwvjo")
                            .withParameters(mapOf("cloyvr", "dataaiydjgkdjmylhcjx", "bkigzvugwbc",
                                "datazepnlwuhtfabafk", "ixp", "dataabsqpttulhanjui", "sk", "datatfdujuoiien")))
                        .withPath("dataaqb")));
        model = BinaryData.fromObject(model).toObject(ScriptActivity.class);
        Assertions.assertEquals("wpgwpulrtjweuoro", model.name());
        Assertions.assertEquals("nkxswohshncd", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("tdidhhacpwdlctgi", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hzwsjqrmxpyzn", model.userProperties().get(0).name());
        Assertions.assertEquals("cnbnlpp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(453447066, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(ScriptActivityParameterType.INT64, model.scripts().get(0).parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.INPUT,
            model.scripts().get(0).parameters().get(0).direction());
        Assertions.assertEquals(53251602, model.scripts().get(0).parameters().get(0).size());
        Assertions.assertEquals(ScriptActivityLogDestination.ACTIVITY_OUTPUT, model.logSettings().logDestination());
        Assertions.assertEquals("kwvjo", model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
