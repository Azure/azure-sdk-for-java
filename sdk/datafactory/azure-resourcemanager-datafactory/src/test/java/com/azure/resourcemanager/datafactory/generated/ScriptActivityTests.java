// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.ScriptActivity;
import com.azure.resourcemanager.datafactory.models.ScriptActivityLogDestination;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameter;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterDirection;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterType;
import com.azure.resourcemanager.datafactory.models.ScriptActivityScriptBlock;
import com.azure.resourcemanager.datafactory.models.ScriptActivityTypePropertiesLogSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptActivity model = BinaryData.fromString(
            "{\"type\":\"Script\",\"typeProperties\":{\"scriptBlockExecutionTimeout\":\"datafv\",\"scripts\":[{\"text\":\"datalxbpxzducfzdpgtb\",\"type\":\"datatibpg\",\"parameters\":[{\"name\":\"dataujfputci\",\"type\":\"String\",\"value\":\"datapksjwaglhwnnfgy\",\"direction\":\"Input\",\"size\":2133630125},{\"name\":\"datakmwvqtmfq\",\"type\":\"Int32\",\"value\":\"dataeljytshjjbocuu\",\"direction\":\"InputOutput\",\"size\":472367966},{\"name\":\"datahezhezyhwo\",\"type\":\"Boolean\",\"value\":\"datash\",\"direction\":\"InputOutput\",\"size\":950117586}]}],\"logSettings\":{\"logDestination\":\"ExternalStore\",\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"zeylthdrnzeidblr\",\"parameters\":{\"icwgdivq\":\"datafcck\",\"zomsqebmfopely\":\"databvgcebutskdgsuht\",\"bosnlaxeozgjtuh\":\"dataulia\",\"ptoentuve\":\"datagmshuyqehbpr\"}},\"path\":\"datatlfbzlzi\"}}},\"linkedServiceName\":{\"referenceName\":\"qlxwretsphetrq\",\"parameters\":{\"xkdiwpa\":\"datazrbgqtjjiearyz\",\"lhphurza\":\"dataumel\",\"vvrditghbaqumql\":\"datacukgmtrnwwww\"}},\"policy\":{\"timeout\":\"datasizerzygkdl\",\"retry\":\"dataltqryaahltto\",\"retryIntervalInSeconds\":1054322566,\"secureInput\":true,\"secureOutput\":false,\"\":{\"sgikvsnfn\":\"datavoeuiwyptzefeo\",\"aypbvgwylta\":\"datafsfgabdumhpbcix\"}},\"name\":\"n\",\"description\":\"elxmulyal\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"fdyawetkrmq\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Skipped\",\"Succeeded\"],\"\":{\"dceimlu\":\"dataxtnlor\",\"oxrj\":\"dataqxjxqqbkfdnski\",\"aufhxeeebcxeecgf\":\"datagmscic\"}},{\"activity\":\"ldjipayy\",\"dependencyConditions\":[\"Failed\"],\"\":{\"wltkukmdeqr\":\"datayyltn\",\"ijevf\":\"datauam\",\"xtkvpejtdlqorcyp\":\"datanvuokwjmtehpfn\"}},{\"activity\":\"kwfalgzsgk\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Completed\"],\"\":{\"vhhayqxlcrsho\":\"datahiqgihdu\"}}],\"userProperties\":[{\"name\":\"enobfviscauudx\",\"value\":\"datacvtzrgcmxbrf\"},{\"name\":\"iekwfx\",\"value\":\"datadotdgvsoypgqoqvc\"}],\"\":{\"uhbkapbgmjodfs\":\"dataypzcql\",\"gvsjuvjmnsgv\":\"datahlipxkxhj\",\"lvglwxepiwpi\":\"datayhomd\"}}")
            .toObject(ScriptActivity.class);
        Assertions.assertEquals("n", model.name());
        Assertions.assertEquals("elxmulyal", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("fdyawetkrmq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("enobfviscauudx", model.userProperties().get(0).name());
        Assertions.assertEquals("qlxwretsphetrq", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1054322566, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(ScriptActivityParameterType.STRING, model.scripts().get(0).parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.INPUT,
            model.scripts().get(0).parameters().get(0).direction());
        Assertions.assertEquals(2133630125, model.scripts().get(0).parameters().get(0).size());
        Assertions.assertEquals(ScriptActivityLogDestination.EXTERNAL_STORE, model.logSettings().logDestination());
        Assertions.assertEquals("zeylthdrnzeidblr",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptActivity model = new ScriptActivity().withName("n")
            .withDescription("elxmulyal")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("fdyawetkrmq")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.COMPLETED, DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("ldjipayy")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("kwfalgzsgk")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED,
                        DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("enobfviscauudx").withValue("datacvtzrgcmxbrf"),
                    new UserProperty().withName("iekwfx").withValue("datadotdgvsoypgqoqvc")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("qlxwretsphetrq")
                .withParameters(mapOf("xkdiwpa", "datazrbgqtjjiearyz", "lhphurza", "dataumel", "vvrditghbaqumql",
                    "datacukgmtrnwwww")))
            .withPolicy(new ActivityPolicy().withTimeout("datasizerzygkdl")
                .withRetry("dataltqryaahltto")
                .withRetryIntervalInSeconds(1054322566)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withScriptBlockExecutionTimeout("datafv")
            .withScripts(Arrays.asList(new ScriptActivityScriptBlock().withText("datalxbpxzducfzdpgtb")
                .withType("datatibpg")
                .withParameters(Arrays.asList(
                    new ScriptActivityParameter().withName("dataujfputci")
                        .withType(ScriptActivityParameterType.STRING)
                        .withValue("datapksjwaglhwnnfgy")
                        .withDirection(ScriptActivityParameterDirection.INPUT)
                        .withSize(2133630125),
                    new ScriptActivityParameter().withName("datakmwvqtmfq")
                        .withType(ScriptActivityParameterType.INT32)
                        .withValue("dataeljytshjjbocuu")
                        .withDirection(ScriptActivityParameterDirection.INPUT_OUTPUT)
                        .withSize(472367966),
                    new ScriptActivityParameter().withName("datahezhezyhwo")
                        .withType(ScriptActivityParameterType.BOOLEAN)
                        .withValue("datash")
                        .withDirection(ScriptActivityParameterDirection.INPUT_OUTPUT)
                        .withSize(950117586)))))
            .withLogSettings(new ScriptActivityTypePropertiesLogSettings()
                .withLogDestination(ScriptActivityLogDestination.EXTERNAL_STORE)
                .withLogLocationSettings(new LogLocationSettings()
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("zeylthdrnzeidblr")
                        .withParameters(mapOf("icwgdivq", "datafcck", "zomsqebmfopely", "databvgcebutskdgsuht",
                            "bosnlaxeozgjtuh", "dataulia", "ptoentuve", "datagmshuyqehbpr")))
                    .withPath("datatlfbzlzi")));
        model = BinaryData.fromObject(model).toObject(ScriptActivity.class);
        Assertions.assertEquals("n", model.name());
        Assertions.assertEquals("elxmulyal", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("fdyawetkrmq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("enobfviscauudx", model.userProperties().get(0).name());
        Assertions.assertEquals("qlxwretsphetrq", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1054322566, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(ScriptActivityParameterType.STRING, model.scripts().get(0).parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.INPUT,
            model.scripts().get(0).parameters().get(0).direction());
        Assertions.assertEquals(2133630125, model.scripts().get(0).parameters().get(0).size());
        Assertions.assertEquals(ScriptActivityLogDestination.EXTERNAL_STORE, model.logSettings().logDestination());
        Assertions.assertEquals("zeylthdrnzeidblr",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
