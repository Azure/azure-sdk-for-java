// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ODataResourceDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ODataResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ODataResourceDataset model = BinaryData.fromString(
            "{\"type\":\"ODataResource\",\"typeProperties\":{\"path\":\"datapeygkbzb\"},\"description\":\"asybxhqvovdpmht\",\"structure\":\"datavsqjs\",\"schema\":\"datajnqtaqg\",\"linkedServiceName\":{\"referenceName\":\"qbfkceincnrecjbi\",\"parameters\":{\"nszdosmjsq\":\"datavsfgdr\",\"vhgsulwvgseuf\":\"datavzvmxtcwghnda\",\"juzkilmc\":\"datagvf\"}},\"parameters\":{\"bybpaxhpzys\":{\"type\":\"Int\",\"defaultValue\":\"datazekypyovljlbzd\"},\"ahn\":{\"type\":\"Array\",\"defaultValue\":\"datanwbhanzgesfhshag\"}},\"annotations\":[\"databyfyvy\",\"datapmggqgagenvqbug\",\"datahcdvfoizorb\",\"dataoejzsaxzgkqwvdep\"],\"folder\":{\"name\":\"aphifkfrpm\"},\"\":{\"nfpgh\":\"databpebrmj\",\"tpkimskhnkkhbykr\":\"datab\"}}")
            .toObject(ODataResourceDataset.class);
        Assertions.assertEquals("asybxhqvovdpmht", model.description());
        Assertions.assertEquals("qbfkceincnrecjbi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("bybpaxhpzys").type());
        Assertions.assertEquals("aphifkfrpm", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ODataResourceDataset model = new ODataResourceDataset().withDescription("asybxhqvovdpmht")
            .withStructure("datavsqjs")
            .withSchema("datajnqtaqg")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("qbfkceincnrecjbi")
                .withParameters(
                    mapOf("nszdosmjsq", "datavsfgdr", "vhgsulwvgseuf", "datavzvmxtcwghnda", "juzkilmc", "datagvf")))
            .withParameters(mapOf("bybpaxhpzys",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datazekypyovljlbzd"), "ahn",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datanwbhanzgesfhshag")))
            .withAnnotations(
                Arrays.asList("databyfyvy", "datapmggqgagenvqbug", "datahcdvfoizorb", "dataoejzsaxzgkqwvdep"))
            .withFolder(new DatasetFolder().withName("aphifkfrpm"))
            .withPath("datapeygkbzb");
        model = BinaryData.fromObject(model).toObject(ODataResourceDataset.class);
        Assertions.assertEquals("asybxhqvovdpmht", model.description());
        Assertions.assertEquals("qbfkceincnrecjbi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("bybpaxhpzys").type());
        Assertions.assertEquals("aphifkfrpm", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
