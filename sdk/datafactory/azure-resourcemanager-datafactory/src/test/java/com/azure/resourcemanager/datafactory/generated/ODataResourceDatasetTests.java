// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ODataResourceDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ODataResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ODataResourceDataset model = BinaryData.fromString(
            "{\"type\":\"ODataResource\",\"typeProperties\":{\"path\":\"dataepkwzzzkueruwcj\"},\"description\":\"ipvwkauj\",\"structure\":\"dataw\",\"schema\":\"dataox\",\"linkedServiceName\":{\"referenceName\":\"bwofxxdplr\",\"parameters\":{\"lbpxrhrfjenrazwe\":\"datakvgahcbtu\"}},\"parameters\":{\"jixy\":{\"type\":\"SecureString\",\"defaultValue\":\"datahqashtos\"},\"dwjtacfvvtd\":{\"type\":\"Object\",\"defaultValue\":\"datacigz\"}},\"annotations\":[\"datapzfomcsaugbr\",\"datafiwltkfysu\",\"datate\",\"datahkl\"],\"folder\":{\"name\":\"cvasyyh\"},\"\":{\"bmsrkix\":\"datak\",\"aqsy\":\"dataxxhwrlqo\"}}")
            .toObject(ODataResourceDataset.class);
        Assertions.assertEquals("ipvwkauj", model.description());
        Assertions.assertEquals("bwofxxdplr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("jixy").type());
        Assertions.assertEquals("cvasyyh", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ODataResourceDataset model
            = new ODataResourceDataset().withDescription("ipvwkauj")
                .withStructure("dataw")
                .withSchema("dataox")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("bwofxxdplr")
                    .withParameters(mapOf("lbpxrhrfjenrazwe", "datakvgahcbtu")))
                .withParameters(
                    mapOf("jixy",
                        new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                            .withDefaultValue("datahqashtos"),
                        "dwjtacfvvtd",
                        new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datacigz")))
                .withAnnotations(Arrays.asList("datapzfomcsaugbr", "datafiwltkfysu", "datate", "datahkl"))
                .withFolder(new DatasetFolder().withName("cvasyyh"))
                .withPath("dataepkwzzzkueruwcj");
        model = BinaryData.fromObject(model).toObject(ODataResourceDataset.class);
        Assertions.assertEquals("ipvwkauj", model.description());
        Assertions.assertEquals("bwofxxdplr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("jixy").type());
        Assertions.assertEquals("cvasyyh", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
