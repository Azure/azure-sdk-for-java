// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ODataResourceDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ODataResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ODataResourceDataset model = BinaryData.fromString(
            "{\"type\":\"kkfku\",\"typeProperties\":{\"path\":\"datavqiiasbt\"},\"description\":\"kmxhhqsx\",\"structure\":\"datajkewriglbqtrefe\",\"schema\":\"dataflxcjffzwncvde\",\"linkedServiceName\":{\"referenceName\":\"xonzt\",\"parameters\":{\"pjrrhpgsjbioag\":\"dataptnntqrcjqpzjv\",\"dxdfsfvk\":\"dataviqehmdqvaol\"}},\"parameters\":{\"rkd\":{\"type\":\"Array\",\"defaultValue\":\"datarsvxphtjnhptj\"}},\"annotations\":[\"datahimmydtdtftmi\"],\"folder\":{\"name\":\"jdurgyzcslazpr\"},\"\":{\"cnqpjuytvudeylp\":\"datayimxpggktteagbg\",\"ifm\":\"dataybkisb\",\"urfshzn\":\"dataglpwdjr\",\"xdcdjmdkqt\":\"datarttuhaaa\"}}")
            .toObject(ODataResourceDataset.class);
        Assertions.assertEquals("kmxhhqsx", model.description());
        Assertions.assertEquals("xonzt", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("rkd").type());
        Assertions.assertEquals("jdurgyzcslazpr", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ODataResourceDataset model = new ODataResourceDataset().withDescription("kmxhhqsx")
            .withStructure("datajkewriglbqtrefe")
            .withSchema("dataflxcjffzwncvde")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("xonzt")
                .withParameters(mapOf("pjrrhpgsjbioag", "dataptnntqrcjqpzjv", "dxdfsfvk", "dataviqehmdqvaol")))
            .withParameters(mapOf("rkd",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datarsvxphtjnhptj")))
            .withAnnotations(Arrays.asList("datahimmydtdtftmi"))
            .withFolder(new DatasetFolder().withName("jdurgyzcslazpr"))
            .withPath("datavqiiasbt");
        model = BinaryData.fromObject(model).toObject(ODataResourceDataset.class);
        Assertions.assertEquals("kmxhhqsx", model.description());
        Assertions.assertEquals("xonzt", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("rkd").type());
        Assertions.assertEquals("jdurgyzcslazpr", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
