// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AmazonRedshiftTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AmazonRedshiftTableDatasetTests {
    @Test
    public void testDeserialize() {
        AmazonRedshiftTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"AmazonRedshiftTable\",\"typeProperties\":{},\"description\":\"sdfppyogtie\",\"linkedServiceName\":{\"referenceName\":\"tvczkcnyxr\",\"parameters\":{}},\"parameters\":{\"vg\":{\"type\":\"Array\"},\"vxlx\":{\"type\":\"SecureString\"},\"lqivbgkcv\":{\"type\":\"String\"},\"zvuqdflvon\":{\"type\":\"Int\"}},\"annotations\":[],\"folder\":{\"name\":\"ubcpzgpxti\"},\"\":{}}")
                .toObject(AmazonRedshiftTableDataset.class);
        Assertions.assertEquals("sdfppyogtie", model.description());
        Assertions.assertEquals("tvczkcnyxr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("vg").type());
        Assertions.assertEquals("ubcpzgpxti", model.folder().name());
    }

    @Test
    public void testSerialize() {
        AmazonRedshiftTableDataset model =
            new AmazonRedshiftTableDataset()
                .withDescription("sdfppyogtie")
                .withLinkedServiceName(
                    new LinkedServiceReference().withReferenceName("tvczkcnyxr").withParameters(mapOf()))
                .withParameters(
                    mapOf(
                        "vg",
                        new ParameterSpecification().withType(ParameterType.ARRAY),
                        "vxlx",
                        new ParameterSpecification().withType(ParameterType.SECURE_STRING),
                        "lqivbgkcv",
                        new ParameterSpecification().withType(ParameterType.STRING),
                        "zvuqdflvon",
                        new ParameterSpecification().withType(ParameterType.INT)))
                .withAnnotations(Arrays.asList())
                .withFolder(new DatasetFolder().withName("ubcpzgpxti"));
        model = BinaryData.fromObject(model).toObject(AmazonRedshiftTableDataset.class);
        Assertions.assertEquals("sdfppyogtie", model.description());
        Assertions.assertEquals("tvczkcnyxr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("vg").type());
        Assertions.assertEquals("ubcpzgpxti", model.folder().name());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
