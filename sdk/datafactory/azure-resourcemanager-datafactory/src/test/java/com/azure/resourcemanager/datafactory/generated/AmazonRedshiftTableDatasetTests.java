// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AmazonRedshiftTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AmazonRedshiftTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AmazonRedshiftTableDataset model = BinaryData.fromString(
            "{\"type\":\"AmazonRedshiftTable\",\"typeProperties\":{\"tableName\":\"dataonmzrjjaojpzn\",\"table\":\"datarz\",\"schema\":\"dataecwsadsqyuddkh\"},\"description\":\"dmohheuyu\",\"structure\":\"dataxmyevyigdeipnfi\",\"schema\":\"datajwlii\",\"linkedServiceName\":{\"referenceName\":\"cndjzwhajo\",\"parameters\":{\"w\":\"dataqokhdyncradxs\",\"pfapmqnmelyk\":\"datae\",\"kqvzlbbbajdexq\":\"dataygihiclmslnu\"}},\"parameters\":{\"etji\":{\"type\":\"Bool\",\"defaultValue\":\"dataizbf\"},\"v\":{\"type\":\"Array\",\"defaultValue\":\"datapnbmajvvyxt\"},\"ybfmlngfwhrmvl\":{\"type\":\"SecureString\",\"defaultValue\":\"datakzixbk\"},\"hsmfndcbsyhludzj\":{\"type\":\"Bool\",\"defaultValue\":\"dataujmwxnrzblxna\"}},\"annotations\":[\"datavohwvprjf\"],\"folder\":{\"name\":\"durmdtacn\"},\"\":{\"skkfkuyikm\":\"dataaffhvqiiasbt\",\"qtrefe\":\"datahhqsxjbjkewrigl\",\"cjffzwn\":\"datalfl\",\"onztpcjptnnt\":\"datavdef\"}}")
            .toObject(AmazonRedshiftTableDataset.class);
        Assertions.assertEquals("dmohheuyu", model.description());
        Assertions.assertEquals("cndjzwhajo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("etji").type());
        Assertions.assertEquals("durmdtacn", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AmazonRedshiftTableDataset model = new AmazonRedshiftTableDataset().withDescription("dmohheuyu")
            .withStructure("dataxmyevyigdeipnfi")
            .withSchema("datajwlii")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("cndjzwhajo")
                .withParameters(
                    mapOf("w", "dataqokhdyncradxs", "pfapmqnmelyk", "datae", "kqvzlbbbajdexq", "dataygihiclmslnu")))
            .withParameters(
                mapOf("etji", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataizbf"),
                    "v", new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datapnbmajvvyxt"),
                    "ybfmlngfwhrmvl",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datakzixbk"),
                    "hsmfndcbsyhludzj",
                    new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataujmwxnrzblxna")))
            .withAnnotations(Arrays.asList("datavohwvprjf"))
            .withFolder(new DatasetFolder().withName("durmdtacn"))
            .withTableName("dataonmzrjjaojpzn")
            .withTable("datarz")
            .withSchemaTypePropertiesSchema("dataecwsadsqyuddkh");
        model = BinaryData.fromObject(model).toObject(AmazonRedshiftTableDataset.class);
        Assertions.assertEquals("dmohheuyu", model.description());
        Assertions.assertEquals("cndjzwhajo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("etji").type());
        Assertions.assertEquals("durmdtacn", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
