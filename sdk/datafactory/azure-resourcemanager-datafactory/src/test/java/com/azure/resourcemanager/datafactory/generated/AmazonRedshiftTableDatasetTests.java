// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AmazonRedshiftTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AmazonRedshiftTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AmazonRedshiftTableDataset model = BinaryData.fromString(
            "{\"type\":\"AmazonRedshiftTable\",\"typeProperties\":{\"tableName\":\"datargyzcslazp\",\"table\":\"dataqoyimxp\",\"schema\":\"dataktteagbga\"},\"description\":\"qpjuytvude\",\"structure\":\"datapbybkisboif\",\"schema\":\"dataglpwdjr\",\"linkedServiceName\":{\"referenceName\":\"urfshzn\",\"parameters\":{\"txfrm\":\"datatuhaaaxxdcdjmdk\",\"ehxuihwes\":\"dataecxstowa\"}},\"parameters\":{\"tevspsaneyvaerp\":{\"type\":\"String\",\"defaultValue\":\"datagblkkncyp\"},\"kjwqdmraqnilp\":{\"type\":\"String\",\"defaultValue\":\"datanhrfbrj\"},\"lrfdjwlzseod\":{\"type\":\"Bool\",\"defaultValue\":\"dataaigazwf\"}},\"annotations\":[\"datadr\",\"datal\",\"dataymqxserwy\"],\"folder\":{\"name\":\"ytjwgetfigw\"},\"\":{\"ebjrahgdstubwg\":\"datajxzi\",\"mdoiiyobqzwjal\":\"dataxzsshxliqmsckwh\"}}")
            .toObject(AmazonRedshiftTableDataset.class);
        Assertions.assertEquals("qpjuytvude", model.description());
        Assertions.assertEquals("urfshzn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("tevspsaneyvaerp").type());
        Assertions.assertEquals("ytjwgetfigw", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AmazonRedshiftTableDataset model = new AmazonRedshiftTableDataset().withDescription("qpjuytvude")
            .withStructure("datapbybkisboif")
            .withSchema("dataglpwdjr")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("urfshzn")
                .withParameters(mapOf("txfrm", "datatuhaaaxxdcdjmdk", "ehxuihwes", "dataecxstowa")))
            .withParameters(mapOf("tevspsaneyvaerp",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datagblkkncyp"),
                "kjwqdmraqnilp",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datanhrfbrj"),
                "lrfdjwlzseod",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataaigazwf")))
            .withAnnotations(Arrays.asList("datadr", "datal", "dataymqxserwy"))
            .withFolder(new DatasetFolder().withName("ytjwgetfigw"))
            .withTableName("datargyzcslazp")
            .withTable("dataqoyimxp")
            .withSchemaTypePropertiesSchema("dataktteagbga");
        model = BinaryData.fromObject(model).toObject(AmazonRedshiftTableDataset.class);
        Assertions.assertEquals("qpjuytvude", model.description());
        Assertions.assertEquals("urfshzn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("tevspsaneyvaerp").type());
        Assertions.assertEquals("ytjwgetfigw", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
