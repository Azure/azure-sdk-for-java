// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DynamicsAXResourceDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DynamicsAXResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DynamicsAXResourceDataset model = BinaryData.fromString(
            "{\"type\":\"DynamicsAXResource\",\"typeProperties\":{\"path\":\"datamv\"},\"description\":\"flhdhoxu\",\"structure\":\"datacnnkvthwtam\",\"schema\":\"databgy\",\"linkedServiceName\":{\"referenceName\":\"xh\",\"parameters\":{\"beqzjdwxtutpdwne\":\"datahkezuucqicocdx\"}},\"parameters\":{\"rwvn\":{\"type\":\"Bool\",\"defaultValue\":\"datalxug\"}},\"annotations\":[\"dataofkvfruxz\",\"datafbvhgykzov\",\"datatvymdqaymqmyrn\",\"datagubqkfnoxhvoyj\"],\"folder\":{\"name\":\"krqs\"},\"\":{\"eexweju\":\"datapakxr\",\"zoytkbeadyfenro\":\"datauvnxbohpzur\",\"cbtaxdrpanhsxwhx\":\"dataoijoxcbpkiwse\"}}")
            .toObject(DynamicsAXResourceDataset.class);
        Assertions.assertEquals("flhdhoxu", model.description());
        Assertions.assertEquals("xh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("rwvn").type());
        Assertions.assertEquals("krqs", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DynamicsAXResourceDataset model = new DynamicsAXResourceDataset().withDescription("flhdhoxu")
            .withStructure("datacnnkvthwtam")
            .withSchema("databgy")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("xh")
                .withParameters(mapOf("beqzjdwxtutpdwne", "datahkezuucqicocdx")))
            .withParameters(
                mapOf("rwvn", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datalxug")))
            .withAnnotations(
                Arrays.asList("dataofkvfruxz", "datafbvhgykzov", "datatvymdqaymqmyrn", "datagubqkfnoxhvoyj"))
            .withFolder(new DatasetFolder().withName("krqs"))
            .withPath("datamv");
        model = BinaryData.fromObject(model).toObject(DynamicsAXResourceDataset.class);
        Assertions.assertEquals("flhdhoxu", model.description());
        Assertions.assertEquals("xh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("rwvn").type());
        Assertions.assertEquals("krqs", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
