// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import com.azure.resourcemanager.datafactory.models.IcebergDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IcebergDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IcebergDataset model = BinaryData.fromString(
            "{\"type\":\"Iceberg\",\"typeProperties\":{\"location\":{\"type\":\"DatasetLocation\",\"folderPath\":\"dataufpnezsjzaymld\",\"fileName\":\"datar\",\"\":{\"uwdhtq\":\"datagzmsimehtc\",\"gi\":\"datahyhnimxtns\",\"ymicjixx\":\"datanomwnwnghojovke\",\"ebdvey\":\"datasfpcrtnuguefxxij\"}}},\"description\":\"tkrhlolmc\",\"structure\":\"dataepfgsvbbvaqdl\",\"schema\":\"datapetlrn\",\"linkedServiceName\":{\"referenceName\":\"detawevxehue\",\"parameters\":{\"zvdov\":\"datal\",\"dcb\":\"datarblerlprdaqcc\",\"ykdigqzlrznda\":\"dataygdjccxwbpw\"}},\"parameters\":{\"tgkiqlarh\":{\"type\":\"Int\",\"defaultValue\":\"datamjqmv\"},\"azekdzdzffzjwzts\":{\"type\":\"Int\",\"defaultValue\":\"datav\"},\"atig\":{\"type\":\"String\",\"defaultValue\":\"datahggryelgf\"}},\"annotations\":[\"datarrkdknczgor\",\"datawnvojtvmdev\",\"datalhqvbk\",\"datarbpyhssrl\"],\"folder\":{\"name\":\"kpkocm\"},\"\":{\"vspeslhwyykgvr\":\"dataebxxopyic\",\"gajkrdyddtpfcud\":\"datacpumdd\"}}")
            .toObject(IcebergDataset.class);
        Assertions.assertEquals("tkrhlolmc", model.description());
        Assertions.assertEquals("detawevxehue", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("tgkiqlarh").type());
        Assertions.assertEquals("kpkocm", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IcebergDataset model = new IcebergDataset().withDescription("tkrhlolmc")
            .withStructure("dataepfgsvbbvaqdl")
            .withSchema("datapetlrn")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("detawevxehue")
                .withParameters(
                    mapOf("zvdov", "datal", "dcb", "datarblerlprdaqcc", "ykdigqzlrznda", "dataygdjccxwbpw")))
            .withParameters(mapOf("tgkiqlarh",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datamjqmv"),
                "azekdzdzffzjwzts", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datav"),
                "atig", new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datahggryelgf")))
            .withAnnotations(Arrays.asList("datarrkdknczgor", "datawnvojtvmdev", "datalhqvbk", "datarbpyhssrl"))
            .withFolder(new DatasetFolder().withName("kpkocm"))
            .withLocation(new DatasetLocation().withFolderPath("dataufpnezsjzaymld")
                .withFileName("datar")
                .withAdditionalProperties(mapOf("type", "DatasetLocation")));
        model = BinaryData.fromObject(model).toObject(IcebergDataset.class);
        Assertions.assertEquals("tkrhlolmc", model.description());
        Assertions.assertEquals("detawevxehue", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("tgkiqlarh").type());
        Assertions.assertEquals("kpkocm", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
