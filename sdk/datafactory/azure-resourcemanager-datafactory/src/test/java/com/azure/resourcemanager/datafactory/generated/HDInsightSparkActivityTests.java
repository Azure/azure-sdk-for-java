// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightSparkActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightSparkActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightSparkActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightSpark\",\"typeProperties\":{\"rootPath\":\"datav\",\"entryFilePath\":\"dataz\",\"arguments\":[\"datanfyubctwnfnqqnum\",\"datanavfpkleie\"],\"getDebugInfo\":\"Failure\",\"sparkJobLinkedService\":{\"referenceName\":\"b\",\"parameters\":{\"hnbofe\":\"datayoria\",\"kbvvw\":\"datacctppbgzfmuyl\"}},\"className\":\"trqsobusurxv\",\"proxyUser\":\"dataxlbsnskcksfxt\",\"sparkConfig\":{\"f\":\"datawxpm\",\"ugbi\":\"datanccbvchozkmifyxd\"}},\"linkedServiceName\":{\"referenceName\":\"nbtqdrkwr\",\"parameters\":{\"fqne\":\"dataoidhbulvkisyh\",\"dddeahfgdjahnsm\":\"datap\",\"qdxjdolobt\":\"datatkh\"}},\"policy\":{\"timeout\":\"dataxnlaurviyntc\",\"retry\":\"datapbzoqtf\",\"retryIntervalInSeconds\":2054907575,\"secureInput\":false,\"secureOutput\":true,\"\":{\"ngrkjbdaxttoe\":\"datablb\",\"znrjws\":\"datafohipijfywmmqz\"}},\"name\":\"cktcwgnkxjd\",\"description\":\"diundzawotpiakle\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"ntr\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Completed\"],\"\":{\"wd\":\"dataeudcgdljbn\",\"giuzbpgskgpws\":\"datafn\"}}],\"userProperties\":[{\"name\":\"hn\",\"value\":\"dataxpzjtiktg\"}],\"\":{\"akgzcmbgw\":\"datawefstize\",\"jpxpwxabvxwoa\":\"datalnmddflckum\",\"ozkm\":\"dataoeillszdgy\",\"yrwdmgrfhvew\":\"databzuilynbdvbuxlji\"}}")
            .toObject(HDInsightSparkActivity.class);
        Assertions.assertEquals("cktcwgnkxjd", model.name());
        Assertions.assertEquals("diundzawotpiakle", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("ntr", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hn", model.userProperties().get(0).name());
        Assertions.assertEquals("nbtqdrkwr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(2054907575, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("b", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("trqsobusurxv", model.className());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightSparkActivity model = new HDInsightSparkActivity().withName("cktcwgnkxjd")
            .withDescription("diundzawotpiakle")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("ntr")
                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED,
                    DependencyCondition.COMPLETED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("hn").withValue("dataxpzjtiktg")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("nbtqdrkwr")
                .withParameters(
                    mapOf("fqne", "dataoidhbulvkisyh", "dddeahfgdjahnsm", "datap", "qdxjdolobt", "datatkh")))
            .withPolicy(new ActivityPolicy().withTimeout("dataxnlaurviyntc")
                .withRetry("datapbzoqtf")
                .withRetryIntervalInSeconds(2054907575)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withRootPath("datav")
            .withEntryFilePath("dataz")
            .withArguments(Arrays.asList("datanfyubctwnfnqqnum", "datanavfpkleie"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE)
            .withSparkJobLinkedService(new LinkedServiceReference().withReferenceName("b")
                .withParameters(mapOf("hnbofe", "datayoria", "kbvvw", "datacctppbgzfmuyl")))
            .withClassName("trqsobusurxv")
            .withProxyUser("dataxlbsnskcksfxt")
            .withSparkConfig(mapOf("f", "datawxpm", "ugbi", "datanccbvchozkmifyxd"));
        model = BinaryData.fromObject(model).toObject(HDInsightSparkActivity.class);
        Assertions.assertEquals("cktcwgnkxjd", model.name());
        Assertions.assertEquals("diundzawotpiakle", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("ntr", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hn", model.userProperties().get(0).name());
        Assertions.assertEquals("nbtqdrkwr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(2054907575, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("b", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("trqsobusurxv", model.className());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
