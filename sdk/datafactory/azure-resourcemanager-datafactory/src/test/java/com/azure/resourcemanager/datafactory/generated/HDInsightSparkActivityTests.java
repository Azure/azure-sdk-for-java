// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightSparkActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightSparkActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightSparkActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"HDInsightSpark\",\"typeProperties\":{\"rootPath\":\"dataebw\",\"entryFilePath\":\"dataqnluszilkrcpxl\",\"arguments\":[\"datafxtbvhmsvcmce\",\"datatrhwriihwxchy\"],\"getDebugInfo\":\"Failure\",\"sparkJobLinkedService\":{\"referenceName\":\"rpjonmins\",\"parameters\":{\"igfdpp\":\"datauiiytyarpe\",\"bgrtse\":\"datakkgdygjldljgd\",\"kofmtfwculsbnapz\":\"datanowzf\"}},\"className\":\"zmrlprbclj\",\"proxyUser\":\"datajaawnzzlfvefs\",\"sparkConfig\":{\"dpbmoq\":\"dataasm\"}},\"linkedServiceName\":{\"referenceName\":\"vukgfzbykapmeo\",\"parameters\":{\"ew\":\"datavmakdtgpnyubnwym\"}},\"policy\":{\"timeout\":\"dataxwv\",\"retry\":\"datatjsnjbahxyfd\",\"retryIntervalInSeconds\":1674480815,\"secureInput\":false,\"secureOutput\":false,\"\":{\"rmptj\":\"datahq\"}},\"name\":\"ixawipjracyx\",\"description\":\"adflvbkhgdz\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"oheminer\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Completed\",\"Failed\"],\"\":{\"qgqmitrp\":\"datavmxhztdcadbm\"}},{\"activity\":\"gmhh\",\"dependencyConditions\":[\"Skipped\",\"Completed\"],\"\":{\"ni\":\"dataiuhmtcihupoelj\",\"awbsdeqqbdcbnrg\":\"datayoxajit\",\"mtgtnb\":\"datapnor\"}},{\"activity\":\"sopuwesmxodyto\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Skipped\"],\"\":{\"nsdgmuaqtqn\":\"datan\"}}],\"userProperties\":[{\"name\":\"iptzg\",\"value\":\"datamujukenkuyom\"},{\"name\":\"kgkyobuihprvo\",\"value\":\"dataodrpyxkzxrmmo\"},{\"name\":\"cufkxygxoubekafd\",\"value\":\"datagtgcfkeae\"},{\"name\":\"pmhtlkjfp\",\"value\":\"dataeb\"}],\"\":{\"lwysrswzhciaz\":\"datatxsuxvjj\",\"zodnxlcdgkc\":\"dataebtskmqkanuxjudy\",\"rskzwuubaf\":\"datafancjl\"}}")
                .toObject(HDInsightSparkActivity.class);
        Assertions.assertEquals("ixawipjracyx", model.name());
        Assertions.assertEquals("adflvbkhgdz", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("oheminer", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("iptzg", model.userProperties().get(0).name());
        Assertions.assertEquals("vukgfzbykapmeo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1674480815, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("rpjonmins", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("zmrlprbclj", model.className());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightSparkActivity model =
            new HDInsightSparkActivity()
                .withName("ixawipjracyx")
                .withDescription("adflvbkhgdz")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("oheminer")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.FAILED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("gmhh")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("sopuwesmxodyto")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("iptzg").withValue("datamujukenkuyom"),
                            new UserProperty().withName("kgkyobuihprvo").withValue("dataodrpyxkzxrmmo"),
                            new UserProperty().withName("cufkxygxoubekafd").withValue("datagtgcfkeae"),
                            new UserProperty().withName("pmhtlkjfp").withValue("dataeb")))
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("vukgfzbykapmeo")
                        .withParameters(mapOf("ew", "datavmakdtgpnyubnwym")))
                .withPolicy(
                    new ActivityPolicy()
                        .withTimeout("dataxwv")
                        .withRetry("datatjsnjbahxyfd")
                        .withRetryIntervalInSeconds(1674480815)
                        .withSecureInput(false)
                        .withSecureOutput(false)
                        .withAdditionalProperties(mapOf()))
                .withRootPath("dataebw")
                .withEntryFilePath("dataqnluszilkrcpxl")
                .withArguments(Arrays.asList("datafxtbvhmsvcmce", "datatrhwriihwxchy"))
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE)
                .withSparkJobLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("rpjonmins")
                        .withParameters(
                            mapOf(
                                "igfdpp",
                                "datauiiytyarpe",
                                "bgrtse",
                                "datakkgdygjldljgd",
                                "kofmtfwculsbnapz",
                                "datanowzf")))
                .withClassName("zmrlprbclj")
                .withProxyUser("datajaawnzzlfvefs")
                .withSparkConfig(mapOf("dpbmoq", "dataasm"));
        model = BinaryData.fromObject(model).toObject(HDInsightSparkActivity.class);
        Assertions.assertEquals("ixawipjracyx", model.name());
        Assertions.assertEquals("adflvbkhgdz", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("oheminer", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("iptzg", model.userProperties().get(0).name());
        Assertions.assertEquals("vukgfzbykapmeo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1674480815, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("rpjonmins", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("zmrlprbclj", model.className());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
