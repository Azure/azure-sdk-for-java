// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightSparkActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightSparkActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightSparkActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightSpark\",\"typeProperties\":{\"rootPath\":\"datascnnyg\",\"entryFilePath\":\"datajqmpfrgo\",\"arguments\":[\"datafzdny\",\"dataathvl\"],\"getDebugInfo\":\"Always\",\"sparkJobLinkedService\":{\"referenceName\":\"akdyqxjpzykkw\",\"parameters\":{\"hqwilbsdgahehkir\":\"datakpby\",\"rth\":\"dataojzfsznephbc\",\"ijayvuymib\":\"databgavwbqjeto\"}},\"className\":\"qjcxp\",\"proxyUser\":\"dataeqwxivjhmld\",\"sparkConfig\":{\"qinkktayafgbc\":\"dataxjbhltxtpg\",\"xgsqhczokunc\":\"dataawblkkccixsgk\"}},\"linkedServiceName\":{\"referenceName\":\"hbj\",\"parameters\":{\"ejnwwqyyfctfs\":\"dataeznlukeqzcbqv\",\"tnuzorx\":\"datahmrughmrybbh\",\"zjqpdfs\":\"datat\",\"emcghorrjaw\":\"datautvitislcfxsgjdi\"}},\"policy\":{\"timeout\":\"databbvrmvhtmzwgi\",\"retry\":\"datafnzpybr\",\"retryIntervalInSeconds\":1094059615,\"secureInput\":true,\"secureOutput\":true,\"\":{\"p\":\"datapmmmh\",\"iiiwu\":\"dataxthpsugebgboqn\"}},\"name\":\"fofgfq\",\"description\":\"fxypxmkexjonas\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"dsogljihwduwnc\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"tpmfachkzznnkmms\":\"datagqwd\"}},{\"activity\":\"nigjoxhzcmgmcsj\",\"dependencyConditions\":[\"Succeeded\",\"Failed\",\"Succeeded\"],\"\":{\"jloehhhkxlquupb\":\"dataotojfvbayqwj\",\"eptejryvvuktc\":\"datahuinjymnq\"}}],\"userProperties\":[{\"name\":\"p\",\"value\":\"datamwjbmrkcqp\"}],\"\":{\"ycknq\":\"datajutvovhuifblyv\"}}")
            .toObject(HDInsightSparkActivity.class);
        Assertions.assertEquals("fofgfq", model.name());
        Assertions.assertEquals("fxypxmkexjonas", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("dsogljihwduwnc", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("p", model.userProperties().get(0).name());
        Assertions.assertEquals("hbj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1094059615, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("akdyqxjpzykkw", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("qjcxp", model.className());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightSparkActivity model
            = new HDInsightSparkActivity().withName("fofgfq")
                .withDescription("fxypxmkexjonas")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("dsogljihwduwnc")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("nigjoxhzcmgmcsj")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                            DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("p").withValue("datamwjbmrkcqp")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("hbj")
                    .withParameters(mapOf("ejnwwqyyfctfs", "dataeznlukeqzcbqv", "tnuzorx", "datahmrughmrybbh",
                        "zjqpdfs", "datat", "emcghorrjaw", "datautvitislcfxsgjdi")))
                .withPolicy(new ActivityPolicy().withTimeout("databbvrmvhtmzwgi")
                    .withRetry("datafnzpybr")
                    .withRetryIntervalInSeconds(1094059615)
                    .withSecureInput(true)
                    .withSecureOutput(true)
                    .withAdditionalProperties(mapOf()))
                .withRootPath("datascnnyg")
                .withEntryFilePath("datajqmpfrgo")
                .withArguments(Arrays.asList("datafzdny", "dataathvl"))
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
                .withSparkJobLinkedService(new LinkedServiceReference().withReferenceName("akdyqxjpzykkw")
                    .withParameters(mapOf("hqwilbsdgahehkir", "datakpby", "rth", "dataojzfsznephbc", "ijayvuymib",
                        "databgavwbqjeto")))
                .withClassName("qjcxp")
                .withProxyUser("dataeqwxivjhmld")
                .withSparkConfig(mapOf("qinkktayafgbc", "dataxjbhltxtpg", "xgsqhczokunc", "dataawblkkccixsgk"));
        model = BinaryData.fromObject(model).toObject(HDInsightSparkActivity.class);
        Assertions.assertEquals("fofgfq", model.name());
        Assertions.assertEquals("fxypxmkexjonas", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("dsogljihwduwnc", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("p", model.userProperties().get(0).name());
        Assertions.assertEquals("hbj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1094059615, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("akdyqxjpzykkw", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("qjcxp", model.className());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
