// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightSparkActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightSparkActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightSparkActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightSpark\",\"typeProperties\":{\"rootPath\":\"datafgk\",\"entryFilePath\":\"datapjonminsqjnuiiyt\",\"arguments\":[\"datapeyigfdppgkk\",\"datadygjldljgdy\",\"datagrtse\",\"datanowzf\"],\"getDebugInfo\":\"Always\",\"sparkJobLinkedService\":{\"referenceName\":\"mtfwculsb\",\"parameters\":{\"l\":\"dataawnz\",\"rj\":\"datarbclj\"}},\"className\":\"e\",\"proxyUser\":\"datakjbasmrdpbmo\",\"sparkConfig\":{\"cpv\":\"datavukgfzbykapmeo\",\"wymyewb\":\"dataakdtgpnyub\",\"fddpbtksrd\":\"dataoxwvxetjsnjbahx\"}},\"linkedServiceName\":{\"referenceName\":\"qcr\",\"parameters\":{\"jracyxnzadflvbkh\":\"datajsixawi\",\"cqdvapohemine\":\"datadz\"}},\"policy\":{\"timeout\":\"datardxhlovmxhztdca\",\"retry\":\"datamvqgqmi\",\"retryIntervalInSeconds\":287048303,\"secureInput\":false,\"secureOutput\":false,\"\":{\"uhmtc\":\"datacyasz\"}},\"name\":\"hupoeljf\",\"description\":\"wyoxaj\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"deqqbdcbnr\",\"dependencyConditions\":[\"Succeeded\",\"Failed\",\"Skipped\",\"Failed\"],\"\":{\"msopuwesmx\":\"datatgtn\",\"einhnsdg\":\"datadytotrwl\"}}],\"userProperties\":[{\"name\":\"qtqnqmsiptzgomuj\",\"value\":\"datakenkuyom\"},{\"name\":\"kgkyobuihprvo\",\"value\":\"dataodrpyxkzxrmmo\"},{\"name\":\"cufkxygxoubekafd\",\"value\":\"datagtgcfkeae\"},{\"name\":\"pmhtlkjfp\",\"value\":\"dataeb\"}],\"\":{\"lwysrswzhciaz\":\"datatxsuxvjj\",\"zodnxlcdgkc\":\"dataebtskmqkanuxjudy\",\"rskzwuubaf\":\"datafancjl\"}}")
            .toObject(HDInsightSparkActivity.class);
        Assertions.assertEquals("hupoeljf", model.name());
        Assertions.assertEquals("wyoxaj", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("deqqbdcbnr", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qtqnqmsiptzgomuj", model.userProperties().get(0).name());
        Assertions.assertEquals("qcr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(287048303, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("mtfwculsb", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("e", model.className());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightSparkActivity model = new HDInsightSparkActivity().withName("hupoeljf").withDescription("wyoxaj")
            .withState(ActivityState.INACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("deqqbdcbnr")
                .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED,
                    DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("qtqnqmsiptzgomuj").withValue("datakenkuyom"),
                new UserProperty().withName("kgkyobuihprvo").withValue("dataodrpyxkzxrmmo"),
                new UserProperty().withName("cufkxygxoubekafd").withValue("datagtgcfkeae"),
                new UserProperty().withName("pmhtlkjfp").withValue("dataeb")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("qcr")
                .withParameters(mapOf("jracyxnzadflvbkh", "datajsixawi", "cqdvapohemine", "datadz")))
            .withPolicy(new ActivityPolicy().withTimeout("datardxhlovmxhztdca").withRetry("datamvqgqmi")
                .withRetryIntervalInSeconds(287048303).withSecureInput(false).withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withRootPath("datafgk").withEntryFilePath("datapjonminsqjnuiiyt")
            .withArguments(Arrays.asList("datapeyigfdppgkk", "datadygjldljgdy", "datagrtse", "datanowzf"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
            .withSparkJobLinkedService(new LinkedServiceReference().withReferenceName("mtfwculsb")
                .withParameters(mapOf("l", "dataawnz", "rj", "datarbclj")))
            .withClassName("e").withProxyUser("datakjbasmrdpbmo").withSparkConfig(
                mapOf("cpv", "datavukgfzbykapmeo", "wymyewb", "dataakdtgpnyub", "fddpbtksrd", "dataoxwvxetjsnjbahx"));
        model = BinaryData.fromObject(model).toObject(HDInsightSparkActivity.class);
        Assertions.assertEquals("hupoeljf", model.name());
        Assertions.assertEquals("wyoxaj", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("deqqbdcbnr", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qtqnqmsiptzgomuj", model.userProperties().get(0).name());
        Assertions.assertEquals("qcr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(287048303, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("mtfwculsb", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("e", model.className());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
