// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AmazonMwsObjectDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AmazonMwsObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AmazonMwsObjectDataset model = BinaryData.fromString(
            "{\"type\":\"dfclmowurofofkbc\",\"typeProperties\":{\"tableName\":\"datatytvnpbgces\"},\"description\":\"zwweobl\",\"structure\":\"datadq\",\"schema\":\"dataixccnkfsog\",\"linkedServiceName\":{\"referenceName\":\"yoxmyqzyqepg\",\"parameters\":{\"dpwmgwxwukfjvqg\":\"datadsluokcevoxd\"}},\"parameters\":{\"kpalecztl\":{\"type\":\"Float\",\"defaultValue\":\"dataisvvvgyphheove\"},\"fssrgrq\":{\"type\":\"Array\",\"defaultValue\":\"datatzpu\"},\"louurmuzembqq\":{\"type\":\"Int\",\"defaultValue\":\"dataquo\"},\"gslqcxuthv\":{\"type\":\"Bool\",\"defaultValue\":\"datadhjofywwnaxoxlor\"}},\"annotations\":[\"datalyyhrgmabspmlu\",\"datayju\",\"datakedputocrb\",\"datagqicmdrgcuzjmvkr\"],\"folder\":{\"name\":\"cqhgcmljzksqimy\"},\"\":{\"qpvhszopeukufds\":\"datavfiomhc\",\"fsjbpwjwz\":\"databsskgqjemosq\"}}")
            .toObject(AmazonMwsObjectDataset.class);
        Assertions.assertEquals("zwweobl", model.description());
        Assertions.assertEquals("yoxmyqzyqepg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("kpalecztl").type());
        Assertions.assertEquals("cqhgcmljzksqimy", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AmazonMwsObjectDataset model = new AmazonMwsObjectDataset().withDescription("zwweobl")
            .withStructure("datadq")
            .withSchema("dataixccnkfsog")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("yoxmyqzyqepg")
                .withParameters(mapOf("dpwmgwxwukfjvqg", "datadsluokcevoxd")))
            .withParameters(mapOf("kpalecztl",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataisvvvgyphheove"),
                "fssrgrq", new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datatzpu"),
                "louurmuzembqq", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataquo"),
                "gslqcxuthv",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datadhjofywwnaxoxlor")))
            .withAnnotations(Arrays.asList("datalyyhrgmabspmlu", "datayju", "datakedputocrb", "datagqicmdrgcuzjmvkr"))
            .withFolder(new DatasetFolder().withName("cqhgcmljzksqimy"))
            .withTableName("datatytvnpbgces");
        model = BinaryData.fromObject(model).toObject(AmazonMwsObjectDataset.class);
        Assertions.assertEquals("zwweobl", model.description());
        Assertions.assertEquals("yoxmyqzyqepg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("kpalecztl").type());
        Assertions.assertEquals("cqhgcmljzksqimy", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
