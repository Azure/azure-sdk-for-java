// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PostgreSqlV2TableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PostgreSqlV2TableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PostgreSqlV2TableDataset model = BinaryData.fromString(
            "{\"type\":\"PostgreSqlV2Table\",\"typeProperties\":{\"table\":\"dataxamqecjrzvlcivqx\",\"schema\":\"datamklphxwww\"},\"description\":\"jkbgnfbr\",\"structure\":\"datavfsunhaevla\",\"schema\":\"dataczywywuahwc\",\"linkedServiceName\":{\"referenceName\":\"rewcnnaaxqjfda\",\"parameters\":{\"mggewdqbxexfy\":\"datagim\"}},\"parameters\":{\"yzqbye\":{\"type\":\"Bool\",\"defaultValue\":\"datasuqkslwsfx\"},\"kffydztkqrfbgy\":{\"type\":\"Object\",\"defaultValue\":\"datamohnrtl\"}},\"annotations\":[\"datawvzdte\",\"datajmyqxuhgka\",\"datanyprijyoxxjxbs\"],\"folder\":{\"name\":\"rlcck\"},\"\":{\"mqomxoalknuy\":\"datapjmspau\",\"zi\":\"datapvi\"}}")
            .toObject(PostgreSqlV2TableDataset.class);
        Assertions.assertEquals("jkbgnfbr", model.description());
        Assertions.assertEquals("rewcnnaaxqjfda", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("yzqbye").type());
        Assertions.assertEquals("rlcck", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PostgreSqlV2TableDataset model = new PostgreSqlV2TableDataset().withDescription("jkbgnfbr")
            .withStructure("datavfsunhaevla")
            .withSchema("dataczywywuahwc")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("rewcnnaaxqjfda")
                .withParameters(mapOf("mggewdqbxexfy", "datagim")))
            .withParameters(mapOf("yzqbye",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datasuqkslwsfx"),
                "kffydztkqrfbgy",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datamohnrtl")))
            .withAnnotations(Arrays.asList("datawvzdte", "datajmyqxuhgka", "datanyprijyoxxjxbs"))
            .withFolder(new DatasetFolder().withName("rlcck"))
            .withTable("dataxamqecjrzvlcivqx")
            .withSchemaTypePropertiesSchema("datamklphxwww");
        model = BinaryData.fromObject(model).toObject(PostgreSqlV2TableDataset.class);
        Assertions.assertEquals("jkbgnfbr", model.description());
        Assertions.assertEquals("rewcnnaaxqjfda", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("yzqbye").type());
        Assertions.assertEquals("rlcck", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
