// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.Office365Dataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class Office365DatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Office365Dataset model = BinaryData.fromString(
            "{\"type\":\"Office365Table\",\"typeProperties\":{\"tableName\":\"dataefvulblmr\",\"predicate\":\"dataxyprhfcaeooifqdy\"},\"description\":\"flobhahq\",\"structure\":\"datamfecorkfrocgbmxl\",\"schema\":\"datamzezbjesylslu\",\"linkedServiceName\":{\"referenceName\":\"bqfy\",\"parameters\":{\"gdz\":\"datay\"}},\"parameters\":{\"hmgw\":{\"type\":\"Int\",\"defaultValue\":\"datagqyvouprsytqzss\"}},\"annotations\":[\"datavrxpfdu\",\"dataolhg\",\"dataqvpbfjpoqzucfzl\"],\"folder\":{\"name\":\"dquur\"},\"\":{\"elbprn\":\"datamvhvz\",\"svhbngqiwyejto\":\"dataujywzcqyggmn\"}}")
            .toObject(Office365Dataset.class);
        Assertions.assertEquals("flobhahq", model.description());
        Assertions.assertEquals("bqfy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("hmgw").type());
        Assertions.assertEquals("dquur", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Office365Dataset model = new Office365Dataset().withDescription("flobhahq")
            .withStructure("datamfecorkfrocgbmxl")
            .withSchema("datamzezbjesylslu")
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("bqfy").withParameters(mapOf("gdz", "datay")))
            .withParameters(mapOf("hmgw",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datagqyvouprsytqzss")))
            .withAnnotations(Arrays.asList("datavrxpfdu", "dataolhg", "dataqvpbfjpoqzucfzl"))
            .withFolder(new DatasetFolder().withName("dquur"))
            .withTableName("dataefvulblmr")
            .withPredicate("dataxyprhfcaeooifqdy");
        model = BinaryData.fromObject(model).toObject(Office365Dataset.class);
        Assertions.assertEquals("flobhahq", model.description());
        Assertions.assertEquals("bqfy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("hmgw").type());
        Assertions.assertEquals("dquur", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
