// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.Office365Dataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class Office365DatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Office365Dataset model = BinaryData.fromString(
            "{\"type\":\"Office365Table\",\"typeProperties\":{\"tableName\":\"datactsmwpgweoqhbjq\",\"predicate\":\"datafblerufol\"},\"description\":\"shjucihbymjjvt\",\"structure\":\"dataerx\",\"schema\":\"dataeazr\",\"linkedServiceName\":{\"referenceName\":\"helhbimyi\",\"parameters\":{\"cthtpq\":\"dataa\",\"zkdiuvflgzhcw\":\"datafzdos\",\"g\":\"datagwahcrxo\"}},\"parameters\":{\"pmhz\":{\"type\":\"Float\",\"defaultValue\":\"datapccxziv\"},\"tujqzvhnjvpmxnh\":{\"type\":\"Float\",\"defaultValue\":\"datahkvnnj\"},\"lgxyf\":{\"type\":\"Array\",\"defaultValue\":\"datastqlfxolrwv\"},\"lzyyopoaytw\":{\"type\":\"SecureString\",\"defaultValue\":\"dataequ\"}},\"annotations\":[\"dataqubotbvuf\",\"datakwjiemimdtnpowe\"],\"folder\":{\"name\":\"kreeeddd\"},\"\":{\"igeeuwbr\":\"datafquulpclhs\",\"netdqw\":\"dataqyxfed\"}}")
            .toObject(Office365Dataset.class);
        Assertions.assertEquals("shjucihbymjjvt", model.description());
        Assertions.assertEquals("helhbimyi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("pmhz").type());
        Assertions.assertEquals("kreeeddd", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Office365Dataset model = new Office365Dataset().withDescription("shjucihbymjjvt")
            .withStructure("dataerx")
            .withSchema("dataeazr")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("helhbimyi")
                .withParameters(mapOf("cthtpq", "dataa", "zkdiuvflgzhcw", "datafzdos", "g", "datagwahcrxo")))
            .withParameters(mapOf("pmhz",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datapccxziv"),
                "tujqzvhnjvpmxnh",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datahkvnnj"), "lgxyf",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datastqlfxolrwv"),
                "lzyyopoaytw",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("dataequ")))
            .withAnnotations(Arrays.asList("dataqubotbvuf", "datakwjiemimdtnpowe"))
            .withFolder(new DatasetFolder().withName("kreeeddd"))
            .withTableName("datactsmwpgweoqhbjq")
            .withPredicate("datafblerufol");
        model = BinaryData.fromObject(model).toObject(Office365Dataset.class);
        Assertions.assertEquals("shjucihbymjjvt", model.description());
        Assertions.assertEquals("helhbimyi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("pmhz").type());
        Assertions.assertEquals("kreeeddd", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
