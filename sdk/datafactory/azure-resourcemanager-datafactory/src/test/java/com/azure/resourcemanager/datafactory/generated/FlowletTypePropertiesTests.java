// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.FlowletTypeProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSink;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.Transformation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FlowletTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FlowletTypeProperties model =
            BinaryData
                .fromString(
                    "{\"sources\":[{\"schemaLinkedService\":{\"referenceName\":\"sd\",\"parameters\":{\"surejqrshzzbgu\":\"datayoqxdedecfiwhag\"}},\"name\":\"lcxiqqzjko\",\"description\":\"upnamglroui\",\"dataset\":{\"referenceName\":\"mfivjqterd\",\"parameters\":{\"d\":\"datagd\",\"tyhhmvfxlapja\":\"dataghpcvrwqirvt\"}},\"linkedService\":{\"referenceName\":\"dmkr\",\"parameters\":{\"qlujqgi\":\"datapgqvqo\",\"hpqvcts\":\"dataabwlyvx\",\"zhasupmlppdpgzvz\":\"dataaeuhwwsknstvz\",\"ptgongruat\":\"dataazvbkar\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"y\",\"datasetParameters\":\"dataqheni\",\"parameters\":{\"yjdeayscseyd\":\"dataqnguba\"},\"\":{\"muwrx\":\"datamexmnvk\",\"wmcpmrrdlhvdvm\":\"datan\",\"hkdcl\":\"dataphbeaeqjz\",\"unerke\":\"datacroczf\"}}},{\"schemaLinkedService\":{\"referenceName\":\"xzs\",\"parameters\":{\"udl\":\"dataezbzu\",\"cgwfsgqkstyecu\":\"datavzske\"}},\"name\":\"yu\",\"description\":\"p\",\"dataset\":{\"referenceName\":\"davsjcfmazpz\",\"parameters\":{\"izekuvfrj\":\"datauzvcmcok\",\"ajbvbn\":\"dataucaonz\",\"idgzwdydamis\":\"datardemdidack\",\"xkqejtpjfojiunr\":\"datapztdivyk\"}},\"linkedService\":{\"referenceName\":\"hxuk\",\"parameters\":{\"o\":\"datakdtoiboancdr\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"xu\",\"datasetParameters\":\"dataxonckbnlblfxlup\",\"parameters\":{\"izxzpzweghl\":\"dataq\",\"dve\":\"datawbogvgfklqiy\"},\"\":{\"vlrdsmovpi\":\"datasbfvdstrkzxsgtzn\"}}},{\"schemaLinkedService\":{\"referenceName\":\"ndnoxaxnrqaq\",\"parameters\":{\"usdvrgp\":\"datandxol\"}},\"name\":\"qmawzjdrpizfu\",\"description\":\"yctsdbtqgkuj\",\"dataset\":{\"referenceName\":\"ooxrqwoeurb\",\"parameters\":{\"wmmkfq\":\"dataapdyarikeejdpdfh\",\"qulw\":\"datar\",\"eqkvyhzokpoyu\":\"datatrj\"}},\"linkedService\":{\"referenceName\":\"uensn\",\"parameters\":{\"jsumxpezcoio\":\"dataphmpoejnglpwsada\",\"xkeedcnwmy\":\"datajrmfqzwqd\",\"czaqpqifdbmpt\":\"dataxfqzkvemyzd\",\"natnizexroqsqjg\":\"datawtxzuisam\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"thsplwsttxsr\",\"datasetParameters\":\"datafq\",\"parameters\":{\"sxyr\":\"dataiceovxgzw\",\"ik\":\"datajmtikes\",\"dseipnquwzxhrp\":\"dataohzixyqhfnkvycqq\"},\"\":{\"kfktltdds\":\"datadl\",\"ouhbq\":\"databjop\",\"yigfcvcew\":\"datazkqxsalu\"}}}],\"sinks\":[{\"schemaLinkedService\":{\"referenceName\":\"dgsjsat\",\"parameters\":{\"azdfsqxhyqmrej\":\"datac\",\"bwtdr\":\"dataarnpvgrsz\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"gz\",\"parameters\":{\"fi\":\"dataxzlh\"}},\"name\":\"acfculzjrmhpf\",\"description\":\"vyldqpzfzxsoxin\",\"dataset\":{\"referenceName\":\"jlzkdrocqsxy\",\"parameters\":{\"is\":\"datatcmiwd\",\"p\":\"datanmeylajamcajyhf\",\"ryklleynqa\":\"datac\"}},\"linkedService\":{\"referenceName\":\"kig\",\"parameters\":{\"hg\":\"datalwalhvu\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"etxdqcmyctajqzj\",\"datasetParameters\":\"datalecxbibiwks\",\"parameters\":{\"oikvntwcz\":\"datayxsbfpz\"},\"\":{\"ezpfki\":\"dataushlcxpblalh\",\"zsaaoqdsgptotxjq\":\"datasaid\",\"cnlrt\":\"dataia\"}}},{\"schemaLinkedService\":{\"referenceName\":\"ijzzcaoijolbuauk\",\"parameters\":{\"lxqdwr\":\"dataeopex\",\"pibkgxyxyaux\":\"datawyil\",\"ytkujsq\":\"dataeddobmcnltm\",\"oxfab\":\"datacm\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"gpwb\",\"parameters\":{\"li\":\"datari\"}},\"name\":\"rycgnwplrrbph\",\"description\":\"sbbi\",\"dataset\":{\"referenceName\":\"icuhqvumspb\",\"parameters\":{\"xmzrmtmvwitu\":\"dataeqbbewfcuqfpy\"}},\"linkedService\":{\"referenceName\":\"yyjshcybwfuppo\",\"parameters\":{\"zsvavlr\":\"datacmvouujxdiikmoxr\",\"oywlunpipcwyb\":\"dataikj\",\"npatpftsae\":\"datazfn\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"whxorpwaltz\",\"datasetParameters\":\"datagexojfccylhtrht\",\"parameters\":{\"zxezmnr\":\"datazjpwexcdrzprob\",\"hlokfpmijpdvzv\":\"datajgpjeuxs\",\"rwyambhbafebzxfk\":\"databhwbdqufvcgnrgla\",\"nntrvrkps\":\"dataqutibhl\"},\"\":{\"vzm\":\"datau\"}}},{\"schemaLinkedService\":{\"referenceName\":\"hnysvlpyeu\",\"parameters\":{\"hyqqegatxgr\":\"datapdixqbolxv\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"mg\",\"parameters\":{\"ibmg\":\"datatsdixchw\",\"gair\":\"dataymncjc\",\"fbhtleberp\":\"datacqzoofjnqjsve\"}},\"name\":\"ljekn\",\"description\":\"n\",\"dataset\":{\"referenceName\":\"j\",\"parameters\":{\"pnowawonoehrguql\":\"datawkdnjrxgkrhwiehy\",\"pyrgu\":\"datafwafbjz\"}},\"linkedService\":{\"referenceName\":\"azbkocbygvthrmxk\",\"parameters\":{\"keboo\":\"datawwdxomrawp\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"yacagae\",\"datasetParameters\":\"dataoiqclmgdtwgab\",\"parameters\":{\"wjecooyvhtuqbpe\":\"datakuz\"},\"\":{\"hftzbpyfao\":\"dataibncgagdvcd\",\"htncwmhjobzrfp\":\"datadf\",\"cqhyftcvbz\":\"dataiz\",\"orssatfyb\":\"datagwhgkgsoau\"}}}],\"transformations\":[{\"name\":\"fdmxuqb\",\"description\":\"nasttuxvzfqayop\",\"dataset\":{\"referenceName\":\"sixhgvbhx\",\"parameters\":{\"mar\":\"dataztgsqjay\",\"nh\":\"dataneibpgbrhbjdq\"}},\"linkedService\":{\"referenceName\":\"motpuwnnoh\",\"parameters\":{\"laynosugkf\":\"datangocfrjuypwyi\",\"hqucum\":\"dataaxttpfsmwgs\",\"uqmllfeothxu\":\"datadd\",\"vkrbzkuastaxklpr\":\"datarigrjdljlkq\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"hgltoizwxvs\",\"datasetParameters\":\"datasgfy\",\"parameters\":{\"vfcck\":\"datayekgafxc\"},\"\":{\"ynctaczcnjfmbbfn\":\"datawletyveszrtlhpdh\",\"itzovnkr\":\"dataj\"}}},{\"name\":\"iklsmni\",\"description\":\"lcoqksyiib\",\"dataset\":{\"referenceName\":\"xwbgbudavqd\",\"parameters\":{\"jvlirk\":\"dataccqcdhth\",\"agzlgpyai\":\"dataucosawrdt\",\"qfttkacybdueur\":\"dataihzqjjtsmuy\",\"jermhzic\":\"datamcdcpkshl\"}},\"linkedService\":{\"referenceName\":\"fdjhyaaknyukibxi\",\"parameters\":{\"piilhvtozy\":\"dataphzwxqte\",\"f\":\"datagjjnxkbylhyyx\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"vqzrwtrd\",\"datasetParameters\":\"datacnvqeons\",\"parameters\":{\"ezyohxpthceopv\":\"dataxlw\",\"lc\":\"datavtwfvesobpbokhm\"},\"\":{\"lqhxkasmcolmu\":\"datarnggcjfw\",\"ygz\":\"datapyvaosdkluwzx\",\"nobguqisqsqkpdmi\":\"datatyevjhu\",\"pnml\":\"datay\"}}}],\"script\":\"qcpszp\",\"scriptLines\":[\"qdvrdmvxyrxdh\",\"vqojbxaotcgbz\",\"mbtple\",\"oioyidoxznvgvd\"]}")
                .toObject(FlowletTypeProperties.class);
        Assertions.assertEquals("lcxiqqzjko", model.sources().get(0).name());
        Assertions.assertEquals("upnamglroui", model.sources().get(0).description());
        Assertions.assertEquals("mfivjqterd", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("dmkr", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("y", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("sd", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("acfculzjrmhpf", model.sinks().get(0).name());
        Assertions.assertEquals("vyldqpzfzxsoxin", model.sinks().get(0).description());
        Assertions.assertEquals("jlzkdrocqsxy", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("kig", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("etxdqcmyctajqzj", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("dgsjsat", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("gz", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("fdmxuqb", model.transformations().get(0).name());
        Assertions.assertEquals("nasttuxvzfqayop", model.transformations().get(0).description());
        Assertions.assertEquals("sixhgvbhx", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("motpuwnnoh", model.transformations().get(0).linkedService().referenceName());
        Assertions
            .assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("hgltoizwxvs", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("qcpszp", model.script());
        Assertions.assertEquals("qdvrdmvxyrxdh", model.scriptLines().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FlowletTypeProperties model =
            new FlowletTypeProperties()
                .withSources(
                    Arrays
                        .asList(
                            new DataFlowSource()
                                .withName("lcxiqqzjko")
                                .withDescription("upnamglroui")
                                .withDataset(
                                    new DatasetReference()
                                        .withReferenceName("mfivjqterd")
                                        .withParameters(mapOf("d", "datagd", "tyhhmvfxlapja", "dataghpcvrwqirvt")))
                                .withLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("dmkr")
                                        .withParameters(
                                            mapOf(
                                                "qlujqgi",
                                                "datapgqvqo",
                                                "hpqvcts",
                                                "dataabwlyvx",
                                                "zhasupmlppdpgzvz",
                                                "dataaeuhwwsknstvz",
                                                "ptgongruat",
                                                "dataazvbkar")))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("y")
                                        .withDatasetParameters("dataqheni")
                                        .withParameters(mapOf("yjdeayscseyd", "dataqnguba"))
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("sd")
                                        .withParameters(mapOf("surejqrshzzbgu", "datayoqxdedecfiwhag"))),
                            new DataFlowSource()
                                .withName("yu")
                                .withDescription("p")
                                .withDataset(
                                    new DatasetReference()
                                        .withReferenceName("davsjcfmazpz")
                                        .withParameters(
                                            mapOf(
                                                "izekuvfrj",
                                                "datauzvcmcok",
                                                "ajbvbn",
                                                "dataucaonz",
                                                "idgzwdydamis",
                                                "datardemdidack",
                                                "xkqejtpjfojiunr",
                                                "datapztdivyk")))
                                .withLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("hxuk")
                                        .withParameters(mapOf("o", "datakdtoiboancdr")))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("xu")
                                        .withDatasetParameters("dataxonckbnlblfxlup")
                                        .withParameters(mapOf("izxzpzweghl", "dataq", "dve", "datawbogvgfklqiy"))
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("xzs")
                                        .withParameters(mapOf("udl", "dataezbzu", "cgwfsgqkstyecu", "datavzske"))),
                            new DataFlowSource()
                                .withName("qmawzjdrpizfu")
                                .withDescription("yctsdbtqgkuj")
                                .withDataset(
                                    new DatasetReference()
                                        .withReferenceName("ooxrqwoeurb")
                                        .withParameters(
                                            mapOf(
                                                "wmmkfq",
                                                "dataapdyarikeejdpdfh",
                                                "qulw",
                                                "datar",
                                                "eqkvyhzokpoyu",
                                                "datatrj")))
                                .withLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("uensn")
                                        .withParameters(
                                            mapOf(
                                                "jsumxpezcoio",
                                                "dataphmpoejnglpwsada",
                                                "xkeedcnwmy",
                                                "datajrmfqzwqd",
                                                "czaqpqifdbmpt",
                                                "dataxfqzkvemyzd",
                                                "natnizexroqsqjg",
                                                "datawtxzuisam")))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("thsplwsttxsr")
                                        .withDatasetParameters("datafq")
                                        .withParameters(
                                            mapOf(
                                                "sxyr",
                                                "dataiceovxgzw",
                                                "ik",
                                                "datajmtikes",
                                                "dseipnquwzxhrp",
                                                "dataohzixyqhfnkvycqq"))
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("ndnoxaxnrqaq")
                                        .withParameters(mapOf("usdvrgp", "datandxol")))))
                .withSinks(
                    Arrays
                        .asList(
                            new DataFlowSink()
                                .withName("acfculzjrmhpf")
                                .withDescription("vyldqpzfzxsoxin")
                                .withDataset(
                                    new DatasetReference()
                                        .withReferenceName("jlzkdrocqsxy")
                                        .withParameters(
                                            mapOf(
                                                "is", "datatcmiwd", "p", "datanmeylajamcajyhf", "ryklleynqa", "datac")))
                                .withLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("kig")
                                        .withParameters(mapOf("hg", "datalwalhvu")))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("etxdqcmyctajqzj")
                                        .withDatasetParameters("datalecxbibiwks")
                                        .withParameters(mapOf("oikvntwcz", "datayxsbfpz"))
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("dgsjsat")
                                        .withParameters(mapOf("azdfsqxhyqmrej", "datac", "bwtdr", "dataarnpvgrsz")))
                                .withRejectedDataLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("gz")
                                        .withParameters(mapOf("fi", "dataxzlh"))),
                            new DataFlowSink()
                                .withName("rycgnwplrrbph")
                                .withDescription("sbbi")
                                .withDataset(
                                    new DatasetReference()
                                        .withReferenceName("icuhqvumspb")
                                        .withParameters(mapOf("xmzrmtmvwitu", "dataeqbbewfcuqfpy")))
                                .withLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("yyjshcybwfuppo")
                                        .withParameters(
                                            mapOf(
                                                "zsvavlr",
                                                "datacmvouujxdiikmoxr",
                                                "oywlunpipcwyb",
                                                "dataikj",
                                                "npatpftsae",
                                                "datazfn")))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("whxorpwaltz")
                                        .withDatasetParameters("datagexojfccylhtrht")
                                        .withParameters(
                                            mapOf(
                                                "zxezmnr",
                                                "datazjpwexcdrzprob",
                                                "hlokfpmijpdvzv",
                                                "datajgpjeuxs",
                                                "rwyambhbafebzxfk",
                                                "databhwbdqufvcgnrgla",
                                                "nntrvrkps",
                                                "dataqutibhl"))
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("ijzzcaoijolbuauk")
                                        .withParameters(
                                            mapOf(
                                                "lxqdwr",
                                                "dataeopex",
                                                "pibkgxyxyaux",
                                                "datawyil",
                                                "ytkujsq",
                                                "dataeddobmcnltm",
                                                "oxfab",
                                                "datacm")))
                                .withRejectedDataLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("gpwb")
                                        .withParameters(mapOf("li", "datari"))),
                            new DataFlowSink()
                                .withName("ljekn")
                                .withDescription("n")
                                .withDataset(
                                    new DatasetReference()
                                        .withReferenceName("j")
                                        .withParameters(
                                            mapOf("pnowawonoehrguql", "datawkdnjrxgkrhwiehy", "pyrgu", "datafwafbjz")))
                                .withLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("azbkocbygvthrmxk")
                                        .withParameters(mapOf("keboo", "datawwdxomrawp")))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("yacagae")
                                        .withDatasetParameters("dataoiqclmgdtwgab")
                                        .withParameters(mapOf("wjecooyvhtuqbpe", "datakuz"))
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("hnysvlpyeu")
                                        .withParameters(mapOf("hyqqegatxgr", "datapdixqbolxv")))
                                .withRejectedDataLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("mg")
                                        .withParameters(
                                            mapOf(
                                                "ibmg",
                                                "datatsdixchw",
                                                "gair",
                                                "dataymncjc",
                                                "fbhtleberp",
                                                "datacqzoofjnqjsve")))))
                .withTransformations(
                    Arrays
                        .asList(
                            new Transformation()
                                .withName("fdmxuqb")
                                .withDescription("nasttuxvzfqayop")
                                .withDataset(
                                    new DatasetReference()
                                        .withReferenceName("sixhgvbhx")
                                        .withParameters(mapOf("mar", "dataztgsqjay", "nh", "dataneibpgbrhbjdq")))
                                .withLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("motpuwnnoh")
                                        .withParameters(
                                            mapOf(
                                                "laynosugkf",
                                                "datangocfrjuypwyi",
                                                "hqucum",
                                                "dataaxttpfsmwgs",
                                                "uqmllfeothxu",
                                                "datadd",
                                                "vkrbzkuastaxklpr",
                                                "datarigrjdljlkq")))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("hgltoizwxvs")
                                        .withDatasetParameters("datasgfy")
                                        .withParameters(mapOf("vfcck", "datayekgafxc"))
                                        .withAdditionalProperties(mapOf())),
                            new Transformation()
                                .withName("iklsmni")
                                .withDescription("lcoqksyiib")
                                .withDataset(
                                    new DatasetReference()
                                        .withReferenceName("xwbgbudavqd")
                                        .withParameters(
                                            mapOf(
                                                "jvlirk",
                                                "dataccqcdhth",
                                                "agzlgpyai",
                                                "dataucosawrdt",
                                                "qfttkacybdueur",
                                                "dataihzqjjtsmuy",
                                                "jermhzic",
                                                "datamcdcpkshl")))
                                .withLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("fdjhyaaknyukibxi")
                                        .withParameters(mapOf("piilhvtozy", "dataphzwxqte", "f", "datagjjnxkbylhyyx")))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("vqzrwtrd")
                                        .withDatasetParameters("datacnvqeons")
                                        .withParameters(mapOf("ezyohxpthceopv", "dataxlw", "lc", "datavtwfvesobpbokhm"))
                                        .withAdditionalProperties(mapOf()))))
                .withScript("qcpszp")
                .withScriptLines(Arrays.asList("qdvrdmvxyrxdh", "vqojbxaotcgbz", "mbtple", "oioyidoxznvgvd"));
        model = BinaryData.fromObject(model).toObject(FlowletTypeProperties.class);
        Assertions.assertEquals("lcxiqqzjko", model.sources().get(0).name());
        Assertions.assertEquals("upnamglroui", model.sources().get(0).description());
        Assertions.assertEquals("mfivjqterd", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("dmkr", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("y", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("sd", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("acfculzjrmhpf", model.sinks().get(0).name());
        Assertions.assertEquals("vyldqpzfzxsoxin", model.sinks().get(0).description());
        Assertions.assertEquals("jlzkdrocqsxy", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("kig", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("etxdqcmyctajqzj", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("dgsjsat", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("gz", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("fdmxuqb", model.transformations().get(0).name());
        Assertions.assertEquals("nasttuxvzfqayop", model.transformations().get(0).description());
        Assertions.assertEquals("sixhgvbhx", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("motpuwnnoh", model.transformations().get(0).linkedService().referenceName());
        Assertions
            .assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("hgltoizwxvs", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("qcpszp", model.script());
        Assertions.assertEquals("qdvrdmvxyrxdh", model.scriptLines().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
