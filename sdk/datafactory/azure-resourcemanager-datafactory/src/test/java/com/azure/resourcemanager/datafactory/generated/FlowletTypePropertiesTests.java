// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.FlowletTypeProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSink;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.Transformation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FlowletTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FlowletTypeProperties model = BinaryData.fromString(
            "{\"sources\":[{\"schemaLinkedService\":{\"referenceName\":\"etatlakf\",\"parameters\":{\"bvtooxrpogwp\":\"dataxwgiks\",\"bfntumeezbxvq\":\"datachgjtnhtukfacih\",\"sgomtmjz\":\"databnuvwcg\",\"mkkhtgfredml\":\"dataxuqgovsxpwwztj\"}},\"name\":\"cgrllc\",\"description\":\"aovjow\",\"dataset\":{\"referenceName\":\"hpa\",\"parameters\":{\"lyotg\":\"datao\",\"genmvceb\":\"datawsxnsrqor\",\"dcqjkedwqurc\":\"dataeetqujxcxxq\"}},\"linkedService\":{\"referenceName\":\"jmrvvxwjongz\",\"parameters\":{\"chskxxka\":\"dataqqrsil\",\"aqgvto\":\"datasbvr\",\"jrthcfjzhx\":\"datarulfuct\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"bqjr\",\"datasetParameters\":\"datatvrjeqmtz\",\"parameters\":{\"rdhabsr\":\"dataqrztrxal\",\"a\":\"datarsnrhp\",\"xkvvcs\":\"dataiwkkvya\",\"mlivrjjxnwx\":\"datamsvuvdjkqxetq\"},\"\":{\"jxlehzlx\":\"datap\",\"w\":\"datagfquwz\"}}},{\"schemaLinkedService\":{\"referenceName\":\"belwcer\",\"parameters\":{\"xniu\":\"databpjxljtxbusqtb\"}},\"name\":\"sdzhgbdgzpagsec\",\"description\":\"db\",\"dataset\":{\"referenceName\":\"qrgxf\",\"parameters\":{\"ellnkkii\":\"dataqiynez\",\"jfuaxroqvqpilrgu\":\"datavmtumxpym\"}},\"linkedService\":{\"referenceName\":\"anlduwzorxsb\",\"parameters\":{\"xym\":\"dataqk\",\"qepdx\":\"datakqv\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"uubwyvpjb\",\"datasetParameters\":\"datacpj\",\"parameters\":{\"exkydfb\":\"dataqgi\",\"vhuerkjddvrglieg\":\"datalj\"},\"\":{\"fgmwd\":\"datavbiiftksdwgdnk\",\"buvczldbglzoutb\":\"datac\",\"orbjg\":\"dataaqgzekajclyzgs\"}}},{\"schemaLinkedService\":{\"referenceName\":\"zjotvmrxkhlo\",\"parameters\":{\"yu\":\"datajbhvhdiqayflu\"}},\"name\":\"snuudtelvhyibdr\",\"description\":\"swhb\",\"dataset\":{\"referenceName\":\"bpyrowtjoxzt\",\"parameters\":{\"cta\":\"dataqchvczevjn\"}},\"linkedService\":{\"referenceName\":\"yvrtp\",\"parameters\":{\"yhwqw\":\"datamhzcgkrepdqh\",\"km\":\"datamvxqab\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"xin\",\"datasetParameters\":\"datare\",\"parameters\":{\"angp\":\"datawhlpuzjpceezn\",\"phmsexroq\":\"databfaxyxzlbc\",\"nfee\":\"datandktxfv\"},\"\":{\"bgnixxoww\":\"datakrie\",\"p\":\"datakyfwnwpiwxeiicr\",\"dm\":\"datapk\"}}}],\"sinks\":[{\"schemaLinkedService\":{\"referenceName\":\"jvskwsdgkjg\",\"parameters\":{\"fcvoinwoqar\":\"datawrasekw\",\"atdavuqmcbyms\":\"datawyxqiclad\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"bjlquv\",\"parameters\":{\"simi\":\"datacjumv\",\"l\":\"datayoi\",\"ibb\":\"datamiqwnnrac\",\"twukex\":\"dataqpspkladydgnha\"}},\"name\":\"gpmnmabe\",\"description\":\"qilwgdfpfqfpcvs\",\"dataset\":{\"referenceName\":\"l\",\"parameters\":{\"jj\":\"datavwerfwxbsmtb\",\"ci\":\"datah\",\"ekqhs\":\"datakwdvbtb\",\"ejuwyqwdqigmghgi\":\"datahtfpwpqb\"}},\"linkedService\":{\"referenceName\":\"txlujkhnjcmr\",\"parameters\":{\"qtwmlmhjnqtqeahj\":\"datamkh\",\"vgua\":\"datadvragpokddxejhh\",\"k\":\"datatpt\",\"gbvoffbkk\":\"datawkqyns\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"xaexqokmyrljial\",\"datasetParameters\":\"datanobrqlpb\",\"parameters\":{\"hsqe\":\"datarpzuyudivbx\",\"y\":\"dataeonqelwgdhuru\",\"ogatmoljiy\":\"dataza\",\"knsjulugd\":\"datampinmzvfkneerzzt\"},\"\":{\"xlelfjh\":\"datah\",\"dmiwjekpty\":\"dataeizcpih\"}}},{\"schemaLinkedService\":{\"referenceName\":\"ydbjzcqymlcf\",\"parameters\":{\"pstauol\":\"datamhsurlgwqkpmm\",\"hvvlrl\":\"datawiubmomsgvv\",\"swaeqkzfz\":\"datahewjjmajnkdflqio\",\"xrmexznlw\":\"dataxjoshohtotryegpk\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"fokxk\",\"parameters\":{\"ufgjblcdr\":\"dataze\"}},\"name\":\"yfcemftz\",\"description\":\"ykyalugek\",\"dataset\":{\"referenceName\":\"qnhttwdowrczfj\",\"parameters\":{\"cifrhjulrsulwzpf\":\"datauxxrkkmhmnulwemp\",\"hhgzotf\":\"datausnaw\"}},\"linkedService\":{\"referenceName\":\"yrgkoekv\",\"parameters\":{\"pcqydeykvsk\":\"dataxyxhighctxbxmo\",\"frjeizikgqaboohx\":\"datacz\",\"rmdvewuyqaeohpj\":\"datamsgycqs\",\"aurghooxa\":\"datagejkbvhh\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"k\",\"datasetParameters\":\"datajxjoezlq\",\"parameters\":{\"tmbozomtzamicbig\":\"datadknkobe\"},\"\":{\"raabmdlqjb\":\"datagzseznuxkeua\",\"ixlhupm\":\"datadp\"}}},{\"schemaLinkedService\":{\"referenceName\":\"ihzbdnpxpk\",\"parameters\":{\"rufssjyg\":\"datareyxelyicghf\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"fxrk\",\"parameters\":{\"efgvqcp\":\"datammgmqf\",\"djhunhghcgawnr\":\"datawjgquxweyslandkd\",\"bfsx\":\"datanquoxsotireimse\"}},\"name\":\"tcyilbvz\",\"description\":\"xcjzlquze\",\"dataset\":{\"referenceName\":\"kjxebj\",\"parameters\":{\"v\":\"datainzabwmvoglj\",\"ehaqidoyzltgio\":\"datapgidnw\",\"sergdtpe\":\"dataqoqpepiaeap\",\"qq\":\"datanacyheqwb\"}},\"linkedService\":{\"referenceName\":\"jubkhjozfymcwmb\",\"parameters\":{\"qiipsejb\":\"datavqyvl\",\"ieswhddzydisn\":\"datavsi\",\"i\":\"dataepywyjlnldpxottd\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"qibzji\",\"datasetParameters\":\"dataee\",\"parameters\":{\"jhdhz\":\"datahryvcjwqwoqsra\"},\"\":{\"gv\":\"datapijhfrzgdkk\"}}},{\"schemaLinkedService\":{\"referenceName\":\"khsusmmorf\",\"parameters\":{\"neyttl\":\"datawilzzhnijmriprlk\",\"bkut\":\"datacxiv\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"mltwjfluxynbpvzl\",\"parameters\":{\"khmocgjs\":\"dataauyqnj\"}},\"name\":\"gouarhwvixqq\",\"description\":\"ljky\",\"dataset\":{\"referenceName\":\"jrclrvtzq\",\"parameters\":{\"y\":\"datactbhpjhxpcvrd\",\"n\":\"datait\"}},\"linkedService\":{\"referenceName\":\"ad\",\"parameters\":{\"iceevsaaxwspca\":\"datajahwriuomzczf\",\"gzzromv\":\"dataikhfjqebglcxk\",\"sem\":\"datag\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"srfsvpinkzpatqt\",\"datasetParameters\":\"dataswxspvckojaz\",\"parameters\":{\"vdylytcovqseusrf\":\"dataspftesubzpv\",\"swkjmdihdcyyyz\":\"databdxzfxnxmlbmu\"},\"\":{\"m\":\"databwzjnufzrf\"}}}],\"transformations\":[{\"name\":\"nn\",\"description\":\"rtftedz\",\"dataset\":{\"referenceName\":\"bjtvgjsxmtyjj\",\"parameters\":{\"obt\":\"datadpw\",\"cauwazcgwdfriwg\":\"dataphtitsffofwanmhk\",\"byfg\":\"databjpozokscvgllixd\",\"ohutxlcsk\":\"dataewqkjvxprwpxs\"}},\"linkedService\":{\"referenceName\":\"e\",\"parameters\":{\"lfb\":\"dataggg\",\"srtmdylperpiltt\":\"datardcgu\",\"resrgvtshuvft\":\"datazgczfcmfpfbode\",\"muqkevzgjypanhx\":\"dataai\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"xxzetwwzjwotnx\",\"datasetParameters\":\"datafhglhrfo\",\"parameters\":{\"cselqxovppqibuk\":\"dataecrsnh\"},\"\":{\"zivfqbqnasdsy\":\"datazrlrmlccmetjs\",\"vdgxly\":\"datanzsieuscplh\",\"ezsvkolrupjov\":\"datakxitds\"}}},{\"name\":\"ozsaye\",\"description\":\"azwzlpzbtzuykyki\",\"dataset\":{\"referenceName\":\"sdyepfno\",\"parameters\":{\"wyqejgaao\":\"dataezacfpztga\",\"ngdyfcixrhlcq\":\"datactgkppgkqzkcyzmf\",\"goiutgw\":\"datahoe\"}},\"linkedService\":{\"referenceName\":\"kahpqhazynta\",\"parameters\":{\"i\":\"datancogmipnmliqmvlb\",\"sdfjyiesoc\":\"dataeaqgrvgpomxpupd\",\"mpyzgleo\":\"dataiqbuou\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"bgbwwz\",\"datasetParameters\":\"dataajfwnncfm\",\"parameters\":{\"bouguxtndopgjt\":\"dataqgjjrlhiqlwixv\",\"alapdlndbe\":\"databas\",\"ixv\":\"dataqb\"},\"\":{\"zfe\":\"dataynpbbfqvzfjmspu\"}}}],\"script\":\"jljmphfkyezol\",\"scriptLines\":[\"mi\",\"uydoccnx\",\"hanzbuiad\",\"batecaat\"]}")
            .toObject(FlowletTypeProperties.class);
        Assertions.assertEquals("cgrllc", model.sources().get(0).name());
        Assertions.assertEquals("aovjow", model.sources().get(0).description());
        Assertions.assertEquals("hpa", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("jmrvvxwjongz", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("bqjr", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("etatlakf", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("gpmnmabe", model.sinks().get(0).name());
        Assertions.assertEquals("qilwgdfpfqfpcvs", model.sinks().get(0).description());
        Assertions.assertEquals("l", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("txlujkhnjcmr", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("xaexqokmyrljial", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("jvskwsdgkjg", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("bjlquv", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("nn", model.transformations().get(0).name());
        Assertions.assertEquals("rtftedz", model.transformations().get(0).description());
        Assertions.assertEquals("bjtvgjsxmtyjj", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("e", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("xxzetwwzjwotnx", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("jljmphfkyezol", model.script());
        Assertions.assertEquals("mi", model.scriptLines().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FlowletTypeProperties model
            = new FlowletTypeProperties()
                .withSources(
                    Arrays
                        .asList(
                            new DataFlowSource().withName("cgrllc")
                                .withDescription("aovjow")
                                .withDataset(new DatasetReference().withReferenceName("hpa")
                                    .withParameters(mapOf("lyotg", "datao", "genmvceb", "datawsxnsrqor", "dcqjkedwqurc",
                                        "dataeetqujxcxxq")))
                                .withLinkedService(new LinkedServiceReference().withReferenceName("jmrvvxwjongz")
                                    .withParameters(mapOf("chskxxka", "dataqqrsil", "aqgvto", "datasbvr", "jrthcfjzhx",
                                        "datarulfuct")))
                                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                    .withReferenceName("bqjr")
                                    .withDatasetParameters("datatvrjeqmtz")
                                    .withParameters(mapOf("rdhabsr", "dataqrztrxal", "a", "datarsnrhp", "xkvvcs",
                                        "dataiwkkvya", "mlivrjjxnwx", "datamsvuvdjkqxetq"))
                                    .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("etatlakf")
                                    .withParameters(mapOf(
                                        "bvtooxrpogwp", "dataxwgiks", "bfntumeezbxvq", "datachgjtnhtukfacih",
                                        "sgomtmjz", "databnuvwcg", "mkkhtgfredml", "dataxuqgovsxpwwztj"))),
                            new DataFlowSource().withName("sdzhgbdgzpagsec")
                                .withDescription("db")
                                .withDataset(new DatasetReference().withReferenceName("qrgxf")
                                    .withParameters(
                                        mapOf("ellnkkii", "dataqiynez", "jfuaxroqvqpilrgu", "datavmtumxpym")))
                                .withLinkedService(new LinkedServiceReference().withReferenceName("anlduwzorxsb")
                                    .withParameters(mapOf("xym", "dataqk", "qepdx", "datakqv")))
                                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                    .withReferenceName("uubwyvpjb")
                                    .withDatasetParameters("datacpj")
                                    .withParameters(mapOf("exkydfb", "dataqgi", "vhuerkjddvrglieg", "datalj"))
                                    .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(new LinkedServiceReference()
                                    .withReferenceName("belwcer")
                                    .withParameters(mapOf("xniu", "databpjxljtxbusqtb"))),
                            new DataFlowSource().withName("snuudtelvhyibdr")
                                .withDescription("swhb")
                                .withDataset(new DatasetReference().withReferenceName("bpyrowtjoxzt")
                                    .withParameters(mapOf("cta", "dataqchvczevjn")))
                                .withLinkedService(new LinkedServiceReference().withReferenceName("yvrtp")
                                    .withParameters(mapOf("yhwqw", "datamhzcgkrepdqh", "km", "datamvxqab")))
                                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                    .withReferenceName("xin")
                                    .withDatasetParameters("datare")
                                    .withParameters(mapOf("angp", "datawhlpuzjpceezn", "phmsexroq", "databfaxyxzlbc",
                                        "nfee", "datandktxfv"))
                                    .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("zjotvmrxkhlo")
                                    .withParameters(mapOf("yu", "datajbhvhdiqayflu")))))
                .withSinks(Arrays.asList(
                    new DataFlowSink().withName("gpmnmabe")
                        .withDescription("qilwgdfpfqfpcvs")
                        .withDataset(new DatasetReference().withReferenceName("l")
                            .withParameters(mapOf("jj", "datavwerfwxbsmtb", "ci", "datah", "ekqhs", "datakwdvbtb",
                                "ejuwyqwdqigmghgi", "datahtfpwpqb")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("txlujkhnjcmr")
                            .withParameters(mapOf("qtwmlmhjnqtqeahj", "datamkh", "vgua", "datadvragpokddxejhh", "k",
                                "datatpt", "gbvoffbkk", "datawkqyns")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("xaexqokmyrljial")
                            .withDatasetParameters("datanobrqlpb")
                            .withParameters(mapOf("hsqe", "datarpzuyudivbx", "y", "dataeonqelwgdhuru", "ogatmoljiy",
                                "dataza", "knsjulugd", "datampinmzvfkneerzzt"))
                            .withAdditionalProperties(mapOf()))
                        .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("jvskwsdgkjg")
                            .withParameters(mapOf("fcvoinwoqar", "datawrasekw", "atdavuqmcbyms", "datawyxqiclad")))
                        .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("bjlquv")
                            .withParameters(mapOf("simi", "datacjumv", "l", "datayoi", "ibb", "datamiqwnnrac", "twukex",
                                "dataqpspkladydgnha"))),
                    new DataFlowSink().withName("yfcemftz")
                        .withDescription("ykyalugek")
                        .withDataset(new DatasetReference().withReferenceName("qnhttwdowrczfj")
                            .withParameters(mapOf("cifrhjulrsulwzpf", "datauxxrkkmhmnulwemp", "hhgzotf", "datausnaw")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("yrgkoekv")
                            .withParameters(mapOf("pcqydeykvsk", "dataxyxhighctxbxmo", "frjeizikgqaboohx", "datacz",
                                "rmdvewuyqaeohpj", "datamsgycqs", "aurghooxa", "datagejkbvhh")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("k")
                            .withDatasetParameters("datajxjoezlq")
                            .withParameters(mapOf("tmbozomtzamicbig", "datadknkobe"))
                            .withAdditionalProperties(mapOf()))
                        .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ydbjzcqymlcf")
                            .withParameters(mapOf("pstauol", "datamhsurlgwqkpmm", "hvvlrl", "datawiubmomsgvv",
                                "swaeqkzfz", "datahewjjmajnkdflqio", "xrmexznlw", "dataxjoshohtotryegpk")))
                        .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("fokxk")
                            .withParameters(mapOf("ufgjblcdr", "dataze"))),
                    new DataFlowSink().withName("tcyilbvz")
                        .withDescription("xcjzlquze")
                        .withDataset(new DatasetReference().withReferenceName("kjxebj")
                            .withParameters(mapOf("v", "datainzabwmvoglj", "ehaqidoyzltgio", "datapgidnw", "sergdtpe",
                                "dataqoqpepiaeap", "qq", "datanacyheqwb")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("jubkhjozfymcwmb")
                            .withParameters(mapOf("qiipsejb", "datavqyvl", "ieswhddzydisn", "datavsi", "i",
                                "dataepywyjlnldpxottd")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("qibzji")
                            .withDatasetParameters("dataee")
                            .withParameters(mapOf("jhdhz", "datahryvcjwqwoqsra"))
                            .withAdditionalProperties(mapOf()))
                        .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ihzbdnpxpk")
                            .withParameters(mapOf("rufssjyg", "datareyxelyicghf")))
                        .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("fxrk")
                            .withParameters(mapOf("efgvqcp", "datammgmqf", "djhunhghcgawnr", "datawjgquxweyslandkd",
                                "bfsx", "datanquoxsotireimse"))),
                    new DataFlowSink().withName("gouarhwvixqq")
                        .withDescription("ljky")
                        .withDataset(new DatasetReference().withReferenceName("jrclrvtzq")
                            .withParameters(mapOf("y", "datactbhpjhxpcvrd", "n", "datait")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("ad")
                            .withParameters(mapOf("iceevsaaxwspca", "datajahwriuomzczf", "gzzromv", "dataikhfjqebglcxk",
                                "sem", "datag")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("srfsvpinkzpatqt")
                            .withDatasetParameters("dataswxspvckojaz")
                            .withParameters(
                                mapOf("vdylytcovqseusrf", "dataspftesubzpv", "swkjmdihdcyyyz", "databdxzfxnxmlbmu"))
                            .withAdditionalProperties(mapOf()))
                        .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("khsusmmorf")
                            .withParameters(mapOf("neyttl", "datawilzzhnijmriprlk", "bkut", "datacxiv")))
                        .withRejectedDataLinkedService(
                            new LinkedServiceReference().withReferenceName("mltwjfluxynbpvzl")
                                .withParameters(mapOf("khmocgjs", "dataauyqnj")))))
                .withTransformations(Arrays.asList(
                    new Transformation().withName("nn")
                        .withDescription("rtftedz")
                        .withDataset(new DatasetReference().withReferenceName("bjtvgjsxmtyjj")
                            .withParameters(mapOf("obt", "datadpw", "cauwazcgwdfriwg", "dataphtitsffofwanmhk", "byfg",
                                "databjpozokscvgllixd", "ohutxlcsk", "dataewqkjvxprwpxs")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("e")
                            .withParameters(mapOf("lfb", "dataggg", "srtmdylperpiltt", "datardcgu", "resrgvtshuvft",
                                "datazgczfcmfpfbode", "muqkevzgjypanhx", "dataai")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("xxzetwwzjwotnx")
                            .withDatasetParameters("datafhglhrfo")
                            .withParameters(mapOf("cselqxovppqibuk", "dataecrsnh"))
                            .withAdditionalProperties(mapOf())),
                    new Transformation().withName("ozsaye")
                        .withDescription("azwzlpzbtzuykyki")
                        .withDataset(new DatasetReference().withReferenceName("sdyepfno")
                            .withParameters(mapOf("wyqejgaao", "dataezacfpztga", "ngdyfcixrhlcq",
                                "datactgkppgkqzkcyzmf", "goiutgw", "datahoe")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("kahpqhazynta")
                            .withParameters(mapOf("i", "datancogmipnmliqmvlb", "sdfjyiesoc", "dataeaqgrvgpomxpupd",
                                "mpyzgleo", "dataiqbuou")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("bgbwwz")
                            .withDatasetParameters("dataajfwnncfm")
                            .withParameters(
                                mapOf("bouguxtndopgjt", "dataqgjjrlhiqlwixv", "alapdlndbe", "databas", "ixv", "dataqb"))
                            .withAdditionalProperties(mapOf()))))
                .withScript("jljmphfkyezol")
                .withScriptLines(Arrays.asList("mi", "uydoccnx", "hanzbuiad", "batecaat"));
        model = BinaryData.fromObject(model).toObject(FlowletTypeProperties.class);
        Assertions.assertEquals("cgrllc", model.sources().get(0).name());
        Assertions.assertEquals("aovjow", model.sources().get(0).description());
        Assertions.assertEquals("hpa", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("jmrvvxwjongz", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("bqjr", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("etatlakf", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("gpmnmabe", model.sinks().get(0).name());
        Assertions.assertEquals("qilwgdfpfqfpcvs", model.sinks().get(0).description());
        Assertions.assertEquals("l", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("txlujkhnjcmr", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("xaexqokmyrljial", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("jvskwsdgkjg", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("bjlquv", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("nn", model.transformations().get(0).name());
        Assertions.assertEquals("rtftedz", model.transformations().get(0).description());
        Assertions.assertEquals("bjtvgjsxmtyjj", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("e", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("xxzetwwzjwotnx", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("jljmphfkyezol", model.script());
        Assertions.assertEquals("mi", model.scriptLines().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
