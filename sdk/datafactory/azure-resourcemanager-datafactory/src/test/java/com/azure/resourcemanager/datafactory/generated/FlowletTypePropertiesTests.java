// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.FlowletTypeProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSink;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.Transformation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FlowletTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FlowletTypeProperties model = BinaryData.fromString(
            "{\"sources\":[{\"schemaLinkedService\":{\"referenceName\":\"ohzixyqhfnkvycqq\",\"parameters\":{\"rptyo\":\"dataeipnquwzx\"}},\"name\":\"lh\",\"description\":\"ktltddsobjopnouh\",\"dataset\":{\"referenceName\":\"ezkqxsalu\",\"parameters\":{\"dgsjsat\":\"datagfcvcewbwq\",\"qmr\":\"datarncmazdfsqxh\",\"rcwgzwllxzlhhf\":\"datajparnpvgrszrbwt\",\"ywvyldqpzfzxsox\":\"dataxacfculzjrmhp\"}},\"linkedService\":{\"referenceName\":\"unjlzkdrocq\",\"parameters\":{\"wdwisvn\":\"datatqqtcm\",\"zcrryklleynqa\":\"dataeylajamcajyhft\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"igglclwalhvub\",\"datasetParameters\":\"datazphetxdqcm\",\"parameters\":{\"alec\":\"dataajqzj\",\"egyxsbfpzvoik\":\"databibiwks\"},\"\":{\"blalh\":\"datawczfzwushlcx\",\"said\":\"dataezpfki\"}}},{\"schemaLinkedService\":{\"referenceName\":\"saao\",\"parameters\":{\"xjqfiafcnlrtbfi\":\"datagpto\",\"wieopexelxqdw\":\"datazzcaoijolbuauk\",\"ux\":\"dataswyiljpibkgxyxy\"}},\"name\":\"eddobmcnltm\",\"description\":\"tkujsqycm\",\"dataset\":{\"referenceName\":\"xfabl\",\"parameters\":{\"cgnwplrrbphcts\":\"datawbmwhrialiwr\",\"pbfs\":\"databibticuhqvum\",\"xmzrmtmvwitu\":\"dataeqbbewfcuqfpy\"}},\"linkedService\":{\"referenceName\":\"yyjshcybwfuppo\",\"parameters\":{\"zsvavlr\":\"datacmvouujxdiikmoxr\",\"oywlunpipcwyb\":\"dataikj\",\"npatpftsae\":\"datazfn\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"whxorpwaltz\",\"datasetParameters\":\"datagexojfccylhtrht\",\"parameters\":{\"zxezmnr\":\"datazjpwexcdrzprob\",\"hlokfpmijpdvzv\":\"datajgpjeuxs\",\"rwyambhbafebzxfk\":\"databhwbdqufvcgnrgla\",\"nntrvrkps\":\"dataqutibhl\"},\"\":{\"vzm\":\"datau\"}}}],\"sinks\":[{\"schemaLinkedService\":{\"referenceName\":\"ysvlpyeuukppd\",\"parameters\":{\"xvhhyqq\":\"databo\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"at\",\"parameters\":{\"nmtsdixc\":\"dataznmg\",\"ibmg\":\"dataw\",\"gair\":\"dataymncjc\",\"fbhtleberp\":\"datacqzoofjnqjsve\"}},\"name\":\"ljekn\",\"description\":\"n\",\"dataset\":{\"referenceName\":\"j\",\"parameters\":{\"pnowawonoehrguql\":\"datawkdnjrxgkrhwiehy\",\"pyrgu\":\"datafwafbjz\"}},\"linkedService\":{\"referenceName\":\"azbkocbygvthrmxk\",\"parameters\":{\"keboo\":\"datawwdxomrawp\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"yacagae\",\"datasetParameters\":\"dataoiqclmgdtwgab\",\"parameters\":{\"wjecooyvhtuqbpe\":\"datakuz\"},\"\":{\"hftzbpyfao\":\"dataibncgagdvcd\",\"htncwmhjobzrfp\":\"datadf\",\"cqhyftcvbz\":\"dataiz\",\"orssatfyb\":\"datagwhgkgsoau\"}}},{\"schemaLinkedService\":{\"referenceName\":\"ufdmxuq\",\"parameters\":{\"tsixhgvbhxmndztg\":\"datanasttuxvzfqayop\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"jay\",\"parameters\":{\"q\":\"datarxneibpgbrhbj\",\"nmotpuwnnoh\":\"datanh\",\"wyiulaynosu\":\"datamzngocfrjuy\"}},\"name\":\"kfhaxttpfsmwgsgh\",\"description\":\"cum\",\"dataset\":{\"referenceName\":\"dau\",\"parameters\":{\"dlj\":\"datalfeothxuarigr\",\"pruulhg\":\"datakqhvkrbzkuastaxk\"}},\"linkedService\":{\"referenceName\":\"oizwxvs\",\"parameters\":{\"yekgafxc\":\"datagfyys\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"cckwrtwle\",\"datasetParameters\":\"dataveszrtlhpdhw\",\"parameters\":{\"njfmbbfnvjxit\":\"datatacz\"},\"\":{\"mn\":\"datankrtikl\"}}},{\"schemaLinkedService\":{\"referenceName\":\"qlcoqksyiibhyx\",\"parameters\":{\"avqdorbccqcd\":\"databu\",\"wrdtnagzlgpy\":\"datathojvlirknucos\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"xihzqjjts\",\"parameters\":{\"acybdueurgmcdcpk\":\"datadqftt\",\"ermhzicsbfdjhyaa\":\"datahlo\",\"glhphzwx\":\"datanyukibx\"}},\"name\":\"tej\",\"description\":\"ilhvtozyagjj\",\"dataset\":{\"referenceName\":\"k\",\"parameters\":{\"dgscnvqeonsgnwx\":\"datahyyxgffklvqzrwt\"}},\"linkedService\":{\"referenceName\":\"mezyo\",\"parameters\":{\"sobpbo\":\"datathceopvkvtwfv\",\"yarnggcjfwblqhxk\":\"datahmmlc\",\"aosd\":\"datasmcolmugpy\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"wzxeygzvtyevjhu\",\"datasetParameters\":\"dataobguqisqsqk\",\"parameters\":{\"nmlvi\":\"dataioyj\",\"yrx\":\"datacpszpmcvqdvrdmv\"},\"\":{\"mbtple\":\"datavqojbxaotcgbz\",\"muuv\":\"dataoioyidoxznvgvd\"}}}],\"transformations\":[{\"name\":\"sxmrszbknimxlp\",\"description\":\"rxrzutylcur\",\"dataset\":{\"referenceName\":\"q\",\"parameters\":{\"jmbnvynf\":\"dataxqaehtd\"}},\"linkedService\":{\"referenceName\":\"oeactedcglskakdd\",\"parameters\":{\"duyqypf\":\"datahzllrqmtlpbyxro\",\"brjjtalxrdsjr\":\"datamnoiicsudy\",\"pjwyblvtbdmvs\":\"dataoluqwgusxxhdo\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"daelqpv\",\"datasetParameters\":\"datamkwjfbotl\",\"parameters\":{\"ivuxcjkcoqwczs\":\"datadusxurs\",\"qtnhjrfd\":\"dataiqrizfwihvaan\"},\"\":{\"fkkauigvmua\":\"datavbbaexxjfwtg\"}}},{\"name\":\"mczfedyuepsvplt\",\"description\":\"ajjvywe\",\"dataset\":{\"referenceName\":\"fkumcfjxoky\",\"parameters\":{\"k\":\"datayasvf\",\"jekrknfd\":\"datamyg\",\"lcr\":\"dataugjqyckgtxkrdt\",\"tcsubmzoo\":\"datajdkl\"}},\"linkedService\":{\"referenceName\":\"vo\",\"parameters\":{\"yslb\":\"datakxfpwh\",\"yqxridttb\":\"datalglmnnkkwayqsh\",\"uylztpziizevjyk\":\"dataaqjmkgxqwque\",\"kqtwqlepjjzkcasf\":\"datafvezefk\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ntogffjwajnrt\",\"datasetParameters\":\"datavaqkifmxawost\",\"parameters\":{\"hemvwfnqqwypvnd\":\"datanhrkmjqncfvdsc\",\"jfkainj\":\"datawbgodtggrssg\",\"bgmusaictd\":\"datauymvecvzts\"},\"\":{\"zeqozre\":\"datakzzohnrddc\",\"ixbnj\":\"datalbz\",\"ameudpabcreu\":\"dataqvzyuexozonyn\",\"exzvdube\":\"datazosgyjxvcvasorm\"}}}],\"script\":\"zygba\",\"scriptLines\":[\"ecovs\",\"qhzrtdbak\",\"limzfvppk\"]}")
            .toObject(FlowletTypeProperties.class);
        Assertions.assertEquals("lh", model.sources().get(0).name());
        Assertions.assertEquals("ktltddsobjopnouh", model.sources().get(0).description());
        Assertions.assertEquals("ezkqxsalu", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("unjlzkdrocq", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("igglclwalhvub", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("ohzixyqhfnkvycqq", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("ljekn", model.sinks().get(0).name());
        Assertions.assertEquals("n", model.sinks().get(0).description());
        Assertions.assertEquals("j", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("azbkocbygvthrmxk", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("yacagae", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("ysvlpyeuukppd", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("at", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("sxmrszbknimxlp", model.transformations().get(0).name());
        Assertions.assertEquals("rxrzutylcur", model.transformations().get(0).description());
        Assertions.assertEquals("q", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("oeactedcglskakdd", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("daelqpv", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("zygba", model.script());
        Assertions.assertEquals("ecovs", model.scriptLines().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FlowletTypeProperties model
            = new FlowletTypeProperties()
                .withSources(Arrays.asList(
                    new DataFlowSource().withName("lh")
                        .withDescription("ktltddsobjopnouh")
                        .withDataset(new DatasetReference().withReferenceName("ezkqxsalu")
                            .withParameters(mapOf("dgsjsat", "datagfcvcewbwq", "qmr", "datarncmazdfsqxh",
                                "rcwgzwllxzlhhf", "datajparnpvgrszrbwt", "ywvyldqpzfzxsox", "dataxacfculzjrmhp")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("unjlzkdrocq")
                            .withParameters(mapOf("wdwisvn", "datatqqtcm", "zcrryklleynqa", "dataeylajamcajyhft")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("igglclwalhvub")
                            .withDatasetParameters("datazphetxdqcm")
                            .withParameters(mapOf("alec", "dataajqzj", "egyxsbfpzvoik", "databibiwks"))
                            .withAdditionalProperties(mapOf()))
                        .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ohzixyqhfnkvycqq")
                            .withParameters(mapOf("rptyo", "dataeipnquwzx"))),
                    new DataFlowSource().withName("eddobmcnltm")
                        .withDescription("tkujsqycm")
                        .withDataset(new DatasetReference().withReferenceName("xfabl")
                            .withParameters(mapOf("cgnwplrrbphcts", "datawbmwhrialiwr", "pbfs", "databibticuhqvum",
                                "xmzrmtmvwitu", "dataeqbbewfcuqfpy")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("yyjshcybwfuppo")
                            .withParameters(mapOf("zsvavlr", "datacmvouujxdiikmoxr", "oywlunpipcwyb", "dataikj",
                                "npatpftsae", "datazfn")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("whxorpwaltz")
                            .withDatasetParameters("datagexojfccylhtrht")
                            .withParameters(mapOf("zxezmnr", "datazjpwexcdrzprob", "hlokfpmijpdvzv", "datajgpjeuxs",
                                "rwyambhbafebzxfk", "databhwbdqufvcgnrgla", "nntrvrkps", "dataqutibhl"))
                            .withAdditionalProperties(mapOf()))
                        .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("saao")
                            .withParameters(mapOf("xjqfiafcnlrtbfi", "datagpto", "wieopexelxqdw", "datazzcaoijolbuauk",
                                "ux", "dataswyiljpibkgxyxy")))))
                .withSinks(
                    Arrays
                        .asList(
                            new DataFlowSink().withName("ljekn")
                                .withDescription("n")
                                .withDataset(new DatasetReference().withReferenceName("j")
                                    .withParameters(
                                        mapOf("pnowawonoehrguql", "datawkdnjrxgkrhwiehy", "pyrgu", "datafwafbjz")))
                                .withLinkedService(new LinkedServiceReference().withReferenceName("azbkocbygvthrmxk")
                                    .withParameters(mapOf("keboo", "datawwdxomrawp")))
                                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                    .withReferenceName("yacagae")
                                    .withDatasetParameters("dataoiqclmgdtwgab")
                                    .withParameters(mapOf("wjecooyvhtuqbpe", "datakuz"))
                                    .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ysvlpyeuukppd")
                                    .withParameters(mapOf("xvhhyqq", "databo")))
                                .withRejectedDataLinkedService(new LinkedServiceReference()
                                    .withReferenceName("at")
                                    .withParameters(mapOf(
                                        "nmtsdixc", "dataznmg", "ibmg", "dataw", "gair", "dataymncjc", "fbhtleberp",
                                        "datacqzoofjnqjsve"))),
                            new DataFlowSink().withName("kfhaxttpfsmwgsgh")
                                .withDescription("cum")
                                .withDataset(new DatasetReference().withReferenceName("dau")
                                    .withParameters(
                                        mapOf("dlj", "datalfeothxuarigr", "pruulhg", "datakqhvkrbzkuastaxk")))
                                .withLinkedService(new LinkedServiceReference().withReferenceName("oizwxvs")
                                    .withParameters(mapOf("yekgafxc", "datagfyys")))
                                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                    .withReferenceName("cckwrtwle")
                                    .withDatasetParameters("dataveszrtlhpdhw")
                                    .withParameters(mapOf("njfmbbfnvjxit", "datatacz"))
                                    .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ufdmxuq")
                                    .withParameters(mapOf("tsixhgvbhxmndztg", "datanasttuxvzfqayop")))
                                .withRejectedDataLinkedService(new LinkedServiceReference()
                                    .withReferenceName("jay")
                                    .withParameters(
                                        mapOf(
                                            "q", "datarxneibpgbrhbj", "nmotpuwnnoh", "datanh", "wyiulaynosu",
                                            "datamzngocfrjuy"))),
                            new DataFlowSink().withName("tej")
                                .withDescription("ilhvtozyagjj")
                                .withDataset(new DatasetReference().withReferenceName("k")
                                    .withParameters(mapOf("dgscnvqeonsgnwx", "datahyyxgffklvqzrwt")))
                                .withLinkedService(new LinkedServiceReference().withReferenceName("mezyo")
                                    .withParameters(mapOf("sobpbo", "datathceopvkvtwfv", "yarnggcjfwblqhxk",
                                        "datahmmlc", "aosd", "datasmcolmugpy")))
                                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                    .withReferenceName("wzxeygzvtyevjhu")
                                    .withDatasetParameters("dataobguqisqsqk")
                                    .withParameters(mapOf("nmlvi", "dataioyj", "yrx", "datacpszpmcvqdvrdmv"))
                                    .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference().withReferenceName("qlcoqksyiibhyx")
                                        .withParameters(
                                            mapOf("avqdorbccqcd", "databu", "wrdtnagzlgpy", "datathojvlirknucos")))
                                .withRejectedDataLinkedService(
                                    new LinkedServiceReference().withReferenceName("xihzqjjts")
                                        .withParameters(mapOf("acybdueurgmcdcpk", "datadqftt", "ermhzicsbfdjhyaa",
                                            "datahlo", "glhphzwx", "datanyukibx")))))
                .withTransformations(Arrays.asList(
                    new Transformation().withName("sxmrszbknimxlp")
                        .withDescription("rxrzutylcur")
                        .withDataset(new DatasetReference().withReferenceName("q")
                            .withParameters(mapOf("jmbnvynf", "dataxqaehtd")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("oeactedcglskakdd")
                            .withParameters(mapOf("duyqypf", "datahzllrqmtlpbyxro", "brjjtalxrdsjr", "datamnoiicsudy",
                                "pjwyblvtbdmvs", "dataoluqwgusxxhdo")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("daelqpv")
                            .withDatasetParameters("datamkwjfbotl")
                            .withParameters(mapOf("ivuxcjkcoqwczs", "datadusxurs", "qtnhjrfd", "dataiqrizfwihvaan"))
                            .withAdditionalProperties(mapOf())),
                    new Transformation().withName("mczfedyuepsvplt")
                        .withDescription("ajjvywe")
                        .withDataset(new DatasetReference().withReferenceName("fkumcfjxoky")
                            .withParameters(mapOf("k", "datayasvf", "jekrknfd", "datamyg", "lcr", "dataugjqyckgtxkrdt",
                                "tcsubmzoo", "datajdkl")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("vo")
                            .withParameters(mapOf("yslb", "datakxfpwh", "yqxridttb", "datalglmnnkkwayqsh",
                                "uylztpziizevjyk", "dataaqjmkgxqwque", "kqtwqlepjjzkcasf", "datafvezefk")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("ntogffjwajnrt")
                            .withDatasetParameters("datavaqkifmxawost")
                            .withParameters(mapOf("hemvwfnqqwypvnd", "datanhrkmjqncfvdsc", "jfkainj",
                                "datawbgodtggrssg", "bgmusaictd", "datauymvecvzts"))
                            .withAdditionalProperties(mapOf()))))
                .withScript("zygba")
                .withScriptLines(Arrays.asList("ecovs", "qhzrtdbak", "limzfvppk"));
        model = BinaryData.fromObject(model).toObject(FlowletTypeProperties.class);
        Assertions.assertEquals("lh", model.sources().get(0).name());
        Assertions.assertEquals("ktltddsobjopnouh", model.sources().get(0).description());
        Assertions.assertEquals("ezkqxsalu", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("unjlzkdrocq", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("igglclwalhvub", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("ohzixyqhfnkvycqq", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("ljekn", model.sinks().get(0).name());
        Assertions.assertEquals("n", model.sinks().get(0).description());
        Assertions.assertEquals("j", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("azbkocbygvthrmxk", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("yacagae", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("ysvlpyeuukppd", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("at", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("sxmrszbknimxlp", model.transformations().get(0).name());
        Assertions.assertEquals("rxrzutylcur", model.transformations().get(0).description());
        Assertions.assertEquals("q", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("oeactedcglskakdd", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("daelqpv", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("zygba", model.script());
        Assertions.assertEquals("ecovs", model.scriptLines().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
