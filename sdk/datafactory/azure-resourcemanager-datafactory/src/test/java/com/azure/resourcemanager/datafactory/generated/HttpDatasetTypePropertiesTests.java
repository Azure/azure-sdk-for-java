// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HttpDatasetTypeProperties;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import java.util.HashMap;
import java.util.Map;

public final class HttpDatasetTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HttpDatasetTypeProperties model =
            BinaryData
                .fromString(
                    "{\"relativeUrl\":\"dataxeyvidcowlrm\",\"requestMethod\":\"datactqxa\",\"requestBody\":\"datajoezvw\",\"additionalHeaders\":\"datayzgavplnd\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"dataiekkiskyyyaekn\",\"deserializer\":\"datafys\",\"\":{\"hoajjylsyqy\":\"datawjlmlcufbbjiutfo\"}},\"compression\":{\"type\":\"dataufzvlqquy\",\"level\":\"dataceevogir\",\"\":{\"dssijuaxxf\":\"datanqtvuxeuj\"}}}")
                .toObject(HttpDatasetTypeProperties.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HttpDatasetTypeProperties model =
            new HttpDatasetTypeProperties()
                .withRelativeUrl("dataxeyvidcowlrm")
                .withRequestMethod("datactqxa")
                .withRequestBody("datajoezvw")
                .withAdditionalHeaders("datayzgavplnd")
                .withFormat(
                    new DatasetStorageFormat()
                        .withSerializer("dataiekkiskyyyaekn")
                        .withDeserializer("datafys")
                        .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
                .withCompression(
                    new DatasetCompression()
                        .withType("dataufzvlqquy")
                        .withLevel("dataceevogir")
                        .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(HttpDatasetTypeProperties.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
