// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AmazonRdsForOracleTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AmazonRdsForOracleTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AmazonRdsForOracleTableDataset model = BinaryData.fromString(
            "{\"type\":\"AmazonRdsForOracleTable\",\"typeProperties\":{\"schema\":\"datawcjomipvw\",\"table\":\"dataujttwykoxvbw\"},\"description\":\"xxdplrelfkvga\",\"structure\":\"databtuxlbpxrhrfje\",\"schema\":\"dataazwef\",\"linkedServiceName\":{\"referenceName\":\"ktlhqash\",\"parameters\":{\"tacfvvtdpcbp\":\"datatjixyzsecigzzdw\",\"brhfiwltkfysunte\":\"datafomcsau\",\"whcv\":\"datahkl\",\"xyxxhwr\":\"datasyyhgqokjbmsrk\"}},\"parameters\":{\"ozsxagyso\":{\"type\":\"Float\",\"defaultValue\":\"dataqsyilpzzbrwnr\"},\"vrrbnhy\":{\"type\":\"Int\",\"defaultValue\":\"dataiksy\"},\"dyllm\":{\"type\":\"Float\",\"defaultValue\":\"datahujc\"}},\"annotations\":[\"datastizsyqag\",\"datallcbrva\",\"datadylkyhtr\",\"dataqwfyybptmjjr\"],\"folder\":{\"name\":\"ykugdla\"},\"\":{\"kbzbfbxjb\":\"datavgthkslgeuu\",\"sazdjmofsvpz\":\"dataajybdnbycsbto\",\"mlfjymgw\":\"datagnywxu\"}}")
            .toObject(AmazonRdsForOracleTableDataset.class);
        Assertions.assertEquals("xxdplrelfkvga", model.description());
        Assertions.assertEquals("ktlhqash", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("ozsxagyso").type());
        Assertions.assertEquals("ykugdla", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AmazonRdsForOracleTableDataset model = new AmazonRdsForOracleTableDataset().withDescription("xxdplrelfkvga")
            .withStructure("databtuxlbpxrhrfje")
            .withSchema("dataazwef")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ktlhqash")
                .withParameters(mapOf("tacfvvtdpcbp", "datatjixyzsecigzzdw", "brhfiwltkfysunte", "datafomcsau", "whcv",
                    "datahkl", "xyxxhwr", "datasyyhgqokjbmsrk")))
            .withParameters(mapOf("ozsxagyso",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataqsyilpzzbrwnr"),
                "vrrbnhy", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataiksy"),
                "dyllm", new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datahujc")))
            .withAnnotations(Arrays.asList("datastizsyqag", "datallcbrva", "datadylkyhtr", "dataqwfyybptmjjr"))
            .withFolder(new DatasetFolder().withName("ykugdla"))
            .withSchemaTypePropertiesSchema("datawcjomipvw")
            .withTable("dataujttwykoxvbw");
        model = BinaryData.fromObject(model).toObject(AmazonRdsForOracleTableDataset.class);
        Assertions.assertEquals("xxdplrelfkvga", model.description());
        Assertions.assertEquals("ktlhqash", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("ozsxagyso").type());
        Assertions.assertEquals("ykugdla", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
