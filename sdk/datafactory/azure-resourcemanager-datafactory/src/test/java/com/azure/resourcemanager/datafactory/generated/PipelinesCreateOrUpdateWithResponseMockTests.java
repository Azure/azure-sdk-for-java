// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineElapsedTimeMetricPolicy;
import com.azure.resourcemanager.datafactory.models.PipelineFolder;
import com.azure.resourcemanager.datafactory.models.PipelinePolicy;
import com.azure.resourcemanager.datafactory.models.PipelineResource;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.VariableSpecification;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PipelinesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"description\":\"howvnzwhypjpy\",\"activities\":[{\"type\":\"Activity\",\"name\":\"ptjpsbdche\",\"description\":\"c\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"szdwwkgbzmcprtan\",\"dependencyConditions\":[]},{\"activity\":\"gehbrhwkaatjsseb\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"sjlilpicc\",\"value\":\"dataegtwstqgcjvklnrz\"},{\"name\":\"afxoyddushvyj\",\"value\":\"datahy\"}],\"\":{\"dwbnou\":\"dataxzdw\",\"m\":\"datayznyeghm\"}},{\"type\":\"Activity\",\"name\":\"xdnckgdcszz\",\"description\":\"dfdzleazvldeqmf\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"wseftljzqfpfkd\",\"dependencyConditions\":[]},{\"activity\":\"bezaxi\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"pjxtobeq\",\"value\":\"datazcadoqijfll\"},{\"name\":\"muzeolcgqjtvpalk\",\"value\":\"datawvg\"}],\"\":{\"jpauic\":\"datatdswjtuqw\",\"ugebqhbbqody\":\"datajae\",\"aa\":\"datavpcoi\"}},{\"type\":\"Activity\",\"name\":\"vaecwwdqgooabhfr\",\"description\":\"p\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"fevwcxzxvgf\",\"dependencyConditions\":[]},{\"activity\":\"zc\",\"dependencyConditions\":[]},{\"activity\":\"qwqujpug\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"alhwbypvpds\",\"value\":\"dataycjuxabpuphg\"}],\"\":{\"gzwtl\":\"dataggkkjcizrstannmj\",\"parpsrjsghuokjwv\":\"datapzshgsidkz\",\"klyvzske\":\"dataacwdukhzu\"}},{\"type\":\"Activity\",\"name\":\"eva\",\"description\":\"brdrtjak\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"yzqhbuuldztv\",\"dependencyConditions\":[]},{\"activity\":\"mvxkrxgaiddg\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"hiqwuwxrcydmkyo\",\"value\":\"datajc\"},{\"name\":\"sbygm\",\"value\":\"datanxeyfkrcmxtbwolz\"},{\"name\":\"kjaqlszlymyqpw\",\"value\":\"databuwqmicukwmz\"},{\"name\":\"hcvrfq\",\"value\":\"datambuvtiwrmcym\"}],\"\":{\"dgtkedvxhqhp\":\"datakkaztu\",\"spafurttshruj\":\"datan\",\"mr\":\"datayxal\",\"apzingxbkcirio\":\"dataiina\"}}],\"parameters\":{\"hwiezcfxzjdpl\":{\"type\":\"Float\",\"defaultValue\":\"datauvg\"},\"qnftdl\":{\"type\":\"Float\",\"defaultValue\":\"datao\"}},\"variables\":{\"ffymrzoupipdkgpt\":{\"type\":\"String\",\"defaultValue\":\"datavlgahpztvl\"},\"zrbqpzgsr\":{\"type\":\"Array\",\"defaultValue\":\"datamscrtpznychw\"},\"nvwaxmeyjimf\":{\"type\":\"Array\",\"defaultValue\":\"datafyffytw\"},\"wufuvtypvwfllri\":{\"type\":\"String\",\"defaultValue\":\"datacqvuqwzajdxmai\"}},\"concurrency\":2036809837,\"annotations\":[\"datacgnphengk\",\"datahkekxohqvqp\",\"datazoqtvmkj\"],\"runDimensions\":{\"yvbyagqipr\":\"datalakvhgefvpc\",\"ijkwzjlk\":\"dataqdtcibb\",\"timtf\":\"datamoexughztr\"},\"folder\":{\"name\":\"lq\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"datangfcbldpeforx\"}}},\"name\":\"pmzkdisrgykrcj\",\"type\":\"ivnfdovwkjeguvi\",\"etag\":\"xii\",\"\":{\"oylpmeccbblg\":\"datahfrb\",\"xcrxuyorhrtihzw\":\"datalej\"},\"id\":\"flwlmh\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DataFactoryManager manager = DataFactoryManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PipelineResource response = manager.pipelines().define("ger").withExistingFactory("mkoxpay", "zqgsaegaah")
            .withDescription("hgrgiu")
            .withActivities(Arrays.asList(
                new Activity().withName("ykvo").withDescription("jixbrdamdnebko").withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("aihepjscseu")
                        .withDependencyConditions(Arrays.asList()).withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("ohspvbwjmt").withValue("dataavue")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("yotejljdrerzjwex").withDescription("r").withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("ddcxfuizo").withDependencyConditions(Arrays.asList())
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("zme").withDependencyConditions(Arrays.asList())
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("cjsneybpqot").withDependencyConditions(Arrays.asList())
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("db").withDependencyConditions(Arrays.asList())
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("s").withValue("datadvuptret"),
                        new UserProperty().withName("auupwt").withValue("datatpbi"),
                        new UserProperty().withName("ab").withValue("dataegcogyctekaaju"),
                        new UserProperty().withName("kxbgfed").withValue("datacbjsyorsojv")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("s").withDescription("ikbtz").withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("xarqtkzeopoxd")
                        .withDependencyConditions(Arrays.asList()).withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("pn").withValue("datatzbswf")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("predcl").withDescription("lvuzqsv").withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("a")
                        .withDependencyConditions(Arrays.asList()).withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("ymdrbmffcryy").withValue("datakwwhscubgwz"),
                            new UserProperty().withName("anplzbzcgzhd").withValue("datavk"),
                            new UserProperty().withName("zvhfog").withValue("dataoocnseoq")))
                    .withAdditionalProperties(mapOf("type", "Activity"))))
            .withParameters(mapOf("zguu",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("dataedifwdrr"),
                "dlxqjshyyrcr",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataoohzifbbsncorini"),
                "lt", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataqsfaurmqpkgwf")))
            .withVariables(mapOf("pxsy",
                new VariableSpecification().withType(VariableType.ARRAY).withDefaultValue("datahhxlibdnpeamsl"),
                "aulsmqohvcvv", new VariableSpecification().withType(VariableType.BOOL).withDefaultValue("datafvwrdy")))
            .withConcurrency(1111207450)
            .withAnnotations(Arrays.asList("datagrphoabhkyas", "dataccwievjndvaf", "datacvn", "datayxlcgycvcspcfx"))
            .withRunDimensions(mapOf("afmbxtncxbyurut", "dataqioq", "uv", "dataa", "vgjvumdznblkofd",
                "datauweqbeygnetuvs", "fiwaklflwqdjzb", "datalrtlhpfu"))
            .withFolder(new PipelineFolder().withName("byks"))
            .withPolicy(new PipelinePolicy()
                .withElapsedTimeMetric(new PipelineElapsedTimeMetricPolicy().withDuration("datayprrix")))
            .withIfMatch("ccotgqgevie").create();

        Assertions.assertEquals("flwlmh", response.id());
        Assertions.assertEquals("howvnzwhypjpy", response.description());
        Assertions.assertEquals("ptjpsbdche", response.activities().get(0).name());
        Assertions.assertEquals("c", response.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, response.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, response.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("szdwwkgbzmcprtan", response.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("sjlilpicc", response.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.FLOAT, response.parameters().get("hwiezcfxzjdpl").type());
        Assertions.assertEquals(VariableType.STRING, response.variables().get("ffymrzoupipdkgpt").type());
        Assertions.assertEquals(2036809837, response.concurrency());
        Assertions.assertEquals("lq", response.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
