// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineElapsedTimeMetricPolicy;
import com.azure.resourcemanager.datafactory.models.PipelineFolder;
import com.azure.resourcemanager.datafactory.models.PipelinePolicy;
import com.azure.resourcemanager.datafactory.models.PipelineResource;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.VariableSpecification;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PipelinesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"tsgvtqvagklmgmld\",\"activities\":[{\"type\":\"rpxwpsmniixacyv\",\"name\":\"zlzdzgvfciptypm\",\"description\":\"ldghxwo\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"hem\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"ecwfnscehqkksjb\",\"value\":\"datatbvgfmrtxeij\"},{\"name\":\"qzcf\",\"value\":\"datakmwcwh\"},{\"name\":\"bacwbdxmb\",\"value\":\"dataecfjanfvrrd\"}],\"\":{\"ziadtzezravt\":\"datazyrwztra\",\"qewsyypy\":\"dataarqgakqbswyofx\",\"zxflrcbexxm\":\"datagzqlwbinzcr\"}},{\"type\":\"clapomzqbwh\",\"name\":\"qoh\",\"description\":\"izexzatrzpgld\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"woawbbrvogpr\",\"dependencyConditions\":[]},{\"activity\":\"rwzlbcel\",\"dependencyConditions\":[]},{\"activity\":\"s\",\"dependencyConditions\":[]},{\"activity\":\"qvfcgsw\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"msneg\",\"value\":\"datawomj\"},{\"name\":\"ig\",\"value\":\"datagsozmjshnelmq\"}],\"\":{\"w\":\"datagtlpddfuaw\"}}],\"parameters\":{\"wltyirppsykbxiv\":{\"type\":\"Bool\",\"defaultValue\":\"datajzfwmxdyb\"},\"uaqxrgxmfowex\":{\"type\":\"Bool\",\"defaultValue\":\"databqgoeiaoepczxcc\"}},\"variables\":{\"iw\":{\"type\":\"Array\",\"defaultValue\":\"datadiohshofodorvqvd\"},\"zcsw\":{\"type\":\"Array\",\"defaultValue\":\"dataldnn\"}},\"concurrency\":294111660,\"annotations\":[\"dataecz\"],\"runDimensions\":{\"gntvtraaijyqt\":\"dataoepjqainmr\",\"xba\":\"dataksqbkjuanrwhq\",\"cymeq\":\"datadfzpawvbt\",\"bcrcuqvmmaghaq\":\"datamigo\"},\"folder\":{\"name\":\"iuzzxzgtoycht\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"dataxwdeurn\"}}},\"name\":\"txw\",\"type\":\"xoynkgeiisjzjj\",\"etag\":\"chkjxm\",\"\":{\"dqbb\":\"datav\",\"qsrwhievbxozmd\":\"datarndwa\",\"g\":\"datafcecikqrkbl\",\"axwuyeudzyxfttf\":\"databunwosyvexcqoufs\"},\"id\":\"xluqrzi\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PipelineResource response = manager.pipelines()
            .define("tikkotjhf")
            .withExistingFactory("h", "aakdhzgzwb")
            .withDescription("dvxb")
            .withActivities(Arrays.asList(
                new Activity().withName("shugv")
                    .withDescription("ulydeigungk")
                    .withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("gwccqgdejupuo")
                            .withDependencyConditions(Arrays.asList())
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("pme")
                            .withDependencyConditions(Arrays.asList())
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("if").withValue("datat"),
                        new UserProperty().withName("yzfcybauwfr").withValue("dataznuljodv"),
                        new UserProperty().withName("pttts").withValue("datacpdtgz")))
                    .withAdditionalProperties(mapOf("type", "vmqyplpyyzaoqfs")),
                new Activity().withName("gjsfxiiiqivslpoe")
                    .withDescription("zahfswcbkjqlwfzl")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("qihhos")
                            .withDependencyConditions(Arrays.asList())
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("pebhv")
                            .withDependencyConditions(Arrays.asList())
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("rsihdtphtfo")
                            .withDependencyConditions(Arrays.asList())
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("r").withValue("datapn"),
                        new UserProperty().withName("mg").withValue("datajuvlffgurztd"),
                        new UserProperty().withName("oykqorwyykmlpi").withValue("datas")))
                    .withAdditionalProperties(mapOf("type", "svwrcbmxmbutxtt")),
                new Activity().withName("qmvezcdepikul")
                    .withDescription("mygpcobhvbxai")
                    .withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("i")
                        .withDependencyConditions(Arrays.asList())
                        .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("dpsfihggkixhz").withValue("datagwxvobhjgexenji"),
                            new UserProperty().withName("kruem").withValue("datahegshyzifn"),
                            new UserProperty().withName("qgwfulqfvzegxd").withValue("datakxxdymc"),
                            new UserProperty().withName("cuze").withValue("dataaq")))
                    .withAdditionalProperties(mapOf("type", "opksetkfc"))))
            .withParameters(mapOf("trinajirigjfaqz",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataxv"),
                "mkdqmfwzkullgkxw",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datalkpp"),
                "zbgwhwxlrlsdq",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataqhzqzr"), "trp",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataxsbyoogn")))
            .withVariables(mapOf("yboldmpzwcf",
                new VariableSpecification().withType(VariableType.BOOL).withDefaultValue("datai"), "mfggiryrzjatfvq",
                new VariableSpecification().withType(VariableType.BOOL).withDefaultValue("datartbuzlgkevp"), "utqy",
                new VariableSpecification().withType(VariableType.BOOL).withDefaultValue("databpcsgfswgfdq"), "zsvpfj",
                new VariableSpecification().withType(VariableType.BOOL).withDefaultValue("dataepogosktphc")))
            .withConcurrency(1513478816)
            .withAnnotations(Arrays.asList("dataifrpj", "datakzvwdtylu", "datatvwwhufdoomhxl"))
            .withRunDimensions(mapOf("xzw", "datajtpwdec"))
            .withFolder(new PipelineFolder().withName("caq"))
            .withPolicy(new PipelinePolicy()
                .withElapsedTimeMetric(new PipelineElapsedTimeMetricPolicy().withDuration("datazdzackskuec")))
            .withIfMatch("jzs")
            .create();

        Assertions.assertEquals("xluqrzi", response.id());
        Assertions.assertEquals("tsgvtqvagklmgmld", response.description());
        Assertions.assertEquals("zlzdzgvfciptypm", response.activities().get(0).name());
        Assertions.assertEquals("ldghxwo", response.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, response.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, response.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("hem", response.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("ecwfnscehqkksjb", response.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.BOOL, response.parameters().get("wltyirppsykbxiv").type());
        Assertions.assertEquals(VariableType.ARRAY, response.variables().get("iw").type());
        Assertions.assertEquals(294111660, response.concurrency());
        Assertions.assertEquals("iuzzxzgtoycht", response.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
