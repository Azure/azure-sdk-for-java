// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.SnowflakeExportCopyCommand;
import com.azure.resourcemanager.datafactory.models.SnowflakeSource;
import java.util.HashMap;
import java.util.Map;

public final class SnowflakeSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeSource model = BinaryData.fromString(
            "{\"type\":\"SnowflakeSource\",\"query\":\"dataxsgwdxoxjlvvvzp\",\"exportSettings\":{\"type\":\"SnowflakeExportCopyCommand\",\"additionalCopyOptions\":{\"mb\":\"datayintgkveogeld\",\"iwuux\":\"datakbiibobkxiujaagf\",\"egm\":\"datawmzmsiv\",\"jptk\":\"datafzbrha\"},\"additionalFormatOptions\":{\"ievcttszca\":\"dataspz\",\"tsdeequovanaglwa\":\"datayxyoyjasqdhbftt\",\"oamqxw\":\"datasfbmbtcefqkuxgyu\",\"objledjxblob\":\"datauslxyt\"},\"\":{\"hzgj\":\"datapdi\",\"rhbql\":\"dataeomctbgoccypx\"}},\"sourceRetryCount\":\"datauflfzawkkzexhbp\",\"sourceRetryWait\":\"dataqfbjpclboiojpjn\",\"maxConcurrentConnections\":\"datawyhxzythxzrvjfsm\",\"disableMetricsCollection\":\"datadhhwfrm\",\"\":{\"ct\":\"datakefdgfexa\",\"mdievkmr\":\"datacpszdnccouuq\",\"mdxcwx\":\"dataohoyiheheimuq\"}}")
            .toObject(SnowflakeSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeSource model = new SnowflakeSource().withSourceRetryCount("datauflfzawkkzexhbp")
            .withSourceRetryWait("dataqfbjpclboiojpjn").withMaxConcurrentConnections("datawyhxzythxzrvjfsm")
            .withDisableMetricsCollection("datadhhwfrm").withQuery("dataxsgwdxoxjlvvvzp")
            .withExportSettings(new SnowflakeExportCopyCommand()
                .withAdditionalCopyOptions(mapOf("mb", "datayintgkveogeld", "iwuux", "datakbiibobkxiujaagf", "egm",
                    "datawmzmsiv", "jptk", "datafzbrha"))
                .withAdditionalFormatOptions(mapOf("ievcttszca", "dataspz", "tsdeequovanaglwa", "datayxyoyjasqdhbftt",
                    "oamqxw", "datasfbmbtcefqkuxgyu", "objledjxblob", "datauslxyt")));
        model = BinaryData.fromObject(model).toObject(SnowflakeSource.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
