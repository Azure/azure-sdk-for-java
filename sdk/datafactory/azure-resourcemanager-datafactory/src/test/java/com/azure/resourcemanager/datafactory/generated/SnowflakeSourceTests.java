// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.SnowflakeExportCopyCommand;
import com.azure.resourcemanager.datafactory.models.SnowflakeSource;
import java.util.HashMap;
import java.util.Map;

public final class SnowflakeSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeSource model =
            BinaryData
                .fromString(
                    "{\"type\":\"SnowflakeSource\",\"query\":\"databmahuwxodddqzew\",\"exportSettings\":{\"type\":\"SnowflakeExportCopyCommand\",\"additionalCopyOptions\":{\"s\":\"datatgsocqkdclbzqnao\",\"cbhezau\":\"datamp\"},\"additionalFormatOptions\":{\"aywmcipu\":\"dataysxhfupvqjkqlaf\",\"aifgyxkgqwmp\":\"dataefhhdrm\",\"nkxhc\":\"datahxpcxqc\",\"bxllfwxdou\":\"datadhx\"},\"\":{\"ofhk\":\"datapaqjahjxgedtmz\",\"rfassiii\":\"dataywtacgukierd\",\"ayyxgcgb\":\"datacmrgahs\",\"vqopxun\":\"dataieqonsbukznxd\"}},\"sourceRetryCount\":\"dataxtkmknacnfzcy\",\"sourceRetryWait\":\"datahdjpagwszm\",\"maxConcurrentConnections\":\"datagzfeyexbg\",\"disableMetricsCollection\":\"datayo\",\"\":{\"edxpbpjw\":\"dataigvqgceacqj\",\"baodi\":\"datannvd\"}}")
                .toObject(SnowflakeSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeSource model =
            new SnowflakeSource()
                .withSourceRetryCount("dataxtkmknacnfzcy")
                .withSourceRetryWait("datahdjpagwszm")
                .withMaxConcurrentConnections("datagzfeyexbg")
                .withDisableMetricsCollection("datayo")
                .withQuery("databmahuwxodddqzew")
                .withExportSettings(
                    new SnowflakeExportCopyCommand()
                        .withAdditionalCopyOptions(mapOf("s", "datatgsocqkdclbzqnao", "cbhezau", "datamp"))
                        .withAdditionalFormatOptions(
                            mapOf(
                                "aywmcipu",
                                "dataysxhfupvqjkqlaf",
                                "aifgyxkgqwmp",
                                "dataefhhdrm",
                                "nkxhc",
                                "datahxpcxqc",
                                "bxllfwxdou",
                                "datadhx")));
        model = BinaryData.fromObject(model).toObject(SnowflakeSource.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
