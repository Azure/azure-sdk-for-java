// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MapperConnection;
import com.azure.resourcemanager.datafactory.models.MapperDslConnectorProperties;
import com.azure.resourcemanager.datafactory.models.MapperSourceConnectionsInfo;
import com.azure.resourcemanager.datafactory.models.MapperTable;
import com.azure.resourcemanager.datafactory.models.MapperTableSchema;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MapperSourceConnectionsInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MapperSourceConnectionsInfo model =
            BinaryData
                .fromString(
                    "{\"sourceEntities\":[{\"name\":\"epmywbormcqm\",\"properties\":{\"schema\":[{\"name\":\"qpkzfbojxjmcsmy\",\"dataType\":\"ixvcpwnkwywzwo\"},{\"name\":\"lickduoi\",\"dataType\":\"amt\"},{\"name\":\"sknxrwzawnvsbcf\",\"dataType\":\"agxnvhycvdimw\"},{\"name\":\"regzgyufutrwpwer\",\"dataType\":\"kzkdhmeott\"}],\"dslConnectorProperties\":[{\"name\":\"osxw\",\"value\":\"datanhjtf\"},{\"name\":\"n\",\"value\":\"datamiljpnwynud\"}]}}],\"connection\":{\"linkedService\":{\"referenceName\":\"zsauzp\",\"parameters\":{\"ezxlskihm\":\"dataeehuxiqhzlray\"}},\"linkedServiceType\":\"fdsajred\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{\"name\":\"uwg\",\"value\":\"datavuafpwzyifr\"},{\"name\":\"wltxeqipxgzdyims\",\"value\":\"datayorpr\"}]}}")
                .toObject(MapperSourceConnectionsInfo.class);
        Assertions.assertEquals("epmywbormcqm", model.sourceEntities().get(0).name());
        Assertions.assertEquals("qpkzfbojxjmcsmy", model.sourceEntities().get(0).schema().get(0).name());
        Assertions.assertEquals("ixvcpwnkwywzwo", model.sourceEntities().get(0).schema().get(0).dataType());
        Assertions.assertEquals("osxw", model.sourceEntities().get(0).dslConnectorProperties().get(0).name());
        Assertions.assertEquals("zsauzp", model.connection().linkedService().referenceName());
        Assertions.assertEquals("fdsajred", model.connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE, model.connection().type());
        Assertions.assertEquals(true, model.connection().isInlineDataset());
        Assertions.assertEquals("uwg", model.connection().commonDslConnectorProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MapperSourceConnectionsInfo model =
            new MapperSourceConnectionsInfo()
                .withSourceEntities(
                    Arrays
                        .asList(
                            new MapperTable()
                                .withName("epmywbormcqm")
                                .withSchema(
                                    Arrays
                                        .asList(
                                            new MapperTableSchema()
                                                .withName("qpkzfbojxjmcsmy")
                                                .withDataType("ixvcpwnkwywzwo"),
                                            new MapperTableSchema().withName("lickduoi").withDataType("amt"),
                                            new MapperTableSchema()
                                                .withName("sknxrwzawnvsbcf")
                                                .withDataType("agxnvhycvdimw"),
                                            new MapperTableSchema()
                                                .withName("regzgyufutrwpwer")
                                                .withDataType("kzkdhmeott")))
                                .withDslConnectorProperties(
                                    Arrays
                                        .asList(
                                            new MapperDslConnectorProperties().withName("osxw").withValue("datanhjtf"),
                                            new MapperDslConnectorProperties()
                                                .withName("n")
                                                .withValue("datamiljpnwynud")))))
                .withConnection(
                    new MapperConnection()
                        .withLinkedService(
                            new LinkedServiceReference()
                                .withReferenceName("zsauzp")
                                .withParameters(mapOf("ezxlskihm", "dataeehuxiqhzlray")))
                        .withLinkedServiceType("fdsajred")
                        .withType(ConnectionType.LINKEDSERVICETYPE)
                        .withIsInlineDataset(true)
                        .withCommonDslConnectorProperties(
                            Arrays
                                .asList(
                                    new MapperDslConnectorProperties().withName("uwg").withValue("datavuafpwzyifr"),
                                    new MapperDslConnectorProperties()
                                        .withName("wltxeqipxgzdyims")
                                        .withValue("datayorpr"))));
        model = BinaryData.fromObject(model).toObject(MapperSourceConnectionsInfo.class);
        Assertions.assertEquals("epmywbormcqm", model.sourceEntities().get(0).name());
        Assertions.assertEquals("qpkzfbojxjmcsmy", model.sourceEntities().get(0).schema().get(0).name());
        Assertions.assertEquals("ixvcpwnkwywzwo", model.sourceEntities().get(0).schema().get(0).dataType());
        Assertions.assertEquals("osxw", model.sourceEntities().get(0).dslConnectorProperties().get(0).name());
        Assertions.assertEquals("zsauzp", model.connection().linkedService().referenceName());
        Assertions.assertEquals("fdsajred", model.connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE, model.connection().type());
        Assertions.assertEquals(true, model.connection().isInlineDataset());
        Assertions.assertEquals("uwg", model.connection().commonDslConnectorProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
