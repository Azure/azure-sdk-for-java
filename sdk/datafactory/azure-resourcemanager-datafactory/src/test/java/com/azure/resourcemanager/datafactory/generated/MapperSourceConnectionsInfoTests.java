// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MapperConnection;
import com.azure.resourcemanager.datafactory.models.MapperDslConnectorProperties;
import com.azure.resourcemanager.datafactory.models.MapperSourceConnectionsInfo;
import com.azure.resourcemanager.datafactory.models.MapperTable;
import com.azure.resourcemanager.datafactory.models.MapperTableSchema;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MapperSourceConnectionsInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MapperSourceConnectionsInfo model = BinaryData.fromString(
            "{\"sourceEntities\":[{\"name\":\"gvmxnok\",\"properties\":{\"schema\":[{\"name\":\"bse\",\"dataType\":\"vcuartrhun\"},{\"name\":\"iryky\",\"dataType\":\"dzfqivjreuy\"}],\"dslConnectorProperties\":[{\"name\":\"nwagl\",\"value\":\"dataxoe\"},{\"name\":\"nqlnfwmyymvqd\",\"value\":\"databhfckdvezcrcssb\"}]}}],\"connection\":{\"linkedService\":{\"referenceName\":\"dubbnqfblhkale\",\"parameters\":{\"iqjtiogqgdmin\":\"datavawu\",\"gspnbonhpczykm\":\"datactteajohi\",\"wxqcsehchkhufmpq\":\"datatp\"}},\"linkedServiceType\":\"q\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{\"name\":\"lod\",\"value\":\"dataeuzanhs\"}]}}")
            .toObject(MapperSourceConnectionsInfo.class);
        Assertions.assertEquals("gvmxnok", model.sourceEntities().get(0).name());
        Assertions.assertEquals("bse", model.sourceEntities().get(0).schema().get(0).name());
        Assertions.assertEquals("vcuartrhun", model.sourceEntities().get(0).schema().get(0).dataType());
        Assertions.assertEquals("nwagl", model.sourceEntities().get(0).dslConnectorProperties().get(0).name());
        Assertions.assertEquals("dubbnqfblhkale", model.connection().linkedService().referenceName());
        Assertions.assertEquals("q", model.connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE, model.connection().type());
        Assertions.assertEquals(true, model.connection().isInlineDataset());
        Assertions.assertEquals("lod", model.connection().commonDslConnectorProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MapperSourceConnectionsInfo model = new MapperSourceConnectionsInfo()
            .withSourceEntities(Arrays.asList(new MapperTable().withName("gvmxnok")
                .withSchema(Arrays.asList(new MapperTableSchema().withName("bse").withDataType("vcuartrhun"),
                    new MapperTableSchema().withName("iryky").withDataType("dzfqivjreuy")))
                .withDslConnectorProperties(
                    Arrays.asList(new MapperDslConnectorProperties().withName("nwagl").withValue("dataxoe"),
                        new MapperDslConnectorProperties().withName("nqlnfwmyymvqd")
                            .withValue("databhfckdvezcrcssb")))))
            .withConnection(new MapperConnection()
                .withLinkedService(new LinkedServiceReference().withReferenceName("dubbnqfblhkale")
                    .withParameters(mapOf("iqjtiogqgdmin", "datavawu", "gspnbonhpczykm", "datactteajohi",
                        "wxqcsehchkhufmpq", "datatp")))
                .withLinkedServiceType("q")
                .withType(ConnectionType.LINKEDSERVICETYPE)
                .withIsInlineDataset(true)
                .withCommonDslConnectorProperties(
                    Arrays.asList(new MapperDslConnectorProperties().withName("lod").withValue("dataeuzanhs"))));
        model = BinaryData.fromObject(model).toObject(MapperSourceConnectionsInfo.class);
        Assertions.assertEquals("gvmxnok", model.sourceEntities().get(0).name());
        Assertions.assertEquals("bse", model.sourceEntities().get(0).schema().get(0).name());
        Assertions.assertEquals("vcuartrhun", model.sourceEntities().get(0).schema().get(0).dataType());
        Assertions.assertEquals("nwagl", model.sourceEntities().get(0).dslConnectorProperties().get(0).name());
        Assertions.assertEquals("dubbnqfblhkale", model.connection().linkedService().referenceName());
        Assertions.assertEquals("q", model.connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE, model.connection().type());
        Assertions.assertEquals(true, model.connection().isInlineDataset());
        Assertions.assertEquals("lod", model.connection().commonDslConnectorProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
