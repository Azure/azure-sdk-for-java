// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecuteDataFlowActivity;
import com.azure.resourcemanager.datafactory.models.ExecuteDataFlowActivityTypePropertiesCompute;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecuteDataFlowActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecuteDataFlowActivity model = BinaryData.fromString(
            "{\"type\":\"ExecuteDataFlow\",\"typeProperties\":{\"dataFlow\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ksoxykrma\",\"datasetParameters\":\"datanlbvahjlvbnlxebg\",\"parameters\":{\"yy\":\"datapsged\",\"zffzhbhelg\":\"dataueifmtgntlfdiqzv\",\"y\":\"datalrdgpudbimehdx\",\"ut\":\"datayfhwkbhapfnyo\"},\"\":{\"gzunbcvfz\":\"datahjrmfejeihnh\",\"afrqqfgudobutkq\":\"datapyirngfujv\"}},\"staging\":{\"linkedService\":{\"referenceName\":\"xxcaxgraiki\",\"parameters\":{\"asbfcblvakhdi\":\"datadnchrvsfnlgwp\"}},\"folderPath\":\"dataxtfvoasdhdii\"},\"integrationRuntime\":{\"referenceName\":\"znffmxtmqartpdyh\",\"parameters\":{\"fjcowrzqyoc\":\"dataxmrhxpmtztvxfgli\"}},\"compute\":{\"computeType\":\"datagrtnitaampg\",\"coreCount\":\"datayvpxpcjnb\"},\"traceLevel\":\"datafexzzijtctfew\",\"continueOnError\":\"datawtzp\",\"runConcurrently\":\"datayluvqp\",\"sourceStagingConcurrency\":\"datavoyqs\"},\"linkedServiceName\":{\"referenceName\":\"twlxv\",\"parameters\":{\"sxcqto\":\"dataaldss\"}},\"policy\":{\"timeout\":\"datanxinl\",\"retry\":\"datacc\",\"retryIntervalInSeconds\":999097881,\"secureInput\":false,\"secureOutput\":false,\"\":{\"wybbda\":\"datafxnenhyhdusaykrj\"}},\"name\":\"dqttzslt\",\"description\":\"mdacetjmap\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"jxdirdcxuiamr\",\"dependencyConditions\":[\"Succeeded\",\"Failed\"],\"\":{\"yivvtx\":\"datacqofpwjjtdz\",\"o\":\"datapem\",\"jdihtxvmnyslpdqd\":\"datatohzfvysvud\"}},{\"activity\":\"zjpp\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"vyyasildbq\":\"datavtymzdtnjxv\",\"mqpjbkb\":\"datagnfxgzzqqwsvj\"}},{\"activity\":\"sugkdvmgpeitfbgy\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Succeeded\"],\"\":{\"ookhcu\":\"datadsgfztmhvuoavp\",\"sutseejtfnjrrxf\":\"datawgbjzznmjwqwyhh\"}},{\"activity\":\"uywzpcx\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Skipped\",\"Succeeded\"],\"\":{\"h\":\"datalowm\",\"tceehqeahlfujp\":\"datauhywdckvcof\",\"uumldunalo\":\"datavtakijwkwed\"}}],\"userProperties\":[{\"name\":\"ikfqcbe\",\"value\":\"datansszu\"},{\"name\":\"dvhqecqqiulwfz\",\"value\":\"dataszgbgtwaquiuzsn\"},{\"name\":\"jgnmpu\",\"value\":\"datasjfvdajmczlvcxm\"}],\"\":{\"tbgkx\":\"databrp\",\"lszcwomayr\":\"dataxwjzleeup\",\"dfxnxtiwi\":\"dataatrjpa\",\"ihsgt\":\"datanho\"}}")
            .toObject(ExecuteDataFlowActivity.class);
        Assertions.assertEquals("dqttzslt", model.name());
        Assertions.assertEquals("mdacetjmap", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("jxdirdcxuiamr", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ikfqcbe", model.userProperties().get(0).name());
        Assertions.assertEquals("twlxv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(999097881, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("ksoxykrma", model.dataFlow().referenceName());
        Assertions.assertEquals("xxcaxgraiki", model.staging().linkedService().referenceName());
        Assertions.assertEquals("znffmxtmqartpdyh", model.integrationRuntime().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecuteDataFlowActivity model
            = new ExecuteDataFlowActivity().withName("dqttzslt").withDescription("mdacetjmap")
                .withState(ActivityState.INACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("jxdirdcxuiamr")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency()
                        .withActivity("zjpp").withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("sugkdvmgpeitfbgy")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                            DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("uywzpcx")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                            DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("ikfqcbe").withValue("datansszu"),
                    new UserProperty().withName("dvhqecqqiulwfz").withValue("dataszgbgtwaquiuzsn"),
                    new UserProperty().withName("jgnmpu").withValue("datasjfvdajmczlvcxm")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("twlxv")
                    .withParameters(mapOf("sxcqto", "dataaldss")))
                .withPolicy(new ActivityPolicy().withTimeout("datanxinl").withRetry("datacc")
                    .withRetryIntervalInSeconds(999097881).withSecureInput(false).withSecureOutput(false)
                    .withAdditionalProperties(mapOf()))
                .withDataFlow(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                    .withReferenceName("ksoxykrma").withDatasetParameters("datanlbvahjlvbnlxebg")
                    .withParameters(mapOf("yy", "datapsged", "zffzhbhelg", "dataueifmtgntlfdiqzv", "y",
                        "datalrdgpudbimehdx", "ut", "datayfhwkbhapfnyo"))
                    .withAdditionalProperties(mapOf()))
                .withStaging(new DataFlowStagingInfo()
                    .withLinkedService(new LinkedServiceReference().withReferenceName("xxcaxgraiki")
                        .withParameters(mapOf("asbfcblvakhdi", "datadnchrvsfnlgwp")))
                    .withFolderPath("dataxtfvoasdhdii"))
                .withIntegrationRuntime(new IntegrationRuntimeReference().withReferenceName("znffmxtmqartpdyh")
                    .withParameters(mapOf("fjcowrzqyoc", "dataxmrhxpmtztvxfgli")))
                .withCompute(new ExecuteDataFlowActivityTypePropertiesCompute().withComputeType("datagrtnitaampg")
                    .withCoreCount("datayvpxpcjnb"))
                .withTraceLevel("datafexzzijtctfew").withContinueOnError("datawtzp").withRunConcurrently("datayluvqp")
                .withSourceStagingConcurrency("datavoyqs");
        model = BinaryData.fromObject(model).toObject(ExecuteDataFlowActivity.class);
        Assertions.assertEquals("dqttzslt", model.name());
        Assertions.assertEquals("mdacetjmap", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("jxdirdcxuiamr", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ikfqcbe", model.userProperties().get(0).name());
        Assertions.assertEquals("twlxv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(999097881, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("ksoxykrma", model.dataFlow().referenceName());
        Assertions.assertEquals("xxcaxgraiki", model.staging().linkedService().referenceName());
        Assertions.assertEquals("znffmxtmqartpdyh", model.integrationRuntime().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
