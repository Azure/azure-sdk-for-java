// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecuteDataFlowActivity;
import com.azure.resourcemanager.datafactory.models.ExecuteDataFlowActivityTypePropertiesCompute;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecuteDataFlowActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecuteDataFlowActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"ExecuteDataFlow\",\"typeProperties\":{\"dataFlow\":{\"type\":\"DataFlowReference\",\"referenceName\":\"pidb\",\"datasetParameters\":\"dataviplcowbxpvmnd\",\"parameters\":{\"dono\":\"datacgq\",\"whvqkeuiy\":\"dataw\",\"pvusigw\":\"dataeaahnkntldddk\"},\"\":{\"oodqnouwxkeqlbm\":\"datanxrrjihgigcozk\",\"udfixhxl\":\"dataoyapxnq\"}},\"staging\":{\"linkedService\":{\"referenceName\":\"qhtgtadtootkgxx\",\"parameters\":{\"petwgtmpytom\":\"datanlqwxskltz\",\"g\":\"datatubhvb\",\"zdazxfz\":\"datavpyjpaih\",\"sjnlekotqhd\":\"datallihwpsrdaoixgqt\"}},\"folderPath\":\"dataxknchyoimtfkjcdj\"},\"integrationRuntime\":{\"referenceName\":\"xe\",\"parameters\":{\"cxuntghwcb\":\"datav\",\"yfcbcakcq\":\"dataclg\",\"xbo\":\"datahwzeukumln\",\"ywzgvcmui\":\"datavgwa\"}},\"compute\":{\"computeType\":\"datajsznxze\",\"coreCount\":\"datanqmxirsp\"},\"traceLevel\":\"dataakrbew\",\"continueOnError\":\"datais\",\"runConcurrently\":\"databourw\",\"sourceStagingConcurrency\":\"datansdluq\"},\"linkedServiceName\":{\"referenceName\":\"xgmzyqftlafeco\",\"parameters\":{\"ynusqzai\":\"datax\",\"w\":\"dataz\",\"kwbwxcjf\":\"datay\",\"weguqzlmhpuqlsd\":\"datauzw\"}},\"policy\":{\"timeout\":\"datajxlzyyylyxujqp\",\"retry\":\"datapvychobshogja\",\"retryIntervalInSeconds\":1088491927,\"secureInput\":true,\"secureOutput\":false,\"\":{\"ujtnnd\":\"datafrwym\",\"yc\":\"datas\"}},\"name\":\"pljyt\",\"description\":\"btijybpfwg\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"xh\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Completed\"],\"\":{\"burrevuz\":\"datafaqgzakisipjgvm\"}},{\"activity\":\"xuubwjopkldubqfb\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Succeeded\",\"Skipped\"],\"\":{\"tnm\":\"dataydgnxsgy\"}},{\"activity\":\"lankosd\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Skipped\"],\"\":{\"ybdivxvxw\":\"dataefkhki\",\"czco\":\"datafmqzndlgqtuq\"}},{\"activity\":\"ctcwtxa\",\"dependencyConditions\":[\"Failed\"],\"\":{\"rzsninkhbm\":\"datahmsdod\",\"yt\":\"datalfo\"}}],\"userProperties\":[{\"name\":\"hzxmcpsep\",\"value\":\"datardgerqzxkpxr\"}],\"\":{\"jmel\":\"dataqhhmndbbpjdg\"}}")
                .toObject(ExecuteDataFlowActivity.class);
        Assertions.assertEquals("pljyt", model.name());
        Assertions.assertEquals("btijybpfwg", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("xh", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hzxmcpsep", model.userProperties().get(0).name());
        Assertions.assertEquals("xgmzyqftlafeco", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1088491927, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("pidb", model.dataFlow().referenceName());
        Assertions.assertEquals("qhtgtadtootkgxx", model.staging().linkedService().referenceName());
        Assertions.assertEquals("xe", model.integrationRuntime().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecuteDataFlowActivity model =
            new ExecuteDataFlowActivity()
                .withName("pljyt")
                .withDescription("btijybpfwg")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("xh")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.FAILED,
                                            DependencyCondition.FAILED,
                                            DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("xuubwjopkldubqfb")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("lankosd")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("ctcwtxa")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays.asList(new UserProperty().withName("hzxmcpsep").withValue("datardgerqzxkpxr")))
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("xgmzyqftlafeco")
                        .withParameters(
                            mapOf(
                                "ynusqzai", "datax", "w", "dataz", "kwbwxcjf", "datay", "weguqzlmhpuqlsd", "datauzw")))
                .withPolicy(
                    new ActivityPolicy()
                        .withTimeout("datajxlzyyylyxujqp")
                        .withRetry("datapvychobshogja")
                        .withRetryIntervalInSeconds(1088491927)
                        .withSecureInput(true)
                        .withSecureOutput(false)
                        .withAdditionalProperties(mapOf()))
                .withDataFlow(
                    new DataFlowReference()
                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("pidb")
                        .withDatasetParameters("dataviplcowbxpvmnd")
                        .withParameters(mapOf("dono", "datacgq", "whvqkeuiy", "dataw", "pvusigw", "dataeaahnkntldddk"))
                        .withAdditionalProperties(mapOf()))
                .withStaging(
                    new DataFlowStagingInfo()
                        .withLinkedService(
                            new LinkedServiceReference()
                                .withReferenceName("qhtgtadtootkgxx")
                                .withParameters(
                                    mapOf(
                                        "petwgtmpytom",
                                        "datanlqwxskltz",
                                        "g",
                                        "datatubhvb",
                                        "zdazxfz",
                                        "datavpyjpaih",
                                        "sjnlekotqhd",
                                        "datallihwpsrdaoixgqt")))
                        .withFolderPath("dataxknchyoimtfkjcdj"))
                .withIntegrationRuntime(
                    new IntegrationRuntimeReference()
                        .withReferenceName("xe")
                        .withParameters(
                            mapOf(
                                "cxuntghwcb",
                                "datav",
                                "yfcbcakcq",
                                "dataclg",
                                "xbo",
                                "datahwzeukumln",
                                "ywzgvcmui",
                                "datavgwa")))
                .withCompute(
                    new ExecuteDataFlowActivityTypePropertiesCompute()
                        .withComputeType("datajsznxze")
                        .withCoreCount("datanqmxirsp"))
                .withTraceLevel("dataakrbew")
                .withContinueOnError("datais")
                .withRunConcurrently("databourw")
                .withSourceStagingConcurrency("datansdluq");
        model = BinaryData.fromObject(model).toObject(ExecuteDataFlowActivity.class);
        Assertions.assertEquals("pljyt", model.name());
        Assertions.assertEquals("btijybpfwg", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("xh", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hzxmcpsep", model.userProperties().get(0).name());
        Assertions.assertEquals("xgmzyqftlafeco", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1088491927, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("pidb", model.dataFlow().referenceName());
        Assertions.assertEquals("qhtgtadtootkgxx", model.staging().linkedService().referenceName());
        Assertions.assertEquals("xe", model.integrationRuntime().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
