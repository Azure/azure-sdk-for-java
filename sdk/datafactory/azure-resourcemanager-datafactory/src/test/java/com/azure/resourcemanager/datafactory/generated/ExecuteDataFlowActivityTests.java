// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecuteDataFlowActivity;
import com.azure.resourcemanager.datafactory.models.ExecuteDataFlowActivityTypePropertiesCompute;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ExecuteDataFlowActivityTests {
    @Test
    public void testDeserialize() {
        ExecuteDataFlowActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"ExecuteDataFlow\",\"typeProperties\":{\"dataFlow\":{\"type\":\"DataFlowReference\",\"referenceName\":\"unrlshxu\",\"parameters\":{},\"\":{}},\"staging\":{},\"integrationRuntime\":{\"referenceName\":\"oancdrco\",\"parameters\":{}},\"compute\":{}},\"linkedServiceName\":{\"referenceName\":\"kbnlbl\",\"parameters\":{}},\"policy\":{\"retryIntervalInSeconds\":1192184138,\"secureInput\":true,\"secureOutput\":true,\"\":{}},\"name\":\"pzweghlwwbo\",\"description\":\"gfklqiyndve\",\"dependsOn\":[{\"activity\":\"sbfvdstrkzxsgtzn\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Skipped\"],\"\":{}}],\"userProperties\":[{\"name\":\"pimyndnoxax\"},{\"name\":\"rqaqotn\"},{\"name\":\"dxolousdv\"}],\"\":{}}")
                .toObject(ExecuteDataFlowActivity.class);
        Assertions.assertEquals("pzweghlwwbo", model.name());
        Assertions.assertEquals("gfklqiyndve", model.description());
        Assertions.assertEquals("sbfvdstrkzxsgtzn", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("pimyndnoxax", model.userProperties().get(0).name());
        Assertions.assertEquals("kbnlbl", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1192184138, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("unrlshxu", model.dataFlow().referenceName());
        Assertions.assertEquals("oancdrco", model.integrationRuntime().referenceName());
    }

    @Test
    public void testSerialize() {
        ExecuteDataFlowActivity model =
            new ExecuteDataFlowActivity()
                .withName("pzweghlwwbo")
                .withDescription("gfklqiyndve")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("sbfvdstrkzxsgtzn")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("pimyndnoxax"),
                            new UserProperty().withName("rqaqotn"),
                            new UserProperty().withName("dxolousdv")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("kbnlbl").withParameters(mapOf()))
                .withPolicy(
                    new ActivityPolicy()
                        .withRetryIntervalInSeconds(1192184138)
                        .withSecureInput(true)
                        .withSecureOutput(true)
                        .withAdditionalProperties(mapOf()))
                .withDataFlow(
                    new DataFlowReference()
                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("unrlshxu")
                        .withParameters(mapOf())
                        .withAdditionalProperties(mapOf()))
                .withStaging(new DataFlowStagingInfo())
                .withIntegrationRuntime(
                    new IntegrationRuntimeReference().withReferenceName("oancdrco").withParameters(mapOf()))
                .withCompute(new ExecuteDataFlowActivityTypePropertiesCompute());
        model = BinaryData.fromObject(model).toObject(ExecuteDataFlowActivity.class);
        Assertions.assertEquals("pzweghlwwbo", model.name());
        Assertions.assertEquals("gfklqiyndve", model.description());
        Assertions.assertEquals("sbfvdstrkzxsgtzn", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("pimyndnoxax", model.userProperties().get(0).name());
        Assertions.assertEquals("kbnlbl", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1192184138, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("unrlshxu", model.dataFlow().referenceName());
        Assertions.assertEquals("oancdrco", model.integrationRuntime().referenceName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
