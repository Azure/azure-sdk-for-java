// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecuteDataFlowActivity;
import com.azure.resourcemanager.datafactory.models.ExecuteDataFlowActivityTypePropertiesCompute;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecuteDataFlowActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecuteDataFlowActivity model = BinaryData.fromString(
            "{\"type\":\"svdbdllmutwmarfb\",\"typeProperties\":{\"dataFlow\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ezee\",\"datasetParameters\":\"dataligunw\",\"parameters\":{\"wxzxroht\":\"dataucvwz\",\"idspe\":\"datac\",\"cmcqslngmsip\":\"dataxdeaisk\"},\"\":{\"eiyfpfaa\":\"datanmdcotjdcxac\"}},\"staging\":{\"linkedService\":{\"referenceName\":\"phuplfopqgcadnt\",\"parameters\":{\"vfpmezdo\":\"datald\",\"xmvxbaaznuwuwbn\":\"datagcofhinehhirbg\"}},\"folderPath\":\"datacdtxxyzgy\"},\"integrationRuntime\":{\"referenceName\":\"diqpadhrijxu\",\"parameters\":{\"sxlqsfp\":\"datacyllp\"}},\"compute\":{\"computeType\":\"datag\",\"coreCount\":\"databjjde\"},\"traceLevel\":\"dataqunernb\",\"continueOnError\":\"datavcabchdzx\",\"runConcurrently\":\"dataslshwaadc\",\"sourceStagingConcurrency\":\"datamnfavllbskl\"},\"linkedServiceName\":{\"referenceName\":\"ceaxorppzbdva\",\"parameters\":{\"scdoqocdrjguhsjl\":\"datagvqtegknaeclr\"}},\"policy\":{\"timeout\":\"dataedswhb\",\"retry\":\"datajuuboyrf\",\"retryIntervalInSeconds\":2024683073,\"secureInput\":true,\"secureOutput\":false,\"\":{\"kasbda\":\"datazsvzi\"}},\"name\":\"zlpgxsczrdmbebx\",\"description\":\"woklrhcen\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"wvvvapdshkbfwe\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Failed\"],\"\":{\"lwyzdphidhkigslc\":\"datatqnnbxgofip\"}},{\"activity\":\"kzl\",\"dependencyConditions\":[\"Skipped\",\"Failed\"],\"\":{\"axcbfrnttlrumv\":\"datalu\",\"vjpjnnha\":\"dataxbyedca\"}},{\"activity\":\"ednmqxba\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Failed\"],\"\":{\"g\":\"datacp\"}}],\"userProperties\":[{\"name\":\"muqxsocnkjrt\",\"value\":\"dataifxledjpuga\"},{\"name\":\"scvsj\",\"value\":\"datadmnvtpbohzcaaq\"}],\"\":{\"cbnmzshmqnnbbv\":\"dataaqfvplfy\",\"uwx\":\"datasq\",\"fyddrsairxnw\":\"dataqdtvejilqscjxpro\"}}")
            .toObject(ExecuteDataFlowActivity.class);
        Assertions.assertEquals("zlpgxsczrdmbebx", model.name());
        Assertions.assertEquals("woklrhcen", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("wvvvapdshkbfwe", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("muqxsocnkjrt", model.userProperties().get(0).name());
        Assertions.assertEquals("ceaxorppzbdva", model.linkedServiceName().referenceName());
        Assertions.assertEquals(2024683073, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("ezee", model.dataFlow().referenceName());
        Assertions.assertEquals("phuplfopqgcadnt", model.staging().linkedService().referenceName());
        Assertions.assertEquals("diqpadhrijxu", model.integrationRuntime().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecuteDataFlowActivity model = new ExecuteDataFlowActivity().withName("zlpgxsczrdmbebx")
            .withDescription("woklrhcen")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("wvvvapdshkbfwe")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("kzl")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("ednmqxba")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("muqxsocnkjrt").withValue("dataifxledjpuga"),
                new UserProperty().withName("scvsj").withValue("datadmnvtpbohzcaaq")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ceaxorppzbdva")
                .withParameters(mapOf("scdoqocdrjguhsjl", "datagvqtegknaeclr")))
            .withPolicy(new ActivityPolicy().withTimeout("dataedswhb")
                .withRetry("datajuuboyrf")
                .withRetryIntervalInSeconds(2024683073)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withDataFlow(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                .withReferenceName("ezee")
                .withDatasetParameters("dataligunw")
                .withParameters(mapOf("wxzxroht", "dataucvwz", "idspe", "datac", "cmcqslngmsip", "dataxdeaisk"))
                .withAdditionalProperties(mapOf()))
            .withStaging(new DataFlowStagingInfo()
                .withLinkedService(new LinkedServiceReference().withReferenceName("phuplfopqgcadnt")
                    .withParameters(mapOf("vfpmezdo", "datald", "xmvxbaaznuwuwbn", "datagcofhinehhirbg")))
                .withFolderPath("datacdtxxyzgy"))
            .withIntegrationRuntime(new IntegrationRuntimeReference().withReferenceName("diqpadhrijxu")
                .withParameters(mapOf("sxlqsfp", "datacyllp")))
            .withCompute(
                new ExecuteDataFlowActivityTypePropertiesCompute().withComputeType("datag").withCoreCount("databjjde"))
            .withTraceLevel("dataqunernb")
            .withContinueOnError("datavcabchdzx")
            .withRunConcurrently("dataslshwaadc")
            .withSourceStagingConcurrency("datamnfavllbskl");
        model = BinaryData.fromObject(model).toObject(ExecuteDataFlowActivity.class);
        Assertions.assertEquals("zlpgxsczrdmbebx", model.name());
        Assertions.assertEquals("woklrhcen", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("wvvvapdshkbfwe", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("muqxsocnkjrt", model.userProperties().get(0).name());
        Assertions.assertEquals("ceaxorppzbdva", model.linkedServiceName().referenceName());
        Assertions.assertEquals(2024683073, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("ezee", model.dataFlow().referenceName());
        Assertions.assertEquals("phuplfopqgcadnt", model.staging().linkedService().referenceName());
        Assertions.assertEquals("diqpadhrijxu", model.integrationRuntime().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
