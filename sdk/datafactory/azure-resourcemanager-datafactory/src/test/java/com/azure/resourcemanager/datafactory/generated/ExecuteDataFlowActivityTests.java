// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecuteDataFlowActivity;
import com.azure.resourcemanager.datafactory.models.ExecuteDataFlowActivityTypePropertiesCompute;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecuteDataFlowActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecuteDataFlowActivity model = BinaryData.fromString(
            "{\"type\":\"ExecuteDataFlow\",\"typeProperties\":{\"dataFlow\":{\"type\":\"DataFlowReference\",\"referenceName\":\"mxtmedoykekbdwq\",\"datasetParameters\":\"datau\",\"parameters\":{\"uabeisqkot\":\"datarfjzyini\",\"huyavhesqn\":\"datamhryri\",\"teprs\":\"datas\"},\"\":{\"igadpq\":\"dataakcchcnmzvhdu\",\"uyscwvd\":\"datachgvwggylbmfrxof\",\"o\":\"datazfgdxyrpp\",\"tbpaircnupmz\":\"datadohiotgf\"}},\"staging\":{\"linkedService\":{\"referenceName\":\"ziejo\",\"parameters\":{\"sfhjrsx\":\"dataofmmcej\",\"zxokpqnpdlc\":\"datamlx\"}},\"folderPath\":\"datasekdfhnhbkt\"},\"integrationRuntime\":{\"referenceName\":\"eonl\",\"parameters\":{\"dx\":\"datal\",\"b\":\"datatqknze\"}},\"compute\":{\"computeType\":\"datanqneo\",\"coreCount\":\"datacrmng\"},\"traceLevel\":\"datalinlwcxrxduxctoj\",\"continueOnError\":\"datakmdegmivfuylpctl\",\"runConcurrently\":\"dataob\",\"sourceStagingConcurrency\":\"dataabt\"},\"linkedServiceName\":{\"referenceName\":\"kmk\",\"parameters\":{\"vepmhohqxl\":\"dataqktgkofzzsohcae\"}},\"policy\":{\"timeout\":\"datatliwoodndu\",\"retry\":\"dataykyzirgiyqzuh\",\"retryIntervalInSeconds\":228064254,\"secureInput\":false,\"secureOutput\":true,\"\":{\"adeqslhz\":\"datasdaruwvrvxoozyhu\",\"mqazolroqusrlkp\":\"datay\"}},\"name\":\"ty\",\"description\":\"drnwsfa\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"kdlhuslq\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Skipped\",\"Succeeded\"],\"\":{\"tfdcwekbbvtcox\":\"datajdoq\",\"tjcpoynbsttur\":\"datadgjdpyhemazhrwp\",\"lgfecsreojs\":\"dataqvxzlwgaius\"}}],\"userProperties\":[{\"name\":\"xb\",\"value\":\"dataziffpvvgjxbm\"},{\"name\":\"heyamoe\",\"value\":\"datayg\"}],\"\":{\"dizxseyjqklaihq\":\"datait\",\"etp\":\"databrmrhljqqb\",\"tifbvcveomdl\":\"datadjsu\"}}")
            .toObject(ExecuteDataFlowActivity.class);
        Assertions.assertEquals("ty", model.name());
        Assertions.assertEquals("drnwsfa", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("kdlhuslq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("xb", model.userProperties().get(0).name());
        Assertions.assertEquals("kmk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(228064254, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("mxtmedoykekbdwq", model.dataFlow().referenceName());
        Assertions.assertEquals("ziejo", model.staging().linkedService().referenceName());
        Assertions.assertEquals("eonl", model.integrationRuntime().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecuteDataFlowActivity model = new ExecuteDataFlowActivity().withName("ty").withDescription("drnwsfa")
            .withState(ActivityState.ACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("kdlhuslq")
                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED,
                    DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("xb").withValue("dataziffpvvgjxbm"),
                new UserProperty().withName("heyamoe").withValue("datayg")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("kmk")
                .withParameters(mapOf("vepmhohqxl", "dataqktgkofzzsohcae")))
            .withPolicy(new ActivityPolicy().withTimeout("datatliwoodndu").withRetry("dataykyzirgiyqzuh")
                .withRetryIntervalInSeconds(228064254).withSecureInput(false).withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withDataFlow(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                .withReferenceName("mxtmedoykekbdwq").withDatasetParameters("datau")
                .withParameters(mapOf("uabeisqkot", "datarfjzyini", "huyavhesqn", "datamhryri", "teprs", "datas"))
                .withAdditionalProperties(mapOf()))
            .withStaging(new DataFlowStagingInfo()
                .withLinkedService(new LinkedServiceReference().withReferenceName("ziejo")
                    .withParameters(mapOf("sfhjrsx", "dataofmmcej", "zxokpqnpdlc", "datamlx")))
                .withFolderPath("datasekdfhnhbkt"))
            .withIntegrationRuntime(new IntegrationRuntimeReference().withReferenceName("eonl")
                .withParameters(mapOf("dx", "datal", "b", "datatqknze")))
            .withCompute(new ExecuteDataFlowActivityTypePropertiesCompute().withComputeType("datanqneo")
                .withCoreCount("datacrmng"))
            .withTraceLevel("datalinlwcxrxduxctoj").withContinueOnError("datakmdegmivfuylpctl")
            .withRunConcurrently("dataob").withSourceStagingConcurrency("dataabt");
        model = BinaryData.fromObject(model).toObject(ExecuteDataFlowActivity.class);
        Assertions.assertEquals("ty", model.name());
        Assertions.assertEquals("drnwsfa", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("kdlhuslq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("xb", model.userProperties().get(0).name());
        Assertions.assertEquals("kmk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(228064254, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("mxtmedoykekbdwq", model.dataFlow().referenceName());
        Assertions.assertEquals("ziejo", model.staging().linkedService().referenceName());
        Assertions.assertEquals("eonl", model.integrationRuntime().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
