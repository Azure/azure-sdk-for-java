// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.DeleteActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DeleteActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeleteActivityTypeProperties model = BinaryData.fromString(
            "{\"recursive\":\"datayufhcfeggyl\",\"maxConcurrentConnections\":1845078866,\"enableLogging\":\"datadvazqsbrqspv\",\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"uxvujuxvl\",\"parameters\":{\"rayoask\":\"dataftcinj\",\"zawdwtzxqbqzplz\":\"datallqweoobbngym\",\"tczuscqobu\":\"datajktchpwvhiaxkmd\",\"wgkaaxpwkmbdh\":\"datafxyfh\"}},\"path\":\"datamjotccbduwswfb\",\"logLevel\":\"datacubmeihag\",\"enableReliableLogging\":\"datawd\",\"\":{\"hslbiptsfqcw\":\"dataxw\",\"fda\":\"dataobui\"}},\"dataset\":{\"referenceName\":\"unjegomegma\",\"parameters\":{\"ffdeogm\":\"dataeablknqnqqcgi\"}},\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"dataopjlgtcswqxeva\",\"disableMetricsCollection\":\"dataoxmxtcnmo\",\"\":{\"hmmvedjwdezmtpb\":\"datapgnagncguqf\",\"ud\":\"datazlucx\",\"vbwrunrgmyv\":\"datajflm\"}}}")
            .toObject(DeleteActivityTypeProperties.class);
        Assertions.assertEquals(1845078866, model.maxConcurrentConnections());
        Assertions.assertEquals("uxvujuxvl", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("unjegomegma", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeleteActivityTypeProperties model = new DeleteActivityTypeProperties().withRecursive("datayufhcfeggyl")
            .withMaxConcurrentConnections(1845078866)
            .withEnableLogging("datadvazqsbrqspv")
            .withLogStorageSettings(new LogStorageSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("uxvujuxvl")
                    .withParameters(mapOf("rayoask", "dataftcinj", "zawdwtzxqbqzplz", "datallqweoobbngym", "tczuscqobu",
                        "datajktchpwvhiaxkmd", "wgkaaxpwkmbdh", "datafxyfh")))
                .withPath("datamjotccbduwswfb")
                .withLogLevel("datacubmeihag")
                .withEnableReliableLogging("datawd")
                .withAdditionalProperties(mapOf()))
            .withDataset(new DatasetReference().withReferenceName("unjegomegma")
                .withParameters(mapOf("ffdeogm", "dataeablknqnqqcgi")))
            .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("dataopjlgtcswqxeva")
                .withDisableMetricsCollection("dataoxmxtcnmo")
                .withAdditionalProperties(mapOf("type", "StoreReadSettings")));
        model = BinaryData.fromObject(model).toObject(DeleteActivityTypeProperties.class);
        Assertions.assertEquals(1845078866, model.maxConcurrentConnections());
        Assertions.assertEquals("uxvujuxvl", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("unjegomegma", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
