// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.DeleteActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DeleteActivityTypePropertiesTests {
    @Test
    public void testDeserialize() {
        DeleteActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"maxConcurrentConnections\":1378305500,\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"scz\",\"parameters\":{}},\"\":{}},\"dataset\":{\"referenceName\":\"sdsyenzsie\",\"parameters\":{}},\"storeSettings\":{\"type\":\"StoreReadSettings\",\"\":{}}}")
                .toObject(DeleteActivityTypeProperties.class);
        Assertions.assertEquals(1378305500, model.maxConcurrentConnections());
        Assertions.assertEquals("scz", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("sdsyenzsie", model.dataset().referenceName());
    }

    @Test
    public void testSerialize() {
        DeleteActivityTypeProperties model =
            new DeleteActivityTypeProperties()
                .withMaxConcurrentConnections(1378305500)
                .withLogStorageSettings(
                    new LogStorageSettings()
                        .withLinkedServiceName(
                            new LinkedServiceReference().withReferenceName("scz").withParameters(mapOf()))
                        .withAdditionalProperties(mapOf()))
                .withDataset(new DatasetReference().withReferenceName("sdsyenzsie").withParameters(mapOf()))
                .withStoreSettings(
                    new StoreReadSettings().withAdditionalProperties(mapOf("type", "StoreReadSettings")));
        model = BinaryData.fromObject(model).toObject(DeleteActivityTypeProperties.class);
        Assertions.assertEquals(1378305500, model.maxConcurrentConnections());
        Assertions.assertEquals("scz", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("sdsyenzsie", model.dataset().referenceName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
