// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.DeleteActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DeleteActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeleteActivityTypeProperties model = BinaryData.fromString(
            "{\"recursive\":\"dataraqesk\",\"maxConcurrentConnections\":1799759591,\"enableLogging\":\"datayyzaalpwwcwie\",\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"s\",\"parameters\":{\"mundlegdlcue\":\"dataqsndqjbdtczxw\"}},\"path\":\"datamqkwkutbtrhrygd\",\"logLevel\":\"dataufmvozq\",\"enableReliableLogging\":\"datacfppjegctsatnr\",\"\":{\"jprr\":\"datauewrwcqrvtwv\",\"cswadvbwewwd\":\"datahxqpmzznmn\"}},\"dataset\":{\"referenceName\":\"eiehwma\",\"parameters\":{\"dowsj\":\"datapagkmhbeneqapll\",\"halmhcatpwq\":\"datavpvtyullivcymnpb\",\"lpglhlwu\":\"dataqnajmwpeaoeggi\",\"oprnbozvi\":\"dataugru\"}},\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"datahitqrpbwykeeocp\",\"disableMetricsCollection\":\"dataqzpkodbquvf\",\"\":{\"gwfqtqbn\":\"dataaozpcc\",\"wfdgeqzkpergzs\":\"datakmgydfmkz\"}}}")
            .toObject(DeleteActivityTypeProperties.class);
        Assertions.assertEquals(1799759591, model.maxConcurrentConnections());
        Assertions.assertEquals("s", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("eiehwma", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeleteActivityTypeProperties model = new DeleteActivityTypeProperties().withRecursive("dataraqesk")
            .withMaxConcurrentConnections(1799759591)
            .withEnableLogging("datayyzaalpwwcwie")
            .withLogStorageSettings(new LogStorageSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("s")
                    .withParameters(mapOf("mundlegdlcue", "dataqsndqjbdtczxw")))
                .withPath("datamqkwkutbtrhrygd")
                .withLogLevel("dataufmvozq")
                .withEnableReliableLogging("datacfppjegctsatnr")
                .withAdditionalProperties(mapOf()))
            .withDataset(new DatasetReference().withReferenceName("eiehwma")
                .withParameters(mapOf("dowsj", "datapagkmhbeneqapll", "halmhcatpwq", "datavpvtyullivcymnpb", "lpglhlwu",
                    "dataqnajmwpeaoeggi", "oprnbozvi", "dataugru")))
            .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("datahitqrpbwykeeocp")
                .withDisableMetricsCollection("dataqzpkodbquvf")
                .withAdditionalProperties(mapOf("type", "StoreReadSettings")));
        model = BinaryData.fromObject(model).toObject(DeleteActivityTypeProperties.class);
        Assertions.assertEquals(1799759591, model.maxConcurrentConnections());
        Assertions.assertEquals("s", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("eiehwma", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
