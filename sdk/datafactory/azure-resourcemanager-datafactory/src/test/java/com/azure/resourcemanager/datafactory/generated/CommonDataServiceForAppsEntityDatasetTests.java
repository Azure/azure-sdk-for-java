// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CommonDataServiceForAppsEntityDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CommonDataServiceForAppsEntityDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommonDataServiceForAppsEntityDataset model = BinaryData.fromString(
            "{\"type\":\"CommonDataServiceForAppsEntity\",\"typeProperties\":{\"entityName\":\"datablwal\"},\"description\":\"ssnqe\",\"structure\":\"dataotbptg\",\"schema\":\"datamanxx\",\"linkedServiceName\":{\"referenceName\":\"wqfmdqecvta\",\"parameters\":{\"sibxovuqo\":\"datazmnobfeww\",\"qnzjcyqqz\":\"datajrkblndyclwgycv\",\"dpisjdl\":\"dataembtbwnalb\",\"eopsk\":\"dataajvmvvlooubsfxip\"}},\"parameters\":{\"dwzrgdqyxajc\":{\"type\":\"Bool\",\"defaultValue\":\"datamlupfazusjcdhusl\"},\"sjnkiixepbn\":{\"type\":\"Int\",\"defaultValue\":\"datacavqcwyzoqzkmqcw\"}},\"annotations\":[\"datawwgfgsqxilef\"],\"folder\":{\"name\":\"ewrznequqynttw\"},\"\":{\"ogjmqjhgcyd\":\"dataajksbs\",\"ixtdlxw\":\"datajnmcvjbssfcriqx\",\"orogeuv\":\"datavcdkucpxpyafrwr\",\"frsnqpljp\":\"datakrspnrsjsemlz\"}}")
            .toObject(CommonDataServiceForAppsEntityDataset.class);
        Assertions.assertEquals("ssnqe", model.description());
        Assertions.assertEquals("wqfmdqecvta", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("dwzrgdqyxajc").type());
        Assertions.assertEquals("ewrznequqynttw", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommonDataServiceForAppsEntityDataset model
            = new CommonDataServiceForAppsEntityDataset().withDescription("ssnqe")
                .withStructure("dataotbptg")
                .withSchema("datamanxx")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("wqfmdqecvta")
                    .withParameters(mapOf("sibxovuqo", "datazmnobfeww", "qnzjcyqqz", "datajrkblndyclwgycv", "dpisjdl",
                        "dataembtbwnalb", "eopsk", "dataajvmvvlooubsfxip")))
                .withParameters(mapOf("dwzrgdqyxajc",
                    new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datamlupfazusjcdhusl"),
                    "sjnkiixepbn",
                    new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datacavqcwyzoqzkmqcw")))
                .withAnnotations(Arrays.asList("datawwgfgsqxilef"))
                .withFolder(new DatasetFolder().withName("ewrznequqynttw"))
                .withEntityName("datablwal");
        model = BinaryData.fromObject(model).toObject(CommonDataServiceForAppsEntityDataset.class);
        Assertions.assertEquals("ssnqe", model.description());
        Assertions.assertEquals("wqfmdqecvta", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("dwzrgdqyxajc").type());
        Assertions.assertEquals("ewrznequqynttw", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
