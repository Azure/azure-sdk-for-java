// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CommonDataServiceForAppsEntityDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CommonDataServiceForAppsEntityDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommonDataServiceForAppsEntityDataset model = BinaryData.fromString(
            "{\"type\":\"duvtvod\",\"typeProperties\":{\"entityName\":\"dataizme\"},\"description\":\"xpqhmlq\",\"structure\":\"datatbl\",\"schema\":\"datavrj\",\"linkedServiceName\":{\"referenceName\":\"znotd\",\"parameters\":{\"bmitaftazgcxsvq\":\"datavpbqsdqkpsbqs\",\"ow\":\"datacqufylam\"}},\"parameters\":{\"xiknsgofuns\":{\"type\":\"Object\",\"defaultValue\":\"datayutehlkarvtipquk\"},\"xn\":{\"type\":\"Object\",\"defaultValue\":\"datacekggvmfnnb\"},\"cvgifwsunj\":{\"type\":\"SecureString\",\"defaultValue\":\"datakkedeetxtp\"},\"zsnfzyviiwsuanzh\":{\"type\":\"Bool\",\"defaultValue\":\"dataaciwmmpdtqdonb\"}},\"annotations\":[\"datauifkzqqhb\"],\"folder\":{\"name\":\"oilmkfbeoiipjpng\"},\"\":{\"dlpsx\":\"datauoi\",\"wimqnryclocfm\":\"datatug\"}}")
            .toObject(CommonDataServiceForAppsEntityDataset.class);
        Assertions.assertEquals("xpqhmlq", model.description());
        Assertions.assertEquals("znotd", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("xiknsgofuns").type());
        Assertions.assertEquals("oilmkfbeoiipjpng", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommonDataServiceForAppsEntityDataset model
            = new CommonDataServiceForAppsEntityDataset().withDescription("xpqhmlq")
                .withStructure("datatbl")
                .withSchema("datavrj")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("znotd")
                    .withParameters(mapOf("bmitaftazgcxsvq", "datavpbqsdqkpsbqs", "ow", "datacqufylam")))
                .withParameters(mapOf("xiknsgofuns",
                    new ParameterSpecification().withType(ParameterType.OBJECT)
                        .withDefaultValue("datayutehlkarvtipquk"),
                    "xn",
                    new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datacekggvmfnnb"),
                    "cvgifwsunj",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                        .withDefaultValue("datakkedeetxtp"),
                    "zsnfzyviiwsuanzh",
                    new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataaciwmmpdtqdonb")))
                .withAnnotations(Arrays.asList("datauifkzqqhb"))
                .withFolder(new DatasetFolder().withName("oilmkfbeoiipjpng"))
                .withEntityName("dataizme");
        model = BinaryData.fromObject(model).toObject(CommonDataServiceForAppsEntityDataset.class);
        Assertions.assertEquals("xpqhmlq", model.description());
        Assertions.assertEquals("znotd", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("xiknsgofuns").type());
        Assertions.assertEquals("oilmkfbeoiipjpng", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
