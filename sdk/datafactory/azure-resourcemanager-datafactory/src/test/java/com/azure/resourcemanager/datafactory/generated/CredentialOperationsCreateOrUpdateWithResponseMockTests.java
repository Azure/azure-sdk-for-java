// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.Credential;
import com.azure.resourcemanager.datafactory.models.CredentialResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CredentialOperationsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"type\":\"Credential\",\"description\":\"rgwmge\",\"annotations\":[\"datairnfnlyvdryx\",\"datauqwtazuacawxs\",\"datas\"],\"\":{\"xycvoexbxr\":\"databbqqtvp\",\"acgmnelozzfwyegd\":\"datarvxwlfmbb\"}},\"name\":\"fktmdlf\",\"type\":\"jucpt\",\"etag\":\"esdfujfpn\",\"id\":\"zablqmsybvjf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CredentialResource response = manager.credentialOperations()
            .define("z")
            .withExistingFactory("gunnjwmdtb", "qtomcbaiamtdfpkf")
            .withProperties(new Credential().withDescription("elxd")
                .withAnnotations(Arrays.asList("datafsteouzoglvtz", "datajlejvlf", "datazrqkgibpeh", "databctz"))
                .withAdditionalProperties(mapOf("type", "Credential")))
            .withIfMatch("par")
            .create();

        Assertions.assertEquals("zablqmsybvjf", response.id());
        Assertions.assertEquals("rgwmge", response.properties().description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
