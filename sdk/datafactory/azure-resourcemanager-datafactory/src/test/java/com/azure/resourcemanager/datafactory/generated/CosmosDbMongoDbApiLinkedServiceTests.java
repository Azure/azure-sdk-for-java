// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CosmosDbMongoDbApiLinkedService;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CosmosDbMongoDbApiLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CosmosDbMongoDbApiLinkedService model = BinaryData.fromString(
            "{\"type\":\"CosmosDbMongoDbApi\",\"typeProperties\":{\"isServerVersionAbove32\":\"dataopqqiyjrehe\",\"connectionString\":\"datachengmxpjkuq\",\"database\":\"datangromlxsqdzyyalr\"},\"version\":\"gq\",\"connectVia\":{\"referenceName\":\"fwuplfjkbax\",\"parameters\":{\"hxbfhbip\":\"dataeimuipggt\",\"fefznxcleyamv\":\"datadziphe\",\"vbtkafcnfitpu\":\"dataitjjhqvypqgncgw\"}},\"description\":\"ykdwyjd\",\"parameters\":{\"yngoudclri\":{\"type\":\"Bool\",\"defaultValue\":\"dataawj\"},\"chgjonrhdib\":{\"type\":\"Object\",\"defaultValue\":\"dataynxbdisjeovgcf\"},\"y\":{\"type\":\"Int\",\"defaultValue\":\"datad\"},\"njbbhwsfllzy\":{\"type\":\"SecureString\",\"defaultValue\":\"dataouiuvkcnq\"}},\"annotations\":[\"dataj\"],\"\":{\"jsgbpj\":\"datalpby\",\"vwbd\":\"datanblbkakn\",\"qilsbabqtjch\":\"datanddctkjcqhxdirt\",\"eiyem\":\"datasfwey\"}}")
            .toObject(CosmosDbMongoDbApiLinkedService.class);
        Assertions.assertEquals("gq", model.version());
        Assertions.assertEquals("fwuplfjkbax", model.connectVia().referenceName());
        Assertions.assertEquals("ykdwyjd", model.description());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("yngoudclri").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CosmosDbMongoDbApiLinkedService model = new CosmosDbMongoDbApiLinkedService().withVersion("gq")
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("fwuplfjkbax")
                .withParameters(mapOf("hxbfhbip", "dataeimuipggt", "fefznxcleyamv", "datadziphe", "vbtkafcnfitpu",
                    "dataitjjhqvypqgncgw")))
            .withDescription("ykdwyjd")
            .withParameters(mapOf("yngoudclri",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataawj"), "chgjonrhdib",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataynxbdisjeovgcf"), "y",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datad"), "njbbhwsfllzy",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("dataouiuvkcnq")))
            .withAnnotations(Arrays.asList("dataj"))
            .withIsServerVersionAbove32("dataopqqiyjrehe")
            .withConnectionString("datachengmxpjkuq")
            .withDatabase("datangromlxsqdzyyalr");
        model = BinaryData.fromObject(model).toObject(CosmosDbMongoDbApiLinkedService.class);
        Assertions.assertEquals("gq", model.version());
        Assertions.assertEquals("fwuplfjkbax", model.connectVia().referenceName());
        Assertions.assertEquals("ykdwyjd", model.description());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("yngoudclri").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
