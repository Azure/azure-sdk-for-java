// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CosmosDbMongoDbApiLinkedService;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CosmosDbMongoDbApiLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CosmosDbMongoDbApiLinkedService model =
            BinaryData
                .fromString(
                    "{\"type\":\"CosmosDbMongoDbApi\",\"typeProperties\":{\"isServerVersionAbove32\":\"datastkdlyj\",\"connectionString\":\"dataijxefydckffkz\",\"database\":\"datachrkiwpadnhf\"},\"connectVia\":{\"referenceName\":\"nnitrugotfrdl\",\"parameters\":{\"igksni\":\"dataexbrvbdyriyray\",\"dprezqxzxeigydd\":\"datacl\",\"lwvcnm\":\"datafnmbxerzypcr\"}},\"description\":\"izxql\",\"parameters\":{\"mnyuh\":{\"type\":\"String\",\"defaultValue\":\"datacujdzlgyermj\"},\"fcbweabptkmkuquv\":{\"type\":\"Int\",\"defaultValue\":\"databf\"}},\"annotations\":[\"datan\",\"datam\",\"datacldoyohuafuclop\",\"dataemsylwsm\"],\"\":{\"om\":\"datawfrgdmbgbht\",\"tzbkeeohpf\":\"dataustkqywabhlgrrsk\"}}")
                .toObject(CosmosDbMongoDbApiLinkedService.class);
        Assertions.assertEquals("nnitrugotfrdl", model.connectVia().referenceName());
        Assertions.assertEquals("izxql", model.description());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("mnyuh").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CosmosDbMongoDbApiLinkedService model =
            new CosmosDbMongoDbApiLinkedService()
                .withConnectVia(
                    new IntegrationRuntimeReference()
                        .withReferenceName("nnitrugotfrdl")
                        .withParameters(
                            mapOf(
                                "igksni",
                                "dataexbrvbdyriyray",
                                "dprezqxzxeigydd",
                                "datacl",
                                "lwvcnm",
                                "datafnmbxerzypcr")))
                .withDescription("izxql")
                .withParameters(
                    mapOf(
                        "mnyuh",
                        new ParameterSpecification()
                            .withType(ParameterType.STRING)
                            .withDefaultValue("datacujdzlgyermj"),
                        "fcbweabptkmkuquv",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("databf")))
                .withAnnotations(Arrays.asList("datan", "datam", "datacldoyohuafuclop", "dataemsylwsm"))
                .withIsServerVersionAbove32("datastkdlyj")
                .withConnectionString("dataijxefydckffkz")
                .withDatabase("datachrkiwpadnhf");
        model = BinaryData.fromObject(model).toObject(CosmosDbMongoDbApiLinkedService.class);
        Assertions.assertEquals("nnitrugotfrdl", model.connectVia().referenceName());
        Assertions.assertEquals("izxql", model.description());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("mnyuh").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
