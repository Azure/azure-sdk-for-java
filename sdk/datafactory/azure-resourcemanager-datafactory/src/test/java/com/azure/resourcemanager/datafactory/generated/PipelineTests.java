// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.Pipeline;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineElapsedTimeMetricPolicy;
import com.azure.resourcemanager.datafactory.models.PipelineFolder;
import com.azure.resourcemanager.datafactory.models.PipelinePolicy;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.VariableSpecification;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PipelineTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Pipeline model = BinaryData.fromString(
            "{\"description\":\"chrdgoihxumwcto\",\"activities\":[{\"type\":\"Activity\",\"name\":\"jl\",\"description\":\"dfdlwggyts\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"gseinq\",\"dependencyConditions\":[\"Completed\",\"Completed\",\"Succeeded\"],\"\":{\"msniffc\":\"datanpirgnepttw\",\"frddhcrati\":\"datamqnrojlpijnkr\",\"zq\":\"datazronasxift\",\"tw\":\"datazh\"}},{\"activity\":\"sgogczhonnxk\",\"dependencyConditions\":[\"Skipped\",\"Completed\"],\"\":{\"dhqxvcx\":\"datamossxkkgthrrghxj\",\"buswdvzyy\":\"datafrpdsofbshrns\",\"awnopqgikyzirtxd\":\"dataycnunvjsrtk\"}},{\"activity\":\"uxzejntpsew\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Succeeded\",\"Failed\"],\"\":{\"eoxorggufhyao\":\"datarydxtqm\"}},{\"activity\":\"tbghhavgrvkf\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Succeeded\",\"Failed\"],\"\":{\"cluyovwxnbkf\":\"databibgjmfxumv\",\"zbomvzzbtdcqvpni\":\"datazzxscyhwzdgiruj\"}}],\"userProperties\":[{\"name\":\"viylwdshfssnrbgy\",\"value\":\"datafrymsgaojfmwnc\"},{\"name\":\"tmr\",\"value\":\"datahirctymoxoftpipi\"},{\"name\":\"yczuhxacpq\",\"value\":\"datalihhyuspskasdvlm\"}],\"\":{\"ulucv\":\"datagz\",\"urisjnhnytxifqj\":\"dataamrsreuzv\",\"esutrgjupauutpw\":\"datagxmrhublwp\",\"jqgwzp\":\"dataqhih\"}}],\"parameters\":{\"oimwkslirc\":{\"type\":\"Float\",\"defaultValue\":\"datacypsxjv\"},\"ftumrtwnawjslbiw\":{\"type\":\"Object\",\"defaultValue\":\"dataxvydfceacvlhvygd\"},\"ph\":{\"type\":\"Bool\",\"defaultValue\":\"datagcyztsfmznbae\"},\"ehuwrykqgaifmvik\":{\"type\":\"Int\",\"defaultValue\":\"datanrnrp\"}},\"variables\":{\"dsrhnjiv\":{\"type\":\"Bool\",\"defaultValue\":\"datakhbejdznxc\"}},\"concurrency\":1976490,\"annotations\":[\"dataovqfzge\",\"datajdftuljltd\"],\"runDimensions\":{\"o\":\"dataamtmcz\",\"ssxmojms\":\"dataejwcwwqiok\"},\"folder\":{\"name\":\"jpr\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"datafz\"}}}")
            .toObject(Pipeline.class);
        Assertions.assertEquals("chrdgoihxumwcto", model.description());
        Assertions.assertEquals("jl", model.activities().get(0).name());
        Assertions.assertEquals("dfdlwggyts", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("gseinq", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("viylwdshfssnrbgy", model.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("oimwkslirc").type());
        Assertions.assertEquals(VariableType.BOOL, model.variables().get("dsrhnjiv").type());
        Assertions.assertEquals(1976490, model.concurrency());
        Assertions.assertEquals("jpr", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Pipeline model = new Pipeline().withDescription("chrdgoihxumwcto")
            .withActivities(Arrays.asList(new Activity().withName("jl")
                .withDescription("dfdlwggyts")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("gseinq")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                            DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("sgogczhonnxk")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("uxzejntpsew")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                            DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("tbghhavgrvkf")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                            DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays.asList(new UserProperty().withName("viylwdshfssnrbgy").withValue("datafrymsgaojfmwnc"),
                        new UserProperty().withName("tmr").withValue("datahirctymoxoftpipi"),
                        new UserProperty().withName("yczuhxacpq").withValue("datalihhyuspskasdvlm")))
                .withAdditionalProperties(mapOf("type", "Activity"))))
            .withParameters(mapOf("oimwkslirc",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datacypsxjv"),
                "ftumrtwnawjslbiw",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataxvydfceacvlhvygd"),
                "ph", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datagcyztsfmznbae"),
                "ehuwrykqgaifmvik",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datanrnrp")))
            .withVariables(mapOf("dsrhnjiv",
                new VariableSpecification().withType(VariableType.BOOL).withDefaultValue("datakhbejdznxc")))
            .withConcurrency(1976490)
            .withAnnotations(Arrays.asList("dataovqfzge", "datajdftuljltd"))
            .withRunDimensions(mapOf("o", "dataamtmcz", "ssxmojms", "dataejwcwwqiok"))
            .withFolder(new PipelineFolder().withName("jpr"))
            .withPolicy(new PipelinePolicy()
                .withElapsedTimeMetric(new PipelineElapsedTimeMetricPolicy().withDuration("datafz")));
        model = BinaryData.fromObject(model).toObject(Pipeline.class);
        Assertions.assertEquals("chrdgoihxumwcto", model.description());
        Assertions.assertEquals("jl", model.activities().get(0).name());
        Assertions.assertEquals("dfdlwggyts", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("gseinq", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("viylwdshfssnrbgy", model.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("oimwkslirc").type());
        Assertions.assertEquals(VariableType.BOOL, model.variables().get("dsrhnjiv").type());
        Assertions.assertEquals(1976490, model.concurrency());
        Assertions.assertEquals("jpr", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
