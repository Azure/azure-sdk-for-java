// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.Pipeline;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineElapsedTimeMetricPolicy;
import com.azure.resourcemanager.datafactory.models.PipelineFolder;
import com.azure.resourcemanager.datafactory.models.PipelinePolicy;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.VariableSpecification;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PipelineTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Pipeline model =
            BinaryData
                .fromString(
                    "{\"description\":\"ybycnunvj\",\"activities\":[{\"type\":\"Activity\",\"name\":\"kfawnopqgikyz\",\"description\":\"txdyuxzejntpsew\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"kr\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Succeeded\"],\"\":{\"tbghhavgrvkf\":\"dataeoxorggufhyao\",\"mv\":\"dataovjzhpjbibgjmfx\",\"zzxscyhwzdgiruj\":\"datacluyovwxnbkf\",\"ujviylwdshfs\":\"datazbomvzzbtdcqvpni\"}}],\"userProperties\":[{\"name\":\"bgye\",\"value\":\"datarymsgaojfmw\"},{\"name\":\"cotmr\",\"value\":\"datahirctymoxoftpipi\"}],\"\":{\"cpqjlihhyu\":\"datazuhx\",\"x\":\"datapskasdvlmfwdg\",\"sreuzvxurisjnh\":\"datalucvpam\",\"blwpcesutrgj\":\"dataytxifqjzgxmrh\"}}],\"parameters\":{\"w\":{\"type\":\"Float\",\"defaultValue\":\"datatpwoqhihejq\"},\"xjvfoimwksl\":{\"type\":\"SecureString\",\"defaultValue\":\"datafqntcyp\"},\"ydfce\":{\"type\":\"String\",\"defaultValue\":\"dataizjx\"}},\"variables\":{\"mrtwna\":{\"type\":\"String\",\"defaultValue\":\"datavygdyft\"}},\"concurrency\":951831262,\"annotations\":[\"dataiw\",\"dataojgcyzt\",\"datafmznba\"],\"runDimensions\":{\"huwrykqgaifm\":\"datahchqnrnrpx\"},\"folder\":{\"name\":\"lb\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"datahbejdznxcvdsrhnj\"}}}")
                .toObject(Pipeline.class);
        Assertions.assertEquals("ybycnunvj", model.description());
        Assertions.assertEquals("kfawnopqgikyz", model.activities().get(0).name());
        Assertions.assertEquals("txdyuxzejntpsew", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("kr", model.activities().get(0).dependsOn().get(0).activity());
        Assertions
            .assertEquals(
                DependencyCondition.SKIPPED,
                model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("bgye", model.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("w").type());
        Assertions.assertEquals(VariableType.STRING, model.variables().get("mrtwna").type());
        Assertions.assertEquals(951831262, model.concurrency());
        Assertions.assertEquals("lb", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Pipeline model =
            new Pipeline()
                .withDescription("ybycnunvj")
                .withActivities(
                    Arrays
                        .asList(
                            new Activity()
                                .withName("kfawnopqgikyz")
                                .withDescription("txdyuxzejntpsew")
                                .withState(ActivityState.ACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                                .withDependsOn(
                                    Arrays
                                        .asList(
                                            new ActivityDependency()
                                                .withActivity("kr")
                                                .withDependencyConditions(
                                                    Arrays
                                                        .asList(
                                                            DependencyCondition.SKIPPED,
                                                            DependencyCondition.FAILED,
                                                            DependencyCondition.SUCCEEDED))
                                                .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays
                                        .asList(
                                            new UserProperty().withName("bgye").withValue("datarymsgaojfmw"),
                                            new UserProperty().withName("cotmr").withValue("datahirctymoxoftpipi")))
                                .withAdditionalProperties(mapOf("type", "Activity"))))
                .withParameters(
                    mapOf(
                        "w",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datatpwoqhihejq"),
                        "xjvfoimwksl",
                        new ParameterSpecification()
                            .withType(ParameterType.SECURE_STRING)
                            .withDefaultValue("datafqntcyp"),
                        "ydfce",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataizjx")))
                .withVariables(
                    mapOf(
                        "mrtwna",
                        new VariableSpecification().withType(VariableType.STRING).withDefaultValue("datavygdyft")))
                .withConcurrency(951831262)
                .withAnnotations(Arrays.asList("dataiw", "dataojgcyzt", "datafmznba"))
                .withRunDimensions(mapOf("huwrykqgaifm", "datahchqnrnrpx"))
                .withFolder(new PipelineFolder().withName("lb"))
                .withPolicy(
                    new PipelinePolicy()
                        .withElapsedTimeMetric(
                            new PipelineElapsedTimeMetricPolicy().withDuration("datahbejdznxcvdsrhnj")));
        model = BinaryData.fromObject(model).toObject(Pipeline.class);
        Assertions.assertEquals("ybycnunvj", model.description());
        Assertions.assertEquals("kfawnopqgikyz", model.activities().get(0).name());
        Assertions.assertEquals("txdyuxzejntpsew", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("kr", model.activities().get(0).dependsOn().get(0).activity());
        Assertions
            .assertEquals(
                DependencyCondition.SKIPPED,
                model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("bgye", model.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("w").type());
        Assertions.assertEquals(VariableType.STRING, model.variables().get("mrtwna").type());
        Assertions.assertEquals(951831262, model.concurrency());
        Assertions.assertEquals("lb", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
