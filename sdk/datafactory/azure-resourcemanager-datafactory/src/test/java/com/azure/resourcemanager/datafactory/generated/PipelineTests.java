// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.Pipeline;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineElapsedTimeMetricPolicy;
import com.azure.resourcemanager.datafactory.models.PipelineFolder;
import com.azure.resourcemanager.datafactory.models.PipelinePolicy;
import com.azure.resourcemanager.datafactory.models.VariableSpecification;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PipelineTests {
    @Test
    public void testDeserialize() {
        Pipeline model =
            BinaryData
                .fromString(
                    "{\"description\":\"uhpigvp\",\"activities\":[{\"type\":\"Activity\",\"name\":\"gqgitxmedjvcsl\",\"description\":\"qwwncw\",\"dependsOn\":[],\"userProperties\":[],\"\":{}}],\"parameters\":{\"cnapkteoell\":{\"type\":\"Int\"},\"fdygpfqbuaceopz\":{\"type\":\"Int\"}},\"variables\":{\"uaopppcqeq\":{\"type\":\"String\"},\"z\":{\"type\":\"Array\"},\"zxctobgb\":{\"type\":\"Bool\"},\"oizpostmgrcfbun\":{\"type\":\"String\"}},\"concurrency\":1504791861,\"annotations\":[],\"runDimensions\":{},\"folder\":{\"name\":\"bpvjymjhx\"},\"policy\":{\"elapsedTimeMetric\":{}}}")
                .toObject(Pipeline.class);
        Assertions.assertEquals("uhpigvp", model.description());
        Assertions.assertEquals("gqgitxmedjvcsl", model.activities().get(0).name());
        Assertions.assertEquals("qwwncw", model.activities().get(0).description());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("cnapkteoell").type());
        Assertions.assertEquals(VariableType.STRING, model.variables().get("uaopppcqeq").type());
        Assertions.assertEquals(1504791861, model.concurrency());
        Assertions.assertEquals("bpvjymjhx", model.folder().name());
    }

    @Test
    public void testSerialize() {
        Pipeline model =
            new Pipeline()
                .withDescription("uhpigvp")
                .withActivities(
                    Arrays
                        .asList(
                            new Activity()
                                .withName("gqgitxmedjvcsl")
                                .withDescription("qwwncw")
                                .withDependsOn(Arrays.asList())
                                .withUserProperties(Arrays.asList())
                                .withAdditionalProperties(mapOf("type", "Activity"))))
                .withParameters(
                    mapOf(
                        "cnapkteoell",
                        new ParameterSpecification().withType(ParameterType.INT),
                        "fdygpfqbuaceopz",
                        new ParameterSpecification().withType(ParameterType.INT)))
                .withVariables(
                    mapOf(
                        "uaopppcqeq",
                        new VariableSpecification().withType(VariableType.STRING),
                        "z",
                        new VariableSpecification().withType(VariableType.ARRAY),
                        "zxctobgb",
                        new VariableSpecification().withType(VariableType.BOOL),
                        "oizpostmgrcfbun",
                        new VariableSpecification().withType(VariableType.STRING)))
                .withConcurrency(1504791861)
                .withAnnotations(Arrays.asList())
                .withRunDimensions(mapOf())
                .withFolder(new PipelineFolder().withName("bpvjymjhx"))
                .withPolicy(new PipelinePolicy().withElapsedTimeMetric(new PipelineElapsedTimeMetricPolicy()));
        model = BinaryData.fromObject(model).toObject(Pipeline.class);
        Assertions.assertEquals("uhpigvp", model.description());
        Assertions.assertEquals("gqgitxmedjvcsl", model.activities().get(0).name());
        Assertions.assertEquals("qwwncw", model.activities().get(0).description());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("cnapkteoell").type());
        Assertions.assertEquals(VariableType.STRING, model.variables().get("uaopppcqeq").type());
        Assertions.assertEquals(1504791861, model.concurrency());
        Assertions.assertEquals("bpvjymjhx", model.folder().name());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
