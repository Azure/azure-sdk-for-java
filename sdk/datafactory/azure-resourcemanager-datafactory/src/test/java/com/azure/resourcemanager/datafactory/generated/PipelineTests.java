// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.Pipeline;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineElapsedTimeMetricPolicy;
import com.azure.resourcemanager.datafactory.models.PipelineFolder;
import com.azure.resourcemanager.datafactory.models.PipelinePolicy;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.VariableSpecification;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PipelineTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Pipeline model = BinaryData.fromString(
            "{\"description\":\"ejqgw\",\"activities\":[{\"type\":\"qntcypsxjvfoimwk\",\"name\":\"lirc\",\"description\":\"jxv\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"vlhv\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Completed\"],\"\":{\"jslb\":\"datamrtwna\",\"aeqphchqnr\":\"datawkojgcyztsfmzn\",\"wrykqgai\":\"datarpxeh\"}},{\"activity\":\"mvikl\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"volvtn\":\"datahbejdznxcvdsrhnj\",\"fzg\":\"datav\",\"jltduceam\":\"datamjdftu\"}}],\"userProperties\":[{\"name\":\"zuo\",\"value\":\"dataejwcwwqiok\"}],\"\":{\"vk\":\"dataxmojmsvpkjp\"}}],\"parameters\":{\"dbsdshm\":{\"type\":\"Int\",\"defaultValue\":\"dataljyxgtczhe\"}},\"variables\":{\"baxk\":{\"type\":\"String\",\"defaultValue\":\"datahvbbxuripltfnh\"},\"yklyhpluodpvruud\":{\"type\":\"String\",\"defaultValue\":\"datawrck\"},\"eclze\":{\"type\":\"String\",\"defaultValue\":\"dataibthostgktstvd\"}},\"concurrency\":83422204,\"annotations\":[\"datahzlhplodqkdlww\"],\"runDimensions\":{\"lkxt\":\"datau\"},\"folder\":{\"name\":\"fsmlmbtxhwgfw\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"datawcoezbrhub\"}}}")
            .toObject(Pipeline.class);
        Assertions.assertEquals("ejqgw", model.description());
        Assertions.assertEquals("lirc", model.activities().get(0).name());
        Assertions.assertEquals("jxv", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("vlhv", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("zuo", model.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("dbsdshm").type());
        Assertions.assertEquals(VariableType.STRING, model.variables().get("baxk").type());
        Assertions.assertEquals(83422204, model.concurrency());
        Assertions.assertEquals("fsmlmbtxhwgfw", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Pipeline model = new Pipeline().withDescription("ejqgw")
            .withActivities(Arrays.asList(new Activity().withName("lirc")
                .withDescription("jxv")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("vlhv")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                            DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("mvikl")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("zuo").withValue("dataejwcwwqiok")))
                .withAdditionalProperties(mapOf("type", "qntcypsxjvfoimwk"))))
            .withParameters(mapOf("dbsdshm",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataljyxgtczhe")))
            .withVariables(mapOf("baxk",
                new VariableSpecification().withType(VariableType.STRING).withDefaultValue("datahvbbxuripltfnh"),
                "yklyhpluodpvruud",
                new VariableSpecification().withType(VariableType.STRING).withDefaultValue("datawrck"), "eclze",
                new VariableSpecification().withType(VariableType.STRING).withDefaultValue("dataibthostgktstvd")))
            .withConcurrency(83422204)
            .withAnnotations(Arrays.asList("datahzlhplodqkdlww"))
            .withRunDimensions(mapOf("lkxt", "datau"))
            .withFolder(new PipelineFolder().withName("fsmlmbtxhwgfw"))
            .withPolicy(new PipelinePolicy()
                .withElapsedTimeMetric(new PipelineElapsedTimeMetricPolicy().withDuration("datawcoezbrhub")));
        model = BinaryData.fromObject(model).toObject(Pipeline.class);
        Assertions.assertEquals("ejqgw", model.description());
        Assertions.assertEquals("lirc", model.activities().get(0).name());
        Assertions.assertEquals("jxv", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("vlhv", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("zuo", model.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("dbsdshm").type());
        Assertions.assertEquals(VariableType.STRING, model.variables().get("baxk").type());
        Assertions.assertEquals(83422204, model.concurrency());
        Assertions.assertEquals("fsmlmbtxhwgfw", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
