// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ForEachActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForEachActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForEachActivityTypeProperties model = BinaryData.fromString(
            "{\"isSequential\":false,\"batchCount\":1136169942,\"items\":{\"value\":\"mjoycyvxbrthw\"},\"activities\":[{\"type\":\"Activity\",\"name\":\"trw\",\"description\":\"ofoqrvnhcuoghvk\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"pyfjahwypdh\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Succeeded\",\"Succeeded\"],\"\":{\"xtg\":\"dataoxsga\",\"ftlbtotu\":\"dataxmxgqgquulyrtk\"}},{\"activity\":\"zasrwoxumnucqew\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Succeeded\"],\"\":{\"nz\":\"datamvcxyuemridcy\",\"ydwgq\":\"datae\",\"vn\":\"datasrlhxfmvngdrnt\"}},{\"activity\":\"hnh\",\"dependencyConditions\":[\"Skipped\",\"Completed\"],\"\":{\"qczoqp\":\"datarjyprcojwiigtd\",\"ntihlnay\":\"datapibeiftmozof\"}}],\"userProperties\":[{\"name\":\"byhouqug\",\"value\":\"datacorgnxmnvenno\"},{\"name\":\"jixoq\",\"value\":\"datajbsagwlp\"},{\"name\":\"qfmrimwlparhwx\",\"value\":\"datai\"},{\"name\":\"ktnmwlklqhwy\",\"value\":\"dataieoefwnj\"}],\"\":{\"oezcabfylsuiy\":\"datahpgavrop\",\"jqeigpylpm\":\"databildwqlxn\",\"xswiindyurwz\":\"datawdvdtzdrv\",\"lpbvponxhszrot\":\"dataxkhacvsjambtvcd\"}},{\"type\":\"Activity\",\"name\":\"nnkbekzkaoonbzi\",\"description\":\"qyzrtawjkjzvvkeh\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"bs\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Skipped\",\"Succeeded\"],\"\":{\"uuanrjcrpxlf\":\"datamtqfrdfoiqfvc\",\"kmlfcgk\":\"dataytjmlroxvsclmt\",\"bestyy\":\"dataeitphzuaznsbvu\",\"impuwgrny\":\"dataljo\"}}],\"userProperties\":[{\"name\":\"zsekfudranmdcfw\",\"value\":\"datawzjhfauubcvn\"},{\"name\":\"fxwhicacmviclhom\",\"value\":\"datahaxtegrufbz\"}],\"\":{\"qdfjeuwwq\":\"datajfzbavqmmk\",\"plbzyjuqvyw\":\"datatczpsk\",\"hbosax\":\"datalccxdctkh\",\"exgxn\":\"dataemspnzqohh\"}},{\"type\":\"Activity\",\"name\":\"fodxiy\",\"description\":\"fottycfostzd\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"bhahxs\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Completed\",\"Completed\"],\"\":{\"hujgrb\":\"datahtxgjzif\",\"gxjoimozsef\":\"datamz\"}}],\"userProperties\":[{\"name\":\"r\",\"value\":\"databdttcfwjzquwjg\"}],\"\":{\"orzbkfefxvg\":\"datalola\",\"ijzrtlfngonhmblk\":\"datakjbhsnyycya\"}},{\"type\":\"Activity\",\"name\":\"el\",\"description\":\"ki\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"ynencaf\",\"dependencyConditions\":[\"Completed\",\"Completed\"],\"\":{\"pmvxcrzpdqw\":\"datargwxgczwxyghs\"}},{\"activity\":\"chygbeofiwbtfkiu\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\"],\"\":{\"fkukaa\":\"datasxjrafh\",\"gqhefeasm\":\"datawnqijphhuvflg\",\"pcxxpyrtajlyde\":\"datadguodoujpwqbotlv\"}}],\"userProperties\":[{\"name\":\"vrqruympo\",\"value\":\"datauxbqdwbjh\"},{\"name\":\"jzvceyxvfoyuyk\",\"value\":\"datadggyhpuhcc\"},{\"name\":\"ehndbutpt\",\"value\":\"dataabdkbkblop\"},{\"name\":\"morfzuhvycdndcz\",\"value\":\"datazsfvri\"}],\"\":{\"qcqinvkmkbtpbw\":\"datalndd\",\"drrmbxshraep\":\"datahzmqabvwbgsan\",\"qtzh\":\"datalhzme\"}}]}")
            .toObject(ForEachActivityTypeProperties.class);
        Assertions.assertEquals(false, model.isSequential());
        Assertions.assertEquals(1136169942, model.batchCount());
        Assertions.assertEquals("mjoycyvxbrthw", model.items().value());
        Assertions.assertEquals("trw", model.activities().get(0).name());
        Assertions.assertEquals("ofoqrvnhcuoghvk", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("pyfjahwypdh", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("byhouqug", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForEachActivityTypeProperties model = new ForEachActivityTypeProperties().withIsSequential(false)
            .withBatchCount(1136169942)
            .withItems(new Expression().withValue("mjoycyvxbrthw"))
            .withActivities(Arrays.asList(
                new Activity().withName("trw")
                    .withDescription("ofoqrvnhcuoghvk")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("pyfjahwypdh")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                            DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("zasrwoxumnucqew")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("hnh")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("byhouqug").withValue("datacorgnxmnvenno"),
                            new UserProperty().withName("jixoq").withValue("datajbsagwlp"),
                            new UserProperty().withName("qfmrimwlparhwx").withValue("datai"),
                            new UserProperty().withName("ktnmwlklqhwy").withValue("dataieoefwnj")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("nnkbekzkaoonbzi")
                    .withDescription("qyzrtawjkjzvvkeh")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("bs")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                            DependencyCondition.FAILED, DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("zsekfudranmdcfw").withValue("datawzjhfauubcvn"),
                            new UserProperty().withName("fxwhicacmviclhom").withValue("datahaxtegrufbz")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("fodxiy")
                    .withDescription("fottycfostzd")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("bhahxs")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                            DependencyCondition.SKIPPED, DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                        .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("r").withValue("databdttcfwjzquwjg")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("el")
                    .withDescription("ki")
                    .withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("ynencaf")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("chygbeofiwbtfkiu")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("vrqruympo").withValue("datauxbqdwbjh"),
                            new UserProperty().withName("jzvceyxvfoyuyk").withValue("datadggyhpuhcc"),
                            new UserProperty().withName("ehndbutpt").withValue("dataabdkbkblop"),
                            new UserProperty().withName("morfzuhvycdndcz").withValue("datazsfvri")))
                    .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(ForEachActivityTypeProperties.class);
        Assertions.assertEquals(false, model.isSequential());
        Assertions.assertEquals(1136169942, model.batchCount());
        Assertions.assertEquals("mjoycyvxbrthw", model.items().value());
        Assertions.assertEquals("trw", model.activities().get(0).name());
        Assertions.assertEquals("ofoqrvnhcuoghvk", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("pyfjahwypdh", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("byhouqug", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
