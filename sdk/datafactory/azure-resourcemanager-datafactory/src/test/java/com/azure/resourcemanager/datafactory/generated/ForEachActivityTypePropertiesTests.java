// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ForEachActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForEachActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForEachActivityTypeProperties model = BinaryData.fromString(
            "{\"isSequential\":false,\"batchCount\":201071910,\"items\":{\"value\":\"mlhgytkthevodd\"},\"activities\":[{\"type\":\"Activity\",\"name\":\"egw\",\"description\":\"xdfdjftcrj\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"txtc\",\"dependencyConditions\":[\"Failed\",\"Succeeded\"],\"\":{\"xkphaqtnejufljqz\":\"datatwlpuur\",\"cxyxepllb\":\"dataixlzaavvuvhyerj\"}},{\"activity\":\"eepf\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Succeeded\",\"Failed\"],\"\":{\"bqpgncscwsefd\":\"datawfqjweigyw\",\"l\":\"datansuao\"}}],\"userProperties\":[{\"name\":\"yjdcvnanejmc\",\"value\":\"datallec\"}],\"\":{\"ofxkelwvcyprpog\":\"datafgyhkv\",\"ochpzcgs\":\"dataqvuftkiyghcmpyki\",\"t\":\"datapklfnst\",\"tkzesfdrsgf\":\"datapww\"}},{\"type\":\"Activity\",\"name\":\"dshdwivep\",\"description\":\"trfunmkcj\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"dukrjjfnexuqalwj\",\"dependencyConditions\":[\"Completed\",\"Skipped\"],\"\":{\"jdcehlgr\":\"datazemdffy\",\"ubfotgi\":\"datav\",\"x\":\"dataporioki\",\"dtn\":\"datafftt\"}},{\"activity\":\"lggtr\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Succeeded\",\"Skipped\"],\"\":{\"sguladdujzenagm\":\"dataqcinjejyinl\",\"gibmngbkqcprbw\":\"datahmgtbqzftm\",\"mgyjvjyxueuq\":\"datandlold\",\"gxak\":\"databgbs\"}},{\"activity\":\"kbryolzbmdntajgg\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Completed\",\"Completed\"],\"\":{\"s\":\"datamsbhdixzao\",\"fuwtlu\":\"datanxgk\"}}],\"userProperties\":[{\"name\":\"wwfeixmueu\",\"value\":\"datapivsltlyqcrpwndc\"},{\"name\":\"rdqcmsrzrcddl\",\"value\":\"datagaoptwqf\"}],\"\":{\"dpmez\":\"datacondaoptr\"}},{\"type\":\"Activity\",\"name\":\"loflcilrafkrvv\",\"description\":\"knymqzmuinuvtgjg\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"uoslz\",\"dependencyConditions\":[\"Completed\",\"Failed\"],\"\":{\"cvcnevkfkmenawsv\":\"datavwcjrbjgdvwa\"}},{\"activity\":\"imq\",\"dependencyConditions\":[\"Succeeded\",\"Completed\"],\"\":{\"comqyqvywzhb\":\"dataxgsuuapktfvemwf\"}},{\"activity\":\"kl\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Failed\"],\"\":{\"snfeybkhyqouzzp\":\"datapsqkv\",\"zsnvtlhnmydshg\":\"datanl\",\"zyqnfsjnrfpzlv\":\"datadvwshc\",\"vvrk\":\"dataeojnskekhmo\"}}],\"userProperties\":[{\"name\":\"fazsiizcwha\",\"value\":\"datajhaetyeafj\"},{\"name\":\"ismacacdyajy\",\"value\":\"datawvqlrzobvkgfp\"},{\"name\":\"bjavnkyqrjbzrz\",\"value\":\"datahthukuypyeof\"},{\"name\":\"aeabbxkldtw\",\"value\":\"dataryc\"}],\"\":{\"ilcdbudfwl\":\"dataldgbgua\"}},{\"type\":\"Activity\",\"name\":\"gp\",\"description\":\"rfkslgpl\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"hgpzqibqilcntmu\",\"dependencyConditions\":[\"Completed\"],\"\":{\"aawentkokndjwpx\":\"dataarj\",\"wnnvtlbclg\":\"dataanjqfwxicb\"}},{\"activity\":\"kfwofweayowzp\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Succeeded\"],\"\":{\"asxuhiwymmii\":\"datamuzpdjthpsy\",\"p\":\"dataffjgjmysn\"}},{\"activity\":\"rzqagmcivsqawia\",\"dependencyConditions\":[\"Failed\",\"Succeeded\"],\"\":{\"zakqgabrb\":\"dataeuitkfvdjg\",\"wuy\":\"datauxg\",\"hrxjiw\":\"dataulozdoi\"}},{\"activity\":\"iv\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Succeeded\"],\"\":{\"ciokbvft\":\"datacwnbqlaubazyri\",\"nsllfkcroviim\":\"dataah\",\"w\":\"datadlmag\"}}],\"userProperties\":[{\"name\":\"xtendfpdoxt\",\"value\":\"datafosxxkktkloj\"},{\"name\":\"gsbyst\",\"value\":\"datanwjgsvlleflir\"}],\"\":{\"tufmujadippdntun\":\"dataptvkjdowuzasd\",\"xmaacrqrovbozj\":\"datapeeprmeb\"}}]}")
            .toObject(ForEachActivityTypeProperties.class);
        Assertions.assertEquals(false, model.isSequential());
        Assertions.assertEquals(201071910, model.batchCount());
        Assertions.assertEquals("mlhgytkthevodd", model.items().value());
        Assertions.assertEquals("egw", model.activities().get(0).name());
        Assertions.assertEquals("xdfdjftcrj", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("txtc", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("yjdcvnanejmc", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForEachActivityTypeProperties model
            = new ForEachActivityTypeProperties().withIsSequential(false)
                .withBatchCount(201071910)
                .withItems(new Expression().withValue("mlhgytkthevodd"))
                .withActivities(
                    Arrays
                        .asList(
                            new Activity().withName("egw")
                                .withDescription("xdfdjftcrj")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("txtc")
                                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                            DependencyCondition.SUCCEEDED))
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("eepf")
                                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                            DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED,
                                            DependencyCondition.FAILED))
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays.asList(new UserProperty().withName("yjdcvnanejmc").withValue("datallec")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("dshdwivep")
                                .withDescription("trfunmkcj")
                                .withState(ActivityState.ACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                                .withDependsOn(
                                    Arrays
                                        .asList(
                                            new ActivityDependency().withActivity("dukrjjfnexuqalwj")
                                                .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                                                    DependencyCondition.SKIPPED))
                                                .withAdditionalProperties(mapOf()),
                                            new ActivityDependency().withActivity("lggtr")
                                                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                                    DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED,
                                                    DependencyCondition.SKIPPED))
                                                .withAdditionalProperties(mapOf()),
                                            new ActivityDependency().withActivity("kbryolzbmdntajgg")
                                                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                                    DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED,
                                                    DependencyCondition.COMPLETED))
                                                .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays
                                    .asList(new UserProperty().withName("wwfeixmueu").withValue("datapivsltlyqcrpwndc"),
                                        new UserProperty().withName("rdqcmsrzrcddl").withValue("datagaoptwqf")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("loflcilrafkrvv")
                                .withDescription("knymqzmuinuvtgjg")
                                .withState(ActivityState.ACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                                .withDependsOn(
                                    Arrays.asList(
                                        new ActivityDependency().withActivity("uoslz")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                                                DependencyCondition.FAILED))
                                            .withAdditionalProperties(mapOf()),
                                        new ActivityDependency().withActivity("imq")
                                            .withDependencyConditions(Arrays
                                                .asList(DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                                            .withAdditionalProperties(mapOf()),
                                        new ActivityDependency().withActivity("kl")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                                DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                                            .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays.asList(
                                    new UserProperty().withName("fazsiizcwha").withValue("datajhaetyeafj"),
                                    new UserProperty().withName("ismacacdyajy").withValue("datawvqlrzobvkgfp"),
                                    new UserProperty().withName("bjavnkyqrjbzrz").withValue("datahthukuypyeof"),
                                    new UserProperty().withName("aeabbxkldtw").withValue("dataryc")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("gp")
                                .withDescription("rfkslgpl")
                                .withState(ActivityState.ACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("hgpzqibqilcntmu")
                                        .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("kfwofweayowzp")
                                        .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                                            DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("rzqagmcivsqawia")
                                        .withDependencyConditions(
                                            Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("iv")
                                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                            DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays.asList(
                                    new UserProperty().withName("xtendfpdoxt").withValue("datafosxxkktkloj"),
                                    new UserProperty().withName("gsbyst").withValue("datanwjgsvlleflir")))
                                .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(ForEachActivityTypeProperties.class);
        Assertions.assertEquals(false, model.isSequential());
        Assertions.assertEquals(201071910, model.batchCount());
        Assertions.assertEquals("mlhgytkthevodd", model.items().value());
        Assertions.assertEquals("egw", model.activities().get(0).name());
        Assertions.assertEquals("xdfdjftcrj", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("txtc", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("yjdcvnanejmc", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
