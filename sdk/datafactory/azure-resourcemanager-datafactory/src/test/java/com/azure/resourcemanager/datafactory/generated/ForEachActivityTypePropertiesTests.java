// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ForEachActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForEachActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForEachActivityTypeProperties model = BinaryData.fromString(
            "{\"isSequential\":false,\"batchCount\":257323877,\"items\":{\"value\":\"zif\"},\"activities\":[{\"type\":\"Activity\",\"name\":\"bmeksegdjq\",\"description\":\"ch\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"imenjhtwkn\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Succeeded\"],\"\":{\"lp\":\"datayvno\",\"qkuxajl\":\"datalmjbssxqu\"}},{\"activity\":\"iffzpkrno\",\"dependencyConditions\":[\"Failed\",\"Completed\"],\"\":{\"w\":\"datadir\",\"irxngmmv\":\"datanmaiqdj\"}},{\"activity\":\"rxoidmnsmd\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"fi\":\"datalhkcogxrsb\",\"n\":\"datachfxmedybj\",\"mpzbxqfm\":\"dataoaeudhvszw\",\"djushzfn\":\"dataypwglkvsp\"}}],\"userProperties\":[{\"name\":\"rdsmrvp\",\"value\":\"datawewgda\"},{\"name\":\"hzdhszk\",\"value\":\"datadlilkw\"}],\"\":{\"fxnokpkgrub\":\"datayvdabgctmfntl\",\"hdkx\":\"datazgz\",\"rhgelsvo\":\"datahlinjerkdurch\"}},{\"type\":\"Activity\",\"name\":\"vqjthluo\",\"description\":\"qhq\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"adwsentrcdzyv\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Failed\",\"Succeeded\"],\"\":{\"uvxmrbbgl\":\"datauwpqvd\"}},{\"activity\":\"wfbgkyonadtywzrn\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Completed\"],\"\":{\"cfprioabqxwid\":\"dataptxmdadfygj\"}},{\"activity\":\"xeonnolrsmxt\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Succeeded\"],\"\":{\"uotexlpqydgfzet\":\"dataaxmo\"}},{\"activity\":\"armnseigoalxwuqu\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Skipped\",\"Completed\"],\"\":{\"pqzz\":\"datag\",\"mlxog\":\"dataxhgh\"}}],\"userProperties\":[{\"name\":\"hxyx\",\"value\":\"datalxawixdcy\"},{\"name\":\"dqamiy\",\"value\":\"datab\"},{\"name\":\"zlbcamdzoauvwjkg\",\"value\":\"datazco\"},{\"name\":\"wcnnzacqludq\",\"value\":\"dataaqxztywzaq\"}],\"\":{\"lzpowse\":\"datatstmyfebbt\"}},{\"type\":\"Activity\",\"name\":\"pgkwtpzbsytwthv\",\"description\":\"tsvgyzmafqsn\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"vwej\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"hrxoekyf\":\"datazq\",\"nsmh\":\"datavxcompd\",\"xjaaocjl\":\"datapzbyudkoa\"}},{\"activity\":\"cou\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Failed\",\"Failed\"],\"\":{\"iukvmzxr\":\"datamkzb\",\"jbklt\":\"dataveyngzj\",\"cqhlfqimjlde\":\"datahguvqghueh\",\"ltvvpudhtdapkdah\":\"datauqqnforujfluom\"}},{\"activity\":\"nxtixrkjo\",\"dependencyConditions\":[\"Failed\",\"Failed\"],\"\":{\"xuibyfylh\":\"dataeicl\",\"uqylmlunquvl\":\"datawqp\"}},{\"activity\":\"al\",\"dependencyConditions\":[\"Failed\"],\"\":{\"gynqedn\":\"datalx\",\"qcxzdlfs\":\"dataidacskul\"}}],\"userProperties\":[{\"name\":\"jvsgrcrknn\",\"value\":\"datauceuwfmrckatnjik\"},{\"name\":\"zhtovs\",\"value\":\"dataieoth\"},{\"name\":\"wokprvpkdkds\",\"value\":\"datasmavtn\"},{\"name\":\"gfmtximnpcghcfud\",\"value\":\"dataqefdtpurgerybdi\"}],\"\":{\"xcdwlkkglahdwxyi\":\"dataeahwerukuoey\"}},{\"type\":\"Activity\",\"name\":\"ezfoekaxhjvtfzaq\",\"description\":\"qgfyofoh\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"rhgwgsba\",\"dependencyConditions\":[\"Succeeded\",\"Failed\"],\"\":{\"zsirhp\":\"datakuzifsguolfkupmw\"}},{\"activity\":\"gqdz\",\"dependencyConditions\":[\"Completed\"],\"\":{\"uddbzxidqqesl\":\"datayywbssliphc\",\"utrlzzztg\":\"dataaoxke\",\"zuvsjblqmddtp\":\"datafzyxamyjhp\",\"joboqts\":\"dataily\"}},{\"activity\":\"d\",\"dependencyConditions\":[\"Failed\"],\"\":{\"fmtm\":\"datacuv\",\"gtskolbjylostrc\":\"datapvoazgtlxgtusw\"}}],\"userProperties\":[{\"name\":\"ce\",\"value\":\"databwaiqs\"}],\"\":{\"anhe\":\"dataigelphauldalsp\",\"hv\":\"datawxllqyvblfprskxh\",\"ipibnj\":\"dataviycjulunbtufi\",\"oabma\":\"dataivoizxk\"}}]}")
            .toObject(ForEachActivityTypeProperties.class);
        Assertions.assertEquals(false, model.isSequential());
        Assertions.assertEquals(257323877, model.batchCount());
        Assertions.assertEquals("zif", model.items().value());
        Assertions.assertEquals("bmeksegdjq", model.activities().get(0).name());
        Assertions.assertEquals("ch", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("imenjhtwkn", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("rdsmrvp", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForEachActivityTypeProperties model
            = new ForEachActivityTypeProperties().withIsSequential(false).withBatchCount(257323877)
                .withItems(
                    new Expression().withValue("zif"))
                .withActivities(Arrays.asList(
                    new Activity().withName("bmeksegdjq").withDescription("ch").withState(ActivityState.ACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                        .withDependsOn(Arrays.asList(
                            new ActivityDependency().withActivity("imenjhtwkn")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                    DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("iffzpkrno")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.FAILED, DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("rxoidmnsmd")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf())))
                        .withUserProperties(Arrays.asList(
                            new UserProperty().withName("rdsmrvp").withValue("datawewgda"),
                            new UserProperty().withName("hzdhszk").withValue("datadlilkw")))
                        .withAdditionalProperties(mapOf("type", "Activity")),
                    new Activity().withName("vqjthluo").withDescription("qhq").withState(ActivityState.INACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                        .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("adwsentrcdzyv")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                                DependencyCondition.FAILED, DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("wfbgkyonadtywzrn")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                    DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("xeonnolrsmxt")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                    DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("armnseigoalxwuqu")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED,
                                        DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf())))
                        .withUserProperties(
                            Arrays.asList(new UserProperty().withName("hxyx").withValue("datalxawixdcy"),
                                new UserProperty().withName("dqamiy").withValue("datab"),
                                new UserProperty().withName("zlbcamdzoauvwjkg")
                                    .withValue("datazco"),
                                new UserProperty().withName("wcnnzacqludq").withValue("dataaqxztywzaq")))
                        .withAdditionalProperties(mapOf("type", "Activity")),
                    new Activity().withName("pgkwtpzbsytwthv").withDescription("tsvgyzmafqsn")
                        .withState(ActivityState.ACTIVE).withOnInactiveMarkAs(
                            ActivityOnInactiveMarkAs.SKIPPED)
                        .withDependsOn(Arrays.asList(
                            new ActivityDependency().withActivity("vwej")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("cou")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED,
                                        DependencyCondition.FAILED, DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("nxtixrkjo")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("al")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf())))
                        .withUserProperties(
                            Arrays.asList(new UserProperty().withName("jvsgrcrknn").withValue("datauceuwfmrckatnjik"),
                                new UserProperty().withName("zhtovs").withValue("dataieoth"),
                                new UserProperty().withName("wokprvpkdkds")
                                    .withValue("datasmavtn"),
                                new UserProperty().withName("gfmtximnpcghcfud").withValue("dataqefdtpurgerybdi")))
                        .withAdditionalProperties(mapOf("type", "Activity")),
                    new Activity().withName("ezfoekaxhjvtfzaq").withDescription("qgfyofoh")
                        .withState(ActivityState.ACTIVE).withOnInactiveMarkAs(
                            ActivityOnInactiveMarkAs.SKIPPED)
                        .withDependsOn(Arrays.asList(
                            new ActivityDependency().withActivity("rhgwgsba")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("gqdz")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("d")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf())))
                        .withUserProperties(Arrays.asList(new UserProperty().withName("ce").withValue("databwaiqs")))
                        .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(ForEachActivityTypeProperties.class);
        Assertions.assertEquals(false, model.isSequential());
        Assertions.assertEquals(257323877, model.batchCount());
        Assertions.assertEquals("zif", model.items().value());
        Assertions.assertEquals("bmeksegdjq", model.activities().get(0).name());
        Assertions.assertEquals("ch", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("imenjhtwkn", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("rdsmrvp", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
