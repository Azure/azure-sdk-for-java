// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ForEachActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForEachActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForEachActivityTypeProperties model = BinaryData.fromString(
            "{\"isSequential\":false,\"batchCount\":2091562260,\"items\":{\"value\":\"efwnjsorhpgavro\"},\"activities\":[{\"type\":\"Activity\",\"name\":\"oezcabfylsuiy\",\"description\":\"ildwq\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"i\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Succeeded\",\"Failed\"],\"\":{\"indyurwzrxkha\":\"datadvdtzdrvaxsw\",\"btvcdslpbvponx\":\"datavsja\",\"tunnkbekzk\":\"dataszr\"}},{\"activity\":\"oonbzi\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Completed\",\"Succeeded\"],\"\":{\"kjzvvkeh\":\"dataw\"}},{\"activity\":\"sxjmfhbseqxw\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"rdf\":\"datatq\",\"uuanrjcrpxlf\":\"dataiqfvc\",\"kmlfcgk\":\"dataytjmlroxvsclmt\",\"bestyy\":\"dataeitphzuaznsbvu\"}},{\"activity\":\"ljo\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Succeeded\"],\"\":{\"izsekfu\":\"datarnyx\",\"fwawzjhfauu\":\"dataranmd\"}}],\"userProperties\":[{\"name\":\"nafxwhicacmviclh\",\"value\":\"datam\"}],\"\":{\"fzbavqmmkmqdfjeu\":\"dataxtegrufbzgnr\",\"juqvywol\":\"datawqstczpskzplbz\"}},{\"type\":\"Activity\",\"name\":\"cxdc\",\"description\":\"hehbo\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"p\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\"],\"\":{\"iyzvfott\":\"datahexgxnmfod\",\"spglcbhahxsjxur\":\"datacfostzdx\",\"jgrbjmzagxjoimoz\":\"datahpihtxgjzifyh\",\"pscrfbdttcfwjzqu\":\"datae\"}},{\"activity\":\"jgfihl\",\"dependencyConditions\":[\"Failed\"],\"\":{\"bkf\":\"datar\",\"bhsnyycy\":\"datafxvggk\",\"mblkkelzjk\":\"datajijzrtlfngon\"}},{\"activity\":\"emneu\",\"dependencyConditions\":[\"Failed\",\"Skipped\"],\"\":{\"xgczwxyghsppmvxc\":\"datacafkqvcfzrg\",\"achygbeofi\":\"datazpdq\",\"rafh\":\"databtfkiulmfhgzsx\"}},{\"activity\":\"fkukaa\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Skipped\",\"Completed\"],\"\":{\"easmk\":\"datahuvflgwgqhe\",\"vcp\":\"dataguodoujpwqbot\",\"qruympov\":\"dataxxpyrtajlydefqfv\"}}],\"userProperties\":[{\"name\":\"qdwb\",\"value\":\"datahgjzvc\"},{\"name\":\"yxvfoyuykrdgg\",\"value\":\"datahpuhccleh\"},{\"name\":\"dbutptyabd\",\"value\":\"databkblopemorfzuhvy\"}],\"\":{\"ddp\":\"datadczmzsfvriskpl\",\"wthzmqab\":\"datacqinvkmkbtp\",\"shraepcl\":\"datawbgsanvdrrmb\",\"hrzeibku\":\"datazmegqt\"}}]}")
            .toObject(ForEachActivityTypeProperties.class);
        Assertions.assertEquals(false, model.isSequential());
        Assertions.assertEquals(2091562260, model.batchCount());
        Assertions.assertEquals("efwnjsorhpgavro", model.items().value());
        Assertions.assertEquals("oezcabfylsuiy", model.activities().get(0).name());
        Assertions.assertEquals("ildwq", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("i", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("nafxwhicacmviclh", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForEachActivityTypeProperties model = new ForEachActivityTypeProperties().withIsSequential(false)
            .withBatchCount(2091562260)
            .withItems(new Expression().withValue("efwnjsorhpgavro"))
            .withActivities(Arrays.asList(
                new Activity().withName("oezcabfylsuiy")
                    .withDescription("ildwq")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(new ActivityDependency()
                        .withActivity("i")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED,
                                DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("oonbzi")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED,
                                    DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("sxjmfhbseqxw")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("ljo")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                                DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("nafxwhicacmviclh").withValue("datam")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("cxdc")
                    .withDescription("hehbo")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("p")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("jgfihl")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("emneu")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("fkukaa")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.FAILED, DependencyCondition.COMPLETED,
                                    DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("qdwb").withValue("datahgjzvc"),
                        new UserProperty().withName("yxvfoyuykrdgg").withValue("datahpuhccleh"),
                        new UserProperty().withName("dbutptyabd").withValue("databkblopemorfzuhvy")))
                    .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(ForEachActivityTypeProperties.class);
        Assertions.assertEquals(false, model.isSequential());
        Assertions.assertEquals(2091562260, model.batchCount());
        Assertions.assertEquals("efwnjsorhpgavro", model.items().value());
        Assertions.assertEquals("oezcabfylsuiy", model.activities().get(0).name());
        Assertions.assertEquals("ildwq", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("i", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("nafxwhicacmviclh", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
