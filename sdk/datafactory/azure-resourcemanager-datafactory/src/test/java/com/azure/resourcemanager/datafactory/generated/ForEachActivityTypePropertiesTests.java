// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ForEachActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForEachActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForEachActivityTypeProperties model = BinaryData.fromString(
            "{\"isSequential\":false,\"batchCount\":371055937,\"items\":{\"value\":\"jahhcbzoaryhcxmf\"},\"activities\":[{\"type\":\"Activity\",\"name\":\"mqlcooyxfrrdbdy\",\"description\":\"fmycgucccb\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"turlnbmj\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Succeeded\"],\"\":{\"hltgteg\":\"dataamoz\"}},{\"activity\":\"nguvjryfcxscrs\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Failed\",\"Failed\"],\"\":{\"j\":\"dataemkxmvqaimnfgf\",\"mrawmchcd\":\"datatbysvweuetoeqfn\"}},{\"activity\":\"gw\",\"dependencyConditions\":[\"Skipped\",\"Failed\"],\"\":{\"ahnimkndujywg\":\"datawfjwfkwrthpgqm\",\"ttjducosxcdhtovt\":\"datafylymuwafslyt\",\"vkiwjbufz\":\"datafwpmpapwmpd\"}}],\"userProperties\":[{\"name\":\"jfvud\",\"value\":\"datagwkyykhe\"},{\"name\":\"gapraafjxgoj\",\"value\":\"dataiupjgeb\"},{\"name\":\"suiklncqoyghrba\",\"value\":\"dataxywojux\"},{\"name\":\"fpcvblyeoyn\",\"value\":\"datahxkq\"}],\"\":{\"kkhrphvmezdfa\":\"datafuhsupifgizkv\",\"kwem\":\"datart\",\"eklgunpa\":\"dataonu\"}},{\"type\":\"Activity\",\"name\":\"w\",\"description\":\"xctdpj\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"mookh\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Skipped\",\"Completed\"],\"\":{\"iacvttdyv\":\"datatxulnntjiucno\"}},{\"activity\":\"flt\",\"dependencyConditions\":[\"Failed\"],\"\":{\"xztjece\":\"datafyllkunwinqywlvx\",\"jlkjhmugyayhp\":\"dataqhpkqkxjl\",\"soi\":\"datastlsdgiqgeeqcgu\",\"wkkykaz\":\"dataevrglzx\"}},{\"activity\":\"daqxnkdqsyhm\",\"dependencyConditions\":[\"Failed\"],\"\":{\"xjezystirrhbkzz\":\"datafgvhwkw\",\"dazmmgsx\":\"datawikqkxduhydxahj\",\"myludflf\":\"datalwofo\"}}],\"userProperties\":[{\"name\":\"whtpykfc\",\"value\":\"datacaujgacckjq\"},{\"name\":\"pj\",\"value\":\"datadbgmgxbvge\"}],\"\":{\"digx\":\"datantdynpi\",\"vliqgawen\":\"datafscsrwliuteusu\",\"q\":\"datatmvzzs\",\"oc\":\"datavwgizvvtdr\"}},{\"type\":\"Activity\",\"name\":\"zgfnphfppjzmpxam\",\"description\":\"dostvxtk\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"rbkko\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Failed\",\"Succeeded\"],\"\":{\"dr\":\"datafzerkpaivk\"}},{\"activity\":\"kvn\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Skipped\",\"Failed\"],\"\":{\"hz\":\"datanfwslvspar\"}},{\"activity\":\"ynbxwzixmv\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Failed\",\"Failed\"],\"\":{\"xsjygig\":\"dataawzxn\",\"hpqeyzzydpv\":\"datapfokslcns\"}}],\"userProperties\":[{\"name\":\"hdjarfdfnq\",\"value\":\"datavrs\"},{\"name\":\"lhgnlbvbdq\",\"value\":\"datajcedfpubnxoohy\"},{\"name\":\"smlscvhra\",\"value\":\"dataybbor\"},{\"name\":\"dxhkdy\",\"value\":\"datadkufqzuduq\"}],\"\":{\"xtplpg\":\"datai\",\"bszcvcegl\":\"datatzugkfabvekkxl\"}},{\"type\":\"Activity\",\"name\":\"zh\",\"description\":\"vv\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"azaoytkubmv\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Failed\",\"Failed\"],\"\":{\"iitzbyue\":\"datasqesspwutkjrqspw\"}},{\"activity\":\"umqmor\",\"dependencyConditions\":[\"Completed\",\"Skipped\"],\"\":{\"isrvlunyqen\":\"datamwd\",\"cfqzmjmf\":\"datarerzthcfnrlesgh\",\"kgklqucxewcd\":\"dataczzlkmtrrcbulvau\"}}],\"userProperties\":[{\"name\":\"jsm\",\"value\":\"datakqz\"}],\"\":{\"xzabxhmdorxbuap\":\"dataqiqydllhimvnvx\",\"oe\":\"datak\",\"cy\":\"dataicrtibad\"}}]}")
            .toObject(ForEachActivityTypeProperties.class);
        Assertions.assertEquals(false, model.isSequential());
        Assertions.assertEquals(371055937, model.batchCount());
        Assertions.assertEquals("jahhcbzoaryhcxmf", model.items().value());
        Assertions.assertEquals("mqlcooyxfrrdbdy", model.activities().get(0).name());
        Assertions.assertEquals("fmycgucccb", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("turlnbmj", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jfvud", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForEachActivityTypeProperties model = new ForEachActivityTypeProperties().withIsSequential(false)
            .withBatchCount(371055937)
            .withItems(new Expression().withValue("jahhcbzoaryhcxmf"))
            .withActivities(Arrays.asList(
                new Activity().withName("mqlcooyxfrrdbdy")
                    .withDescription("fmycgucccb")
                    .withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("turlnbmj")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("nguvjryfcxscrs")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                                DependencyCondition.SKIPPED, DependencyCondition.FAILED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("gw")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("jfvud").withValue("datagwkyykhe"),
                        new UserProperty().withName("gapraafjxgoj").withValue("dataiupjgeb"),
                        new UserProperty().withName("suiklncqoyghrba").withValue("dataxywojux"),
                        new UserProperty().withName("fpcvblyeoyn").withValue("datahxkq")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("w")
                    .withDescription("xctdpj")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("mookh")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                            DependencyCondition.SKIPPED, DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                        .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("flt")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("daqxnkdqsyhm")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("whtpykfc").withValue("datacaujgacckjq"),
                            new UserProperty().withName("pj").withValue("datadbgmgxbvge")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("zgfnphfppjzmpxam")
                    .withDescription("dostvxtk")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("rbkko")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                                DependencyCondition.SKIPPED, DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("kvn")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                                DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("ynbxwzixmv")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                DependencyCondition.SKIPPED, DependencyCondition.FAILED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("hdjarfdfnq").withValue("datavrs"),
                        new UserProperty().withName("lhgnlbvbdq").withValue("datajcedfpubnxoohy"),
                        new UserProperty().withName("smlscvhra").withValue("dataybbor"),
                        new UserProperty().withName("dxhkdy").withValue("datadkufqzuduq")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("zh")
                    .withDescription("vv")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("azaoytkubmv")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                                DependencyCondition.SKIPPED, DependencyCondition.FAILED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("umqmor")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("jsm").withValue("datakqz")))
                    .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(ForEachActivityTypeProperties.class);
        Assertions.assertEquals(false, model.isSequential());
        Assertions.assertEquals(371055937, model.batchCount());
        Assertions.assertEquals("jahhcbzoaryhcxmf", model.items().value());
        Assertions.assertEquals("mqlcooyxfrrdbdy", model.activities().get(0).name());
        Assertions.assertEquals("fmycgucccb", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("turlnbmj", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jfvud", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
