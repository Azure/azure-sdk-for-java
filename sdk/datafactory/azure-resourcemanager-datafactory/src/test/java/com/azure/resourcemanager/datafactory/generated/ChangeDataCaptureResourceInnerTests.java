// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ChangeDataCaptureResourceInner;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureFolder;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.DataMapperMapping;
import com.azure.resourcemanager.datafactory.models.FrequencyType;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MapperAttributeMappings;
import com.azure.resourcemanager.datafactory.models.MapperConnection;
import com.azure.resourcemanager.datafactory.models.MapperConnectionReference;
import com.azure.resourcemanager.datafactory.models.MapperDslConnectorProperties;
import com.azure.resourcemanager.datafactory.models.MapperPolicy;
import com.azure.resourcemanager.datafactory.models.MapperPolicyRecurrence;
import com.azure.resourcemanager.datafactory.models.MapperSourceConnectionsInfo;
import com.azure.resourcemanager.datafactory.models.MapperTable;
import com.azure.resourcemanager.datafactory.models.MapperTargetConnectionsInfo;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ChangeDataCaptureResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChangeDataCaptureResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"folder\":{\"name\":\"lfpya\"},\"description\":\"cygvoavyunssx\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{\"name\":\"egjlgvvpa\",\"properties\":{}},{\"name\":\"sgb\",\"properties\":{}}],\"connection\":{\"linkedService\":{\"referenceName\":\"tu\",\"parameters\":{\"fulopmjnlexwhcb\":\"datahgaqipirpiwrq\"}},\"linkedServiceType\":\"ibkeph\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{},{},{},{}]}},{\"sourceEntities\":[{\"name\":\"oyin\",\"properties\":{}},{\"name\":\"brlc\",\"properties\":{}},{\"name\":\"uczkgofxyfsruc\",\"properties\":{}},{\"name\":\"rpcjttbstvjeaqnr\",\"properties\":{}}],\"connection\":{\"linkedService\":{\"referenceName\":\"koxmlghk\",\"parameters\":{\"wex\":\"datadvrmazlpd\",\"wvqsgny\":\"datamzvlazipbh\"}},\"linkedServiceType\":\"uzivensrpmeyyvp\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{},{}]}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{\"name\":\"gsksrfhf\",\"properties\":{}},{\"name\":\"mknbnxwcdommpv\",\"properties\":{}}],\"connection\":{\"linkedService\":{\"referenceName\":\"zfgbrttuiaclkie\",\"parameters\":{\"yuttdiygbpvnwswm\":\"datajlfnthiq\",\"l\":\"dataxkyctwwgzwx\",\"ygzyvneezaifght\":\"dataecvo\"}},\"linkedServiceType\":\"qqtlffhzbkrkj\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{},{}]},\"dataMapperMappings\":[{\"targetEntityName\":\"nq\",\"sourceEntityName\":\"wdogiyetesyp\",\"sourceConnectionReference\":{},\"attributeMappingInfo\":{},\"sourceDenormalizeInfo\":\"dataztjhqtfbovnynkbw\"},{\"targetEntityName\":\"njuhpsprkzya\",\"sourceEntityName\":\"ia\",\"sourceConnectionReference\":{},\"attributeMappingInfo\":{},\"sourceDenormalizeInfo\":\"dataafbwqroohtuovmao\"}],\"relationships\":[\"datajtumgh\",\"datahpv\",\"datacmslclblyjxltbs\"]}],\"policy\":{\"mode\":\"scvsfxigctm\",\"recurrence\":{\"frequency\":\"Hour\",\"interval\":45764322}},\"allowVNetOverride\":true,\"status\":\"ccyd\"},\"name\":\"ceukdqkkyihztg\",\"type\":\"mgqzgwldoyc\",\"etag\":\"llcecfehuwaoa\",\"\":{\"lizst\":\"dataicq\"},\"id\":\"sjvh\"}")
            .toObject(ChangeDataCaptureResourceInner.class);
        Assertions.assertEquals("sjvh", model.id());
        Assertions.assertEquals("lfpya", model.folder().name());
        Assertions.assertEquals("cygvoavyunssx", model.description());
        Assertions.assertEquals("egjlgvvpa", model.sourceConnectionsInfo().get(0).sourceEntities().get(0).name());
        Assertions.assertEquals("tu",
            model.sourceConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("ibkeph", model.sourceConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(true, model.sourceConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("gsksrfhf", model.targetConnectionsInfo().get(0).targetEntities().get(0).name());
        Assertions.assertEquals("zfgbrttuiaclkie",
            model.targetConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("qqtlffhzbkrkj", model.targetConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(true, model.targetConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("nq",
            model.targetConnectionsInfo().get(0).dataMapperMappings().get(0).targetEntityName());
        Assertions.assertEquals("wdogiyetesyp",
            model.targetConnectionsInfo().get(0).dataMapperMappings().get(0).sourceEntityName());
        Assertions.assertEquals("scvsfxigctm", model.policy().mode());
        Assertions.assertEquals(FrequencyType.HOUR, model.policy().recurrence().frequency());
        Assertions.assertEquals(45764322, model.policy().recurrence().interval());
        Assertions.assertEquals(true, model.allowVNetOverride());
        Assertions.assertEquals("ccyd", model.status());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChangeDataCaptureResourceInner model = new ChangeDataCaptureResourceInner().withId("sjvh")
            .withFolder(new ChangeDataCaptureFolder().withName("lfpya"))
            .withDescription("cygvoavyunssx")
            .withSourceConnectionsInfo(Arrays.asList(
                new MapperSourceConnectionsInfo()
                    .withSourceEntities(
                        Arrays.asList(new MapperTable().withName("egjlgvvpa"), new MapperTable().withName("sgb")))
                    .withConnection(new MapperConnection()
                        .withLinkedService(new LinkedServiceReference().withReferenceName("tu")
                            .withParameters(mapOf("fulopmjnlexwhcb", "datahgaqipirpiwrq")))
                        .withLinkedServiceType("ibkeph")
                        .withType(ConnectionType.LINKEDSERVICETYPE)
                        .withIsInlineDataset(true)
                        .withCommonDslConnectorProperties(
                            Arrays.asList(new MapperDslConnectorProperties(), new MapperDslConnectorProperties(),
                                new MapperDslConnectorProperties(), new MapperDslConnectorProperties()))),
                new MapperSourceConnectionsInfo()
                    .withSourceEntities(Arrays.asList(new MapperTable().withName("oyin"),
                        new MapperTable().withName("brlc"), new MapperTable().withName("uczkgofxyfsruc"),
                        new MapperTable().withName("rpcjttbstvjeaqnr")))
                    .withConnection(new MapperConnection()
                        .withLinkedService(new LinkedServiceReference().withReferenceName("koxmlghk")
                            .withParameters(mapOf("wex", "datadvrmazlpd", "wvqsgny", "datamzvlazipbh")))
                        .withLinkedServiceType("uzivensrpmeyyvp")
                        .withType(ConnectionType.LINKEDSERVICETYPE)
                        .withIsInlineDataset(false)
                        .withCommonDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties(),
                            new MapperDslConnectorProperties(), new MapperDslConnectorProperties())))))
            .withTargetConnectionsInfo(
                Arrays
                    .asList(
                        new MapperTargetConnectionsInfo()
                            .withTargetEntities(Arrays.asList(new MapperTable().withName("gsksrfhf"),
                                new MapperTable().withName("mknbnxwcdommpv")))
                            .withConnection(new MapperConnection()
                                .withLinkedService(new LinkedServiceReference().withReferenceName("zfgbrttuiaclkie")
                                    .withParameters(mapOf("yuttdiygbpvnwswm", "datajlfnthiq", "l", "dataxkyctwwgzwx",
                                        "ygzyvneezaifght", "dataecvo")))
                                .withLinkedServiceType("qqtlffhzbkrkj")
                                .withType(ConnectionType.LINKEDSERVICETYPE)
                                .withIsInlineDataset(true)
                                .withCommonDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties(),
                                    new MapperDslConnectorProperties())))
                            .withDataMapperMappings(Arrays.asList(
                                new DataMapperMapping().withTargetEntityName("nq")
                                    .withSourceEntityName("wdogiyetesyp")
                                    .withSourceConnectionReference(new MapperConnectionReference())
                                    .withAttributeMappingInfo(new MapperAttributeMappings())
                                    .withSourceDenormalizeInfo("dataztjhqtfbovnynkbw"),
                                new DataMapperMapping().withTargetEntityName("njuhpsprkzya")
                                    .withSourceEntityName("ia")
                                    .withSourceConnectionReference(new MapperConnectionReference())
                                    .withAttributeMappingInfo(new MapperAttributeMappings())
                                    .withSourceDenormalizeInfo("dataafbwqroohtuovmao")))
                            .withRelationships(Arrays.asList("datajtumgh", "datahpv", "datacmslclblyjxltbs"))))
            .withPolicy(new MapperPolicy().withMode("scvsfxigctm")
                .withRecurrence(new MapperPolicyRecurrence().withFrequency(FrequencyType.HOUR).withInterval(45764322)))
            .withAllowVNetOverride(true)
            .withStatus("ccyd")
            .withAdditionalProperties(mapOf("name", "ceukdqkkyihztg", "etag", "llcecfehuwaoa", "type", "mgqzgwldoyc"));
        model = BinaryData.fromObject(model).toObject(ChangeDataCaptureResourceInner.class);
        Assertions.assertEquals("sjvh", model.id());
        Assertions.assertEquals("lfpya", model.folder().name());
        Assertions.assertEquals("cygvoavyunssx", model.description());
        Assertions.assertEquals("egjlgvvpa", model.sourceConnectionsInfo().get(0).sourceEntities().get(0).name());
        Assertions.assertEquals("tu",
            model.sourceConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("ibkeph", model.sourceConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(true, model.sourceConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("gsksrfhf", model.targetConnectionsInfo().get(0).targetEntities().get(0).name());
        Assertions.assertEquals("zfgbrttuiaclkie",
            model.targetConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("qqtlffhzbkrkj", model.targetConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(true, model.targetConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("nq",
            model.targetConnectionsInfo().get(0).dataMapperMappings().get(0).targetEntityName());
        Assertions.assertEquals("wdogiyetesyp",
            model.targetConnectionsInfo().get(0).dataMapperMappings().get(0).sourceEntityName());
        Assertions.assertEquals("scvsfxigctm", model.policy().mode());
        Assertions.assertEquals(FrequencyType.HOUR, model.policy().recurrence().frequency());
        Assertions.assertEquals(45764322, model.policy().recurrence().interval());
        Assertions.assertEquals(true, model.allowVNetOverride());
        Assertions.assertEquals("ccyd", model.status());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
