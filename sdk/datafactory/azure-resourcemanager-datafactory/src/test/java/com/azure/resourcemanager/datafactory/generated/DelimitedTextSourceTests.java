// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CompressionReadSettings;
import com.azure.resourcemanager.datafactory.models.DelimitedTextReadSettings;
import com.azure.resourcemanager.datafactory.models.DelimitedTextSource;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import java.util.HashMap;
import java.util.Map;

public final class DelimitedTextSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DelimitedTextSource model = BinaryData.fromString(
            "{\"type\":\"DelimitedTextSource\",\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"datav\",\"disableMetricsCollection\":\"datawdlduvimgtceor\",\"\":{\"afbjvbkjtgzk\":\"dataxta\"}},\"formatSettings\":{\"type\":\"DelimitedTextReadSettings\",\"skipLineCount\":\"dataavcipydnujgb\",\"compressionProperties\":{\"type\":\"CompressionReadSettings\",\"\":{\"xpzsl\":\"datazprvpuacajxdrgxp\",\"qzkfgesdz\":\"datafrypzrycc\"}},\"\":{\"hioj\":\"datajhekbmdh\",\"ysbme\":\"datarhgpityeuv\",\"bznl\":\"dataf\",\"eywyftvy\":\"datahbkup\"}},\"additionalColumns\":\"datayqzjfvbnyyjvzlsc\",\"sourceRetryCount\":\"datavvsxm\",\"sourceRetryWait\":\"datassgbscq\",\"maxConcurrentConnections\":\"dataixazebmmjaigaxwq\",\"disableMetricsCollection\":\"dataarct\",\"\":{\"whoosrsolhhv\":\"dataggtdvhokxxf\",\"giqhj\":\"datafoej\",\"udifierxxorsdvu\":\"datael\"}}")
            .toObject(DelimitedTextSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DelimitedTextSource model
            = new DelimitedTextSource().withSourceRetryCount("datavvsxm")
                .withSourceRetryWait("datassgbscq")
                .withMaxConcurrentConnections("dataixazebmmjaigaxwq")
                .withDisableMetricsCollection("dataarct")
                .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("datav")
                    .withDisableMetricsCollection("datawdlduvimgtceor")
                    .withAdditionalProperties(mapOf("type", "StoreReadSettings")))
                .withFormatSettings(new DelimitedTextReadSettings().withSkipLineCount("dataavcipydnujgb")
                    .withCompressionProperties(new CompressionReadSettings()
                        .withAdditionalProperties(mapOf("type", "CompressionReadSettings"))))
                .withAdditionalColumns("datayqzjfvbnyyjvzlsc");
        model = BinaryData.fromObject(model).toObject(DelimitedTextSource.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
