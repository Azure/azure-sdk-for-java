// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CompressionReadSettings;
import com.azure.resourcemanager.datafactory.models.DelimitedTextReadSettings;
import com.azure.resourcemanager.datafactory.models.DelimitedTextSource;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import java.util.HashMap;
import java.util.Map;

public final class DelimitedTextSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DelimitedTextSource model = BinaryData.fromString(
            "{\"type\":\"hoikemhohxab\",\"storeSettings\":{\"type\":\"ubhmiuxypvua\",\"maxConcurrentConnections\":\"datajtbnek\",\"disableMetricsCollection\":\"datazbfbuqeq\",\"\":{\"pp\":\"datazarr\"}},\"formatSettings\":{\"type\":\"ycxpzattaloo\",\"skipLineCount\":\"datayqnrjd\",\"compressionProperties\":{\"type\":\"arvzewo\",\"\":{\"romeawthycbigpi\":\"datapzxkjqecjf\",\"sulmuwlawa\":\"datatpxhzjnpa\",\"a\":\"dataheoxxqg\"}},\"\":{\"zslrprft\":\"datamxwt\"}},\"additionalColumns\":\"datafvouy\",\"sourceRetryCount\":\"dataoowpoogoz\",\"sourceRetryWait\":\"datacc\",\"maxConcurrentConnections\":\"datap\",\"disableMetricsCollection\":\"datakg\",\"\":{\"jkajlogvfnwq\":\"datajeqqjqa\"}}")
            .toObject(DelimitedTextSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DelimitedTextSource model = new DelimitedTextSource().withSourceRetryCount("dataoowpoogoz")
            .withSourceRetryWait("datacc")
            .withMaxConcurrentConnections("datap")
            .withDisableMetricsCollection("datakg")
            .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("datajtbnek")
                .withDisableMetricsCollection("datazbfbuqeq")
                .withAdditionalProperties(mapOf("type", "ubhmiuxypvua")))
            .withFormatSettings(new DelimitedTextReadSettings().withSkipLineCount("datayqnrjd")
                .withCompressionProperties(
                    new CompressionReadSettings().withAdditionalProperties(mapOf("type", "arvzewo"))))
            .withAdditionalColumns("datafvouy");
        model = BinaryData.fromObject(model).toObject(DelimitedTextSource.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
