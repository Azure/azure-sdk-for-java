// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureBlobDataset;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureBlobDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureBlobDataset model = BinaryData.fromString(
            "{\"type\":\"AzureBlob\",\"typeProperties\":{\"folderPath\":\"dataufpnezsjzaymld\",\"tableRootLocation\":\"datar\",\"fileName\":\"dataogzmsimehtcuuwdh\",\"modifiedDatetimeStart\":\"dataqhyhni\",\"modifiedDatetimeEnd\":\"datatnsugisno\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"datawnghojo\",\"deserializer\":\"dataeyym\",\"\":{\"nuguefxx\":\"dataixxfsfpcr\",\"bdveywetkrhl\":\"datajt\",\"bv\":\"datalmcnwepfgsv\"}},\"compression\":{\"type\":\"datadljnpetl\",\"level\":\"datardetawevxehuekdx\",\"\":{\"erlpr\":\"datavdovbrb\",\"jccxwbp\":\"dataaqccddcbnyg\"}}},\"description\":\"ykdigqzlrznda\",\"structure\":\"datanidmjqmvytg\",\"schema\":\"dataqlarhqt\",\"linkedServiceName\":{\"referenceName\":\"v\",\"parameters\":{\"ffzjwztsmpchggry\":\"dataekdzd\",\"atig\":\"datalgf\",\"vojtvmdevdlhqv\":\"datagfrrkdknczgoryw\"}},\"parameters\":{\"ac\":{\"type\":\"Int\",\"defaultValue\":\"datapyhssrlvkpkpkoc\"}},\"annotations\":[\"dataxxopyi\"],\"folder\":{\"name\":\"sp\"},\"\":{\"ccpumddhgajkr\":\"datahwyykgv\",\"fcudvafnbfbqv\":\"datayddt\",\"ecwzvcmbpwdluda\":\"datanqnxhgkordwzej\",\"ffbvtzldzchub\":\"dataprldidwm\"}}")
            .toObject(AzureBlobDataset.class);
        Assertions.assertEquals("ykdigqzlrznda", model.description());
        Assertions.assertEquals("v", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("ac").type());
        Assertions.assertEquals("sp", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureBlobDataset model
            = new AzureBlobDataset().withDescription("ykdigqzlrznda")
                .withStructure("datanidmjqmvytg")
                .withSchema("dataqlarhqt")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("v")
                    .withParameters(mapOf("ffzjwztsmpchggry", "dataekdzd", "atig", "datalgf", "vojtvmdevdlhqv",
                        "datagfrrkdknczgoryw")))
                .withParameters(mapOf("ac",
                    new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datapyhssrlvkpkpkoc")))
                .withAnnotations(Arrays.asList("dataxxopyi"))
                .withFolder(new DatasetFolder().withName("sp"))
                .withFolderPath("dataufpnezsjzaymld")
                .withTableRootLocation("datar")
                .withFileName("dataogzmsimehtcuuwdh")
                .withModifiedDatetimeStart("dataqhyhni")
                .withModifiedDatetimeEnd("datatnsugisno")
                .withFormat(new DatasetStorageFormat().withSerializer("datawnghojo")
                    .withDeserializer("dataeyym")
                    .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
                .withCompression(new DatasetCompression().withType("datadljnpetl")
                    .withLevel("datardetawevxehuekdx")
                    .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureBlobDataset.class);
        Assertions.assertEquals("ykdigqzlrznda", model.description());
        Assertions.assertEquals("v", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("ac").type());
        Assertions.assertEquals("sp", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
