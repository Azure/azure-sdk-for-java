// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureBlobDataset;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureBlobDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureBlobDataset model = BinaryData.fromString(
            "{\"type\":\"AzureBlob\",\"typeProperties\":{\"folderPath\":\"datal\",\"tableRootLocation\":\"datavig\",\"fileName\":\"dataghfrbzakpjtcq\",\"modifiedDatetimeStart\":\"dataqpojpsucmximc\",\"modifiedDatetimeEnd\":\"dataxyn\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"datasatkyvscb\",\"deserializer\":\"datagcru\",\"\":{\"bjolpyoklkv\":\"dataircpgcvsvkk\"}},\"compression\":{\"type\":\"datanadvhml\",\"level\":\"dataoi\",\"\":{\"mqwtqszzgy\":\"dataxxbhtpsyioq\",\"gjqcrbkompnbnfg\":\"datasikawanvmwd\"}}},\"description\":\"e\",\"structure\":\"databepgcmahiwfry\",\"schema\":\"datakchkapit\",\"linkedServiceName\":{\"referenceName\":\"kshfy\",\"parameters\":{\"nfd\":\"dataibjepzwhj\"}},\"parameters\":{\"vwehsu\":{\"type\":\"Object\",\"defaultValue\":\"datajxzhbl\"}},\"annotations\":[\"dataymbh\",\"dataosmbngkqlgxz\",\"datauvxdmxexatmd\"],\"folder\":{\"name\":\"senxoirxyd\"},\"\":{\"xznntwgkvyohp\":\"dataploisjkzs\",\"wytb\":\"dataapzupz\",\"mxpqkjnpyriwn\":\"datajzghximkg\",\"xmmqmt\":\"dataot\"}}")
            .toObject(AzureBlobDataset.class);
        Assertions.assertEquals("e", model.description());
        Assertions.assertEquals("kshfy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("vwehsu").type());
        Assertions.assertEquals("senxoirxyd", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureBlobDataset model = new AzureBlobDataset().withDescription("e")
            .withStructure("databepgcmahiwfry")
            .withSchema("datakchkapit")
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("kshfy").withParameters(mapOf("nfd", "dataibjepzwhj")))
            .withParameters(mapOf("vwehsu",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datajxzhbl")))
            .withAnnotations(Arrays.asList("dataymbh", "dataosmbngkqlgxz", "datauvxdmxexatmd"))
            .withFolder(new DatasetFolder().withName("senxoirxyd"))
            .withFolderPath("datal")
            .withTableRootLocation("datavig")
            .withFileName("dataghfrbzakpjtcq")
            .withModifiedDatetimeStart("dataqpojpsucmximc")
            .withModifiedDatetimeEnd("dataxyn")
            .withFormat(new DatasetStorageFormat().withSerializer("datasatkyvscb")
                .withDeserializer("datagcru")
                .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
            .withCompression(
                new DatasetCompression().withType("datanadvhml").withLevel("dataoi").withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureBlobDataset.class);
        Assertions.assertEquals("e", model.description());
        Assertions.assertEquals("kshfy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("vwehsu").type());
        Assertions.assertEquals("senxoirxyd", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
