// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureBlobDataset;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureBlobDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureBlobDataset model = BinaryData.fromString(
            "{\"type\":\"pwnikxkcajgrbrc\",\"typeProperties\":{\"folderPath\":\"datauasnjeglhtrxb\",\"tableRootLocation\":\"datapcjcnwjzbqb\",\"fileName\":\"datarnwv\",\"modifiedDatetimeStart\":\"datavoqizawws\",\"modifiedDatetimeEnd\":\"dataorgfhjxsawooauff\",\"format\":{\"type\":\"qkmwzrdqyoybmrno\",\"serializer\":\"datacjnzdaiovrbh\",\"deserializer\":\"dataqphkv\",\"\":{\"yp\":\"dataadcrxyl\",\"iwhjdfrwpsshrmn\":\"datatyzvelffohu\",\"ogkscxj\":\"datacclpct\"}},\"compression\":{\"type\":\"datagmos\",\"level\":\"dataebnxsqcows\",\"\":{\"k\":\"datafqlamfbqhsu\",\"pn\":\"datafu\"}}},\"description\":\"vgoo\",\"structure\":\"datasazmzl\",\"schema\":\"dataxitmhxxrqic\",\"linkedServiceName\":{\"referenceName\":\"zfvwjdthkvpyeyoa\",\"parameters\":{\"kjr\":\"datampnqup\",\"qdcclcv\":\"datafwkyluobdxw\"}},\"parameters\":{\"cvwbz\":{\"type\":\"Int\",\"defaultValue\":\"dataay\"},\"qnpfydrfb\":{\"type\":\"Array\",\"defaultValue\":\"datalrymfjxlpiy\"},\"byxmkhmqyncgaull\":{\"type\":\"Array\",\"defaultValue\":\"datay\"},\"gm\":{\"type\":\"Array\",\"defaultValue\":\"datayygjqpulmw\"}},\"annotations\":[\"datamiwxzfvv\",\"dataucqfgufjnbxwbm\",\"datadukinhlxh\",\"datadekekzouyveww\"],\"folder\":{\"name\":\"dwcgldo\"},\"\":{\"dxfhhht\":\"dataa\",\"qtdn\":\"datast\",\"dshvvf\":\"datackkpl\"}}")
            .toObject(AzureBlobDataset.class);
        Assertions.assertEquals("vgoo", model.description());
        Assertions.assertEquals("zfvwjdthkvpyeyoa", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("cvwbz").type());
        Assertions.assertEquals("dwcgldo", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureBlobDataset model = new AzureBlobDataset().withDescription("vgoo")
            .withStructure("datasazmzl")
            .withSchema("dataxitmhxxrqic")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("zfvwjdthkvpyeyoa")
                .withParameters(mapOf("kjr", "datampnqup", "qdcclcv", "datafwkyluobdxw")))
            .withParameters(mapOf("cvwbz",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataay"), "qnpfydrfb",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datalrymfjxlpiy"),
                "byxmkhmqyncgaull",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datay"), "gm",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datayygjqpulmw")))
            .withAnnotations(Arrays.asList("datamiwxzfvv", "dataucqfgufjnbxwbm", "datadukinhlxh", "datadekekzouyveww"))
            .withFolder(new DatasetFolder().withName("dwcgldo"))
            .withFolderPath("datauasnjeglhtrxb")
            .withTableRootLocation("datapcjcnwjzbqb")
            .withFileName("datarnwv")
            .withModifiedDatetimeStart("datavoqizawws")
            .withModifiedDatetimeEnd("dataorgfhjxsawooauff")
            .withFormat(new DatasetStorageFormat().withSerializer("datacjnzdaiovrbh")
                .withDeserializer("dataqphkv")
                .withAdditionalProperties(mapOf("type", "qkmwzrdqyoybmrno")))
            .withCompression(new DatasetCompression().withType("datagmos")
                .withLevel("dataebnxsqcows")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureBlobDataset.class);
        Assertions.assertEquals("vgoo", model.description());
        Assertions.assertEquals("zfvwjdthkvpyeyoa", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("cvwbz").type());
        Assertions.assertEquals("dwcgldo", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
