// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureBlobDataset;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureBlobDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureBlobDataset model = BinaryData.fromString(
            "{\"type\":\"AzureBlob\",\"typeProperties\":{\"folderPath\":\"datal\",\"tableRootLocation\":\"datavdovbrb\",\"fileName\":\"datarlprda\",\"modifiedDatetimeStart\":\"datacd\",\"modifiedDatetimeEnd\":\"databnygdjc\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"databpwyykd\",\"deserializer\":\"dataqzlrzndasdn\",\"\":{\"arhqt\":\"datajqmvytgkiq\",\"azekdzdzffzjwzts\":\"datav\"}},\"compression\":{\"type\":\"datachggryelg\",\"level\":\"dataatig\",\"\":{\"wnvojtvmdev\":\"datarrkdknczgor\",\"rbpyhssrl\":\"datalhqvbk\",\"bxxo\":\"datakpkpkocmacc\",\"kgv\":\"datayicyvspeslhwy\"}}},\"description\":\"cpumdd\",\"structure\":\"dataajk\",\"schema\":\"datayddt\",\"linkedServiceName\":{\"referenceName\":\"fcudvafnbfbqv\",\"parameters\":{\"rdw\":\"datanxhgk\",\"zvcmbpwd\":\"dataejpec\"}},\"parameters\":{\"ffbvtzldzchub\":{\"type\":\"Object\",\"defaultValue\":\"dataprldidwm\"},\"bzakp\":{\"type\":\"Array\",\"defaultValue\":\"datanlzuvigvlghf\"},\"aqpojpsucmximc\":{\"type\":\"Float\",\"defaultValue\":\"dataq\"},\"yv\":{\"type\":\"String\",\"defaultValue\":\"dataynqjgsat\"}},\"annotations\":[\"datagngc\",\"datausxhircpg\",\"datavsvkkjbjolpyo\",\"datalkvuznadvh\"],\"folder\":{\"name\":\"eoigowxxbhtpsyio\"},\"\":{\"wanvmwdvgjqcrbko\":\"dataqwtqszzgyksik\",\"gyweo\":\"datapnbn\",\"w\":\"databepgcmahiwfry\"}}")
            .toObject(AzureBlobDataset.class);
        Assertions.assertEquals("cpumdd", model.description());
        Assertions.assertEquals("fcudvafnbfbqv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("ffbvtzldzchub").type());
        Assertions.assertEquals("eoigowxxbhtpsyio", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureBlobDataset model = new AzureBlobDataset().withDescription("cpumdd").withStructure("dataajk")
            .withSchema("datayddt")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("fcudvafnbfbqv")
                .withParameters(mapOf("rdw", "datanxhgk", "zvcmbpwd", "dataejpec")))
            .withParameters(mapOf("ffbvtzldzchub",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataprldidwm"), "bzakp",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datanlzuvigvlghf"),
                "aqpojpsucmximc", new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataq"),
                "yv", new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataynqjgsat")))
            .withAnnotations(Arrays.asList("datagngc", "datausxhircpg", "datavsvkkjbjolpyo", "datalkvuznadvh"))
            .withFolder(new DatasetFolder().withName("eoigowxxbhtpsyio")).withFolderPath("datal")
            .withTableRootLocation("datavdovbrb").withFileName("datarlprda").withModifiedDatetimeStart("datacd")
            .withModifiedDatetimeEnd("databnygdjc")
            .withFormat(new DatasetStorageFormat().withSerializer("databpwyykd").withDeserializer("dataqzlrzndasdn")
                .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
            .withCompression(new DatasetCompression().withType("datachggryelg").withLevel("dataatig")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureBlobDataset.class);
        Assertions.assertEquals("cpumdd", model.description());
        Assertions.assertEquals("fcudvafnbfbqv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("ffbvtzldzchub").type());
        Assertions.assertEquals("eoigowxxbhtpsyio", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
