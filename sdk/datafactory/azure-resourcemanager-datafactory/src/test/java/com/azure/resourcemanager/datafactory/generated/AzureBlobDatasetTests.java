// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureBlobDataset;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureBlobDatasetTests {
    @Test
    public void testDeserialize() {
        AzureBlobDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"AzureBlob\",\"typeProperties\":{\"format\":{\"type\":\"DatasetStorageFormat\",\"\":{}},\"compression\":{\"\":{}}},\"description\":\"cohdx\",\"linkedServiceName\":{\"referenceName\":\"mcmuapc\",\"parameters\":{}},\"parameters\":{\"qqxeyskon\":{\"type\":\"Float\"},\"nkfkbgbzb\":{\"type\":\"String\"},\"eqocljmygvk\":{\"type\":\"String\"},\"jjeokbz\":{\"type\":\"Object\"}},\"annotations\":[],\"folder\":{\"name\":\"xcczurtl\"},\"\":{}}")
                .toObject(AzureBlobDataset.class);
        Assertions.assertEquals("cohdx", model.description());
        Assertions.assertEquals("mcmuapc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("qqxeyskon").type());
        Assertions.assertEquals("xcczurtl", model.folder().name());
    }

    @Test
    public void testSerialize() {
        AzureBlobDataset model =
            new AzureBlobDataset()
                .withDescription("cohdx")
                .withLinkedServiceName(
                    new LinkedServiceReference().withReferenceName("mcmuapc").withParameters(mapOf()))
                .withParameters(
                    mapOf(
                        "qqxeyskon",
                        new ParameterSpecification().withType(ParameterType.FLOAT),
                        "nkfkbgbzb",
                        new ParameterSpecification().withType(ParameterType.STRING),
                        "eqocljmygvk",
                        new ParameterSpecification().withType(ParameterType.STRING),
                        "jjeokbz",
                        new ParameterSpecification().withType(ParameterType.OBJECT)))
                .withAnnotations(Arrays.asList())
                .withFolder(new DatasetFolder().withName("xcczurtl"))
                .withFormat(new DatasetStorageFormat().withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
                .withCompression(new DatasetCompression().withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureBlobDataset.class);
        Assertions.assertEquals("cohdx", model.description());
        Assertions.assertEquals("mcmuapc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("qqxeyskon").type());
        Assertions.assertEquals("xcczurtl", model.folder().name());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
