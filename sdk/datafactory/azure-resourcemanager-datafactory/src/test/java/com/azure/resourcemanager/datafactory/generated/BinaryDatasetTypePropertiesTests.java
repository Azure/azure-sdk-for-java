// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.BinaryDatasetTypeProperties;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import java.util.HashMap;
import java.util.Map;

public final class BinaryDatasetTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BinaryDatasetTypeProperties model = BinaryData.fromString(
            "{\"location\":{\"type\":\"DatasetLocation\",\"folderPath\":\"datavcmlaexbzbquf\",\"fileName\":\"dataezs\",\"\":{\"ime\":\"dataymldrorhyogzm\",\"m\":\"datatcuuwdhtqqhyhn\",\"wnwngh\":\"datatnsugisno\",\"cjixxf\":\"datajovkeyym\"}},\"compression\":{\"type\":\"datapcrtn\",\"level\":\"datauefxxijtebdveywe\",\"\":{\"wepf\":\"datahlolmc\",\"bv\":\"datasv\",\"l\":\"dataqdljnpe\",\"detawevxehue\":\"datan\"}}}")
            .toObject(BinaryDatasetTypeProperties.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BinaryDatasetTypeProperties model = new BinaryDatasetTypeProperties()
            .withLocation(new DatasetLocation().withFolderPath("datavcmlaexbzbquf").withFileName("dataezs")
                .withAdditionalProperties(mapOf("type", "DatasetLocation")))
            .withCompression(new DatasetCompression().withType("datapcrtn").withLevel("datauefxxijtebdveywe")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(BinaryDatasetTypeProperties.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
