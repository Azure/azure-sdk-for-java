// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.MongoDbV2LinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbV2LinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbV2LinkedService model = BinaryData.fromString(
            "{\"type\":\"MongoDbV2\",\"typeProperties\":{\"connectionString\":\"datalxsqdzyya\",\"database\":\"datarxtgqpqfwuplfjk\"},\"version\":\"xvuseimuip\",\"connectVia\":{\"referenceName\":\"ta\",\"parameters\":{\"ipldzipheifefz\":\"datafh\"}},\"description\":\"cleyam\",\"parameters\":{\"yp\":{\"type\":\"Object\",\"defaultValue\":\"datajhq\"},\"vbtkafcnfitpu\":{\"type\":\"SecureString\",\"defaultValue\":\"datacgw\"},\"xb\":{\"type\":\"Bool\",\"defaultValue\":\"datakdwyjdvy\"},\"goudcl\":{\"type\":\"Bool\",\"defaultValue\":\"datagy\"}},\"annotations\":[\"dataqly\",\"dataxbdisje\",\"datavgcfhchgjo\",\"datarhdibzvp\"],\"\":{\"uvk\":\"datatmeou\"}}")
            .toObject(MongoDbV2LinkedService.class);
        Assertions.assertEquals("xvuseimuip", model.version());
        Assertions.assertEquals("ta", model.connectVia().referenceName());
        Assertions.assertEquals("cleyam", model.description());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("yp").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbV2LinkedService model
            = new MongoDbV2LinkedService().withVersion("xvuseimuip")
                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("ta")
                    .withParameters(mapOf("ipldzipheifefz", "datafh")))
                .withDescription("cleyam")
                .withParameters(mapOf("yp",
                    new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datajhq"),
                    "vbtkafcnfitpu",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datacgw"),
                    "xb", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datakdwyjdvy"),
                    "goudcl", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datagy")))
                .withAnnotations(Arrays.asList("dataqly", "dataxbdisje", "datavgcfhchgjo", "datarhdibzvp"))
                .withConnectionString("datalxsqdzyya")
                .withDatabase("datarxtgqpqfwuplfjk");
        model = BinaryData.fromObject(model).toObject(MongoDbV2LinkedService.class);
        Assertions.assertEquals("xvuseimuip", model.version());
        Assertions.assertEquals("ta", model.connectVia().referenceName());
        Assertions.assertEquals("cleyam", model.description());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("yp").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
