// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.MongoDbV2LinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbV2LinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbV2LinkedService model = BinaryData.fromString(
            "{\"type\":\"MongoDbV2\",\"typeProperties\":{\"connectionString\":\"datay\",\"database\":\"datacct\"},\"connectVia\":{\"referenceName\":\"gy\",\"parameters\":{\"zhdmcg\":\"datax\"}},\"description\":\"brybfarkhko\",\"parameters\":{\"jjhq\":{\"type\":\"Float\",\"defaultValue\":\"datawmoyhd\"}},\"annotations\":[\"databjfpxo\",\"datagnm\",\"dataniqw\"],\"\":{\"sstnwvravntvk\":\"datayxfknj\"}}")
            .toObject(MongoDbV2LinkedService.class);
        Assertions.assertEquals("gy", model.connectVia().referenceName());
        Assertions.assertEquals("brybfarkhko", model.description());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("jjhq").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbV2LinkedService model = new MongoDbV2LinkedService()
            .withConnectVia(
                new IntegrationRuntimeReference().withReferenceName("gy").withParameters(mapOf("zhdmcg", "datax")))
            .withDescription("brybfarkhko")
            .withParameters(mapOf("jjhq",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datawmoyhd")))
            .withAnnotations(Arrays.asList("databjfpxo", "datagnm", "dataniqw"))
            .withConnectionString("datay")
            .withDatabase("datacct");
        model = BinaryData.fromObject(model).toObject(MongoDbV2LinkedService.class);
        Assertions.assertEquals("gy", model.connectVia().referenceName());
        Assertions.assertEquals("brybfarkhko", model.description());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("jjhq").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
