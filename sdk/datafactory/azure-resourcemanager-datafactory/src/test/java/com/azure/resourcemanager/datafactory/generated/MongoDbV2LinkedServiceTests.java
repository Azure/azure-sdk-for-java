// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.MongoDbV2LinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbV2LinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbV2LinkedService model = BinaryData.fromString(
            "{\"type\":\"MongoDbV2\",\"typeProperties\":{\"connectionString\":\"datafykgmwurcxxj\",\"database\":\"dataxy\"},\"connectVia\":{\"referenceName\":\"ypfkvjgovbbncj\",\"parameters\":{\"nk\":\"dataaqgmztlru\",\"mqffgjsq\":\"dataou\"}},\"description\":\"airoog\",\"parameters\":{\"jp\":{\"type\":\"Int\",\"defaultValue\":\"databdqiuppavqov\"},\"vtf\":{\"type\":\"String\",\"defaultValue\":\"datank\"}},\"annotations\":[\"datatrwgljfatezdxq\"],\"\":{\"lgnieeqjdfxxxnn\":\"dataphgimyomje\",\"rijbiterqfu\":\"datauxkepga\",\"dd\":\"dataerrcanlpf\",\"qawupqkvmy\":\"datawpg\"}}")
            .toObject(MongoDbV2LinkedService.class);
        Assertions.assertEquals("ypfkvjgovbbncj", model.connectVia().referenceName());
        Assertions.assertEquals("airoog", model.description());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("jp").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbV2LinkedService model = new MongoDbV2LinkedService()
            .withConnectVia(new IntegrationRuntimeReference()
                .withReferenceName("ypfkvjgovbbncj").withParameters(mapOf("nk", "dataaqgmztlru", "mqffgjsq", "dataou")))
            .withDescription("airoog")
            .withParameters(mapOf("jp",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("databdqiuppavqov"), "vtf",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datank")))
            .withAnnotations(Arrays.asList("datatrwgljfatezdxq")).withConnectionString("datafykgmwurcxxj")
            .withDatabase("dataxy");
        model = BinaryData.fromObject(model).toObject(MongoDbV2LinkedService.class);
        Assertions.assertEquals("ypfkvjgovbbncj", model.connectVia().referenceName());
        Assertions.assertEquals("airoog", model.description());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("jp").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
