// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySink;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PowerQuerySinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PowerQuerySink model = BinaryData.fromString(
            "{\"script\":\"gpterdiu\",\"schemaLinkedService\":{\"referenceName\":\"i\",\"parameters\":{\"go\":\"datakwztsdetj\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"fcqpol\",\"parameters\":{\"oxlvocptvdxxheig\":\"dataysdgzyyb\",\"ghjhjvmabzzbwa\":\"datalilw\",\"mdafbgymqt\":\"datab\"}},\"name\":\"apr\",\"description\":\"jxrjnbsc\",\"dataset\":{\"referenceName\":\"xavipneychbj\",\"parameters\":{\"xz\":\"datafsgnw\"}},\"linkedService\":{\"referenceName\":\"p\",\"parameters\":{\"rxipmlnfyzav\":\"datafb\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ypi\",\"datasetParameters\":\"databkpdjtaqhsmq\",\"parameters\":{\"zqulptkbv\":\"datadgonjhxshthmgp\",\"blornsih\":\"datapxtzhigqqbtimpk\",\"jakx\":\"datahudsmusuaa\"},\"\":{\"ixyxvqbanosjt\":\"datafczmnn\",\"mgm\":\"datairnb\",\"p\":\"datadorgmynltw\",\"mfd\":\"datatmfoeajogsyxwet\"}}}")
            .toObject(PowerQuerySink.class);
        Assertions.assertEquals("apr", model.name());
        Assertions.assertEquals("jxrjnbsc", model.description());
        Assertions.assertEquals("xavipneychbj", model.dataset().referenceName());
        Assertions.assertEquals("p", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("ypi", model.flowlet().referenceName());
        Assertions.assertEquals("i", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("fcqpol", model.rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("gpterdiu", model.script());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PowerQuerySink model
            = new PowerQuerySink().withName("apr")
                .withDescription("jxrjnbsc")
                .withDataset(
                    new DatasetReference().withReferenceName("xavipneychbj").withParameters(mapOf("xz", "datafsgnw")))
                .withLinkedService(
                    new LinkedServiceReference().withReferenceName("p").withParameters(mapOf("rxipmlnfyzav", "datafb")))
                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                    .withReferenceName("ypi")
                    .withDatasetParameters("databkpdjtaqhsmq")
                    .withParameters(mapOf("zqulptkbv", "datadgonjhxshthmgp", "blornsih", "datapxtzhigqqbtimpk", "jakx",
                        "datahudsmusuaa"))
                    .withAdditionalProperties(mapOf()))
                .withSchemaLinkedService(
                    new LinkedServiceReference().withReferenceName("i").withParameters(mapOf("go", "datakwztsdetj")))
                .withRejectedDataLinkedService(
                    new LinkedServiceReference().withReferenceName("fcqpol")
                        .withParameters(mapOf("oxlvocptvdxxheig", "dataysdgzyyb", "ghjhjvmabzzbwa", "datalilw",
                            "mdafbgymqt", "datab")))
                .withScript("gpterdiu");
        model = BinaryData.fromObject(model).toObject(PowerQuerySink.class);
        Assertions.assertEquals("apr", model.name());
        Assertions.assertEquals("jxrjnbsc", model.description());
        Assertions.assertEquals("xavipneychbj", model.dataset().referenceName());
        Assertions.assertEquals("p", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("ypi", model.flowlet().referenceName());
        Assertions.assertEquals("i", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("fcqpol", model.rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("gpterdiu", model.script());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
