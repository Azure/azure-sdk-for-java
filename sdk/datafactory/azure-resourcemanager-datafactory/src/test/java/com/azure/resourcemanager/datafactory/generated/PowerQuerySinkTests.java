// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySink;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PowerQuerySinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PowerQuerySink model =
            BinaryData
                .fromString(
                    "{\"script\":\"oykdno\",\"schemaLinkedService\":{\"referenceName\":\"axwmgzru\",\"parameters\":{\"cbgvsbt\":\"datacwnynlleiq\",\"xmnrqstjcmet\":\"dataertoxadhxuvj\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"l\",\"parameters\":{\"gjnaqyqipsl\":\"datavnpvvd\",\"tfo\":\"datamvcdsvmwbitek\"}},\"name\":\"vfiybxqichgyb\",\"description\":\"dqekivycpzcvd\",\"dataset\":{\"referenceName\":\"ulrqtbht\",\"parameters\":{\"ryfmxmdu\":\"datapzl\",\"giln\":\"datazf\"}},\"linkedService\":{\"referenceName\":\"dccgndjgdpriggqq\",\"parameters\":{\"buu\":\"dataf\",\"igi\":\"datapyuflqjfshtujcyo\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"csklkqnq\",\"datasetParameters\":\"dataixnmbz\",\"parameters\":{\"mbzayspzvrietv\":\"datauyrzw\",\"dvatlzmgschn\":\"dataphmdzxplgtp\"},\"\":{\"vlzdmnfm\":\"databkkz\"}}}")
                .toObject(PowerQuerySink.class);
        Assertions.assertEquals("vfiybxqichgyb", model.name());
        Assertions.assertEquals("dqekivycpzcvd", model.description());
        Assertions.assertEquals("ulrqtbht", model.dataset().referenceName());
        Assertions.assertEquals("dccgndjgdpriggqq", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("csklkqnq", model.flowlet().referenceName());
        Assertions.assertEquals("axwmgzru", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("l", model.rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("oykdno", model.script());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PowerQuerySink model =
            new PowerQuerySink()
                .withName("vfiybxqichgyb")
                .withDescription("dqekivycpzcvd")
                .withDataset(
                    new DatasetReference()
                        .withReferenceName("ulrqtbht")
                        .withParameters(mapOf("ryfmxmdu", "datapzl", "giln", "datazf")))
                .withLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("dccgndjgdpriggqq")
                        .withParameters(mapOf("buu", "dataf", "igi", "datapyuflqjfshtujcyo")))
                .withFlowlet(
                    new DataFlowReference()
                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("csklkqnq")
                        .withDatasetParameters("dataixnmbz")
                        .withParameters(mapOf("mbzayspzvrietv", "datauyrzw", "dvatlzmgschn", "dataphmdzxplgtp"))
                        .withAdditionalProperties(mapOf()))
                .withSchemaLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("axwmgzru")
                        .withParameters(mapOf("cbgvsbt", "datacwnynlleiq", "xmnrqstjcmet", "dataertoxadhxuvj")))
                .withRejectedDataLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("l")
                        .withParameters(mapOf("gjnaqyqipsl", "datavnpvvd", "tfo", "datamvcdsvmwbitek")))
                .withScript("oykdno");
        model = BinaryData.fromObject(model).toObject(PowerQuerySink.class);
        Assertions.assertEquals("vfiybxqichgyb", model.name());
        Assertions.assertEquals("dqekivycpzcvd", model.description());
        Assertions.assertEquals("ulrqtbht", model.dataset().referenceName());
        Assertions.assertEquals("dccgndjgdpriggqq", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("csklkqnq", model.flowlet().referenceName());
        Assertions.assertEquals("axwmgzru", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("l", model.rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("oykdno", model.script());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
