// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySink;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PowerQuerySinkTests {
    @Test
    public void testDeserialize() {
        PowerQuerySink model =
            BinaryData
                .fromString(
                    "{\"script\":\"qtgdqohmcwsl\",\"schemaLinkedService\":{\"referenceName\":\"izetpw\",\"parameters\":{}},\"rejectedDataLinkedService\":{\"referenceName\":\"llibphbqzmizak\",\"parameters\":{}},\"name\":\"nkjpdnjzha\",\"description\":\"ylhjlm\",\"dataset\":{\"referenceName\":\"y\",\"parameters\":{}},\"linkedService\":{\"referenceName\":\"mrsopte\",\"parameters\":{}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"islstv\",\"parameters\":{},\"\":{}}}")
                .toObject(PowerQuerySink.class);
        Assertions.assertEquals("nkjpdnjzha", model.name());
        Assertions.assertEquals("ylhjlm", model.description());
        Assertions.assertEquals("y", model.dataset().referenceName());
        Assertions.assertEquals("mrsopte", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("islstv", model.flowlet().referenceName());
        Assertions.assertEquals("izetpw", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("llibphbqzmizak", model.rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("qtgdqohmcwsl", model.script());
    }

    @Test
    public void testSerialize() {
        PowerQuerySink model =
            new PowerQuerySink()
                .withName("nkjpdnjzha")
                .withDescription("ylhjlm")
                .withDataset(new DatasetReference().withReferenceName("y").withParameters(mapOf()))
                .withLinkedService(new LinkedServiceReference().withReferenceName("mrsopte").withParameters(mapOf()))
                .withFlowlet(
                    new DataFlowReference()
                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("islstv")
                        .withParameters(mapOf())
                        .withAdditionalProperties(mapOf()))
                .withSchemaLinkedService(
                    new LinkedServiceReference().withReferenceName("izetpw").withParameters(mapOf()))
                .withRejectedDataLinkedService(
                    new LinkedServiceReference().withReferenceName("llibphbqzmizak").withParameters(mapOf()))
                .withScript("qtgdqohmcwsl");
        model = BinaryData.fromObject(model).toObject(PowerQuerySink.class);
        Assertions.assertEquals("nkjpdnjzha", model.name());
        Assertions.assertEquals("ylhjlm", model.description());
        Assertions.assertEquals("y", model.dataset().referenceName());
        Assertions.assertEquals("mrsopte", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("islstv", model.flowlet().referenceName());
        Assertions.assertEquals("izetpw", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("llibphbqzmizak", model.rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("qtgdqohmcwsl", model.script());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
