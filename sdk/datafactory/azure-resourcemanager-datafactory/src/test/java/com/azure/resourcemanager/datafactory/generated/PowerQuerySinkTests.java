// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySink;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PowerQuerySinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PowerQuerySink model = BinaryData.fromString(
            "{\"script\":\"dfmmxjdnajuopjy\",\"schemaLinkedService\":{\"referenceName\":\"mk\",\"parameters\":{\"jk\":\"datavcwloqd\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"xxr\",\"parameters\":{\"xga\":\"databuzm\",\"pr\":\"datatdtkwppthuz\",\"qfxy\":\"dataimrljdp\"}},\"name\":\"mhk\",\"description\":\"baewht\",\"dataset\":{\"referenceName\":\"loamfmxtllfltym\",\"parameters\":{\"bqbgamklilirwdv\":\"datarrfijhgg\",\"rxqwqnjxrd\":\"datafhsdpzouhkt\",\"czcxdfw\":\"dataddtullygta\",\"yf\":\"dataa\"}},\"linkedService\":{\"referenceName\":\"xrljphraspi\",\"parameters\":{\"fgsmdrjuqb\":\"dataimixlmdbgice\",\"paxwfqty\":\"dataxtokljmtz\",\"rcltungbsoljckm\":\"dataqi\",\"zbkuckgkdsksw\":\"datai\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"qqcqikclsmal\",\"datasetParameters\":\"dataswoykdn\",\"parameters\":{\"lqcwnynll\":\"dataaxwmgzru\",\"btsertoxa\":\"dataiqbcbgv\"},\"\":{\"etwmlgicvnp\":\"datauvjhxmnrqstjc\"}}}")
            .toObject(PowerQuerySink.class);
        Assertions.assertEquals("mhk", model.name());
        Assertions.assertEquals("baewht", model.description());
        Assertions.assertEquals("loamfmxtllfltym", model.dataset().referenceName());
        Assertions.assertEquals("xrljphraspi", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("qqcqikclsmal", model.flowlet().referenceName());
        Assertions.assertEquals("mk", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("xxr", model.rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("dfmmxjdnajuopjy", model.script());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PowerQuerySink model = new PowerQuerySink().withName("mhk")
            .withDescription("baewht")
            .withDataset(new DatasetReference().withReferenceName("loamfmxtllfltym")
                .withParameters(mapOf("bqbgamklilirwdv", "datarrfijhgg", "rxqwqnjxrd", "datafhsdpzouhkt", "czcxdfw",
                    "dataddtullygta", "yf", "dataa")))
            .withLinkedService(new LinkedServiceReference().withReferenceName("xrljphraspi")
                .withParameters(mapOf("fgsmdrjuqb", "dataimixlmdbgice", "paxwfqty", "dataxtokljmtz", "rcltungbsoljckm",
                    "dataqi", "zbkuckgkdsksw", "datai")))
            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                .withReferenceName("qqcqikclsmal")
                .withDatasetParameters("dataswoykdn")
                .withParameters(mapOf("lqcwnynll", "dataaxwmgzru", "btsertoxa", "dataiqbcbgv"))
                .withAdditionalProperties(mapOf()))
            .withSchemaLinkedService(
                new LinkedServiceReference().withReferenceName("mk").withParameters(mapOf("jk", "datavcwloqd")))
            .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("xxr")
                .withParameters(mapOf("xga", "databuzm", "pr", "datatdtkwppthuz", "qfxy", "dataimrljdp")))
            .withScript("dfmmxjdnajuopjy");
        model = BinaryData.fromObject(model).toObject(PowerQuerySink.class);
        Assertions.assertEquals("mhk", model.name());
        Assertions.assertEquals("baewht", model.description());
        Assertions.assertEquals("loamfmxtllfltym", model.dataset().referenceName());
        Assertions.assertEquals("xrljphraspi", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("qqcqikclsmal", model.flowlet().referenceName());
        Assertions.assertEquals("mk", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("xxr", model.rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("dfmmxjdnajuopjy", model.script());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
