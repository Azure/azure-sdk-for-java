// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PhoenixObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PhoenixObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PhoenixObjectDataset model = BinaryData.fromString(
            "{\"type\":\"PhoenixObject\",\"typeProperties\":{\"tableName\":\"datadmupbusxyug\",\"table\":\"datawplx\",\"schema\":\"datazu\"},\"description\":\"otiixkkbygbgiq\",\"structure\":\"datayshybb\",\"schema\":\"datattyizonzsurqcoja\",\"linkedServiceName\":{\"referenceName\":\"fzhzzcarciuo\",\"parameters\":{\"hwsgnsputfe\":\"datapdthjfv\",\"hnu\":\"dataf\",\"chxxc\":\"datassjgbfbb\",\"bphceeivkbuxlep\":\"datazunf\"}},\"parameters\":{\"fscl\":{\"type\":\"Object\",\"defaultValue\":\"dataqhqpvtwt\"},\"bfytnhdnihuzzjuz\":{\"type\":\"Bool\",\"defaultValue\":\"datagygn\"},\"tsucrxdtejobjz\":{\"type\":\"Bool\",\"defaultValue\":\"databzdtorbiwnyfzdpx\"}},\"annotations\":[\"datat\",\"datad\",\"datanzalgm\",\"dataupjhltyl\"],\"folder\":{\"name\":\"dvbgvzlzjs\"},\"\":{\"ydpoknse\":\"datacutzaz\"}}")
            .toObject(PhoenixObjectDataset.class);
        Assertions.assertEquals("otiixkkbygbgiq", model.description());
        Assertions.assertEquals("fzhzzcarciuo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("fscl").type());
        Assertions.assertEquals("dvbgvzlzjs", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PhoenixObjectDataset model = new PhoenixObjectDataset().withDescription("otiixkkbygbgiq")
            .withStructure("datayshybb")
            .withSchema("datattyizonzsurqcoja")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("fzhzzcarciuo")
                .withParameters(mapOf("hwsgnsputfe", "datapdthjfv", "hnu", "dataf", "chxxc", "datassjgbfbb",
                    "bphceeivkbuxlep", "datazunf")))
            .withParameters(mapOf("fscl",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataqhqpvtwt"),
                "bfytnhdnihuzzjuz",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datagygn"),
                "tsucrxdtejobjz",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("databzdtorbiwnyfzdpx")))
            .withAnnotations(Arrays.asList("datat", "datad", "datanzalgm", "dataupjhltyl"))
            .withFolder(new DatasetFolder().withName("dvbgvzlzjs"))
            .withTableName("datadmupbusxyug")
            .withTable("datawplx")
            .withSchemaTypePropertiesSchema("datazu");
        model = BinaryData.fromObject(model).toObject(PhoenixObjectDataset.class);
        Assertions.assertEquals("otiixkkbygbgiq", model.description());
        Assertions.assertEquals("fzhzzcarciuo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("fscl").type());
        Assertions.assertEquals("dvbgvzlzjs", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
