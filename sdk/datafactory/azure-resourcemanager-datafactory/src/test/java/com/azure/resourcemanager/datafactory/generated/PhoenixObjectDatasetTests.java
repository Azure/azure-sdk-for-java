// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PhoenixObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PhoenixObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PhoenixObjectDataset model = BinaryData.fromString(
            "{\"type\":\"PhoenixObject\",\"typeProperties\":{\"tableName\":\"databiichgk\",\"table\":\"datasozodwjcfq\",\"schema\":\"dataxryqycymzr\"},\"description\":\"fgdwzauz\",\"structure\":\"datah\",\"schema\":\"datadnyciwzk\",\"linkedServiceName\":{\"referenceName\":\"lykqadfge\",\"parameters\":{\"bri\":\"dataoha\",\"ljqovqmxqsxo\":\"datamadjrsbga\",\"tsxooiobh\":\"dataxqnkiuokg\"}},\"parameters\":{\"srnjlvgrghnh\":{\"type\":\"Array\",\"defaultValue\":\"dataptlsrvqzgaqs\"}},\"annotations\":[\"datarqhjnin\",\"dataeswvnhqkgebzqz\"],\"folder\":{\"name\":\"viujojzdvms\"},\"\":{\"tqhdbitqsb\":\"datasxsxoxvimdv\",\"d\":\"dataujsgomrihumgrm\",\"gfygfkgxbdpb\":\"datavq\"}}")
            .toObject(PhoenixObjectDataset.class);
        Assertions.assertEquals("fgdwzauz", model.description());
        Assertions.assertEquals("lykqadfge", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("srnjlvgrghnh").type());
        Assertions.assertEquals("viujojzdvms", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PhoenixObjectDataset model = new PhoenixObjectDataset().withDescription("fgdwzauz")
            .withStructure("datah")
            .withSchema("datadnyciwzk")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("lykqadfge")
                .withParameters(mapOf("bri", "dataoha", "ljqovqmxqsxo", "datamadjrsbga", "tsxooiobh", "dataxqnkiuokg")))
            .withParameters(mapOf("srnjlvgrghnh",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataptlsrvqzgaqs")))
            .withAnnotations(Arrays.asList("datarqhjnin", "dataeswvnhqkgebzqz"))
            .withFolder(new DatasetFolder().withName("viujojzdvms"))
            .withTableName("databiichgk")
            .withTable("datasozodwjcfq")
            .withSchemaTypePropertiesSchema("dataxryqycymzr");
        model = BinaryData.fromObject(model).toObject(PhoenixObjectDataset.class);
        Assertions.assertEquals("fgdwzauz", model.description());
        Assertions.assertEquals("lykqadfge", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("srnjlvgrghnh").type());
        Assertions.assertEquals("viujojzdvms", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
