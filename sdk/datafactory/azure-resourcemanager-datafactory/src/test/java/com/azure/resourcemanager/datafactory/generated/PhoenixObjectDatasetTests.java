// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PhoenixObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PhoenixObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PhoenixObjectDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"PhoenixObject\",\"typeProperties\":{\"tableName\":\"datawdxgyypm\",\"table\":\"datazlmln\",\"schema\":\"datacatkuhs\"},\"description\":\"gdkvviilyeshoxf\",\"structure\":\"datajdmu\",\"schema\":\"datausx\",\"linkedServiceName\":{\"referenceName\":\"ugozwplxzgzumnot\",\"parameters\":{\"giq\":\"datakkbyg\",\"izonzsur\":\"datawyshybbnhtt\",\"asfzhzzcarc\":\"dataco\",\"nhwsgns\":\"datauoxyipdthjf\"}},\"parameters\":{\"fbbach\":{\"type\":\"Array\",\"defaultValue\":\"datalfchnufssjg\"},\"kbuxlepghcnuqhq\":{\"type\":\"Array\",\"defaultValue\":\"datazzunfnbphceei\"},\"fscl\":{\"type\":\"String\",\"defaultValue\":\"datawt\"}},\"annotations\":[\"datagygn\",\"databfytnhdnihuzzjuz\",\"datawgbzdtorbi\",\"datanyfzdpxct\"],\"folder\":{\"name\":\"rxdtej\"},\"\":{\"pjhltylyuud\":\"datazrlwtidcnzalgmp\"}}")
                .toObject(PhoenixObjectDataset.class);
        Assertions.assertEquals("gdkvviilyeshoxf", model.description());
        Assertions.assertEquals("ugozwplxzgzumnot", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("fbbach").type());
        Assertions.assertEquals("rxdtej", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PhoenixObjectDataset model =
            new PhoenixObjectDataset()
                .withDescription("gdkvviilyeshoxf")
                .withStructure("datajdmu")
                .withSchema("datausx")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("ugozwplxzgzumnot")
                        .withParameters(
                            mapOf(
                                "giq",
                                "datakkbyg",
                                "izonzsur",
                                "datawyshybbnhtt",
                                "asfzhzzcarc",
                                "dataco",
                                "nhwsgns",
                                "datauoxyipdthjf")))
                .withParameters(
                    mapOf(
                        "fbbach",
                        new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datalfchnufssjg"),
                        "kbuxlepghcnuqhq",
                        new ParameterSpecification()
                            .withType(ParameterType.ARRAY)
                            .withDefaultValue("datazzunfnbphceei"),
                        "fscl",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datawt")))
                .withAnnotations(Arrays.asList("datagygn", "databfytnhdnihuzzjuz", "datawgbzdtorbi", "datanyfzdpxct"))
                .withFolder(new DatasetFolder().withName("rxdtej"))
                .withTableName("datawdxgyypm")
                .withTable("datazlmln")
                .withSchemaTypePropertiesSchema("datacatkuhs");
        model = BinaryData.fromObject(model).toObject(PhoenixObjectDataset.class);
        Assertions.assertEquals("gdkvviilyeshoxf", model.description());
        Assertions.assertEquals("ugozwplxzgzumnot", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("fbbach").type());
        Assertions.assertEquals("rxdtej", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
