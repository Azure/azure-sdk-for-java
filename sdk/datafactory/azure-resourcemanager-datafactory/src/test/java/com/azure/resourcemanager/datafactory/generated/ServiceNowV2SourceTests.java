// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ExpressionV2;
import com.azure.resourcemanager.datafactory.models.ExpressionV2Type;
import com.azure.resourcemanager.datafactory.models.ServiceNowV2Source;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ServiceNowV2SourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceNowV2Source model = BinaryData.fromString(
            "{\"type\":\"ServiceNowV2Source\",\"expression\":{\"type\":\"Constant\",\"value\":\"avbteaegyojy\",\"operator\":\"epcdhqjczh\",\"operands\":[{\"type\":\"Constant\",\"value\":\"jbhwoszrhfwcihk\",\"operator\":\"jbitmuriizyrgzxp\",\"operands\":[{\"type\":\"Unary\",\"value\":\"sod\",\"operator\":\"jn\",\"operands\":[{},{},{},{}]},{\"type\":\"Constant\",\"value\":\"hr\",\"operator\":\"i\",\"operands\":[{},{}]},{\"type\":\"Constant\",\"value\":\"huwcqnaspjdahi\",\"operator\":\"kliyfgkzwkyqa\",\"operands\":[{}]}]},{\"type\":\"Unary\",\"value\":\"oyykhidia\",\"operator\":\"ktwijoxkkynppqt\",\"operands\":[{\"type\":\"Unary\",\"value\":\"jat\",\"operator\":\"kqq\",\"operands\":[{},{},{}]}]}]},\"queryTimeout\":\"dataoinqzv\",\"additionalColumns\":\"datafpu\",\"sourceRetryCount\":\"datayhs\",\"sourceRetryWait\":\"dataa\",\"maxConcurrentConnections\":\"dataofqntt\",\"disableMetricsCollection\":\"datajcgupxnuvsh\",\"\":{\"ogvafbd\":\"databpmvppgui\",\"deqntbl\":\"dataokplolcalyvcxvcp\",\"afqr\":\"datadqsqbyubsw\"}}")
            .toObject(ServiceNowV2Source.class);
        Assertions.assertEquals(ExpressionV2Type.CONSTANT, model.expression().type());
        Assertions.assertEquals("avbteaegyojy", model.expression().value());
        Assertions.assertEquals("epcdhqjczh", model.expression().operator());
        Assertions.assertEquals(ExpressionV2Type.CONSTANT, model.expression().operands().get(0).type());
        Assertions.assertEquals("jbhwoszrhfwcihk", model.expression().operands().get(0).value());
        Assertions.assertEquals("jbitmuriizyrgzxp", model.expression().operands().get(0).operator());
        Assertions.assertEquals(ExpressionV2Type.UNARY, model.expression().operands().get(0).operands().get(0).type());
        Assertions.assertEquals("sod", model.expression().operands().get(0).operands().get(0).value());
        Assertions.assertEquals("jn", model.expression().operands().get(0).operands().get(0).operator());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceNowV2Source model
            = new ServiceNowV2Source().withSourceRetryCount("datayhs").withSourceRetryWait("dataa")
                .withMaxConcurrentConnections(
                    "dataofqntt")
                .withDisableMetricsCollection(
                    "datajcgupxnuvsh")
                .withQueryTimeout("dataoinqzv").withAdditionalColumns("datafpu")
                .withExpression(new ExpressionV2().withType(ExpressionV2Type.CONSTANT).withValue("avbteaegyojy")
                    .withOperator("epcdhqjczh")
                    .withOperands(Arrays.asList(
                        new ExpressionV2().withType(ExpressionV2Type.CONSTANT).withValue("jbhwoszrhfwcihk")
                            .withOperator("jbitmuriizyrgzxp")
                            .withOperands(Arrays.asList(
                                new ExpressionV2().withType(ExpressionV2Type.UNARY).withValue("sod").withOperator("jn")
                                    .withOperands(Arrays.asList(new ExpressionV2(), new ExpressionV2(),
                                        new ExpressionV2(), new ExpressionV2())),
                                new ExpressionV2().withType(ExpressionV2Type.CONSTANT).withValue("hr").withOperator("i")
                                    .withOperands(Arrays.asList(new ExpressionV2(), new ExpressionV2())),
                                new ExpressionV2().withType(ExpressionV2Type.CONSTANT).withValue("huwcqnaspjdahi")
                                    .withOperator("kliyfgkzwkyqa").withOperands(Arrays.asList(new ExpressionV2())))),
                        new ExpressionV2().withType(ExpressionV2Type.UNARY).withValue("oyykhidia")
                            .withOperator("ktwijoxkkynppqt")
                            .withOperands(Arrays.asList(new ExpressionV2().withType(ExpressionV2Type.UNARY)
                                .withValue("jat").withOperator("kqq").withOperands(
                                    Arrays.asList(new ExpressionV2(), new ExpressionV2(), new ExpressionV2())))))));
        model = BinaryData.fromObject(model).toObject(ServiceNowV2Source.class);
        Assertions.assertEquals(ExpressionV2Type.CONSTANT, model.expression().type());
        Assertions.assertEquals("avbteaegyojy", model.expression().value());
        Assertions.assertEquals("epcdhqjczh", model.expression().operator());
        Assertions.assertEquals(ExpressionV2Type.CONSTANT, model.expression().operands().get(0).type());
        Assertions.assertEquals("jbhwoszrhfwcihk", model.expression().operands().get(0).value());
        Assertions.assertEquals("jbitmuriizyrgzxp", model.expression().operands().get(0).operator());
        Assertions.assertEquals(ExpressionV2Type.UNARY, model.expression().operands().get(0).operands().get(0).type());
        Assertions.assertEquals("sod", model.expression().operands().get(0).operands().get(0).value());
        Assertions.assertEquals("jn", model.expression().operands().get(0).operands().get(0).operator());
    }
}
