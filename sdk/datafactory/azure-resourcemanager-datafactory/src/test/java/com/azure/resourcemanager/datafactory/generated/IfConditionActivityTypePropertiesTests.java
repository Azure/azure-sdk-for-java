// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.IfConditionActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IfConditionActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IfConditionActivityTypeProperties model = BinaryData.fromString(
            "{\"expression\":{\"value\":\"cx\"},\"ifTrueActivities\":[{\"type\":\"Activity\",\"name\":\"r\",\"description\":\"prdgmmgtqgzdfjf\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"umyuiquzfotf\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Failed\",\"Succeeded\"],\"\":{\"zfpfxbqdrjunigxn\":\"datafacflkbgohxbj\",\"nvr\":\"datannghgazdbv\"}},{\"activity\":\"ti\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Completed\",\"Succeeded\"],\"\":{\"jepydjdpapndmvrb\":\"datahlxvn\",\"wkthmexidecdeh\":\"datatvvtapw\",\"xfhtsgyyrg\":\"datakmfiudnpj\",\"gqllgokznffqvtx\":\"dataguv\"}}],\"userProperties\":[{\"name\":\"ihhqancwgrwgd\",\"value\":\"datafzdy\"},{\"name\":\"tkrsn\",\"value\":\"datadfamyolvgkslaiu\"}],\"\":{\"tqcxoamxumwzduhi\":\"datarswvwzu\"}},{\"type\":\"Activity\",\"name\":\"omxvbruzxsnz\",\"description\":\"pgf\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"eozgnwmcizclnqe\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"ondr\":\"datapwdfjsj\",\"pqwrsfdpikx\":\"datancfoqdspslc\",\"aegrppwoligfljt\":\"datag\"}}],\"userProperties\":[{\"name\":\"cwzdwvyjzok\",\"value\":\"datayci\"},{\"name\":\"mywjcf\",\"value\":\"datamfoztwmvprn\"}],\"\":{\"xbiwnqewqt\":\"datasex\",\"galsparbjsvq\":\"dataztogihpylfdrye\",\"lvnosblc\":\"databvgemkze\"}}],\"ifFalseActivities\":[{\"type\":\"Activity\",\"name\":\"wac\",\"description\":\"hkpdcv\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"ijuntmufhzcc\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Failed\",\"Failed\"],\"\":{\"xymtcwacavz\":\"datarfxrg\",\"xid\":\"datadybhydlq\",\"ihnsaespzwgpjrix\":\"datast\"}},{\"activity\":\"ao\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Skipped\"],\"\":{\"gaiypihqmmm\":\"datamfcnh\",\"xnivvuwrvghlzr\":\"dataokdqkfbpf\",\"bfi\":\"datakgpipwtrt\",\"oawzkefzd\":\"databddhfkjsqqqu\"}},{\"activity\":\"yhvaovoqon\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Succeeded\"],\"\":{\"hmldwty\":\"dataqiytr\",\"vbbc\":\"databnmstflkfgz\",\"sbqw\":\"databcfecmcprggchf\"}}],\"userProperties\":[{\"name\":\"gvxhw\",\"value\":\"dataqipfrrvngill\"},{\"name\":\"mfbl\",\"value\":\"datagekouxurlifc\"}],\"\":{\"awqxrenjzlqbtef\":\"dataffoibxjgcuppws\"}}]}")
            .toObject(IfConditionActivityTypeProperties.class);
        Assertions.assertEquals("cx", model.expression().value());
        Assertions.assertEquals("r", model.ifTrueActivities().get(0).name());
        Assertions.assertEquals("prdgmmgtqgzdfjf", model.ifTrueActivities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.ifTrueActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.ifTrueActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("umyuiquzfotf", model.ifTrueActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.ifTrueActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ihhqancwgrwgd", model.ifTrueActivities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("wac", model.ifFalseActivities().get(0).name());
        Assertions.assertEquals("hkpdcv", model.ifFalseActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.ifFalseActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED,
            model.ifFalseActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("ijuntmufhzcc", model.ifFalseActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.ifFalseActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("gvxhw", model.ifFalseActivities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IfConditionActivityTypeProperties model = new IfConditionActivityTypeProperties()
            .withExpression(new Expression().withValue("cx"))
            .withIfTrueActivities(Arrays.asList(
                new Activity().withName("r")
                    .withDescription("prdgmmgtqgzdfjf")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(new ActivityDependency()
                        .withActivity("umyuiquzfotf")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.FAILED, DependencyCondition.COMPLETED,
                                DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("ti")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SKIPPED,
                                    DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("ihhqancwgrwgd").withValue("datafzdy"),
                            new UserProperty().withName("tkrsn").withValue("datadfamyolvgkslaiu")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("omxvbruzxsnz")
                    .withDescription("pgf")
                    .withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("eozgnwmcizclnqe")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("cwzdwvyjzok").withValue("datayci"),
                        new UserProperty().withName("mywjcf").withValue("datamfoztwmvprn")))
                    .withAdditionalProperties(mapOf("type", "Activity"))))
            .withIfFalseActivities(Arrays.asList(new Activity().withName("wac")
                .withDescription("hkpdcv")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("ijuntmufhzcc")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                            DependencyCondition.SUCCEEDED, DependencyCondition.FAILED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("ao")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                            DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("yhvaovoqon")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED,
                            DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("gvxhw").withValue("dataqipfrrvngill"),
                    new UserProperty().withName("mfbl").withValue("datagekouxurlifc")))
                .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(IfConditionActivityTypeProperties.class);
        Assertions.assertEquals("cx", model.expression().value());
        Assertions.assertEquals("r", model.ifTrueActivities().get(0).name());
        Assertions.assertEquals("prdgmmgtqgzdfjf", model.ifTrueActivities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.ifTrueActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.ifTrueActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("umyuiquzfotf", model.ifTrueActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.ifTrueActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ihhqancwgrwgd", model.ifTrueActivities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("wac", model.ifFalseActivities().get(0).name());
        Assertions.assertEquals("hkpdcv", model.ifFalseActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.ifFalseActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED,
            model.ifFalseActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("ijuntmufhzcc", model.ifFalseActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.ifFalseActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("gvxhw", model.ifFalseActivities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
