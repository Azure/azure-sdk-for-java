// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.IfConditionActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.Expression;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class IfConditionActivityTypePropertiesTests {
    @Test
    public void testDeserialize() {
        IfConditionActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"expression\":{\"value\":\"nosdkvi\"},\"ifTrueActivities\":[{\"type\":\"Activity\",\"name\":\"sgm\",\"description\":\"rnzpducdaak\",\"dependsOn\":[],\"userProperties\":[],\"\":{}},{\"type\":\"Activity\",\"name\":\"oimyfpqd\",\"description\":\"kpp\",\"dependsOn\":[],\"userProperties\":[],\"\":{}},{\"type\":\"Activity\",\"name\":\"pctf\",\"description\":\"kffffgkuh\",\"dependsOn\":[],\"userProperties\":[],\"\":{}}],\"ifFalseActivities\":[{\"type\":\"Activity\",\"name\":\"kke\",\"description\":\"kj\",\"dependsOn\":[],\"userProperties\":[],\"\":{}},{\"type\":\"Activity\",\"name\":\"mxjq\",\"description\":\"h\",\"dependsOn\":[],\"userProperties\":[],\"\":{}},{\"type\":\"Activity\",\"name\":\"lzaahzbhuroolk\",\"description\":\"irhhmo\",\"dependsOn\":[],\"userProperties\":[],\"\":{}},{\"type\":\"Activity\",\"name\":\"jzc\",\"description\":\"axoialahfxwccokd\",\"dependsOn\":[],\"userProperties\":[],\"\":{}}]}")
                .toObject(IfConditionActivityTypeProperties.class);
        Assertions.assertEquals("nosdkvi", model.expression().value());
        Assertions.assertEquals("sgm", model.ifTrueActivities().get(0).name());
        Assertions.assertEquals("rnzpducdaak", model.ifTrueActivities().get(0).description());
        Assertions.assertEquals("kke", model.ifFalseActivities().get(0).name());
        Assertions.assertEquals("kj", model.ifFalseActivities().get(0).description());
    }

    @Test
    public void testSerialize() {
        IfConditionActivityTypeProperties model =
            new IfConditionActivityTypeProperties()
                .withExpression(new Expression().withValue("nosdkvi"))
                .withIfTrueActivities(
                    Arrays
                        .asList(
                            new Activity()
                                .withName("sgm")
                                .withDescription("rnzpducdaak")
                                .withDependsOn(Arrays.asList())
                                .withUserProperties(Arrays.asList())
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity()
                                .withName("oimyfpqd")
                                .withDescription("kpp")
                                .withDependsOn(Arrays.asList())
                                .withUserProperties(Arrays.asList())
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity()
                                .withName("pctf")
                                .withDescription("kffffgkuh")
                                .withDependsOn(Arrays.asList())
                                .withUserProperties(Arrays.asList())
                                .withAdditionalProperties(mapOf("type", "Activity"))))
                .withIfFalseActivities(
                    Arrays
                        .asList(
                            new Activity()
                                .withName("kke")
                                .withDescription("kj")
                                .withDependsOn(Arrays.asList())
                                .withUserProperties(Arrays.asList())
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity()
                                .withName("mxjq")
                                .withDescription("h")
                                .withDependsOn(Arrays.asList())
                                .withUserProperties(Arrays.asList())
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity()
                                .withName("lzaahzbhuroolk")
                                .withDescription("irhhmo")
                                .withDependsOn(Arrays.asList())
                                .withUserProperties(Arrays.asList())
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity()
                                .withName("jzc")
                                .withDescription("axoialahfxwccokd")
                                .withDependsOn(Arrays.asList())
                                .withUserProperties(Arrays.asList())
                                .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(IfConditionActivityTypeProperties.class);
        Assertions.assertEquals("nosdkvi", model.expression().value());
        Assertions.assertEquals("sgm", model.ifTrueActivities().get(0).name());
        Assertions.assertEquals("rnzpducdaak", model.ifTrueActivities().get(0).description());
        Assertions.assertEquals("kke", model.ifFalseActivities().get(0).name());
        Assertions.assertEquals("kj", model.ifFalseActivities().get(0).description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
