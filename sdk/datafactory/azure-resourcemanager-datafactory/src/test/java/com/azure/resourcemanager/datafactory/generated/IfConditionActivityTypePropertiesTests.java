// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.IfConditionActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IfConditionActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IfConditionActivityTypeProperties model = BinaryData.fromString(
            "{\"expression\":{\"value\":\"mueuwpivsltlyq\"},\"ifTrueActivities\":[{\"type\":\"Activity\",\"name\":\"wndcjrdqcmsrzrcd\",\"description\":\"zgaoptwqfgqccon\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"dpmez\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Failed\",\"Completed\"],\"\":{\"ymqzmuinu\":\"datarafkrvvdwk\",\"djinuoslzrb\":\"datatgjgpc\",\"jgdvwamc\":\"datazfevwcjr\",\"svximqkuyflzx\":\"datacnevkfkmena\"}},{\"activity\":\"suuapktfvemwfwc\",\"dependencyConditions\":[\"Failed\"],\"\":{\"ykl\":\"datavywzh\"}},{\"activity\":\"cojxpkpsqk\",\"dependencyConditions\":[\"Completed\",\"Completed\"],\"\":{\"zpgn\":\"dataybkhyqou\"}}],\"userProperties\":[{\"name\":\"snvtl\",\"value\":\"datanmydshgfdvws\"},{\"name\":\"cczyqnfsjnrfpz\",\"value\":\"datavaeojnskekhmo\"},{\"name\":\"vvrk\",\"value\":\"datasqfazsiiz\"},{\"name\":\"whax\",\"value\":\"datahaet\"}],\"\":{\"yajyiwvqlr\":\"datafjlismacac\",\"pjbja\":\"dataobvkg\"}},{\"type\":\"Activity\",\"name\":\"nky\",\"description\":\"j\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"hukuypyeo\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Completed\",\"Succeeded\"],\"\":{\"ldgbgua\":\"datakldtwrryclj\"}},{\"activity\":\"ilcdbudfwl\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"d\":\"datarfkslgpl\",\"tmu\":\"datacmkdhgpzqibqilc\",\"rjxaawentkok\":\"dataemex\"}},{\"activity\":\"djwp\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"nvtlbc\":\"dataqfwxicbvw\",\"wof\":\"datagrk\",\"xpeodbmuzpd\":\"dataeayowzp\",\"hi\":\"datathpsycasx\"}}],\"userProperties\":[{\"name\":\"miipffjgjm\",\"value\":\"datasnfpxrzqagmci\"},{\"name\":\"sqawiabyfzadeu\",\"value\":\"datatkfvdjgw\"}],\"\":{\"ulozdoi\":\"dataqgabrbsuxgnwuy\",\"iv\":\"datahrxjiw\",\"lau\":\"dataorqlkycwnb\",\"ah\":\"dataazyrisciokbvft\"}}],\"ifFalseActivities\":[{\"type\":\"Activity\",\"name\":\"llfkcro\",\"description\":\"imhdlmagd\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"ndfpd\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\"],\"\":{\"tklojlgsbystznwj\":\"datasxxk\",\"ptvkjdowuzasd\":\"datasvllefliriq\",\"peeprmeb\":\"datatufmujadippdntun\",\"es\":\"dataxmaacrqrovbozj\"}},{\"activity\":\"rcxug\",\"dependencyConditions\":[\"Failed\"],\"\":{\"guelrasdrr\":\"datayvxdbuzdphogmrc\",\"njkbmfcrysvcab\":\"dataozzvygolz\",\"jmzqnbwnlo\":\"datak\",\"hrpv\":\"dataz\"}},{\"activity\":\"xutcoqclypbrnjor\",\"dependencyConditions\":[\"Failed\",\"Failed\"],\"\":{\"efhbzic\":\"dataxitppebuvxxloqr\",\"lzwvmwjuqchc\":\"datafdwgbgenwesxzu\"}}],\"userProperties\":[{\"name\":\"yscarjm\",\"value\":\"dataiewv\"},{\"name\":\"pyskhkvkwdtbvy\",\"value\":\"datalgkzbyxtprxtf\"},{\"name\":\"vng\",\"value\":\"datacsno\"},{\"name\":\"kglygeuo\",\"value\":\"datalywjvdr\"}],\"\":{\"nt\":\"datawzbrg\",\"n\":\"dataptrjtyhthfcpz\",\"g\":\"datavkhkubpojhdxcha\",\"vrnwxolfhiq\":\"dataw\"}},{\"type\":\"Activity\",\"name\":\"iulfxgzyr\",\"description\":\"uxlt\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"catozsodpbsqcw\",\"dependencyConditions\":[\"Failed\"],\"\":{\"ribmeuukk\":\"datahuixczycifdrjry\",\"jmnxlf\":\"datanwtucmh\",\"wzgb\":\"datam\",\"mrpbmxmxshfh\":\"databwmiap\"}},{\"activity\":\"p\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Failed\"],\"\":{\"vxytmoqnytucuzy\":\"datap\",\"e\":\"dataigdebsinsoybe\",\"mqjcagxrozcfcxk\":\"datarpouhlhlud\",\"kgepmnxvahqvc\":\"datahjxbteakdr\"}},{\"activity\":\"lphlkxdanlycc\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Skipped\"],\"\":{\"qzdedizdmwndnsg\":\"dataa\"}}],\"userProperties\":[{\"name\":\"pstwmdmwsf\",\"value\":\"datardyrxloxa\"},{\"name\":\"mxnmx\",\"value\":\"datamdlynlhsdtc\"},{\"name\":\"flevndldhwrf\",\"value\":\"dataflhwfrjyuhuthqdf\"},{\"name\":\"bizloyqjrkt\",\"value\":\"datadvuqve\"}],\"\":{\"relbzwxxsowd\":\"dataogesrmahszxcfbp\",\"nhqfae\":\"datauwvupn\"}},{\"type\":\"Activity\",\"name\":\"sboeapsraydlpu\",\"description\":\"makkwqrkaymdgzb\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"hrpamav\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Failed\"],\"\":{\"dw\":\"databbacixlirolaoo\"}},{\"activity\":\"jerm\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Skipped\"],\"\":{\"bexk\":\"dataoeqgkutkcczbu\"}}],\"userProperties\":[{\"name\":\"kjvsvywnzliqvq\",\"value\":\"datavfihnasaquk\"}],\"\":{\"qzf\":\"dataludfdhiori\",\"lywtgilhx\":\"datayqadtqwtsatjjfav\"}}]}")
            .toObject(IfConditionActivityTypeProperties.class);
        Assertions.assertEquals("mueuwpivsltlyq", model.expression().value());
        Assertions.assertEquals("wndcjrdqcmsrzrcd", model.ifTrueActivities().get(0).name());
        Assertions.assertEquals("zgaoptwqfgqccon", model.ifTrueActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.ifTrueActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.ifTrueActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("dpmez", model.ifTrueActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.ifTrueActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("snvtl", model.ifTrueActivities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("llfkcro", model.ifFalseActivities().get(0).name());
        Assertions.assertEquals("imhdlmagd", model.ifFalseActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.ifFalseActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.ifFalseActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("ndfpd", model.ifFalseActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.ifFalseActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("yscarjm", model.ifFalseActivities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IfConditionActivityTypeProperties model = new IfConditionActivityTypeProperties()
            .withExpression(new Expression().withValue("mueuwpivsltlyq"))
            .withIfTrueActivities(Arrays.asList(
                new Activity().withName("wndcjrdqcmsrzrcd")
                    .withDescription("zgaoptwqfgqccon")
                    .withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("dpmez")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                            DependencyCondition.SUCCEEDED, DependencyCondition.FAILED, DependencyCondition.COMPLETED))
                        .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("suuapktfvemwfwc")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("cojxpkpsqk")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("snvtl").withValue("datanmydshgfdvws"),
                            new UserProperty().withName("cczyqnfsjnrfpz").withValue("datavaeojnskekhmo"),
                            new UserProperty()
                                .withName("vvrk")
                                .withValue("datasqfazsiiz"),
                            new UserProperty().withName("whax").withValue("datahaet")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("nky")
                    .withDescription("j")
                    .withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("hukuypyeo")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                            DependencyCondition.SKIPPED, DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("ilcdbudfwl")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("djwp")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("miipffjgjm").withValue("datasnfpxrzqagmci"),
                            new UserProperty().withName("sqawiabyfzadeu").withValue("datatkfvdjgw")))
                    .withAdditionalProperties(mapOf("type", "Activity"))))
            .withIfFalseActivities(
                Arrays
                    .asList(
                        new Activity().withName("llfkcro")
                            .withDescription("imhdlmagd")
                            .withState(ActivityState.ACTIVE)
                            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                            .withDependsOn(
                                Arrays
                                    .asList(
                                        new ActivityDependency().withActivity("ndfpd")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                                DependencyCondition.SUCCEEDED))
                                            .withAdditionalProperties(mapOf()),
                                        new ActivityDependency().withActivity("rcxug")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                                            .withAdditionalProperties(mapOf()),
                                        new ActivityDependency().withActivity("xutcoqclypbrnjor")
                                            .withDependencyConditions(
                                                Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED))
                                            .withAdditionalProperties(mapOf())))
                            .withUserProperties(
                                Arrays.asList(new UserProperty().withName("yscarjm").withValue("dataiewv"),
                                    new UserProperty().withName("pyskhkvkwdtbvy").withValue("datalgkzbyxtprxtf"),
                                    new UserProperty().withName("vng").withValue("datacsno"),
                                    new UserProperty().withName("kglygeuo").withValue("datalywjvdr")))
                            .withAdditionalProperties(mapOf("type", "Activity")),
                        new Activity().withName("iulfxgzyr")
                            .withDescription("uxlt")
                            .withState(ActivityState.INACTIVE)
                            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                            .withDependsOn(Arrays.asList(
                                new ActivityDependency().withActivity("catozsodpbsqcw")
                                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                                    .withAdditionalProperties(mapOf()),
                                new ActivityDependency().withActivity("p")
                                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                        DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                                    .withAdditionalProperties(mapOf()),
                                new ActivityDependency().withActivity("lphlkxdanlycc")
                                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                                        DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                                    .withAdditionalProperties(mapOf())))
                            .withUserProperties(Arrays.asList(
                                new UserProperty().withName("pstwmdmwsf").withValue("datardyrxloxa"),
                                new UserProperty().withName("mxnmx").withValue("datamdlynlhsdtc"),
                                new UserProperty().withName("flevndldhwrf").withValue("dataflhwfrjyuhuthqdf"),
                                new UserProperty().withName("bizloyqjrkt").withValue("datadvuqve")))
                            .withAdditionalProperties(mapOf("type", "Activity")),
                        new Activity().withName("sboeapsraydlpu")
                            .withDescription("makkwqrkaymdgzb")
                            .withState(ActivityState.INACTIVE)
                            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                            .withDependsOn(Arrays.asList(
                                new ActivityDependency().withActivity("hrpamav")
                                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                                        DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                                    .withAdditionalProperties(mapOf()),
                                new ActivityDependency().withActivity("jerm")
                                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                        DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                                    .withAdditionalProperties(mapOf())))
                            .withUserProperties(Arrays
                                .asList(new UserProperty().withName("kjvsvywnzliqvq").withValue("datavfihnasaquk")))
                            .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(IfConditionActivityTypeProperties.class);
        Assertions.assertEquals("mueuwpivsltlyq", model.expression().value());
        Assertions.assertEquals("wndcjrdqcmsrzrcd", model.ifTrueActivities().get(0).name());
        Assertions.assertEquals("zgaoptwqfgqccon", model.ifTrueActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.ifTrueActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.ifTrueActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("dpmez", model.ifTrueActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.ifTrueActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("snvtl", model.ifTrueActivities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("llfkcro", model.ifFalseActivities().get(0).name());
        Assertions.assertEquals("imhdlmagd", model.ifFalseActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.ifFalseActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.ifFalseActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("ndfpd", model.ifFalseActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.ifFalseActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("yscarjm", model.ifFalseActivities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
