// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.IfConditionActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IfConditionActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IfConditionActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"expression\":{\"value\":\"ewtddigmmjve\"},\"ifTrueActivities\":[{\"type\":\"Activity\",\"name\":\"crbkwcnvgx\",\"description\":\"ih\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"wcbvhqjpia\",\"dependencyConditions\":[\"Completed\",\"Completed\"],\"\":{\"q\":\"datamzntroafz\"}},{\"activity\":\"ogfo\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Failed\",\"Skipped\"],\"\":{\"oaxszuhuoj\":\"datak\"}},{\"activity\":\"b\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Succeeded\",\"Failed\"],\"\":{\"betemam\":\"datahecq\",\"umxyqhctr\":\"datashnksupchzspgby\"}}],\"userProperties\":[{\"name\":\"hgchtaeac\",\"value\":\"dataqk\"},{\"name\":\"rzukajkihnlqf\",\"value\":\"dataawynslcfx\"}],\"\":{\"htfugppiudhylxq\":\"dataaviiriedf\"}},{\"type\":\"Activity\",\"name\":\"sumqdri\",\"description\":\"xzcrf\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"exmgcqlufo\",\"dependencyConditions\":[\"Completed\"],\"\":{\"snaklobc\":\"datakqhgfwyzv\",\"mltdgxiqrgr\":\"datay\"}},{\"activity\":\"xjfxu\",\"dependencyConditions\":[\"Succeeded\",\"Failed\",\"Succeeded\"],\"\":{\"buglalaazncnhzqn\":\"dataytgnycnklqipnzgn\",\"galodfsbhphwt\":\"dataxkscyykrzrjjernj\",\"ajh\":\"datagy\"}}],\"userProperties\":[{\"name\":\"arldsijcm\",\"value\":\"dataugpxgxjmwzkafuvb\"},{\"name\":\"cyarsbhjlcxvsmr\",\"value\":\"dataypbi\"}],\"\":{\"b\":\"dataznaixjsfasxfamn\",\"wco\":\"dataxbglqybfnxej\",\"cnuozjg\":\"datajmpsxot\",\"gnrrqvrxouoqte\":\"datacxbenwi\"}}],\"ifFalseActivities\":[{\"type\":\"Activity\",\"name\":\"aqeskmvrcy\",\"description\":\"aa\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"egsswijq\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Completed\"],\"\":{\"cu\":\"datatczxwqmundlegd\",\"utbtr\":\"datadrmqkw\",\"ppj\":\"datarygdpjufmvozqmtc\",\"qrvtwvyjprr\":\"datagctsatnrywouewrw\"}}],\"userProperties\":[{\"name\":\"qpmzznmnscs\",\"value\":\"dataadvbwewwdfeie\"},{\"name\":\"wmaxlppagkm\",\"value\":\"databeneqapll\"},{\"name\":\"dowsj\",\"value\":\"datavpvtyullivcymnpb\"}],\"\":{\"hcatp\":\"datal\",\"qnajmwpeaoeggi\":\"dataq\",\"ugru\":\"datalpglhlwu\"}},{\"type\":\"Activity\",\"name\":\"oprnbozvi\",\"description\":\"mhitqrpbwykee\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"pkodbquvftka\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\"],\"\":{\"kzgwf\":\"dataogwfqtqbnakmgydf\",\"kankjkszudx\":\"datageqzkpergzscr\"}}],\"userProperties\":[{\"name\":\"vxvoqbruyma\",\"value\":\"dataj\"}],\"\":{\"vydjaxzstuhlwz\":\"datafxirjf\",\"ugbymnyfh\":\"datanf\",\"rpsl\":\"dataxcplhqzpwqpu\",\"cnfgtup\":\"datae\"}}]}")
                .toObject(IfConditionActivityTypeProperties.class);
        Assertions.assertEquals("ewtddigmmjve", model.expression().value());
        Assertions.assertEquals("crbkwcnvgx", model.ifTrueActivities().get(0).name());
        Assertions.assertEquals("ih", model.ifTrueActivities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.ifTrueActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.ifTrueActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("wcbvhqjpia", model.ifTrueActivities().get(0).dependsOn().get(0).activity());
        Assertions
            .assertEquals(
                DependencyCondition.COMPLETED,
                model.ifTrueActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hgchtaeac", model.ifTrueActivities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("aqeskmvrcy", model.ifFalseActivities().get(0).name());
        Assertions.assertEquals("aa", model.ifFalseActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.ifFalseActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.ifFalseActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("egsswijq", model.ifFalseActivities().get(0).dependsOn().get(0).activity());
        Assertions
            .assertEquals(
                DependencyCondition.COMPLETED,
                model.ifFalseActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qpmzznmnscs", model.ifFalseActivities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IfConditionActivityTypeProperties model =
            new IfConditionActivityTypeProperties()
                .withExpression(new Expression().withValue("ewtddigmmjve"))
                .withIfTrueActivities(
                    Arrays
                        .asList(
                            new Activity()
                                .withName("crbkwcnvgx")
                                .withDescription("ih")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                                .withDependsOn(
                                    Arrays
                                        .asList(
                                            new ActivityDependency()
                                                .withActivity("wcbvhqjpia")
                                                .withDependencyConditions(
                                                    Arrays
                                                        .asList(
                                                            DependencyCondition.COMPLETED,
                                                            DependencyCondition.COMPLETED))
                                                .withAdditionalProperties(mapOf()),
                                            new ActivityDependency()
                                                .withActivity("ogfo")
                                                .withDependencyConditions(
                                                    Arrays
                                                        .asList(
                                                            DependencyCondition.SUCCEEDED,
                                                            DependencyCondition.SKIPPED,
                                                            DependencyCondition.FAILED,
                                                            DependencyCondition.SKIPPED))
                                                .withAdditionalProperties(mapOf()),
                                            new ActivityDependency()
                                                .withActivity("b")
                                                .withDependencyConditions(
                                                    Arrays
                                                        .asList(
                                                            DependencyCondition.COMPLETED,
                                                            DependencyCondition.SKIPPED,
                                                            DependencyCondition.SUCCEEDED,
                                                            DependencyCondition.FAILED))
                                                .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays
                                        .asList(
                                            new UserProperty().withName("hgchtaeac").withValue("dataqk"),
                                            new UserProperty().withName("rzukajkihnlqf").withValue("dataawynslcfx")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity()
                                .withName("sumqdri")
                                .withDescription("xzcrf")
                                .withState(ActivityState.ACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                                .withDependsOn(
                                    Arrays
                                        .asList(
                                            new ActivityDependency()
                                                .withActivity("exmgcqlufo")
                                                .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                                                .withAdditionalProperties(mapOf()),
                                            new ActivityDependency()
                                                .withActivity("xjfxu")
                                                .withDependencyConditions(
                                                    Arrays
                                                        .asList(
                                                            DependencyCondition.SUCCEEDED,
                                                            DependencyCondition.FAILED,
                                                            DependencyCondition.SUCCEEDED))
                                                .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays
                                        .asList(
                                            new UserProperty().withName("arldsijcm").withValue("dataugpxgxjmwzkafuvb"),
                                            new UserProperty().withName("cyarsbhjlcxvsmr").withValue("dataypbi")))
                                .withAdditionalProperties(mapOf("type", "Activity"))))
                .withIfFalseActivities(
                    Arrays
                        .asList(
                            new Activity()
                                .withName("aqeskmvrcy")
                                .withDescription("aa")
                                .withState(ActivityState.ACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                                .withDependsOn(
                                    Arrays
                                        .asList(
                                            new ActivityDependency()
                                                .withActivity("egsswijq")
                                                .withDependencyConditions(
                                                    Arrays
                                                        .asList(
                                                            DependencyCondition.COMPLETED,
                                                            DependencyCondition.FAILED,
                                                            DependencyCondition.COMPLETED))
                                                .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays
                                        .asList(
                                            new UserProperty().withName("qpmzznmnscs").withValue("dataadvbwewwdfeie"),
                                            new UserProperty().withName("wmaxlppagkm").withValue("databeneqapll"),
                                            new UserProperty().withName("dowsj").withValue("datavpvtyullivcymnpb")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity()
                                .withName("oprnbozvi")
                                .withDescription("mhitqrpbwykee")
                                .withState(ActivityState.ACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                                .withDependsOn(
                                    Arrays
                                        .asList(
                                            new ActivityDependency()
                                                .withActivity("pkodbquvftka")
                                                .withDependencyConditions(
                                                    Arrays
                                                        .asList(
                                                            DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                                                .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays.asList(new UserProperty().withName("vxvoqbruyma").withValue("dataj")))
                                .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(IfConditionActivityTypeProperties.class);
        Assertions.assertEquals("ewtddigmmjve", model.expression().value());
        Assertions.assertEquals("crbkwcnvgx", model.ifTrueActivities().get(0).name());
        Assertions.assertEquals("ih", model.ifTrueActivities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.ifTrueActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.ifTrueActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("wcbvhqjpia", model.ifTrueActivities().get(0).dependsOn().get(0).activity());
        Assertions
            .assertEquals(
                DependencyCondition.COMPLETED,
                model.ifTrueActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hgchtaeac", model.ifTrueActivities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("aqeskmvrcy", model.ifFalseActivities().get(0).name());
        Assertions.assertEquals("aa", model.ifFalseActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.ifFalseActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.ifFalseActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("egsswijq", model.ifFalseActivities().get(0).dependsOn().get(0).activity());
        Assertions
            .assertEquals(
                DependencyCondition.COMPLETED,
                model.ifFalseActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qpmzznmnscs", model.ifFalseActivities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
