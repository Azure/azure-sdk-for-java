// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.XmlDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class XmlDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        XmlDataset model = BinaryData.fromString(
            "{\"type\":\"Xml\",\"typeProperties\":{\"location\":{\"type\":\"DatasetLocation\",\"folderPath\":\"datauvda\",\"fileName\":\"dataxmrszbknimxlpne\",\"\":{\"za\":\"datazutylcu\",\"qaeht\":\"datamnb\",\"edcgl\":\"databjmbnvynfaooeac\",\"lpbyxroiduyq\":\"datakakddidahzllrqm\"}},\"encodingName\":\"dataffmnoiics\",\"nullValue\":\"datayhbrjjta\",\"compression\":{\"type\":\"datardsjrho\",\"level\":\"dataqwgusxxhdo\",\"\":{\"bdmvsby\":\"datawyblv\",\"kmkwjfbo\":\"datadaelqpv\",\"v\":\"dataloggdusxursu\",\"qrizfwihvaan\":\"dataxcjkcoqwczsy\"}}},\"description\":\"tnhjrfdmfd\",\"structure\":\"datab\",\"schema\":\"dataxxjfwtgdfkkauig\",\"linkedServiceName\":{\"referenceName\":\"muafmczfedyuepsv\",\"parameters\":{\"jvyweo\":\"dataida\",\"lsyasv\":\"datafkumcfjxoky\",\"krknf\":\"datankwmygjj\",\"rdtulcrcjdklotcs\":\"datarugjqyckgtx\"}},\"parameters\":{\"sl\":{\"type\":\"SecureString\",\"defaultValue\":\"dataonsvobchkxfpwhd\"},\"wayqshwyqxrid\":{\"type\":\"Bool\",\"defaultValue\":\"dataglmnnk\"},\"wqu\":{\"type\":\"Array\",\"defaultValue\":\"datasaqjmkgx\"},\"iizevjykofvez\":{\"type\":\"String\",\"defaultValue\":\"dataylztp\"}},\"annotations\":[\"datahkqtwqlepjj\"],\"folder\":{\"name\":\"as\"},\"\":{\"togffjwajnrtwz\":\"datac\",\"nhrkmjqncfvdsc\":\"dataaqkifmxawostfz\",\"wbgodtggrssg\":\"datahemvwfnqqwypvnd\",\"uymvecvzts\":\"datajfkainj\"}}")
            .toObject(XmlDataset.class);
        Assertions.assertEquals("tnhjrfdmfd", model.description());
        Assertions.assertEquals("muafmczfedyuepsv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("sl").type());
        Assertions.assertEquals("as", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        XmlDataset model = new XmlDataset().withDescription("tnhjrfdmfd")
            .withStructure("datab")
            .withSchema("dataxxjfwtgdfkkauig")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("muafmczfedyuepsv")
                .withParameters(mapOf("jvyweo", "dataida", "lsyasv", "datafkumcfjxoky", "krknf", "datankwmygjj",
                    "rdtulcrcjdklotcs", "datarugjqyckgtx")))
            .withParameters(mapOf("sl",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("dataonsvobchkxfpwhd"),
                "wayqshwyqxrid",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataglmnnk"), "wqu",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datasaqjmkgx"),
                "iizevjykofvez",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataylztp")))
            .withAnnotations(Arrays.asList("datahkqtwqlepjj"))
            .withFolder(new DatasetFolder().withName("as"))
            .withLocation(new DatasetLocation().withFolderPath("datauvda")
                .withFileName("dataxmrszbknimxlpne")
                .withAdditionalProperties(mapOf("type", "DatasetLocation")))
            .withEncodingName("dataffmnoiics")
            .withNullValue("datayhbrjjta")
            .withCompression(new DatasetCompression().withType("datardsjrho")
                .withLevel("dataqwgusxxhdo")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(XmlDataset.class);
        Assertions.assertEquals("tnhjrfdmfd", model.description());
        Assertions.assertEquals("muafmczfedyuepsv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("sl").type());
        Assertions.assertEquals("as", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
