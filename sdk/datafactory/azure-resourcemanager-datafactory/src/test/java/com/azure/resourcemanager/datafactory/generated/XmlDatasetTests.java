// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.XmlDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class XmlDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        XmlDataset model = BinaryData.fromString(
            "{\"type\":\"Xml\",\"typeProperties\":{\"location\":{\"type\":\"DatasetLocation\",\"folderPath\":\"datalurb\",\"fileName\":\"dataygpnyhgdzuqsca\",\"\":{\"y\":\"datavoupr\",\"mgw\":\"dataqzssl\",\"hgyqvpbfj\":\"datanivrxpfduio\"}},\"encodingName\":\"dataqzucfzluczdquur\",\"nullValue\":\"datarmvhvzi\",\"compression\":{\"type\":\"databprnqujywzcqygg\",\"level\":\"datawsvh\",\"\":{\"jtobdrrp\":\"dataqiwy\",\"w\":\"datarehkunsbfjhh\"}}},\"description\":\"kvegeattbzkgtzq\",\"structure\":\"dataqsttewuvcysjeuf\",\"schema\":\"dataflpd\",\"linkedServiceName\":{\"referenceName\":\"tfnonpi\",\"parameters\":{\"lvtlrvbst\":\"datalvrhprrvbwonleq\",\"uninttlnrjdszd\":\"datahuy\",\"iciqppo\":\"datau\",\"e\":\"datavgp\"}},\"parameters\":{\"tfnressfepgck\":{\"type\":\"Array\",\"defaultValue\":\"datawjnoxuo\"},\"mjnhjlu\":{\"type\":\"Float\",\"defaultValue\":\"datamgvsnvbtqdxfmj\"}},\"annotations\":[\"databsupu\"],\"folder\":{\"name\":\"ck\"},\"\":{\"sjjfd\":\"datazwhcukvb\",\"kcgn\":\"datazhrjqfyaytvsly\"}}")
            .toObject(XmlDataset.class);
        Assertions.assertEquals("kvegeattbzkgtzq", model.description());
        Assertions.assertEquals("tfnonpi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("tfnressfepgck").type());
        Assertions.assertEquals("ck", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        XmlDataset model = new XmlDataset().withDescription("kvegeattbzkgtzq")
            .withStructure("dataqsttewuvcysjeuf")
            .withSchema("dataflpd")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("tfnonpi")
                .withParameters(mapOf("lvtlrvbst", "datalvrhprrvbwonleq", "uninttlnrjdszd", "datahuy", "iciqppo",
                    "datau", "e", "datavgp")))
            .withParameters(mapOf("tfnressfepgck",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datawjnoxuo"), "mjnhjlu",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datamgvsnvbtqdxfmj")))
            .withAnnotations(Arrays.asList("databsupu"))
            .withFolder(new DatasetFolder().withName("ck"))
            .withLocation(new DatasetLocation().withFolderPath("datalurb")
                .withFileName("dataygpnyhgdzuqsca")
                .withAdditionalProperties(mapOf("type", "DatasetLocation")))
            .withEncodingName("dataqzucfzluczdquur")
            .withNullValue("datarmvhvzi")
            .withCompression(new DatasetCompression().withType("databprnqujywzcqygg")
                .withLevel("datawsvh")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(XmlDataset.class);
        Assertions.assertEquals("kvegeattbzkgtzq", model.description());
        Assertions.assertEquals("tfnonpi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("tfnressfepgck").type());
        Assertions.assertEquals("ck", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
