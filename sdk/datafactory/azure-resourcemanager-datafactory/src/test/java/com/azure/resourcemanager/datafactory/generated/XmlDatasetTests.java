// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.XmlDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class XmlDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        XmlDataset model = BinaryData.fromString(
            "{\"type\":\"tpfcudvafnbfbqv\",\"typeProperties\":{\"location\":{\"type\":\"i\",\"folderPath\":\"datazlrz\",\"fileName\":\"dataasd\",\"\":{\"tgkiqlarh\":\"datamjqmv\",\"ffzjwztsmpchggry\":\"datatwvcazekdzd\"}},\"encodingName\":\"datagfyatig\",\"nullValue\":\"datafrrkdknczgorywnv\",\"compression\":{\"type\":\"datatv\",\"level\":\"dataevdlh\",\"\":{\"bpyhssrlvkpkp\":\"dataka\",\"ccebxxopyicyvspe\":\"dataocm\",\"hgajkrdy\":\"datalhwyykgvrccpumd\"}}},\"description\":\"qnxhgk\",\"structure\":\"datadwzejp\",\"schema\":\"datawz\",\"linkedServiceName\":{\"referenceName\":\"cmbpwdlu\",\"parameters\":{\"ffbvtzldzchub\":\"dataprldidwm\"}},\"parameters\":{\"hfrbzakpjt\":{\"type\":\"Object\",\"defaultValue\":\"datazuvigvl\"},\"qxynqj\":{\"type\":\"Array\",\"defaultValue\":\"dataaqpojpsucmximc\"}},\"annotations\":[\"datatkyvscbgn\",\"datac\",\"datausxhircpg\",\"datavsvkkjbjolpyo\"],\"folder\":{\"name\":\"vuznadvhm\"},\"\":{\"owxxbh\":\"dataoi\",\"ksikawanvmwdv\":\"datapsyioqemqwtqszzg\",\"mpnbnfgyweoj\":\"datajqcrbk\",\"yawkch\":\"dataepgcmahiwf\"}}")
            .toObject(XmlDataset.class);
        Assertions.assertEquals("qnxhgk", model.description());
        Assertions.assertEquals("cmbpwdlu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("hfrbzakpjt").type());
        Assertions.assertEquals("vuznadvhm", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        XmlDataset model = new XmlDataset().withDescription("qnxhgk")
            .withStructure("datadwzejp")
            .withSchema("datawz")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("cmbpwdlu")
                .withParameters(mapOf("ffbvtzldzchub", "dataprldidwm")))
            .withParameters(mapOf("hfrbzakpjt",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datazuvigvl"), "qxynqj",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataaqpojpsucmximc")))
            .withAnnotations(Arrays.asList("datatkyvscbgn", "datac", "datausxhircpg", "datavsvkkjbjolpyo"))
            .withFolder(new DatasetFolder().withName("vuznadvhm"))
            .withLocation(new DatasetLocation().withFolderPath("datazlrz")
                .withFileName("dataasd")
                .withAdditionalProperties(mapOf("type", "i")))
            .withEncodingName("datagfyatig")
            .withNullValue("datafrrkdknczgorywnv")
            .withCompression(
                new DatasetCompression().withType("datatv").withLevel("dataevdlh").withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(XmlDataset.class);
        Assertions.assertEquals("qnxhgk", model.description());
        Assertions.assertEquals("cmbpwdlu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("hfrbzakpjt").type());
        Assertions.assertEquals("vuznadvhm", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
