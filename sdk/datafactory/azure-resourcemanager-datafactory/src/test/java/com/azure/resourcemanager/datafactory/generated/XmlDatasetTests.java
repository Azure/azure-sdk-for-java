// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.XmlDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class XmlDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        XmlDataset model = BinaryData.fromString(
            "{\"type\":\"Xml\",\"typeProperties\":{\"location\":{\"type\":\"DatasetLocation\",\"folderPath\":\"datahkun\",\"fileName\":\"datafjh\",\"\":{\"nwqsttewu\":\"datatpkvegeattbzkgtz\"}},\"encodingName\":\"dataysjeufjx\",\"nullValue\":\"datapditfnonpi\",\"compression\":{\"type\":\"dataxlvrhprrvbwonleq\",\"level\":\"datavtlrvbstph\",\"\":{\"u\":\"datauninttlnrjdszd\",\"vgp\":\"dataiciqppo\",\"uhwfwj\":\"datae\",\"tfnressfepgck\":\"dataoxuo\"}}},\"description\":\"jmgvsnvbtqdxf\",\"structure\":\"dataym\",\"schema\":\"datahjluqllbsupubdx\",\"linkedServiceName\":{\"referenceName\":\"kdlhzwhc\",\"parameters\":{\"zhrjqfyaytvsly\":\"databosjjfd\",\"uarlcjiwgsxfaioc\":\"datakcgn\"}},\"parameters\":{\"bpaefzqsymjw\":{\"type\":\"String\",\"defaultValue\":\"datajgnfgrzxbar\"},\"crtfodqhuauzm\":{\"type\":\"Array\",\"defaultValue\":\"datacytesmf\"}},\"annotations\":[\"datartrfzh\",\"dataezvhj\"],\"folder\":{\"name\":\"dyyrudma\"},\"\":{\"ssgfenffdxbvwfqj\":\"datatvdkxb\",\"xndmuvar\":\"datahivdrija\"}}")
            .toObject(XmlDataset.class);
        Assertions.assertEquals("jmgvsnvbtqdxf", model.description());
        Assertions.assertEquals("kdlhzwhc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("bpaefzqsymjw").type());
        Assertions.assertEquals("dyyrudma", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        XmlDataset model = new XmlDataset().withDescription("jmgvsnvbtqdxf").withStructure("dataym")
            .withSchema("datahjluqllbsupubdx")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("kdlhzwhc")
                .withParameters(mapOf("zhrjqfyaytvsly", "databosjjfd", "uarlcjiwgsxfaioc", "datakcgn")))
            .withParameters(mapOf("bpaefzqsymjw",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datajgnfgrzxbar"),
                "crtfodqhuauzm",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datacytesmf")))
            .withAnnotations(Arrays.asList("datartrfzh", "dataezvhj"))
            .withFolder(new DatasetFolder().withName("dyyrudma"))
            .withLocation(new DatasetLocation().withFolderPath("datahkun").withFileName("datafjh")
                .withAdditionalProperties(mapOf("type", "DatasetLocation")))
            .withEncodingName("dataysjeufjx").withNullValue("datapditfnonpi").withCompression(new DatasetCompression()
                .withType("dataxlvrhprrvbwonleq").withLevel("datavtlrvbstph").withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(XmlDataset.class);
        Assertions.assertEquals("jmgvsnvbtqdxf", model.description());
        Assertions.assertEquals("kdlhzwhc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("bpaefzqsymjw").type());
        Assertions.assertEquals("dyyrudma", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
