// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.UntilActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class UntilActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UntilActivity model = BinaryData.fromString(
            "{\"type\":\"Until\",\"typeProperties\":{\"expression\":{\"value\":\"fppwobhkqgb\"},\"timeout\":\"datazoixutiz\",\"activities\":[{\"type\":\"Activity\",\"name\":\"cnknkukem\",\"description\":\"svajbg\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"ankzyqi\",\"dependencyConditions\":[\"Completed\"],\"\":{\"oqrutbfkynwwmlzp\":\"datakehtrgybfumo\",\"n\":\"datarzazkaljuvm\",\"bfntgsju\":\"datalbzloae\"}},{\"activity\":\"gueggph\",\"dependencyConditions\":[\"Failed\"],\"\":{\"vafhriua\":\"datapgvw\",\"lafv\":\"dataqgkvkoynjucmyj\",\"qenbgymgjneoh\":\"datandkvbc\",\"bhg\":\"datakis\"}}],\"userProperties\":[{\"name\":\"jodskqyjsdxgefk\",\"value\":\"datarfih\"},{\"name\":\"tor\",\"value\":\"datachfuwfrqagp\"}],\"\":{\"dgpxdjkwyzqnl\":\"dataiun\",\"kaciq\":\"datazymiv\",\"gzrg\":\"dataagfkksywd\"}},{\"type\":\"Activity\",\"name\":\"flpuxyakofrsoes\",\"description\":\"ttkqcpclootceit\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"hidlscdoweorniy\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Succeeded\"],\"\":{\"sqcbxkww\":\"dataojbxkodcopirg\"}},{\"activity\":\"q\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Failed\"],\"\":{\"hyqj\":\"datafgjztzh\",\"rbirv\":\"dataga\"}},{\"activity\":\"xubbnb\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Skipped\"],\"\":{\"rzchkww\":\"dataauub\",\"lujwcyvpxbqujno\":\"databxjpytkakhvao\",\"gwzvdqpxicpozzhf\":\"datafxirjcc\"}},{\"activity\":\"uraqpcspsbrd\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Completed\"],\"\":{\"udqgf\":\"dataeasbvzufkzuzz\"}}],\"userProperties\":[{\"name\":\"mfqtnqaqltoxhf\",\"value\":\"datahawjovqtvbu\"},{\"name\":\"yqyfit\",\"value\":\"dataprbmmfqteox\"},{\"name\":\"ikdcjmbwrhpw\",\"value\":\"dataudegykzdspbjks\"}],\"\":{\"hjhivgera\":\"datar\"}},{\"type\":\"Activity\",\"name\":\"gxnafojt\",\"description\":\"qcxrvwduspxij\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"cgyvzpvz\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Succeeded\"],\"\":{\"poywymtwh\":\"datajucfsupkqpgfyjwx\",\"x\":\"datadgbg\",\"gia\":\"datazrzhkhmw\"}},{\"activity\":\"rftpgqxnyoakd\",\"dependencyConditions\":[\"Completed\",\"Succeeded\"],\"\":{\"fejtdboac\":\"datasujezgzsekbcedb\",\"ypykjorlrj\":\"datayacjypgbhf\",\"mibhkaqza\":\"datarzxa\"}},{\"activity\":\"jqslshceyhalbxr\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"rtcdavlri\":\"datafcoatsupaqzitho\",\"ezwkparj\":\"datamtke\",\"ykeawrumhzg\":\"dataxirsvjozexxzkci\"}}],\"userProperties\":[{\"name\":\"blags\",\"value\":\"datahdubqha\"},{\"name\":\"xlbo\",\"value\":\"datawnkhiwqiq\"}],\"\":{\"nntp\":\"databorm\",\"zsfdohytk\":\"datacffv\",\"wpeaivbzrms\":\"dataquhdyzuehqmtt\",\"fqameccuqkoat\":\"dataeddwjimrzavci\"}}]},\"name\":\"i\",\"description\":\"diecrbcv\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"abddjbz\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Completed\"],\"\":{\"x\":\"dataluqpzwlbc\",\"oihjnknfvpa\":\"databa\",\"anxuiiprfij\":\"dataraeeiboqc\",\"xs\":\"datailose\"}},{\"activity\":\"hfjzxeswzgrelg\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\"],\"\":{\"jo\":\"dataeolxbgg\",\"atglar\":\"datamtwehvuttn\"}}],\"userProperties\":[{\"name\":\"guarkrfa\",\"value\":\"dataffeahypjqagce\"},{\"name\":\"juclffpvdjfws\",\"value\":\"databplbtmwae\"},{\"name\":\"ybrhn\",\"value\":\"datacxh\"}],\"\":{\"cmwix\":\"dataabnpdnbtymhheu\"}}")
            .toObject(UntilActivity.class);
        Assertions.assertEquals("i", model.name());
        Assertions.assertEquals("diecrbcv", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("abddjbz", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("guarkrfa", model.userProperties().get(0).name());
        Assertions.assertEquals("fppwobhkqgb", model.expression().value());
        Assertions.assertEquals("cnknkukem", model.activities().get(0).name());
        Assertions.assertEquals("svajbg", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("ankzyqi", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jodskqyjsdxgefk", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UntilActivity model = new UntilActivity().withName("i")
            .withDescription("diecrbcv")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("abddjbz")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED,
                        DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("hfjzxeswzgrelg")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("guarkrfa").withValue("dataffeahypjqagce"),
                new UserProperty().withName("juclffpvdjfws").withValue("databplbtmwae"),
                new UserProperty().withName("ybrhn").withValue("datacxh")))
            .withExpression(new Expression().withValue("fppwobhkqgb"))
            .withTimeout("datazoixutiz")
            .withActivities(Arrays.asList(
                new Activity().withName("cnknkukem")
                    .withDescription("svajbg")
                    .withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("ankzyqi")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("gueggph")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("jodskqyjsdxgefk").withValue("datarfih"),
                            new UserProperty().withName("tor").withValue("datachfuwfrqagp")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("flpuxyakofrsoes")
                    .withDescription("ttkqcpclootceit")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("hidlscdoweorniy")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("q")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                DependencyCondition.FAILED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("xubbnb")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("uraqpcspsbrd")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                                DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("mfqtnqaqltoxhf").withValue("datahawjovqtvbu"),
                            new UserProperty().withName("yqyfit").withValue("dataprbmmfqteox"),
                            new UserProperty().withName("ikdcjmbwrhpw").withValue("dataudegykzdspbjks")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("gxnafojt")
                    .withDescription("qcxrvwduspxij")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("cgyvzpvz")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                                DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("rftpgqxnyoakd")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("jqslshceyhalbxr")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("blags").withValue("datahdubqha"),
                        new UserProperty().withName("xlbo").withValue("datawnkhiwqiq")))
                    .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(UntilActivity.class);
        Assertions.assertEquals("i", model.name());
        Assertions.assertEquals("diecrbcv", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("abddjbz", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("guarkrfa", model.userProperties().get(0).name());
        Assertions.assertEquals("fppwobhkqgb", model.expression().value());
        Assertions.assertEquals("cnknkukem", model.activities().get(0).name());
        Assertions.assertEquals("svajbg", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("ankzyqi", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jodskqyjsdxgefk", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
