// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.UntilActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class UntilActivityTests {
    @Test
    public void testDeserialize() {
        UntilActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"Until\",\"typeProperties\":{\"expression\":{\"value\":\"xrzfrmvztiucwvi\"},\"activities\":[{\"type\":\"Activity\",\"name\":\"ukhk\",\"description\":\"qxgcbvzarmqcbpo\",\"dependsOn\":[],\"userProperties\":[],\"\":{}}]},\"name\":\"invagovjyhd\",\"description\":\"brdvce\",\"dependsOn\":[{\"activity\":\"hitxnm\",\"dependencyConditions\":[\"Completed\",\"Skipped\"],\"\":{}},{\"activity\":\"zbuwvorbalkjnbk\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Completed\",\"Completed\"],\"\":{}},{\"activity\":\"tqkqsygxiynecov\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Succeeded\"],\"\":{}},{\"activity\":\"banlxunpqcckq\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Completed\",\"Failed\"],\"\":{}}],\"userProperties\":[{\"name\":\"lg\"}],\"\":{}}")
                .toObject(UntilActivity.class);
        Assertions.assertEquals("invagovjyhd", model.name());
        Assertions.assertEquals("brdvce", model.description());
        Assertions.assertEquals("hitxnm", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("lg", model.userProperties().get(0).name());
        Assertions.assertEquals("xrzfrmvztiucwvi", model.expression().value());
        Assertions.assertEquals("ukhk", model.activities().get(0).name());
        Assertions.assertEquals("qxgcbvzarmqcbpo", model.activities().get(0).description());
    }

    @Test
    public void testSerialize() {
        UntilActivity model =
            new UntilActivity()
                .withName("invagovjyhd")
                .withDescription("brdvce")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("hitxnm")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("zbuwvorbalkjnbk")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("tqkqsygxiynecov")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("banlxunpqcckq")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.FAILED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("lg")))
                .withExpression(new Expression().withValue("xrzfrmvztiucwvi"))
                .withActivities(
                    Arrays
                        .asList(
                            new Activity()
                                .withName("ukhk")
                                .withDescription("qxgcbvzarmqcbpo")
                                .withDependsOn(Arrays.asList())
                                .withUserProperties(Arrays.asList())
                                .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(UntilActivity.class);
        Assertions.assertEquals("invagovjyhd", model.name());
        Assertions.assertEquals("brdvce", model.description());
        Assertions.assertEquals("hitxnm", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("lg", model.userProperties().get(0).name());
        Assertions.assertEquals("xrzfrmvztiucwvi", model.expression().value());
        Assertions.assertEquals("ukhk", model.activities().get(0).name());
        Assertions.assertEquals("qxgcbvzarmqcbpo", model.activities().get(0).description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
