// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SnowflakeDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnowflakeDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeDataset model = BinaryData.fromString(
            "{\"type\":\"azburskuff\",\"typeProperties\":{\"schema\":\"datapncdocloepjz\",\"table\":\"databod\"},\"description\":\"bkvunn\",\"structure\":\"dataoasnzlawow\",\"schema\":\"datanixxwdqzur\",\"linkedServiceName\":{\"referenceName\":\"ukszk\",\"parameters\":{\"vvaeght\":\"datahh\",\"uvwa\":\"dataqonxvnmcyze\",\"shkmqfvbks\":\"dataesswbrnbox\",\"wowrmhmifhfutjy\":\"datasmq\"}},\"parameters\":{\"moygcax\":{\"type\":\"Bool\",\"defaultValue\":\"datatguqa\"},\"vgicxt\":{\"type\":\"SecureString\",\"defaultValue\":\"datadqr\"}},\"annotations\":[\"dataqgnsydksvjfgxgdp\",\"datavjk\",\"datacosc\",\"dataljjhcsgzooefzsdt\"],\"folder\":{\"name\":\"kaqdvwo\"},\"\":{\"tingzic\":\"datavfvhrqxrqgh\"}}")
            .toObject(SnowflakeDataset.class);
        Assertions.assertEquals("bkvunn", model.description());
        Assertions.assertEquals("ukszk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("moygcax").type());
        Assertions.assertEquals("kaqdvwo", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeDataset model = new SnowflakeDataset().withDescription("bkvunn")
            .withStructure("dataoasnzlawow")
            .withSchema("datanixxwdqzur")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ukszk")
                .withParameters(mapOf("vvaeght", "datahh", "uvwa", "dataqonxvnmcyze", "shkmqfvbks", "dataesswbrnbox",
                    "wowrmhmifhfutjy", "datasmq")))
            .withParameters(mapOf("moygcax",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datatguqa"), "vgicxt",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datadqr")))
            .withAnnotations(Arrays.asList("dataqgnsydksvjfgxgdp", "datavjk", "datacosc", "dataljjhcsgzooefzsdt"))
            .withFolder(new DatasetFolder().withName("kaqdvwo"))
            .withSchemaTypePropertiesSchema("datapncdocloepjz")
            .withTable("databod");
        model = BinaryData.fromObject(model).toObject(SnowflakeDataset.class);
        Assertions.assertEquals("bkvunn", model.description());
        Assertions.assertEquals("ukszk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("moygcax").type());
        Assertions.assertEquals("kaqdvwo", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
