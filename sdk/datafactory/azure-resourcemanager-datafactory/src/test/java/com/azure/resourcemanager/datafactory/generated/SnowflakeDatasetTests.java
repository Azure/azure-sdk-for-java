// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SnowflakeDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnowflakeDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeDataset model = BinaryData.fromString(
            "{\"type\":\"SnowflakeTable\",\"typeProperties\":{\"schema\":\"dataybfby\",\"table\":\"datalqllbofsn\"},\"description\":\"cybrhxgiknrl\",\"structure\":\"dataseiqbroqjfeamzku\",\"schema\":\"datagpksgotbunvnjqld\",\"linkedServiceName\":{\"referenceName\":\"qqvcugusqlxlxedt\",\"parameters\":{\"lnlmpuyypaggpaih\":\"datalnvqacbyfis\",\"ymipvlxty\":\"dataaeyzwloqrmgd\",\"pllitx\":\"dataukhjd\",\"qoivxcodw\":\"datargkwiyoy\"}},\"parameters\":{\"fwfiikqcdnzsfi\":{\"type\":\"Array\",\"defaultValue\":\"datacachhsizfuew\"},\"ah\":{\"type\":\"Int\",\"defaultValue\":\"dataneoodmcrxlyz\"},\"brnlsyiaan\":{\"type\":\"SecureString\",\"defaultValue\":\"datafakrxjjwnbrmdw\"}},\"annotations\":[\"datacjhatclpphc\",\"datatmrycpana\",\"datafa\",\"dataizrinlpxngzzxqb\"],\"folder\":{\"name\":\"zmzctbxzjk\"},\"\":{\"dozw\":\"datapucv\",\"e\":\"datask\",\"qmbinpxmiwt\":\"datafz\"}}")
            .toObject(SnowflakeDataset.class);
        Assertions.assertEquals("cybrhxgiknrl", model.description());
        Assertions.assertEquals("qqvcugusqlxlxedt", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("fwfiikqcdnzsfi").type());
        Assertions.assertEquals("zmzctbxzjk", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeDataset model = new SnowflakeDataset().withDescription("cybrhxgiknrl")
            .withStructure("dataseiqbroqjfeamzku")
            .withSchema("datagpksgotbunvnjqld")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("qqvcugusqlxlxedt")
                .withParameters(mapOf("lnlmpuyypaggpaih", "datalnvqacbyfis", "ymipvlxty", "dataaeyzwloqrmgd", "pllitx",
                    "dataukhjd", "qoivxcodw", "datargkwiyoy")))
            .withParameters(mapOf("fwfiikqcdnzsfi",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datacachhsizfuew"), "ah",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataneoodmcrxlyz"),
                "brnlsyiaan",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("datafakrxjjwnbrmdw")))
            .withAnnotations(Arrays.asList("datacjhatclpphc", "datatmrycpana", "datafa", "dataizrinlpxngzzxqb"))
            .withFolder(new DatasetFolder().withName("zmzctbxzjk"))
            .withSchemaTypePropertiesSchema("dataybfby")
            .withTable("datalqllbofsn");
        model = BinaryData.fromObject(model).toObject(SnowflakeDataset.class);
        Assertions.assertEquals("cybrhxgiknrl", model.description());
        Assertions.assertEquals("qqvcugusqlxlxedt", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("fwfiikqcdnzsfi").type());
        Assertions.assertEquals("zmzctbxzjk", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
