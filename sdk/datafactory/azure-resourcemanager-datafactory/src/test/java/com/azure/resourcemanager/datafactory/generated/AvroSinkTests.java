// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AvroSink;
import com.azure.resourcemanager.datafactory.models.AvroWriteSettings;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AvroSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AvroSink model = BinaryData.fromString(
            "{\"type\":\"AvroSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"datazkplqmc\",\"disableMetricsCollection\":\"dataseiauveeng\",\"copyBehavior\":\"datagfpqwwugfw\",\"\":{\"ehdydyybz\":\"datacewbqaibkyeysf\",\"cjq\":\"datalylhd\",\"ghvecjhbttmhneq\":\"datavcieqzkuixf\",\"lakkna\":\"datarzieyxxidab\"}},\"formatSettings\":{\"type\":\"AvroWriteSettings\",\"recordName\":\"e\",\"recordNamespace\":\"nljsfcryqrrsjq\",\"maxRowsPerFile\":\"datajeydmeui\",\"fileNamePrefix\":\"datahyzez\",\"\":{\"oelyjduzapn\":\"datakzrvyaqlqgyui\",\"odprrqcagl\":\"datapo\"}},\"writeBatchSize\":\"datax\",\"writeBatchTimeout\":\"databdpczmzu\",\"sinkRetryCount\":\"datacehfw\",\"sinkRetryWait\":\"dataclea\",\"maxConcurrentConnections\":\"dataviqskylwpqrcyf\",\"disableMetricsCollection\":\"datanwmdpbsotknhfxp\",\"\":{\"aptqyr\":\"datauuckrzwra\",\"opwwnqoubwbssv\":\"datalyu\"}}")
            .toObject(AvroSink.class);
        Assertions.assertEquals("e", model.formatSettings().recordName());
        Assertions.assertEquals("nljsfcryqrrsjq", model.formatSettings().recordNamespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AvroSink model = new AvroSink().withWriteBatchSize("datax").withWriteBatchTimeout("databdpczmzu")
            .withSinkRetryCount("datacehfw").withSinkRetryWait("dataclea")
            .withMaxConcurrentConnections("dataviqskylwpqrcyf").withDisableMetricsCollection("datanwmdpbsotknhfxp")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("datazkplqmc")
                .withDisableMetricsCollection("dataseiauveeng").withCopyBehavior("datagfpqwwugfw")
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(new AvroWriteSettings().withRecordName("e").withRecordNamespace("nljsfcryqrrsjq")
                .withMaxRowsPerFile("datajeydmeui").withFileNamePrefix("datahyzez"));
        model = BinaryData.fromObject(model).toObject(AvroSink.class);
        Assertions.assertEquals("e", model.formatSettings().recordName());
        Assertions.assertEquals("nljsfcryqrrsjq", model.formatSettings().recordNamespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
