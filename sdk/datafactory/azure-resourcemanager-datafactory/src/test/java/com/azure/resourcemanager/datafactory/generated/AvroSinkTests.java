// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AvroSink;
import com.azure.resourcemanager.datafactory.models.AvroWriteSettings;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AvroSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AvroSink model =
            BinaryData
                .fromString(
                    "{\"type\":\"AvroSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"dataaeiepvjr\",\"disableMetricsCollection\":\"dataksx\",\"copyBehavior\":\"datakb\",\"\":{\"hjyahrmuwvsdyruo\":\"dataawokr\",\"qgpldrn\":\"dataidtxmbnmjimggz\",\"sbetzufkvxerbd\":\"datajhdbnfb\"}},\"formatSettings\":{\"type\":\"AvroWriteSettings\",\"recordName\":\"ngdctmjz\",\"recordNamespace\":\"aeu\",\"maxRowsPerFile\":\"datagvheqzlqevas\",\"fileNamePrefix\":\"datagoodfh\",\"\":{\"jlizlzxh\":\"dataegdynydd\",\"sjwawl\":\"datacuglgmfznholaf\",\"yk\":\"dataqmznkcwiok\"}},\"writeBatchSize\":\"dataxmobnehbbchtcoel\",\"writeBatchTimeout\":\"datafnpxumgnjmsk\",\"sinkRetryCount\":\"dataeuogjiowande\",\"sinkRetryWait\":\"dataebpalz\",\"maxConcurrentConnections\":\"dataptg\",\"disableMetricsCollection\":\"datarz\",\"\":{\"rzilvcncdazw\":\"datafdsvmpt\",\"gvfgme\":\"datalgoravovqpnxpufv\",\"dkqfjzgyzj\":\"datafyelfxlbkbh\"}}")
                .toObject(AvroSink.class);
        Assertions.assertEquals("ngdctmjz", model.formatSettings().recordName());
        Assertions.assertEquals("aeu", model.formatSettings().recordNamespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AvroSink model =
            new AvroSink()
                .withWriteBatchSize("dataxmobnehbbchtcoel")
                .withWriteBatchTimeout("datafnpxumgnjmsk")
                .withSinkRetryCount("dataeuogjiowande")
                .withSinkRetryWait("dataebpalz")
                .withMaxConcurrentConnections("dataptg")
                .withDisableMetricsCollection("datarz")
                .withStoreSettings(
                    new StoreWriteSettings()
                        .withMaxConcurrentConnections("dataaeiepvjr")
                        .withDisableMetricsCollection("dataksx")
                        .withCopyBehavior("datakb")
                        .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
                .withFormatSettings(
                    new AvroWriteSettings()
                        .withRecordName("ngdctmjz")
                        .withRecordNamespace("aeu")
                        .withMaxRowsPerFile("datagvheqzlqevas")
                        .withFileNamePrefix("datagoodfh"));
        model = BinaryData.fromObject(model).toObject(AvroSink.class);
        Assertions.assertEquals("ngdctmjz", model.formatSettings().recordName());
        Assertions.assertEquals("aeu", model.formatSettings().recordNamespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
