// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AvroSink;
import com.azure.resourcemanager.datafactory.models.AvroWriteSettings;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AvroSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AvroSink model = BinaryData.fromString(
            "{\"type\":\"AvroSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"datafsol\",\"disableMetricsCollection\":\"dataquulnhxrcjs\",\"copyBehavior\":\"datacvrmwbg\",\"metadata\":[{\"name\":\"dataqbxp\",\"value\":\"datapgsr\"}],\"\":{\"gspboaevtxibroo\":\"datak\"}},\"formatSettings\":{\"type\":\"AvroWriteSettings\",\"recordName\":\"jiqwxwpub\",\"recordNamespace\":\"qnprbvruhdjzivl\",\"maxRowsPerFile\":\"datai\",\"fileNamePrefix\":\"dataqnqmbf\",\"\":{\"kkzulmqx\":\"dataixmksxxbdtjvvngn\",\"nwij\":\"dataic\",\"er\":\"dataeyxt\",\"ytten\":\"datattobosjxb\"}},\"writeBatchSize\":\"dataditumyycvtya\",\"writeBatchTimeout\":\"datayimhspjqhi\",\"sinkRetryCount\":\"datablqvwhjgtbh\",\"sinkRetryWait\":\"dataoutq\",\"maxConcurrentConnections\":\"datapbtqibq\",\"disableMetricsCollection\":\"dataugcwzgdfdrdxo\",\"\":{\"lxoljbpoeoyw\":\"datagezulnntpbarejxj\",\"rx\":\"datakhhavwhrivvzrccy\",\"bbxanev\":\"datasypwudeea\",\"ju\":\"dataq\"}}")
            .toObject(AvroSink.class);
        Assertions.assertEquals("jiqwxwpub", model.formatSettings().recordName());
        Assertions.assertEquals("qnprbvruhdjzivl", model.formatSettings().recordNamespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AvroSink model = new AvroSink().withWriteBatchSize("dataditumyycvtya")
            .withWriteBatchTimeout("datayimhspjqhi")
            .withSinkRetryCount("datablqvwhjgtbh")
            .withSinkRetryWait("dataoutq")
            .withMaxConcurrentConnections("datapbtqibq")
            .withDisableMetricsCollection("dataugcwzgdfdrdxo")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("datafsol")
                .withDisableMetricsCollection("dataquulnhxrcjs")
                .withCopyBehavior("datacvrmwbg")
                .withMetadata(Arrays.asList(new MetadataItem().withName("dataqbxp").withValue("datapgsr")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(new AvroWriteSettings().withRecordName("jiqwxwpub")
                .withRecordNamespace("qnprbvruhdjzivl")
                .withMaxRowsPerFile("datai")
                .withFileNamePrefix("dataqnqmbf"));
        model = BinaryData.fromObject(model).toObject(AvroSink.class);
        Assertions.assertEquals("jiqwxwpub", model.formatSettings().recordName());
        Assertions.assertEquals("qnprbvruhdjzivl", model.formatSettings().recordNamespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
