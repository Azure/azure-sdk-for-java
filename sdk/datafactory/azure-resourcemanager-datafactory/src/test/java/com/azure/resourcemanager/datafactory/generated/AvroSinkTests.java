// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AvroSink;
import com.azure.resourcemanager.datafactory.models.AvroWriteSettings;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AvroSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AvroSink model = BinaryData.fromString(
            "{\"type\":\"AvroSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"dataexpopqykicesqp\",\"disableMetricsCollection\":\"dataoxilhpkqiq\",\"copyBehavior\":\"dataiubemxmuygmr\",\"metadata\":[{\"name\":\"datangca\",\"value\":\"dataophtkyzsgayng\"},{\"name\":\"datawvcnv\",\"value\":\"dataqxqhysu\"},{\"name\":\"datadnslroqxrvycjdn\",\"value\":\"datamggy\"}],\"\":{\"yxdigkggzm\":\"datamsacbamtoqseam\",\"lefiott\":\"datalqhqeosxdsx\",\"idzjjjfcyskpnkkx\":\"dataawgkaohhtttyhy\",\"bxsmfvltboc\":\"datai\"}},\"formatSettings\":{\"type\":\"AvroWriteSettings\",\"recordName\":\"t\",\"recordNamespace\":\"vppvgrigjegr\",\"maxRowsPerFile\":\"datakoqbzrc\",\"fileNamePrefix\":\"datarrtfmf\",\"\":{\"zvzqhvzjdsn\":\"dataybemoramshqvkuq\"}},\"writeBatchSize\":\"datadbeanigozjrcx\",\"writeBatchTimeout\":\"dataugjalmzpfyl\",\"sinkRetryCount\":\"datavwwvznp\",\"sinkRetryWait\":\"datacizropzgjleecffb\",\"maxConcurrentConnections\":\"datakvb\",\"disableMetricsCollection\":\"datastqwnpegoupdq\",\"\":{\"xo\":\"datavdfaqcql\"}}")
            .toObject(AvroSink.class);
        Assertions.assertEquals("t", model.formatSettings().recordName());
        Assertions.assertEquals("vppvgrigjegr", model.formatSettings().recordNamespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AvroSink model = new AvroSink().withWriteBatchSize("datadbeanigozjrcx")
            .withWriteBatchTimeout("dataugjalmzpfyl")
            .withSinkRetryCount("datavwwvznp")
            .withSinkRetryWait("datacizropzgjleecffb")
            .withMaxConcurrentConnections("datakvb")
            .withDisableMetricsCollection("datastqwnpegoupdq")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("dataexpopqykicesqp")
                .withDisableMetricsCollection("dataoxilhpkqiq")
                .withCopyBehavior("dataiubemxmuygmr")
                .withMetadata(Arrays.asList(new MetadataItem().withName("datangca").withValue("dataophtkyzsgayng"),
                    new MetadataItem().withName("datawvcnv").withValue("dataqxqhysu"),
                    new MetadataItem().withName("datadnslroqxrvycjdn").withValue("datamggy")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(new AvroWriteSettings().withRecordName("t")
                .withRecordNamespace("vppvgrigjegr")
                .withMaxRowsPerFile("datakoqbzrc")
                .withFileNamePrefix("datarrtfmf"));
        model = BinaryData.fromObject(model).toObject(AvroSink.class);
        Assertions.assertEquals("t", model.formatSettings().recordName());
        Assertions.assertEquals("vppvgrigjegr", model.formatSettings().recordNamespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
