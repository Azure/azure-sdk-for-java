// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AvroSink;
import com.azure.resourcemanager.datafactory.models.AvroWriteSettings;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AvroSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AvroSink model = BinaryData.fromString(
            "{\"type\":\"p\",\"storeSettings\":{\"type\":\"nqcgbijyp\",\"maxConcurrentConnections\":\"databyrkxzebvxuzch\",\"disableMetricsCollection\":\"dataeogdkcrc\",\"copyBehavior\":\"datazzeu\",\"metadata\":[{\"name\":\"datapxir\",\"value\":\"datahuqkicimyykmke\"},{\"name\":\"dataqmnr\",\"value\":\"dataefxkattpkkwldvk\"},{\"name\":\"datagxakgoptbjooqo\",\"value\":\"datankvnuwjrxbbxkh\"}],\"\":{\"tglo\":\"databx\",\"jhyiey\":\"datafmlbhlimgzimtzz\",\"xalvdhmumsmnub\":\"datarwfu\",\"xidqnvhrbfepf\":\"datanxrpsty\"}},\"formatSettings\":{\"type\":\"kwoommqvzz\",\"recordName\":\"pxthsfuxhlgoexu\",\"recordNamespace\":\"bfoo\",\"maxRowsPerFile\":\"datatxdlewh\",\"fileNamePrefix\":\"datavrip\",\"\":{\"fh\":\"datawfo\"}},\"writeBatchSize\":\"dataljajz\",\"writeBatchTimeout\":\"datagwarbvblat\",\"sinkRetryCount\":\"datajk\",\"sinkRetryWait\":\"datatodgisfej\",\"maxConcurrentConnections\":\"datap\",\"disableMetricsCollection\":\"dataifujynfjwktiyhiy\",\"\":{\"wo\":\"datavaodifupdafuf\",\"rqhgnrxxhzwtrx\":\"datas\"}}")
            .toObject(AvroSink.class);
        Assertions.assertEquals("pxthsfuxhlgoexu", model.formatSettings().recordName());
        Assertions.assertEquals("bfoo", model.formatSettings().recordNamespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AvroSink model = new AvroSink().withWriteBatchSize("dataljajz")
            .withWriteBatchTimeout("datagwarbvblat")
            .withSinkRetryCount("datajk")
            .withSinkRetryWait("datatodgisfej")
            .withMaxConcurrentConnections("datap")
            .withDisableMetricsCollection("dataifujynfjwktiyhiy")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("databyrkxzebvxuzch")
                .withDisableMetricsCollection("dataeogdkcrc")
                .withCopyBehavior("datazzeu")
                .withMetadata(Arrays.asList(new MetadataItem().withName("datapxir").withValue("datahuqkicimyykmke"),
                    new MetadataItem().withName("dataqmnr").withValue("dataefxkattpkkwldvk"),
                    new MetadataItem().withName("datagxakgoptbjooqo").withValue("datankvnuwjrxbbxkh")))
                .withAdditionalProperties(mapOf("type", "nqcgbijyp")))
            .withFormatSettings(new AvroWriteSettings().withRecordName("pxthsfuxhlgoexu")
                .withRecordNamespace("bfoo")
                .withMaxRowsPerFile("datatxdlewh")
                .withFileNamePrefix("datavrip"));
        model = BinaryData.fromObject(model).toObject(AvroSink.class);
        Assertions.assertEquals("pxthsfuxhlgoexu", model.formatSettings().recordName());
        Assertions.assertEquals("bfoo", model.formatSettings().recordNamespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
