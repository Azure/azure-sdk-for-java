// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AvroSink;
import com.azure.resourcemanager.datafactory.models.AvroWriteSettings;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AvroSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AvroSink model = BinaryData.fromString(
            "{\"type\":\"AvroSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"datatqibqbougcwzgdfd\",\"disableMetricsCollection\":\"dataxoutkgezulnnt\",\"copyBehavior\":\"dataarejxjhl\",\"metadata\":[{\"name\":\"databpoeoywykh\",\"value\":\"datavwhrivvzr\"}],\"\":{\"eearbbxaneviqk\":\"datafrxlsypwu\",\"gbpcenirjhd\":\"dataupvidzhjcppq\",\"btlharjbakp\":\"dataxup\"}},\"formatSettings\":{\"type\":\"AvroWriteSettings\",\"recordName\":\"ugcngdulvd\",\"recordNamespace\":\"hguvaimkoyrpps\",\"maxRowsPerFile\":\"datajduwkbozlmrhng\",\"fileNamePrefix\":\"datalvdjxbjqiabitevv\",\"\":{\"xkdfyvgc\":\"dataypyljz\"}},\"writeBatchSize\":\"dataaqydcr\",\"writeBatchTimeout\":\"datahmneykxewemtazmr\",\"sinkRetryCount\":\"datazpxoqegerxmlfnu\",\"sinkRetryWait\":\"datamyr\",\"maxConcurrentConnections\":\"datatdkpoxzwgrsnit\",\"disableMetricsCollection\":\"datacaehjhwkl\",\"\":{\"nwe\":\"dataqqgyp\",\"ytk\":\"databngojnaks\"}}")
            .toObject(AvroSink.class);
        Assertions.assertEquals("ugcngdulvd", model.formatSettings().recordName());
        Assertions.assertEquals("hguvaimkoyrpps", model.formatSettings().recordNamespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AvroSink model = new AvroSink().withWriteBatchSize("dataaqydcr")
            .withWriteBatchTimeout("datahmneykxewemtazmr")
            .withSinkRetryCount("datazpxoqegerxmlfnu")
            .withSinkRetryWait("datamyr")
            .withMaxConcurrentConnections("datatdkpoxzwgrsnit")
            .withDisableMetricsCollection("datacaehjhwkl")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("datatqibqbougcwzgdfd")
                .withDisableMetricsCollection("dataxoutkgezulnnt")
                .withCopyBehavior("dataarejxjhl")
                .withMetadata(Arrays.asList(new MetadataItem().withName("databpoeoywykh").withValue("datavwhrivvzr")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(new AvroWriteSettings().withRecordName("ugcngdulvd")
                .withRecordNamespace("hguvaimkoyrpps")
                .withMaxRowsPerFile("datajduwkbozlmrhng")
                .withFileNamePrefix("datalvdjxbjqiabitevv"));
        model = BinaryData.fromObject(model).toObject(AvroSink.class);
        Assertions.assertEquals("ugcngdulvd", model.formatSettings().recordName());
        Assertions.assertEquals("hguvaimkoyrpps", model.formatSettings().recordNamespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
