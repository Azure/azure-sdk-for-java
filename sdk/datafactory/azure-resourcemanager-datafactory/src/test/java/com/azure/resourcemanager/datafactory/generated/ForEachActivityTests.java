// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.ForEachActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForEachActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForEachActivity model = BinaryData.fromString(
            "{\"type\":\"ForEach\",\"typeProperties\":{\"isSequential\":true,\"batchCount\":100226368,\"items\":{\"value\":\"eobkmx\"},\"activities\":[{\"type\":\"Activity\",\"name\":\"mrbjhyldx\",\"description\":\"ce\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"daq\",\"dependencyConditions\":[\"Skipped\",\"Failed\"],\"\":{\"iugca\":\"datayymb\",\"uvu\":\"datashgryof\",\"uocmxtyjaxk\":\"datakrkibno\",\"vasnmzsvd\":\"datayovwtpm\"}},{\"activity\":\"ryzxhtvythp\",\"dependencyConditions\":[\"Completed\",\"Completed\"],\"\":{\"sixterpbjkhtmm\":\"dataqvyzacjxczj\",\"ncscaynhzmz\":\"datamezlhmtrq\"}},{\"activity\":\"wxwwpi\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"lpphotbs\":\"datauq\",\"qotwcfbqzezchp\":\"datakliuctxfzhv\",\"x\":\"datahuhyxxftrfw\",\"aule\":\"datajcsxqkmo\"}}],\"userProperties\":[{\"name\":\"xznopk\",\"value\":\"dataoffeutvqgnugiiyc\"},{\"name\":\"jf\",\"value\":\"datakntdynbrf\"}],\"\":{\"gilzrruvnlubk\":\"dataabrqdbx\"}},{\"type\":\"Activity\",\"name\":\"gfzii\",\"description\":\"xntuzgceuzhpcmnp\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"vxpfayophpu\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"xufrwiivekrgvzjt\":\"datahbqvbute\"}},{\"activity\":\"jrrkdlw\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\"],\"\":{\"tjnktheh\":\"datao\",\"v\":\"datamijraei\",\"lbnroxgwqgbv\":\"datahhci\",\"bztwkz\":\"datactcbmnecozvx\"}},{\"activity\":\"puwjvju\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Completed\",\"Skipped\"],\"\":{\"jxjnxznlx\":\"datauxtyvpvegxdzopfk\",\"b\":\"datajkteubntqvlktq\",\"jiktwfjyl\":\"dataurblbtvsxnaothlr\",\"nwegyhzucpixfdbi\":\"datammibaowclb\"}}],\"userProperties\":[{\"name\":\"hbcbdpyorhqb\",\"value\":\"datafvhnhyxcws\"},{\"name\":\"hszmuvare\",\"value\":\"datakcxdamnmnm\"}],\"\":{\"pcrs\":\"datapieleruoyf\",\"qonvjur\":\"dataqwqmlis\"}}]},\"name\":\"czdelqazb\",\"description\":\"xg\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"paeceuvqacaedvnl\",\"dependencyConditions\":[\"Failed\"],\"\":{\"qxldkhgngy\":\"datajgdbobr\",\"tfwncxkaz\":\"datafesjksmyeegbe\",\"qvjk\":\"datayd\"}},{\"activity\":\"zorddcwg\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Skipped\",\"Succeeded\"],\"\":{\"cyepqtdvgdujkdac\":\"datai\",\"y\":\"datavyeckbudepulbxgd\",\"wmehaic\":\"dataywmezoi\",\"v\":\"datakkcpkvujwf\"}},{\"activity\":\"vvnbbeys\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Failed\"],\"\":{\"euqgpt\":\"datafjxfi\"}},{\"activity\":\"xilwnvfb\",\"dependencyConditions\":[\"Failed\",\"Succeeded\"],\"\":{\"ekjhu\":\"dataaz\",\"idk\":\"datawiitxye\"}}],\"userProperties\":[{\"name\":\"hkcutxmqvbh\",\"value\":\"databwdu\"},{\"name\":\"vkrskqgokhpzvph\",\"value\":\"datak\"},{\"name\":\"fcxvfurkdhopz\",\"value\":\"datamhrfwch\"}],\"\":{\"zkwdexldocq\":\"dataeovji\",\"chltxayqwfu\":\"datalbsvyokiexmfe\",\"e\":\"datavo\"}}")
            .toObject(ForEachActivity.class);
        Assertions.assertEquals("czdelqazb", model.name());
        Assertions.assertEquals("xg", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("paeceuvqacaedvnl", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hkcutxmqvbh", model.userProperties().get(0).name());
        Assertions.assertEquals(true, model.isSequential());
        Assertions.assertEquals(100226368, model.batchCount());
        Assertions.assertEquals("eobkmx", model.items().value());
        Assertions.assertEquals("mrbjhyldx", model.activities().get(0).name());
        Assertions.assertEquals("ce", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("daq", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("xznopk", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForEachActivity model = new ForEachActivity().withName("czdelqazb").withDescription("xg")
            .withState(ActivityState.INACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("paeceuvqacaedvnl")
                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED)).withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("zorddcwg")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("vvnbbeys")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("xilwnvfb")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("hkcutxmqvbh").withValue("databwdu"),
                new UserProperty().withName("vkrskqgokhpzvph").withValue("datak"),
                new UserProperty().withName("fcxvfurkdhopz").withValue("datamhrfwch")))
            .withIsSequential(
                true)
            .withBatchCount(
                100226368)
            .withItems(
                new Expression().withValue("eobkmx"))
            .withActivities(
                Arrays.asList(
                    new Activity()
                        .withName("mrbjhyldx").withDescription("ce").withState(
                            ActivityState.INACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                        .withDependsOn(Arrays.asList(
                            new ActivityDependency().withActivity("daq")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("ryzxhtvythp")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("wxwwpi")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf())))
                        .withUserProperties(Arrays.asList(
                            new UserProperty().withName("xznopk").withValue("dataoffeutvqgnugiiyc"), new UserProperty()
                                .withName("jf").withValue("datakntdynbrf")))
                        .withAdditionalProperties(mapOf("type", "Activity")),
                    new Activity().withName("gfzii").withDescription("xntuzgceuzhpcmnp").withState(ActivityState.ACTIVE)
                        .withOnInactiveMarkAs(
                            ActivityOnInactiveMarkAs.SUCCEEDED)
                        .withDependsOn(Arrays.asList(
                            new ActivityDependency().withActivity("vxpfayophpu")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("jrrkdlw")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("puwjvju")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED,
                                        DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf())))
                        .withUserProperties(
                            Arrays.asList(new UserProperty().withName("hbcbdpyorhqb").withValue("datafvhnhyxcws"),
                                new UserProperty().withName("hszmuvare").withValue("datakcxdamnmnm")))
                        .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(ForEachActivity.class);
        Assertions.assertEquals("czdelqazb", model.name());
        Assertions.assertEquals("xg", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("paeceuvqacaedvnl", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hkcutxmqvbh", model.userProperties().get(0).name());
        Assertions.assertEquals(true, model.isSequential());
        Assertions.assertEquals(100226368, model.batchCount());
        Assertions.assertEquals("eobkmx", model.items().value());
        Assertions.assertEquals("mrbjhyldx", model.activities().get(0).name());
        Assertions.assertEquals("ce", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("daq", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("xznopk", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
