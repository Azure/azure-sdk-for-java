// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.ForEachActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForEachActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForEachActivity model = BinaryData.fromString(
            "{\"type\":\"ForEach\",\"typeProperties\":{\"isSequential\":true,\"batchCount\":1445660589,\"items\":{\"value\":\"sirhpi\"},\"activities\":[{\"type\":\"Activity\",\"name\":\"dzwdrcjyywbsslip\",\"description\":\"puddbzxidqqes\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"iutrlzzztgzfz\",\"dependencyConditions\":[\"Succeeded\",\"Failed\"],\"\":{\"tpwilygjoboqts\":\"datahprzuvsjblqmd\",\"uywg\":\"datad\"}}],\"userProperties\":[{\"name\":\"cf\",\"value\":\"datatmmpvoazgtlxgtu\"},{\"name\":\"w\",\"value\":\"datagtskolbjylostrc\"}],\"\":{\"bwaiqs\":\"datace\"}},{\"type\":\"Activity\",\"name\":\"bz\",\"description\":\"elphauldalspe\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"llqyvblfprskxhg\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Skipped\"],\"\":{\"pibnjpivoizxk\":\"datajulunbtufic\",\"jlahd\":\"dataoabma\",\"da\":\"datalicivod\"}},{\"activity\":\"bmjheyntsdwxpa\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Failed\",\"Succeeded\"],\"\":{\"gjywp\":\"datakoxuedmlocrkf\",\"tih\":\"databvvjyenwvgvhhouh\",\"ooiiviwlfmjoy\":\"datalkfl\"}}],\"userProperties\":[{\"name\":\"xbrthwbitrwwko\",\"value\":\"dataoqrvnhcuoghvkzmg\"},{\"name\":\"temp\",\"value\":\"datafjahwypdhrqjjl\"},{\"name\":\"ato\",\"value\":\"datasgarxtgexmxgqgqu\"}],\"\":{\"tlbtotubzas\":\"datartkv\",\"kwmvcxyuem\":\"datawoxumnucqewxcwr\"}}]},\"name\":\"idcytnzy\",\"description\":\"ydwgq\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"mvngdrntyvnbh\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Skipped\"],\"\":{\"wiigtdjqc\":\"dataorjyprco\",\"iftm\":\"dataoqpkpib\",\"hlnaymsgbyho\":\"datazofont\",\"ennobjixoqqjbsag\":\"dataqugycorgnxmn\"}}],\"userProperties\":[{\"name\":\"u\",\"value\":\"datafmrimwl\"}],\"\":{\"aktnmwlklqhw\":\"datahwxu\"}}")
            .toObject(ForEachActivity.class);
        Assertions.assertEquals("idcytnzy", model.name());
        Assertions.assertEquals("ydwgq", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("mvngdrntyvnbh", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("u", model.userProperties().get(0).name());
        Assertions.assertEquals(true, model.isSequential());
        Assertions.assertEquals(1445660589, model.batchCount());
        Assertions.assertEquals("sirhpi", model.items().value());
        Assertions.assertEquals("dzwdrcjyywbsslip", model.activities().get(0).name());
        Assertions.assertEquals("puddbzxidqqes", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("iutrlzzztgzfz", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("cf", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForEachActivity model = new ForEachActivity().withName("idcytnzy")
            .withDescription("ydwgq")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("mvngdrntyvnbh")
                .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED,
                    DependencyCondition.SKIPPED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("u").withValue("datafmrimwl")))
            .withIsSequential(true)
            .withBatchCount(1445660589)
            .withItems(new Expression().withValue("sirhpi"))
            .withActivities(Arrays.asList(
                new Activity().withName("dzwdrcjyywbsslip")
                    .withDescription("puddbzxidqqes")
                    .withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("iutrlzzztgzfz")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("cf").withValue("datatmmpvoazgtlxgtu"),
                            new UserProperty().withName("w").withValue("datagtskolbjylostrc")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("bz")
                    .withDescription("elphauldalspe")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("llqyvblfprskxhg")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("bmjheyntsdwxpa")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                DependencyCondition.FAILED, DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("xbrthwbitrwwko").withValue("dataoqrvnhcuoghvkzmg"),
                            new UserProperty().withName("temp").withValue("datafjahwypdhrqjjl"),
                            new UserProperty().withName("ato").withValue("datasgarxtgexmxgqgqu")))
                    .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(ForEachActivity.class);
        Assertions.assertEquals("idcytnzy", model.name());
        Assertions.assertEquals("ydwgq", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("mvngdrntyvnbh", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("u", model.userProperties().get(0).name());
        Assertions.assertEquals(true, model.isSequential());
        Assertions.assertEquals(1445660589, model.batchCount());
        Assertions.assertEquals("sirhpi", model.items().value());
        Assertions.assertEquals("dzwdrcjyywbsslip", model.activities().get(0).name());
        Assertions.assertEquals("puddbzxidqqes", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("iutrlzzztgzfz", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("cf", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
