// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.ForEachActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForEachActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForEachActivity model = BinaryData.fromString(
            "{\"type\":\"ForEach\",\"typeProperties\":{\"isSequential\":true,\"batchCount\":797541414,\"items\":{\"value\":\"sgrcrknnr\"},\"activities\":[{\"type\":\"Activity\",\"name\":\"euwfmrckatnjik\",\"description\":\"htovsyi\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"kprv\",\"dependencyConditions\":[\"Failed\"],\"\":{\"mavtndgfmtximnpc\":\"datasd\"}},{\"activity\":\"hcfu\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Skipped\",\"Succeeded\"],\"\":{\"diajeeahweru\":\"dataurgery\",\"lahdwxyitezf\":\"datauoeyyxcdwlkk\"}},{\"activity\":\"ekaxh\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Completed\",\"Failed\"],\"\":{\"y\":\"dataoqg\",\"s\":\"datafohuxpfxkjrhgw\",\"uzifsguolfkup\":\"dataaewkkqv\"}}],\"userProperties\":[{\"name\":\"zsirhp\",\"value\":\"datagqdz\"},{\"name\":\"drcj\",\"value\":\"dataywbssli\"},{\"name\":\"hcpuddbzxi\",\"value\":\"dataqqeslnaoxke\"},{\"name\":\"utrlzzztg\",\"value\":\"datafzyxamyjhp\"}],\"\":{\"lqmddtpwilyg\":\"datavsj\",\"oqtscduuywg\":\"datao\"}},{\"type\":\"Activity\",\"name\":\"uvcfmtmmpvoa\",\"description\":\"tlx\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"t\",\"dependencyConditions\":[\"Failed\",\"Succeeded\"],\"\":{\"erbwa\":\"dataylostrcbqo\",\"elphauldalspe\":\"dataqsubzi\",\"llqyvblfprskxhg\":\"datanhesw\",\"tuficip\":\"datavgviycjulun\"}},{\"activity\":\"bnjpivoizxkh\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Completed\",\"Skipped\"],\"\":{\"bmjheyntsdwxpa\":\"dataahdplicivoduda\",\"crkf\":\"dataubgrjkgkoxuedml\",\"bvvjyenwvgvhhouh\":\"datagjywp\"}},{\"activity\":\"tih\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"mjoycyvxbrthw\":\"datajooiiviwl\",\"uoghvkzmgvtem\":\"dataitrwwkofoqrvnh\",\"hwypdhrq\":\"datayfj\"}},{\"activity\":\"jlsatoxsga\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"ftlbtotu\":\"dataxmxgqgquulyrtk\",\"cwrykwmvcxyu\":\"datazasrwoxumnucqew\"}}],\"userProperties\":[{\"name\":\"idcytnzy\",\"value\":\"datasydwgq\"},{\"name\":\"srlhxfmvngdrnt\",\"value\":\"datavn\"}],\"\":{\"rcojwiigtdj\":\"datahnbwdborjy\",\"iftm\":\"dataczoqpkpib\",\"hlnaymsgbyho\":\"datazofont\",\"ennobjixoqqjbsag\":\"dataqugycorgnxmn\"}},{\"type\":\"Activity\",\"name\":\"lpuqfmrimwlpa\",\"description\":\"wxuiakt\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"hwysieoe\",\"dependencyConditions\":[\"Skipped\",\"Failed\"],\"\":{\"ylsuiyvbildwqlx\":\"datarhpgavropkoezcab\",\"qei\":\"datav\",\"axswiind\":\"datapylpmtwdvdtzdr\",\"hacvsj\":\"dataurwzrx\"}},{\"activity\":\"mbtvcdsl\",\"dependencyConditions\":[\"Completed\"],\"\":{\"kzkaoonbziklqyzr\":\"datanxhszrotunnkb\",\"zvvkehasxjmf\":\"dataawjk\",\"qxwcimamtqfrdfo\":\"databs\"}},{\"activity\":\"qfvczuuanrjcrpx\",\"dependencyConditions\":[\"Completed\",\"Completed\",\"Succeeded\",\"Succeeded\"],\"\":{\"kmlfcgk\":\"dataroxvsclmt\"}}],\"userProperties\":[{\"name\":\"tp\",\"value\":\"datazuaznsbvubbe\"},{\"name\":\"tyymljotimpuwgrn\",\"value\":\"dataxrizse\"}],\"\":{\"dcfwawzj\":\"datadran\",\"hic\":\"datafauubcvnafx\",\"grufbzgnrjfzba\":\"datacmviclhommhaxt\"}},{\"type\":\"Activity\",\"name\":\"qmmkmqdfjeu\",\"description\":\"qstczpsk\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"uqvywolc\",\"dependencyConditions\":[\"Failed\"],\"\":{\"osaxg\":\"datakheh\",\"hhhexgxnmfo\":\"datamspnzq\",\"tycfostzdxb\":\"dataxiyzvfo\"}},{\"activity\":\"pglcbhahxsjxurrh\",\"dependencyConditions\":[\"Failed\",\"Succeeded\"],\"\":{\"mz\":\"datajzifyhujgrb\",\"scrfbdttcfwjzquw\":\"datagxjoimozsef\"}}],\"userProperties\":[{\"name\":\"ihlolau\",\"value\":\"datar\"}],\"\":{\"yajijzrt\":\"datafefxvggkjbhsnyy\",\"ki\":\"datafngonhmblkkelz\",\"h\":\"datamne\",\"qvcfzr\":\"dataynencaf\"}}]},\"name\":\"wxgczwxyghsppm\",\"description\":\"c\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"chygbeofiwbtfkiu\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\"],\"\":{\"fkukaa\":\"datasxjrafh\",\"gqhefeasm\":\"datawnqijphhuvflg\",\"pcxxpyrtajlyde\":\"datadguodoujpwqbotlv\"}},{\"activity\":\"qfvrqru\",\"dependencyConditions\":[\"Failed\"],\"\":{\"jzvceyxvfoyuyk\":\"datauxbqdwbjh\"}},{\"activity\":\"dggyhpuhcc\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Skipped\"],\"\":{\"abdkbkblop\":\"datatpt\",\"zsfvri\":\"datamorfzuhvycdndcz\",\"pqcqinvkm\":\"datakplnd\",\"qabvwbgsanv\":\"databtpbwthz\"}}],\"userProperties\":[{\"name\":\"mbxshrae\",\"value\":\"dataclhzmegqtzhr\"},{\"name\":\"eibku\",\"value\":\"dataolu\"}],\"\":{\"keuraylygclwbu\":\"dataeqdmolmcyba\",\"fnhzgtydllauno\":\"dataqamvdnexqvt\",\"pglgkeaz\":\"datalkny\"}}")
            .toObject(ForEachActivity.class);
        Assertions.assertEquals("wxgczwxyghsppm", model.name());
        Assertions.assertEquals("c", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("chygbeofiwbtfkiu", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("mbxshrae", model.userProperties().get(0).name());
        Assertions.assertEquals(true, model.isSequential());
        Assertions.assertEquals(797541414, model.batchCount());
        Assertions.assertEquals("sgrcrknnr", model.items().value());
        Assertions.assertEquals("euwfmrckatnjik", model.activities().get(0).name());
        Assertions.assertEquals("htovsyi", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("kprv", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("zsirhp", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForEachActivity model
            = new ForEachActivity().withName("wxgczwxyghsppm")
                .withDescription("c")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("chygbeofiwbtfkiu")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("qfvrqru")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("dggyhpuhcc")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                            DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(
                    new UserProperty().withName("mbxshrae").withValue("dataclhzmegqtzhr"),
                    new UserProperty().withName("eibku").withValue("dataolu")))
                .withIsSequential(true)
                .withBatchCount(797541414)
                .withItems(new Expression().withValue("sgrcrknnr"))
                .withActivities(
                    Arrays
                        .asList(
                            new Activity().withName("euwfmrckatnjik")
                                .withDescription("htovsyi")
                                .withState(ActivityState.ACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("kprv")
                                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("hcfu")
                                        .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                                            DependencyCondition.SKIPPED, DependencyCondition.SKIPPED,
                                            DependencyCondition.SUCCEEDED))
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("ekaxh")
                                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                            DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED,
                                            DependencyCondition.FAILED))
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays
                                        .asList(new UserProperty().withName("zsirhp").withValue("datagqdz"),
                                            new UserProperty().withName("drcj").withValue("dataywbssli"),
                                            new UserProperty().withName("hcpuddbzxi").withValue("dataqqeslnaoxke"),
                                            new UserProperty().withName("utrlzzztg").withValue("datafzyxamyjhp")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("uvcfmtmmpvoa")
                                .withDescription("tlx")
                                .withState(ActivityState.ACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                                .withDependsOn(
                                    Arrays.asList(
                                        new ActivityDependency().withActivity("t")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                                DependencyCondition.SUCCEEDED))
                                            .withAdditionalProperties(mapOf()),
                                        new ActivityDependency().withActivity("bnjpivoizxkh")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                                                DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED,
                                                DependencyCondition.SKIPPED))
                                            .withAdditionalProperties(mapOf()),
                                        new ActivityDependency().withActivity("tih")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                                            .withAdditionalProperties(mapOf()),
                                        new ActivityDependency().withActivity("jlsatoxsga")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                                            .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays.asList(new UserProperty().withName("idcytnzy").withValue("datasydwgq"),
                                        new UserProperty().withName("srlhxfmvngdrnt").withValue("datavn")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("lpuqfmrimwlpa")
                                .withDescription("wxuiakt")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                                .withDependsOn(
                                    Arrays
                                        .asList(
                                            new ActivityDependency().withActivity("hwysieoe")
                                                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                                    DependencyCondition.FAILED))
                                                .withAdditionalProperties(mapOf()),
                                            new ActivityDependency().withActivity("mbtvcdsl")
                                                .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                                                .withAdditionalProperties(mapOf()),
                                            new ActivityDependency().withActivity("qfvczuuanrjcrpx")
                                                .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                                                    DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED,
                                                    DependencyCondition.SUCCEEDED))
                                                .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays.asList(new UserProperty().withName("tp").withValue("datazuaznsbvubbe"),
                                        new UserProperty().withName("tyymljotimpuwgrn").withValue("dataxrizse")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("qmmkmqdfjeu")
                                .withDescription("qstczpsk")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("uqvywolc")
                                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("pglcbhahxsjxurrh")
                                        .withDependencyConditions(
                                            Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays.asList(new UserProperty().withName("ihlolau").withValue("datar")))
                                .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(ForEachActivity.class);
        Assertions.assertEquals("wxgczwxyghsppm", model.name());
        Assertions.assertEquals("c", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("chygbeofiwbtfkiu", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("mbxshrae", model.userProperties().get(0).name());
        Assertions.assertEquals(true, model.isSequential());
        Assertions.assertEquals(797541414, model.batchCount());
        Assertions.assertEquals("sgrcrknnr", model.items().value());
        Assertions.assertEquals("euwfmrckatnjik", model.activities().get(0).name());
        Assertions.assertEquals("htovsyi", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("kprv", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("zsirhp", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
