// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.ForEachActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForEachActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForEachActivity model = BinaryData.fromString(
            "{\"type\":\"ForEach\",\"typeProperties\":{\"isSequential\":false,\"batchCount\":1331977169,\"items\":{\"value\":\"rxhucxmybuqjpgb\"},\"activities\":[{\"type\":\"Activity\",\"name\":\"axga\",\"description\":\"fyinh\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"xcuamdydkdcvow\",\"dependencyConditions\":[\"Succeeded\",\"Failed\",\"Failed\",\"Succeeded\"],\"\":{\"vhfdezomykjbl\":\"datayvopotiefxhaqq\",\"vmymfaiw\":\"dataypuon\",\"xsqcvabyzdaroe\":\"datalrphadd\"}}],\"userProperties\":[{\"name\":\"pau\",\"value\":\"datalety\"},{\"name\":\"zziavguskvvnzn\",\"value\":\"datahboqeue\"}],\"\":{\"zda\":\"dataldjkkvac\",\"fuqqb\":\"datajnsbdw\"}},{\"type\":\"Activity\",\"name\":\"frb\",\"description\":\"spzkvoknmeredn\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"cnhdecx\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Skipped\",\"Skipped\"],\"\":{\"ntpksbtige\":\"dataxfdojxbyxfx\",\"asvahbqoojd\":\"datawaidqzf\",\"danlhql\":\"datamrxjlumrzfdbotnk\",\"ozvcxxezur\":\"datambgiaoxpf\"}}],\"userProperties\":[{\"name\":\"cnsspbleazvyftk\",\"value\":\"databbribgc\"},{\"name\":\"kkmrlptdkwib\",\"value\":\"datarivedshuxlhecz\"}],\"\":{\"bviw\":\"datawm\",\"lponkrhpyediu\":\"datarjeysj\",\"pcjrbfayduzzyxly\":\"dataskcadkyoouv\",\"anec\":\"datawtwzufm\"}},{\"type\":\"Activity\",\"name\":\"fpbf\",\"description\":\"ghohoxcontsrv\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"vcl\",\"dependencyConditions\":[\"Completed\"],\"\":{\"zs\":\"datamfn\"}},{\"activity\":\"hkkktlodsyyzmf\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Skipped\"],\"\":{\"ictej\":\"datat\",\"gtcd\":\"datazbasxapc\",\"vqysghk\":\"datafetpkttjnneynm\",\"fiddnktutwcz\":\"dataxgxqdmvfdocjaf\"}},{\"activity\":\"wmtfjzuqhyqvm\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"igtsrrlelpobm\":\"datadpeedzowverhtyc\",\"qgluhr\":\"datamdsisll\",\"fqb\":\"dataimojozhdcptxxb\"}}],\"userProperties\":[{\"name\":\"wnyudcvqeowepv\",\"value\":\"datarngiffsnt\"},{\"name\":\"pfqguovqqrcyeumw\",\"value\":\"datazagurgur\"},{\"name\":\"cguwyuzhkefownc\",\"value\":\"datadcrwoiqsrqebjgo\"}],\"\":{\"qfkmseaomqqb\":\"datacahdagchk\"}}]},\"name\":\"lwxcfjvedxyeb\",\"description\":\"wnmnxppgfep\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"tae\",\"dependencyConditions\":[\"Completed\",\"Succeeded\"],\"\":{\"fbmrppjfceab\":\"dataynvv\",\"ewi\":\"datapwzs\",\"vdjmvzcycg\":\"datan\"}},{\"activity\":\"telimqxwih\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Skipped\",\"Completed\"],\"\":{\"zrmrv\":\"datauziglri\",\"lotwnppstpq\":\"datacbfcis\",\"eawolhlfffe\":\"datas\",\"qtvxhipchdpd\":\"datanbmhqylrsywisc\"}},{\"activity\":\"vcmpoqkcikfes\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Completed\",\"Skipped\"],\"\":{\"pypzgdet\":\"datapsx\",\"gyhu\":\"datad\"}}],\"userProperties\":[{\"name\":\"tspocrskkraapczm\",\"value\":\"dataiiftjigtqyzocf\"},{\"name\":\"yw\",\"value\":\"dataflciooxybmktb\"}],\"\":{\"wtjokuhrtqnb\":\"datajcepyc\",\"ojvejxhfeo\":\"datagcnicknsbbccbqx\",\"idlpmlxhzwyy\":\"datazftfyjcen\"}}")
            .toObject(ForEachActivity.class);
        Assertions.assertEquals("lwxcfjvedxyeb", model.name());
        Assertions.assertEquals("wnmnxppgfep", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("tae", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("tspocrskkraapczm", model.userProperties().get(0).name());
        Assertions.assertEquals(false, model.isSequential());
        Assertions.assertEquals(1331977169, model.batchCount());
        Assertions.assertEquals("rxhucxmybuqjpgb", model.items().value());
        Assertions.assertEquals("axga", model.activities().get(0).name());
        Assertions.assertEquals("fyinh", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("xcuamdydkdcvow", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("pau", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForEachActivity model = new ForEachActivity().withName("lwxcfjvedxyeb")
            .withDescription("wnmnxppgfep")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("tae")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("telimqxwih")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("vcmpoqkcikfes")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED,
                        DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("tspocrskkraapczm").withValue("dataiiftjigtqyzocf"),
                    new UserProperty().withName("yw").withValue("dataflciooxybmktb")))
            .withIsSequential(false)
            .withBatchCount(1331977169)
            .withItems(new Expression().withValue("rxhucxmybuqjpgb"))
            .withActivities(Arrays.asList(
                new Activity().withName("axga")
                    .withDescription("fyinh")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("xcuamdydkdcvow")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                            DependencyCondition.FAILED, DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("pau").withValue("datalety"),
                        new UserProperty().withName("zziavguskvvnzn").withValue("datahboqeue")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("frb")
                    .withDescription("spzkvoknmeredn")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("cnhdecx")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                            DependencyCondition.COMPLETED, DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("cnsspbleazvyftk").withValue("databbribgc"),
                            new UserProperty().withName("kkmrlptdkwib").withValue("datarivedshuxlhecz")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("fpbf")
                    .withDescription("ghohoxcontsrv")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("vcl")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("hkkktlodsyyzmf")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("wmtfjzuqhyqvm")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("wnyudcvqeowepv").withValue("datarngiffsnt"),
                            new UserProperty().withName("pfqguovqqrcyeumw").withValue("datazagurgur"),
                            new UserProperty().withName("cguwyuzhkefownc").withValue("datadcrwoiqsrqebjgo")))
                    .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(ForEachActivity.class);
        Assertions.assertEquals("lwxcfjvedxyeb", model.name());
        Assertions.assertEquals("wnmnxppgfep", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("tae", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("tspocrskkraapczm", model.userProperties().get(0).name());
        Assertions.assertEquals(false, model.isSequential());
        Assertions.assertEquals(1331977169, model.batchCount());
        Assertions.assertEquals("rxhucxmybuqjpgb", model.items().value());
        Assertions.assertEquals("axga", model.activities().get(0).name());
        Assertions.assertEquals("fyinh", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("xcuamdydkdcvow", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("pau", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
