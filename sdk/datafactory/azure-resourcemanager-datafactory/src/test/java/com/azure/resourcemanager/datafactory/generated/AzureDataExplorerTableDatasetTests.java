// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureDataExplorerTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureDataExplorerTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDataExplorerTableDataset model = BinaryData.fromString(
            "{\"type\":\"AzureDataExplorerTable\",\"typeProperties\":{\"table\":\"datausfdywqrq\"},\"description\":\"wkendgr\",\"structure\":\"dataff\",\"schema\":\"dataqqnugtcuyuwgnyj\",\"linkedServiceName\":{\"referenceName\":\"iuj\",\"parameters\":{\"tuajkufpvvdgnme\":\"datawmlfzlhibfmcoxb\",\"bfyqz\":\"dataomnobbaibc\"}},\"parameters\":{\"buhdnhhcmtslptbd\":{\"type\":\"Float\",\"defaultValue\":\"datafgvmrkmgifmy\"},\"zjzzb\":{\"type\":\"String\",\"defaultValue\":\"datahblqivcnuqf\"},\"trch\":{\"type\":\"Array\",\"defaultValue\":\"datat\"}},\"annotations\":[\"dataruawqe\",\"dataqsqmiekx\",\"datap\",\"dataqchf\"],\"folder\":{\"name\":\"kkvjjl\"},\"\":{\"zyqokbgum\":\"datacu\"}}")
            .toObject(AzureDataExplorerTableDataset.class);
        Assertions.assertEquals("wkendgr", model.description());
        Assertions.assertEquals("iuj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("buhdnhhcmtslptbd").type());
        Assertions.assertEquals("kkvjjl", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDataExplorerTableDataset model = new AzureDataExplorerTableDataset().withDescription("wkendgr")
            .withStructure("dataff")
            .withSchema("dataqqnugtcuyuwgnyj")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("iuj")
                .withParameters(mapOf("tuajkufpvvdgnme", "datawmlfzlhibfmcoxb", "bfyqz", "dataomnobbaibc")))
            .withParameters(mapOf("buhdnhhcmtslptbd",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datafgvmrkmgifmy"),
                "zjzzb",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datahblqivcnuqf"), "trch",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datat")))
            .withAnnotations(Arrays.asList("dataruawqe", "dataqsqmiekx", "datap", "dataqchf"))
            .withFolder(new DatasetFolder().withName("kkvjjl"))
            .withTable("datausfdywqrq");
        model = BinaryData.fromObject(model).toObject(AzureDataExplorerTableDataset.class);
        Assertions.assertEquals("wkendgr", model.description());
        Assertions.assertEquals("iuj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("buhdnhhcmtslptbd").type());
        Assertions.assertEquals("kkvjjl", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
