// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureDataExplorerTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureDataExplorerTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDataExplorerTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"AzureDataExplorerTable\",\"typeProperties\":{\"table\":\"datarwxxqkwargcbgdg\"},\"description\":\"ijiqe\",\"structure\":\"datawqykmvugflh\",\"schema\":\"dataoxu\",\"linkedServiceName\":{\"referenceName\":\"hcnnkvthwtam\",\"parameters\":{\"cocdxvbeqzjd\":\"datagyvxhfmuhkezuucq\"}},\"parameters\":{\"my\":{\"type\":\"Array\",\"defaultValue\":\"datapdwnee\"},\"jrwvnffaofkvfru\":{\"type\":\"Bool\",\"defaultValue\":\"datau\"},\"tvymdqaymqmyrn\":{\"type\":\"Int\",\"defaultValue\":\"datafbvhgykzov\"}},\"annotations\":[\"databqkfnoxhvo\",\"datajdgfkr\"],\"folder\":{\"name\":\"rvpa\"},\"\":{\"ej\":\"datadeex\",\"nxbohpzurn\":\"datagu\",\"oijoxcbpkiwse\":\"dataoytkbeadyfenro\",\"ztdacrqcwkk\":\"datacbtaxdrpanhsxwhx\"}}")
                .toObject(AzureDataExplorerTableDataset.class);
        Assertions.assertEquals("ijiqe", model.description());
        Assertions.assertEquals("hcnnkvthwtam", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("my").type());
        Assertions.assertEquals("rvpa", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDataExplorerTableDataset model =
            new AzureDataExplorerTableDataset()
                .withDescription("ijiqe")
                .withStructure("datawqykmvugflh")
                .withSchema("dataoxu")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("hcnnkvthwtam")
                        .withParameters(mapOf("cocdxvbeqzjd", "datagyvxhfmuhkezuucq")))
                .withParameters(
                    mapOf(
                        "my",
                        new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datapdwnee"),
                        "jrwvnffaofkvfru",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datau"),
                        "tvymdqaymqmyrn",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datafbvhgykzov")))
                .withAnnotations(Arrays.asList("databqkfnoxhvo", "datajdgfkr"))
                .withFolder(new DatasetFolder().withName("rvpa"))
                .withTable("datarwxxqkwargcbgdg");
        model = BinaryData.fromObject(model).toObject(AzureDataExplorerTableDataset.class);
        Assertions.assertEquals("ijiqe", model.description());
        Assertions.assertEquals("hcnnkvthwtam", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("my").type());
        Assertions.assertEquals("rvpa", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
