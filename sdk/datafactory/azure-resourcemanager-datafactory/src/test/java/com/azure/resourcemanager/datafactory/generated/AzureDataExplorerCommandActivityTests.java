// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureDataExplorerCommandActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureDataExplorerCommandActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDataExplorerCommandActivity model = BinaryData.fromString(
            "{\"type\":\"AzureDataExplorerCommand\",\"typeProperties\":{\"command\":\"datamnyfhkxcplhqzpw\",\"commandTimeout\":\"datauyrpsl\"},\"linkedServiceName\":{\"referenceName\":\"acn\",\"parameters\":{\"amcsdzqxkg\":\"dataupjqfup\",\"acd\":\"dataecnqipskpynr\",\"qodxsscirgqjnfde\":\"datafwutahlh\"}},\"policy\":{\"timeout\":\"dataeyhfnjifuucojkik\",\"retry\":\"datahkvhld\",\"retryIntervalInSeconds\":919721101,\"secureInput\":true,\"secureOutput\":false,\"\":{\"wexoyfsee\":\"datadzmbzlfzy\",\"doufwkhipaodohb\":\"datavmtyub\",\"gokpnbmhskhjjxe\":\"datadbbweaa\",\"h\":\"datambuhkcsh\"}},\"name\":\"ahmtevifeo\",\"description\":\"eppnpftwgtrcccyi\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"njpwkwxnmqmytv\",\"dependencyConditions\":[\"Completed\",\"Completed\"],\"\":{\"haeedqa\":\"datafnmwm\",\"ntnlbsv\":\"datahccw\",\"zafpvwrbqbyxu\":\"datasjvd\"}},{\"activity\":\"pqkbbemh\",\"dependencyConditions\":[\"Completed\",\"Skipped\"],\"\":{\"pxbjjnxdgnegkltl\":\"datasfsjpvjwbxlgp\",\"mm\":\"databbe\",\"tdzgngnuuz\":\"datahmvadasuevu\",\"mnelqlqn\":\"datahgfojdbov\"}},{\"activity\":\"vqmxzdi\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"bwakmibiylkfnedx\":\"datapqsjzgncyksblre\"}}],\"userProperties\":[{\"name\":\"cyrblwqhzyr\",\"value\":\"datags\"},{\"name\":\"bzpozqluuaugktt\",\"value\":\"datapw\"}],\"\":{\"b\":\"dataajevw\"}}")
            .toObject(AzureDataExplorerCommandActivity.class);
        Assertions.assertEquals("ahmtevifeo", model.name());
        Assertions.assertEquals("eppnpftwgtrcccyi", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("njpwkwxnmqmytv", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("cyrblwqhzyr", model.userProperties().get(0).name());
        Assertions.assertEquals("acn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(919721101, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDataExplorerCommandActivity model = new AzureDataExplorerCommandActivity().withName("ahmtevifeo")
            .withDescription("eppnpftwgtrcccyi")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("njpwkwxnmqmytv")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("pqkbbemh")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("vqmxzdi")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("cyrblwqhzyr").withValue("datags"),
                new UserProperty().withName("bzpozqluuaugktt").withValue("datapw")))
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("acn")
                    .withParameters(mapOf("amcsdzqxkg", "dataupjqfup", "acd", "dataecnqipskpynr", "qodxsscirgqjnfde",
                        "datafwutahlh")))
            .withPolicy(new ActivityPolicy().withTimeout("dataeyhfnjifuucojkik")
                .withRetry("datahkvhld")
                .withRetryIntervalInSeconds(919721101)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withCommand("datamnyfhkxcplhqzpw")
            .withCommandTimeout("datauyrpsl");
        model = BinaryData.fromObject(model).toObject(AzureDataExplorerCommandActivity.class);
        Assertions.assertEquals("ahmtevifeo", model.name());
        Assertions.assertEquals("eppnpftwgtrcccyi", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("njpwkwxnmqmytv", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("cyrblwqhzyr", model.userProperties().get(0).name());
        Assertions.assertEquals("acn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(919721101, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
