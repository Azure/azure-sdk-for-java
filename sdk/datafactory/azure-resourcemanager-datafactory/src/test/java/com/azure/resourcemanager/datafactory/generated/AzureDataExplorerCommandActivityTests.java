// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureDataExplorerCommandActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureDataExplorerCommandActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDataExplorerCommandActivity model = BinaryData.fromString(
            "{\"type\":\"AzureDataExplorerCommand\",\"typeProperties\":{\"command\":\"datarkkankjk\",\"commandTimeout\":\"dataudxq\"},\"linkedServiceName\":{\"referenceName\":\"vxvoqbruyma\",\"parameters\":{\"jfmvydjax\":\"datafofxi\",\"vugb\":\"datastuhlwzcn\"}},\"policy\":{\"timeout\":\"datayfhkx\",\"retry\":\"datalhqzpw\",\"retryIntervalInSeconds\":1378860683,\"secureInput\":false,\"secureOutput\":false,\"\":{\"cnfgtup\":\"datae\",\"dzqxkgr\":\"dataqfupoamc\"}},\"name\":\"cnqipskpynrsacdc\",\"description\":\"utahlhiqodx\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"jnfd\",\"dependencyConditions\":[\"Completed\",\"Succeeded\"],\"\":{\"uucojki\":\"datahfnji\",\"kvhldnscx\":\"datagb\"}},{\"activity\":\"jwsrdzmbzlfzy\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Succeeded\"],\"\":{\"wkhipaodohb\":\"dataseehvmtyubvdou\",\"gokpnbmhskhjjxe\":\"datadbbweaa\"}},{\"activity\":\"mbuhkcsh\",\"dependencyConditions\":[\"Completed\"],\"\":{\"npftwgt\":\"datamtevifeoijep\",\"njpwkwxnmqmytv\":\"datacccyiuehsne\"}},{\"activity\":\"rjutyfn\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Failed\"],\"\":{\"jntnlbsvt\":\"dataedqakhcc\",\"rbqbyxuupqkbbem\":\"datajvdvzafpv\",\"fsjpvjwbxlgpepx\":\"datawtmeqt\"}}],\"userProperties\":[{\"name\":\"nxdgneg\",\"value\":\"datalt\"}],\"\":{\"hmvadasuevu\":\"databepmm\"}}")
            .toObject(AzureDataExplorerCommandActivity.class);
        Assertions.assertEquals("cnqipskpynrsacdc", model.name());
        Assertions.assertEquals("utahlhiqodx", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("jnfd", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("nxdgneg", model.userProperties().get(0).name());
        Assertions.assertEquals("vxvoqbruyma", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1378860683, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDataExplorerCommandActivity model = new AzureDataExplorerCommandActivity().withName("cnqipskpynrsacdc")
            .withDescription("utahlhiqodx")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("jnfd")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("jwsrdzmbzlfzy")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.COMPLETED,
                        DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("mbuhkcsh")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("rjutyfn")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("nxdgneg").withValue("datalt")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("vxvoqbruyma")
                .withParameters(mapOf("jfmvydjax", "datafofxi", "vugb", "datastuhlwzcn")))
            .withPolicy(new ActivityPolicy().withTimeout("datayfhkx")
                .withRetry("datalhqzpw")
                .withRetryIntervalInSeconds(1378860683)
                .withSecureInput(false)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withCommand("datarkkankjk")
            .withCommandTimeout("dataudxq");
        model = BinaryData.fromObject(model).toObject(AzureDataExplorerCommandActivity.class);
        Assertions.assertEquals("cnqipskpynrsacdc", model.name());
        Assertions.assertEquals("utahlhiqodx", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("jnfd", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("nxdgneg", model.userProperties().get(0).name());
        Assertions.assertEquals("vxvoqbruyma", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1378860683, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
