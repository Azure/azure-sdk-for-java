// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureDataExplorerCommandActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureDataExplorerCommandActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDataExplorerCommandActivity model = BinaryData.fromString(
            "{\"type\":\"AzureDataExplorerCommand\",\"typeProperties\":{\"command\":\"datai\",\"commandTimeout\":\"dataxlhfmkllxoahfv\"},\"linkedServiceName\":{\"referenceName\":\"hf\",\"parameters\":{\"oyqxbawtisbhke\":\"dataqzvfzxseqs\",\"rqr\":\"datakgnjravoqcylgytd\",\"bohm\":\"datavpxwzewpngco\",\"entrlzbwtiv\":\"datajobzvsu\"}},\"policy\":{\"timeout\":\"datarrbswbxizmxvdtkm\",\"retry\":\"dataiko\",\"retryIntervalInSeconds\":1912763398,\"secureInput\":true,\"secureOutput\":false,\"\":{\"liajonjdhbqwc\":\"datanbz\",\"ykz\":\"datagsgpefn\"}},\"name\":\"ijqxwm\",\"description\":\"mosqhnwb\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"uyqaqemozjz\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Completed\",\"Succeeded\"],\"\":{\"keswtkhfcnceowv\":\"datakaujjpcl\",\"epnmegc\":\"datarbshyulk\"}}],\"userProperties\":[{\"name\":\"oydaifxmbxq\",\"value\":\"dataczccm\"},{\"name\":\"pigpzpldaoii\",\"value\":\"dataxknsqdrugva\"},{\"name\":\"pjvqrwlseeuyx\",\"value\":\"datarwovgwqzzugsbwq\"},{\"name\":\"otpvyt\",\"value\":\"datazsqbckq\"}],\"\":{\"kvyicjzkgyu\":\"dataminz\",\"gmkebuv\":\"dataiqeskin\",\"lxrnsyvmueik\":\"datauzzwphuli\",\"im\":\"datavcogq\"}}")
            .toObject(AzureDataExplorerCommandActivity.class);
        Assertions.assertEquals("ijqxwm", model.name());
        Assertions.assertEquals("mosqhnwb", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("uyqaqemozjz", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("oydaifxmbxq", model.userProperties().get(0).name());
        Assertions.assertEquals("hf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1912763398, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDataExplorerCommandActivity model = new AzureDataExplorerCommandActivity().withName("ijqxwm")
            .withDescription("mosqhnwb")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("uyqaqemozjz")
                .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED,
                    DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("oydaifxmbxq").withValue("dataczccm"),
                new UserProperty().withName("pigpzpldaoii").withValue("dataxknsqdrugva"),
                new UserProperty().withName("pjvqrwlseeuyx").withValue("datarwovgwqzzugsbwq"),
                new UserProperty().withName("otpvyt").withValue("datazsqbckq")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("hf")
                .withParameters(mapOf("oyqxbawtisbhke", "dataqzvfzxseqs", "rqr", "datakgnjravoqcylgytd", "bohm",
                    "datavpxwzewpngco", "entrlzbwtiv", "datajobzvsu")))
            .withPolicy(new ActivityPolicy().withTimeout("datarrbswbxizmxvdtkm")
                .withRetry("dataiko")
                .withRetryIntervalInSeconds(1912763398)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withCommand("datai")
            .withCommandTimeout("dataxlhfmkllxoahfv");
        model = BinaryData.fromObject(model).toObject(AzureDataExplorerCommandActivity.class);
        Assertions.assertEquals("ijqxwm", model.name());
        Assertions.assertEquals("mosqhnwb", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("uyqaqemozjz", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("oydaifxmbxq", model.userProperties().get(0).name());
        Assertions.assertEquals("hf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1912763398, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
