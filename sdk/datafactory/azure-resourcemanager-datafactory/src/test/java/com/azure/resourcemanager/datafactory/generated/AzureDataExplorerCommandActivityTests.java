// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureDataExplorerCommandActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureDataExplorerCommandActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDataExplorerCommandActivity model = BinaryData.fromString(
            "{\"type\":\"AzureDataExplorerCommand\",\"typeProperties\":{\"command\":\"datanigjoxhzcmgmcsj\",\"commandTimeout\":\"databu\"},\"linkedServiceName\":{\"referenceName\":\"lotojf\",\"parameters\":{\"wjgjlo\":\"datay\",\"pbih\":\"datahhhkxlqu\"}},\"policy\":{\"timeout\":\"datajym\",\"retry\":\"dataweptejry\",\"retryIntervalInSeconds\":1297104867,\"secureInput\":true,\"secureOutput\":false,\"\":{\"mwjbmrkcqp\":\"datap\"}},\"name\":\"xjjutvovhui\",\"description\":\"lyvqycknqmb\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"eusnncnnq\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Skipped\"],\"\":{\"mplt\":\"datadu\",\"zaneave\":\"dataupfndafrziwjcy\",\"ulhworhzesqdvm\":\"datavd\"}},{\"activity\":\"u\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Succeeded\"],\"\":{\"ohze\":\"datajv\",\"mxjd\":\"datauulaeshftlsfwpvf\",\"xbrjdpeypuqwd\":\"dataw\",\"vxfsshocxd\":\"datanym\"}},{\"activity\":\"ornzpr\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Succeeded\",\"Completed\"],\"\":{\"pb\":\"datazdfjfnree\",\"zfotfoif\":\"datamyuiq\"}},{\"activity\":\"rikdfacf\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Failed\"],\"\":{\"drjunigxn\":\"databjizfpfxb\",\"nvr\":\"datannghgazdbv\",\"qswrncwhlxvngj\":\"datati\"}}],\"userProperties\":[{\"name\":\"djdpap\",\"value\":\"datadmvrbdtvvtap\"},{\"name\":\"kwkthmexidecdeh\",\"value\":\"datakmfiudnpj\"},{\"name\":\"xfhtsgyyrg\",\"value\":\"dataguv\"},{\"name\":\"gqllgokznffqvtx\",\"value\":\"dataytihhq\"}],\"\":{\"bdfam\":\"datawgrwgdpfzdygtkrs\",\"aiuoncrswvw\":\"dataolvgks\",\"mwzduhixomxv\":\"datauetqcxoamx\",\"ouneozgn\":\"dataruzxsnzxipgfkco\"}}")
            .toObject(AzureDataExplorerCommandActivity.class);
        Assertions.assertEquals("xjjutvovhui", model.name());
        Assertions.assertEquals("lyvqycknqmb", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("eusnncnnq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("djdpap", model.userProperties().get(0).name());
        Assertions.assertEquals("lotojf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1297104867, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDataExplorerCommandActivity model = new AzureDataExplorerCommandActivity().withName("xjjutvovhui")
            .withDescription("lyvqycknqmb").withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency()
                    .withActivity("eusnncnnq")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("u")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SKIPPED,
                        DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("ornzpr")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("rikdfacf")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("djdpap").withValue("datadmvrbdtvvtap"),
                new UserProperty().withName("kwkthmexidecdeh").withValue("datakmfiudnpj"),
                new UserProperty().withName("xfhtsgyyrg").withValue("dataguv"),
                new UserProperty().withName("gqllgokznffqvtx").withValue("dataytihhq")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("lotojf")
                .withParameters(mapOf("wjgjlo", "datay", "pbih", "datahhhkxlqu")))
            .withPolicy(new ActivityPolicy().withTimeout("datajym").withRetry("dataweptejry")
                .withRetryIntervalInSeconds(1297104867).withSecureInput(true).withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withCommand("datanigjoxhzcmgmcsj").withCommandTimeout("databu");
        model = BinaryData.fromObject(model).toObject(AzureDataExplorerCommandActivity.class);
        Assertions.assertEquals("xjjutvovhui", model.name());
        Assertions.assertEquals("lyvqycknqmb", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("eusnncnnq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("djdpap", model.userProperties().get(0).name());
        Assertions.assertEquals("lotojf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1297104867, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
