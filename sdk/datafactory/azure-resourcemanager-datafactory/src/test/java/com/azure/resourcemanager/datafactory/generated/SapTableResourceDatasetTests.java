// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapTableResourceDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapTableResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapTableResourceDataset model = BinaryData.fromString(
            "{\"type\":\"ekijhminen\",\"typeProperties\":{\"tableName\":\"datacgcsapvbcqpf\"},\"description\":\"ivp\",\"structure\":\"datakvorlfqm\",\"schema\":\"dataewynbf\",\"linkedServiceName\":{\"referenceName\":\"vcwvurkmjufavvln\",\"parameters\":{\"kkf\":\"dataotmynklnmrznmtv\",\"xutcbvriuvnfazx\":\"datawxizkstxneykei\",\"yaeiivjqkq\":\"datavsa\"}},\"parameters\":{\"joqfxqe\":{\"type\":\"Bool\",\"defaultValue\":\"dataew\"},\"zq\":{\"type\":\"SecureString\",\"defaultValue\":\"datadqiuspguzljvgji\"},\"qq\":{\"type\":\"Object\",\"defaultValue\":\"datajsazmjsis\"},\"ygllfkchhgsjuzzc\":{\"type\":\"String\",\"defaultValue\":\"dataecagsbfeiirpn\"}},\"annotations\":[\"datawmqcycabaam\",\"datakhdhpmkxdujkxpuq\",\"datadyoqywsuarpzhry\",\"dataezxiz\"],\"folder\":{\"name\":\"xbfj\"},\"\":{\"kdf\":\"datauazccouhwi\",\"rb\":\"datajsk\",\"piqdqbvxqto\":\"datazepirtv\"}}")
            .toObject(SapTableResourceDataset.class);
        Assertions.assertEquals("ivp", model.description());
        Assertions.assertEquals("vcwvurkmjufavvln", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("joqfxqe").type());
        Assertions.assertEquals("xbfj", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapTableResourceDataset model = new SapTableResourceDataset().withDescription("ivp")
            .withStructure("datakvorlfqm")
            .withSchema("dataewynbf")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("vcwvurkmjufavvln")
                .withParameters(mapOf("kkf", "dataotmynklnmrznmtv", "xutcbvriuvnfazx", "datawxizkstxneykei",
                    "yaeiivjqkq", "datavsa")))
            .withParameters(mapOf("joqfxqe",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataew"), "zq",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("datadqiuspguzljvgji"),
                "qq", new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datajsazmjsis"),
                "ygllfkchhgsjuzzc",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataecagsbfeiirpn")))
            .withAnnotations(
                Arrays.asList("datawmqcycabaam", "datakhdhpmkxdujkxpuq", "datadyoqywsuarpzhry", "dataezxiz"))
            .withFolder(new DatasetFolder().withName("xbfj"))
            .withTableName("datacgcsapvbcqpf");
        model = BinaryData.fromObject(model).toObject(SapTableResourceDataset.class);
        Assertions.assertEquals("ivp", model.description());
        Assertions.assertEquals("vcwvurkmjufavvln", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("joqfxqe").type());
        Assertions.assertEquals("xbfj", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
