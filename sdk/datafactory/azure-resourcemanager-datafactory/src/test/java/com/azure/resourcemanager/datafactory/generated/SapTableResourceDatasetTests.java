// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapTableResourceDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapTableResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapTableResourceDataset model = BinaryData.fromString(
            "{\"type\":\"SapTableResource\",\"typeProperties\":{\"tableName\":\"datamlfjymgw\"},\"description\":\"szcfyzqpeqreg\",\"structure\":\"datardpagknxmaovr\",\"schema\":\"datahlnzffew\",\"linkedServiceName\":{\"referenceName\":\"qkycj\",\"parameters\":{\"abhgclejqzhpvh\":\"dataipqxxsdyafwtydsm\",\"gf\":\"datapbadjzeul\",\"vqerqxkomwdzpzl\":\"dataogtqscj\",\"qpwwvmbjecfwlbgh\":\"datacuex\"}},\"parameters\":{\"zpchiy\":{\"type\":\"String\",\"defaultValue\":\"dataxohlydsn\"},\"ozewbr\":{\"type\":\"String\",\"defaultValue\":\"datahmihikt\"},\"uxboufqnnqbjxgj\":{\"type\":\"String\",\"defaultValue\":\"datazgkbr\"}},\"annotations\":[\"dataerukbuu\",\"datari\",\"datawkwkjxlaacedikqe\",\"datassybzbe\"],\"folder\":{\"name\":\"nrommki\"},\"\":{\"yut\":\"datapwtmzyj\",\"i\":\"datamzqlnaag\",\"fqiywhxpsb\":\"dataj\"}}")
            .toObject(SapTableResourceDataset.class);
        Assertions.assertEquals("szcfyzqpeqreg", model.description());
        Assertions.assertEquals("qkycj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("zpchiy").type());
        Assertions.assertEquals("nrommki", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapTableResourceDataset model = new SapTableResourceDataset().withDescription("szcfyzqpeqreg")
            .withStructure("datardpagknxmaovr")
            .withSchema("datahlnzffew")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("qkycj")
                .withParameters(mapOf("abhgclejqzhpvh", "dataipqxxsdyafwtydsm", "gf", "datapbadjzeul",
                    "vqerqxkomwdzpzl", "dataogtqscj", "qpwwvmbjecfwlbgh", "datacuex")))
            .withParameters(mapOf("zpchiy",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataxohlydsn"), "ozewbr",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datahmihikt"),
                "uxboufqnnqbjxgj",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datazgkbr")))
            .withAnnotations(Arrays.asList("dataerukbuu", "datari", "datawkwkjxlaacedikqe", "datassybzbe"))
            .withFolder(new DatasetFolder().withName("nrommki"))
            .withTableName("datamlfjymgw");
        model = BinaryData.fromObject(model).toObject(SapTableResourceDataset.class);
        Assertions.assertEquals("szcfyzqpeqreg", model.description());
        Assertions.assertEquals("qkycj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("zpchiy").type());
        Assertions.assertEquals("nrommki", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
