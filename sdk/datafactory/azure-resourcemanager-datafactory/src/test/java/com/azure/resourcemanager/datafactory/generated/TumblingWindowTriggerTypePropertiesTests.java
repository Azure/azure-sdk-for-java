// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.TumblingWindowTriggerTypeProperties;
import com.azure.resourcemanager.datafactory.models.DependencyReference;
import com.azure.resourcemanager.datafactory.models.RetryPolicy;
import com.azure.resourcemanager.datafactory.models.TumblingWindowFrequency;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class TumblingWindowTriggerTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TumblingWindowTriggerTypeProperties model = BinaryData.fromString(
            "{\"frequency\":\"Month\",\"interval\":1778345999,\"startTime\":\"2020-12-31T14:40:01Z\",\"endTime\":\"2021-05-06T17:10:59Z\",\"delay\":\"datarellwfgyabglsarf\",\"maxConcurrency\":1381920773,\"retryPolicy\":{\"count\":\"datahcxudromhhsum\",\"intervalInSeconds\":367806},\"dependsOn\":[{\"type\":\"DependencyReference\"},{\"type\":\"DependencyReference\"}]}")
            .toObject(TumblingWindowTriggerTypeProperties.class);
        Assertions.assertEquals(TumblingWindowFrequency.MONTH, model.frequency());
        Assertions.assertEquals(1778345999, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-31T14:40:01Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-06T17:10:59Z"), model.endTime());
        Assertions.assertEquals(1381920773, model.maxConcurrency());
        Assertions.assertEquals(367806, model.retryPolicy().intervalInSeconds());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TumblingWindowTriggerTypeProperties model
            = new TumblingWindowTriggerTypeProperties().withFrequency(TumblingWindowFrequency.MONTH)
                .withInterval(1778345999)
                .withStartTime(OffsetDateTime.parse("2020-12-31T14:40:01Z"))
                .withEndTime(OffsetDateTime.parse("2021-05-06T17:10:59Z"))
                .withDelay("datarellwfgyabglsarf")
                .withMaxConcurrency(1381920773)
                .withRetryPolicy(new RetryPolicy().withCount("datahcxudromhhsum").withIntervalInSeconds(367806))
                .withDependsOn(Arrays.asList(new DependencyReference(), new DependencyReference()));
        model = BinaryData.fromObject(model).toObject(TumblingWindowTriggerTypeProperties.class);
        Assertions.assertEquals(TumblingWindowFrequency.MONTH, model.frequency());
        Assertions.assertEquals(1778345999, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-31T14:40:01Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-06T17:10:59Z"), model.endTime());
        Assertions.assertEquals(1381920773, model.maxConcurrency());
        Assertions.assertEquals(367806, model.retryPolicy().intervalInSeconds());
    }
}
