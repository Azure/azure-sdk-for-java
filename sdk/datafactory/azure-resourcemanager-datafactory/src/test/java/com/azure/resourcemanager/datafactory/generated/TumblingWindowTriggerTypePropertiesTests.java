// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.TumblingWindowTriggerTypeProperties;
import com.azure.resourcemanager.datafactory.models.DependencyReference;
import com.azure.resourcemanager.datafactory.models.RetryPolicy;
import com.azure.resourcemanager.datafactory.models.TumblingWindowFrequency;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class TumblingWindowTriggerTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TumblingWindowTriggerTypeProperties model = BinaryData.fromString(
            "{\"frequency\":\"Minute\",\"interval\":1052042151,\"startTime\":\"2021-03-29T22:51Z\",\"endTime\":\"2021-04-11T13:06:29Z\",\"delay\":\"dataqmbuv\",\"maxConcurrency\":838737054,\"retryPolicy\":{\"count\":\"datamcymwr\",\"intervalInSeconds\":1972140841},\"dependsOn\":[{\"type\":\"uldgtkedvxh\"}]}")
            .toObject(TumblingWindowTriggerTypeProperties.class);
        Assertions.assertEquals(TumblingWindowFrequency.MINUTE, model.frequency());
        Assertions.assertEquals(1052042151, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-29T22:51Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-11T13:06:29Z"), model.endTime());
        Assertions.assertEquals(838737054, model.maxConcurrency());
        Assertions.assertEquals(1972140841, model.retryPolicy().intervalInSeconds());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TumblingWindowTriggerTypeProperties model
            = new TumblingWindowTriggerTypeProperties().withFrequency(TumblingWindowFrequency.MINUTE)
                .withInterval(1052042151)
                .withStartTime(OffsetDateTime.parse("2021-03-29T22:51Z"))
                .withEndTime(OffsetDateTime.parse("2021-04-11T13:06:29Z"))
                .withDelay("dataqmbuv")
                .withMaxConcurrency(838737054)
                .withRetryPolicy(new RetryPolicy().withCount("datamcymwr").withIntervalInSeconds(1972140841))
                .withDependsOn(Arrays.asList(new DependencyReference()));
        model = BinaryData.fromObject(model).toObject(TumblingWindowTriggerTypeProperties.class);
        Assertions.assertEquals(TumblingWindowFrequency.MINUTE, model.frequency());
        Assertions.assertEquals(1052042151, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-29T22:51Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-11T13:06:29Z"), model.endTime());
        Assertions.assertEquals(838737054, model.maxConcurrency());
        Assertions.assertEquals(1972140841, model.retryPolicy().intervalInSeconds());
    }
}
