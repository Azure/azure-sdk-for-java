// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LakeHouseTableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LakeHouseTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LakeHouseTableDataset model = BinaryData.fromString(
            "{\"type\":\"LakeHouseTable\",\"typeProperties\":{\"table\":\"dataeogavfyihuz\"},\"description\":\"pwnyfjcypazwiimd\",\"structure\":\"datagkooagr\",\"schema\":\"datapamesi\",\"linkedServiceName\":{\"referenceName\":\"wqadewhuwxkyx\",\"parameters\":{\"mrnaifllxccpr\":\"dataf\"}},\"parameters\":{\"quzihir\":{\"type\":\"Bool\",\"defaultValue\":\"datazwhomydxgtuqbv\"},\"t\":{\"type\":\"SecureString\",\"defaultValue\":\"dataketydgaqo\"},\"aqgbb\":{\"type\":\"Int\",\"defaultValue\":\"datavqxerxrmhr\"}},\"annotations\":[\"dataihylrxsiyzsyiu\",\"datatitlqy\",\"datafvernnk\",\"datapkayqivbig\"],\"folder\":{\"name\":\"gzetboyztgnmu\"},\"\":{\"tgwhzbbdwrjenc\":\"datawpcfmgr\"}}")
            .toObject(LakeHouseTableDataset.class);
        Assertions.assertEquals("pwnyfjcypazwiimd", model.description());
        Assertions.assertEquals("wqadewhuwxkyx", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("quzihir").type());
        Assertions.assertEquals("gzetboyztgnmu", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LakeHouseTableDataset model = new LakeHouseTableDataset().withDescription("pwnyfjcypazwiimd")
            .withStructure("datagkooagr").withSchema("datapamesi")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("wqadewhuwxkyx")
                .withParameters(mapOf("mrnaifllxccpr", "dataf")))
            .withParameters(mapOf("quzihir",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datazwhomydxgtuqbv"), "t",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("dataketydgaqo"),
                "aqgbb", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datavqxerxrmhr")))
            .withAnnotations(Arrays.asList("dataihylrxsiyzsyiu", "datatitlqy", "datafvernnk", "datapkayqivbig"))
            .withFolder(new DatasetFolder().withName("gzetboyztgnmu")).withTable("dataeogavfyihuz");
        model = BinaryData.fromObject(model).toObject(LakeHouseTableDataset.class);
        Assertions.assertEquals("pwnyfjcypazwiimd", model.description());
        Assertions.assertEquals("wqadewhuwxkyx", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("quzihir").type());
        Assertions.assertEquals("gzetboyztgnmu", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
