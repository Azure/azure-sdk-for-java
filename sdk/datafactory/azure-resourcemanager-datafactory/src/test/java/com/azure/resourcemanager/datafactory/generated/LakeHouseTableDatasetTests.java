// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LakeHouseTableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LakeHouseTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LakeHouseTableDataset model = BinaryData.fromString(
            "{\"type\":\"LakeHouseTable\",\"typeProperties\":{\"schema\":\"datairgkn\",\"table\":\"datawla\"},\"description\":\"dajy\",\"structure\":\"databjgipvspe\",\"schema\":\"datazhydt\",\"linkedServiceName\":{\"referenceName\":\"bmtrsdplvia\",\"parameters\":{\"gcneviccwb\":\"datarmawo\",\"oi\":\"dataysclwbjgiynqr\",\"eyydx\":\"dataweofvsxauphzefi\",\"exccwldgfq\":\"datagtiivzkd\"}},\"parameters\":{\"cncrvjcullmfw\":{\"type\":\"SecureString\",\"defaultValue\":\"datatacrsc\"}},\"annotations\":[\"dataeowoszzw\",\"datacsjgfxvc\",\"datamubyguqhgnmsvjfg\",\"datapryyircb\"],\"folder\":{\"name\":\"jrbvyrkbuatxkzn\"},\"\":{\"kevday\":\"datambxo\"}}")
            .toObject(LakeHouseTableDataset.class);
        Assertions.assertEquals("dajy", model.description());
        Assertions.assertEquals("bmtrsdplvia", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("cncrvjcullmfw").type());
        Assertions.assertEquals("jrbvyrkbuatxkzn", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LakeHouseTableDataset model = new LakeHouseTableDataset().withDescription("dajy")
            .withStructure("databjgipvspe")
            .withSchema("datazhydt")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("bmtrsdplvia")
                .withParameters(mapOf("gcneviccwb", "datarmawo", "oi", "dataysclwbjgiynqr", "eyydx",
                    "dataweofvsxauphzefi", "exccwldgfq", "datagtiivzkd")))
            .withParameters(mapOf("cncrvjcullmfw",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datatacrsc")))
            .withAnnotations(Arrays.asList("dataeowoszzw", "datacsjgfxvc", "datamubyguqhgnmsvjfg", "datapryyircb"))
            .withFolder(new DatasetFolder().withName("jrbvyrkbuatxkzn"))
            .withSchemaTypePropertiesSchema("datairgkn")
            .withTable("datawla");
        model = BinaryData.fromObject(model).toObject(LakeHouseTableDataset.class);
        Assertions.assertEquals("dajy", model.description());
        Assertions.assertEquals("bmtrsdplvia", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("cncrvjcullmfw").type());
        Assertions.assertEquals("jrbvyrkbuatxkzn", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
