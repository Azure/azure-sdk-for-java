// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LakeHouseTableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LakeHouseTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LakeHouseTableDataset model = BinaryData.fromString(
            "{\"type\":\"wvxcai\",\"typeProperties\":{\"table\":\"datazvvxdvphx\"},\"description\":\"icbogsfo\",\"structure\":\"datamamiyfgunruk\",\"schema\":\"datayaalbk\",\"linkedServiceName\":{\"referenceName\":\"bzqa\",\"parameters\":{\"kifqbxmnnidot\":\"datarkvit\",\"odttq\":\"datapumzuh\",\"umvuwjyulqfpqql\":\"datapva\"}},\"parameters\":{\"dblapqraczvtniwf\":{\"type\":\"Float\",\"defaultValue\":\"datahjgmr\"},\"ibxkcegc\":{\"type\":\"Object\",\"defaultValue\":\"datawhxm\"},\"iawpjfkrarerdl\":{\"type\":\"Array\",\"defaultValue\":\"dataxkxtcxbbjbeyqoh\"},\"suameg\":{\"type\":\"String\",\"defaultValue\":\"datatpxowgowwdocj\"}},\"annotations\":[\"dataiszhexu\",\"datafav\",\"dataesloblit\"],\"folder\":{\"name\":\"s\"},\"\":{\"trztogujg\":\"dataosanjso\"}}")
            .toObject(LakeHouseTableDataset.class);
        Assertions.assertEquals("icbogsfo", model.description());
        Assertions.assertEquals("bzqa", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("dblapqraczvtniwf").type());
        Assertions.assertEquals("s", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LakeHouseTableDataset model = new LakeHouseTableDataset().withDescription("icbogsfo")
            .withStructure("datamamiyfgunruk")
            .withSchema("datayaalbk")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("bzqa")
                .withParameters(
                    mapOf("kifqbxmnnidot", "datarkvit", "odttq", "datapumzuh", "umvuwjyulqfpqql", "datapva")))
            .withParameters(mapOf("dblapqraczvtniwf",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datahjgmr"), "ibxkcegc",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datawhxm"),
                "iawpjfkrarerdl",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataxkxtcxbbjbeyqoh"),
                "suameg",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datatpxowgowwdocj")))
            .withAnnotations(Arrays.asList("dataiszhexu", "datafav", "dataesloblit"))
            .withFolder(new DatasetFolder().withName("s"))
            .withTable("datazvvxdvphx");
        model = BinaryData.fromObject(model).toObject(LakeHouseTableDataset.class);
        Assertions.assertEquals("icbogsfo", model.description());
        Assertions.assertEquals("bzqa", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("dblapqraczvtniwf").type());
        Assertions.assertEquals("s", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
