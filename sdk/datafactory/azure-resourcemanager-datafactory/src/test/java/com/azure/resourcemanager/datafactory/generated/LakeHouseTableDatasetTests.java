// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LakeHouseTableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LakeHouseTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LakeHouseTableDataset model = BinaryData.fromString(
            "{\"type\":\"LakeHouseTable\",\"typeProperties\":{\"schema\":\"datagva\",\"table\":\"datar\"},\"description\":\"xlmbrtvtgolmlp\",\"structure\":\"datatlayyxhxj\",\"schema\":\"datays\",\"linkedServiceName\":{\"referenceName\":\"aqqjh\",\"parameters\":{\"njc\":\"datafaob\",\"qwssyd\":\"databozvc\",\"ywo\":\"datawrybi\"}},\"parameters\":{\"pkv\":{\"type\":\"Int\",\"defaultValue\":\"datavtzijrdlxbaeyo\"},\"mnpbdrcibj\":{\"type\":\"Int\",\"defaultValue\":\"datafdz\"}},\"annotations\":[\"datanoztnhvd\",\"datau\",\"dataamqobqehs\",\"datasht\"],\"folder\":{\"name\":\"zfeoctrzjw\"},\"\":{\"mbvwdxgy\":\"datackze\",\"l\":\"datapmxqzl\"}}")
            .toObject(LakeHouseTableDataset.class);
        Assertions.assertEquals("xlmbrtvtgolmlp", model.description());
        Assertions.assertEquals("aqqjh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("pkv").type());
        Assertions.assertEquals("zfeoctrzjw", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LakeHouseTableDataset model = new LakeHouseTableDataset().withDescription("xlmbrtvtgolmlp")
            .withStructure("datatlayyxhxj")
            .withSchema("datays")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("aqqjh")
                .withParameters(mapOf("njc", "datafaob", "qwssyd", "databozvc", "ywo", "datawrybi")))
            .withParameters(mapOf("pkv",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datavtzijrdlxbaeyo"),
                "mnpbdrcibj", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datafdz")))
            .withAnnotations(Arrays.asList("datanoztnhvd", "datau", "dataamqobqehs", "datasht"))
            .withFolder(new DatasetFolder().withName("zfeoctrzjw"))
            .withSchemaTypePropertiesSchema("datagva")
            .withTable("datar");
        model = BinaryData.fromObject(model).toObject(LakeHouseTableDataset.class);
        Assertions.assertEquals("xlmbrtvtgolmlp", model.description());
        Assertions.assertEquals("aqqjh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("pkv").type());
        Assertions.assertEquals("zfeoctrzjw", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
