// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ExecuteDataFlowActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.ExecuteDataFlowActivityTypePropertiesCompute;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ExecuteDataFlowActivityTypePropertiesTests {
    @Test
    public void testDeserialize() {
        ExecuteDataFlowActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"dataFlow\":{\"type\":\"DataFlowReference\",\"referenceName\":\"qmawzjdrpizfu\",\"parameters\":{},\"\":{}},\"staging\":{\"linkedService\":{\"referenceName\":\"tqgkujd\",\"parameters\":{}}},\"integrationRuntime\":{\"referenceName\":\"qwoeurbtigapd\",\"parameters\":{}},\"compute\":{}}")
                .toObject(ExecuteDataFlowActivityTypeProperties.class);
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("qmawzjdrpizfu", model.dataFlow().referenceName());
        Assertions.assertEquals("tqgkujd", model.staging().linkedService().referenceName());
        Assertions.assertEquals("qwoeurbtigapd", model.integrationRuntime().referenceName());
    }

    @Test
    public void testSerialize() {
        ExecuteDataFlowActivityTypeProperties model =
            new ExecuteDataFlowActivityTypeProperties()
                .withDataFlow(
                    new DataFlowReference()
                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("qmawzjdrpizfu")
                        .withParameters(mapOf())
                        .withAdditionalProperties(mapOf()))
                .withStaging(
                    new DataFlowStagingInfo()
                        .withLinkedService(
                            new LinkedServiceReference().withReferenceName("tqgkujd").withParameters(mapOf())))
                .withIntegrationRuntime(
                    new IntegrationRuntimeReference().withReferenceName("qwoeurbtigapd").withParameters(mapOf()))
                .withCompute(new ExecuteDataFlowActivityTypePropertiesCompute());
        model = BinaryData.fromObject(model).toObject(ExecuteDataFlowActivityTypeProperties.class);
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("qmawzjdrpizfu", model.dataFlow().referenceName());
        Assertions.assertEquals("tqgkujd", model.staging().linkedService().referenceName());
        Assertions.assertEquals("qwoeurbtigapd", model.integrationRuntime().referenceName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
