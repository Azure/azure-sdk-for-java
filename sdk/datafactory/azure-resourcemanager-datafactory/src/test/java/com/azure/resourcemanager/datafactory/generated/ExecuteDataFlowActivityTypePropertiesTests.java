// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ExecuteDataFlowActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.ExecuteDataFlowActivityTypePropertiesCompute;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecuteDataFlowActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecuteDataFlowActivityTypeProperties model = BinaryData.fromString(
            "{\"dataFlow\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ytkeqjviawspvbcm\",\"datasetParameters\":\"dataeelmiuprfq\",\"parameters\":{\"gkfojnqmdtuyi\":\"datatdnrxrmhewdfua\"},\"\":{\"pdghqsa\":\"datapr\",\"b\":\"datab\",\"xbpqzqaavxxv\":\"datajedyyengnh\",\"ptxdrajihqwfrt\":\"datass\"}},\"staging\":{\"linkedService\":{\"referenceName\":\"to\",\"parameters\":{\"brent\":\"datadevkntyguqsq\"}},\"folderPath\":\"dataamijgq\"},\"integrationRuntime\":{\"referenceName\":\"zvvwyhszewh\",\"parameters\":{\"vwwbxnxlhdindc\":\"datauoibwkiwytskpbre\",\"lie\":\"datatiqacnyc\"}},\"compute\":{\"computeType\":\"datarevw\",\"coreCount\":\"datawtfohcylvj\"},\"traceLevel\":\"datafznae\",\"continueOnError\":\"datayuxrufwdbimj\",\"runConcurrently\":\"dataphyxlxvo\",\"sourceStagingConcurrency\":\"datauwdesyttkaufabtp\"}")
            .toObject(ExecuteDataFlowActivityTypeProperties.class);
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("ytkeqjviawspvbcm", model.dataFlow().referenceName());
        Assertions.assertEquals("to", model.staging().linkedService().referenceName());
        Assertions.assertEquals("zvvwyhszewh", model.integrationRuntime().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecuteDataFlowActivityTypeProperties model = new ExecuteDataFlowActivityTypeProperties()
            .withDataFlow(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                .withReferenceName("ytkeqjviawspvbcm")
                .withDatasetParameters("dataeelmiuprfq")
                .withParameters(mapOf("gkfojnqmdtuyi", "datatdnrxrmhewdfua"))
                .withAdditionalProperties(mapOf()))
            .withStaging(new DataFlowStagingInfo().withLinkedService(
                new LinkedServiceReference().withReferenceName("to").withParameters(mapOf("brent", "datadevkntyguqsq")))
                .withFolderPath("dataamijgq"))
            .withIntegrationRuntime(new IntegrationRuntimeReference().withReferenceName("zvvwyhszewh")
                .withParameters(mapOf("vwwbxnxlhdindc", "datauoibwkiwytskpbre", "lie", "datatiqacnyc")))
            .withCompute(new ExecuteDataFlowActivityTypePropertiesCompute().withComputeType("datarevw")
                .withCoreCount("datawtfohcylvj"))
            .withTraceLevel("datafznae")
            .withContinueOnError("datayuxrufwdbimj")
            .withRunConcurrently("dataphyxlxvo")
            .withSourceStagingConcurrency("datauwdesyttkaufabtp");
        model = BinaryData.fromObject(model).toObject(ExecuteDataFlowActivityTypeProperties.class);
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("ytkeqjviawspvbcm", model.dataFlow().referenceName());
        Assertions.assertEquals("to", model.staging().linkedService().referenceName());
        Assertions.assertEquals("zvvwyhszewh", model.integrationRuntime().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
