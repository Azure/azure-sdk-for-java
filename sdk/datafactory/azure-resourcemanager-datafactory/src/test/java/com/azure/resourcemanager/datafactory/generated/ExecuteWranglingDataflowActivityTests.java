// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecuteDataFlowActivityTypePropertiesCompute;
import com.azure.resourcemanager.datafactory.models.ExecuteWranglingDataflowActivity;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySink;
import com.azure.resourcemanager.datafactory.models.PowerQuerySinkMapping;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecuteWranglingDataflowActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecuteWranglingDataflowActivity model = BinaryData.fromString(
            "{\"type\":\"gtqqrmibmnmxspzt\",\"typeProperties\":{\"sinks\":{\"uqi\":{\"script\":\"gxdxqefuzubn\",\"schemaLinkedService\":{\"referenceName\":\"iminccnubynrh\",\"parameters\":{\"hxtbcqjvyzotxkhy\":\"datagfzhbtzuddqt\",\"mqrioa\":\"dataj\",\"rglmjrufwqpnmcw\":\"datazmrwlsrjjaj\",\"dzkbky\":\"datasfpyt\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"ztwwkvwpbdo\",\"parameters\":{\"jzrzv\":\"datarmp\",\"igzwhfeq\":\"dataupnfrlygyjrlu\"}},\"name\":\"l\",\"description\":\"l\",\"dataset\":{\"referenceName\":\"zzkgebey\",\"parameters\":{\"azfjbxhnahgbloea\":\"datagyksgntgiw\",\"gbyxpma\":\"datawidumilxi\"}},\"linkedService\":{\"referenceName\":\"rn\",\"parameters\":{\"faf\":\"datahviqwfctiy\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"nsktdgbombnc\",\"datasetParameters\":\"dataxkcpqw\",\"parameters\":{\"ijobcpruommtuca\":\"dataqvlcunnb\",\"a\":\"datagrlvkdaphzemn\",\"qbwim\":\"datatkbzz\"},\"\":{\"oukfimonreu\":\"datamgocalgrakmw\",\"hpov\":\"datacrcsdaip\",\"cxtqqpfgjny\":\"datatvotbybcxgrrlzdn\"}}},\"nhlsf\":{\"script\":\"iujsjngs\",\"schemaLinkedService\":{\"referenceName\":\"yvnpuclqtdca\",\"parameters\":{\"cl\":\"datazeckpgpjkczkcdlz\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"anabzycxvifkzs\",\"parameters\":{\"inlqkzee\":\"datal\",\"kwxb\":\"datazelmmwmdhmd\"}},\"name\":\"vmc\",\"description\":\"nmnojfmztpwu\",\"dataset\":{\"referenceName\":\"untvyeyebw\",\"parameters\":{\"eyuirrrxrftfamo\":\"dataonqjnpkofjfus\"}},\"linkedService\":{\"referenceName\":\"vjm\",\"parameters\":{\"cowmukzcrp\":\"datalphqtq\",\"zbeutqfx\":\"datalgzctfnlakl\",\"wticu\":\"dataxzwiehqvvbgwxp\",\"lzhujcx\":\"datakmzubdmcdfvw\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"aqolnfeywbpenq\",\"datasetParameters\":\"datapzwwsfrpbwvfjdg\",\"parameters\":{\"jyulo\":\"dataycxmct\",\"lkmjeekbmwizis\":\"datapulwcxmxf\",\"leaotaakcy\":\"datatmxyrsnmwiy\"},\"\":{\"jnd\":\"dataosnbwbcnfo\",\"oubtehdccghdzq\":\"datawwnlg\",\"otqsp\":\"datawlixh\"}}},\"xlkloqpwsaqcr\":{\"script\":\"jwajsbqyt\",\"schemaLinkedService\":{\"referenceName\":\"jvmjhuvuadpd\",\"parameters\":{\"uwaqiomdlp\":\"datawbheijmwaj\",\"wowmwrn\":\"datakfslm\",\"obg\":\"datauwgrtvyw\",\"evyyppaycasch\":\"datavhdb\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"midkd\",\"parameters\":{\"xxcvugarykbyuuk\":\"dataptessvmd\",\"csevqtd\":\"datassretugorcz\"}},\"name\":\"ktogmcblw\",\"description\":\"vnisin\",\"dataset\":{\"referenceName\":\"cwwpuka\",\"parameters\":{\"hngaczgg\":\"dataj\",\"tok\":\"dataiaqmuptnhuybt\",\"ljzlnre\":\"datahyozxotwral\",\"mjschcxud\":\"datalwfgyabglsar\"}},\"linkedService\":{\"referenceName\":\"mhhsumzfvrakpql\",\"parameters\":{\"holjjxilbsbh\":\"dataiudveoibeh\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ucwdc\",\"datasetParameters\":\"datakwwuljveu\",\"parameters\":{\"fmvauhnh\":\"dataxrsxb\",\"iwvejwtzkiid\":\"datanswlfuukildlayt\",\"ytaeallsxfza\":\"datasskl\"},\"\":{\"gxrfrmdpwpzuxoy\":\"datasbzmoqxjynhmx\"}}},\"vfrtmwyezr\":{\"script\":\"kgjdn\",\"schemaLinkedService\":{\"referenceName\":\"wpvrwec\",\"parameters\":{\"jwpejtszj\":\"dataiaognmanrzjprlq\",\"vwvycvnow\":\"datavj\",\"xwwhusrodrom\":\"dataclijmdl\",\"fw\":\"dataz\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"ocwkwmqroqldacx\",\"parameters\":{\"ssukvsgkzxznctx\":\"dataq\",\"jfcaqpkpvdiir\":\"datacznszmjz\"}},\"name\":\"xahxysl\",\"description\":\"okfomakmi\",\"dataset\":{\"referenceName\":\"hduflajsgut\",\"parameters\":{\"firaoytkkq\":\"databvxyqprchk\",\"dzfypdsrfpihvij\":\"dataaazvmnv\"}},\"linkedService\":{\"referenceName\":\"tkpo\",\"parameters\":{\"njduyotqb\":\"dataoyjjfx\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"xbtuxm\",\"datasetParameters\":\"datarixolbzjlqrps\",\"parameters\":{\"d\":\"datastcoibi\"},\"\":{\"oemcajjazo\":\"dataafenwvvxcah\",\"couilgtbslagtmki\":\"datakwhgnjhxydx\",\"zlmztkzgr\":\"datalcgejmjpvgv\",\"zdptoytcnxgq\":\"dataaqytqmc\"}}}},\"queries\":[{\"queryName\":\"awpbif\",\"dataflowSinks\":[{\"script\":\"iocvjmyinpl\",\"schemaLinkedService\":{\"referenceName\":\"ejhxfjlecbbabi\"},\"rejectedDataLinkedService\":{\"referenceName\":\"alsrxzatlzwr\"},\"name\":\"joqcyowzwshsgrea\",\"description\":\"wsdirxpr\",\"dataset\":{\"referenceName\":\"gzpnrmmjyv\"},\"linkedService\":{\"referenceName\":\"tjuwobwskyjlte\"},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"vrpvhivvlmzcvpo\"}},{\"script\":\"vfcwedyz\",\"schemaLinkedService\":{\"referenceName\":\"oezgibfisfmc\"},\"rejectedDataLinkedService\":{\"referenceName\":\"rhgcuejtxxlkokt\"},\"name\":\"clpvwtwboxgrv\",\"description\":\"voq\",\"dataset\":{\"referenceName\":\"quwkuszllognl\"},\"linkedService\":{\"referenceName\":\"hvllenygimnfvq\"},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"zo\"}},{\"script\":\"lwdh\",\"schemaLinkedService\":{\"referenceName\":\"vhflbchzoboee\"},\"rejectedDataLinkedService\":{\"referenceName\":\"kwdtuwbrw\"},\"name\":\"yqtyuywzccumk\",\"description\":\"ygrkcolvitb\",\"dataset\":{\"referenceName\":\"oxrbotzvrgo\"},\"linkedService\":{\"referenceName\":\"ayjselrfqstbfuqm\"},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"fvbeyugggfshn\"}}]},{\"queryName\":\"ken\",\"dataflowSinks\":[{\"script\":\"jqrxyaa\",\"schemaLinkedService\":{\"referenceName\":\"rkxyjsuappd\"},\"rejectedDataLinkedService\":{\"referenceName\":\"jiguusbw\"},\"name\":\"syoybjtzdgzt\",\"description\":\"qiilfovmcjchbof\",\"dataset\":{\"referenceName\":\"vqvjfszvece\"},\"linkedService\":{\"referenceName\":\"ptez\"},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"erurcjgkauyzbrdi\"}}]}],\"dataFlow\":{\"type\":\"DataFlowReference\",\"referenceName\":\"bkgxqsbwepduyqx\",\"datasetParameters\":\"dataxarddbnqyayl\",\"parameters\":{\"rtpxwgt\":\"datatwd\"},\"\":{\"xndnbzhs\":\"databjihz\",\"stytexu\":\"datadnljpouz\"}},\"staging\":{\"linkedService\":{\"referenceName\":\"qllqn\",\"parameters\":{\"bytshsathk\":\"datafufleioywlcl\"}},\"folderPath\":\"datawqljnuayp\"},\"integrationRuntime\":{\"referenceName\":\"z\",\"parameters\":{\"gytquktcqggxdnpp\":\"dataeqajipnpwomjlps\"}},\"compute\":{\"computeType\":\"dataqag\",\"coreCount\":\"datawoozlfliir\"},\"traceLevel\":\"datanglfcrtkpfsjwtq\",\"continueOnError\":\"dataqeofjoqjmlz\",\"runConcurrently\":\"dataizjssfwoj\",\"sourceStagingConcurrency\":\"datagmhzrjsb\"},\"policy\":{\"timeout\":\"dataitypashvjriniz\",\"retry\":\"dataadus\",\"retryIntervalInSeconds\":818396335,\"secureInput\":true,\"secureOutput\":false,\"\":{\"vgqtvg\":\"datawcxyagidyansnu\",\"vrdsv\":\"dataperbnbsd\"}},\"name\":\"rvzbmhmkoxsavzng\",\"description\":\"wymeb\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"qtpwhicnnanqzrml\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Succeeded\"],\"\":{\"nwjuqzj\":\"datadwxlstpuzx\",\"peauhldqbwkxe\":\"datahzd\",\"ygoijhciynp\":\"datanroewwrhvdwrowe\"}},{\"activity\":\"viivczupcl\",\"dependencyConditions\":[\"Succeeded\",\"Failed\"],\"\":{\"tsnnsxouz\":\"datafh\"}},{\"activity\":\"mudyuoholy\",\"dependencyConditions\":[\"Failed\"],\"\":{\"ttclnhoituk\":\"dataxlyfrrczhnvtih\"}}],\"userProperties\":[{\"name\":\"orepbqkmylj\",\"value\":\"dataicjlrl\"},{\"name\":\"qbavplqkcsr\",\"value\":\"datavvniwqpc\"},{\"name\":\"yo\",\"value\":\"datajikv\"},{\"name\":\"kpu\",\"value\":\"datatjcfyxyrkpclvp\"}],\"\":{\"gkgnuh\":\"datayckzshvcalzlk\"}}")
            .toObject(ExecuteWranglingDataflowActivity.class);
        Assertions.assertEquals("rvzbmhmkoxsavzng", model.name());
        Assertions.assertEquals("wymeb", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("qtpwhicnnanqzrml", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("orepbqkmylj", model.userProperties().get(0).name());
        Assertions.assertEquals(818396335, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("l", model.sinks().get("uqi").name());
        Assertions.assertEquals("l", model.sinks().get("uqi").description());
        Assertions.assertEquals("zzkgebey", model.sinks().get("uqi").dataset().referenceName());
        Assertions.assertEquals("rn", model.sinks().get("uqi").linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get("uqi").flowlet().type());
        Assertions.assertEquals("nsktdgbombnc", model.sinks().get("uqi").flowlet().referenceName());
        Assertions.assertEquals("iminccnubynrh", model.sinks().get("uqi").schemaLinkedService().referenceName());
        Assertions.assertEquals("ztwwkvwpbdo", model.sinks().get("uqi").rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("gxdxqefuzubn", model.sinks().get("uqi").script());
        Assertions.assertEquals("awpbif", model.queries().get(0).queryName());
        Assertions.assertEquals("joqcyowzwshsgrea", model.queries().get(0).dataflowSinks().get(0).name());
        Assertions.assertEquals("wsdirxpr", model.queries().get(0).dataflowSinks().get(0).description());
        Assertions.assertEquals("gzpnrmmjyv", model.queries().get(0).dataflowSinks().get(0).dataset().referenceName());
        Assertions.assertEquals("tjuwobwskyjlte",
            model.queries().get(0).dataflowSinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.queries().get(0).dataflowSinks().get(0).flowlet().type());
        Assertions.assertEquals("vrpvhivvlmzcvpo",
            model.queries().get(0).dataflowSinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("ejhxfjlecbbabi",
            model.queries().get(0).dataflowSinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("alsrxzatlzwr",
            model.queries().get(0).dataflowSinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("iocvjmyinpl", model.queries().get(0).dataflowSinks().get(0).script());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("bkgxqsbwepduyqx", model.dataFlow().referenceName());
        Assertions.assertEquals("qllqn", model.staging().linkedService().referenceName());
        Assertions.assertEquals("z", model.integrationRuntime().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecuteWranglingDataflowActivity model = new ExecuteWranglingDataflowActivity().withName("rvzbmhmkoxsavzng")
            .withDescription("wymeb")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("qtpwhicnnanqzrml")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.COMPLETED,
                        DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("viivczupcl")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("mudyuoholy")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("orepbqkmylj").withValue("dataicjlrl"),
                new UserProperty().withName("qbavplqkcsr").withValue("datavvniwqpc"),
                new UserProperty().withName("yo").withValue("datajikv"),
                new UserProperty().withName("kpu").withValue("datatjcfyxyrkpclvp")))
            .withPolicy(new ActivityPolicy().withTimeout("dataitypashvjriniz")
                .withRetry("dataadus")
                .withRetryIntervalInSeconds(818396335)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withSinks(mapOf("uqi", new PowerQuerySink().withName("l")
                .withDescription("l")
                .withDataset(new DatasetReference().withReferenceName("zzkgebey")
                    .withParameters(mapOf("azfjbxhnahgbloea", "datagyksgntgiw", "gbyxpma", "datawidumilxi")))
                .withLinkedService(
                    new LinkedServiceReference().withReferenceName("rn").withParameters(mapOf("faf", "datahviqwfctiy")))
                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                    .withReferenceName("nsktdgbombnc")
                    .withDatasetParameters("dataxkcpqw")
                    .withParameters(
                        mapOf("ijobcpruommtuca", "dataqvlcunnb", "a", "datagrlvkdaphzemn", "qbwim", "datatkbzz"))
                    .withAdditionalProperties(mapOf()))
                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("iminccnubynrh")
                    .withParameters(mapOf("hxtbcqjvyzotxkhy", "datagfzhbtzuddqt", "mqrioa", "dataj", "rglmjrufwqpnmcw",
                        "datazmrwlsrjjaj", "dzkbky", "datasfpyt")))
                .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("ztwwkvwpbdo")
                    .withParameters(mapOf("jzrzv", "datarmp", "igzwhfeq", "dataupnfrlygyjrlu")))
                .withScript("gxdxqefuzubn"), "nhlsf",
                new PowerQuerySink().withName("vmc")
                    .withDescription("nmnojfmztpwu")
                    .withDataset(new DatasetReference().withReferenceName("untvyeyebw")
                        .withParameters(mapOf("eyuirrrxrftfamo", "dataonqjnpkofjfus")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("vjm")
                        .withParameters(mapOf("cowmukzcrp", "datalphqtq", "zbeutqfx", "datalgzctfnlakl", "wticu",
                            "dataxzwiehqvvbgwxp", "lzhujcx", "datakmzubdmcdfvw")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("aqolnfeywbpenq")
                        .withDatasetParameters("datapzwwsfrpbwvfjdg")
                        .withParameters(mapOf("jyulo", "dataycxmct", "lkmjeekbmwizis", "datapulwcxmxf", "leaotaakcy",
                            "datatmxyrsnmwiy"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("yvnpuclqtdca")
                        .withParameters(mapOf("cl", "datazeckpgpjkczkcdlz")))
                    .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("anabzycxvifkzs")
                        .withParameters(mapOf("inlqkzee", "datal", "kwxb", "datazelmmwmdhmd")))
                    .withScript("iujsjngs"),
                "xlkloqpwsaqcr",
                new PowerQuerySink().withName("ktogmcblw")
                    .withDescription("vnisin")
                    .withDataset(new DatasetReference().withReferenceName("cwwpuka")
                        .withParameters(mapOf("hngaczgg", "dataj", "tok", "dataiaqmuptnhuybt", "ljzlnre",
                            "datahyozxotwral", "mjschcxud", "datalwfgyabglsar")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("mhhsumzfvrakpql")
                        .withParameters(mapOf("holjjxilbsbh", "dataiudveoibeh")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("ucwdc")
                        .withDatasetParameters("datakwwuljveu")
                        .withParameters(mapOf("fmvauhnh", "dataxrsxb", "iwvejwtzkiid", "datanswlfuukildlayt",
                            "ytaeallsxfza", "datasskl"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("jvmjhuvuadpd")
                        .withParameters(mapOf("uwaqiomdlp", "datawbheijmwaj", "wowmwrn", "datakfslm", "obg",
                            "datauwgrtvyw", "evyyppaycasch", "datavhdb")))
                    .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("midkd")
                        .withParameters(mapOf("xxcvugarykbyuuk", "dataptessvmd", "csevqtd", "datassretugorcz")))
                    .withScript("jwajsbqyt"),
                "vfrtmwyezr",
                new PowerQuerySink().withName("xahxysl")
                    .withDescription("okfomakmi")
                    .withDataset(new DatasetReference().withReferenceName("hduflajsgut")
                        .withParameters(mapOf("firaoytkkq", "databvxyqprchk", "dzfypdsrfpihvij", "dataaazvmnv")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("tkpo")
                        .withParameters(mapOf("njduyotqb", "dataoyjjfx")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("xbtuxm")
                        .withDatasetParameters("datarixolbzjlqrps")
                        .withParameters(mapOf("d", "datastcoibi"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("wpvrwec")
                        .withParameters(mapOf("jwpejtszj", "dataiaognmanrzjprlq", "vwvycvnow", "datavj", "xwwhusrodrom",
                            "dataclijmdl", "fw", "dataz")))
                    .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("ocwkwmqroqldacx")
                        .withParameters(mapOf("ssukvsgkzxznctx", "dataq", "jfcaqpkpvdiir", "datacznszmjz")))
                    .withScript("kgjdn")))
            .withQueries(Arrays.asList(
                new PowerQuerySinkMapping().withQueryName("awpbif")
                    .withDataflowSinks(Arrays.asList(
                        new PowerQuerySink().withName("joqcyowzwshsgrea")
                            .withDescription("wsdirxpr")
                            .withDataset(new DatasetReference().withReferenceName("gzpnrmmjyv"))
                            .withLinkedService(new LinkedServiceReference().withReferenceName("tjuwobwskyjlte"))
                            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                .withReferenceName("vrpvhivvlmzcvpo")
                                .withAdditionalProperties(mapOf()))
                            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ejhxfjlecbbabi"))
                            .withRejectedDataLinkedService(
                                new LinkedServiceReference().withReferenceName("alsrxzatlzwr"))
                            .withScript("iocvjmyinpl"),
                        new PowerQuerySink().withName("clpvwtwboxgrv")
                            .withDescription("voq")
                            .withDataset(new DatasetReference().withReferenceName("quwkuszllognl"))
                            .withLinkedService(new LinkedServiceReference().withReferenceName("hvllenygimnfvq"))
                            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                .withReferenceName("zo")
                                .withAdditionalProperties(mapOf()))
                            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("oezgibfisfmc"))
                            .withRejectedDataLinkedService(
                                new LinkedServiceReference().withReferenceName("rhgcuejtxxlkokt"))
                            .withScript("vfcwedyz"),
                        new PowerQuerySink().withName("yqtyuywzccumk")
                            .withDescription("ygrkcolvitb")
                            .withDataset(new DatasetReference().withReferenceName("oxrbotzvrgo"))
                            .withLinkedService(new LinkedServiceReference().withReferenceName("ayjselrfqstbfuqm"))
                            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                .withReferenceName("fvbeyugggfshn")
                                .withAdditionalProperties(mapOf()))
                            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("vhflbchzoboee"))
                            .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("kwdtuwbrw"))
                            .withScript("lwdh"))),
                new PowerQuerySinkMapping().withQueryName("ken")
                    .withDataflowSinks(Arrays.asList(new PowerQuerySink().withName("syoybjtzdgzt")
                        .withDescription("qiilfovmcjchbof")
                        .withDataset(new DatasetReference().withReferenceName("vqvjfszvece"))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("ptez"))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("erurcjgkauyzbrdi")
                            .withAdditionalProperties(mapOf()))
                        .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("rkxyjsuappd"))
                        .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("jiguusbw"))
                        .withScript("jqrxyaa")))))
            .withDataFlow(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                .withReferenceName("bkgxqsbwepduyqx")
                .withDatasetParameters("dataxarddbnqyayl")
                .withParameters(mapOf("rtpxwgt", "datatwd"))
                .withAdditionalProperties(mapOf()))
            .withStaging(
                new DataFlowStagingInfo().withLinkedService(new LinkedServiceReference().withReferenceName("qllqn")
                    .withParameters(mapOf("bytshsathk", "datafufleioywlcl"))).withFolderPath("datawqljnuayp"))
            .withIntegrationRuntime(new IntegrationRuntimeReference().withReferenceName("z")
                .withParameters(mapOf("gytquktcqggxdnpp", "dataeqajipnpwomjlps")))
            .withCompute(new ExecuteDataFlowActivityTypePropertiesCompute().withComputeType("dataqag")
                .withCoreCount("datawoozlfliir"))
            .withTraceLevel("datanglfcrtkpfsjwtq")
            .withContinueOnError("dataqeofjoqjmlz")
            .withRunConcurrently("dataizjssfwoj")
            .withSourceStagingConcurrency("datagmhzrjsb");
        model = BinaryData.fromObject(model).toObject(ExecuteWranglingDataflowActivity.class);
        Assertions.assertEquals("rvzbmhmkoxsavzng", model.name());
        Assertions.assertEquals("wymeb", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("qtpwhicnnanqzrml", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("orepbqkmylj", model.userProperties().get(0).name());
        Assertions.assertEquals(818396335, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("l", model.sinks().get("uqi").name());
        Assertions.assertEquals("l", model.sinks().get("uqi").description());
        Assertions.assertEquals("zzkgebey", model.sinks().get("uqi").dataset().referenceName());
        Assertions.assertEquals("rn", model.sinks().get("uqi").linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get("uqi").flowlet().type());
        Assertions.assertEquals("nsktdgbombnc", model.sinks().get("uqi").flowlet().referenceName());
        Assertions.assertEquals("iminccnubynrh", model.sinks().get("uqi").schemaLinkedService().referenceName());
        Assertions.assertEquals("ztwwkvwpbdo", model.sinks().get("uqi").rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("gxdxqefuzubn", model.sinks().get("uqi").script());
        Assertions.assertEquals("awpbif", model.queries().get(0).queryName());
        Assertions.assertEquals("joqcyowzwshsgrea", model.queries().get(0).dataflowSinks().get(0).name());
        Assertions.assertEquals("wsdirxpr", model.queries().get(0).dataflowSinks().get(0).description());
        Assertions.assertEquals("gzpnrmmjyv", model.queries().get(0).dataflowSinks().get(0).dataset().referenceName());
        Assertions.assertEquals("tjuwobwskyjlte",
            model.queries().get(0).dataflowSinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.queries().get(0).dataflowSinks().get(0).flowlet().type());
        Assertions.assertEquals("vrpvhivvlmzcvpo",
            model.queries().get(0).dataflowSinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("ejhxfjlecbbabi",
            model.queries().get(0).dataflowSinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("alsrxzatlzwr",
            model.queries().get(0).dataflowSinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("iocvjmyinpl", model.queries().get(0).dataflowSinks().get(0).script());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("bkgxqsbwepduyqx", model.dataFlow().referenceName());
        Assertions.assertEquals("qllqn", model.staging().linkedService().referenceName());
        Assertions.assertEquals("z", model.integrationRuntime().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
