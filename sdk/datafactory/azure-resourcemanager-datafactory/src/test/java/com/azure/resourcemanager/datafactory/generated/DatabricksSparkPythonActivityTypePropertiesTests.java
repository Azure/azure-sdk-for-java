// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.DatabricksSparkPythonActivityTypeProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class DatabricksSparkPythonActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatabricksSparkPythonActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"pythonFile\":\"datacgmfklqswwdbs\",\"parameters\":[\"dataysedqrbevobqrwng\"],\"libraries\":[{\"ycou\":\"dataquzxmtmsyi\",\"sdjkrosq\":\"dataks\",\"jgyjoklngjsglz\":\"datavffrncsw\",\"wsqdnasjup\":\"datai\"},{\"zbdtvrg\":\"dataakks\",\"iotvfcbgffd\":\"dataebvqslikeuqv\"},{\"lixhapvwacwrc\":\"dataffatyqawtfyzqop\"}]}")
                .toObject(DatabricksSparkPythonActivityTypeProperties.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatabricksSparkPythonActivityTypeProperties model =
            new DatabricksSparkPythonActivityTypeProperties()
                .withPythonFile("datacgmfklqswwdbs")
                .withParameters(Arrays.asList("dataysedqrbevobqrwng"))
                .withLibraries(
                    Arrays
                        .asList(
                            mapOf(
                                "ycou",
                                "dataquzxmtmsyi",
                                "sdjkrosq",
                                "dataks",
                                "jgyjoklngjsglz",
                                "datavffrncsw",
                                "wsqdnasjup",
                                "datai"),
                            mapOf("zbdtvrg", "dataakks", "iotvfcbgffd", "dataebvqslikeuqv"),
                            mapOf("lixhapvwacwrc", "dataffatyqawtfyzqop")));
        model = BinaryData.fromObject(model).toObject(DatabricksSparkPythonActivityTypeProperties.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
