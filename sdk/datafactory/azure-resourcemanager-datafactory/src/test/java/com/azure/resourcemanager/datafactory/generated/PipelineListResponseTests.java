// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.PipelineResourceInner;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineElapsedTimeMetricPolicy;
import com.azure.resourcemanager.datafactory.models.PipelineFolder;
import com.azure.resourcemanager.datafactory.models.PipelineListResponse;
import com.azure.resourcemanager.datafactory.models.PipelinePolicy;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.VariableSpecification;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PipelineListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PipelineListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"description\":\"rsbrgzdwm\",\"activities\":[{\"type\":\"Activity\",\"name\":\"ypqwdxggiccc\",\"description\":\"qhuexm\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"lzywemhzrncsdtc\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"iypbsfgytgusl\",\"value\":\"dataeadcygqukyhejhz\"},{\"name\":\"sx\",\"value\":\"datafpel\"}],\"\":{\"srp\":\"datapv\"}},{\"type\":\"Activity\",\"name\":\"vu\",\"description\":\"raehtwdwrft\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"dl\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"hfwpracstwit\",\"value\":\"datakhevxccedc\"},{\"name\":\"nmdyodnwzxl\",\"value\":\"datajc\"},{\"name\":\"nhltiugcxn\",\"value\":\"datavvwxqi\"},{\"name\":\"y\",\"value\":\"dataunyowxwl\"}],\"\":{\"acizsjqlhkrr\":\"datarkvfgbvfvpdbo\",\"hvxndzwmkrefajpj\":\"databdeibqipqk\",\"yhgbijtjivfx\":\"datarwkq\",\"stawfsdjpvkv\":\"datasjabibs\"}},{\"type\":\"Activity\",\"name\":\"bjxbkzbzk\",\"description\":\"ncj\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"kakmokzh\",\"dependencyConditions\":[]},{\"activity\":\"jk\",\"dependencyConditions\":[]},{\"activity\":\"ffhmouwqlgzr\",\"dependencyConditions\":[]},{\"activity\":\"zeeyebi\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"ayuhqlbjbsy\",\"value\":\"databqwrvtldgm\"},{\"name\":\"pgvmpipaslthaqfx\",\"value\":\"datasmwutwbdsrezpd\"},{\"name\":\"hneuyowqkd\",\"value\":\"dataytisibir\"}],\"\":{\"lfzxiavrmbzonoki\":\"dataikpzimejza\",\"rgz\":\"datarjqc\"}},{\"type\":\"Activity\",\"name\":\"frl\",\"description\":\"szrnwo\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"pj\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"bt\",\"value\":\"datah\"},{\"name\":\"lsj\",\"value\":\"datadhszfjv\"},{\"name\":\"bgofeljag\",\"value\":\"dataqmqhldvriii\"}],\"\":{\"hfkvtvsexsowuel\":\"dataal\",\"wws\":\"dataqhhahhxvrhmzkwpj\",\"qxujxukndxd\":\"dataughftqsx\",\"syqtfi\":\"datagrjguufzd\"}}],\"parameters\":{\"szqzudphqamv\":{\"type\":\"Float\",\"defaultValue\":\"datatzingamvpph\"},\"nvyq\":{\"type\":\"Object\",\"defaultValue\":\"datawynwcvtbvkayhm\"},\"cjaesgvvs\":{\"type\":\"Float\",\"defaultValue\":\"datakzwpcnpw\"},\"wygzlvdnkfxusem\":{\"type\":\"Int\",\"defaultValue\":\"dataajguqf\"}},\"variables\":{\"pfcqdp\":{\"type\":\"Array\",\"defaultValue\":\"datauh\"},\"celve\":{\"type\":\"String\",\"defaultValue\":\"dataqvpsvuoymg\"},\"kerqwkyh\":{\"type\":\"Array\",\"defaultValue\":\"datapqlmfe\"},\"pc\":{\"type\":\"String\",\"defaultValue\":\"dataopgxedkowepb\"}},\"concurrency\":1318988279,\"annotations\":[\"dataccsnjvcdwxlpq\",\"datakftnkhtjsyin\",\"datawfqatmtd\",\"datatmdvypgikdgs\"],\"runDimensions\":{\"yuzhlhkjoqrvq\":\"datakbir\"},\"folder\":{\"name\":\"t\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"datavgoup\"}}},\"name\":\"iibfggj\",\"type\":\"olvrw\",\"etag\":\"v\",\"\":{\"vjayvblmhvkzu\":\"datagllqwjy\"},\"id\":\"xvvy\"}],\"nextLink\":\"s\"}")
            .toObject(PipelineListResponse.class);
        Assertions.assertEquals("xvvy", model.value().get(0).id());
        Assertions.assertEquals("rsbrgzdwm", model.value().get(0).description());
        Assertions.assertEquals("ypqwdxggiccc", model.value().get(0).activities().get(0).name());
        Assertions.assertEquals("qhuexm", model.value().get(0).activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.value().get(0).activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED,
            model.value().get(0).activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("lzywemhzrncsdtc",
            model.value().get(0).activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("iypbsfgytgusl",
            model.value().get(0).activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.FLOAT, model.value().get(0).parameters().get("szqzudphqamv").type());
        Assertions.assertEquals(VariableType.ARRAY, model.value().get(0).variables().get("pfcqdp").type());
        Assertions.assertEquals(1318988279, model.value().get(0).concurrency());
        Assertions.assertEquals("t", model.value().get(0).folder().name());
        Assertions.assertEquals("s", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PipelineListResponse model = new PipelineListResponse()
            .withValue(Arrays.asList(new PipelineResourceInner().withId("xvvy")
                .withDescription("rsbrgzdwm")
                .withActivities(Arrays.asList(
                    new Activity().withName("ypqwdxggiccc")
                        .withDescription("qhuexm")
                        .withState(ActivityState.INACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                        .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("lzywemhzrncsdtc")
                            .withDependencyConditions(Arrays.asList())
                            .withAdditionalProperties(mapOf())))
                        .withUserProperties(
                            Arrays.asList(new UserProperty().withName("iypbsfgytgusl").withValue("dataeadcygqukyhejhz"),
                                new UserProperty().withName("sx").withValue("datafpel")))
                        .withAdditionalProperties(mapOf("type", "Activity")),
                    new Activity().withName("vu")
                        .withDescription("raehtwdwrft")
                        .withState(ActivityState.ACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                        .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("dl")
                            .withDependencyConditions(Arrays.asList())
                            .withAdditionalProperties(mapOf())))
                        .withUserProperties(
                            Arrays.asList(new UserProperty().withName("hfwpracstwit").withValue("datakhevxccedc"),
                                new UserProperty().withName("nmdyodnwzxl").withValue("datajc"),
                                new UserProperty().withName("nhltiugcxn").withValue("datavvwxqi"),
                                new UserProperty().withName("y").withValue("dataunyowxwl")))
                        .withAdditionalProperties(mapOf("type", "Activity")),
                    new Activity().withName("bjxbkzbzk")
                        .withDescription("ncj")
                        .withState(ActivityState.INACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                        .withDependsOn(Arrays.asList(
                            new ActivityDependency().withActivity("kakmokzh")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("jk")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("ffhmouwqlgzr")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("zeeyebi")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf())))
                        .withUserProperties(
                            Arrays.asList(new UserProperty().withName("ayuhqlbjbsy").withValue("databqwrvtldgm"),
                                new UserProperty().withName("pgvmpipaslthaqfx").withValue("datasmwutwbdsrezpd"),
                                new UserProperty().withName("hneuyowqkd").withValue("dataytisibir")))
                        .withAdditionalProperties(mapOf("type", "Activity")),
                    new Activity().withName("frl")
                        .withDescription("szrnwo")
                        .withState(ActivityState.ACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                        .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("pj")
                            .withDependencyConditions(Arrays.asList())
                            .withAdditionalProperties(mapOf())))
                        .withUserProperties(Arrays.asList(new UserProperty().withName("bt").withValue("datah"),
                            new UserProperty().withName("lsj").withValue("datadhszfjv"),
                            new UserProperty().withName("bgofeljag").withValue("dataqmqhldvriii")))
                        .withAdditionalProperties(mapOf("type", "Activity"))))
                .withParameters(mapOf("szqzudphqamv",
                    new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datatzingamvpph"),
                    "nvyq",
                    new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datawynwcvtbvkayhm"),
                    "cjaesgvvs",
                    new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datakzwpcnpw"),
                    "wygzlvdnkfxusem",
                    new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataajguqf")))
                .withVariables(mapOf("pfcqdp",
                    new VariableSpecification().withType(VariableType.ARRAY).withDefaultValue("datauh"), "celve",
                    new VariableSpecification().withType(VariableType.STRING).withDefaultValue("dataqvpsvuoymg"),
                    "kerqwkyh", new VariableSpecification().withType(VariableType.ARRAY).withDefaultValue("datapqlmfe"),
                    "pc",
                    new VariableSpecification().withType(VariableType.STRING).withDefaultValue("dataopgxedkowepb")))
                .withConcurrency(1318988279)
                .withAnnotations(
                    Arrays.asList("dataccsnjvcdwxlpq", "datakftnkhtjsyin", "datawfqatmtd", "datatmdvypgikdgs"))
                .withRunDimensions(mapOf("yuzhlhkjoqrvq", "datakbir"))
                .withFolder(new PipelineFolder().withName("t"))
                .withPolicy(new PipelinePolicy()
                    .withElapsedTimeMetric(new PipelineElapsedTimeMetricPolicy().withDuration("datavgoup")))
                .withAdditionalProperties(mapOf("name", "iibfggj", "etag", "v", "type", "olvrw"))))
            .withNextLink("s");
        model = BinaryData.fromObject(model).toObject(PipelineListResponse.class);
        Assertions.assertEquals("xvvy", model.value().get(0).id());
        Assertions.assertEquals("rsbrgzdwm", model.value().get(0).description());
        Assertions.assertEquals("ypqwdxggiccc", model.value().get(0).activities().get(0).name());
        Assertions.assertEquals("qhuexm", model.value().get(0).activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.value().get(0).activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED,
            model.value().get(0).activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("lzywemhzrncsdtc",
            model.value().get(0).activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("iypbsfgytgusl",
            model.value().get(0).activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.FLOAT, model.value().get(0).parameters().get("szqzudphqamv").type());
        Assertions.assertEquals(VariableType.ARRAY, model.value().get(0).variables().get("pfcqdp").type());
        Assertions.assertEquals(1318988279, model.value().get(0).concurrency());
        Assertions.assertEquals("t", model.value().get(0).folder().name());
        Assertions.assertEquals("s", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
