// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.PipelineResourceInner;
import com.azure.resourcemanager.datafactory.models.PipelineListResponse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PipelineListResponseTests {
    @Test
    public void testDeserialize() {
        PipelineListResponse model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"description\":\"fmisg\",\"activities\":[],\"parameters\":{},\"variables\":{},\"concurrency\":85144126,\"annotations\":[],\"runDimensions\":{}},\"name\":\"zbaliourqha\",\"type\":\"uhashsfwx\",\"etag\":\"owzxcu\",\"\":{},\"id\":\"ooxdjebwpuc\"},{\"properties\":{\"description\":\"fvovbvmeuecivy\",\"activities\":[],\"parameters\":{},\"variables\":{},\"concurrency\":1628145340,\"annotations\":[],\"runDimensions\":{}},\"name\":\"jueiotwmcdytd\",\"type\":\"it\",\"etag\":\"rjaw\",\"\":{},\"id\":\"xhniskxfbkpycgk\"},{\"properties\":{\"description\":\"ndnhj\",\"activities\":[],\"parameters\":{},\"variables\":{},\"concurrency\":1064169122,\"annotations\":[],\"runDimensions\":{}},\"name\":\"tdhxujznbmpowuwp\",\"type\":\"qlveualupjmkh\",\"etag\":\"obbc\",\"\":{},\"id\":\"tjrip\"},{\"properties\":{\"description\":\"bpbewtghfgb\",\"activities\":[],\"parameters\":{},\"variables\":{},\"concurrency\":1261477123,\"annotations\":[],\"runDimensions\":{}},\"name\":\"jkbegibtnmxiebww\",\"type\":\"oayqc\",\"etag\":\"rtzju\",\"\":{},\"id\":\"zmh\"}],\"nextLink\":\"ongmtsa\"}")
                .toObject(PipelineListResponse.class);
        Assertions.assertEquals("ooxdjebwpuc", model.value().get(0).id());
        Assertions.assertEquals("fmisg", model.value().get(0).description());
        Assertions.assertEquals(85144126, model.value().get(0).concurrency());
        Assertions.assertEquals("ongmtsa", model.nextLink());
    }

    @Test
    public void testSerialize() {
        PipelineListResponse model =
            new PipelineListResponse()
                .withValue(
                    Arrays
                        .asList(
                            new PipelineResourceInner()
                                .withId("ooxdjebwpuc")
                                .withDescription("fmisg")
                                .withActivities(Arrays.asList())
                                .withParameters(mapOf())
                                .withVariables(mapOf())
                                .withConcurrency(85144126)
                                .withAnnotations(Arrays.asList())
                                .withRunDimensions(mapOf())
                                .withAdditionalProperties(
                                    mapOf("name", "zbaliourqha", "etag", "owzxcu", "type", "uhashsfwx")),
                            new PipelineResourceInner()
                                .withId("xhniskxfbkpycgk")
                                .withDescription("fvovbvmeuecivy")
                                .withActivities(Arrays.asList())
                                .withParameters(mapOf())
                                .withVariables(mapOf())
                                .withConcurrency(1628145340)
                                .withAnnotations(Arrays.asList())
                                .withRunDimensions(mapOf())
                                .withAdditionalProperties(mapOf("name", "jueiotwmcdytd", "etag", "rjaw", "type", "it")),
                            new PipelineResourceInner()
                                .withId("tjrip")
                                .withDescription("ndnhj")
                                .withActivities(Arrays.asList())
                                .withParameters(mapOf())
                                .withVariables(mapOf())
                                .withConcurrency(1064169122)
                                .withAnnotations(Arrays.asList())
                                .withRunDimensions(mapOf())
                                .withAdditionalProperties(
                                    mapOf("name", "tdhxujznbmpowuwp", "etag", "obbc", "type", "qlveualupjmkh")),
                            new PipelineResourceInner()
                                .withId("zmh")
                                .withDescription("bpbewtghfgb")
                                .withActivities(Arrays.asList())
                                .withParameters(mapOf())
                                .withVariables(mapOf())
                                .withConcurrency(1261477123)
                                .withAnnotations(Arrays.asList())
                                .withRunDimensions(mapOf())
                                .withAdditionalProperties(
                                    mapOf("name", "jkbegibtnmxiebww", "etag", "rtzju", "type", "oayqc"))))
                .withNextLink("ongmtsa");
        model = BinaryData.fromObject(model).toObject(PipelineListResponse.class);
        Assertions.assertEquals("ooxdjebwpuc", model.value().get(0).id());
        Assertions.assertEquals("fmisg", model.value().get(0).description());
        Assertions.assertEquals(85144126, model.value().get(0).concurrency());
        Assertions.assertEquals("ongmtsa", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
