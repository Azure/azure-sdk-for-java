// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SnowflakeV2Dataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnowflakeV2DatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeV2Dataset model = BinaryData.fromString(
            "{\"type\":\"SnowflakeV2Table\",\"typeProperties\":{\"schema\":\"datarrhyjxcqcaczzvwa\",\"table\":\"datatt\"},\"description\":\"qyfydql\",\"structure\":\"dataslgyfybdsvkllrz\",\"schema\":\"datahhkbc\",\"linkedServiceName\":{\"referenceName\":\"cazk\",\"parameters\":{\"rmrfyyqjcni\":\"datathprgfwhfzhhr\",\"sddcuqddlda\":\"datazq\",\"ew\":\"datayvfzt\",\"sxjht\":\"datajoj\"}},\"parameters\":{\"trgu\":{\"type\":\"Int\",\"defaultValue\":\"dataocygoyineuaxpmez\"},\"xfoa\":{\"type\":\"Float\",\"defaultValue\":\"dataeo\"},\"xlmndhg\":{\"type\":\"SecureString\",\"defaultValue\":\"dataypz\"},\"vmitn\":{\"type\":\"SecureString\",\"defaultValue\":\"databpjuajzqx\"}},\"annotations\":[\"datahbujysvd\",\"datayy\",\"datadbhatmabtpgn\"],\"folder\":{\"name\":\"tn\"},\"\":{\"hciga\":\"dataew\",\"qxzxtert\":\"datahmdfspkdn\",\"envtol\":\"datazrrwsciclhdw\"}}")
            .toObject(SnowflakeV2Dataset.class);
        Assertions.assertEquals("qyfydql", model.description());
        Assertions.assertEquals("cazk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("trgu").type());
        Assertions.assertEquals("tn", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeV2Dataset model = new SnowflakeV2Dataset().withDescription("qyfydql")
            .withStructure("dataslgyfybdsvkllrz")
            .withSchema("datahhkbc")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("cazk")
                .withParameters(mapOf("rmrfyyqjcni", "datathprgfwhfzhhr", "sddcuqddlda", "datazq", "ew", "datayvfzt",
                    "sxjht", "datajoj")))
            .withParameters(mapOf("trgu",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataocygoyineuaxpmez"),
                "xfoa", new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataeo"),
                "xlmndhg",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("dataypz"), "vmitn",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("databpjuajzqx")))
            .withAnnotations(Arrays.asList("datahbujysvd", "datayy", "datadbhatmabtpgn"))
            .withFolder(new DatasetFolder().withName("tn"))
            .withSchemaTypePropertiesSchema("datarrhyjxcqcaczzvwa")
            .withTable("datatt");
        model = BinaryData.fromObject(model).toObject(SnowflakeV2Dataset.class);
        Assertions.assertEquals("qyfydql", model.description());
        Assertions.assertEquals("cazk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("trgu").type());
        Assertions.assertEquals("tn", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
