// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SnowflakeV2Dataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnowflakeV2DatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeV2Dataset model = BinaryData.fromString(
            "{\"type\":\"SnowflakeV2Table\",\"typeProperties\":{\"schema\":\"datagba\",\"table\":\"datahramq\"},\"description\":\"gqcglmadfztofxvq\",\"structure\":\"datauuagwayfmcer\",\"schema\":\"datafeiqb\",\"linkedServiceName\":{\"referenceName\":\"s\",\"parameters\":{\"ozzjkugpd\":\"datawjipssvnonijcqc\",\"bpwarh\":\"dataqbtokvocuzxl\",\"i\":\"dataettohgpzwxyvtkzb\"}},\"parameters\":{\"wnfhmjusuqnku\":{\"type\":\"Bool\",\"defaultValue\":\"datadd\"},\"qnirmidtvhjcgs\":{\"type\":\"Array\",\"defaultValue\":\"datalxudhek\"}},\"annotations\":[\"dataqygkx\",\"datalfoj\"],\"folder\":{\"name\":\"pum\"},\"\":{\"rvykduumwbcu\":\"databod\",\"e\":\"dataj\"}}")
            .toObject(SnowflakeV2Dataset.class);
        Assertions.assertEquals("gqcglmadfztofxvq", model.description());
        Assertions.assertEquals("s", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("wnfhmjusuqnku").type());
        Assertions.assertEquals("pum", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeV2Dataset model = new SnowflakeV2Dataset().withDescription("gqcglmadfztofxvq")
            .withStructure("datauuagwayfmcer")
            .withSchema("datafeiqb")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("s")
                .withParameters(mapOf("ozzjkugpd", "datawjipssvnonijcqc", "bpwarh", "dataqbtokvocuzxl", "i",
                    "dataettohgpzwxyvtkzb")))
            .withParameters(mapOf("wnfhmjusuqnku",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datadd"), "qnirmidtvhjcgs",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datalxudhek")))
            .withAnnotations(Arrays.asList("dataqygkx", "datalfoj"))
            .withFolder(new DatasetFolder().withName("pum"))
            .withSchemaTypePropertiesSchema("datagba")
            .withTable("datahramq");
        model = BinaryData.fromObject(model).toObject(SnowflakeV2Dataset.class);
        Assertions.assertEquals("gqcglmadfztofxvq", model.description());
        Assertions.assertEquals("s", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("wnfhmjusuqnku").type());
        Assertions.assertEquals("pum", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
