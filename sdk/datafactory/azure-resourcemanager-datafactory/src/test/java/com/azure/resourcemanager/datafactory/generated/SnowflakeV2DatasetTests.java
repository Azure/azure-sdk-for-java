// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SnowflakeV2Dataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnowflakeV2DatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeV2Dataset model = BinaryData.fromString(
            "{\"type\":\"SnowflakeV2Table\",\"typeProperties\":{\"schema\":\"datauzginrkjkn\",\"table\":\"datafsu\"},\"description\":\"ybhozlsbufnhb\",\"structure\":\"datantpoe\",\"schema\":\"datatrsljzmzuic\",\"linkedServiceName\":{\"referenceName\":\"ggsxznb\",\"parameters\":{\"njl\":\"datakqbylb\",\"nitvkyahfoyfzo\":\"dataicqomanefwl\",\"cjukfalwc\":\"datadyaepre\",\"cayvqbeqpu\":\"dataec\"}},\"parameters\":{\"hicrjriy\":{\"type\":\"Int\",\"defaultValue\":\"datayl\"},\"nqocybrhxgiknrlu\":{\"type\":\"Array\",\"defaultValue\":\"dataydrlqllbof\"},\"xdgpksgo\":{\"type\":\"SecureString\",\"defaultValue\":\"dataiqbroqjfeamzk\"}},\"annotations\":[\"datanvnj\",\"dataldrqqv\",\"dataugusqlx\"],\"folder\":{\"name\":\"dthfwlnvqa\"},\"\":{\"ggpaiheaeyzwloq\":\"datafisblnlmpuyyp\"}}")
            .toObject(SnowflakeV2Dataset.class);
        Assertions.assertEquals("ybhozlsbufnhb", model.description());
        Assertions.assertEquals("ggsxznb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("hicrjriy").type());
        Assertions.assertEquals("dthfwlnvqa", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeV2Dataset model = new SnowflakeV2Dataset().withDescription("ybhozlsbufnhb")
            .withStructure("datantpoe")
            .withSchema("datatrsljzmzuic")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ggsxznb")
                .withParameters(mapOf("njl", "datakqbylb", "nitvkyahfoyfzo", "dataicqomanefwl", "cjukfalwc",
                    "datadyaepre", "cayvqbeqpu", "dataec")))
            .withParameters(mapOf("hicrjriy",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datayl"), "nqocybrhxgiknrlu",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataydrlqllbof"),
                "xdgpksgo",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("dataiqbroqjfeamzk")))
            .withAnnotations(Arrays.asList("datanvnj", "dataldrqqv", "dataugusqlx"))
            .withFolder(new DatasetFolder().withName("dthfwlnvqa"))
            .withSchemaTypePropertiesSchema("datauzginrkjkn")
            .withTable("datafsu");
        model = BinaryData.fromObject(model).toObject(SnowflakeV2Dataset.class);
        Assertions.assertEquals("ybhozlsbufnhb", model.description());
        Assertions.assertEquals("ggsxznb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("hicrjriy").type());
        Assertions.assertEquals("dthfwlnvqa", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
