// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.GlobalParameterResourceInner;
import com.azure.resourcemanager.datafactory.models.GlobalParameterListResponse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class GlobalParameterListResponseTests {
    @Test
    public void testDeserialize() {
        GlobalParameterListResponse model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{},\"name\":\"zov\",\"type\":\"j\",\"etag\":\"uxxpshne\",\"id\":\"ulfgslqu\"},{\"properties\":{},\"name\":\"dlenrdsutujbazpj\",\"type\":\"hminyflnorwmduv\",\"etag\":\"klvxwmyg\",\"id\":\"pgpqchiszepnnb\"}],\"nextLink\":\"rxgibbd\"}")
                .toObject(GlobalParameterListResponse.class);
        Assertions.assertEquals("ulfgslqu", model.value().get(0).id());
        Assertions.assertEquals("rxgibbd", model.nextLink());
    }

    @Test
    public void testSerialize() {
        GlobalParameterListResponse model =
            new GlobalParameterListResponse()
                .withValue(
                    Arrays
                        .asList(
                            new GlobalParameterResourceInner().withId("ulfgslqu").withProperties(mapOf()),
                            new GlobalParameterResourceInner().withId("pgpqchiszepnnb").withProperties(mapOf())))
                .withNextLink("rxgibbd");
        model = BinaryData.fromObject(model).toObject(GlobalParameterListResponse.class);
        Assertions.assertEquals("ulfgslqu", model.value().get(0).id());
        Assertions.assertEquals("rxgibbd", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
