// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.GlobalParameterResourceInner;
import com.azure.resourcemanager.datafactory.models.GlobalParameterListResponse;
import com.azure.resourcemanager.datafactory.models.GlobalParameterSpecification;
import com.azure.resourcemanager.datafactory.models.GlobalParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GlobalParameterListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GlobalParameterListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"n\":{\"type\":\"Float\",\"value\":\"datattuiaclkiexhajl\"},\"gbpvnwswmtxkyct\":{\"type\":\"Array\",\"value\":\"dataiqfyuttdi\"},\"l\":{\"type\":\"Object\",\"value\":\"datagzwx\"}},\"name\":\"cvogygzyvne\",\"type\":\"aifghtmoqqt\",\"etag\":\"fhzbkr\",\"id\":\"jjavfq\"}],\"nextLink\":\"hnqoewdo\"}")
            .toObject(GlobalParameterListResponse.class);
        Assertions.assertEquals("jjavfq", model.value().get(0).id());
        Assertions.assertEquals(GlobalParameterType.FLOAT, model.value().get(0).properties().get("n").type());
        Assertions.assertEquals("hnqoewdo", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GlobalParameterListResponse model = new GlobalParameterListResponse()
            .withValue(Arrays.asList(new GlobalParameterResourceInner().withId("jjavfq")
                .withProperties(mapOf("n",
                    new GlobalParameterSpecification().withType(GlobalParameterType.FLOAT)
                        .withValue("datattuiaclkiexhajl"),
                    "gbpvnwswmtxkyct",
                    new GlobalParameterSpecification().withType(GlobalParameterType.ARRAY).withValue("dataiqfyuttdi"),
                    "l",
                    new GlobalParameterSpecification().withType(GlobalParameterType.OBJECT).withValue("datagzwx")))))
            .withNextLink("hnqoewdo");
        model = BinaryData.fromObject(model).toObject(GlobalParameterListResponse.class);
        Assertions.assertEquals("jjavfq", model.value().get(0).id());
        Assertions.assertEquals(GlobalParameterType.FLOAT, model.value().get(0).properties().get("n").type());
        Assertions.assertEquals("hnqoewdo", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
