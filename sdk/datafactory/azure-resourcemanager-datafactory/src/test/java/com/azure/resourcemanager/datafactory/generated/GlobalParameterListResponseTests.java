// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.GlobalParameterResourceInner;
import com.azure.resourcemanager.datafactory.models.GlobalParameterListResponse;
import com.azure.resourcemanager.datafactory.models.GlobalParameterSpecification;
import com.azure.resourcemanager.datafactory.models.GlobalParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GlobalParameterListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GlobalParameterListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"urjtumghi\":{\"type\":\"Float\",\"value\":\"dataafbwqroohtuovmao\"},\"mslclblyjxlt\":{\"type\":\"Float\",\"value\":\"datave\"}},\"name\":\"juscvsfx\",\"type\":\"ctmgxuupbezqccy\",\"etag\":\"tce\",\"id\":\"d\"},{\"properties\":{\"zgwldoychillcec\":{\"type\":\"Object\",\"value\":\"datayihztgeqmg\"},\"llizs\":{\"type\":\"Array\",\"value\":\"datahuwaoaguhic\"}},\"name\":\"csjvhrwef\",\"type\":\"wqejpmvsse\",\"etag\":\"epwamcxtcz\",\"id\":\"peuknijd\"},{\"properties\":{\"ydjfb\":{\"type\":\"Object\",\"value\":\"dataes\"}},\"name\":\"yv\",\"type\":\"ulrtywikdmh\",\"etag\":\"kuflgbh\",\"id\":\"uacdixmxuf\"}],\"nextLink\":\"ryjqgdkf\"}")
            .toObject(GlobalParameterListResponse.class);
        Assertions.assertEquals("d", model.value().get(0).id());
        Assertions.assertEquals(GlobalParameterType.FLOAT, model.value().get(0).properties().get("urjtumghi").type());
        Assertions.assertEquals("ryjqgdkf", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GlobalParameterListResponse model = new GlobalParameterListResponse()
            .withValue(Arrays.asList(
                new GlobalParameterResourceInner().withId("d")
                    .withProperties(mapOf(
                        "urjtumghi",
                        new GlobalParameterSpecification()
                            .withType(GlobalParameterType.FLOAT)
                            .withValue("dataafbwqroohtuovmao"),
                        "mslclblyjxlt",
                        new GlobalParameterSpecification().withType(GlobalParameterType.FLOAT).withValue("datave"))),
                new GlobalParameterResourceInner().withId("peuknijd")
                    .withProperties(mapOf("zgwldoychillcec",
                        new GlobalParameterSpecification().withType(GlobalParameterType.OBJECT)
                            .withValue("datayihztgeqmg"),
                        "llizs",
                        new GlobalParameterSpecification().withType(GlobalParameterType.ARRAY)
                            .withValue("datahuwaoaguhic"))),
                new GlobalParameterResourceInner().withId("uacdixmxuf")
                    .withProperties(mapOf("ydjfb",
                        new GlobalParameterSpecification().withType(GlobalParameterType.OBJECT).withValue("dataes")))))
            .withNextLink("ryjqgdkf");
        model = BinaryData.fromObject(model).toObject(GlobalParameterListResponse.class);
        Assertions.assertEquals("d", model.value().get(0).id());
        Assertions.assertEquals(GlobalParameterType.FLOAT, model.value().get(0).properties().get("urjtumghi").type());
        Assertions.assertEquals("ryjqgdkf", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
