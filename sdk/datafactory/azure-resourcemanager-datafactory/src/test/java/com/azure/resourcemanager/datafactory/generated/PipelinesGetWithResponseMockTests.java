// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineResource;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PipelinesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"description\":\"w\",\"activities\":[{\"type\":\"Activity\",\"name\":\"skyjlteiul\",\"description\":\"pvhivvlmzcvp\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"e\",\"dependencyConditions\":[]},{\"activity\":\"yzer\",\"dependencyConditions\":[]},{\"activity\":\"ezgi\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"sfmcxarhg\",\"value\":\"datauejtxxlkoktbcl\"},{\"name\":\"vwtwboxgrvsavo\",\"value\":\"databsqu\"},{\"name\":\"kuszllognledhvll\",\"value\":\"datanyg\"},{\"name\":\"mn\",\"value\":\"datavqaq\"}],\"\":{\"bvhflbchzob\":\"datapulwdh\",\"yqtyuywzccumk\":\"dataeeiakwdtuwbrw\"}}],\"parameters\":{\"tzvrgoxpayjs\":{\"type\":\"Int\",\"defaultValue\":\"datakcolvitbtloxrb\"},\"beyugggf\":{\"type\":\"Float\",\"defaultValue\":\"datafqstbfuqmlnef\"},\"vrkxyjsuappdmu\":{\"type\":\"SecureString\",\"defaultValue\":\"datatykenmjznjqrxyaa\"}},\"variables\":{\"dg\":{\"type\":\"String\",\"defaultValue\":\"datasbwmsyoybjt\"},\"lfovmc\":{\"type\":\"Array\",\"defaultValue\":\"datakqi\"},\"qvjfszvecedoptez\":{\"type\":\"Array\",\"defaultValue\":\"databofqd\"},\"dbkgxqsbwep\":{\"type\":\"String\",\"defaultValue\":\"dataerurcjgkauyzbrdi\"}},\"concurrency\":448070341,\"annotations\":[\"datavjxarddb\"],\"runDimensions\":{\"wgttpxbjihz\":\"dataayltyftwdprtp\",\"dnljpouz\":\"dataxndnbzhs\"},\"folder\":{\"name\":\"ytex\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"dataqllqn\"}}},\"name\":\"y\",\"type\":\"fleioyw\",\"etag\":\"lhbytshsathkt\",\"\":{\"aji\":\"dataljnuayptyzjqte\",\"gytquktcqggxdnpp\":\"datanpwomjlps\"},\"id\":\"fqag\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DataFactoryManager manager =
            DataFactoryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PipelineResource response =
            manager
                .pipelines()
                .getWithResponse("eacpwsdir", "pr", "lgzpnr", "mjyvmxt", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("fqag", response.id());
        Assertions.assertEquals("w", response.description());
        Assertions.assertEquals("skyjlteiul", response.activities().get(0).name());
        Assertions.assertEquals("pvhivvlmzcvp", response.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, response.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, response.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("e", response.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("sfmcxarhg", response.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.INT, response.parameters().get("tzvrgoxpayjs").type());
        Assertions.assertEquals(VariableType.STRING, response.variables().get("dg").type());
        Assertions.assertEquals(448070341, response.concurrency());
        Assertions.assertEquals("ytex", response.folder().name());
    }
}
