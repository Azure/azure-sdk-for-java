// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineResource;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PipelinesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"ktlofgpnswvcsekw\",\"activities\":[{\"type\":\"Activity\",\"name\":\"fpoqbekkqsaby\",\"description\":\"frwp\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"ncyflgtqrow\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"qexwkkj\",\"value\":\"datacj\"},{\"name\":\"mnkeaia\",\"value\":\"datahzj\"},{\"name\":\"udrclzro\",\"value\":\"dataxirtt\"}],\"\":{\"ee\":\"dataqgaajbfkdflqsbek\",\"ebtvnskyg\":\"datawdojpjaq\"}}],\"parameters\":{\"zh\":{\"type\":\"String\",\"defaultValue\":\"datatsy\"},\"nykf\":{\"type\":\"Object\",\"defaultValue\":\"datacbzi\"},\"eltnevbkkdbhgurn\":{\"type\":\"SecureString\",\"defaultValue\":\"datamdqghtb\"}},\"variables\":{\"lieyyfqhndj\":{\"type\":\"String\",\"defaultValue\":\"datarj\"},\"fhsgpy\":{\"type\":\"Array\",\"defaultValue\":\"datavuyxccraj\"}},\"concurrency\":1496349843,\"annotations\":[\"datad\"],\"runDimensions\":{\"oiufrqsmjgddbunx\":\"datalpsjbnnuqszy\",\"s\":\"datafata\"},\"folder\":{\"name\":\"gdwhacurmmbuna\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"datavnyzcn\"}}},\"name\":\"isuhareqyiadvv\",\"type\":\"dfyelpnlp\",\"etag\":\"yuxcjqyfx\",\"\":{\"ygecly\":\"datatukossiflfv\"},\"id\":\"oshkzibbjbzdnkg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PipelineResource response = manager.pipelines()
            .getWithResponse("cmhttiqbn", "yixkeavbezz", "flddvvcwhod", "wvzxrfrax", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("oshkzibbjbzdnkg", response.id());
        Assertions.assertEquals("ktlofgpnswvcsekw", response.description());
        Assertions.assertEquals("fpoqbekkqsaby", response.activities().get(0).name());
        Assertions.assertEquals("frwp", response.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, response.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, response.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("ncyflgtqrow", response.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("qexwkkj", response.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.STRING, response.parameters().get("zh").type());
        Assertions.assertEquals(VariableType.STRING, response.variables().get("lieyyfqhndj").type());
        Assertions.assertEquals(1496349843, response.concurrency());
        Assertions.assertEquals("gdwhacurmmbuna", response.folder().name());
    }
}
