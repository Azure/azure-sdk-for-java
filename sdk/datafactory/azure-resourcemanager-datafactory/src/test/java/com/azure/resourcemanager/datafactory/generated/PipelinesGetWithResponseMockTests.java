// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineResource;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PipelinesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"description\":\"kwgsqosrpcxw\",\"activities\":[{\"type\":\"Activity\",\"name\":\"ljktujfcr\",\"description\":\"fryket\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"yifkg\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"njfjyppixfubkfj\",\"value\":\"datavl\"},{\"name\":\"yetyrnhispac\",\"value\":\"datav\"},{\"name\":\"nlypspn\",\"value\":\"datalo\"},{\"name\":\"oangrl\",\"value\":\"dataaixrbwbkrsmkeiun\"}],\"\":{\"tzzmcrmhhfcai\":\"datamedzfox\",\"zufdmsbvyg\":\"dataxuiy\"}},{\"type\":\"Activity\",\"name\":\"fljv\",\"description\":\"qkoecozfauhn\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"grzcjpkzmhaxtwji\",\"dependencyConditions\":[]},{\"activity\":\"lf\",\"dependencyConditions\":[]},{\"activity\":\"kmynm\",\"dependencyConditions\":[]},{\"activity\":\"mglbxoeghordccpk\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"c\",\"value\":\"datalvqlccaiphsart\"},{\"name\":\"iqq\",\"value\":\"datadgyshpvva\"}],\"\":{\"r\":\"datar\",\"oxweuo\":\"datahwdxdkvqqtfjj\"}}],\"parameters\":{\"xndheocj\":{\"type\":\"Object\",\"defaultValue\":\"datae\"}},\"variables\":{\"utve\":{\"type\":\"Array\",\"defaultValue\":\"datanan\"},\"vdqcohjwzynb\":{\"type\":\"Array\",\"defaultValue\":\"datahfwq\"}},\"concurrency\":865354799,\"annotations\":[\"databhlhyqgfimllrad\",\"datawpudvuphizztklk\",\"datahdeeht\"],\"runDimensions\":{\"fopcn\":\"dataefkphskkivy\"},\"folder\":{\"name\":\"ulpwwmxwlwcurk\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"dataazep\"}}},\"name\":\"uk\",\"type\":\"dcvrux\",\"etag\":\"nugujiwidunsvsjo\",\"\":{\"lt\":\"dataxs\",\"qro\":\"dataghykqxr\",\"fgkqudxvjrndbi\":\"dataknenpybuskvj\",\"oeuidhp\":\"dataqqrkkgawna\"},\"id\":\"xyitnzpfdoet\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DataFactoryManager manager = DataFactoryManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PipelineResource response = manager.pipelines()
            .getWithResponse("uun", "yokftdlwezplnzvr", "gjweelkviki", "z", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("xyitnzpfdoet", response.id());
        Assertions.assertEquals("kwgsqosrpcxw", response.description());
        Assertions.assertEquals("ljktujfcr", response.activities().get(0).name());
        Assertions.assertEquals("fryket", response.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, response.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, response.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("yifkg", response.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("njfjyppixfubkfj", response.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.OBJECT, response.parameters().get("xndheocj").type());
        Assertions.assertEquals(VariableType.ARRAY, response.variables().get("utve").type());
        Assertions.assertEquals(865354799, response.concurrency());
        Assertions.assertEquals("ulpwwmxwlwcurk", response.folder().name());
    }
}
