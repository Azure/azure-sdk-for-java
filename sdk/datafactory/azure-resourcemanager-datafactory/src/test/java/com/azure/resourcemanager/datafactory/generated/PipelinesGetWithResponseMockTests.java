// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineResource;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PipelinesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"description\":\"bu\",\"activities\":[{\"type\":\"Activity\",\"name\":\"btwgdlfgmuojn\",\"description\":\"wzlowusaddmj\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"zlgjcepxay\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"pavutiszwycle\",\"value\":\"dataagbjmwe\"}],\"\":{\"dwhmwxhvsp\":\"datapzamqbcitlyyph\",\"ucrynsqxyowwr\":\"datamokmymspatpvebxe\"}}],\"parameters\":{\"ugidk\":{\"type\":\"String\",\"defaultValue\":\"datawhrshlkswfpqrusx\"}},\"variables\":{\"kqqdqxslbrtt\":{\"type\":\"Array\",\"defaultValue\":\"datadtr\"},\"kjnbc\":{\"type\":\"Bool\",\"defaultValue\":\"datasktzrdxxsbbdo\"},\"cyhsbvair\":{\"type\":\"String\",\"defaultValue\":\"datae\"},\"wfajajpojzazzaks\":{\"type\":\"Array\",\"defaultValue\":\"dataxfbmqgimwivqphdd\"}},\"concurrency\":1823251390,\"annotations\":[\"datapcfsqdzi\",\"datavykysavevnerpyzu\",\"dataqvinvryxwzxjxotp\",\"dataiwm\"],\"runDimensions\":{\"kinsry\":\"dataxwokmdaihgig\"},\"folder\":{\"name\":\"bhpfpvadyxjcckhg\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"datazvrqbzlmv\"}}},\"name\":\"fhduniqumpspo\",\"type\":\"tpnyzytgkd\",\"etag\":\"tmmv\",\"\":{\"xidytj\":\"dataqzfjlprljilpua\",\"yvrlycikwqtlg\":\"datakfxzgopckmmagfbr\",\"w\":\"dataryourl\",\"tsqmikljczxotb\":\"datajvsqzchysqy\"},\"id\":\"lpqfxyywsx\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DataFactoryManager manager = DataFactoryManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PipelineResource response = manager.pipelines()
            .getWithResponse("omqwfwtwjzzyiib", "klya", "lvhxutctakkd", "usasfjwtyvv", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("lpqfxyywsx", response.id());
        Assertions.assertEquals("bu", response.description());
        Assertions.assertEquals("btwgdlfgmuojn", response.activities().get(0).name());
        Assertions.assertEquals("wzlowusaddmj", response.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, response.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, response.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("zlgjcepxay", response.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("pavutiszwycle", response.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.STRING, response.parameters().get("ugidk").type());
        Assertions.assertEquals(VariableType.ARRAY, response.variables().get("kqqdqxslbrtt").type());
        Assertions.assertEquals(1823251390, response.concurrency());
        Assertions.assertEquals("bhpfpvadyxjcckhg", response.folder().name());
    }
}
