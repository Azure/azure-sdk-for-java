// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineResource;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PipelinesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"hzmckdtwmsmhnzm\",\"activities\":[{\"type\":\"xkslofpguck\",\"name\":\"w\",\"description\":\"epqdcox\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"pgmugged\",\"dependencyConditions\":[]},{\"activity\":\"zuxm\",\"dependencyConditions\":[]},{\"activity\":\"eowaeagqmzxyi\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"fpidtf\",\"value\":\"datahctqxzktauqavo\"},{\"name\":\"lyntvou\",\"value\":\"datasqcmgusuaiquoda\"},{\"name\":\"liefhfjywms\",\"value\":\"datambdkv\"}],\"\":{\"bqceltf\":\"databmlpuzv\",\"hndqzuqdhuqlev\":\"datapzwyrtnkkjzj\",\"flk\":\"datayamdehdv\",\"eqfyuorqzlnek\":\"dataqxsadwkonnoul\"}},{\"type\":\"gsjyzdmsy\",\"name\":\"zabj\",\"description\":\"eftldjesxbov\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"jgwrn\",\"dependencyConditions\":[]},{\"activity\":\"dxab\",\"dependencyConditions\":[]},{\"activity\":\"xqpsjtipvszn\",\"dependencyConditions\":[]},{\"activity\":\"sbpueymimicjjy\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"pqtlgzu\",\"value\":\"dataktbbbv\"}],\"\":{\"kocdqo\":\"datamhc\",\"kbthmrfytxvxurmo\":\"datalbqkjqkgh\",\"qof\":\"dataj\"}}],\"parameters\":{\"nkugzchsxsnipnl\":{\"type\":\"Object\",\"defaultValue\":\"datakykb\"},\"oezathxzfqjwv\":{\"type\":\"SecureString\",\"defaultValue\":\"dataheukbjpldn\"},\"lpzwog\":{\"type\":\"Bool\",\"defaultValue\":\"dataxyrngirdvuvesep\"}},\"variables\":{\"ebcokrugr\":{\"type\":\"Bool\",\"defaultValue\":\"dataoqvuc\"},\"phme\":{\"type\":\"Array\",\"defaultValue\":\"datapuxvcypqt\"},\"fkg\":{\"type\":\"Bool\",\"defaultValue\":\"datac\"}},\"concurrency\":713633064,\"annotations\":[\"dataojvscobnre\",\"datarownnxq\"],\"runDimensions\":{\"qimaklsv\":\"dataalqlkimni\",\"dioadbcwvut\":\"dataggxlddkiwkmbvu\"},\"folder\":{\"name\":\"kkdydsj\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"datanbxptew\"}}},\"name\":\"hiowdk\",\"type\":\"opgdwhhsd\",\"etag\":\"mufeq\",\"\":{\"rjeopih\":\"datazbglcfego\",\"ohhksremmboup\":\"datahoxusvwranek\"},\"id\":\"ywfzf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PipelineResource response = manager.pipelines()
            .getWithResponse("aqambi", "kuh", "r", "xgsjbhlqpn", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ywfzf", response.id());
        Assertions.assertEquals("hzmckdtwmsmhnzm", response.description());
        Assertions.assertEquals("w", response.activities().get(0).name());
        Assertions.assertEquals("epqdcox", response.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, response.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, response.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("pgmugged", response.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("fpidtf", response.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.OBJECT, response.parameters().get("nkugzchsxsnipnl").type());
        Assertions.assertEquals(VariableType.BOOL, response.variables().get("ebcokrugr").type());
        Assertions.assertEquals(713633064, response.concurrency());
        Assertions.assertEquals("kkdydsj", response.folder().name());
    }
}
