// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BinaryDataset;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BinaryDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BinaryDataset model = BinaryData.fromString(
            "{\"type\":\"zkucszghdoaqipmn\",\"typeProperties\":{\"location\":{\"type\":\"qyho\",\"folderPath\":\"datajn\",\"fileName\":\"databggicnqwlctmw\",\"\":{\"jigcwtspanb\":\"dataxkrkqgvxrktj\",\"yy\":\"dataxasevchefpgee\"}},\"compression\":{\"type\":\"datauholaemwcgimmri\",\"level\":\"dataabsqqlon\",\"\":{\"ahdkmbjsmihrij\":\"dataow\",\"bgukbsvbwyoty\":\"datazbfsjwfczglk\",\"nhjgclxaxwcffasp\":\"datanb\"}}},\"description\":\"lfrsbzrnmuv\",\"structure\":\"datapu\",\"schema\":\"dataddtbfmekjcnginxd\",\"linkedServiceName\":{\"referenceName\":\"maoyqxfv\",\"parameters\":{\"xoqxtdnzujsj\":\"datazmxynofxlt\",\"ivd\":\"datarkrpskcjhmmofb\",\"accptbzetxy\":\"datatkykpaxnlsfgnys\"}},\"parameters\":{\"pzzwahdrdvhaztk\":{\"type\":\"Int\",\"defaultValue\":\"dataeecvjwyuveox\"}},\"annotations\":[\"datavz\"],\"folder\":{\"name\":\"mbrygmw\"},\"\":{\"fdaglmrcokzzert\":\"dataosiqsykqfdqwdrtx\",\"bym\":\"dataounzsiywh\"}}")
            .toObject(BinaryDataset.class);
        Assertions.assertEquals("lfrsbzrnmuv", model.description());
        Assertions.assertEquals("maoyqxfv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("pzzwahdrdvhaztk").type());
        Assertions.assertEquals("mbrygmw", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BinaryDataset model = new BinaryDataset().withDescription("lfrsbzrnmuv")
            .withStructure("datapu")
            .withSchema("dataddtbfmekjcnginxd")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("maoyqxfv")
                .withParameters(mapOf("xoqxtdnzujsj", "datazmxynofxlt", "ivd", "datarkrpskcjhmmofb", "accptbzetxy",
                    "datatkykpaxnlsfgnys")))
            .withParameters(mapOf("pzzwahdrdvhaztk",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataeecvjwyuveox")))
            .withAnnotations(Arrays.asList("datavz"))
            .withFolder(new DatasetFolder().withName("mbrygmw"))
            .withLocation(new DatasetLocation().withFolderPath("datajn")
                .withFileName("databggicnqwlctmw")
                .withAdditionalProperties(mapOf("type", "qyho")))
            .withCompression(new DatasetCompression().withType("datauholaemwcgimmri")
                .withLevel("dataabsqqlon")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(BinaryDataset.class);
        Assertions.assertEquals("lfrsbzrnmuv", model.description());
        Assertions.assertEquals("maoyqxfv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("pzzwahdrdvhaztk").type());
        Assertions.assertEquals("mbrygmw", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
