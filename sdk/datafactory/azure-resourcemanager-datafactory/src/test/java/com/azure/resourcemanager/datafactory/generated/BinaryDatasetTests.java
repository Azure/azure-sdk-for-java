// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BinaryDataset;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BinaryDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BinaryDataset model = BinaryData.fromString(
            "{\"type\":\"Binary\",\"typeProperties\":{\"location\":{\"type\":\"DatasetLocation\",\"folderPath\":\"datadmac\",\"fileName\":\"datakvnrpbjrmvgoqpl\",\"\":{\"llcz\":\"dataumkz\"}},\"compression\":{\"type\":\"datarwnhkgqggoxsst\",\"level\":\"datavrak\",\"\":{\"emjpequ\":\"dataynjcwmhlymgnukxr\"}}},\"description\":\"lzaudg\",\"structure\":\"dataf\",\"schema\":\"datalakkucddwnhcz\",\"linkedServiceName\":{\"referenceName\":\"utoucgjt\",\"parameters\":{\"icqqw\":\"dataway\",\"wkslvlized\":\"datav\"}},\"parameters\":{\"srgekzyqxadyfhb\":{\"type\":\"Float\",\"defaultValue\":\"datav\"},\"aqjsgyzstujr\":{\"type\":\"Float\",\"defaultValue\":\"datahojqttbspvkhg\"},\"fdrld\":{\"type\":\"Float\",\"defaultValue\":\"datakn\"}},\"annotations\":[\"datah\"],\"folder\":{\"name\":\"ttugyu\"},\"\":{\"urf\":\"datalda\",\"zciggbnvtxofwa\":\"dataazcsozjvx\",\"moeobdoe\":\"datazyxwhoe\"}}")
            .toObject(BinaryDataset.class);
        Assertions.assertEquals("lzaudg", model.description());
        Assertions.assertEquals("utoucgjt", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("srgekzyqxadyfhb").type());
        Assertions.assertEquals("ttugyu", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BinaryDataset model = new BinaryDataset().withDescription("lzaudg")
            .withStructure("dataf")
            .withSchema("datalakkucddwnhcz")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("utoucgjt")
                .withParameters(mapOf("icqqw", "dataway", "wkslvlized", "datav")))
            .withParameters(mapOf("srgekzyqxadyfhb",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datav"), "aqjsgyzstujr",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datahojqttbspvkhg"),
                "fdrld", new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datakn")))
            .withAnnotations(Arrays.asList("datah"))
            .withFolder(new DatasetFolder().withName("ttugyu"))
            .withLocation(new DatasetLocation().withFolderPath("datadmac")
                .withFileName("datakvnrpbjrmvgoqpl")
                .withAdditionalProperties(mapOf("type", "DatasetLocation")))
            .withCompression(new DatasetCompression().withType("datarwnhkgqggoxsst")
                .withLevel("datavrak")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(BinaryDataset.class);
        Assertions.assertEquals("lzaudg", model.description());
        Assertions.assertEquals("utoucgjt", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("srgekzyqxadyfhb").type());
        Assertions.assertEquals("ttugyu", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
