// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BinaryDataset;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BinaryDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BinaryDataset model = BinaryData.fromString(
            "{\"type\":\"Binary\",\"typeProperties\":{\"location\":{\"type\":\"DatasetLocation\",\"folderPath\":\"dataizhqikmgobl\",\"fileName\":\"datae\",\"\":{\"jxvtrkfkgenjqnnp\":\"dataiiisklbonxxu\",\"ujjcxgdqmrlhn\":\"datawkosnyxigf\",\"xyxwjezbfqplo\":\"datakwopswnyinxupr\",\"trsvjmnsvujnjkt\":\"datauekdcpvu\"}},\"compression\":{\"type\":\"datalefcjis\",\"level\":\"datakdb\",\"\":{\"ampqocl\":\"datafb\",\"tgvpatr\":\"datannmxynlsuqbwzstr\"}}},\"description\":\"jktfinf\",\"structure\":\"dataks\",\"schema\":\"dataculwkqic\",\"linkedServiceName\":{\"referenceName\":\"uookrjfls\",\"parameters\":{\"pqsdoc\":\"datajbt\",\"pujzfl\":\"datap\",\"wlluunxhfwlfxz\":\"datacdsgxceluji\"}},\"parameters\":{\"jdmngsytqpdzfyxc\":{\"type\":\"Float\",\"defaultValue\":\"dataupcknecexkgrvfp\"}},\"annotations\":[\"datawoxcgzbejqfb\",\"datafopfjxdwdrpazqjk\",\"datafmbwotfcuuugt\"],\"folder\":{\"name\":\"pgayiawohfmhnnzm\"},\"\":{\"gloiovsl\":\"datajkmqenhaidzrpv\",\"pijpkhc\":\"dataivqsuvwtenb\",\"xukuicjuftekio\":\"dataoa\"}}")
            .toObject(BinaryDataset.class);
        Assertions.assertEquals("jktfinf", model.description());
        Assertions.assertEquals("uookrjfls", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("jdmngsytqpdzfyxc").type());
        Assertions.assertEquals("pgayiawohfmhnnzm", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BinaryDataset model = new BinaryDataset().withDescription("jktfinf")
            .withStructure("dataks")
            .withSchema("dataculwkqic")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("uookrjfls")
                .withParameters(mapOf("pqsdoc", "datajbt", "pujzfl", "datap", "wlluunxhfwlfxz", "datacdsgxceluji")))
            .withParameters(mapOf("jdmngsytqpdzfyxc",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataupcknecexkgrvfp")))
            .withAnnotations(Arrays.asList("datawoxcgzbejqfb", "datafopfjxdwdrpazqjk", "datafmbwotfcuuugt"))
            .withFolder(new DatasetFolder().withName("pgayiawohfmhnnzm"))
            .withLocation(new DatasetLocation().withFolderPath("dataizhqikmgobl")
                .withFileName("datae")
                .withAdditionalProperties(mapOf("type", "DatasetLocation")))
            .withCompression(new DatasetCompression().withType("datalefcjis")
                .withLevel("datakdb")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(BinaryDataset.class);
        Assertions.assertEquals("jktfinf", model.description());
        Assertions.assertEquals("uookrjfls", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("jdmngsytqpdzfyxc").type());
        Assertions.assertEquals("pgayiawohfmhnnzm", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
