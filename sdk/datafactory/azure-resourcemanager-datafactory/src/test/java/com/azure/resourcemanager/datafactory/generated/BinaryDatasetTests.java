// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BinaryDataset;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BinaryDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BinaryDataset model = BinaryData.fromString(
            "{\"type\":\"Binary\",\"typeProperties\":{\"location\":{\"type\":\"DatasetLocation\",\"folderPath\":\"datagvp\",\"fileName\":\"datargjjktfinfhoksmm\",\"\":{\"icruo\":\"datawk\",\"qpqsdoctpzpuj\":\"datakrjflsgaojb\"}},\"compression\":{\"type\":\"datalmcds\",\"level\":\"dataceluj\",\"\":{\"wlfxzfw\":\"datalluunxh\",\"kgrvfpsjd\":\"datageupcknece\",\"qpdzf\":\"datangsy\",\"awoxcgzbe\":\"dataxcn\"}}},\"description\":\"fbifopfjxdwdrp\",\"structure\":\"dataq\",\"schema\":\"datarfm\",\"linkedServiceName\":{\"referenceName\":\"wotfcuu\",\"parameters\":{\"nzmec\":\"datajigpgayiawohfmh\",\"gloiovsl\":\"datajkmqenhaidzrpv\",\"pijpkhc\":\"dataivqsuvwtenb\",\"xukuicjuftekio\":\"dataoa\"}},\"parameters\":{\"zubfjzabbwz\":{\"type\":\"Bool\",\"defaultValue\":\"dataewfhvpxjh\"}},\"annotations\":[\"datauaixcdckix\",\"dataps\",\"dataigavk\",\"datavyxzer\"],\"folder\":{\"name\":\"kpzjbyetjxryopt\"},\"\":{\"bpemnrrabovr\":\"datatwhlbecgih\",\"pskpeswyhhmif\":\"datawxywpjhspboxhif\",\"y\":\"datauajxwwvcmmpeg\"}}")
            .toObject(BinaryDataset.class);
        Assertions.assertEquals("fbifopfjxdwdrp", model.description());
        Assertions.assertEquals("wotfcuu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("zubfjzabbwz").type());
        Assertions.assertEquals("kpzjbyetjxryopt", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BinaryDataset model
            = new BinaryDataset().withDescription("fbifopfjxdwdrp").withStructure("dataq").withSchema("datarfm")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("wotfcuu")
                    .withParameters(mapOf("nzmec", "datajigpgayiawohfmh", "gloiovsl", "datajkmqenhaidzrpv", "pijpkhc",
                        "dataivqsuvwtenb", "xukuicjuftekio", "dataoa")))
                .withParameters(mapOf("zubfjzabbwz",
                    new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataewfhvpxjh")))
                .withAnnotations(Arrays.asList("datauaixcdckix", "dataps", "dataigavk", "datavyxzer"))
                .withFolder(new DatasetFolder().withName("kpzjbyetjxryopt"))
                .withLocation(new DatasetLocation().withFolderPath("datagvp").withFileName("datargjjktfinfhoksmm")
                    .withAdditionalProperties(mapOf("type", "DatasetLocation")))
                .withCompression(new DatasetCompression().withType("datalmcds").withLevel("dataceluj")
                    .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(BinaryDataset.class);
        Assertions.assertEquals("fbifopfjxdwdrp", model.description());
        Assertions.assertEquals("wotfcuu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("zubfjzabbwz").type());
        Assertions.assertEquals("kpzjbyetjxryopt", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
