// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureDatabricksDeltaLakeDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureDatabricksDeltaLakeDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDatabricksDeltaLakeDataset model = BinaryData.fromString(
            "{\"type\":\"AzureDatabricksDeltaLakeDataset\",\"typeProperties\":{\"table\":\"dataram\",\"database\":\"dataugqcglmadfztof\"},\"description\":\"qlauuagwayf\",\"structure\":\"datae\",\"schema\":\"dataxfei\",\"linkedServiceName\":{\"referenceName\":\"basthz\",\"parameters\":{\"qcj\":\"datapssvnonij\",\"kvocu\":\"datazzjkugpdqqbt\"}},\"parameters\":{\"tt\":{\"type\":\"Bool\",\"defaultValue\":\"datapwarhw\"},\"tkzbhizxp\":{\"type\":\"Float\",\"defaultValue\":\"datapzwxy\"},\"ushvlxudhe\":{\"type\":\"Int\",\"defaultValue\":\"datadmwnfhmjusuqn\"},\"sz\":{\"type\":\"Array\",\"defaultValue\":\"datanirmidtvhjc\"}},\"annotations\":[\"dataygkxrlfojlclp\",\"datamveybodhrv\"],\"folder\":{\"name\":\"u\"},\"\":{\"gpdxtsaujtco\":\"databcumjv\",\"l\":\"datajybolqoxupt\",\"vamtyk\":\"dataivmlkwkzli\",\"fxcsqmzdozktkdpc\":\"dataszde\"}}")
            .toObject(AzureDatabricksDeltaLakeDataset.class);
        Assertions.assertEquals("qlauuagwayf", model.description());
        Assertions.assertEquals("basthz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("tt").type());
        Assertions.assertEquals("u", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDatabricksDeltaLakeDataset model = new AzureDatabricksDeltaLakeDataset().withDescription("qlauuagwayf")
            .withStructure("datae")
            .withSchema("dataxfei")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("basthz")
                .withParameters(mapOf("qcj", "datapssvnonij", "kvocu", "datazzjkugpdqqbt")))
            .withParameters(mapOf("tt",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datapwarhw"), "tkzbhizxp",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datapzwxy"), "ushvlxudhe",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datadmwnfhmjusuqn"), "sz",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datanirmidtvhjc")))
            .withAnnotations(Arrays.asList("dataygkxrlfojlclp", "datamveybodhrv"))
            .withFolder(new DatasetFolder().withName("u"))
            .withTable("dataram")
            .withDatabase("dataugqcglmadfztof");
        model = BinaryData.fromObject(model).toObject(AzureDatabricksDeltaLakeDataset.class);
        Assertions.assertEquals("qlauuagwayf", model.description());
        Assertions.assertEquals("basthz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("tt").type());
        Assertions.assertEquals("u", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
