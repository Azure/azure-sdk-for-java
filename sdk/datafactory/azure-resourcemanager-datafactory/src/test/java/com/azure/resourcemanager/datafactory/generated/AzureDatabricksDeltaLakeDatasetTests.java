// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureDatabricksDeltaLakeDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureDatabricksDeltaLakeDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDatabricksDeltaLakeDataset model = BinaryData.fromString(
            "{\"type\":\"AzureDatabricksDeltaLakeDataset\",\"typeProperties\":{\"table\":\"datal\",\"database\":\"datacf\"},\"description\":\"rn\",\"structure\":\"dataqpkayqivbigdrqg\",\"schema\":\"datatboyztgnmu\",\"linkedServiceName\":{\"referenceName\":\"ppwp\",\"parameters\":{\"ofeiiewibdtplj\":\"datagrmtgwhzbbdwrjen\"}},\"parameters\":{\"xjwtkftgzljue\":{\"type\":\"Object\",\"defaultValue\":\"dataokbxxcdk\"},\"lb\":{\"type\":\"Int\",\"defaultValue\":\"datawsjpgb\"},\"epvrunudma\":{\"type\":\"Object\",\"defaultValue\":\"datagv\"},\"kwohdig\":{\"type\":\"Int\",\"defaultValue\":\"datahrnaxkc\"}},\"annotations\":[\"dataocft\",\"dataamodw\"],\"folder\":{\"name\":\"ktvxerow\"},\"\":{\"xgd\":\"datarnnbegrafeonmto\",\"aq\":\"datafmazhkqqsjk\",\"evveswghhbqqhd\":\"datazbwgpmdmwi\"}}")
            .toObject(AzureDatabricksDeltaLakeDataset.class);
        Assertions.assertEquals("rn", model.description());
        Assertions.assertEquals("ppwp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("xjwtkftgzljue").type());
        Assertions.assertEquals("ktvxerow", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDatabricksDeltaLakeDataset model = new AzureDatabricksDeltaLakeDataset().withDescription("rn")
            .withStructure("dataqpkayqivbigdrqg")
            .withSchema("datatboyztgnmu")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ppwp")
                .withParameters(mapOf("ofeiiewibdtplj", "datagrmtgwhzbbdwrjen")))
            .withParameters(mapOf("xjwtkftgzljue",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataokbxxcdk"), "lb",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datawsjpgb"), "epvrunudma",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datagv"), "kwohdig",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datahrnaxkc")))
            .withAnnotations(Arrays.asList("dataocft", "dataamodw"))
            .withFolder(new DatasetFolder().withName("ktvxerow"))
            .withTable("datal")
            .withDatabase("datacf");
        model = BinaryData.fromObject(model).toObject(AzureDatabricksDeltaLakeDataset.class);
        Assertions.assertEquals("rn", model.description());
        Assertions.assertEquals("ppwp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("xjwtkftgzljue").type());
        Assertions.assertEquals("ktvxerow", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
