// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureDatabricksDeltaLakeDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureDatabricksDeltaLakeDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDatabricksDeltaLakeDataset model = BinaryData.fromString(
            "{\"type\":\"vtoiqofzttqg\",\"typeProperties\":{\"table\":\"dataapaseqcppypfre\",\"database\":\"datavzhn\"},\"description\":\"lwyoxzuhellitpqv\",\"structure\":\"datavrsgqbm\",\"schema\":\"dataxeo\",\"linkedServiceName\":{\"referenceName\":\"ebzvtvxxfsfoy\",\"parameters\":{\"dybkb\":\"dataihnalpcu\",\"ywedbpirbzpauzbb\":\"datadwbmivzika\"}},\"parameters\":{\"xgmigsoebd\":{\"type\":\"SecureString\",\"defaultValue\":\"datazdwpave\"},\"vcymddoei\":{\"type\":\"Array\",\"defaultValue\":\"dataiuiimerffh\"},\"chh\":{\"type\":\"SecureString\",\"defaultValue\":\"datagajfeudbobmolji\"},\"cc\":{\"type\":\"String\",\"defaultValue\":\"dataih\"}},\"annotations\":[\"datajpoipdjxyotgvra\",\"datahntoiwfszkrl\",\"dataosjwrretsluqf\"],\"folder\":{\"name\":\"d\"},\"\":{\"uwhdqngqam\":\"dataioixviobuwbng\",\"exqzaffzqodoks\":\"databmggnqx\"}}")
            .toObject(AzureDatabricksDeltaLakeDataset.class);
        Assertions.assertEquals("lwyoxzuhellitpqv", model.description());
        Assertions.assertEquals("ebzvtvxxfsfoy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("xgmigsoebd").type());
        Assertions.assertEquals("d", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDatabricksDeltaLakeDataset model = new AzureDatabricksDeltaLakeDataset()
            .withDescription("lwyoxzuhellitpqv")
            .withStructure("datavrsgqbm")
            .withSchema("dataxeo")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ebzvtvxxfsfoy")
                .withParameters(mapOf("dybkb", "dataihnalpcu", "ywedbpirbzpauzbb", "datadwbmivzika")))
            .withParameters(mapOf("xgmigsoebd",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datazdwpave"),
                "vcymddoei",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataiuiimerffh"), "chh",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("datagajfeudbobmolji"),
                "cc", new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataih")))
            .withAnnotations(Arrays.asList("datajpoipdjxyotgvra", "datahntoiwfszkrl", "dataosjwrretsluqf"))
            .withFolder(new DatasetFolder().withName("d"))
            .withTable("dataapaseqcppypfre")
            .withDatabase("datavzhn");
        model = BinaryData.fromObject(model).toObject(AzureDatabricksDeltaLakeDataset.class);
        Assertions.assertEquals("lwyoxzuhellitpqv", model.description());
        Assertions.assertEquals("ebzvtvxxfsfoy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("xgmigsoebd").type());
        Assertions.assertEquals("d", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
