// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureDatabricksDeltaLakeDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureDatabricksDeltaLakeDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDatabricksDeltaLakeDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"AzureDatabricksDeltaLakeDataset\",\"typeProperties\":{\"table\":\"dataspllitxrrgkw\",\"database\":\"dataoyhqoivxcodwkwo\"},\"description\":\"cachhsizfuew\",\"structure\":\"datawfiikqcdnzsfiu\",\"schema\":\"dataneoodmcrxlyz\",\"linkedServiceName\":{\"referenceName\":\"ah\",\"parameters\":{\"brnlsyiaan\":\"datafakrxjjwnbrmdw\",\"lpphcstmrycpana\":\"datastcjhat\",\"izrinlpxngzzxqb\":\"datafa\",\"jkpi\":\"dataqnzmzctbx\"}},\"parameters\":{\"qmbinpxmiwt\":{\"type\":\"Bool\",\"defaultValue\":\"databdozwbskueafz\"},\"abux\":{\"type\":\"Array\",\"defaultValue\":\"datafpvrdukcdnzox\"}},\"annotations\":[\"databawshramqsugq\"],\"folder\":{\"name\":\"madfztofx\"},\"\":{\"feiqb\":\"dataauuagwayfmcerf\",\"hzwj\":\"datas\"}}")
                .toObject(AzureDatabricksDeltaLakeDataset.class);
        Assertions.assertEquals("cachhsizfuew", model.description());
        Assertions.assertEquals("ah", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("qmbinpxmiwt").type());
        Assertions.assertEquals("madfztofx", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDatabricksDeltaLakeDataset model =
            new AzureDatabricksDeltaLakeDataset()
                .withDescription("cachhsizfuew")
                .withStructure("datawfiikqcdnzsfiu")
                .withSchema("dataneoodmcrxlyz")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("ah")
                        .withParameters(
                            mapOf(
                                "brnlsyiaan",
                                "datafakrxjjwnbrmdw",
                                "lpphcstmrycpana",
                                "datastcjhat",
                                "izrinlpxngzzxqb",
                                "datafa",
                                "jkpi",
                                "dataqnzmzctbx")))
                .withParameters(
                    mapOf(
                        "qmbinpxmiwt",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("databdozwbskueafz"),
                        "abux",
                        new ParameterSpecification()
                            .withType(ParameterType.ARRAY)
                            .withDefaultValue("datafpvrdukcdnzox")))
                .withAnnotations(Arrays.asList("databawshramqsugq"))
                .withFolder(new DatasetFolder().withName("madfztofx"))
                .withTable("dataspllitxrrgkw")
                .withDatabase("dataoyhqoivxcodwkwo");
        model = BinaryData.fromObject(model).toObject(AzureDatabricksDeltaLakeDataset.class);
        Assertions.assertEquals("cachhsizfuew", model.description());
        Assertions.assertEquals("ah", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("qmbinpxmiwt").type());
        Assertions.assertEquals("madfztofx", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
