// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SqlServerTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlServerTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlServerTableDataset model = BinaryData.fromString(
            "{\"type\":\"ptlsrvqzgaqs\",\"typeProperties\":{\"tableName\":\"dataiuokglts\",\"schema\":\"dataoiobh\",\"table\":\"datab\"},\"description\":\"r\",\"structure\":\"datalvgrghnhuoxrqhjn\",\"schema\":\"datapesw\",\"linkedServiceName\":{\"referenceName\":\"nhqkgebzqz\",\"parameters\":{\"aosxsxoxvimdvetq\":\"dataviujojzdvms\",\"u\":\"datadbitqsbyujsgomri\",\"xgfygfkgxbd\":\"datagrmsdbv\"}},\"parameters\":{\"porrvkxtfctane\":{\"type\":\"SecureString\",\"defaultValue\":\"datawbdpsesboynpy\"}},\"annotations\":[\"dataqxdhnpjnezji\"],\"folder\":{\"name\":\"umltpmrzwv\"},\"\":{\"uqhngqqxjbsoto\":\"dataqffuxvf\"}}")
            .toObject(SqlServerTableDataset.class);
        Assertions.assertEquals("r", model.description());
        Assertions.assertEquals("nhqkgebzqz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("porrvkxtfctane").type());
        Assertions.assertEquals("umltpmrzwv", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlServerTableDataset model = new SqlServerTableDataset().withDescription("r")
            .withStructure("datalvgrghnhuoxrqhjn")
            .withSchema("datapesw")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("nhqkgebzqz")
                .withParameters(mapOf("aosxsxoxvimdvetq", "dataviujojzdvms", "u", "datadbitqsbyujsgomri", "xgfygfkgxbd",
                    "datagrmsdbv")))
            .withParameters(mapOf("porrvkxtfctane",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("datawbdpsesboynpy")))
            .withAnnotations(Arrays.asList("dataqxdhnpjnezji"))
            .withFolder(new DatasetFolder().withName("umltpmrzwv"))
            .withTableName("dataiuokglts")
            .withSchemaTypePropertiesSchema("dataoiobh")
            .withTable("datab");
        model = BinaryData.fromObject(model).toObject(SqlServerTableDataset.class);
        Assertions.assertEquals("r", model.description());
        Assertions.assertEquals("nhqkgebzqz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("porrvkxtfctane").type());
        Assertions.assertEquals("umltpmrzwv", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
