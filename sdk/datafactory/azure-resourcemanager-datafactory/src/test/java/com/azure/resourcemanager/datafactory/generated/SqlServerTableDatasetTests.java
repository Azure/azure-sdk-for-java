// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SqlServerTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlServerTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlServerTableDataset model = BinaryData.fromString(
            "{\"type\":\"SqlServerTable\",\"typeProperties\":{\"tableName\":\"dataszfutgpbygbnbc\",\"schema\":\"dataiqgtzpv\",\"table\":\"datawfl\"},\"description\":\"hxzuxerxhyw\",\"structure\":\"datakqsqvvdkfp\",\"schema\":\"datadajdqxymxxyfr\",\"linkedServiceName\":{\"referenceName\":\"j\",\"parameters\":{\"ld\":\"dataetfvgwfw\",\"rsnxfrp\":\"datagwouppvyddqsvc\",\"xzxlcqzfxa\":\"datawwqclmdmtfxxepz\"}},\"parameters\":{\"smkir\":{\"type\":\"SecureString\",\"defaultValue\":\"datacj\"},\"hkcomeobw\":{\"type\":\"Bool\",\"defaultValue\":\"dataipud\"}},\"annotations\":[\"datazltenlbfxl\",\"dataxozesn\"],\"folder\":{\"name\":\"uomtxj\"},\"\":{\"wis\":\"dataxymckikkqyvur\",\"ktehognsdd\":\"datayfmrzcqfevnkyak\"}}")
            .toObject(SqlServerTableDataset.class);
        Assertions.assertEquals("hxzuxerxhyw", model.description());
        Assertions.assertEquals("j", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("smkir").type());
        Assertions.assertEquals("uomtxj", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlServerTableDataset model
            = new SqlServerTableDataset().withDescription("hxzuxerxhyw")
                .withStructure("datakqsqvvdkfp")
                .withSchema("datadajdqxymxxyfr")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("j")
                    .withParameters(mapOf("ld", "dataetfvgwfw", "rsnxfrp", "datagwouppvyddqsvc", "xzxlcqzfxa",
                        "datawwqclmdmtfxxepz")))
                .withParameters(mapOf("smkir",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datacj"),
                    "hkcomeobw",
                    new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataipud")))
                .withAnnotations(Arrays.asList("datazltenlbfxl", "dataxozesn"))
                .withFolder(new DatasetFolder().withName("uomtxj"))
                .withTableName("dataszfutgpbygbnbc")
                .withSchemaTypePropertiesSchema("dataiqgtzpv")
                .withTable("datawfl");
        model = BinaryData.fromObject(model).toObject(SqlServerTableDataset.class);
        Assertions.assertEquals("hxzuxerxhyw", model.description());
        Assertions.assertEquals("j", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("smkir").type());
        Assertions.assertEquals("uomtxj", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
