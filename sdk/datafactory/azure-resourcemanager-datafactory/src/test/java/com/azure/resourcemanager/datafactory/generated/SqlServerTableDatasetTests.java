// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SqlServerTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlServerTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlServerTableDataset model = BinaryData.fromString(
            "{\"type\":\"SqlServerTable\",\"typeProperties\":{\"tableName\":\"datav\",\"schema\":\"datadfkhttuobrxz\",\"table\":\"dataytebjkjge\"},\"description\":\"wtfma\",\"structure\":\"databmnhtwofx\",\"schema\":\"datahlvyqns\",\"linkedServiceName\":{\"referenceName\":\"bq\",\"parameters\":{\"hj\":\"dataqkie\",\"spt\":\"dataqqrugwespscvs\",\"supcvqgxcvw\":\"datauwozfvz\",\"cmcgmlmpnvq\":\"dataoq\"}},\"parameters\":{\"dqseypdlmajpuy\":{\"type\":\"Bool\",\"defaultValue\":\"datarzn\"},\"mzgccy\":{\"type\":\"String\",\"defaultValue\":\"dataf\"}},\"annotations\":[\"datavmsiehedm\",\"datavoneey\"],\"folder\":{\"name\":\"a\"},\"\":{\"qwddigebls\":\"dataza\",\"wveeozbjkj\":\"datalzdssi\"}}")
            .toObject(SqlServerTableDataset.class);
        Assertions.assertEquals("wtfma", model.description());
        Assertions.assertEquals("bq", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("dqseypdlmajpuy").type());
        Assertions.assertEquals("a", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlServerTableDataset model = new SqlServerTableDataset().withDescription("wtfma")
            .withStructure("databmnhtwofx")
            .withSchema("datahlvyqns")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("bq")
                .withParameters(mapOf("hj", "dataqkie", "spt", "dataqqrugwespscvs", "supcvqgxcvw", "datauwozfvz",
                    "cmcgmlmpnvq", "dataoq")))
            .withParameters(mapOf("dqseypdlmajpuy",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datarzn"), "mzgccy",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataf")))
            .withAnnotations(Arrays.asList("datavmsiehedm", "datavoneey"))
            .withFolder(new DatasetFolder().withName("a"))
            .withTableName("datav")
            .withSchemaTypePropertiesSchema("datadfkhttuobrxz")
            .withTable("dataytebjkjge");
        model = BinaryData.fromObject(model).toObject(SqlServerTableDataset.class);
        Assertions.assertEquals("wtfma", model.description());
        Assertions.assertEquals("bq", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("dqseypdlmajpuy").type());
        Assertions.assertEquals("a", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
