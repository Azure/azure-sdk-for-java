// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SqlServerTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlServerTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlServerTableDataset model = BinaryData.fromString(
            "{\"type\":\"SqlServerTable\",\"typeProperties\":{\"tableName\":\"databd\",\"schema\":\"datarwkampyhw\",\"table\":\"dataldzniudrcycm\"},\"description\":\"uzymhlhihqknlv\",\"structure\":\"datan\",\"schema\":\"datakopaiildcp\",\"linkedServiceName\":{\"referenceName\":\"dkhqux\",\"parameters\":{\"gybuxmqxigid\":\"dataofpgvedrobujn\",\"pskgrhn\":\"datallnjg\"}},\"parameters\":{\"yqz\":{\"type\":\"String\",\"defaultValue\":\"datasazuqznghxh\"},\"vnrvzwpffx\":{\"type\":\"String\",\"defaultValue\":\"datak\"}},\"annotations\":[\"databntmvehohflyuv\"],\"folder\":{\"name\":\"zqzqweuydybnairv\"},\"\":{\"zeogeatr\":\"datasv\",\"rfcs\":\"datanqnvnc\",\"zsqbibaaugicovj\":\"datavjnkoiz\"}}")
            .toObject(SqlServerTableDataset.class);
        Assertions.assertEquals("uzymhlhihqknlv", model.description());
        Assertions.assertEquals("dkhqux", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("yqz").type());
        Assertions.assertEquals("zqzqweuydybnairv", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlServerTableDataset model = new SqlServerTableDataset().withDescription("uzymhlhihqknlv")
            .withStructure("datan")
            .withSchema("datakopaiildcp")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("dkhqux")
                .withParameters(mapOf("gybuxmqxigid", "dataofpgvedrobujn", "pskgrhn", "datallnjg")))
            .withParameters(mapOf("yqz",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datasazuqznghxh"),
                "vnrvzwpffx", new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datak")))
            .withAnnotations(Arrays.asList("databntmvehohflyuv"))
            .withFolder(new DatasetFolder().withName("zqzqweuydybnairv"))
            .withTableName("databd")
            .withSchemaTypePropertiesSchema("datarwkampyhw")
            .withTable("dataldzniudrcycm");
        model = BinaryData.fromObject(model).toObject(SqlServerTableDataset.class);
        Assertions.assertEquals("uzymhlhihqknlv", model.description());
        Assertions.assertEquals("dkhqux", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("yqz").type());
        Assertions.assertEquals("zqzqweuydybnairv", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
