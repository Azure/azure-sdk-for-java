// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureMySqlTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMySqlTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMySqlTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"AzureMySqlTable\",\"typeProperties\":{\"tableName\":\"dataw\",\"table\":\"datazyjj\"},\"description\":\"t\",\"structure\":\"datazql\",\"schema\":\"dataagwiijc\",\"linkedServiceName\":{\"referenceName\":\"qiywhxpsbapial\",\"parameters\":{\"zudegefxlieg\":\"dataydp\",\"smhssfnwh\":\"dataot\",\"nfmkcuft\":\"datakahhec\",\"dvhzfkdn\":\"datadgwuzron\"}},\"parameters\":{\"zfzdjekeb\":{\"type\":\"Object\",\"defaultValue\":\"datacikgxkk\"},\"jwyfi\":{\"type\":\"Array\",\"defaultValue\":\"dataxz\"}},\"annotations\":[\"datagcjf\",\"dataiwu\",\"datapjkakrxifqnf\"],\"folder\":{\"name\":\"xsqtzngxbs\"},\"\":{\"ly\":\"datawguxcmmhipbvskci\"}}")
                .toObject(AzureMySqlTableDataset.class);
        Assertions.assertEquals("t", model.description());
        Assertions.assertEquals("qiywhxpsbapial", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("zfzdjekeb").type());
        Assertions.assertEquals("xsqtzngxbs", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMySqlTableDataset model =
            new AzureMySqlTableDataset()
                .withDescription("t")
                .withStructure("datazql")
                .withSchema("dataagwiijc")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("qiywhxpsbapial")
                        .withParameters(
                            mapOf(
                                "zudegefxlieg",
                                "dataydp",
                                "smhssfnwh",
                                "dataot",
                                "nfmkcuft",
                                "datakahhec",
                                "dvhzfkdn",
                                "datadgwuzron")))
                .withParameters(
                    mapOf(
                        "zfzdjekeb",
                        new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datacikgxkk"),
                        "jwyfi",
                        new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataxz")))
                .withAnnotations(Arrays.asList("datagcjf", "dataiwu", "datapjkakrxifqnf"))
                .withFolder(new DatasetFolder().withName("xsqtzngxbs"))
                .withTableName("dataw")
                .withTable("datazyjj");
        model = BinaryData.fromObject(model).toObject(AzureMySqlTableDataset.class);
        Assertions.assertEquals("t", model.description());
        Assertions.assertEquals("qiywhxpsbapial", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("zfzdjekeb").type());
        Assertions.assertEquals("xsqtzngxbs", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
