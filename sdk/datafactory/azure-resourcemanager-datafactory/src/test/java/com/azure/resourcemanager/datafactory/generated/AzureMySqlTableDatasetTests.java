// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureMySqlTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMySqlTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMySqlTableDataset model = BinaryData.fromString(
            "{\"type\":\"AzureMySqlTable\",\"typeProperties\":{\"tableName\":\"dataalezaydpuzudege\",\"table\":\"datalieggotosmhssfnw\"},\"description\":\"kahhec\",\"structure\":\"datafmkcu\",\"schema\":\"datahdgwuzrono\",\"linkedServiceName\":{\"referenceName\":\"vhzfkdnwy\",\"parameters\":{\"zfzdjekeb\":\"datacikgxkk\",\"xz\":\"dataw\"}},\"parameters\":{\"lpj\":{\"type\":\"Bool\",\"defaultValue\":\"dataixirgcjfaiw\"},\"tzngxbsalewgu\":{\"type\":\"Array\",\"defaultValue\":\"datarxifqnfforxs\"}},\"annotations\":[\"datam\",\"datai\"],\"folder\":{\"name\":\"skcitlynkwfsaan\"},\"\":{\"vm\":\"databm\"}}")
            .toObject(AzureMySqlTableDataset.class);
        Assertions.assertEquals("kahhec", model.description());
        Assertions.assertEquals("vhzfkdnwy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("lpj").type());
        Assertions.assertEquals("skcitlynkwfsaan", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMySqlTableDataset model = new AzureMySqlTableDataset().withDescription("kahhec")
            .withStructure("datafmkcu")
            .withSchema("datahdgwuzrono")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("vhzfkdnwy")
                .withParameters(mapOf("zfzdjekeb", "datacikgxkk", "xz", "dataw")))
            .withParameters(mapOf("lpj",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataixirgcjfaiw"),
                "tzngxbsalewgu",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datarxifqnfforxs")))
            .withAnnotations(Arrays.asList("datam", "datai"))
            .withFolder(new DatasetFolder().withName("skcitlynkwfsaan"))
            .withTableName("dataalezaydpuzudege")
            .withTable("datalieggotosmhssfnw");
        model = BinaryData.fromObject(model).toObject(AzureMySqlTableDataset.class);
        Assertions.assertEquals("kahhec", model.description());
        Assertions.assertEquals("vhzfkdnwy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("lpj").type());
        Assertions.assertEquals("skcitlynkwfsaan", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
