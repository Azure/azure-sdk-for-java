// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureMySqlTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMySqlTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMySqlTableDataset model = BinaryData.fromString(
            "{\"type\":\"AzureMySqlTable\",\"typeProperties\":{\"tableName\":\"datapqokhdyncra\",\"table\":\"datasewbempfapmqnm\"},\"description\":\"yksygih\",\"structure\":\"datalmslnunkqvzlbbb\",\"schema\":\"datadexquaw\",\"linkedServiceName\":{\"referenceName\":\"xizbfzet\",\"parameters\":{\"pnbmajvvyxt\":\"dataw\",\"nakzixbkaybfmln\":\"datav\",\"nrzblxna\":\"datafwhrmvlaknujmw\"}},\"parameters\":{\"hl\":{\"type\":\"Int\",\"defaultValue\":\"datandcbs\"},\"dvt\":{\"type\":\"SecureString\",\"defaultValue\":\"datajkkovohwvprj\"},\"ffhvqii\":{\"type\":\"Array\",\"defaultValue\":\"datamdtacntjn\"},\"sxjbjkewrigl\":{\"type\":\"String\",\"defaultValue\":\"datatwskkfkuyikmxhh\"}},\"annotations\":[\"datarefeclflxcjf\",\"datazwncvdefxonz\",\"datapcjptnnt\"],\"folder\":{\"name\":\"jqpzj\"},\"\":{\"h\":\"datajr\",\"agwviqehmdqvaoli\":\"datagsjbi\",\"m\":\"dataxdfsfvkjc\",\"rkd\":\"datarsvxphtjnhptj\"}}")
            .toObject(AzureMySqlTableDataset.class);
        Assertions.assertEquals("yksygih", model.description());
        Assertions.assertEquals("xizbfzet", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("hl").type());
        Assertions.assertEquals("jqpzj", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMySqlTableDataset model = new AzureMySqlTableDataset().withDescription("yksygih")
            .withStructure("datalmslnunkqvzlbbb")
            .withSchema("datadexquaw")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("xizbfzet")
                .withParameters(
                    mapOf("pnbmajvvyxt", "dataw", "nakzixbkaybfmln", "datav", "nrzblxna", "datafwhrmvlaknujmw")))
            .withParameters(mapOf("hl",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datandcbs"), "dvt",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datajkkovohwvprj"),
                "ffhvqii", new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datamdtacntjn"),
                "sxjbjkewrigl",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datatwskkfkuyikmxhh")))
            .withAnnotations(Arrays.asList("datarefeclflxcjf", "datazwncvdefxonz", "datapcjptnnt"))
            .withFolder(new DatasetFolder().withName("jqpzj"))
            .withTableName("datapqokhdyncra")
            .withTable("datasewbempfapmqnm");
        model = BinaryData.fromObject(model).toObject(AzureMySqlTableDataset.class);
        Assertions.assertEquals("yksygih", model.description());
        Assertions.assertEquals("xizbfzet", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("hl").type());
        Assertions.assertEquals("jqpzj", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
