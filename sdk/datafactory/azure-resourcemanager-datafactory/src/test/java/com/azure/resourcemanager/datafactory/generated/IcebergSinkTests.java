// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IcebergSink;
import com.azure.resourcemanager.datafactory.models.IcebergWriteSettings;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class IcebergSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IcebergSink model = BinaryData.fromString(
            "{\"type\":\"IcebergSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"datamvzi\",\"disableMetricsCollection\":\"datacxnxci\",\"copyBehavior\":\"datalvzxucnpa\",\"metadata\":[{\"name\":\"datairefifb\",\"value\":\"dataljhgqqjmfrm\"},{\"name\":\"datav\",\"value\":\"databrmmweeuy\"},{\"name\":\"datajhpxjlg\",\"value\":\"datarmlirnadqeqf\"},{\"name\":\"datacxvpogrtkdit\",\"value\":\"dataokefdeeppycws\"}],\"\":{\"fnsy\":\"datafo\",\"jhmgvmeemjazql\":\"dataeytrwy\",\"holkoyxmspud\":\"dataigkxtgshad\",\"upjxsrnq\":\"dataqwvzunrq\"}},\"formatSettings\":{\"type\":\"IcebergWriteSettings\",\"\":{\"zifrmoftilhoyemh\":\"datawof\",\"rcdtkv\":\"dataaepgdd\",\"ubmhsxtry\":\"datarifcqmfv\"}},\"writeBatchSize\":\"datavwm\",\"writeBatchTimeout\":\"dataovturdhnnm\",\"sinkRetryCount\":\"dataizwmptsygqzt\",\"sinkRetryWait\":\"datavuei\",\"maxConcurrentConnections\":\"dataapgqx\",\"disableMetricsCollection\":\"databvwxyumqoqw\",\"\":{\"xmxlnhqxzewlww\":\"datayiyeigngrzve\"}}")
            .toObject(IcebergSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IcebergSink model = new IcebergSink().withWriteBatchSize("datavwm")
            .withWriteBatchTimeout("dataovturdhnnm")
            .withSinkRetryCount("dataizwmptsygqzt")
            .withSinkRetryWait("datavuei")
            .withMaxConcurrentConnections("dataapgqx")
            .withDisableMetricsCollection("databvwxyumqoqw")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("datamvzi")
                .withDisableMetricsCollection("datacxnxci")
                .withCopyBehavior("datalvzxucnpa")
                .withMetadata(Arrays.asList(new MetadataItem().withName("datairefifb").withValue("dataljhgqqjmfrm"),
                    new MetadataItem().withName("datav").withValue("databrmmweeuy"),
                    new MetadataItem().withName("datajhpxjlg").withValue("datarmlirnadqeqf"),
                    new MetadataItem().withName("datacxvpogrtkdit").withValue("dataokefdeeppycws")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(new IcebergWriteSettings());
        model = BinaryData.fromObject(model).toObject(IcebergSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
