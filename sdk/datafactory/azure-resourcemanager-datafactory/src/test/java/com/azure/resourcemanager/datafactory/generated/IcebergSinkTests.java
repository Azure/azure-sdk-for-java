// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IcebergSink;
import com.azure.resourcemanager.datafactory.models.IcebergWriteSettings;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class IcebergSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IcebergSink model = BinaryData.fromString(
            "{\"type\":\"IcebergSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"databznjngerwo\",\"disableMetricsCollection\":\"dataps\",\"copyBehavior\":\"dataoslqmftkqzafjy\",\"metadata\":[{\"name\":\"databzbaboeeg\",\"value\":\"dataecqyzdyzilo\"}],\"\":{\"hyvnqbhclbbk\":\"databtnhiaqegj\",\"xmjmhclhcqcjn\":\"dataoqzzyrovvna\",\"lrjggvydtjebbacs\":\"datawmbwqgsidaso\",\"apxxbkxwh\":\"datairzt\"}},\"formatSettings\":{\"type\":\"IcebergWriteSettings\",\"\":{\"kbslyqmlgsghcnyb\":\"datacpstf\",\"zogs\":\"datavzltbgwjaepjmkr\",\"sirotj\":\"datazoqjbnfaxcdcmqej\",\"kgqyuvhlpmjpzgjn\":\"dataltugobscpt\"}},\"writeBatchSize\":\"datafozn\",\"writeBatchTimeout\":\"databoumpksxkdjpfsm\",\"sinkRetryCount\":\"datar\",\"sinkRetryWait\":\"datalwlehhqxyjlbk\",\"maxConcurrentConnections\":\"datarrptblsatakz\",\"disableMetricsCollection\":\"datay\",\"\":{\"eyv\":\"datawq\",\"uimvz\":\"datadnjmjies\",\"nxcimalvzxu\":\"datayic\",\"ifbi\":\"datanpaesraire\"}}")
            .toObject(IcebergSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IcebergSink model = new IcebergSink().withWriteBatchSize("datafozn")
            .withWriteBatchTimeout("databoumpksxkdjpfsm")
            .withSinkRetryCount("datar")
            .withSinkRetryWait("datalwlehhqxyjlbk")
            .withMaxConcurrentConnections("datarrptblsatakz")
            .withDisableMetricsCollection("datay")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("databznjngerwo")
                .withDisableMetricsCollection("dataps")
                .withCopyBehavior("dataoslqmftkqzafjy")
                .withMetadata(Arrays.asList(new MetadataItem().withName("databzbaboeeg").withValue("dataecqyzdyzilo")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(new IcebergWriteSettings());
        model = BinaryData.fromObject(model).toObject(IcebergSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
