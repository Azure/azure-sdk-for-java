// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IcebergSink;
import com.azure.resourcemanager.datafactory.models.IcebergWriteSettings;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class IcebergSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IcebergSink model = BinaryData.fromString(
            "{\"type\":\"IcebergSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"dataqgeovnlbjfsollr\",\"disableMetricsCollection\":\"dataulnhxrcjshicvrm\",\"copyBehavior\":\"datagpcalqbxpp\",\"metadata\":[{\"name\":\"datarfshkjgspboae\",\"value\":\"dataxibrooogijiqwxwp\"},{\"name\":\"datad\",\"value\":\"datanp\"},{\"name\":\"datavruhdjzivlaxii\",\"value\":\"datanqmbfptzix\"},{\"name\":\"datasxxbdtjvvngn\",\"value\":\"datakzulmqxficinw\"}],\"\":{\"er\":\"dataeyxt\",\"ytten\":\"datattobosjxb\",\"lyimhspj\":\"datauditumyycvtya\",\"eoutqo\":\"datahivxblqvwhjgtbh\"}},\"formatSettings\":{\"type\":\"IcebergWriteSettings\",\"\":{\"qbo\":\"dataqi\",\"rdxoutkgezulnnt\":\"datagcwzgdf\",\"lxoljbpoeoyw\":\"databarejxj\",\"rx\":\"datakhhavwhrivvzrccy\"}},\"writeBatchSize\":\"dataypwudeearbbxan\",\"writeBatchTimeout\":\"dataiqkjupvidzh\",\"sinkRetryCount\":\"datappqcgbp\",\"sinkRetryWait\":\"datani\",\"maxConcurrentConnections\":\"datahd\",\"disableMetricsCollection\":\"datau\",\"\":{\"jbakpasuugcngdu\":\"datatlha\",\"koyrppsnljduwkbo\":\"datavdenhguvai\",\"hv\":\"datalmrhn\"}}")
            .toObject(IcebergSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IcebergSink model
            = new IcebergSink().withWriteBatchSize("dataypwudeearbbxan")
                .withWriteBatchTimeout("dataiqkjupvidzh")
                .withSinkRetryCount("datappqcgbp")
                .withSinkRetryWait("datani")
                .withMaxConcurrentConnections("datahd")
                .withDisableMetricsCollection("datau")
                .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("dataqgeovnlbjfsollr")
                    .withDisableMetricsCollection("dataulnhxrcjshicvrm")
                    .withCopyBehavior("datagpcalqbxpp")
                    .withMetadata(Arrays.asList(
                        new MetadataItem().withName("datarfshkjgspboae").withValue("dataxibrooogijiqwxwp"),
                        new MetadataItem().withName("datad").withValue("datanp"),
                        new MetadataItem().withName("datavruhdjzivlaxii").withValue("datanqmbfptzix"),
                        new MetadataItem().withName("datasxxbdtjvvngn").withValue("datakzulmqxficinw")))
                    .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
                .withFormatSettings(new IcebergWriteSettings());
        model = BinaryData.fromObject(model).toObject(IcebergSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
