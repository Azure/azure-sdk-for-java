// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.ValidationActivity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ValidationActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ValidationActivity model = BinaryData.fromString(
            "{\"type\":\"Validation\",\"typeProperties\":{\"timeout\":\"datasnbttefbbr\",\"sleep\":\"dataof\",\"minimumSize\":\"datashozjkwjwvdo\",\"childItems\":\"datacsgktfzstyacbek\",\"dataset\":{\"referenceName\":\"xev\",\"parameters\":{\"yhexlhlkpied\":\"datab\",\"zpynedtsibtdmgw\":\"datartvdc\",\"aawehxshamzfx\":\"datao\"}}},\"name\":\"cuvj\",\"description\":\"yvoswgkbzrmef\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"ia\",\"dependencyConditions\":[\"Completed\"],\"\":{\"eykvgfhu\":\"dataghnqe\",\"rytkmfhbpcr\":\"datahotzygqdcaims\",\"sn\":\"dataynunrajtbumaid\"}},{\"activity\":\"vyutcvumvgttjvc\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"gx\":\"datanj\",\"kdqqombiao\":\"dataxkcen\"}}],\"userProperties\":[{\"name\":\"woixnuffraursqt\",\"value\":\"datahtqbh\"},{\"name\":\"dpnzqqti\",\"value\":\"datakreanakkg\"},{\"name\":\"fkigukfximwinway\",\"value\":\"datarlvhlferiqend\"},{\"name\":\"yc\",\"value\":\"datanghszgaubibizj\"}],\"\":{\"bpypwrvnv\":\"datafjogswfbqe\",\"bsx\":\"dataetaydhfgxyd\",\"t\":\"datahjsraumawfzyvxk\"}}")
            .toObject(ValidationActivity.class);
        Assertions.assertEquals("cuvj", model.name());
        Assertions.assertEquals("yvoswgkbzrmef", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("ia", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("woixnuffraursqt", model.userProperties().get(0).name());
        Assertions.assertEquals("xev", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ValidationActivity model = new ValidationActivity().withName("cuvj")
            .withDescription("yvoswgkbzrmef")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("ia")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("vyutcvumvgttjvc")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("woixnuffraursqt").withValue("datahtqbh"),
                new UserProperty().withName("dpnzqqti").withValue("datakreanakkg"),
                new UserProperty().withName("fkigukfximwinway").withValue("datarlvhlferiqend"),
                new UserProperty().withName("yc").withValue("datanghszgaubibizj")))
            .withTimeout("datasnbttefbbr")
            .withSleep("dataof")
            .withMinimumSize("datashozjkwjwvdo")
            .withChildItems("datacsgktfzstyacbek")
            .withDataset(new DatasetReference().withReferenceName("xev")
                .withParameters(
                    mapOf("yhexlhlkpied", "datab", "zpynedtsibtdmgw", "datartvdc", "aawehxshamzfx", "datao")));
        model = BinaryData.fromObject(model).toObject(ValidationActivity.class);
        Assertions.assertEquals("cuvj", model.name());
        Assertions.assertEquals("yvoswgkbzrmef", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("ia", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("woixnuffraursqt", model.userProperties().get(0).name());
        Assertions.assertEquals("xev", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
