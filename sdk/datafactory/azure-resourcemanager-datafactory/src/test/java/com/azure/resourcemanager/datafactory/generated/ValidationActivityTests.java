// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.ValidationActivity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ValidationActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ValidationActivity model = BinaryData.fromString(
            "{\"type\":\"Validation\",\"typeProperties\":{\"timeout\":\"datamxxgocpzqrbtyz\",\"sleep\":\"datawrufiouafxp\",\"minimumSize\":\"datazmwx\",\"childItems\":\"datagi\",\"dataset\":{\"referenceName\":\"gnplzbtvpuigtnjy\",\"parameters\":{\"extlyyvebpykzhr\":\"datavvitxoitnqmiwlri\"}}},\"name\":\"usbtwpvmzgnxepa\",\"description\":\"v\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"lu\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Completed\"],\"\":{\"kl\":\"datasxsnbttefbb\",\"vdohocsgktfzs\":\"datafkvshozjkwj\",\"ekcxe\":\"datayac\",\"vbzyhexlh\":\"datai\"}},{\"activity\":\"kpiedcrtvdcbzpyn\",\"dependencyConditions\":[\"Skipped\",\"Failed\"],\"\":{\"amzfxocuvjbp\":\"datatdmgwxowaawehxs\",\"swgkbzrmeftg\":\"datav\",\"agsyvzghnqed\":\"datafuuu\",\"ihotzygqdc\":\"dataykvgfh\"}}],\"userProperties\":[{\"name\":\"srrytkmf\",\"value\":\"databpcr\"},{\"name\":\"ynunrajtbumaid\",\"value\":\"datasn\"}],\"\":{\"vcgtlttnjpgxux\":\"datautcvumvgtt\",\"aq\":\"datacenxkdqqombia\",\"htqbh\":\"datawoixnuffraursqt\",\"kreanakkg\":\"datadpnzqqti\"}}")
            .toObject(ValidationActivity.class);
        Assertions.assertEquals("usbtwpvmzgnxepa", model.name());
        Assertions.assertEquals("v", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("lu", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("srrytkmf", model.userProperties().get(0).name());
        Assertions.assertEquals("gnplzbtvpuigtnjy", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ValidationActivity model = new ValidationActivity().withName("usbtwpvmzgnxepa").withDescription("v")
            .withState(ActivityState.INACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("lu")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("kpiedcrtvdcbzpyn")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("srrytkmf").withValue("databpcr"),
                new UserProperty().withName("ynunrajtbumaid").withValue("datasn")))
            .withTimeout("datamxxgocpzqrbtyz").withSleep("datawrufiouafxp").withMinimumSize("datazmwx")
            .withChildItems("datagi").withDataset(new DatasetReference().withReferenceName("gnplzbtvpuigtnjy")
                .withParameters(mapOf("extlyyvebpykzhr", "datavvitxoitnqmiwlri")));
        model = BinaryData.fromObject(model).toObject(ValidationActivity.class);
        Assertions.assertEquals("usbtwpvmzgnxepa", model.name());
        Assertions.assertEquals("v", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("lu", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("srrytkmf", model.userProperties().get(0).name());
        Assertions.assertEquals("gnplzbtvpuigtnjy", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
