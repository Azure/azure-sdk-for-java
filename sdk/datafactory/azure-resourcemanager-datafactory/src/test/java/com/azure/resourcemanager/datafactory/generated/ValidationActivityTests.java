// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.ValidationActivity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ValidationActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ValidationActivity model = BinaryData.fromString(
            "{\"type\":\"k\",\"typeProperties\":{\"timeout\":\"datarnfavqefiwwhbkxz\",\"sleep\":\"datayovlhm\",\"minimumSize\":\"dataobiagwuefmyiw\",\"childItems\":\"datatau\",\"dataset\":{\"referenceName\":\"msyfjno\",\"parameters\":{\"fyarl\":\"databcezd\",\"erql\":\"datallg\"}}},\"name\":\"kvkmfkmchc\",\"description\":\"gjvyosmxovyfdbah\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"s\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Completed\"],\"\":{\"zouayvejwqeyp\":\"datadvn\",\"hiyus\":\"dataoawnk\",\"mrnrhsv\":\"datahmjlkknwsja\",\"ivkzgcqy\":\"datajnlerm\"}},{\"activity\":\"vfekjvclbkkj\",\"dependencyConditions\":[\"Succeeded\",\"Failed\",\"Succeeded\",\"Completed\"],\"\":{\"vpmwnmuzcjnkaw\":\"dataftqah\"}},{\"activity\":\"yhnnwtknpbzktk\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Failed\",\"Succeeded\"],\"\":{\"rebbonjhmhfseykp\":\"datazutwpsnldjj\",\"gzadpwhldxbvry\":\"datagpqnesutnsm\"}}],\"userProperties\":[{\"name\":\"zs\",\"value\":\"datamugz\"},{\"name\":\"s\",\"value\":\"datazke\"}],\"\":{\"abrhiao\":\"dataetvcxabzwehvsmt\",\"ziquirozqusdz\":\"dataldtkqoajpxtkraf\"}}")
            .toObject(ValidationActivity.class);
        Assertions.assertEquals("kvkmfkmchc", model.name());
        Assertions.assertEquals("gjvyosmxovyfdbah", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("s", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("zs", model.userProperties().get(0).name());
        Assertions.assertEquals("msyfjno", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ValidationActivity model = new ValidationActivity().withName("kvkmfkmchc")
            .withDescription("gjvyosmxovyfdbah")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("s")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED,
                        DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("vfekjvclbkkj")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("yhnnwtknpbzktk")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SKIPPED,
                        DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("zs").withValue("datamugz"),
                new UserProperty().withName("s").withValue("datazke")))
            .withTimeout("datarnfavqefiwwhbkxz")
            .withSleep("datayovlhm")
            .withMinimumSize("dataobiagwuefmyiw")
            .withChildItems("datatau")
            .withDataset(new DatasetReference().withReferenceName("msyfjno")
                .withParameters(mapOf("fyarl", "databcezd", "erql", "datallg")));
        model = BinaryData.fromObject(model).toObject(ValidationActivity.class);
        Assertions.assertEquals("kvkmfkmchc", model.name());
        Assertions.assertEquals("gjvyosmxovyfdbah", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("s", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("zs", model.userProperties().get(0).name());
        Assertions.assertEquals("msyfjno", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
