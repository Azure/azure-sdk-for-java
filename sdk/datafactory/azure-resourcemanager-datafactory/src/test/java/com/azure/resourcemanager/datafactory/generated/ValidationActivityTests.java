// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.ValidationActivity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ValidationActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ValidationActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"Validation\",\"typeProperties\":{\"timeout\":\"datazigelphauldals\",\"sleep\":\"dataanhe\",\"minimumSize\":\"dataxllqyvbl\",\"childItems\":\"datarskxhg\",\"dataset\":{\"referenceName\":\"vgviycjulun\",\"parameters\":{\"khoa\":\"dataficipibnjpivoiz\",\"hjlahdplic\":\"datam\",\"eynts\":\"datavodudaubmj\",\"oxuedmlocrkf\":\"datawxpamubgrjkg\"}}},\"name\":\"gjywp\",\"description\":\"vvjyenwvgvhh\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"wlkfljooiiviwlf\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Succeeded\"],\"\":{\"oqrvnhcuoghvkzmg\":\"dataxbrthwbitrwwko\",\"fjahwypdhrqjjl\":\"datatemp\",\"sgarxtgexmxgqgqu\":\"dataato\"}},{\"activity\":\"lyrtkvftlbt\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"umnucqewxcwr\":\"dataasrwo\",\"idcytnzy\":\"datakwmvcxyuem\",\"srlhxfmvngdrnt\":\"datasydwgq\",\"hnh\":\"datavn\"}},{\"activity\":\"bwdborjy\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Skipped\"],\"\":{\"kpibeif\":\"dataigtdjqczoq\",\"t\":\"datamozofo\",\"qugycorgnxmn\":\"datahlnaymsgbyho\"}},{\"activity\":\"ennobjixoqqjbsag\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Completed\",\"Failed\"],\"\":{\"xuiaktnmwlklqhw\":\"dataimwlparh\"}}],\"userProperties\":[{\"name\":\"eoefwnjsorhpga\",\"value\":\"datar\"},{\"name\":\"pkoezcab\",\"value\":\"dataylsuiyvbildwqlx\"}],\"\":{\"pylpmtwdvdtzdr\":\"dataqei\",\"urwzrx\":\"dataaxswiind\",\"mbtvcdsl\":\"datahacvsj\"}}")
                .toObject(ValidationActivity.class);
        Assertions.assertEquals("gjywp", model.name());
        Assertions.assertEquals("vvjyenwvgvhh", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("wlkfljooiiviwlf", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("eoefwnjsorhpga", model.userProperties().get(0).name());
        Assertions.assertEquals("vgviycjulun", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ValidationActivity model =
            new ValidationActivity()
                .withName("gjywp")
                .withDescription("vvjyenwvgvhh")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("wlkfljooiiviwlf")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("lyrtkvftlbt")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("bwdborjy")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.FAILED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("ennobjixoqqjbsag")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("eoefwnjsorhpga").withValue("datar"),
                            new UserProperty().withName("pkoezcab").withValue("dataylsuiyvbildwqlx")))
                .withTimeout("datazigelphauldals")
                .withSleep("dataanhe")
                .withMinimumSize("dataxllqyvbl")
                .withChildItems("datarskxhg")
                .withDataset(
                    new DatasetReference()
                        .withReferenceName("vgviycjulun")
                        .withParameters(
                            mapOf(
                                "khoa",
                                "dataficipibnjpivoiz",
                                "hjlahdplic",
                                "datam",
                                "eynts",
                                "datavodudaubmj",
                                "oxuedmlocrkf",
                                "datawxpamubgrjkg")));
        model = BinaryData.fromObject(model).toObject(ValidationActivity.class);
        Assertions.assertEquals("gjywp", model.name());
        Assertions.assertEquals("vvjyenwvgvhh", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("wlkfljooiiviwlf", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("eoefwnjsorhpga", model.userProperties().get(0).name());
        Assertions.assertEquals("vgviycjulun", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
