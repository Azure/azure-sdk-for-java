// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.ValidationActivity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ValidationActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ValidationActivity model = BinaryData.fromString(
            "{\"type\":\"Validation\",\"typeProperties\":{\"timeout\":\"datanq\",\"sleep\":\"datanvdorsgcvgkn\",\"minimumSize\":\"datapcne\",\"childItems\":\"dataplcbq\",\"dataset\":{\"referenceName\":\"bbzfcjmhp\",\"parameters\":{\"xymby\":\"datajpdyztqpszbt\",\"xotizvw\":\"datatdnraxe\",\"vjiyluvebco\":\"datahadcotf\"}}},\"name\":\"bzs\",\"description\":\"eyokwaxehxsw\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"fttfqlcxymcmog\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Succeeded\",\"Succeeded\"],\"\":{\"wnicdgim\":\"datatsgsqoadsbace\",\"xzmxww\":\"databumpplbcarcyrftc\"}},{\"activity\":\"hdlrfyonnb\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Skipped\",\"Succeeded\"],\"\":{\"jcou\":\"datam\",\"zirkyxhqwoxm\":\"datazodolehchimzrc\"}},{\"activity\":\"obuanybfm\",\"dependencyConditions\":[\"Succeeded\",\"Failed\",\"Failed\",\"Succeeded\"],\"\":{\"kqufdmgmfyi\":\"datapfpsp\",\"rilhyfxmrq\":\"datarfkfgr\",\"eavawywofgccj\":\"dataicknygzdrdicwm\"}},{\"activity\":\"hjvvrrxclf\",\"dependencyConditions\":[\"Completed\"],\"\":{\"xxfkfthw\":\"dataqwyiuhhuftnuigx\",\"lstgsmeijgjbev\":\"dataossokafy\",\"wvdklgwoyw\":\"datasrcsyjx\"}}],\"userProperties\":[{\"name\":\"fmenbaj\",\"value\":\"dataeelbcsyaohizfysa\"}],\"\":{\"ddohxvcsoqxydcqp\":\"dataupft\",\"iwtkhcmoc\":\"dataywttdanu\",\"khmbks\":\"datagtmfug\",\"mhn\":\"datakkztexds\"}}")
            .toObject(ValidationActivity.class);
        Assertions.assertEquals("bzs", model.name());
        Assertions.assertEquals("eyokwaxehxsw", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("fttfqlcxymcmog", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("fmenbaj", model.userProperties().get(0).name());
        Assertions.assertEquals("bbzfcjmhp", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ValidationActivity model = new ValidationActivity().withName("bzs")
            .withDescription("eyokwaxehxsw")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("fttfqlcxymcmog")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("hdlrfyonnb")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.COMPLETED, DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("obuanybfm")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED,
                        DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("hjvvrrxclf")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("fmenbaj").withValue("dataeelbcsyaohizfysa")))
            .withTimeout("datanq")
            .withSleep("datanvdorsgcvgkn")
            .withMinimumSize("datapcne")
            .withChildItems("dataplcbq")
            .withDataset(new DatasetReference().withReferenceName("bbzfcjmhp")
                .withParameters(
                    mapOf("xymby", "datajpdyztqpszbt", "xotizvw", "datatdnraxe", "vjiyluvebco", "datahadcotf")));
        model = BinaryData.fromObject(model).toObject(ValidationActivity.class);
        Assertions.assertEquals("bzs", model.name());
        Assertions.assertEquals("eyokwaxehxsw", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("fttfqlcxymcmog", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("fmenbaj", model.userProperties().get(0).name());
        Assertions.assertEquals("bbzfcjmhp", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
