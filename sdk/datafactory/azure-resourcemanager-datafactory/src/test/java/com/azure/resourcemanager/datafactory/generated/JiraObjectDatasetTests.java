// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.JiraObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JiraObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JiraObjectDataset model = BinaryData.fromString(
            "{\"type\":\"JiraObject\",\"typeProperties\":{\"tableName\":\"datavlozukgsnu\"},\"description\":\"yx\",\"structure\":\"dataf\",\"schema\":\"dataxcebnbeo\",\"linkedServiceName\":{\"referenceName\":\"kemqqerwqx\",\"parameters\":{\"mdfkhttuobr\":\"datav\",\"wtfma\":\"datazmhytebjkjgee\",\"mhlvyqn\":\"datavbmnhtwofx\"}},\"parameters\":{\"qqrugwespscvs\":{\"type\":\"String\",\"defaultValue\":\"datamlqkiekhj\"}},\"annotations\":[\"datatluwozfvzasupc\",\"dataqgxcvwio\",\"datahcmcgm\",\"datam\"],\"folder\":{\"name\":\"qxuyi\"},\"\":{\"dqseypdlmajpuy\":\"datan\"}}")
            .toObject(JiraObjectDataset.class);
        Assertions.assertEquals("yx", model.description());
        Assertions.assertEquals("kemqqerwqx", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("qqrugwespscvs").type());
        Assertions.assertEquals("qxuyi", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JiraObjectDataset model = new JiraObjectDataset().withDescription("yx")
            .withStructure("dataf")
            .withSchema("dataxcebnbeo")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("kemqqerwqx")
                .withParameters(
                    mapOf("mdfkhttuobr", "datav", "wtfma", "datazmhytebjkjgee", "mhlvyqn", "datavbmnhtwofx")))
            .withParameters(mapOf("qqrugwespscvs",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datamlqkiekhj")))
            .withAnnotations(Arrays.asList("datatluwozfvzasupc", "dataqgxcvwio", "datahcmcgm", "datam"))
            .withFolder(new DatasetFolder().withName("qxuyi"))
            .withTableName("datavlozukgsnu");
        model = BinaryData.fromObject(model).toObject(JiraObjectDataset.class);
        Assertions.assertEquals("yx", model.description());
        Assertions.assertEquals("kemqqerwqx", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("qqrugwespscvs").type());
        Assertions.assertEquals("qxuyi", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
