// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.JiraObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JiraObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JiraObjectDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"JiraObject\",\"typeProperties\":{\"tableName\":\"datamhp\"},\"description\":\"sfgvrvq\",\"structure\":\"datawbdrwroqkljnzpqh\",\"schema\":\"datasarkyulfa\",\"linkedServiceName\":{\"referenceName\":\"ea\",\"parameters\":{\"geytlplslfc\":\"dataqenhekzaz\",\"ksuowt\":\"datae\",\"rhnxzmfvmw\":\"datalkyqfnjo\",\"rawwhyxf\":\"datanrtc\"}},\"parameters\":{\"uns\":{\"type\":\"String\",\"defaultValue\":\"datadmvwn\"}},\"annotations\":[\"dataevzshqykebmps\",\"dataaezc\",\"datadkckr\"],\"folder\":{\"name\":\"qdmhcejstfs\"},\"\":{\"wxqd\":\"datajakgk\",\"wdjox\":\"dataoqzh\",\"sobvcnsb\":\"datakbd\"}}")
                .toObject(JiraObjectDataset.class);
        Assertions.assertEquals("sfgvrvq", model.description());
        Assertions.assertEquals("ea", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("uns").type());
        Assertions.assertEquals("qdmhcejstfs", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JiraObjectDataset model =
            new JiraObjectDataset()
                .withDescription("sfgvrvq")
                .withStructure("datawbdrwroqkljnzpqh")
                .withSchema("datasarkyulfa")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("ea")
                        .withParameters(
                            mapOf(
                                "geytlplslfc",
                                "dataqenhekzaz",
                                "ksuowt",
                                "datae",
                                "rhnxzmfvmw",
                                "datalkyqfnjo",
                                "rawwhyxf",
                                "datanrtc")))
                .withParameters(
                    mapOf(
                        "uns",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datadmvwn")))
                .withAnnotations(Arrays.asList("dataevzshqykebmps", "dataaezc", "datadkckr"))
                .withFolder(new DatasetFolder().withName("qdmhcejstfs"))
                .withTableName("datamhp");
        model = BinaryData.fromObject(model).toObject(JiraObjectDataset.class);
        Assertions.assertEquals("sfgvrvq", model.description());
        Assertions.assertEquals("ea", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("uns").type());
        Assertions.assertEquals("qdmhcejstfs", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
