// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.MultiplePipelineTrigger;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MultiplePipelineTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MultiplePipelineTrigger model = BinaryData.fromString(
            "{\"type\":\"MultiplePipelineTrigger\",\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"oxj\",\"name\":\"ha\"},\"parameters\":{\"fcr\":\"dataqktbgu\",\"xergclmqkufq\":\"datatcupo\",\"kqezeee\":\"datamylrtnzyosd\",\"fk\":\"dataligunw\"}},{\"pipelineReference\":{\"referenceName\":\"vwzywxzx\",\"name\":\"htqcwidspegxdeai\"},\"parameters\":{\"yjnmdc\":\"datacmcqslngmsip\",\"cxacgeiyfpfaaah\":\"datatj\",\"fjld\":\"dataphuplfopqgcadnt\"}}],\"description\":\"f\",\"runtimeState\":\"Stopped\",\"annotations\":[\"dataoygcofh\"],\"\":{\"wuwbnngcdtxxyz\":\"datahhirbgmxmvxbaazn\",\"uqtjcyllpas\":\"dataybndiqpadhrij\"}}")
            .toObject(MultiplePipelineTrigger.class);
        Assertions.assertEquals("f", model.description());
        Assertions.assertEquals("oxj", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("ha", model.pipelines().get(0).pipelineReference().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MultiplePipelineTrigger model
            = new MultiplePipelineTrigger().withDescription("f").withAnnotations(Arrays.asList("dataoygcofh"))
                .withPipelines(Arrays.asList(
                    new TriggerPipelineReference()
                        .withPipelineReference(new PipelineReference().withReferenceName("oxj").withName("ha"))
                        .withParameters(mapOf("fcr", "dataqktbgu", "xergclmqkufq", "datatcupo", "kqezeee",
                            "datamylrtnzyosd", "fk", "dataligunw")),
                    new TriggerPipelineReference()
                        .withPipelineReference(
                            new PipelineReference().withReferenceName("vwzywxzx").withName("htqcwidspegxdeai"))
                        .withParameters(mapOf("yjnmdc", "datacmcqslngmsip", "cxacgeiyfpfaaah", "datatj", "fjld",
                            "dataphuplfopqgcadnt"))));
        model = BinaryData.fromObject(model).toObject(MultiplePipelineTrigger.class);
        Assertions.assertEquals("f", model.description());
        Assertions.assertEquals("oxj", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("ha", model.pipelines().get(0).pipelineReference().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
