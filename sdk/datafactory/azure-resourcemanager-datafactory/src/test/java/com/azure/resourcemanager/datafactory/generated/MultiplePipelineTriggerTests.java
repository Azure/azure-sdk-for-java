// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.MultiplePipelineTrigger;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MultiplePipelineTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MultiplePipelineTrigger model = BinaryData.fromString(
            "{\"type\":\"MultiplePipelineTrigger\",\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"tknpb\",\"name\":\"tkwstumjtg\"},\"parameters\":{\"m\":\"datawpsnldjjgrebbonj\",\"nsmtgza\":\"datafseykprgpqnesu\"}},{\"pipelineReference\":{\"referenceName\":\"whldxbvrytthzs\",\"name\":\"ugzs\"},\"parameters\":{\"s\":\"datakevvqetvcxabzweh\"}},{\"pipelineReference\":{\"referenceName\":\"m\",\"name\":\"rhiaomldtkqoajp\"},\"parameters\":{\"uiroz\":\"datarafhzi\"}}],\"description\":\"sdznnhhjdfyu\",\"runtimeState\":\"Started\",\"annotations\":[\"datambhaumpwgtero\",\"dataenvjouzjk\",\"dataxbraqzrbvogfmp\"],\"\":{\"odrqajxm\":\"datarynlqnklbwyqoy\",\"vjondoaiydj\":\"dataxspbjerokbdk\",\"l\":\"datakdjm\"}}")
            .toObject(MultiplePipelineTrigger.class);
        Assertions.assertEquals("sdznnhhjdfyu", model.description());
        Assertions.assertEquals("tknpb", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("tkwstumjtg", model.pipelines().get(0).pipelineReference().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MultiplePipelineTrigger model
            = new MultiplePipelineTrigger().withDescription("sdznnhhjdfyu")
                .withAnnotations(Arrays.asList("datambhaumpwgtero", "dataenvjouzjk", "dataxbraqzrbvogfmp"))
                .withPipelines(Arrays.asList(
                    new TriggerPipelineReference()
                        .withPipelineReference(
                            new PipelineReference().withReferenceName("tknpb").withName("tkwstumjtg"))
                        .withParameters(mapOf("m", "datawpsnldjjgrebbonj", "nsmtgza", "datafseykprgpqnesu")),
                    new TriggerPipelineReference()
                        .withPipelineReference(
                            new PipelineReference().withReferenceName("whldxbvrytthzs").withName("ugzs"))
                        .withParameters(mapOf("s", "datakevvqetvcxabzweh")),
                    new TriggerPipelineReference()
                        .withPipelineReference(
                            new PipelineReference().withReferenceName("m").withName("rhiaomldtkqoajp"))
                        .withParameters(mapOf("uiroz", "datarafhzi"))));
        model = BinaryData.fromObject(model).toObject(MultiplePipelineTrigger.class);
        Assertions.assertEquals("sdznnhhjdfyu", model.description());
        Assertions.assertEquals("tknpb", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("tkwstumjtg", model.pipelines().get(0).pipelineReference().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
