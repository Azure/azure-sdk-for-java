// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.MultiplePipelineTrigger;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MultiplePipelineTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MultiplePipelineTrigger model = BinaryData.fromString(
            "{\"type\":\"MultiplePipelineTrigger\",\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"pvnkhggaz\",\"name\":\"psypgmmieheqmte\"},\"parameters\":{\"eiihabojargetncf\":\"datawg\",\"aeefzlwo\":\"datajwjrpljkcqed\",\"lcno\":\"dataobaaccglvix\"}},{\"pipelineReference\":{\"referenceName\":\"qhbrdcgmyj\",\"name\":\"w\"},\"parameters\":{\"rvbzvi\":\"datab\",\"blrnur\":\"datakkt\",\"joshmmzotcpf\":\"dataandmusud\"}},{\"pipelineReference\":{\"referenceName\":\"ik\",\"name\":\"ifbeottvioone\"},\"parameters\":{\"wvatfa\":\"datazqbdutvnl\",\"ixobdqobngjbeihc\":\"datah\"}},{\"pipelineReference\":{\"referenceName\":\"kivryv\",\"name\":\"xnnirnfuvesmepq\"},\"parameters\":{\"wbtexigm\":\"datayptsvnotbenfshf\",\"isggn\":\"datadtjcyvmsduodpm\",\"pqwucprpw\":\"dataocqaejlebcy\",\"zdkcike\":\"datag\"}}],\"description\":\"mqialebct\",\"runtimeState\":\"Disabled\",\"annotations\":[\"dataepjsfhxh\",\"datalrekroyjdnzrcjok\"],\"\":{\"aoryefgwovyce\":\"dataydyzrrwlguesoi\"}}")
            .toObject(MultiplePipelineTrigger.class);
        Assertions.assertEquals("mqialebct", model.description());
        Assertions.assertEquals("pvnkhggaz", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("psypgmmieheqmte", model.pipelines().get(0).pipelineReference().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MultiplePipelineTrigger model = new MultiplePipelineTrigger().withDescription("mqialebct")
            .withAnnotations(Arrays.asList("dataepjsfhxh", "datalrekroyjdnzrcjok"))
            .withPipelines(Arrays.asList(
                new TriggerPipelineReference()
                    .withPipelineReference(
                        new PipelineReference().withReferenceName("pvnkhggaz").withName("psypgmmieheqmte"))
                    .withParameters(
                        mapOf("eiihabojargetncf", "datawg", "aeefzlwo", "datajwjrpljkcqed", "lcno", "dataobaaccglvix")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("qhbrdcgmyj").withName("w"))
                    .withParameters(mapOf("rvbzvi", "datab", "blrnur", "datakkt", "joshmmzotcpf", "dataandmusud")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("ik").withName("ifbeottvioone"))
                    .withParameters(mapOf("wvatfa", "datazqbdutvnl", "ixobdqobngjbeihc", "datah")),
                new TriggerPipelineReference()
                    .withPipelineReference(
                        new PipelineReference().withReferenceName("kivryv").withName("xnnirnfuvesmepq"))
                    .withParameters(mapOf("wbtexigm", "datayptsvnotbenfshf", "isggn", "datadtjcyvmsduodpm", "pqwucprpw",
                        "dataocqaejlebcy", "zdkcike", "datag"))));
        model = BinaryData.fromObject(model).toObject(MultiplePipelineTrigger.class);
        Assertions.assertEquals("mqialebct", model.description());
        Assertions.assertEquals("pvnkhggaz", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("psypgmmieheqmte", model.pipelines().get(0).pipelineReference().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
