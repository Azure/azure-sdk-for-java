// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ConcurObjectDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConcurObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConcurObjectDataset model = BinaryData.fromString(
            "{\"type\":\"ConcurObject\",\"typeProperties\":{\"tableName\":\"dataf\"},\"description\":\"cnqbblr\",\"structure\":\"dataofzghfuifwxu\",\"schema\":\"datanoh\",\"linkedServiceName\":{\"referenceName\":\"cqxu\",\"parameters\":{\"fbplv\":\"dataugdcr\",\"qe\":\"datamhurosdjlzbdmddg\",\"orservpvesors\":\"datay\"}},\"parameters\":{\"fjqzyhzydyvtuq\":{\"type\":\"SecureString\",\"defaultValue\":\"datamex\"},\"igtvjxsocsvjekej\":{\"type\":\"SecureString\",\"defaultValue\":\"datalunssky\"}},\"annotations\":[\"datazjdcwuzscyf\",\"dataixecmasjnfgn\",\"dataxaojeeyvfxbfckmo\"],\"folder\":{\"name\":\"axvwxtxuzh\"},\"\":{\"ygtc\":\"datayffwflbkjcdzu\",\"jef\":\"dataz\",\"kbhzi\":\"dataubaldjcgldryvlr\"}}")
            .toObject(ConcurObjectDataset.class);
        Assertions.assertEquals("cnqbblr", model.description());
        Assertions.assertEquals("cqxu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("fjqzyhzydyvtuq").type());
        Assertions.assertEquals("axvwxtxuzh", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConcurObjectDataset model = new ConcurObjectDataset().withDescription("cnqbblr")
            .withStructure("dataofzghfuifwxu")
            .withSchema("datanoh")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("cqxu")
                .withParameters(mapOf("fbplv", "dataugdcr", "qe", "datamhurosdjlzbdmddg", "orservpvesors", "datay")))
            .withParameters(mapOf("fjqzyhzydyvtuq",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datamex"),
                "igtvjxsocsvjekej",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datalunssky")))
            .withAnnotations(Arrays.asList("datazjdcwuzscyf", "dataixecmasjnfgn", "dataxaojeeyvfxbfckmo"))
            .withFolder(new DatasetFolder().withName("axvwxtxuzh"))
            .withTableName("dataf");
        model = BinaryData.fromObject(model).toObject(ConcurObjectDataset.class);
        Assertions.assertEquals("cnqbblr", model.description());
        Assertions.assertEquals("cqxu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("fjqzyhzydyvtuq").type());
        Assertions.assertEquals("axvwxtxuzh", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
