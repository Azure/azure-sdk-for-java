// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ConcurObjectDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConcurObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConcurObjectDataset model = BinaryData.fromString(
            "{\"type\":\"xotudamkiyao\",\"typeProperties\":{\"tableName\":\"datayvsbfsinvabdjul\"},\"description\":\"hulzugifgsp\",\"structure\":\"datadlnoc\",\"schema\":\"dataygimiz\",\"linkedServiceName\":{\"referenceName\":\"ukjbwmgk\",\"parameters\":{\"yjskdiylg\":\"datamspppoeszthjt\",\"sybqowgvmxwbo\":\"datazuqix\"}},\"parameters\":{\"h\":{\"type\":\"String\",\"defaultValue\":\"dataoexb\"},\"umzyyh\":{\"type\":\"Float\",\"defaultValue\":\"datakajwscmneevlumq\"},\"ivjqu\":{\"type\":\"Array\",\"defaultValue\":\"dataa\"}},\"annotations\":[\"databgbzgfhzdzahk\",\"dataxvcbicfecthotbk\"],\"folder\":{\"name\":\"ztpxj\"},\"\":{\"jdpayx\":\"datak\"}}")
            .toObject(ConcurObjectDataset.class);
        Assertions.assertEquals("hulzugifgsp", model.description());
        Assertions.assertEquals("ukjbwmgk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("h").type());
        Assertions.assertEquals("ztpxj", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConcurObjectDataset model = new ConcurObjectDataset().withDescription("hulzugifgsp")
            .withStructure("datadlnoc")
            .withSchema("dataygimiz")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ukjbwmgk")
                .withParameters(mapOf("yjskdiylg", "datamspppoeszthjt", "sybqowgvmxwbo", "datazuqix")))
            .withParameters(mapOf("h",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataoexb"), "umzyyh",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datakajwscmneevlumq"),
                "ivjqu", new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataa")))
            .withAnnotations(Arrays.asList("databgbzgfhzdzahk", "dataxvcbicfecthotbk"))
            .withFolder(new DatasetFolder().withName("ztpxj"))
            .withTableName("datayvsbfsinvabdjul");
        model = BinaryData.fromObject(model).toObject(ConcurObjectDataset.class);
        Assertions.assertEquals("hulzugifgsp", model.description());
        Assertions.assertEquals("ukjbwmgk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("h").type());
        Assertions.assertEquals("ztpxj", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
