// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ConcurObjectDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConcurObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConcurObjectDataset model = BinaryData.fromString(
            "{\"type\":\"ConcurObject\",\"typeProperties\":{\"tableName\":\"datadfvjsknrbxzepirt\"},\"description\":\"piqdqbvxqto\",\"structure\":\"datawbopvhcbtza\",\"schema\":\"datajxcontickfk\",\"linkedServiceName\":{\"referenceName\":\"thueocsgvuqzgbjw\",\"parameters\":{\"abes\":\"datadmpwewpmiolea\",\"ecmbaaj\":\"datayzwphbjks\",\"zkfekdesb\":\"datafwrdkql\",\"b\":\"datajqtl\"}},\"parameters\":{\"rr\":{\"type\":\"Array\",\"defaultValue\":\"datauibs\"},\"rcpzhbwcxybtdzyc\":{\"type\":\"String\",\"defaultValue\":\"dataeqrypyurvshhovtu\"},\"wczsrazcbybic\":{\"type\":\"Bool\",\"defaultValue\":\"dataoegjzgpljb\"},\"pua\":{\"type\":\"SecureString\",\"defaultValue\":\"datah\"}},\"annotations\":[\"datai\"],\"folder\":{\"name\":\"mu\"},\"\":{\"enndzgthdzit\":\"datawuycuo\",\"vswtwonadezm\":\"datazffpherwj\"}}")
            .toObject(ConcurObjectDataset.class);
        Assertions.assertEquals("piqdqbvxqto", model.description());
        Assertions.assertEquals("thueocsgvuqzgbjw", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("rr").type());
        Assertions.assertEquals("mu", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConcurObjectDataset model = new ConcurObjectDataset().withDescription("piqdqbvxqto")
            .withStructure("datawbopvhcbtza")
            .withSchema("datajxcontickfk")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("thueocsgvuqzgbjw")
                .withParameters(mapOf("abes", "datadmpwewpmiolea", "ecmbaaj", "datayzwphbjks", "zkfekdesb",
                    "datafwrdkql", "b", "datajqtl")))
            .withParameters(
                mapOf("rr", new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datauibs"),
                    "rcpzhbwcxybtdzyc",
                    new ParameterSpecification().withType(ParameterType.STRING)
                        .withDefaultValue("dataeqrypyurvshhovtu"),
                    "wczsrazcbybic",
                    new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataoegjzgpljb"), "pua",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datah")))
            .withAnnotations(Arrays.asList("datai"))
            .withFolder(new DatasetFolder().withName("mu"))
            .withTableName("datadfvjsknrbxzepirt");
        model = BinaryData.fromObject(model).toObject(ConcurObjectDataset.class);
        Assertions.assertEquals("piqdqbvxqto", model.description());
        Assertions.assertEquals("thueocsgvuqzgbjw", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("rr").type());
        Assertions.assertEquals("mu", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
