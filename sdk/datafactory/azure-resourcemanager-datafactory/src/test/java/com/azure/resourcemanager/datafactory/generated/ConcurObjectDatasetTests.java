// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ConcurObjectDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConcurObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConcurObjectDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"ConcurObject\",\"typeProperties\":{\"tableName\":\"datackfkithue\"},\"description\":\"sg\",\"structure\":\"dataqzgbjw\",\"schema\":\"dataudmpwewpmioleaj\",\"linkedServiceName\":{\"referenceName\":\"b\",\"parameters\":{\"ecmbaaj\":\"datayzwphbjks\"}},\"parameters\":{\"lvzkfekde\":{\"type\":\"SecureString\",\"defaultValue\":\"datak\"},\"b\":{\"type\":\"String\",\"defaultValue\":\"datajqtl\"},\"rqnneqryp\":{\"type\":\"SecureString\",\"defaultValue\":\"datapduibsr\"},\"cxybtdzy\":{\"type\":\"Int\",\"defaultValue\":\"datavshhovtuercpzhb\"}},\"annotations\":[\"dataaoegj\",\"datagpljbnwczsraz\",\"databybicqhxhj\"],\"folder\":{\"name\":\"pasizzfmugykwuy\"},\"\":{\"thdzitjzffph\":\"datatenndz\",\"zmzxvfybxmmrvnu\":\"datarwjqvswtwonad\"}}")
                .toObject(ConcurObjectDataset.class);
        Assertions.assertEquals("sg", model.description());
        Assertions.assertEquals("b", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("lvzkfekde").type());
        Assertions.assertEquals("pasizzfmugykwuy", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConcurObjectDataset model =
            new ConcurObjectDataset()
                .withDescription("sg")
                .withStructure("dataqzgbjw")
                .withSchema("dataudmpwewpmioleaj")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("b")
                        .withParameters(mapOf("ecmbaaj", "datayzwphbjks")))
                .withParameters(
                    mapOf(
                        "lvzkfekde",
                        new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datak"),
                        "b",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datajqtl"),
                        "rqnneqryp",
                        new ParameterSpecification()
                            .withType(ParameterType.SECURE_STRING)
                            .withDefaultValue("datapduibsr"),
                        "cxybtdzy",
                        new ParameterSpecification()
                            .withType(ParameterType.INT)
                            .withDefaultValue("datavshhovtuercpzhb")))
                .withAnnotations(Arrays.asList("dataaoegj", "datagpljbnwczsraz", "databybicqhxhj"))
                .withFolder(new DatasetFolder().withName("pasizzfmugykwuy"))
                .withTableName("datackfkithue");
        model = BinaryData.fromObject(model).toObject(ConcurObjectDataset.class);
        Assertions.assertEquals("sg", model.description());
        Assertions.assertEquals("b", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("lvzkfekde").type());
        Assertions.assertEquals("pasizzfmugykwuy", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
