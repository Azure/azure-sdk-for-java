// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.CopyActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.CopyActivityLogSettings;
import com.azure.resourcemanager.datafactory.models.CopySink;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.LogSettings;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.RedirectIncompatibleRowSettings;
import com.azure.resourcemanager.datafactory.models.SkipErrorFile;
import com.azure.resourcemanager.datafactory.models.StagingSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CopyActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CopyActivityTypeProperties model = BinaryData.fromString(
            "{\"source\":{\"type\":\"CopySource\",\"sourceRetryCount\":\"datar\",\"sourceRetryWait\":\"datazetsspww\",\"maxConcurrentConnections\":\"databotbrepefrli\",\"disableMetricsCollection\":\"dataocyarvsfz\",\"\":{\"fsgilwisqxzpz\":\"datacoo\",\"trfvogknocshmp\":\"datatust\",\"rbrv\":\"datajqtuzb\",\"rhccdgunsjssreo\":\"datahfjqpxydpamctzm\"}},\"sink\":{\"type\":\"CopySink\",\"writeBatchSize\":\"datagkouenpgkxyrs\",\"writeBatchTimeout\":\"datab\",\"sinkRetryCount\":\"datayekggoawlqvu\",\"sinkRetryWait\":\"dataqmwqsgy\",\"maxConcurrentConnections\":\"datanostn\",\"disableMetricsCollection\":\"datavrpkizj\",\"\":{\"sumbcirkbkq\":\"datadsu\",\"shxumuuyblol\":\"datasvo\"}},\"translator\":\"datafvmgblb\",\"enableStaging\":\"datals\",\"stagingSettings\":{\"linkedServiceName\":{\"referenceName\":\"xyjqhwsojnbbbgv\",\"parameters\":{\"hml\":\"datayzxqh\",\"z\":\"datahnzsckfuzuchot\",\"puaermawwlnsdaz\":\"dataqhqh\",\"hisxz\":\"datacemcotwfuo\"}},\"path\":\"datak\",\"enableCompression\":\"datafszxbupsxqo\",\"\":{\"mzlmwfncwl\":\"dataxcgqkhyvtajwkr\",\"byssprkbzralj\":\"dataovkzbom\",\"ylcpgzmxr\":\"datafncsa\",\"unntqqguhv\":\"datappqajdm\"}},\"parallelCopies\":\"datarzimin\",\"dataIntegrationUnits\":\"databzfwfu\",\"enableSkipIncompatibleRow\":\"datatpjcsqkedlclx\",\"redirectIncompatibleRowSettings\":{\"linkedServiceName\":\"datauyff\",\"path\":\"dataombdsgqxa\",\"\":{\"djbyfdfuaj\":\"datauobzz\"}},\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"p\",\"parameters\":{\"qb\":\"dataekubiwvjvzzny\"}},\"path\":\"datapwjvfisloqu\",\"logLevel\":\"datakbzwgjupjbdqmnk\",\"enableReliableLogging\":\"datajqsshu\",\"\":{\"rqza\":\"datattnurkm\",\"qvvtjwdlduvim\":\"datauwome\",\"rmxoxtap\":\"datatce\",\"bkj\":\"datafbj\"}},\"logSettings\":{\"enableCopyActivityLog\":\"datakcptavci\",\"copyActivityLogSettings\":{\"logLevel\":\"datanujgblskizpr\",\"enableReliableLogging\":\"datauacajxdrgxpu\"},\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"pzslmfr\",\"parameters\":{\"jhekbmdh\":\"datarycchqzkfgesdzgs\"}},\"path\":\"dataiojsrhgpi\"}},\"preserveRules\":[\"datauvwys\",\"datamebfgbznlihbk\",\"datapaeyw\"],\"preserve\":[\"datavyzuyqzjfvbn\",\"datayjvzlscyzvvsxmy\",\"datassgbscq\"],\"validateDataConsistency\":\"dataixazebmmjaigaxwq\",\"skipErrorFile\":{\"fileMissing\":\"datarctsh\",\"dataInconsistency\":\"datagtdvhokx\"}}")
            .toObject(CopyActivityTypeProperties.class);
        Assertions.assertEquals("xyjqhwsojnbbbgv", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("p", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("pzslmfr",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CopyActivityTypeProperties model = new CopyActivityTypeProperties()
            .withSource(new CopySource().withSourceRetryCount("datar").withSourceRetryWait("datazetsspww")
                .withMaxConcurrentConnections("databotbrepefrli").withDisableMetricsCollection("dataocyarvsfz")
                .withAdditionalProperties(mapOf("type", "CopySource")))
            .withSink(new CopySink().withWriteBatchSize("datagkouenpgkxyrs").withWriteBatchTimeout("datab")
                .withSinkRetryCount("datayekggoawlqvu").withSinkRetryWait("dataqmwqsgy")
                .withMaxConcurrentConnections("datanostn").withDisableMetricsCollection("datavrpkizj")
                .withAdditionalProperties(mapOf("type", "CopySink")))
            .withTranslator("datafvmgblb").withEnableStaging("datals")
            .withStagingSettings(new StagingSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("xyjqhwsojnbbbgv")
                    .withParameters(mapOf("hml", "datayzxqh", "z", "datahnzsckfuzuchot", "puaermawwlnsdaz", "dataqhqh",
                        "hisxz", "datacemcotwfuo")))
                .withPath("datak").withEnableCompression("datafszxbupsxqo").withAdditionalProperties(mapOf()))
            .withParallelCopies("datarzimin").withDataIntegrationUnits("databzfwfu")
            .withEnableSkipIncompatibleRow("datatpjcsqkedlclx")
            .withRedirectIncompatibleRowSettings(new RedirectIncompatibleRowSettings().withLinkedServiceName("datauyff")
                .withPath("dataombdsgqxa").withAdditionalProperties(mapOf()))
            .withLogStorageSettings(new LogStorageSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("p")
                    .withParameters(mapOf("qb", "dataekubiwvjvzzny")))
                .withPath("datapwjvfisloqu").withLogLevel("datakbzwgjupjbdqmnk").withEnableReliableLogging("datajqsshu")
                .withAdditionalProperties(mapOf()))
            .withLogSettings(
                new LogSettings().withEnableCopyActivityLog("datakcptavci")
                    .withCopyActivityLogSettings(new CopyActivityLogSettings().withLogLevel("datanujgblskizpr")
                        .withEnableReliableLogging("datauacajxdrgxpu"))
                    .withLogLocationSettings(new LogLocationSettings()
                        .withLinkedServiceName(new LinkedServiceReference().withReferenceName("pzslmfr")
                            .withParameters(mapOf("jhekbmdh", "datarycchqzkfgesdzgs")))
                        .withPath("dataiojsrhgpi")))
            .withPreserveRules(Arrays.asList("datauvwys", "datamebfgbznlihbk", "datapaeyw"))
            .withPreserve(Arrays.asList("datavyzuyqzjfvbn", "datayjvzlscyzvvsxmy", "datassgbscq"))
            .withValidateDataConsistency("dataixazebmmjaigaxwq")
            .withSkipErrorFile(new SkipErrorFile().withFileMissing("datarctsh").withDataInconsistency("datagtdvhokx"));
        model = BinaryData.fromObject(model).toObject(CopyActivityTypeProperties.class);
        Assertions.assertEquals("xyjqhwsojnbbbgv", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("p", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("pzslmfr",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
