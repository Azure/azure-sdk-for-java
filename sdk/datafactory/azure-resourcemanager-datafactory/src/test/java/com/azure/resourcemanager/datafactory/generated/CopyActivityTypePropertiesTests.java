// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.CopyActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.CopyActivityLogSettings;
import com.azure.resourcemanager.datafactory.models.CopySink;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.LogSettings;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.RedirectIncompatibleRowSettings;
import com.azure.resourcemanager.datafactory.models.SkipErrorFile;
import com.azure.resourcemanager.datafactory.models.StagingSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class CopyActivityTypePropertiesTests {
    @Test
    public void testDeserialize() {
        CopyActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"source\":{\"type\":\"CopySource\",\"\":{}},\"sink\":{\"type\":\"CopySink\",\"\":{}},\"stagingSettings\":{\"linkedServiceName\":{\"referenceName\":\"ksl\",\"parameters\":{}},\"\":{}},\"redirectIncompatibleRowSettings\":{\"\":{}},\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"ypzqzufgsyfej\",\"parameters\":{}},\"\":{}},\"logSettings\":{\"copyActivityLogSettings\":{},\"logLocationSettings\":{}},\"preserveRules\":[],\"preserve\":[],\"skipErrorFile\":{}}")
                .toObject(CopyActivityTypeProperties.class);
        Assertions.assertEquals("ksl", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("ypzqzufgsyfej", model.logStorageSettings().linkedServiceName().referenceName());
    }

    @Test
    public void testSerialize() {
        CopyActivityTypeProperties model =
            new CopyActivityTypeProperties()
                .withSource(new CopySource().withAdditionalProperties(mapOf("type", "CopySource")))
                .withSink(new CopySink().withAdditionalProperties(mapOf("type", "CopySink")))
                .withStagingSettings(
                    new StagingSettings()
                        .withLinkedServiceName(
                            new LinkedServiceReference().withReferenceName("ksl").withParameters(mapOf()))
                        .withAdditionalProperties(mapOf()))
                .withRedirectIncompatibleRowSettings(
                    new RedirectIncompatibleRowSettings().withAdditionalProperties(mapOf()))
                .withLogStorageSettings(
                    new LogStorageSettings()
                        .withLinkedServiceName(
                            new LinkedServiceReference().withReferenceName("ypzqzufgsyfej").withParameters(mapOf()))
                        .withAdditionalProperties(mapOf()))
                .withLogSettings(
                    new LogSettings()
                        .withCopyActivityLogSettings(new CopyActivityLogSettings())
                        .withLogLocationSettings(new LogLocationSettings()))
                .withPreserveRules(Arrays.asList())
                .withPreserve(Arrays.asList())
                .withSkipErrorFile(new SkipErrorFile());
        model = BinaryData.fromObject(model).toObject(CopyActivityTypeProperties.class);
        Assertions.assertEquals("ksl", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("ypzqzufgsyfej", model.logStorageSettings().linkedServiceName().referenceName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
