// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.CopyActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.CopyActivityLogSettings;
import com.azure.resourcemanager.datafactory.models.CopySink;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.LogSettings;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.RedirectIncompatibleRowSettings;
import com.azure.resourcemanager.datafactory.models.SkipErrorFile;
import com.azure.resourcemanager.datafactory.models.StagingSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CopyActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CopyActivityTypeProperties model = BinaryData.fromString(
            "{\"source\":{\"type\":\"CopySource\",\"sourceRetryCount\":\"datalhkz\",\"sourceRetryWait\":\"datanw\",\"maxConcurrentConnections\":\"datawxyawxkdvev\",\"disableMetricsCollection\":\"datauuihapcqmcvur\",\"\":{\"tlcrxfiiifgxnfar\":\"databljnizw\",\"vtrulzlrm\":\"dataficqrde\",\"xcgcdfel\":\"datatcsmpmhlcxb\",\"ygosuhroicjt\":\"dataapbdbicjzntiblx\"}},\"sink\":{\"type\":\"CopySink\",\"writeBatchSize\":\"datadymoanpkcmdixiux\",\"writeBatchTimeout\":\"datacalgspz\",\"sinkRetryCount\":\"datafprzlvhohzkcsjd\",\"sinkRetryWait\":\"dataposmnmkypeqm\",\"maxConcurrentConnections\":\"dataeox\",\"disableMetricsCollection\":\"datarulavxeaym\",\"\":{\"funptsryp\":\"datahw\",\"kbwbxvs\":\"dataa\",\"baddlmj\":\"datatbxcj\"}},\"translator\":\"datali\",\"enableStaging\":\"datarc\",\"stagingSettings\":{\"linkedServiceName\":{\"referenceName\":\"thluzey\",\"parameters\":{\"mn\":\"dataezkyfy\",\"pqegty\":\"dataeasuw\",\"tfqffwvnjg\":\"databycceuf\",\"sw\":\"datarykshizw\"}},\"path\":\"dataye\",\"enableCompression\":\"datas\",\"\":{\"qqemeftlgjrf\":\"dataqzwsgui\",\"relokxklgluareg\":\"dataqfc\"}},\"parallelCopies\":\"datay\",\"dataIntegrationUnits\":\"dataoisbmv\",\"enableSkipIncompatibleRow\":\"dataenrcqickhvps\",\"redirectIncompatibleRowSettings\":{\"linkedServiceName\":\"datauiuvingmonq\",\"path\":\"datatyuqdz\",\"\":{\"kydqy\":\"datajzvaykfjgakays\"}},\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"wmfwr\",\"parameters\":{\"vmuot\":\"datazg\",\"fyjampvwxlkh\":\"datasea\",\"ipmnqrbyq\":\"datarlt\"}},\"path\":\"datawxbowcjkargg\",\"logLevel\":\"datauewgy\",\"enableReliableLogging\":\"datalvxwlqlugnbudjy\",\"\":{\"ykvlxs\":\"dataotgtlan\",\"xooxuaufqoo\":\"datacqqd\",\"t\":\"datawx\"}},\"logSettings\":{\"enableCopyActivityLog\":\"dataqvpedwmhqcjreryp\",\"copyActivityLogSettings\":{\"logLevel\":\"dataqxeyzqnupsipclxv\",\"enableReliableLogging\":\"datavss\"},\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"b\",\"parameters\":{\"icqdb\":\"dataq\",\"lrixzdbntopbab\":\"datazwlejiiyoonbu\",\"boysquygokh\":\"datadwcfmzmqmgdlgsxk\",\"qukcojyxhhvoo\":\"datastwcyigrhfevxy\"}},\"path\":\"datatcsucot\"}},\"preserveRules\":[\"dataiqzjnxzvjnmpv\"],\"preserve\":[\"dataudfbhzuk\",\"datapfbhihddiiuex\"],\"validateDataConsistency\":\"datayfku\",\"skipErrorFile\":{\"fileMissing\":\"dataqpwardpw\",\"dataInconsistency\":\"datalvfisk\"}}")
            .toObject(CopyActivityTypeProperties.class);
        Assertions.assertEquals("thluzey", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("wmfwr", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("b", model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CopyActivityTypeProperties model = new CopyActivityTypeProperties()
            .withSource(new CopySource().withSourceRetryCount("datalhkz")
                .withSourceRetryWait("datanw")
                .withMaxConcurrentConnections("datawxyawxkdvev")
                .withDisableMetricsCollection("datauuihapcqmcvur")
                .withAdditionalProperties(mapOf("type", "CopySource")))
            .withSink(new CopySink().withWriteBatchSize("datadymoanpkcmdixiux")
                .withWriteBatchTimeout("datacalgspz")
                .withSinkRetryCount("datafprzlvhohzkcsjd")
                .withSinkRetryWait("dataposmnmkypeqm")
                .withMaxConcurrentConnections("dataeox")
                .withDisableMetricsCollection("datarulavxeaym")
                .withAdditionalProperties(mapOf("type", "CopySink")))
            .withTranslator("datali")
            .withEnableStaging("datarc")
            .withStagingSettings(new StagingSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("thluzey")
                    .withParameters(mapOf("mn", "dataezkyfy", "pqegty", "dataeasuw", "tfqffwvnjg", "databycceuf", "sw",
                        "datarykshizw")))
                .withPath("dataye")
                .withEnableCompression("datas")
                .withAdditionalProperties(mapOf()))
            .withParallelCopies("datay")
            .withDataIntegrationUnits("dataoisbmv")
            .withEnableSkipIncompatibleRow("dataenrcqickhvps")
            .withRedirectIncompatibleRowSettings(
                new RedirectIncompatibleRowSettings().withLinkedServiceName("datauiuvingmonq")
                    .withPath("datatyuqdz")
                    .withAdditionalProperties(mapOf()))
            .withLogStorageSettings(new LogStorageSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("wmfwr")
                    .withParameters(mapOf("vmuot", "datazg", "fyjampvwxlkh", "datasea", "ipmnqrbyq", "datarlt")))
                .withPath("datawxbowcjkargg")
                .withLogLevel("datauewgy")
                .withEnableReliableLogging("datalvxwlqlugnbudjy")
                .withAdditionalProperties(mapOf()))
            .withLogSettings(
                new LogSettings().withEnableCopyActivityLog("dataqvpedwmhqcjreryp")
                    .withCopyActivityLogSettings(new CopyActivityLogSettings().withLogLevel("dataqxeyzqnupsipclxv")
                        .withEnableReliableLogging("datavss"))
                    .withLogLocationSettings(new LogLocationSettings()
                        .withLinkedServiceName(new LinkedServiceReference().withReferenceName("b")
                            .withParameters(mapOf("icqdb", "dataq", "lrixzdbntopbab", "datazwlejiiyoonbu",
                                "boysquygokh", "datadwcfmzmqmgdlgsxk", "qukcojyxhhvoo", "datastwcyigrhfevxy")))
                        .withPath("datatcsucot")))
            .withPreserveRules(Arrays.asList("dataiqzjnxzvjnmpv"))
            .withPreserve(Arrays.asList("dataudfbhzuk", "datapfbhihddiiuex"))
            .withValidateDataConsistency("datayfku")
            .withSkipErrorFile(new SkipErrorFile().withFileMissing("dataqpwardpw").withDataInconsistency("datalvfisk"));
        model = BinaryData.fromObject(model).toObject(CopyActivityTypeProperties.class);
        Assertions.assertEquals("thluzey", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("wmfwr", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("b", model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
