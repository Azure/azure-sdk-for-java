// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.CopyActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.CopyActivityLogSettings;
import com.azure.resourcemanager.datafactory.models.CopySink;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.LogSettings;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.RedirectIncompatibleRowSettings;
import com.azure.resourcemanager.datafactory.models.SkipErrorFile;
import com.azure.resourcemanager.datafactory.models.StagingSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CopyActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CopyActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"source\":{\"type\":\"CopySource\",\"sourceRetryCount\":\"datap\",\"sourceRetryWait\":\"datahyekggo\",\"maxConcurrentConnections\":\"datalqvuwsqmwqsg\",\"disableMetricsCollection\":\"dataz\",\"\":{\"ursumbci\":\"datatngxvrpkizjnkgd\",\"uyblo\":\"datakbkqpsvoxshxum\",\"samxyjqhwsoj\":\"datarufvmgblbqx\"}},\"sink\":{\"type\":\"CopySink\",\"writeBatchSize\":\"databbgvmowy\",\"writeBatchTimeout\":\"dataqhuhmldhnzsc\",\"sinkRetryCount\":\"datauzuchotdz\",\"sinkRetryWait\":\"datahqhwpuaermaww\",\"maxConcurrentConnections\":\"datasdazqcemcotwfuo\",\"disableMetricsCollection\":\"dataisxzhik\",\"\":{\"xbupsx\":\"datas\",\"gxcgqkhyvtajwkrx\":\"dataoj\",\"zbomjbyssprkbz\":\"datazlmwfncwlwov\"}},\"translator\":\"dataljwfncsaa\",\"enableStaging\":\"datacpgz\",\"stagingSettings\":{\"linkedServiceName\":{\"referenceName\":\"rgppqajdmju\",\"parameters\":{\"etbzfwfuxdtp\":\"dataqqguhvnwrzimi\",\"quyfftqomb\":\"datacsqkedlclx\",\"djbyfdfuaj\":\"datasgqxaciduobzz\",\"vzznyjqbwxpwjvf\":\"datahpyylekubiwv\"}},\"path\":\"dataloquttkb\",\"enableCompression\":\"datagjupjbdqmnk\",\"\":{\"p\":\"dataqssh\",\"womevqvv\":\"datajttnurkmerqzap\"}},\"parallelCopies\":\"datawdlduvimgtceor\",\"dataIntegrationUnits\":\"datao\",\"enableSkipIncompatibleRow\":\"dataapafbjvbk\",\"redirectIncompatibleRowSettings\":{\"linkedServiceName\":\"datagzkcpt\",\"path\":\"datacipy\",\"\":{\"vpuacajxdrgxpuxp\":\"datajgblskizp\",\"pzrycchqz\":\"dataslmfr\",\"dzgszjhekbmd\":\"datafge\"}},\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"hioj\",\"parameters\":{\"tyeuvwysbme\":\"datagp\"}},\"path\":\"datag\",\"logLevel\":\"datanlihbku\",\"enableReliableLogging\":\"dataeywyftvy\",\"\":{\"scyzvv\":\"dataqzjfvbnyyjvz\",\"ssgbscq\":\"dataxmy\",\"qiparctshe\":\"dataeixazebmmjaigax\",\"fawhoosrsol\":\"datagtdvhokx\"}},\"logSettings\":{\"enableCopyActivityLog\":\"datamfoe\",\"copyActivityLogSettings\":{\"logLevel\":\"dataiq\",\"enableReliableLogging\":\"datapelnud\"},\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"fie\",\"parameters\":{\"jllfgmdoaihl\":\"dataorsdvuirqfk\",\"cv\":\"datarsqcivmirybwga\"}},\"path\":\"datay\"}},\"preserveRules\":[\"dataazgtbynxsh\",\"dataawexgeqo\"],\"preserve\":[\"datauzxxkojjphbo\",\"datauovsv\",\"datanpcxdkmtvpa\"],\"validateDataConsistency\":\"dataubnyhm\",\"skipErrorFile\":{\"fileMissing\":\"datadevotucnzbpocum\",\"dataInconsistency\":\"dataftzoemzdnvnoo\"}}")
                .toObject(CopyActivityTypeProperties.class);
        Assertions.assertEquals("rgppqajdmju", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("hioj", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("fie", model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CopyActivityTypeProperties model =
            new CopyActivityTypeProperties()
                .withSource(
                    new CopySource()
                        .withSourceRetryCount("datap")
                        .withSourceRetryWait("datahyekggo")
                        .withMaxConcurrentConnections("datalqvuwsqmwqsg")
                        .withDisableMetricsCollection("dataz")
                        .withAdditionalProperties(mapOf("type", "CopySource")))
                .withSink(
                    new CopySink()
                        .withWriteBatchSize("databbgvmowy")
                        .withWriteBatchTimeout("dataqhuhmldhnzsc")
                        .withSinkRetryCount("datauzuchotdz")
                        .withSinkRetryWait("datahqhwpuaermaww")
                        .withMaxConcurrentConnections("datasdazqcemcotwfuo")
                        .withDisableMetricsCollection("dataisxzhik")
                        .withAdditionalProperties(mapOf("type", "CopySink")))
                .withTranslator("dataljwfncsaa")
                .withEnableStaging("datacpgz")
                .withStagingSettings(
                    new StagingSettings()
                        .withLinkedServiceName(
                            new LinkedServiceReference()
                                .withReferenceName("rgppqajdmju")
                                .withParameters(
                                    mapOf(
                                        "etbzfwfuxdtp",
                                        "dataqqguhvnwrzimi",
                                        "quyfftqomb",
                                        "datacsqkedlclx",
                                        "djbyfdfuaj",
                                        "datasgqxaciduobzz",
                                        "vzznyjqbwxpwjvf",
                                        "datahpyylekubiwv")))
                        .withPath("dataloquttkb")
                        .withEnableCompression("datagjupjbdqmnk")
                        .withAdditionalProperties(mapOf()))
                .withParallelCopies("datawdlduvimgtceor")
                .withDataIntegrationUnits("datao")
                .withEnableSkipIncompatibleRow("dataapafbjvbk")
                .withRedirectIncompatibleRowSettings(
                    new RedirectIncompatibleRowSettings()
                        .withLinkedServiceName("datagzkcpt")
                        .withPath("datacipy")
                        .withAdditionalProperties(mapOf()))
                .withLogStorageSettings(
                    new LogStorageSettings()
                        .withLinkedServiceName(
                            new LinkedServiceReference()
                                .withReferenceName("hioj")
                                .withParameters(mapOf("tyeuvwysbme", "datagp")))
                        .withPath("datag")
                        .withLogLevel("datanlihbku")
                        .withEnableReliableLogging("dataeywyftvy")
                        .withAdditionalProperties(mapOf()))
                .withLogSettings(
                    new LogSettings()
                        .withEnableCopyActivityLog("datamfoe")
                        .withCopyActivityLogSettings(
                            new CopyActivityLogSettings()
                                .withLogLevel("dataiq")
                                .withEnableReliableLogging("datapelnud"))
                        .withLogLocationSettings(
                            new LogLocationSettings()
                                .withLinkedServiceName(
                                    new LinkedServiceReference()
                                        .withReferenceName("fie")
                                        .withParameters(
                                            mapOf("jllfgmdoaihl", "dataorsdvuirqfk", "cv", "datarsqcivmirybwga")))
                                .withPath("datay")))
                .withPreserveRules(Arrays.asList("dataazgtbynxsh", "dataawexgeqo"))
                .withPreserve(Arrays.asList("datauzxxkojjphbo", "datauovsv", "datanpcxdkmtvpa"))
                .withValidateDataConsistency("dataubnyhm")
                .withSkipErrorFile(
                    new SkipErrorFile()
                        .withFileMissing("datadevotucnzbpocum")
                        .withDataInconsistency("dataftzoemzdnvnoo"));
        model = BinaryData.fromObject(model).toObject(CopyActivityTypeProperties.class);
        Assertions.assertEquals("rgppqajdmju", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("hioj", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("fie", model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
