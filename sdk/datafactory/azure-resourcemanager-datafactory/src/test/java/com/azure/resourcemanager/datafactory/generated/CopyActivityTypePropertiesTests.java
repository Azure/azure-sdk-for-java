// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.CopyActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.CopyActivityLogSettings;
import com.azure.resourcemanager.datafactory.models.CopySink;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.LogSettings;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.RedirectIncompatibleRowSettings;
import com.azure.resourcemanager.datafactory.models.SkipErrorFile;
import com.azure.resourcemanager.datafactory.models.StagingSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CopyActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CopyActivityTypeProperties model = BinaryData.fromString(
            "{\"source\":{\"type\":\"CopySource\",\"sourceRetryCount\":\"datakggqxqanrkhcdjfs\",\"sourceRetryWait\":\"databjcn\",\"maxConcurrentConnections\":\"datawrbrntvhpp\",\"disableMetricsCollection\":\"datarlzual\",\"\":{\"abn\":\"datapolatorjm\",\"ig\":\"datauxlthyxryvwnzh\",\"bffcvtij\":\"datadgbcnqvbn\",\"gvgogczgcm\":\"datalemzrw\"}},\"sink\":{\"type\":\"CopySink\",\"writeBatchSize\":\"datamkwddgyqe\",\"writeBatchTimeout\":\"datacr\",\"sinkRetryCount\":\"dataamlrtcbvif\",\"sinkRetryWait\":\"datanxstowvgw\",\"maxConcurrentConnections\":\"datavsqlyahlaoqkci\",\"disableMetricsCollection\":\"databuzvaxl\",\"\":{\"rqzpfpbxl\":\"datanwhictsauv\",\"ldonsekazxewnlpc\":\"dataddkkoyzsyjvk\",\"xmyfrmfclkyncjya\":\"datahczqm\",\"duabqbverbjcts\":\"datazzcbohbbavode\"}},\"translator\":\"datavhxnjo\",\"enableStaging\":\"datapc\",\"stagingSettings\":{\"linkedServiceName\":{\"referenceName\":\"dlppuk\",\"parameters\":{\"efivozrdzrik\":\"datanpclnmjkydh\"}},\"path\":\"dataucvvrkxpbjg\",\"enableCompression\":\"dataoelamerpbctrwrv\",\"\":{\"fajlgxrsn\":\"datamacbrywqqezt\",\"gywkin\":\"datatrooaahhvs\"}},\"parallelCopies\":\"datavtx\",\"dataIntegrationUnits\":\"datameb\",\"enableSkipIncompatibleRow\":\"datain\",\"redirectIncompatibleRowSettings\":{\"linkedServiceName\":\"datadk\",\"path\":\"dataqjj\",\"\":{\"tvcjd\":\"dataoxkcttpc\"}},\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"k\",\"parameters\":{\"gosrbullqnfzsegu\":\"datahvcrjqzbmyftzbx\",\"tzdvx\":\"datasbzmixwaxtnk\",\"ovcbdsr\":\"datagdaajlhgsuqmrky\",\"ingadkrkny\":\"datahpqlxnbdjt\"}},\"path\":\"datangdfzqcjfqmy\",\"logLevel\":\"datawbuxqzfwgbqsvexz\",\"enableReliableLogging\":\"datafwiav\",\"\":{\"cbxrskylq\":\"datatgxdlznfo\",\"teikktret\":\"datapp\",\"nvb\":\"datatsygzjplaxxfnrlt\"}},\"logSettings\":{\"enableCopyActivityLog\":\"datat\",\"copyActivityLogSettings\":{\"logLevel\":\"datakrrp\",\"enableReliableLogging\":\"datadoli\"},\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"izsglavdtttyd\",\"parameters\":{\"ypwmveyrcikedmo\":\"datamzrqkjqcsh\"}},\"path\":\"datajuqowuicvjyj\"}},\"preserveRules\":[\"dataleuqxhmr\",\"datalwkcgu\",\"datavpvta\",\"datalxxzn\"],\"preserve\":[\"dataqqzikvgwqiwod\",\"dataaslp\"],\"validateDataConsistency\":\"dataexrzxvff\",\"skipErrorFile\":{\"fileMissing\":\"datatdmhr\",\"dataInconsistency\":\"databyul\"}}")
            .toObject(CopyActivityTypeProperties.class);
        Assertions.assertEquals("dlppuk", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("k", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("izsglavdtttyd",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CopyActivityTypeProperties model = new CopyActivityTypeProperties()
            .withSource(new CopySource().withSourceRetryCount("datakggqxqanrkhcdjfs")
                .withSourceRetryWait("databjcn")
                .withMaxConcurrentConnections("datawrbrntvhpp")
                .withDisableMetricsCollection("datarlzual")
                .withAdditionalProperties(mapOf("type", "CopySource")))
            .withSink(new CopySink().withWriteBatchSize("datamkwddgyqe")
                .withWriteBatchTimeout("datacr")
                .withSinkRetryCount("dataamlrtcbvif")
                .withSinkRetryWait("datanxstowvgw")
                .withMaxConcurrentConnections("datavsqlyahlaoqkci")
                .withDisableMetricsCollection("databuzvaxl")
                .withAdditionalProperties(mapOf("type", "CopySink")))
            .withTranslator("datavhxnjo")
            .withEnableStaging("datapc")
            .withStagingSettings(new StagingSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("dlppuk")
                    .withParameters(mapOf("efivozrdzrik", "datanpclnmjkydh")))
                .withPath("dataucvvrkxpbjg")
                .withEnableCompression("dataoelamerpbctrwrv")
                .withAdditionalProperties(mapOf()))
            .withParallelCopies("datavtx")
            .withDataIntegrationUnits("datameb")
            .withEnableSkipIncompatibleRow("datain")
            .withRedirectIncompatibleRowSettings(new RedirectIncompatibleRowSettings().withLinkedServiceName("datadk")
                .withPath("dataqjj")
                .withAdditionalProperties(mapOf()))
            .withLogStorageSettings(new LogStorageSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("k")
                    .withParameters(mapOf("gosrbullqnfzsegu", "datahvcrjqzbmyftzbx", "tzdvx", "datasbzmixwaxtnk",
                        "ovcbdsr", "datagdaajlhgsuqmrky", "ingadkrkny", "datahpqlxnbdjt")))
                .withPath("datangdfzqcjfqmy")
                .withLogLevel("datawbuxqzfwgbqsvexz")
                .withEnableReliableLogging("datafwiav")
                .withAdditionalProperties(mapOf()))
            .withLogSettings(
                new LogSettings().withEnableCopyActivityLog("datat")
                    .withCopyActivityLogSettings(
                        new CopyActivityLogSettings().withLogLevel("datakrrp").withEnableReliableLogging("datadoli"))
                    .withLogLocationSettings(
                        new LogLocationSettings()
                            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("izsglavdtttyd")
                                .withParameters(mapOf("ypwmveyrcikedmo", "datamzrqkjqcsh")))
                            .withPath("datajuqowuicvjyj")))
            .withPreserveRules(Arrays.asList("dataleuqxhmr", "datalwkcgu", "datavpvta", "datalxxzn"))
            .withPreserve(Arrays.asList("dataqqzikvgwqiwod", "dataaslp"))
            .withValidateDataConsistency("dataexrzxvff")
            .withSkipErrorFile(new SkipErrorFile().withFileMissing("datatdmhr").withDataInconsistency("databyul"));
        model = BinaryData.fromObject(model).toObject(CopyActivityTypeProperties.class);
        Assertions.assertEquals("dlppuk", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("k", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("izsglavdtttyd",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
