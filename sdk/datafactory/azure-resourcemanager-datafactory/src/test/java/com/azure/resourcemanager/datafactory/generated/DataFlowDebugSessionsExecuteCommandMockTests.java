// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugCommandPayload;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugCommandRequest;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugCommandResponse;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugCommandType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataFlowDebugSessionsExecuteCommandMockTests {
    @Test
    public void testExecuteCommand() throws Exception {
        String responseStr = "{\"status\":\"klnrzoafxoyddush\",\"data\":\"jhh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DataFlowDebugCommandResponse response = manager.dataFlowDebugSessions()
            .executeCommand("psbdcheydctsqxw", "sszdw",
                new DataFlowDebugCommandRequest().withSessionId("gbzmcprtanag")
                    .withCommand(DataFlowDebugCommandType.EXECUTE_EXPRESSION_QUERY)
                    .withCommandPayload(new DataFlowDebugCommandPayload().withStreamName("hwkaatjssebyd")
                        .withRowLimits(2122847597)
                        .withColumns(Arrays.asList("lpiccx"))
                        .withExpression("twstqgc")),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("klnrzoafxoyddush", response.status());
        Assertions.assertEquals("jhh", response.data());
    }
}
