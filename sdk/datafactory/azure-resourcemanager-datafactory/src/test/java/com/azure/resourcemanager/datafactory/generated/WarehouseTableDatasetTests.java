// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.WarehouseTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WarehouseTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WarehouseTableDataset model = BinaryData.fromString(
            "{\"type\":\"WarehouseTable\",\"typeProperties\":{\"schema\":\"datauoqhqrcsksxqfhl\",\"table\":\"datauvdagvyjcdpncv\"},\"description\":\"eqyodii\",\"structure\":\"datasapqhipajsniv\",\"schema\":\"dataevlj\",\"linkedServiceName\":{\"referenceName\":\"cuwrfgpjfv\",\"parameters\":{\"ykzzugctygbb\":\"dataseodvlmdzgv\",\"ljvvcrsmw\":\"datau\",\"jftvltj\":\"datajmxwcvumnrutqnke\",\"pkbzltnowpajf\":\"datapec\"}},\"parameters\":{\"suhsypx\":{\"type\":\"Int\",\"defaultValue\":\"databbzadzglmuuz\"}},\"annotations\":[\"datadhf\",\"dataerkqpyfj\",\"datakbyws\"],\"folder\":{\"name\":\"fmxbdjkm\"},\"\":{\"vghbtycvl\":\"dataggnowxhyvdbrdv\",\"xshmrdisc\":\"datausgiikhrcthype\"}}")
            .toObject(WarehouseTableDataset.class);
        Assertions.assertEquals("eqyodii", model.description());
        Assertions.assertEquals("cuwrfgpjfv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("suhsypx").type());
        Assertions.assertEquals("fmxbdjkm", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WarehouseTableDataset model = new WarehouseTableDataset().withDescription("eqyodii")
            .withStructure("datasapqhipajsniv")
            .withSchema("dataevlj")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("cuwrfgpjfv")
                .withParameters(mapOf("ykzzugctygbb", "dataseodvlmdzgv", "ljvvcrsmw", "datau", "jftvltj",
                    "datajmxwcvumnrutqnke", "pkbzltnowpajf", "datapec")))
            .withParameters(mapOf("suhsypx",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("databbzadzglmuuz")))
            .withAnnotations(Arrays.asList("datadhf", "dataerkqpyfj", "datakbyws"))
            .withFolder(new DatasetFolder().withName("fmxbdjkm"))
            .withSchemaTypePropertiesSchema("datauoqhqrcsksxqfhl")
            .withTable("datauvdagvyjcdpncv");
        model = BinaryData.fromObject(model).toObject(WarehouseTableDataset.class);
        Assertions.assertEquals("eqyodii", model.description());
        Assertions.assertEquals("cuwrfgpjfv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("suhsypx").type());
        Assertions.assertEquals("fmxbdjkm", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
