// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.WarehouseTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WarehouseTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WarehouseTableDataset model = BinaryData.fromString(
            "{\"type\":\"WarehouseTable\",\"typeProperties\":{\"schema\":\"datajpj\",\"table\":\"datajdtuodoc\"},\"description\":\"u\",\"structure\":\"datanyxpmqd\",\"schema\":\"dataniiontqikdipkxs\",\"linkedServiceName\":{\"referenceName\":\"kuzabrsoih\",\"parameters\":{\"oadoh\":\"datajdtacvsynssxylsu\",\"wlxqdsxip\":\"datajyiehkxgfuzqqnz\",\"wwgze\":\"datanlbyitfz\",\"joygyn\":\"datalzpiimxacrk\"}},\"parameters\":{\"lquarbruvqb\":{\"type\":\"Object\",\"defaultValue\":\"databbnu\"}},\"annotations\":[\"datawrmu\",\"datazpexzbhgjaj\"],\"folder\":{\"name\":\"koc\"},\"\":{\"vnatbgvlpgf\":\"datadzl\",\"akybepsihz\":\"datagen\",\"gl\":\"dataieoymp\",\"zlycxlubrukhqb\":\"datajsfgbyyts\"}}")
            .toObject(WarehouseTableDataset.class);
        Assertions.assertEquals("u", model.description());
        Assertions.assertEquals("kuzabrsoih", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("lquarbruvqb").type());
        Assertions.assertEquals("koc", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WarehouseTableDataset model = new WarehouseTableDataset().withDescription("u")
            .withStructure("datanyxpmqd")
            .withSchema("dataniiontqikdipkxs")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("kuzabrsoih")
                .withParameters(mapOf("oadoh", "datajdtacvsynssxylsu", "wlxqdsxip", "datajyiehkxgfuzqqnz", "wwgze",
                    "datanlbyitfz", "joygyn", "datalzpiimxacrk")))
            .withParameters(mapOf("lquarbruvqb",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("databbnu")))
            .withAnnotations(Arrays.asList("datawrmu", "datazpexzbhgjaj"))
            .withFolder(new DatasetFolder().withName("koc"))
            .withSchemaTypePropertiesSchema("datajpj")
            .withTable("datajdtuodoc");
        model = BinaryData.fromObject(model).toObject(WarehouseTableDataset.class);
        Assertions.assertEquals("u", model.description());
        Assertions.assertEquals("kuzabrsoih", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("lquarbruvqb").type());
        Assertions.assertEquals("koc", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
