// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetResource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DatasetsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"type\":\"Dataset\",\"description\":\"nevbkkdbhgu\",\"structure\":\"dataxqi\",\"schema\":\"datarj\",\"linkedServiceName\":{\"referenceName\":\"lieyyfqhndj\",\"parameters\":{\"fhsgpy\":\"datavuyxccraj\"}},\"parameters\":{\"nrlpsjbnnuqsz\":{\"type\":\"Int\",\"defaultValue\":\"datad\"},\"dbunxufataq\":{\"type\":\"Array\",\"defaultValue\":\"dataiufrqsmjg\"},\"unazl\":{\"type\":\"Array\",\"defaultValue\":\"datahgdwhacurmm\"},\"isuhareqyiadvv\":{\"type\":\"String\",\"defaultValue\":\"datanyzcnq\"}},\"annotations\":[\"datafyel\",\"datan\",\"datapnyyuxcjq\"],\"folder\":{\"name\":\"sdntuko\"},\"\":{\"ygecly\":\"dataflfv\",\"jbzd\":\"datatoshkzib\"}},\"name\":\"gpv\",\"type\":\"icw\",\"etag\":\"y\",\"id\":\"hglltjghdfus\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DatasetResource response = manager.datasets()
            .define("wc")
            .withExistingFactory("cnwqeixyjlfobj", "betsvnloduvcq")
            .withProperties(new Dataset().withDescription("feolhs")
                .withStructure("datakivlzvxmqvl")
                .withSchema("datappnsiynz")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("adkurwg")
                    .withParameters(mapOf("llcsdgmcjsktej", "datanjox", "ezzpfldd", "datamhttiqbnfyixkeav", "xrfr",
                        "datavcwhodfwv")))
                .withParameters(
                    mapOf("ofgpns", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datat"),
                        "w", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datase")))
                .withAnnotations(Arrays.asList("datafpoqbekkqsaby"))
                .withFolder(new DatasetFolder().withName("rwprbzfbdsncy"))
                .withAdditionalProperties(mapOf("type", "Dataset")))
            .withIfMatch("tbwe")
            .create();

        Assertions.assertEquals("hglltjghdfus", response.id());
        Assertions.assertEquals("nevbkkdbhgu", response.properties().description());
        Assertions.assertEquals("lieyyfqhndj", response.properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, response.properties().parameters().get("nrlpsjbnnuqsz").type());
        Assertions.assertEquals("sdntuko", response.properties().folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
