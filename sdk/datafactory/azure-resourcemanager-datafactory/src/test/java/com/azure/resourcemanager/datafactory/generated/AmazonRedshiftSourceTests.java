// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AmazonRedshiftSource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.RedshiftUnloadSettings;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AmazonRedshiftSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AmazonRedshiftSource model =
            BinaryData
                .fromString(
                    "{\"type\":\"AmazonRedshiftSource\",\"query\":\"datafcxdldhhkdeviw\",\"redshiftUnloadSettings\":{\"s3LinkedServiceName\":{\"referenceName\":\"hfxvl\",\"parameters\":{\"tuujcuavctxyrmws\":\"datarhsmghh\",\"cnn\":\"datarzmy\"}},\"bucketName\":\"dataajxv\"},\"queryTimeout\":\"dataidlwmewrgu\",\"additionalColumns\":\"dataugpkunvygupgnnvm\",\"sourceRetryCount\":\"datazqmxwwmekms\",\"sourceRetryWait\":\"datafjbefszfrxfy\",\"maxConcurrentConnections\":\"dataypxcqmdeecd\",\"disableMetricsCollection\":\"datajsizyhp\",\"\":{\"kqtfyuy\":\"datakgrtwhmadhismw\",\"tzgew\":\"dataybshchxuea\",\"fsewusqupkrr\":\"dataqwibtkrhcgbzr\"}}")
                .toObject(AmazonRedshiftSource.class);
        Assertions.assertEquals("hfxvl", model.redshiftUnloadSettings().s3LinkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AmazonRedshiftSource model =
            new AmazonRedshiftSource()
                .withSourceRetryCount("datazqmxwwmekms")
                .withSourceRetryWait("datafjbefszfrxfy")
                .withMaxConcurrentConnections("dataypxcqmdeecd")
                .withDisableMetricsCollection("datajsizyhp")
                .withQueryTimeout("dataidlwmewrgu")
                .withAdditionalColumns("dataugpkunvygupgnnvm")
                .withQuery("datafcxdldhhkdeviw")
                .withRedshiftUnloadSettings(
                    new RedshiftUnloadSettings()
                        .withS3LinkedServiceName(
                            new LinkedServiceReference()
                                .withReferenceName("hfxvl")
                                .withParameters(mapOf("tuujcuavctxyrmws", "datarhsmghh", "cnn", "datarzmy")))
                        .withBucketName("dataajxv"));
        model = BinaryData.fromObject(model).toObject(AmazonRedshiftSource.class);
        Assertions.assertEquals("hfxvl", model.redshiftUnloadSettings().s3LinkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
