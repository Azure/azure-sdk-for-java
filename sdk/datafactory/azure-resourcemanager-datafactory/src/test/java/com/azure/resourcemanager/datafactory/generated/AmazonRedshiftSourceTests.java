// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AmazonRedshiftSource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.RedshiftUnloadSettings;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AmazonRedshiftSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AmazonRedshiftSource model = BinaryData.fromString(
            "{\"type\":\"AmazonRedshiftSource\",\"query\":\"datalfqttf\",\"redshiftUnloadSettings\":{\"s3LinkedServiceName\":{\"referenceName\":\"doowg\",\"parameters\":{\"kjiwfvetwfreqv\":\"dataiphhsvsned\",\"rt\":\"datal\",\"wqal\":\"datauuikqzd\"}},\"bucketName\":\"datapmiytpji\"},\"queryTimeout\":\"dataisolkwipv\",\"additionalColumns\":\"dataljutawgylnodr\",\"sourceRetryCount\":\"datalehlopip\",\"sourceRetryWait\":\"dataeaeyjlyxd\",\"maxConcurrentConnections\":\"datahopyavcbmz\",\"disableMetricsCollection\":\"databvfarqxjoazyxm\",\"\":{\"rycva\":\"databkax\",\"zjysyphxeoqm\":\"datas\"}}")
            .toObject(AmazonRedshiftSource.class);
        Assertions.assertEquals("doowg", model.redshiftUnloadSettings().s3LinkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AmazonRedshiftSource model
            = new AmazonRedshiftSource().withSourceRetryCount("datalehlopip").withSourceRetryWait("dataeaeyjlyxd")
                .withMaxConcurrentConnections("datahopyavcbmz").withDisableMetricsCollection("databvfarqxjoazyxm")
                .withQueryTimeout("dataisolkwipv").withAdditionalColumns("dataljutawgylnodr").withQuery("datalfqttf")
                .withRedshiftUnloadSettings(new RedshiftUnloadSettings()
                    .withS3LinkedServiceName(new LinkedServiceReference().withReferenceName("doowg").withParameters(
                        mapOf("kjiwfvetwfreqv", "dataiphhsvsned", "rt", "datal", "wqal", "datauuikqzd")))
                    .withBucketName("datapmiytpji"));
        model = BinaryData.fromObject(model).toObject(AmazonRedshiftSource.class);
        Assertions.assertEquals("doowg", model.redshiftUnloadSettings().s3LinkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
