// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AmazonRedshiftSource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.RedshiftUnloadSettings;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AmazonRedshiftSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AmazonRedshiftSource model = BinaryData.fromString(
            "{\"type\":\"AmazonRedshiftSource\",\"query\":\"datatgmxkol\",\"redshiftUnloadSettings\":{\"s3LinkedServiceName\":{\"referenceName\":\"nqjcmkpxbckjrfkw\",\"parameters\":{\"zatqocvrdj\":\"datamyowddhtwaxob\",\"cyvymv\":\"datavsclwpsteuvjdnh\",\"omohcynorh\":\"datalaehitxoib\",\"f\":\"databvbqxtktkeuapomo\"}},\"bucketName\":\"datanbhptraljcqp\"},\"queryTimeout\":\"datamathiydmkyvsxc\",\"additionalColumns\":\"datavghajpddgfoznmf\",\"sourceRetryCount\":\"datapjoesozcuhun\",\"sourceRetryWait\":\"datazbmwptdr\",\"maxConcurrentConnections\":\"datauyknoiumuxn\",\"disableMetricsCollection\":\"dataivgmck\",\"\":{\"oj\":\"dataxzsmpoiutaatvpb\",\"kekmgpseassdqpw\":\"datacgjogmvo\",\"pwxcjciotlbp\":\"datapxwdosfgbvsozjf\"}}")
            .toObject(AmazonRedshiftSource.class);
        Assertions.assertEquals("nqjcmkpxbckjrfkw",
            model.redshiftUnloadSettings().s3LinkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AmazonRedshiftSource model = new AmazonRedshiftSource().withSourceRetryCount("datapjoesozcuhun")
            .withSourceRetryWait("datazbmwptdr")
            .withMaxConcurrentConnections("datauyknoiumuxn")
            .withDisableMetricsCollection("dataivgmck")
            .withQueryTimeout("datamathiydmkyvsxc")
            .withAdditionalColumns("datavghajpddgfoznmf")
            .withQuery("datatgmxkol")
            .withRedshiftUnloadSettings(new RedshiftUnloadSettings()
                .withS3LinkedServiceName(new LinkedServiceReference().withReferenceName("nqjcmkpxbckjrfkw")
                    .withParameters(mapOf("zatqocvrdj", "datamyowddhtwaxob", "cyvymv", "datavsclwpsteuvjdnh",
                        "omohcynorh", "datalaehitxoib", "f", "databvbqxtktkeuapomo")))
                .withBucketName("datanbhptraljcqp"));
        model = BinaryData.fromObject(model).toObject(AmazonRedshiftSource.class);
        Assertions.assertEquals("nqjcmkpxbckjrfkw",
            model.redshiftUnloadSettings().s3LinkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
