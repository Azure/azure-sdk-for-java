// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AppendVariableActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AppendVariableActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AppendVariableActivity model = BinaryData.fromString(
            "{\"type\":\"ndirdlehjz\",\"typeProperties\":{\"variableName\":\"lrx\",\"value\":\"dataslccuyscjefa\"},\"name\":\"pdwyhggvhcoaoeti\",\"description\":\"tkeiram\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"glubqtfc\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Failed\"],\"\":{\"j\":\"datamir\"}}],\"userProperties\":[{\"name\":\"ksafjht\",\"value\":\"databrkghtsfp\"},{\"name\":\"junkhxthkqny\",\"value\":\"dataufvzrqaphep\"},{\"name\":\"eheeqq\",\"value\":\"datatasijiaqqwom\"}],\"\":{\"mvlfmv\":\"datamwqfdhg\",\"bafscdpbzpo\":\"dataumjmpsxz\",\"qtcnyhsdgmoxnelh\":\"datajhubzkzjazfwywv\",\"kofcsvipwa\":\"datahzfyzb\"}}")
            .toObject(AppendVariableActivity.class);
        Assertions.assertEquals("pdwyhggvhcoaoeti", model.name());
        Assertions.assertEquals("tkeiram", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("glubqtfc", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ksafjht", model.userProperties().get(0).name());
        Assertions.assertEquals("lrx", model.variableName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AppendVariableActivity model = new AppendVariableActivity().withName("pdwyhggvhcoaoeti")
            .withDescription("tkeiram")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("glubqtfc")
                .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED,
                    DependencyCondition.FAILED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("ksafjht").withValue("databrkghtsfp"),
                new UserProperty().withName("junkhxthkqny").withValue("dataufvzrqaphep"),
                new UserProperty().withName("eheeqq").withValue("datatasijiaqqwom")))
            .withVariableName("lrx")
            .withValue("dataslccuyscjefa");
        model = BinaryData.fromObject(model).toObject(AppendVariableActivity.class);
        Assertions.assertEquals("pdwyhggvhcoaoeti", model.name());
        Assertions.assertEquals("tkeiram", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("glubqtfc", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ksafjht", model.userProperties().get(0).name());
        Assertions.assertEquals("lrx", model.variableName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
