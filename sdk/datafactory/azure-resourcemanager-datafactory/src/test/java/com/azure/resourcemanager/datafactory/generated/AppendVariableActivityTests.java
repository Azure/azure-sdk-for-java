// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.AppendVariableActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AppendVariableActivityTests {
    @Test
    public void testDeserialize() {
        AppendVariableActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"AppendVariable\",\"typeProperties\":{\"variableName\":\"shzz\"},\"name\":\"ullc\",\"description\":\"qqzjkoxdu\",\"dependsOn\":[{\"activity\":\"mglrouigdm\",\"dependencyConditions\":[\"Failed\"],\"\":{}},{\"activity\":\"terdqqi\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Failed\",\"Skipped\"],\"\":{}},{\"activity\":\"cvrwq\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Skipped\"],\"\":{}}],\"userProperties\":[{\"name\":\"mvfxlapjajod\"},{\"name\":\"krrwepgqvqokql\"},{\"name\":\"jqgir\"},{\"name\":\"bwlyvxc\"}],\"\":{}}")
                .toObject(AppendVariableActivity.class);
        Assertions.assertEquals("ullc", model.name());
        Assertions.assertEquals("qqzjkoxdu", model.description());
        Assertions.assertEquals("mglrouigdm", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("mvfxlapjajod", model.userProperties().get(0).name());
        Assertions.assertEquals("shzz", model.variableName());
    }

    @Test
    public void testSerialize() {
        AppendVariableActivity model =
            new AppendVariableActivity()
                .withName("ullc")
                .withDescription("qqzjkoxdu")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("mglrouigdm")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("terdqqi")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.FAILED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.FAILED,
                                            DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("cvrwq")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.FAILED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("mvfxlapjajod"),
                            new UserProperty().withName("krrwepgqvqokql"),
                            new UserProperty().withName("jqgir"),
                            new UserProperty().withName("bwlyvxc")))
                .withVariableName("shzz");
        model = BinaryData.fromObject(model).toObject(AppendVariableActivity.class);
        Assertions.assertEquals("ullc", model.name());
        Assertions.assertEquals("qqzjkoxdu", model.description());
        Assertions.assertEquals("mglrouigdm", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("mvfxlapjajod", model.userProperties().get(0).name());
        Assertions.assertEquals("shzz", model.variableName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
