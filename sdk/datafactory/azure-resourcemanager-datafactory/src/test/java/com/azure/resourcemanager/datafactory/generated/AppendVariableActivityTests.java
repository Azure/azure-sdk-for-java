// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AppendVariableActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AppendVariableActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AppendVariableActivity model = BinaryData.fromString(
            "{\"type\":\"AppendVariable\",\"typeProperties\":{\"variableName\":\"q\",\"value\":\"dataf\"},\"name\":\"gntrynfoaoeuztps\",\"description\":\"hdqcrigygtodp\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"bybrvkxrcfzsz\",\"dependencyConditions\":[\"Succeeded\",\"Completed\"],\"\":{\"uuzftd\":\"dataucvq\",\"vxtz\":\"dataktmsphcrn\",\"pigsulejukack\":\"dataspykcreu\"}},{\"activity\":\"crdrdkexcyw\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Completed\",\"Succeeded\"],\"\":{\"rsajtdzpel\":\"datajllypchqhc\",\"gczxicqyvwzxqmve\":\"dataktkimm\",\"mrqdgyttfzoz\":\"datatnro\"}}],\"userProperties\":[{\"name\":\"njjimfcgbdup\",\"value\":\"datalwlhuuezxcpxwq\"}],\"\":{\"foosiplhygpsahu\":\"dataqueqeabe\",\"geym\":\"datammshfh\",\"lpnrjswr\":\"datapvgatzr\"}}")
            .toObject(AppendVariableActivity.class);
        Assertions.assertEquals("gntrynfoaoeuztps", model.name());
        Assertions.assertEquals("hdqcrigygtodp", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("bybrvkxrcfzsz", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("njjimfcgbdup", model.userProperties().get(0).name());
        Assertions.assertEquals("q", model.variableName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AppendVariableActivity model = new AppendVariableActivity().withName("gntrynfoaoeuztps")
            .withDescription("hdqcrigygtodp")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("bybrvkxrcfzsz")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("crdrdkexcyw")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("njjimfcgbdup").withValue("datalwlhuuezxcpxwq")))
            .withVariableName("q")
            .withValue("dataf");
        model = BinaryData.fromObject(model).toObject(AppendVariableActivity.class);
        Assertions.assertEquals("gntrynfoaoeuztps", model.name());
        Assertions.assertEquals("hdqcrigygtodp", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("bybrvkxrcfzsz", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("njjimfcgbdup", model.userProperties().get(0).name());
        Assertions.assertEquals("q", model.variableName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
