// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AppendVariableActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AppendVariableActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AppendVariableActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"AppendVariable\",\"typeProperties\":{\"variableName\":\"ubsaskgi\",\"value\":\"datailbiwacxldho\"},\"name\":\"cdpwxh\",\"description\":\"vtbgznpxa\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"hikmfzdlhp\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Skipped\"],\"\":{\"pfku\":\"dataiaztmxwmjaevwidn\",\"y\":\"datahwdirt\",\"dykxgcfhv\":\"dataaqya\"}},{\"activity\":\"ynsyhz\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Failed\"],\"\":{\"ujhjbfoemmj\":\"dataycraryxrtt\",\"vvpxhdefydit\":\"datastlg\",\"a\":\"datajm\"}},{\"activity\":\"jyqhcowouoih\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Completed\",\"Failed\"],\"\":{\"hjpsgprlmpz\":\"datab\",\"hvphkdciyidzb\":\"dataaiakyflr\"}},{\"activity\":\"fwlxxwpyzbgstml\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"kkengowcut\":\"datagcazyni\",\"ouichoiimennxvqj\":\"datahmxmjm\",\"efszuu\":\"datakqdqn\"}}],\"userProperties\":[{\"name\":\"esfggheqllrpcqy\",\"value\":\"dataq\"},{\"name\":\"krvmvdqhag\",\"value\":\"datahohqe\"},{\"name\":\"tlsipedgtupkm\",\"value\":\"dataxeubngwidgxypdo\"}],\"\":{\"ivybl\":\"datahmcmfvyh\",\"k\":\"datao\"}}")
                .toObject(AppendVariableActivity.class);
        Assertions.assertEquals("cdpwxh", model.name());
        Assertions.assertEquals("vtbgznpxa", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("hikmfzdlhp", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("esfggheqllrpcqy", model.userProperties().get(0).name());
        Assertions.assertEquals("ubsaskgi", model.variableName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AppendVariableActivity model =
            new AppendVariableActivity()
                .withName("cdpwxh")
                .withDescription("vtbgznpxa")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("hikmfzdlhp")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("ynsyhz")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("jyqhcowouoih")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("fwlxxwpyzbgstml")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("esfggheqllrpcqy").withValue("dataq"),
                            new UserProperty().withName("krvmvdqhag").withValue("datahohqe"),
                            new UserProperty().withName("tlsipedgtupkm").withValue("dataxeubngwidgxypdo")))
                .withVariableName("ubsaskgi")
                .withValue("datailbiwacxldho");
        model = BinaryData.fromObject(model).toObject(AppendVariableActivity.class);
        Assertions.assertEquals("cdpwxh", model.name());
        Assertions.assertEquals("vtbgznpxa", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("hikmfzdlhp", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("esfggheqllrpcqy", model.userProperties().get(0).name());
        Assertions.assertEquals("ubsaskgi", model.variableName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
