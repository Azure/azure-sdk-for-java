// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MongoDbAtlasCollectionDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbAtlasCollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbAtlasCollectionDataset model = BinaryData.fromString(
            "{\"type\":\"jrnogykugdl\",\"typeProperties\":{\"collection\":\"datalkyhtrrqwfyybpt\"},\"description\":\"sav\",\"structure\":\"datahk\",\"schema\":\"datageuufkb\",\"linkedServiceName\":{\"referenceName\":\"bfbxj\",\"parameters\":{\"sazdjmofsvpz\":\"datajybdnbycsbto\",\"mlfjymgw\":\"datagnywxu\",\"q\":\"datamszcfy\",\"re\":\"datae\"}},\"parameters\":{\"vrgihl\":{\"type\":\"Array\",\"defaultValue\":\"datapagknxma\"}},\"annotations\":[\"datafewvqk\"],\"folder\":{\"name\":\"cgeipqxxsdyaf\"},\"\":{\"clejqzhpv\":\"datadsmmabh\",\"eullgfyog\":\"dataxpbadj\"}}")
            .toObject(MongoDbAtlasCollectionDataset.class);
        Assertions.assertEquals("sav", model.description());
        Assertions.assertEquals("bfbxj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("vrgihl").type());
        Assertions.assertEquals("cgeipqxxsdyaf", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbAtlasCollectionDataset model = new MongoDbAtlasCollectionDataset().withDescription("sav")
            .withStructure("datahk")
            .withSchema("datageuufkb")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("bfbxj")
                .withParameters(mapOf("sazdjmofsvpz", "datajybdnbycsbto", "mlfjymgw", "datagnywxu", "q", "datamszcfy",
                    "re", "datae")))
            .withParameters(mapOf("vrgihl",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datapagknxma")))
            .withAnnotations(Arrays.asList("datafewvqk"))
            .withFolder(new DatasetFolder().withName("cgeipqxxsdyaf"))
            .withCollection("datalkyhtrrqwfyybpt");
        model = BinaryData.fromObject(model).toObject(MongoDbAtlasCollectionDataset.class);
        Assertions.assertEquals("sav", model.description());
        Assertions.assertEquals("bfbxj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("vrgihl").type());
        Assertions.assertEquals("cgeipqxxsdyaf", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
