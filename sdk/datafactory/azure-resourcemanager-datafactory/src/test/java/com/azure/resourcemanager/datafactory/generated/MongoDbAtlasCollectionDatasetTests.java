// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MongoDbAtlasCollectionDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbAtlasCollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbAtlasCollectionDataset model = BinaryData.fromString(
            "{\"type\":\"MongoDbAtlasCollection\",\"typeProperties\":{\"collection\":\"datapypkennycntrq\"},\"description\":\"wtdmb\",\"structure\":\"datatsuhqhtoxtd\",\"schema\":\"dataavfxbqmzxsya\",\"linkedServiceName\":{\"referenceName\":\"sinpaamihwbghvw\",\"parameters\":{\"qbjsdjpgxeysgw\":\"databgchcgsfzhbjkiy\",\"ivoveomkhfeqcoop\":\"datacfferznzc\",\"nbz\":\"datafpohimgckycjpeeb\"}},\"parameters\":{\"pbmxooqoh\":{\"type\":\"Float\",\"defaultValue\":\"dataout\"},\"upf\":{\"type\":\"SecureString\",\"defaultValue\":\"datacdmwk\"}},\"annotations\":[\"datad\",\"datadzauiunyev\",\"datayzdsytcikswhcam\",\"datauynfxkcgsfcmvh\"],\"folder\":{\"name\":\"pba\"},\"\":{\"owggx\":\"datarkljqkqwsyjtvj\",\"kteiidlbovwbclpr\":\"datawwdmbyp\",\"cnerekyjul\":\"dataeganihk\",\"qlq\":\"datakwwnq\"}}")
            .toObject(MongoDbAtlasCollectionDataset.class);
        Assertions.assertEquals("wtdmb", model.description());
        Assertions.assertEquals("sinpaamihwbghvw", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("pbmxooqoh").type());
        Assertions.assertEquals("pba", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbAtlasCollectionDataset model = new MongoDbAtlasCollectionDataset().withDescription("wtdmb")
            .withStructure("datatsuhqhtoxtd")
            .withSchema("dataavfxbqmzxsya")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("sinpaamihwbghvw")
                .withParameters(mapOf("qbjsdjpgxeysgw", "databgchcgsfzhbjkiy", "ivoveomkhfeqcoop", "datacfferznzc",
                    "nbz", "datafpohimgckycjpeeb")))
            .withParameters(mapOf("pbmxooqoh",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataout"), "upf",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datacdmwk")))
            .withAnnotations(Arrays.asList("datad", "datadzauiunyev", "datayzdsytcikswhcam", "datauynfxkcgsfcmvh"))
            .withFolder(new DatasetFolder().withName("pba"))
            .withCollection("datapypkennycntrq");
        model = BinaryData.fromObject(model).toObject(MongoDbAtlasCollectionDataset.class);
        Assertions.assertEquals("wtdmb", model.description());
        Assertions.assertEquals("sinpaamihwbghvw", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("pbmxooqoh").type());
        Assertions.assertEquals("pba", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
