// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MongoDbAtlasCollectionDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbAtlasCollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbAtlasCollectionDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"MongoDbAtlasCollection\",\"typeProperties\":{\"collection\":\"datafpohimgckycjpeeb\"},\"description\":\"bznxsuloutnpbm\",\"structure\":\"dataoqohgp\",\"schema\":\"datadmwk\",\"linkedServiceName\":{\"referenceName\":\"upf\",\"parameters\":{\"dzauiunyev\":\"datad\",\"uynfxkcgsfcmvh\":\"datayzdsytcikswhcam\",\"atvyrkljqkqws\":\"datadrp\",\"bypnkteiidlbov\":\"datajtvjkowggxawwd\"}},\"parameters\":{\"rekyjulskwwn\":{\"type\":\"String\",\"defaultValue\":\"datargeganihkjcn\"}},\"annotations\":[\"datalqgpwxtvceba\"],\"folder\":{\"name\":\"vxwve\"},\"\":{\"csmwevguy\":\"datalr\",\"rj\":\"datalnxe\",\"owwe\":\"datafzcde\",\"sfqbirtybcelfjn\":\"datahyfkdilbwqlqa\"}}")
                .toObject(MongoDbAtlasCollectionDataset.class);
        Assertions.assertEquals("bznxsuloutnpbm", model.description());
        Assertions.assertEquals("upf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("rekyjulskwwn").type());
        Assertions.assertEquals("vxwve", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbAtlasCollectionDataset model =
            new MongoDbAtlasCollectionDataset()
                .withDescription("bznxsuloutnpbm")
                .withStructure("dataoqohgp")
                .withSchema("datadmwk")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("upf")
                        .withParameters(
                            mapOf(
                                "dzauiunyev",
                                "datad",
                                "uynfxkcgsfcmvh",
                                "datayzdsytcikswhcam",
                                "atvyrkljqkqws",
                                "datadrp",
                                "bypnkteiidlbov",
                                "datajtvjkowggxawwd")))
                .withParameters(
                    mapOf(
                        "rekyjulskwwn",
                        new ParameterSpecification()
                            .withType(ParameterType.STRING)
                            .withDefaultValue("datargeganihkjcn")))
                .withAnnotations(Arrays.asList("datalqgpwxtvceba"))
                .withFolder(new DatasetFolder().withName("vxwve"))
                .withCollection("datafpohimgckycjpeeb");
        model = BinaryData.fromObject(model).toObject(MongoDbAtlasCollectionDataset.class);
        Assertions.assertEquals("bznxsuloutnpbm", model.description());
        Assertions.assertEquals("upf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("rekyjulskwwn").type());
        Assertions.assertEquals("vxwve", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
