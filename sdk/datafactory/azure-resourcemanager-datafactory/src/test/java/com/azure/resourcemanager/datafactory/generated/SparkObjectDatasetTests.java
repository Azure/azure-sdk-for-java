// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SparkObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SparkObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SparkObjectDataset model = BinaryData.fromString(
            "{\"type\":\"SparkObject\",\"typeProperties\":{\"tableName\":\"datatxtdqiusp\",\"table\":\"datazljvgjijzqjhljsa\",\"schema\":\"datajsisfqqhcmec\"},\"description\":\"sbfe\",\"structure\":\"datarpnjygllfkchhgsj\",\"schema\":\"datazcajlwmqc\",\"linkedServiceName\":{\"referenceName\":\"cabaam\",\"parameters\":{\"oqywsuarpzhryh\":\"datadhpmkxdujkxpuqzd\",\"zdsyxb\":\"datazx\",\"hwivkd\":\"datajilbuazcco\",\"pi\":\"datavjsknrbxz\"}},\"parameters\":{\"dqbvx\":{\"type\":\"Float\",\"defaultValue\":\"datai\"}},\"annotations\":[\"datalpwbopvhcbt\"],\"folder\":{\"name\":\"rjxcon\"},\"\":{\"h\":\"datakfki\",\"gvuqzgbjwvrudmp\":\"dataeoc\",\"esgyzwph\":\"dataewpmioleaja\"}}")
            .toObject(SparkObjectDataset.class);
        Assertions.assertEquals("sbfe", model.description());
        Assertions.assertEquals("cabaam", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("dqbvx").type());
        Assertions.assertEquals("rjxcon", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SparkObjectDataset model = new SparkObjectDataset().withDescription("sbfe")
            .withStructure("datarpnjygllfkchhgsj")
            .withSchema("datazcajlwmqc")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("cabaam")
                .withParameters(mapOf("oqywsuarpzhryh", "datadhpmkxdujkxpuqzd", "zdsyxb", "datazx", "hwivkd",
                    "datajilbuazcco", "pi", "datavjsknrbxz")))
            .withParameters(
                mapOf("dqbvx", new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datai")))
            .withAnnotations(Arrays.asList("datalpwbopvhcbt"))
            .withFolder(new DatasetFolder().withName("rjxcon"))
            .withTableName("datatxtdqiusp")
            .withTable("datazljvgjijzqjhljsa")
            .withSchemaTypePropertiesSchema("datajsisfqqhcmec");
        model = BinaryData.fromObject(model).toObject(SparkObjectDataset.class);
        Assertions.assertEquals("sbfe", model.description());
        Assertions.assertEquals("cabaam", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("dqbvx").type());
        Assertions.assertEquals("rjxcon", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
