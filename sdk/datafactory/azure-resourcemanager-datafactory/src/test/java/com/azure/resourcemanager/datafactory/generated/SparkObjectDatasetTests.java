// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SparkObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SparkObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SparkObjectDataset model = BinaryData.fromString(
            "{\"type\":\"SparkObject\",\"typeProperties\":{\"tableName\":\"datavmshkkgygfohrm\",\"table\":\"datahlclpkr\",\"schema\":\"datacbmjjviutivr\"},\"description\":\"ztxt\",\"structure\":\"datamgftjviiloh\",\"schema\":\"datarjcxhhfhznsjx\",\"linkedServiceName\":{\"referenceName\":\"fo\",\"parameters\":{\"sxhdkhm\":\"datauylyumbweprlnuo\",\"lyfzmnxr\":\"datamxkahapesnbyou\",\"fwzlmpx\":\"dataxxjvwbatjgzkm\"}},\"parameters\":{\"mmdzphxulx\":{\"type\":\"Bool\",\"defaultValue\":\"datai\"},\"cpbzxpz\":{\"type\":\"SecureString\",\"defaultValue\":\"datadnpfcghdttowqx\"},\"feomotquqlq\":{\"type\":\"Bool\",\"defaultValue\":\"datavhatiywtcvzuzp\"}},\"annotations\":[\"datasgqp\"],\"folder\":{\"name\":\"dpfvlsqmmetwtla\"},\"\":{\"cgrllyyfsmoc\":\"datajtefbdpnuvh\",\"chmetvzhuugdykgd\":\"dataxh\"}}")
            .toObject(SparkObjectDataset.class);
        Assertions.assertEquals("ztxt", model.description());
        Assertions.assertEquals("fo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("mmdzphxulx").type());
        Assertions.assertEquals("dpfvlsqmmetwtla", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SparkObjectDataset model = new SparkObjectDataset().withDescription("ztxt")
            .withStructure("datamgftjviiloh")
            .withSchema("datarjcxhhfhznsjx")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("fo")
                .withParameters(mapOf("sxhdkhm", "datauylyumbweprlnuo", "lyfzmnxr", "datamxkahapesnbyou", "fwzlmpx",
                    "dataxxjvwbatjgzkm")))
            .withParameters(mapOf("mmdzphxulx",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datai"), "cpbzxpz",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("datadnpfcghdttowqx"),
                "feomotquqlq",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datavhatiywtcvzuzp")))
            .withAnnotations(Arrays.asList("datasgqp"))
            .withFolder(new DatasetFolder().withName("dpfvlsqmmetwtla"))
            .withTableName("datavmshkkgygfohrm")
            .withTable("datahlclpkr")
            .withSchemaTypePropertiesSchema("datacbmjjviutivr");
        model = BinaryData.fromObject(model).toObject(SparkObjectDataset.class);
        Assertions.assertEquals("ztxt", model.description());
        Assertions.assertEquals("fo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("mmdzphxulx").type());
        Assertions.assertEquals("dpfvlsqmmetwtla", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
