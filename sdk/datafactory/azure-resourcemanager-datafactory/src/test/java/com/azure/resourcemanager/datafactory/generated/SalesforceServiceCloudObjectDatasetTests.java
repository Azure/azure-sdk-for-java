// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SalesforceServiceCloudObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SalesforceServiceCloudObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SalesforceServiceCloudObjectDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"SalesforceServiceCloudObject\",\"typeProperties\":{\"objectApiName\":\"datar\"},\"description\":\"nieu\",\"structure\":\"dataydlgfap\",\"schema\":\"datauubwts\",\"linkedServiceName\":{\"referenceName\":\"yn\",\"parameters\":{\"vqjmrnblihs\":\"datajfqreeo\",\"divixzhpjgqzmiao\":\"databfb\",\"ruetcnx\":\"dataweacfxaubu\",\"nowobwx\":\"dataiqzzdckhsqdrrjsu\"}},\"parameters\":{\"zheahuv\":{\"type\":\"String\",\"defaultValue\":\"datakohlsfjfouqj\"}},\"annotations\":[\"dataqkvadmjhymud\",\"datamaajzd\",\"databhsermclyqwwu\",\"datayqkaaptb\"],\"folder\":{\"name\":\"kb\"},\"\":{\"shvqnpszbeuyb\":\"datatwybloccuhplxzbn\",\"zjfjtvpey\":\"datatc\",\"jgpqfk\":\"datadyuxurxrltqmm\",\"xgwpq\":\"datanaeikczscymqf\"}}")
                .toObject(SalesforceServiceCloudObjectDataset.class);
        Assertions.assertEquals("nieu", model.description());
        Assertions.assertEquals("yn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("zheahuv").type());
        Assertions.assertEquals("kb", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SalesforceServiceCloudObjectDataset model =
            new SalesforceServiceCloudObjectDataset()
                .withDescription("nieu")
                .withStructure("dataydlgfap")
                .withSchema("datauubwts")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("yn")
                        .withParameters(
                            mapOf(
                                "vqjmrnblihs",
                                "datajfqreeo",
                                "divixzhpjgqzmiao",
                                "databfb",
                                "ruetcnx",
                                "dataweacfxaubu",
                                "nowobwx",
                                "dataiqzzdckhsqdrrjsu")))
                .withParameters(
                    mapOf(
                        "zheahuv",
                        new ParameterSpecification()
                            .withType(ParameterType.STRING)
                            .withDefaultValue("datakohlsfjfouqj")))
                .withAnnotations(Arrays.asList("dataqkvadmjhymud", "datamaajzd", "databhsermclyqwwu", "datayqkaaptb"))
                .withFolder(new DatasetFolder().withName("kb"))
                .withObjectApiName("datar");
        model = BinaryData.fromObject(model).toObject(SalesforceServiceCloudObjectDataset.class);
        Assertions.assertEquals("nieu", model.description());
        Assertions.assertEquals("yn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("zheahuv").type());
        Assertions.assertEquals("kb", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
