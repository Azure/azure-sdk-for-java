// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SalesforceServiceCloudObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SalesforceServiceCloudObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SalesforceServiceCloudObjectDataset model = BinaryData.fromString(
            "{\"type\":\"SalesforceServiceCloudObject\",\"typeProperties\":{\"objectApiName\":\"datafj\"},\"description\":\"tnhrevimxmaxcj\",\"structure\":\"dataitygvdwds\",\"schema\":\"datatb\",\"linkedServiceName\":{\"referenceName\":\"kvuozbzchnqek\",\"parameters\":{\"kjse\":\"dataklpurlcydjh\",\"rdonkgobx\":\"datawiynd\"}},\"parameters\":{\"rswknpdrgnmza\":{\"type\":\"SecureString\",\"defaultValue\":\"datale\"},\"bk\":{\"type\":\"Object\",\"defaultValue\":\"dataoefqckievyrejyo\"},\"rovomep\":{\"type\":\"Bool\",\"defaultValue\":\"datausdwmnrtvvbucn\"}},\"annotations\":[\"dataicvwqzo\",\"datasfshe\",\"datanmsg\"],\"folder\":{\"name\":\"dibugvnrgalvwrhr\"},\"\":{\"vnpyeevffifujgtd\":\"datarbknuubxcwojtupq\",\"ybpchrtczwjcujyz\":\"datawlxmwefc\",\"i\":\"datavyrjqdjlgk\",\"n\":\"dataxxeuwiiirc\"}}")
            .toObject(SalesforceServiceCloudObjectDataset.class);
        Assertions.assertEquals("tnhrevimxmaxcj", model.description());
        Assertions.assertEquals("kvuozbzchnqek", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("rswknpdrgnmza").type());
        Assertions.assertEquals("dibugvnrgalvwrhr", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SalesforceServiceCloudObjectDataset model
            = new SalesforceServiceCloudObjectDataset().withDescription("tnhrevimxmaxcj")
                .withStructure("dataitygvdwds")
                .withSchema("datatb")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("kvuozbzchnqek")
                    .withParameters(mapOf("kjse", "dataklpurlcydjh", "rdonkgobx", "datawiynd")))
                .withParameters(mapOf("rswknpdrgnmza",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datale"), "bk",
                    new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataoefqckievyrejyo"),
                    "rovomep",
                    new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datausdwmnrtvvbucn")))
                .withAnnotations(Arrays.asList("dataicvwqzo", "datasfshe", "datanmsg"))
                .withFolder(new DatasetFolder().withName("dibugvnrgalvwrhr"))
                .withObjectApiName("datafj");
        model = BinaryData.fromObject(model).toObject(SalesforceServiceCloudObjectDataset.class);
        Assertions.assertEquals("tnhrevimxmaxcj", model.description());
        Assertions.assertEquals("kvuozbzchnqek", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("rswknpdrgnmza").type());
        Assertions.assertEquals("dibugvnrgalvwrhr", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
