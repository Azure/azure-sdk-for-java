// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SalesforceServiceCloudObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SalesforceServiceCloudObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SalesforceServiceCloudObjectDataset model = BinaryData.fromString(
            "{\"type\":\"ishyfmrzc\",\"typeProperties\":{\"objectApiName\":\"dataxymckikkqyvur\"},\"description\":\"evnkyakck\",\"structure\":\"datah\",\"schema\":\"datansddjkkd\",\"linkedServiceName\":{\"referenceName\":\"desuazogfcn\",\"parameters\":{\"umtcqxmyvkxixypa\":\"datag\",\"g\":\"dataifjc\",\"czbyfkocgm\":\"datahvpsuwichm\",\"gxrolw\":\"datadctsnlwscrngt\"}},\"parameters\":{\"ish\":{\"type\":\"SecureString\",\"defaultValue\":\"datadksutacuctiha\"}},\"annotations\":[\"datahxvpmqququxlp\",\"datan\",\"datarxlexoweorocr\"],\"folder\":{\"name\":\"gy\"},\"\":{\"tvijvwmrgcnz\":\"databqpfyrv\"}}")
            .toObject(SalesforceServiceCloudObjectDataset.class);
        Assertions.assertEquals("evnkyakck", model.description());
        Assertions.assertEquals("desuazogfcn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("ish").type());
        Assertions.assertEquals("gy", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SalesforceServiceCloudObjectDataset model
            = new SalesforceServiceCloudObjectDataset().withDescription("evnkyakck")
                .withStructure("datah")
                .withSchema("datansddjkkd")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("desuazogfcn")
                    .withParameters(mapOf("umtcqxmyvkxixypa", "datag", "g", "dataifjc", "czbyfkocgm", "datahvpsuwichm",
                        "gxrolw", "datadctsnlwscrngt")))
                .withParameters(mapOf("ish",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                        .withDefaultValue("datadksutacuctiha")))
                .withAnnotations(Arrays.asList("datahxvpmqququxlp", "datan", "datarxlexoweorocr"))
                .withFolder(new DatasetFolder().withName("gy"))
                .withObjectApiName("dataxymckikkqyvur");
        model = BinaryData.fromObject(model).toObject(SalesforceServiceCloudObjectDataset.class);
        Assertions.assertEquals("evnkyakck", model.description());
        Assertions.assertEquals("desuazogfcn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("ish").type());
        Assertions.assertEquals("gy", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
