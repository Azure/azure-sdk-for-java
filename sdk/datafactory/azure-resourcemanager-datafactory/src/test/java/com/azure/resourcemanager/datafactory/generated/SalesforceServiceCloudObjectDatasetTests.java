// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SalesforceServiceCloudObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SalesforceServiceCloudObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SalesforceServiceCloudObjectDataset model = BinaryData.fromString(
            "{\"type\":\"SalesforceServiceCloudObject\",\"typeProperties\":{\"objectApiName\":\"dataxu\"},\"description\":\"aujqgbbjv\",\"structure\":\"dataoawh\",\"schema\":\"datasmbcsloygsab\",\"linkedServiceName\":{\"referenceName\":\"gdheronsd\",\"parameters\":{\"fdbqskgqjbvitp\":\"datakzvzuatqhgzuyxtr\",\"wkgjwb\":\"datapvsffavdhpiwrm\"}},\"parameters\":{\"megaj\":{\"type\":\"Object\",\"defaultValue\":\"databwxyldqtmggcpd\"},\"wqkkgeseip\":{\"type\":\"String\",\"defaultValue\":\"datatwymzs\"}},\"annotations\":[\"dataiupqscoobkj\"],\"folder\":{\"name\":\"xsqcom\"},\"\":{\"ncevxxkdevpxi\":\"datai\",\"tv\":\"dataziizmeqmdu\",\"p\":\"datadqx\"}}")
            .toObject(SalesforceServiceCloudObjectDataset.class);
        Assertions.assertEquals("aujqgbbjv", model.description());
        Assertions.assertEquals("gdheronsd", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("megaj").type());
        Assertions.assertEquals("xsqcom", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SalesforceServiceCloudObjectDataset model
            = new SalesforceServiceCloudObjectDataset().withDescription("aujqgbbjv")
                .withStructure("dataoawh")
                .withSchema("datasmbcsloygsab")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("gdheronsd")
                    .withParameters(mapOf("fdbqskgqjbvitp", "datakzvzuatqhgzuyxtr", "wkgjwb", "datapvsffavdhpiwrm")))
                .withParameters(
                    mapOf("megaj",
                        new ParameterSpecification().withType(ParameterType.OBJECT)
                            .withDefaultValue("databwxyldqtmggcpd"),
                        "wqkkgeseip",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datatwymzs")))
                .withAnnotations(Arrays.asList("dataiupqscoobkj"))
                .withFolder(new DatasetFolder().withName("xsqcom"))
                .withObjectApiName("dataxu");
        model = BinaryData.fromObject(model).toObject(SalesforceServiceCloudObjectDataset.class);
        Assertions.assertEquals("aujqgbbjv", model.description());
        Assertions.assertEquals("gdheronsd", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("megaj").type());
        Assertions.assertEquals("xsqcom", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
