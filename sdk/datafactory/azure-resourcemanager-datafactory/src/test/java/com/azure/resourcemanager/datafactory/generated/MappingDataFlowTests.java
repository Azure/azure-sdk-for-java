// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowSink;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.MappingDataFlow;
import com.azure.resourcemanager.datafactory.models.Transformation;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class MappingDataFlowTests {
    @Test
    public void testDeserialize() {
        MappingDataFlow model =
            BinaryData
                .fromString(
                    "{\"type\":\"MappingDataFlow\",\"typeProperties\":{\"sources\":[{\"name\":\"nwxyiop\",\"description\":\"kqqfk\"},{\"name\":\"kdmligovi\",\"description\":\"xk\"},{\"name\":\"zuruocbgo\",\"description\":\"bteoybf\"}],\"sinks\":[{\"name\":\"gslordilmyww\",\"description\":\"gkxnyedabg\"},{\"name\":\"uewbc\",\"description\":\"xuuwhcj\"}],\"transformations\":[{\"name\":\"vpayakkudzpx\",\"description\":\"jplmagstcy\"}],\"script\":\"yrkdbdgiogsjkmn\",\"scriptLines\":[\"nobaiyhddviacegf\",\"m\"]},\"description\":\"fpmvmemfnczd\",\"annotations\":[],\"folder\":{\"name\":\"lxlllchpo\"}}")
                .toObject(MappingDataFlow.class);
        Assertions.assertEquals("fpmvmemfnczd", model.description());
        Assertions.assertEquals("lxlllchpo", model.folder().name());
        Assertions.assertEquals("nwxyiop", model.sources().get(0).name());
        Assertions.assertEquals("kqqfk", model.sources().get(0).description());
        Assertions.assertEquals("gslordilmyww", model.sinks().get(0).name());
        Assertions.assertEquals("gkxnyedabg", model.sinks().get(0).description());
        Assertions.assertEquals("vpayakkudzpx", model.transformations().get(0).name());
        Assertions.assertEquals("jplmagstcy", model.transformations().get(0).description());
        Assertions.assertEquals("yrkdbdgiogsjkmn", model.script());
        Assertions.assertEquals("nobaiyhddviacegf", model.scriptLines().get(0));
    }

    @Test
    public void testSerialize() {
        MappingDataFlow model =
            new MappingDataFlow()
                .withDescription("fpmvmemfnczd")
                .withAnnotations(Arrays.asList())
                .withFolder(new DataFlowFolder().withName("lxlllchpo"))
                .withSources(
                    Arrays
                        .asList(
                            new DataFlowSource().withName("nwxyiop").withDescription("kqqfk"),
                            new DataFlowSource().withName("kdmligovi").withDescription("xk"),
                            new DataFlowSource().withName("zuruocbgo").withDescription("bteoybf")))
                .withSinks(
                    Arrays
                        .asList(
                            new DataFlowSink().withName("gslordilmyww").withDescription("gkxnyedabg"),
                            new DataFlowSink().withName("uewbc").withDescription("xuuwhcj")))
                .withTransformations(
                    Arrays.asList(new Transformation().withName("vpayakkudzpx").withDescription("jplmagstcy")))
                .withScript("yrkdbdgiogsjkmn")
                .withScriptLines(Arrays.asList("nobaiyhddviacegf", "m"));
        model = BinaryData.fromObject(model).toObject(MappingDataFlow.class);
        Assertions.assertEquals("fpmvmemfnczd", model.description());
        Assertions.assertEquals("lxlllchpo", model.folder().name());
        Assertions.assertEquals("nwxyiop", model.sources().get(0).name());
        Assertions.assertEquals("kqqfk", model.sources().get(0).description());
        Assertions.assertEquals("gslordilmyww", model.sinks().get(0).name());
        Assertions.assertEquals("gkxnyedabg", model.sinks().get(0).description());
        Assertions.assertEquals("vpayakkudzpx", model.transformations().get(0).name());
        Assertions.assertEquals("jplmagstcy", model.transformations().get(0).description());
        Assertions.assertEquals("yrkdbdgiogsjkmn", model.script());
        Assertions.assertEquals("nobaiyhddviacegf", model.scriptLines().get(0));
    }
}
