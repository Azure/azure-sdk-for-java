// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSink;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MappingDataFlow;
import com.azure.resourcemanager.datafactory.models.Transformation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MappingDataFlowTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MappingDataFlow model = BinaryData.fromString(
            "{\"type\":\"MappingDataFlow\",\"typeProperties\":{\"sources\":[{\"schemaLinkedService\":{\"referenceName\":\"trpb\",\"parameters\":{\"lbnwtpcpahp\":\"datayuuatvlmbjwcolbm\"}},\"name\":\"z\",\"description\":\"xhmtfhocnxzc\",\"dataset\":{\"referenceName\":\"hngxnoqrxtd\",\"parameters\":{\"epfwwt\":\"datajevhdlmydidw\",\"o\":\"dataf\",\"wcdbckyoik\":\"datasxxh\",\"rbhtmeplvukaobr\":\"datakxhnegknj\"}},\"linkedService\":{\"referenceName\":\"pgsn\",\"parameters\":{\"hjym\":\"datanchjhgemuowakywa\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"qt\",\"datasetParameters\":\"datadrclssoljome\",\"parameters\":{\"gjiiytssiki\":\"dataycnlbvgjcodk\",\"gmqsorhcekxg\":\"databcufqbvntn\"},\"\":{\"cpwzv\":\"datakm\",\"qba\":\"datadoksqdtiwlwxlbon\",\"xbyja\":\"dataqicqchygt\"}}}],\"sinks\":[{\"schemaLinkedService\":{\"referenceName\":\"bdpkxyqvgx\",\"parameters\":{\"hkxdxuwsaifmc\":\"datadetv\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"osbz\",\"parameters\":{\"bcknjolgj\":\"datagcv\"}},\"name\":\"yxpvelszerqze\",\"description\":\"o\",\"dataset\":{\"referenceName\":\"intxwa\",\"parameters\":{\"ulhmzyq\":\"datalzoblqwaafr\",\"gaxwmzwdfkbnrzo\":\"datahdvafjrqpjiyrqjc\",\"tqjfgxxsaet\":\"datapdltbq\"}},\"linkedService\":{\"referenceName\":\"dgvpyig\",\"parameters\":{\"uwjoedxnguca\":\"dataqilzdc\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"aurwwgilfjq\",\"datasetParameters\":\"datacdmkxwxdcvjw\",\"parameters\":{\"xrtuicds\":\"dataiakeciqc\"},\"\":{\"hzzwvywrgyngy\":\"datafmmp\",\"clamgglvlmfejdoq\":\"datagrpxncakiqaondjr\",\"gxhqfgqkayejs\":\"dataykglt\"}}},{\"schemaLinkedService\":{\"referenceName\":\"lgflwfg\",\"parameters\":{\"ijjcea\":\"datau\",\"a\":\"datalijjjrtvam\",\"cxetyvkunmignoh\":\"datazknxkv\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"kgqogjw\",\"parameters\":{\"eilbjywfcf\":\"datadedvabbxbhme\"}},\"name\":\"zir\",\"description\":\"ihvwyp\",\"dataset\":{\"referenceName\":\"u\",\"parameters\":{\"djsllfr\":\"datalczwci\",\"frgnawbabgfbktyj\":\"datavdmvxadqa\",\"xqmjeajcxn\":\"datafczlfsyqkfrbzgow\",\"hlusrvxisi\":\"dataqg\"}},\"linkedService\":{\"referenceName\":\"ceagbjqvlsumywz\",\"parameters\":{\"oyjfqipu\":\"dataxgo\",\"gv\":\"datayznclkfkee\",\"l\":\"datapemtuoqu\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"qavn\",\"datasetParameters\":\"dataflqqbtnyjpylxd\",\"parameters\":{\"kottlwuhvajmailf\":\"dataabmvmsxbaevwjc\"},\"\":{\"xbdmvrscmqernd\":\"datajzakzwjiqull\",\"dj\":\"datarnyeofltfnnxrk\",\"ipfohykfkx\":\"dataynnfmuiii\",\"woiymrvz\":\"databcbrwjiutgnjizbe\"}}}],\"transformations\":[{\"name\":\"yrsrziuctixgb\",\"description\":\"uifr\",\"dataset\":{\"referenceName\":\"kaapezkiswqjmdg\",\"parameters\":{\"jczjnciuiyqv\":\"dataparybjufpt\",\"sqqzlgcndhz\":\"datadaswvpp\",\"cfsrhkhgsn\":\"datarr\",\"pphefsbzx\":\"datauww\"}},\"linkedService\":{\"referenceName\":\"zxomeikjclwz\",\"parameters\":{\"qtaazyqbxy\":\"datamwpfs\",\"iqezxlhdj\":\"dataoyfpuq\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"cadwvpsozjii\",\"datasetParameters\":\"datariybmrz\",\"parameters\":{\"fnmxa\":\"datanxwdvwnjkg\"},\"\":{\"tibtyi\":\"dataq\",\"jpnqnoowsbeden\":\"datauyvpirf\",\"ucnulgmnh\":\"dataexkxbhx\",\"fajs\":\"dataevdyz\"}}},{\"name\":\"kskmqozzkivyhjrl\",\"description\":\"zji\",\"dataset\":{\"referenceName\":\"qfhefkwabsol\",\"parameters\":{\"exhvuqbozoolz\":\"dataqqlmgnlqxsjxte\",\"nx\":\"dataocarkuzlbcnndt\"}},\"linkedService\":{\"referenceName\":\"qytl\",\"parameters\":{\"ckze\":\"datayzm\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"akckywym\",\"datasetParameters\":\"dataaabjkdtfohfao\",\"parameters\":{\"y\":\"datakiwrsiw\",\"rra\":\"dataquryk\",\"s\":\"dataeek\",\"gdda\":\"dataeh\"},\"\":{\"mptyrilkfbnrqqxv\":\"databgydlqidywm\",\"swbnfddepldwqjns\":\"datatpbnfnqtxjtoma\"}}},{\"name\":\"zygleexahvm\",\"description\":\"hsbrcary\",\"dataset\":{\"referenceName\":\"jjzyvoaqajuve\",\"parameters\":{\"be\":\"datatdmkrrbhmpful\",\"ununm\":\"datagybpmfb\",\"kdschlzvfictnkjj\":\"datazkrvfyi\",\"hbkgfyrt\":\"datagcwn\"}},\"linkedService\":{\"referenceName\":\"mhmjpjs\",\"parameters\":{\"arxifvqnrxt\":\"datapdqwtygevgwmse\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"jptnvwjhrsidqpx\",\"datasetParameters\":\"datatpakf\",\"parameters\":{\"ykyutrymdwmfj\":\"dataatw\",\"efgnaavuagnt\":\"datapycvjqdvdwkqpldr\",\"hspfefyihd\":\"datataoutnpdct\"},\"\":{\"hmtybkcgsuthhll\":\"datauyld\",\"jrr\":\"datamwynefxexlfciatx\",\"ajfoxc\":\"datakmdskjhhxd\"}}}],\"script\":\"cvslxlhuavkrmukm\",\"scriptLines\":[\"kxettcslojfkq\",\"dnqtoqxjhqx\",\"s\"]},\"description\":\"tkbtnqlrngl\",\"annotations\":[\"dataiipsnawwlqkz\",\"dataxhhllxricct\",\"datawmuqqoajxeiygle\",\"datarwvaexhdc\"],\"folder\":{\"name\":\"eqnkbrupobehdml\"}}")
            .toObject(MappingDataFlow.class);
        Assertions.assertEquals("tkbtnqlrngl", model.description());
        Assertions.assertEquals("eqnkbrupobehdml", model.folder().name());
        Assertions.assertEquals("z", model.sources().get(0).name());
        Assertions.assertEquals("xhmtfhocnxzc", model.sources().get(0).description());
        Assertions.assertEquals("hngxnoqrxtd", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("pgsn", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("qt", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("trpb", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("yxpvelszerqze", model.sinks().get(0).name());
        Assertions.assertEquals("o", model.sinks().get(0).description());
        Assertions.assertEquals("intxwa", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("dgvpyig", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("aurwwgilfjq", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("bdpkxyqvgx", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("osbz", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("yrsrziuctixgb", model.transformations().get(0).name());
        Assertions.assertEquals("uifr", model.transformations().get(0).description());
        Assertions.assertEquals("kaapezkiswqjmdg", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("zxomeikjclwz", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("cadwvpsozjii", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("cvslxlhuavkrmukm", model.script());
        Assertions.assertEquals("kxettcslojfkq", model.scriptLines().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MappingDataFlow model = new MappingDataFlow().withDescription("tkbtnqlrngl")
            .withAnnotations(
                Arrays.asList("dataiipsnawwlqkz", "dataxhhllxricct", "datawmuqqoajxeiygle", "datarwvaexhdc"))
            .withFolder(new DataFlowFolder().withName("eqnkbrupobehdml"))
            .withSources(Arrays.asList(new DataFlowSource().withName("z")
                .withDescription("xhmtfhocnxzc")
                .withDataset(new DatasetReference().withReferenceName("hngxnoqrxtd")
                    .withParameters(mapOf("epfwwt", "datajevhdlmydidw", "o", "dataf", "wcdbckyoik", "datasxxh",
                        "rbhtmeplvukaobr", "datakxhnegknj")))
                .withLinkedService(new LinkedServiceReference().withReferenceName("pgsn")
                    .withParameters(mapOf("hjym", "datanchjhgemuowakywa")))
                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                    .withReferenceName("qt")
                    .withDatasetParameters("datadrclssoljome")
                    .withParameters(mapOf("gjiiytssiki", "dataycnlbvgjcodk", "gmqsorhcekxg", "databcufqbvntn"))
                    .withAdditionalProperties(mapOf()))
                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("trpb")
                    .withParameters(mapOf("lbnwtpcpahp", "datayuuatvlmbjwcolbm")))))
            .withSinks(Arrays.asList(
                new DataFlowSink().withName("yxpvelszerqze")
                    .withDescription("o")
                    .withDataset(new DatasetReference().withReferenceName("intxwa")
                        .withParameters(mapOf("ulhmzyq", "datalzoblqwaafr", "gaxwmzwdfkbnrzo", "datahdvafjrqpjiyrqjc",
                            "tqjfgxxsaet", "datapdltbq")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("dgvpyig")
                        .withParameters(mapOf("uwjoedxnguca", "dataqilzdc")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("aurwwgilfjq")
                        .withDatasetParameters("datacdmkxwxdcvjw")
                        .withParameters(mapOf("xrtuicds", "dataiakeciqc"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("bdpkxyqvgx")
                        .withParameters(mapOf("hkxdxuwsaifmc", "datadetv")))
                    .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("osbz")
                        .withParameters(mapOf("bcknjolgj", "datagcv"))),
                new DataFlowSink().withName("zir")
                    .withDescription("ihvwyp")
                    .withDataset(new DatasetReference().withReferenceName("u")
                        .withParameters(mapOf("djsllfr", "datalczwci", "frgnawbabgfbktyj", "datavdmvxadqa",
                            "xqmjeajcxn", "datafczlfsyqkfrbzgow", "hlusrvxisi", "dataqg")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("ceagbjqvlsumywz")
                        .withParameters(mapOf("oyjfqipu", "dataxgo", "gv", "datayznclkfkee", "l", "datapemtuoqu")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("qavn")
                        .withDatasetParameters("dataflqqbtnyjpylxd")
                        .withParameters(mapOf("kottlwuhvajmailf", "dataabmvmsxbaevwjc"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("lgflwfg")
                        .withParameters(
                            mapOf("ijjcea", "datau", "a", "datalijjjrtvam", "cxetyvkunmignoh", "datazknxkv")))
                    .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("kgqogjw")
                        .withParameters(mapOf("eilbjywfcf", "datadedvabbxbhme")))))
            .withTransformations(Arrays.asList(
                new Transformation().withName("yrsrziuctixgb")
                    .withDescription("uifr")
                    .withDataset(new DatasetReference().withReferenceName("kaapezkiswqjmdg")
                        .withParameters(mapOf("jczjnciuiyqv", "dataparybjufpt", "sqqzlgcndhz", "datadaswvpp",
                            "cfsrhkhgsn", "datarr", "pphefsbzx", "datauww")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("zxomeikjclwz")
                        .withParameters(mapOf("qtaazyqbxy", "datamwpfs", "iqezxlhdj", "dataoyfpuq")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("cadwvpsozjii")
                        .withDatasetParameters("datariybmrz")
                        .withParameters(mapOf("fnmxa", "datanxwdvwnjkg"))
                        .withAdditionalProperties(mapOf())),
                new Transformation().withName("kskmqozzkivyhjrl")
                    .withDescription("zji")
                    .withDataset(new DatasetReference().withReferenceName("qfhefkwabsol")
                        .withParameters(mapOf("exhvuqbozoolz", "dataqqlmgnlqxsjxte", "nx", "dataocarkuzlbcnndt")))
                    .withLinkedService(
                        new LinkedServiceReference().withReferenceName("qytl").withParameters(mapOf("ckze", "datayzm")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("akckywym")
                        .withDatasetParameters("dataaabjkdtfohfao")
                        .withParameters(mapOf("y", "datakiwrsiw", "rra", "dataquryk", "s", "dataeek", "gdda", "dataeh"))
                        .withAdditionalProperties(mapOf())),
                new Transformation().withName("zygleexahvm")
                    .withDescription("hsbrcary")
                    .withDataset(new DatasetReference().withReferenceName("jjzyvoaqajuve")
                        .withParameters(mapOf("be", "datatdmkrrbhmpful", "ununm", "datagybpmfb", "kdschlzvfictnkjj",
                            "datazkrvfyi", "hbkgfyrt", "datagcwn")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("mhmjpjs")
                        .withParameters(mapOf("arxifvqnrxt", "datapdqwtygevgwmse")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("jptnvwjhrsidqpx")
                        .withDatasetParameters("datatpakf")
                        .withParameters(mapOf("ykyutrymdwmfj", "dataatw", "efgnaavuagnt", "datapycvjqdvdwkqpldr",
                            "hspfefyihd", "datataoutnpdct"))
                        .withAdditionalProperties(mapOf()))))
            .withScript("cvslxlhuavkrmukm")
            .withScriptLines(Arrays.asList("kxettcslojfkq", "dnqtoqxjhqx", "s"));
        model = BinaryData.fromObject(model).toObject(MappingDataFlow.class);
        Assertions.assertEquals("tkbtnqlrngl", model.description());
        Assertions.assertEquals("eqnkbrupobehdml", model.folder().name());
        Assertions.assertEquals("z", model.sources().get(0).name());
        Assertions.assertEquals("xhmtfhocnxzc", model.sources().get(0).description());
        Assertions.assertEquals("hngxnoqrxtd", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("pgsn", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("qt", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("trpb", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("yxpvelszerqze", model.sinks().get(0).name());
        Assertions.assertEquals("o", model.sinks().get(0).description());
        Assertions.assertEquals("intxwa", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("dgvpyig", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("aurwwgilfjq", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("bdpkxyqvgx", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("osbz", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("yrsrziuctixgb", model.transformations().get(0).name());
        Assertions.assertEquals("uifr", model.transformations().get(0).description());
        Assertions.assertEquals("kaapezkiswqjmdg", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("zxomeikjclwz", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("cadwvpsozjii", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("cvslxlhuavkrmukm", model.script());
        Assertions.assertEquals("kxettcslojfkq", model.scriptLines().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
