// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSink;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MappingDataFlow;
import com.azure.resourcemanager.datafactory.models.Transformation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MappingDataFlowTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MappingDataFlow model = BinaryData.fromString(
            "{\"type\":\"MappingDataFlow\",\"typeProperties\":{\"sources\":[{\"schemaLinkedService\":{\"referenceName\":\"xyio\",\"parameters\":{\"pcbbprtugav\":\"dataninbdbzsxcwqqrs\",\"fogdrtbfcm\":\"datazbcyksiv\",\"mb\":\"datarftsjcwjjxs\"}},\"name\":\"wvif\",\"description\":\"kecifhocjxwklo\",\"dataset\":{\"referenceName\":\"rvtxvcmufunlc\",\"parameters\":{\"eyngjg\":\"datavir\"}},\"linkedService\":{\"referenceName\":\"quv\",\"parameters\":{\"rdcueljtiahx\":\"dataglpm\",\"qbglcjkaysp\":\"datafqryarvsx\",\"dubtlmj\":\"datahz\",\"djxyxgbkkqvjcteo\":\"datagblioskkfmkm\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"rslskkzp\",\"datasetParameters\":\"datajnzdpvocojhpcna\",\"parameters\":{\"iv\":\"datafsnggytexvzilm\"},\"\":{\"cknrzda\":\"dataww\",\"eucyrth\":\"datalskzptjxul\"}}},{\"schemaLinkedService\":{\"referenceName\":\"lehmcgcjeinueho\",\"parameters\":{\"zfivfokpysthhzag\":\"datavfejvqnttmbqda\",\"rlhgenuze\":\"datafwy\",\"zlsmmdqgmihzpim\":\"datagvkvebaqszll\",\"gxsvtza\":\"dataqrhnxtminkl\"}},\"name\":\"hzvqnsqktcmbjwz\",\"description\":\"slpkybtg\",\"dataset\":{\"referenceName\":\"kzpgaj\",\"parameters\":{\"uqrebluimmbwx\":\"datacemqbmfuvqarwz\",\"kraokq\":\"datafgtdmbvx\",\"aokbavlyttaaknwf\":\"databudbt\",\"sm\":\"datake\"}},\"linkedService\":{\"referenceName\":\"dujdigatoleksc\",\"parameters\":{\"awnsnlaimou\":\"datananqimwbzxpdcldp\",\"sqmu\":\"dataw\",\"iuswswj\":\"datamfcoibic\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"qsj\",\"datasetParameters\":\"datatqqvy\",\"parameters\":{\"ogfuyzwvbhlim\":\"datayrfwbivq\",\"r\":\"datayqe\",\"obsmf\":\"dataodlikcdrdaasax\"},\"\":{\"awn\":\"datayjvzukosr\",\"n\":\"datazm\"}}},{\"schemaLinkedService\":{\"referenceName\":\"ywsxvjabjqqaxu\",\"parameters\":{\"udndoabhjxw\":\"datamc\"}},\"name\":\"qweuip\",\"description\":\"vk\",\"dataset\":{\"referenceName\":\"itnsqxtltc\",\"parameters\":{\"kkld\":\"datadpqgfhyrfr\",\"atxjtiel\":\"datarcwfcmfcnrjajq\"}},\"linkedService\":{\"referenceName\":\"qgxxgfbb\",\"parameters\":{\"calincryqxz\":\"datapqagynoiprn\",\"mqimiymqru\":\"dataaqzi\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"hfupetasvvoqsbpk\",\"datasetParameters\":\"dataanfkgxsyaowuzow\",\"parameters\":{\"xrztiochlu\":\"datahdkcprgu\",\"mcrunfhiucn\":\"dataixmqrudjizcbf\",\"dkyzbfvxov\":\"datafbcpaqktkrumzu\"},\"\":{\"hyhlwcjsqg\":\"dataiuxqggvqr\",\"euqlsdxeqztv\":\"datajhffbxrqrkij\",\"wwa\":\"datawmwwmjswen\",\"ojhtollhs\":\"dataecleqioulndhzyo\"}}},{\"schemaLinkedService\":{\"referenceName\":\"dm\",\"parameters\":{\"glxpnovyoanfbcsw\":\"datal\"}},\"name\":\"agyw\",\"description\":\"xigvjrktpgaeuk\",\"dataset\":{\"referenceName\":\"wohpmwhqnucs\",\"parameters\":{\"pbninjgazlsvbzfc\":\"datasidsjtd\",\"lhsyekrdrenxolr\":\"datauoeedwjcci\",\"bfgrlpunytjlkes\":\"datayehqbeivdlhydwb\",\"e\":\"datampathubtah\"}},\"linkedService\":{\"referenceName\":\"iiwllbvgwzsf\",\"parameters\":{\"jtgr\":\"datadousnk\",\"btxxwpfhnjzud\":\"datavaqogfkbebauzl\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"zkg\",\"datasetParameters\":\"databoy\",\"parameters\":{\"isrz\":\"datazzqrhmngqbedy\",\"jch\":\"datanykdi\",\"eacdhztx\":\"datarmpwctofld\",\"ewhfjsrwqrxetf\":\"databrfgdrwji\"},\"\":{\"wthv\":\"datavrrmdqntycn\",\"nuyeamcmhud\":\"dataax\"}}}],\"sinks\":[{\"schemaLinkedService\":{\"referenceName\":\"ehok\",\"parameters\":{\"rg\":\"dataqtwloes\",\"ciduwjle\":\"datavrbnyrukoil\",\"yxpzruzythqk\":\"datapjlh\",\"xdm\":\"datawhbgxvellvul\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"tmujdtvmc\",\"parameters\":{\"zmzqmzjqrb\":\"datamffhmjpddnyxfzuv\",\"mdyfoebojtj\":\"datapv\",\"qk\":\"datapglaoh\",\"ywkdcwmqsy\":\"datajtnqjil\"}},\"name\":\"ilm\",\"description\":\"dqaolfylnkk\",\"dataset\":{\"referenceName\":\"pjvlywltmfwo\",\"parameters\":{\"fnqzocr\":\"datawhlwy\"}},\"linkedService\":{\"referenceName\":\"gczeuntgx\",\"parameters\":{\"i\":\"dataaqttiek\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"nyttzgix\",\"datasetParameters\":\"datarihl\",\"parameters\":{\"lkndrndpgfjodh\":\"databehlqtxnr\",\"ipowza\":\"dataaqotwfhipxwgsabv\",\"pefyc\":\"dataczuumljcir\"},\"\":{\"lnsjhw\":\"dataititjnsxza\"}}},{\"schemaLinkedService\":{\"referenceName\":\"yxxbxqvmvuayt\",\"parameters\":{\"tghyksarcdr\":\"dataxkxeqbwp\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"sluvlzladltxkpb\",\"parameters\":{\"anojisgglmvokat\":\"datafdqqjwkrhwz\"}},\"name\":\"ztjctibpvbkae\",\"description\":\"smz\",\"dataset\":{\"referenceName\":\"dfwakwseivmak\",\"parameters\":{\"ljuxl\":\"dataso\",\"aiubavlzwpvgmfa\":\"databectvtfjmskdch\"}},\"linkedService\":{\"referenceName\":\"zazmg\",\"parameters\":{\"zrthqet\":\"datadgjqafkmkro\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"rtvaoznqni\",\"datasetParameters\":\"dataezeagmceituuge\",\"parameters\":{\"tlzm\":\"datapj\",\"eolctaebf\":\"datalsyj\",\"jcustbvtq\":\"datayrle\"},\"\":{\"sehxlzsxezp\":\"dataxzvsgeafgf\"}}}],\"transformations\":[{\"name\":\"waaeskyfjl\",\"description\":\"eqtoyrpl\",\"dataset\":{\"referenceName\":\"lajmllp\",\"parameters\":{\"mfowgwbtmkek\":\"datavh\",\"xofqovchi\":\"datapkzwa\",\"ztekxbyjgmsfep\":\"databplvfidu\"}},\"linkedService\":{\"referenceName\":\"ihpq\",\"parameters\":{\"dw\":\"datagrhrdic\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"owxwyovcxjsgbip\",\"datasetParameters\":\"datakdveksb\",\"parameters\":{\"rdpibfd\":\"dataduchvls\",\"wlkaaggkrehbfrnu\":\"datajdusspyszekb\",\"qtaadusrexxfavsq\":\"databffljfiimreoag\"},\"\":{\"psimsf\":\"dataohzilfmnli\"}}},{\"name\":\"ypofqpmbhyqgs\",\"description\":\"mmttjxophge\",\"dataset\":{\"referenceName\":\"smv\",\"parameters\":{\"qywwwmhk\":\"datatwzmqilrixysfnim\",\"hzdue\":\"datauwaedrympmlqoi\",\"liejhpc\":\"dataihapfjiiknjdiq\"}},\"linkedService\":{\"referenceName\":\"iedfsbwcei\",\"parameters\":{\"admskx\":\"datazipbwxgoooxzp\",\"zigjsugswhgsaodk\":\"datanpd\",\"ctohzhaquvwsxbgn\":\"datawnbaf\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"rvqchoadhrsxqvzv\",\"datasetParameters\":\"dataabdsr\",\"parameters\":{\"cetjdvq\":\"datajglzrsubklrxhjnl\",\"kw\":\"datadieq\",\"bibanbau\":\"dataruwdxvqzxoebwgj\"},\"\":{\"lssan\":\"datazvpaklozkxbzrpej\"}}}],\"script\":\"ttkgsux\",\"scriptLines\":[\"swgkpjhboyikebh\",\"hkslgwlokhueoij\",\"zcqypzqzufgsyf\",\"jyvdwtfxptpqayam\"]},\"description\":\"cf\",\"annotations\":[\"datamxsnxocuul\",\"dataojkpoyh\"],\"folder\":{\"name\":\"djuxdbdljzgd\"}}")
            .toObject(MappingDataFlow.class);
        Assertions.assertEquals("cf", model.description());
        Assertions.assertEquals("djuxdbdljzgd", model.folder().name());
        Assertions.assertEquals("wvif", model.sources().get(0).name());
        Assertions.assertEquals("kecifhocjxwklo", model.sources().get(0).description());
        Assertions.assertEquals("rvtxvcmufunlc", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("quv", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("rslskkzp", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("xyio", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("ilm", model.sinks().get(0).name());
        Assertions.assertEquals("dqaolfylnkk", model.sinks().get(0).description());
        Assertions.assertEquals("pjvlywltmfwo", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("gczeuntgx", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("nyttzgix", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("ehok", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("tmujdtvmc", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("waaeskyfjl", model.transformations().get(0).name());
        Assertions.assertEquals("eqtoyrpl", model.transformations().get(0).description());
        Assertions.assertEquals("lajmllp", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("ihpq", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("owxwyovcxjsgbip", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("ttkgsux", model.script());
        Assertions.assertEquals("swgkpjhboyikebh", model.scriptLines().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MappingDataFlow model = new MappingDataFlow().withDescription("cf")
            .withAnnotations(Arrays.asList("datamxsnxocuul", "dataojkpoyh"))
            .withFolder(new DataFlowFolder().withName("djuxdbdljzgd"))
            .withSources(Arrays.asList(
                new DataFlowSource().withName("wvif")
                    .withDescription("kecifhocjxwklo")
                    .withDataset(new DatasetReference().withReferenceName("rvtxvcmufunlc")
                        .withParameters(mapOf("eyngjg", "datavir")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("quv")
                        .withParameters(mapOf("rdcueljtiahx", "dataglpm", "qbglcjkaysp", "datafqryarvsx", "dubtlmj",
                            "datahz", "djxyxgbkkqvjcteo", "datagblioskkfmkm")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("rslskkzp")
                        .withDatasetParameters("datajnzdpvocojhpcna")
                        .withParameters(mapOf("iv", "datafsnggytexvzilm"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("xyio")
                        .withParameters(mapOf("pcbbprtugav", "dataninbdbzsxcwqqrs", "fogdrtbfcm", "datazbcyksiv", "mb",
                            "datarftsjcwjjxs"))),
                new DataFlowSource().withName("hzvqnsqktcmbjwz")
                    .withDescription("slpkybtg")
                    .withDataset(new DatasetReference().withReferenceName("kzpgaj")
                        .withParameters(mapOf("uqrebluimmbwx", "datacemqbmfuvqarwz", "kraokq", "datafgtdmbvx",
                            "aokbavlyttaaknwf", "databudbt", "sm", "datake")))
                    .withLinkedService(
                        new LinkedServiceReference().withReferenceName("dujdigatoleksc")
                            .withParameters(mapOf("awnsnlaimou", "datananqimwbzxpdcldp", "sqmu", "dataw", "iuswswj",
                                "datamfcoibic")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("qsj")
                        .withDatasetParameters("datatqqvy")
                        .withParameters(
                            mapOf("ogfuyzwvbhlim", "datayrfwbivq", "r", "datayqe", "obsmf", "dataodlikcdrdaasax"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("lehmcgcjeinueho")
                        .withParameters(mapOf("zfivfokpysthhzag", "datavfejvqnttmbqda", "rlhgenuze", "datafwy",
                            "zlsmmdqgmihzpim", "datagvkvebaqszll", "gxsvtza", "dataqrhnxtminkl"))),
                new DataFlowSource().withName("qweuip")
                    .withDescription("vk")
                    .withDataset(new DatasetReference().withReferenceName("itnsqxtltc")
                        .withParameters(mapOf("kkld", "datadpqgfhyrfr", "atxjtiel", "datarcwfcmfcnrjajq")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("qgxxgfbb")
                        .withParameters(mapOf("calincryqxz", "datapqagynoiprn", "mqimiymqru", "dataaqzi")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("hfupetasvvoqsbpk")
                        .withDatasetParameters("dataanfkgxsyaowuzow")
                        .withParameters(mapOf("xrztiochlu", "datahdkcprgu", "mcrunfhiucn", "dataixmqrudjizcbf",
                            "dkyzbfvxov", "datafbcpaqktkrumzu"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ywsxvjabjqqaxu")
                        .withParameters(mapOf("udndoabhjxw", "datamc"))),
                new DataFlowSource().withName("agyw")
                    .withDescription("xigvjrktpgaeuk")
                    .withDataset(new DatasetReference().withReferenceName("wohpmwhqnucs")
                        .withParameters(mapOf("pbninjgazlsvbzfc", "datasidsjtd", "lhsyekrdrenxolr", "datauoeedwjcci",
                            "bfgrlpunytjlkes", "datayehqbeivdlhydwb", "e", "datampathubtah")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("iiwllbvgwzsf")
                        .withParameters(mapOf("jtgr", "datadousnk", "btxxwpfhnjzud", "datavaqogfkbebauzl")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("zkg")
                        .withDatasetParameters("databoy")
                        .withParameters(mapOf("isrz", "datazzqrhmngqbedy", "jch", "datanykdi", "eacdhztx",
                            "datarmpwctofld", "ewhfjsrwqrxetf", "databrfgdrwji"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("dm")
                        .withParameters(mapOf("glxpnovyoanfbcsw", "datal")))))
            .withSinks(Arrays.asList(
                new DataFlowSink().withName("ilm")
                    .withDescription("dqaolfylnkk")
                    .withDataset(new DatasetReference().withReferenceName("pjvlywltmfwo")
                        .withParameters(mapOf("fnqzocr", "datawhlwy")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("gczeuntgx")
                        .withParameters(mapOf("i", "dataaqttiek")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("nyttzgix")
                        .withDatasetParameters("datarihl")
                        .withParameters(mapOf("lkndrndpgfjodh", "databehlqtxnr", "ipowza", "dataaqotwfhipxwgsabv",
                            "pefyc", "dataczuumljcir"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ehok")
                        .withParameters(mapOf("rg", "dataqtwloes", "ciduwjle", "datavrbnyrukoil", "yxpzruzythqk",
                            "datapjlh", "xdm", "datawhbgxvellvul")))
                    .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("tmujdtvmc")
                        .withParameters(mapOf("zmzqmzjqrb", "datamffhmjpddnyxfzuv", "mdyfoebojtj", "datapv", "qk",
                            "datapglaoh", "ywkdcwmqsy", "datajtnqjil"))),
                new DataFlowSink().withName("ztjctibpvbkae")
                    .withDescription("smz")
                    .withDataset(new DatasetReference().withReferenceName("dfwakwseivmak")
                        .withParameters(mapOf("ljuxl", "dataso", "aiubavlzwpvgmfa", "databectvtfjmskdch")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("zazmg")
                        .withParameters(mapOf("zrthqet", "datadgjqafkmkro")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("rtvaoznqni")
                        .withDatasetParameters("dataezeagmceituuge")
                        .withParameters(mapOf("tlzm", "datapj", "eolctaebf", "datalsyj", "jcustbvtq", "datayrle"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("yxxbxqvmvuayt")
                        .withParameters(mapOf("tghyksarcdr", "dataxkxeqbwp")))
                    .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("sluvlzladltxkpb")
                        .withParameters(mapOf("anojisgglmvokat", "datafdqqjwkrhwz")))))
            .withTransformations(Arrays.asList(
                new Transformation().withName("waaeskyfjl")
                    .withDescription("eqtoyrpl")
                    .withDataset(new DatasetReference().withReferenceName("lajmllp")
                        .withParameters(mapOf("mfowgwbtmkek", "datavh", "xofqovchi", "datapkzwa", "ztekxbyjgmsfep",
                            "databplvfidu")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("ihpq")
                        .withParameters(mapOf("dw", "datagrhrdic")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("owxwyovcxjsgbip")
                        .withDatasetParameters("datakdveksb")
                        .withParameters(mapOf("rdpibfd", "dataduchvls", "wlkaaggkrehbfrnu", "datajdusspyszekb",
                            "qtaadusrexxfavsq", "databffljfiimreoag"))
                        .withAdditionalProperties(mapOf())),
                new Transformation().withName("ypofqpmbhyqgs")
                    .withDescription("mmttjxophge")
                    .withDataset(new DatasetReference().withReferenceName("smv")
                        .withParameters(mapOf("qywwwmhk", "datatwzmqilrixysfnim", "hzdue", "datauwaedrympmlqoi",
                            "liejhpc", "dataihapfjiiknjdiq")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("iedfsbwcei")
                        .withParameters(mapOf("admskx", "datazipbwxgoooxzp", "zigjsugswhgsaodk", "datanpd",
                            "ctohzhaquvwsxbgn", "datawnbaf")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("rvqchoadhrsxqvzv")
                        .withDatasetParameters("dataabdsr")
                        .withParameters(mapOf("cetjdvq", "datajglzrsubklrxhjnl", "kw", "datadieq", "bibanbau",
                            "dataruwdxvqzxoebwgj"))
                        .withAdditionalProperties(mapOf()))))
            .withScript("ttkgsux")
            .withScriptLines(Arrays.asList("swgkpjhboyikebh", "hkslgwlokhueoij", "zcqypzqzufgsyf", "jyvdwtfxptpqayam"));
        model = BinaryData.fromObject(model).toObject(MappingDataFlow.class);
        Assertions.assertEquals("cf", model.description());
        Assertions.assertEquals("djuxdbdljzgd", model.folder().name());
        Assertions.assertEquals("wvif", model.sources().get(0).name());
        Assertions.assertEquals("kecifhocjxwklo", model.sources().get(0).description());
        Assertions.assertEquals("rvtxvcmufunlc", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("quv", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("rslskkzp", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("xyio", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("ilm", model.sinks().get(0).name());
        Assertions.assertEquals("dqaolfylnkk", model.sinks().get(0).description());
        Assertions.assertEquals("pjvlywltmfwo", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("gczeuntgx", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("nyttzgix", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("ehok", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("tmujdtvmc", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("waaeskyfjl", model.transformations().get(0).name());
        Assertions.assertEquals("eqtoyrpl", model.transformations().get(0).description());
        Assertions.assertEquals("lajmllp", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("ihpq", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("owxwyovcxjsgbip", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("ttkgsux", model.script());
        Assertions.assertEquals("swgkpjhboyikebh", model.scriptLines().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
