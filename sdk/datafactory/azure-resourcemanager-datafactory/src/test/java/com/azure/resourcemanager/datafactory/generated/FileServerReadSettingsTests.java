// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.FileServerReadSettings;

public final class FileServerReadSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FileServerReadSettings model = BinaryData.fromString(
            "{\"type\":\"FileServerReadSettings\",\"recursive\":\"dataozdvok\",\"wildcardFolderPath\":\"datayhhrdikdbqe\",\"wildcardFileName\":\"datagsibldxyaqdaaznz\",\"fileListPath\":\"datazfhh\",\"enablePartitionDiscovery\":\"datayxkgnrya\",\"partitionRootPath\":\"datafdxauihnb\",\"deleteFilesAfterCompletion\":\"datahkdwyehqnxuffgj\",\"modifiedDatetimeStart\":\"dataminhvdkqigppdqsq\",\"modifiedDatetimeEnd\":\"datap\",\"fileFilter\":\"dataaxthuhuruo\",\"maxConcurrentConnections\":\"datayotapstkdbn\",\"disableMetricsCollection\":\"datapcuzexoymfku\",\"\":{\"phlfrxrpahptv\":\"datasgsqzpgrvfag\",\"qllolnxhsupilhx\":\"datakfenmiflky\",\"y\":\"dataabli\"}}")
            .toObject(FileServerReadSettings.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FileServerReadSettings model = new FileServerReadSettings().withMaxConcurrentConnections("datayotapstkdbn")
            .withDisableMetricsCollection("datapcuzexoymfku")
            .withRecursive("dataozdvok")
            .withWildcardFolderPath("datayhhrdikdbqe")
            .withWildcardFileName("datagsibldxyaqdaaznz")
            .withFileListPath("datazfhh")
            .withEnablePartitionDiscovery("datayxkgnrya")
            .withPartitionRootPath("datafdxauihnb")
            .withDeleteFilesAfterCompletion("datahkdwyehqnxuffgj")
            .withModifiedDatetimeStart("dataminhvdkqigppdqsq")
            .withModifiedDatetimeEnd("datap")
            .withFileFilter("dataaxthuhuruo");
        model = BinaryData.fromObject(model).toObject(FileServerReadSettings.class);
    }
}
