// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.FileServerReadSettings;

public final class FileServerReadSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FileServerReadSettings model = BinaryData.fromString(
            "{\"type\":\"FileServerReadSettings\",\"recursive\":\"datazznkrarjiijpbych\",\"wildcardFolderPath\":\"datahlhdz\",\"wildcardFileName\":\"datarlfcmeyxypx\",\"fileListPath\":\"datacrtm\",\"enablePartitionDiscovery\":\"datajz\",\"partitionRootPath\":\"dataetpdezebvtkgzjna\",\"deleteFilesAfterCompletion\":\"datahheilnhkcxuou\",\"modifiedDatetimeStart\":\"datazckogcvazoz\",\"modifiedDatetimeEnd\":\"datanyofts\",\"fileFilter\":\"dataiydwklkuamx\",\"maxConcurrentConnections\":\"datajtnqeo\",\"disableMetricsCollection\":\"dataiz\",\"\":{\"mkztwzlw\":\"datav\",\"pfe\":\"datallhm\",\"tgdvwatfvjvum\":\"datarfuzedud\",\"qvxnoazarivcze\":\"datambcflhycluounv\"}}")
            .toObject(FileServerReadSettings.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FileServerReadSettings model = new FileServerReadSettings().withMaxConcurrentConnections("datajtnqeo")
            .withDisableMetricsCollection("dataiz")
            .withRecursive("datazznkrarjiijpbych")
            .withWildcardFolderPath("datahlhdz")
            .withWildcardFileName("datarlfcmeyxypx")
            .withFileListPath("datacrtm")
            .withEnablePartitionDiscovery("datajz")
            .withPartitionRootPath("dataetpdezebvtkgzjna")
            .withDeleteFilesAfterCompletion("datahheilnhkcxuou")
            .withModifiedDatetimeStart("datazckogcvazoz")
            .withModifiedDatetimeEnd("datanyofts")
            .withFileFilter("dataiydwklkuamx");
        model = BinaryData.fromObject(model).toObject(FileServerReadSettings.class);
    }
}
