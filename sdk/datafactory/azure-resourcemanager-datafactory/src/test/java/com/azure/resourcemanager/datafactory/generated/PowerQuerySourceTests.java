// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySource;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PowerQuerySourceTests {
    @Test
    public void testDeserialize() {
        PowerQuerySource model =
            BinaryData
                .fromString(
                    "{\"script\":\"euutlwxezwzh\",\"schemaLinkedService\":{\"referenceName\":\"vbwnhhtq\",\"parameters\":{}},\"name\":\"hgppipifhpfeoa\",\"description\":\"gcxtxj\",\"dataset\":{\"referenceName\":\"heafidlt\",\"parameters\":{}},\"linkedService\":{\"referenceName\":\"esmkssjhoiftxfkf\",\"parameters\":{}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"hpt\",\"parameters\":{},\"\":{}}}")
                .toObject(PowerQuerySource.class);
        Assertions.assertEquals("hgppipifhpfeoa", model.name());
        Assertions.assertEquals("gcxtxj", model.description());
        Assertions.assertEquals("heafidlt", model.dataset().referenceName());
        Assertions.assertEquals("esmkssjhoiftxfkf", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("hpt", model.flowlet().referenceName());
        Assertions.assertEquals("vbwnhhtq", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("euutlwxezwzh", model.script());
    }

    @Test
    public void testSerialize() {
        PowerQuerySource model =
            new PowerQuerySource()
                .withName("hgppipifhpfeoa")
                .withDescription("gcxtxj")
                .withDataset(new DatasetReference().withReferenceName("heafidlt").withParameters(mapOf()))
                .withLinkedService(
                    new LinkedServiceReference().withReferenceName("esmkssjhoiftxfkf").withParameters(mapOf()))
                .withFlowlet(
                    new DataFlowReference()
                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("hpt")
                        .withParameters(mapOf())
                        .withAdditionalProperties(mapOf()))
                .withSchemaLinkedService(
                    new LinkedServiceReference().withReferenceName("vbwnhhtq").withParameters(mapOf()))
                .withScript("euutlwxezwzh");
        model = BinaryData.fromObject(model).toObject(PowerQuerySource.class);
        Assertions.assertEquals("hgppipifhpfeoa", model.name());
        Assertions.assertEquals("gcxtxj", model.description());
        Assertions.assertEquals("heafidlt", model.dataset().referenceName());
        Assertions.assertEquals("esmkssjhoiftxfkf", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("hpt", model.flowlet().referenceName());
        Assertions.assertEquals("vbwnhhtq", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("euutlwxezwzh", model.script());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
