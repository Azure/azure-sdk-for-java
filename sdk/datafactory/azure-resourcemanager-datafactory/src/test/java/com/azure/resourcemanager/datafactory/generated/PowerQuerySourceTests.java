// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySource;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PowerQuerySourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PowerQuerySource model = BinaryData.fromString(
            "{\"script\":\"yp\",\"schemaLinkedService\":{\"referenceName\":\"qvmtywhlakx\",\"parameters\":{\"fxampqcrzgeuqx\":\"datapewpyj\",\"adr\":\"datapiatwfaujegqd\",\"hjkrukizyhgs\":\"datakgd\"}},\"name\":\"tnqsktx\",\"description\":\"p\",\"dataset\":{\"referenceName\":\"qggweeiwdh\",\"parameters\":{\"lhxd\":\"datacgbfzuscstun\"}},\"linkedService\":{\"referenceName\":\"klciichgjsysm\",\"parameters\":{\"bdujgcwxvecbb\":\"datadgwxfkzsifcu\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"rdxrizagbbgiarks\",\"datasetParameters\":\"datapgdqxwabzrw\",\"parameters\":{\"kifmmainw\":\"dataxhaclcdosqkptjq\",\"izazz\":\"dataedxkpbqwuntob\",\"vydjufbnk\":\"datalw\",\"dabalfdxaglzfytl\":\"datablaxpegj\"},\"\":{\"xouvmrs\":\"dataqho\",\"qsdb\":\"dataflikyypzkgxfxfmy\",\"nm\":\"dataoksz\"}}}")
            .toObject(PowerQuerySource.class);
        Assertions.assertEquals("tnqsktx", model.name());
        Assertions.assertEquals("p", model.description());
        Assertions.assertEquals("qggweeiwdh", model.dataset().referenceName());
        Assertions.assertEquals("klciichgjsysm", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("rdxrizagbbgiarks", model.flowlet().referenceName());
        Assertions.assertEquals("qvmtywhlakx", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("yp", model.script());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PowerQuerySource model
            = new PowerQuerySource().withName("tnqsktx")
                .withDescription("p")
                .withDataset(new DatasetReference().withReferenceName("qggweeiwdh")
                    .withParameters(mapOf("lhxd", "datacgbfzuscstun")))
                .withLinkedService(new LinkedServiceReference().withReferenceName("klciichgjsysm")
                    .withParameters(mapOf("bdujgcwxvecbb", "datadgwxfkzsifcu")))
                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                    .withReferenceName("rdxrizagbbgiarks")
                    .withDatasetParameters("datapgdqxwabzrw")
                    .withParameters(mapOf("kifmmainw", "dataxhaclcdosqkptjq", "izazz", "dataedxkpbqwuntob", "vydjufbnk",
                        "datalw", "dabalfdxaglzfytl", "datablaxpegj"))
                    .withAdditionalProperties(mapOf()))
                .withSchemaLinkedService(
                    new LinkedServiceReference().withReferenceName("qvmtywhlakx")
                        .withParameters(mapOf("fxampqcrzgeuqx", "datapewpyj", "adr", "datapiatwfaujegqd",
                            "hjkrukizyhgs", "datakgd")))
                .withScript("yp");
        model = BinaryData.fromObject(model).toObject(PowerQuerySource.class);
        Assertions.assertEquals("tnqsktx", model.name());
        Assertions.assertEquals("p", model.description());
        Assertions.assertEquals("qggweeiwdh", model.dataset().referenceName());
        Assertions.assertEquals("klciichgjsysm", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("rdxrizagbbgiarks", model.flowlet().referenceName());
        Assertions.assertEquals("qvmtywhlakx", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("yp", model.script());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
