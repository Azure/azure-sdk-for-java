// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySource;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PowerQuerySourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PowerQuerySource model = BinaryData.fromString(
            "{\"script\":\"qsnxfbxufeapdr\",\"schemaLinkedService\":{\"referenceName\":\"yvbsuadu\",\"parameters\":{\"qltd\":\"datadkaxpfobkzhmhj\",\"rkgzkyhudbkuw\":\"dataluqrojadhfztlray\",\"kfecjvxf\":\"datazqxlcwe\",\"ppwooaj\":\"dataqufqizj\"}},\"name\":\"yyjmjjxiz\",\"description\":\"xhnzlslekcttgzkj\",\"dataset\":{\"referenceName\":\"qpdwad\",\"parameters\":{\"qymjzucwwmejjqhd\":\"dataztldsvczdjiah\"}},\"linkedService\":{\"referenceName\":\"vmqxi\",\"parameters\":{\"qpgaixwrgrkk\":\"datakyfozkbnzxbyp\",\"swqi\":\"dataerf\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"pw\",\"datasetParameters\":\"dataggicwnxhtfmcqbs\",\"parameters\":{\"djxh\":\"datapgchzpgfqum\"},\"\":{\"kynrceqavf\":\"datago\"}}}")
            .toObject(PowerQuerySource.class);
        Assertions.assertEquals("yyjmjjxiz", model.name());
        Assertions.assertEquals("xhnzlslekcttgzkj", model.description());
        Assertions.assertEquals("qpdwad", model.dataset().referenceName());
        Assertions.assertEquals("vmqxi", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("pw", model.flowlet().referenceName());
        Assertions.assertEquals("yvbsuadu", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("qsnxfbxufeapdr", model.script());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PowerQuerySource model = new PowerQuerySource().withName("yyjmjjxiz")
            .withDescription("xhnzlslekcttgzkj")
            .withDataset(new DatasetReference().withReferenceName("qpdwad")
                .withParameters(mapOf("qymjzucwwmejjqhd", "dataztldsvczdjiah")))
            .withLinkedService(new LinkedServiceReference().withReferenceName("vmqxi")
                .withParameters(mapOf("qpgaixwrgrkk", "datakyfozkbnzxbyp", "swqi", "dataerf")))
            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                .withReferenceName("pw")
                .withDatasetParameters("dataggicwnxhtfmcqbs")
                .withParameters(mapOf("djxh", "datapgchzpgfqum"))
                .withAdditionalProperties(mapOf()))
            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("yvbsuadu")
                .withParameters(mapOf("qltd", "datadkaxpfobkzhmhj", "rkgzkyhudbkuw", "dataluqrojadhfztlray", "kfecjvxf",
                    "datazqxlcwe", "ppwooaj", "dataqufqizj")))
            .withScript("qsnxfbxufeapdr");
        model = BinaryData.fromObject(model).toObject(PowerQuerySource.class);
        Assertions.assertEquals("yyjmjjxiz", model.name());
        Assertions.assertEquals("xhnzlslekcttgzkj", model.description());
        Assertions.assertEquals("qpdwad", model.dataset().referenceName());
        Assertions.assertEquals("vmqxi", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("pw", model.flowlet().referenceName());
        Assertions.assertEquals("yvbsuadu", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("qsnxfbxufeapdr", model.script());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
