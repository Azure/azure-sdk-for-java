// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySource;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PowerQuerySourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PowerQuerySource model =
            BinaryData
                .fromString(
                    "{\"script\":\"wqikwepwogggic\",\"schemaLinkedService\":{\"referenceName\":\"xhtfmcqbsudzpgch\",\"parameters\":{\"djxh\":\"datafqum\",\"v\":\"dataghgodkynrceq\",\"mmxjdnajuopj\":\"datadbd\",\"cwlo\":\"datayqmkwlh\"}},\"name\":\"dejkluxxrwzobuz\",\"description\":\"xga\",\"dataset\":{\"referenceName\":\"dtkwppth\",\"parameters\":{\"imrljdp\":\"datapr\",\"mhk\":\"dataqfxy\",\"loamfmxtllfltym\":\"datatbaewhte\",\"rfijhggabq\":\"datacn\"}},\"linkedService\":{\"referenceName\":\"amklilirwdv\",\"parameters\":{\"jxrdfd\":\"datasdpzouhktqrxqwq\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"llygta\",\"datasetParameters\":\"datazcxdfweapyfmlxrl\",\"parameters\":{\"x\":\"dataraspifleim\"},\"\":{\"cehfgsm\":\"databg\",\"mtznpaxwfqtyyqi\":\"datarjuqbpxtokl\",\"i\":\"datarcltungbsoljckm\",\"iiqqcqikclsmalns\":\"datazbkuckgkdsksw\"}}}")
                .toObject(PowerQuerySource.class);
        Assertions.assertEquals("dejkluxxrwzobuz", model.name());
        Assertions.assertEquals("xga", model.description());
        Assertions.assertEquals("dtkwppth", model.dataset().referenceName());
        Assertions.assertEquals("amklilirwdv", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("llygta", model.flowlet().referenceName());
        Assertions.assertEquals("xhtfmcqbsudzpgch", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("wqikwepwogggic", model.script());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PowerQuerySource model =
            new PowerQuerySource()
                .withName("dejkluxxrwzobuz")
                .withDescription("xga")
                .withDataset(
                    new DatasetReference()
                        .withReferenceName("dtkwppth")
                        .withParameters(
                            mapOf(
                                "imrljdp",
                                "datapr",
                                "mhk",
                                "dataqfxy",
                                "loamfmxtllfltym",
                                "datatbaewhte",
                                "rfijhggabq",
                                "datacn")))
                .withLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("amklilirwdv")
                        .withParameters(mapOf("jxrdfd", "datasdpzouhktqrxqwq")))
                .withFlowlet(
                    new DataFlowReference()
                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("llygta")
                        .withDatasetParameters("datazcxdfweapyfmlxrl")
                        .withParameters(mapOf("x", "dataraspifleim"))
                        .withAdditionalProperties(mapOf()))
                .withSchemaLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("xhtfmcqbsudzpgch")
                        .withParameters(
                            mapOf(
                                "djxh",
                                "datafqum",
                                "v",
                                "dataghgodkynrceq",
                                "mmxjdnajuopj",
                                "datadbd",
                                "cwlo",
                                "datayqmkwlh")))
                .withScript("wqikwepwogggic");
        model = BinaryData.fromObject(model).toObject(PowerQuerySource.class);
        Assertions.assertEquals("dejkluxxrwzobuz", model.name());
        Assertions.assertEquals("xga", model.description());
        Assertions.assertEquals("dtkwppth", model.dataset().referenceName());
        Assertions.assertEquals("amklilirwdv", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("llygta", model.flowlet().referenceName());
        Assertions.assertEquals("xhtfmcqbsudzpgch", model.schemaLinkedService().referenceName());
        Assertions.assertEquals("wqikwepwogggic", model.script());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
