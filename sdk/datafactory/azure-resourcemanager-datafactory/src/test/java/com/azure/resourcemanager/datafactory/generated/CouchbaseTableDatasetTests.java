// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CouchbaseTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CouchbaseTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CouchbaseTableDataset model = BinaryData.fromString(
            "{\"type\":\"qjobsynnen\",\"typeProperties\":{\"tableName\":\"dataqztjfkgb\"},\"description\":\"njqhdheosx\",\"structure\":\"datafudmpfhwyp\",\"schema\":\"datatjtntc\",\"linkedServiceName\":{\"referenceName\":\"gpdbbglaecc\",\"parameters\":{\"kvrmp\":\"datafspvjrds\",\"gmc\":\"dataftyptwjwiyyeo\"}},\"parameters\":{\"fzzi\":{\"type\":\"Int\",\"defaultValue\":\"dataphwfnugsl\"},\"mvueprpmofxnwcg\":{\"type\":\"Bool\",\"defaultValue\":\"datag\"}},\"annotations\":[\"dataxixtxxxajsehbknn\"],\"folder\":{\"name\":\"yjfawpcb\"},\"\":{\"nivco\":\"datazehcz\",\"who\":\"datasxvppkjealkdb\",\"o\":\"datavbmyzuqfdqdktrj\"}}")
            .toObject(CouchbaseTableDataset.class);
        Assertions.assertEquals("njqhdheosx", model.description());
        Assertions.assertEquals("gpdbbglaecc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("fzzi").type());
        Assertions.assertEquals("yjfawpcb", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CouchbaseTableDataset model = new CouchbaseTableDataset().withDescription("njqhdheosx")
            .withStructure("datafudmpfhwyp")
            .withSchema("datatjtntc")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("gpdbbglaecc")
                .withParameters(mapOf("kvrmp", "datafspvjrds", "gmc", "dataftyptwjwiyyeo")))
            .withParameters(mapOf("fzzi",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataphwfnugsl"),
                "mvueprpmofxnwcg", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datag")))
            .withAnnotations(Arrays.asList("dataxixtxxxajsehbknn"))
            .withFolder(new DatasetFolder().withName("yjfawpcb"))
            .withTableName("dataqztjfkgb");
        model = BinaryData.fromObject(model).toObject(CouchbaseTableDataset.class);
        Assertions.assertEquals("njqhdheosx", model.description());
        Assertions.assertEquals("gpdbbglaecc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("fzzi").type());
        Assertions.assertEquals("yjfawpcb", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
