// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CouchbaseTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CouchbaseTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CouchbaseTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"CouchbaseTable\",\"typeProperties\":{\"tableName\":\"datarrsguogk\"},\"description\":\"rotpyabensjflw\",\"structure\":\"datatvvqtmvifgcvsim\",\"schema\":\"databmticxgosnxajp\",\"linkedServiceName\":{\"referenceName\":\"cdfmzxaoxlhmvjc\",\"parameters\":{\"xh\":\"datasbnuc\",\"nkleldk\":\"dataaqoqbvejoysoxovl\",\"qrykkxakruupti\":\"datadlqqhn\"}},\"parameters\":{\"tjekxsnnb\":{\"type\":\"Object\",\"defaultValue\":\"datazgyxccnpxiemacm\"},\"mocnqbbl\":{\"type\":\"Int\",\"defaultValue\":\"datagkt\"}},\"annotations\":[\"dataofzghfuifwxu\",\"dataynohocqxug\"],\"folder\":{\"name\":\"gdcrrfbpl\"},\"\":{\"qe\":\"datahurosdjlzbdmddg\",\"orservpvesors\":\"datay\",\"zydyvtuqvir\":\"dataegclmexafjqzy\",\"igtvjxsocsvjekej\":\"dataunssky\"}}")
                .toObject(CouchbaseTableDataset.class);
        Assertions.assertEquals("rotpyabensjflw", model.description());
        Assertions.assertEquals("cdfmzxaoxlhmvjc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("tjekxsnnb").type());
        Assertions.assertEquals("gdcrrfbpl", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CouchbaseTableDataset model =
            new CouchbaseTableDataset()
                .withDescription("rotpyabensjflw")
                .withStructure("datatvvqtmvifgcvsim")
                .withSchema("databmticxgosnxajp")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("cdfmzxaoxlhmvjc")
                        .withParameters(
                            mapOf(
                                "xh", "datasbnuc", "nkleldk", "dataaqoqbvejoysoxovl", "qrykkxakruupti", "datadlqqhn")))
                .withParameters(
                    mapOf(
                        "tjekxsnnb",
                        new ParameterSpecification()
                            .withType(ParameterType.OBJECT)
                            .withDefaultValue("datazgyxccnpxiemacm"),
                        "mocnqbbl",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datagkt")))
                .withAnnotations(Arrays.asList("dataofzghfuifwxu", "dataynohocqxug"))
                .withFolder(new DatasetFolder().withName("gdcrrfbpl"))
                .withTableName("datarrsguogk");
        model = BinaryData.fromObject(model).toObject(CouchbaseTableDataset.class);
        Assertions.assertEquals("rotpyabensjflw", model.description());
        Assertions.assertEquals("cdfmzxaoxlhmvjc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("tjekxsnnb").type());
        Assertions.assertEquals("gdcrrfbpl", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
