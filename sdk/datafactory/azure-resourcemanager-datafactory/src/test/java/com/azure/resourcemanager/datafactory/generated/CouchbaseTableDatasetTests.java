// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CouchbaseTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CouchbaseTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CouchbaseTableDataset model = BinaryData.fromString(
            "{\"type\":\"CouchbaseTable\",\"typeProperties\":{\"tableName\":\"datacaujbfomf\"},\"description\":\"zpjyxefppqcwd\",\"structure\":\"datajj\",\"schema\":\"datapsnxebycympohxub\",\"linkedServiceName\":{\"referenceName\":\"n\",\"parameters\":{\"usp\":\"dataebcxn\",\"vgspjlfzhjngwqx\":\"datayzssjlmykdyg\"}},\"parameters\":{\"c\":{\"type\":\"Bool\",\"defaultValue\":\"datagyoimmsszz\"},\"nwcnvpnyldjdkj\":{\"type\":\"SecureString\",\"defaultValue\":\"dataognhtvagw\"}},\"annotations\":[\"datayknkxioxhnrjlq\"],\"folder\":{\"name\":\"ejexfdlhuhd\"},\"\":{\"cflvxbocaywmfvuh\":\"datagywadrklpdyehjr\",\"gsfmhwdxqu\":\"datamolhveol\",\"ynhitrnwqgq\":\"dataymlhklmnjqzm\",\"piqnrjoc\":\"databthb\"}}")
            .toObject(CouchbaseTableDataset.class);
        Assertions.assertEquals("zpjyxefppqcwd", model.description());
        Assertions.assertEquals("n", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("c").type());
        Assertions.assertEquals("ejexfdlhuhd", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CouchbaseTableDataset model = new CouchbaseTableDataset().withDescription("zpjyxefppqcwd")
            .withStructure("datajj")
            .withSchema("datapsnxebycympohxub")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("n")
                .withParameters(mapOf("usp", "dataebcxn", "vgspjlfzhjngwqx", "datayzssjlmykdyg")))
            .withParameters(
                mapOf("c", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datagyoimmsszz"),
                    "nwcnvpnyldjdkj",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                        .withDefaultValue("dataognhtvagw")))
            .withAnnotations(Arrays.asList("datayknkxioxhnrjlq"))
            .withFolder(new DatasetFolder().withName("ejexfdlhuhd"))
            .withTableName("datacaujbfomf");
        model = BinaryData.fromObject(model).toObject(CouchbaseTableDataset.class);
        Assertions.assertEquals("zpjyxefppqcwd", model.description());
        Assertions.assertEquals("n", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("c").type());
        Assertions.assertEquals("ejexfdlhuhd", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
