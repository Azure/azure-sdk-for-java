// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CouchbaseTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CouchbaseTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CouchbaseTableDataset model = BinaryData.fromString(
            "{\"type\":\"CouchbaseTable\",\"typeProperties\":{\"tableName\":\"dataeeocnqoubvepvlr\"},\"description\":\"zfhd\",\"structure\":\"datafhxohz\",\"schema\":\"datahhavzfuxnvk\",\"linkedServiceName\":{\"referenceName\":\"slcof\",\"parameters\":{\"dxqfussubzssp\":\"datafuehouisaklhjf\",\"kqdgwbztrth\":\"datajvailfauyvxpqw\",\"ffjdhgslormhbt\":\"datadwvog\"}},\"parameters\":{\"kygbptmsgkwedwlx\":{\"type\":\"Float\",\"defaultValue\":\"datakylhcnsdylmnqu\"},\"hudhrpj\":{\"type\":\"Int\",\"defaultValue\":\"datagbg\"}},\"annotations\":[\"datarr\",\"datafibpkwmamrlfi\",\"datajudd\",\"datad\"],\"folder\":{\"name\":\"pngyhylqyafe\"},\"\":{\"u\":\"dataodx\",\"tzeargvfvkhbj\":\"dataytxnxrqx\",\"gnybffqcwwyne\":\"datamvpjxsdhwe\",\"jijfhpxni\":\"dataktvmwgvconyse\"}}")
            .toObject(CouchbaseTableDataset.class);
        Assertions.assertEquals("zfhd", model.description());
        Assertions.assertEquals("slcof", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("kygbptmsgkwedwlx").type());
        Assertions.assertEquals("pngyhylqyafe", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CouchbaseTableDataset model = new CouchbaseTableDataset().withDescription("zfhd")
            .withStructure("datafhxohz")
            .withSchema("datahhavzfuxnvk")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("slcof")
                .withParameters(mapOf("dxqfussubzssp", "datafuehouisaklhjf", "kqdgwbztrth", "datajvailfauyvxpqw",
                    "ffjdhgslormhbt", "datadwvog")))
            .withParameters(mapOf("kygbptmsgkwedwlx",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datakylhcnsdylmnqu"),
                "hudhrpj", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datagbg")))
            .withAnnotations(Arrays.asList("datarr", "datafibpkwmamrlfi", "datajudd", "datad"))
            .withFolder(new DatasetFolder().withName("pngyhylqyafe"))
            .withTableName("dataeeocnqoubvepvlr");
        model = BinaryData.fromObject(model).toObject(CouchbaseTableDataset.class);
        Assertions.assertEquals("zfhd", model.description());
        Assertions.assertEquals("slcof", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("kygbptmsgkwedwlx").type());
        Assertions.assertEquals("pngyhylqyafe", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
