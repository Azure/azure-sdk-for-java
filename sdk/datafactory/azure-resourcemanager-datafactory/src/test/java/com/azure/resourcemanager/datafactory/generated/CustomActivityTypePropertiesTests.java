// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.CustomActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomActivityTypeProperties model = BinaryData.fromString(
            "{\"command\":\"dataa\",\"resourceLinkedService\":{\"referenceName\":\"zjqpdfs\",\"parameters\":{\"cfxsgjdiqemcghor\":\"datavitis\",\"vhtmzwgircfnz\":\"datajawfczbbvr\",\"tvlqwpmmmhupvx\":\"dataybrflq\"}},\"folderPath\":\"datapsugebgboqnci\",\"referenceObjects\":{\"linkedServices\":[{\"referenceName\":\"ufo\",\"parameters\":{\"jdaxezfdsoglji\":\"dataqgefxypxmkexjona\"}},{\"referenceName\":\"wduwn\",\"parameters\":{\"fachkzzn\":\"datafwogqwdxtp\"}}],\"datasets\":[{\"referenceName\":\"msfnigjoxhz\",\"parameters\":{\"b\":\"datamcsjyfbutqlotojf\",\"wjgjlo\":\"datay\",\"pbih\":\"datahhhkxlqu\"}},{\"referenceName\":\"injymnqweptejr\",\"parameters\":{\"rkcqpy\":\"datauktcnxtpamwjb\",\"tvovhuifbly\":\"datajj\"}},{\"referenceName\":\"qycknqmbvssjb\",\"parameters\":{\"n\":\"datausnnc\",\"uhsjzduumpl\":\"datai\",\"wjcy\":\"datawupfndafrz\"}},{\"referenceName\":\"zaneave\",\"parameters\":{\"w\":\"datarul\"}}]},\"extendedProperties\":{\"qpawwjvdohzewu\":\"datazesqdvmxuf\"},\"retentionTimeInDays\":\"dataaeshftls\",\"autoUserSpecification\":\"datapvflmxjd\"}")
            .toObject(CustomActivityTypeProperties.class);
        Assertions.assertEquals("zjqpdfs", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("ufo", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("msfnigjoxhz", model.referenceObjects().datasets().get(0).referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomActivityTypeProperties model
            = new CustomActivityTypeProperties().withCommand("dataa")
                .withResourceLinkedService(new LinkedServiceReference().withReferenceName("zjqpdfs")
                    .withParameters(mapOf("cfxsgjdiqemcghor", "datavitis", "vhtmzwgircfnz", "datajawfczbbvr",
                        "tvlqwpmmmhupvx", "dataybrflq")))
                .withFolderPath("datapsugebgboqnci")
                .withReferenceObjects(new CustomActivityReferenceObject()
                    .withLinkedServices(Arrays.asList(
                        new LinkedServiceReference().withReferenceName("ufo")
                            .withParameters(mapOf("jdaxezfdsoglji", "dataqgefxypxmkexjona")),
                        new LinkedServiceReference().withReferenceName("wduwn")
                            .withParameters(mapOf("fachkzzn", "datafwogqwdxtp"))))
                    .withDatasets(Arrays.asList(
                        new DatasetReference().withReferenceName("msfnigjoxhz").withParameters(
                            mapOf("b", "datamcsjyfbutqlotojf", "wjgjlo", "datay", "pbih", "datahhhkxlqu")),
                        new DatasetReference().withReferenceName("injymnqweptejr")
                            .withParameters(mapOf("rkcqpy", "datauktcnxtpamwjb", "tvovhuifbly", "datajj")),
                        new DatasetReference().withReferenceName("qycknqmbvssjb")
                            .withParameters(mapOf("n", "datausnnc", "uhsjzduumpl", "datai", "wjcy", "datawupfndafrz")),
                        new DatasetReference().withReferenceName("zaneave").withParameters(mapOf("w", "datarul")))))
                .withExtendedProperties(mapOf("qpawwjvdohzewu", "datazesqdvmxuf"))
                .withRetentionTimeInDays("dataaeshftls").withAutoUserSpecification("datapvflmxjd");
        model = BinaryData.fromObject(model).toObject(CustomActivityTypeProperties.class);
        Assertions.assertEquals("zjqpdfs", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("ufo", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("msfnigjoxhz", model.referenceObjects().datasets().get(0).referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
