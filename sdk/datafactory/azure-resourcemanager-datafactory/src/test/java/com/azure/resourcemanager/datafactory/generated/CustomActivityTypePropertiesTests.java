// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.CustomActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomActivityTypeProperties model = BinaryData.fromString(
            "{\"command\":\"dataqthohfqbeaizv\",\"resourceLinkedService\":{\"referenceName\":\"hxgiy\",\"parameters\":{\"kabwpdvedmxckb\":\"datagdascmf\"}},\"folderPath\":\"datagykxszetaonk\",\"referenceObjects\":{\"linkedServices\":[{\"referenceName\":\"fkczldepz\",\"parameters\":{\"i\":\"datanjwdcisc\",\"mbmbvccuikpaviu\":\"datauoybudnxawf\",\"o\":\"datajizbjsu\"}},{\"referenceName\":\"etl\",\"parameters\":{\"t\":\"datatmebrssrlxenq\",\"vqmbuxensogdvh\":\"datacl\"}},{\"referenceName\":\"qxggnc\",\"parameters\":{\"xcjqrvpgukscr\":\"datavtf\",\"aj\":\"databrhkdemax\"}}],\"datasets\":[{\"referenceName\":\"cachsojgagey\",\"parameters\":{\"gfxwynzbeemlsrtg\":\"datakkzkzprjqb\",\"dglpu\":\"datagcmutuk\"}},{\"referenceName\":\"fuhbdmmfdrxyejj\",\"parameters\":{\"ox\":\"dataqvbahiiatpdx\",\"pwx\":\"datagvpsmxfchnhjsa\"}},{\"referenceName\":\"yikgmlplqgpskyn\",\"parameters\":{\"nlvwtsl\":\"datazk\",\"xiyqwlx\":\"datablgvezhi\"}}]},\"extendedProperties\":{\"nmcaprxhixmybl\":\"dataysyutnredzkovt\",\"gkrumpunwyfyvhcb\":\"dataayupa\",\"h\":\"dataipxhghicw\",\"smisewqljm\":\"datadrvjktvpyanooyti\"},\"retentionTimeInDays\":\"dataqu\",\"autoUserSpecification\":\"datarzgluqa\"}")
            .toObject(CustomActivityTypeProperties.class);
        Assertions.assertEquals("hxgiy", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("fkczldepz", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("cachsojgagey", model.referenceObjects().datasets().get(0).referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomActivityTypeProperties model
            = new CustomActivityTypeProperties().withCommand("dataqthohfqbeaizv")
                .withResourceLinkedService(new LinkedServiceReference().withReferenceName("hxgiy")
                    .withParameters(mapOf("kabwpdvedmxckb", "datagdascmf")))
                .withFolderPath("datagykxszetaonk")
                .withReferenceObjects(
                    new CustomActivityReferenceObject()
                        .withLinkedServices(Arrays.asList(
                            new LinkedServiceReference().withReferenceName("fkczldepz")
                                .withParameters(mapOf("i", "datanjwdcisc", "mbmbvccuikpaviu", "datauoybudnxawf", "o",
                                    "datajizbjsu")),
                            new LinkedServiceReference().withReferenceName("etl")
                                .withParameters(mapOf("t", "datatmebrssrlxenq", "vqmbuxensogdvh", "datacl")),
                            new LinkedServiceReference().withReferenceName("qxggnc")
                                .withParameters(mapOf("xcjqrvpgukscr", "datavtf", "aj", "databrhkdemax"))))
                        .withDatasets(Arrays.asList(
                            new DatasetReference().withReferenceName("cachsojgagey")
                                .withParameters(mapOf("gfxwynzbeemlsrtg", "datakkzkzprjqb", "dglpu", "datagcmutuk")),
                            new DatasetReference().withReferenceName("fuhbdmmfdrxyejj")
                                .withParameters(mapOf("ox", "dataqvbahiiatpdx", "pwx", "datagvpsmxfchnhjsa")),
                            new DatasetReference().withReferenceName("yikgmlplqgpskyn")
                                .withParameters(mapOf("nlvwtsl", "datazk", "xiyqwlx", "datablgvezhi")))))
                .withExtendedProperties(mapOf("nmcaprxhixmybl", "dataysyutnredzkovt", "gkrumpunwyfyvhcb", "dataayupa",
                    "h", "dataipxhghicw", "smisewqljm", "datadrvjktvpyanooyti"))
                .withRetentionTimeInDays("dataqu")
                .withAutoUserSpecification("datarzgluqa");
        model = BinaryData.fromObject(model).toObject(CustomActivityTypeProperties.class);
        Assertions.assertEquals("hxgiy", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("fkczldepz", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("cachsojgagey", model.referenceObjects().datasets().get(0).referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
