// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.CustomActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomActivityTypeProperties model = BinaryData.fromString(
            "{\"command\":\"datajqfbvbv\",\"resourceLinkedService\":{\"referenceName\":\"ryrzoqyy\",\"parameters\":{\"obhltmpay\":\"datab\",\"yttosnzbbxifa\":\"dataqqgr\",\"zpvp\":\"datarhpuzca\"}},\"folderPath\":\"datatosui\",\"referenceObjects\":{\"linkedServices\":[{\"referenceName\":\"mocndbuexr\",\"parameters\":{\"dafilaizcdugn\":\"datawyxodpcgdvytnbkv\",\"nkxoqecjznuqg\":\"dataymljgaykaq\",\"ewshhqgjvchl\":\"datagvm\"}},{\"referenceName\":\"e\",\"parameters\":{\"raksahw\":\"datatczzjfzjovwiz\",\"snb\":\"datapukltfknroxm\",\"fvqtvukcfesizkn\":\"datacz\"}}],\"datasets\":[{\"referenceName\":\"xflzhgr\",\"parameters\":{\"ofdgzl\":\"dataysdmovbvnjyq\",\"voxnjbyjgobzj\":\"datakczolndwrggyt\",\"ifrjgvhone\":\"dataukfwmhzarrfttx\",\"lmkfvsol\":\"datavvab\"}},{\"referenceName\":\"jowvzyoehlj\",\"parameters\":{\"othnucqktuaerg\":\"datag\",\"dlbahmivtuphwwy\":\"datatpriicte\",\"fxfteo\":\"dataxo\",\"qap\":\"datanrziwkcpxgjmyou\"}},{\"referenceName\":\"aypcdikkmyrs\",\"parameters\":{\"gg\":\"datat\",\"sxjzklqkgjukntkn\":\"datapohuv\"}},{\"referenceName\":\"h\",\"parameters\":{\"e\":\"dataziqcw\",\"hptlnwnlauwb\":\"datad\",\"mgeuoihtik\":\"dataeszx\"}}]},\"extendedProperties\":{\"av\":\"datapgx\"},\"retentionTimeInDays\":\"datadsuwct\",\"autoUserSpecification\":\"datahcj\"}")
            .toObject(CustomActivityTypeProperties.class);
        Assertions.assertEquals("ryrzoqyy", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("mocndbuexr", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("xflzhgr", model.referenceObjects().datasets().get(0).referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomActivityTypeProperties model = new CustomActivityTypeProperties().withCommand("datajqfbvbv")
            .withResourceLinkedService(new LinkedServiceReference().withReferenceName("ryrzoqyy")
                .withParameters(mapOf("obhltmpay", "datab", "yttosnzbbxifa", "dataqqgr", "zpvp", "datarhpuzca")))
            .withFolderPath("datatosui")
            .withReferenceObjects(new CustomActivityReferenceObject()
                .withLinkedServices(Arrays.asList(
                    new LinkedServiceReference().withReferenceName("mocndbuexr")
                        .withParameters(mapOf("dafilaizcdugn", "datawyxodpcgdvytnbkv", "nkxoqecjznuqg",
                            "dataymljgaykaq", "ewshhqgjvchl", "datagvm")),
                    new LinkedServiceReference().withReferenceName("e")
                        .withParameters(mapOf("raksahw", "datatczzjfzjovwiz", "snb", "datapukltfknroxm",
                            "fvqtvukcfesizkn", "datacz"))))
                .withDatasets(Arrays.asList(
                    new DatasetReference().withReferenceName("xflzhgr")
                        .withParameters(mapOf("ofdgzl", "dataysdmovbvnjyq", "voxnjbyjgobzj", "datakczolndwrggyt",
                            "ifrjgvhone", "dataukfwmhzarrfttx", "lmkfvsol", "datavvab")),
                    new DatasetReference().withReferenceName("jowvzyoehlj")
                        .withParameters(mapOf("othnucqktuaerg", "datag", "dlbahmivtuphwwy", "datatpriicte", "fxfteo",
                            "dataxo", "qap", "datanrziwkcpxgjmyou")),
                    new DatasetReference().withReferenceName("aypcdikkmyrs")
                        .withParameters(mapOf("gg", "datat", "sxjzklqkgjukntkn", "datapohuv")),
                    new DatasetReference().withReferenceName("h")
                        .withParameters(mapOf("e", "dataziqcw", "hptlnwnlauwb", "datad", "mgeuoihtik", "dataeszx")))))
            .withExtendedProperties(mapOf("av", "datapgx"))
            .withRetentionTimeInDays("datadsuwct")
            .withAutoUserSpecification("datahcj");
        model = BinaryData.fromObject(model).toObject(CustomActivityTypeProperties.class);
        Assertions.assertEquals("ryrzoqyy", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("mocndbuexr", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("xflzhgr", model.referenceObjects().datasets().get(0).referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
