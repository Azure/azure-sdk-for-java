// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.CustomActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"command\":\"dataxwdppiodnntol\",\"resourceLinkedService\":{\"referenceName\":\"zptngr\",\"parameters\":{\"u\":\"dataimxacxcaczcdkomr\",\"jnxdyskyrhsijxml\":\"dataytjxpdqwy\"}},\"folderPath\":\"dataymfxjsuwmbdt\",\"referenceObjects\":{\"linkedServices\":[{\"referenceName\":\"gzybp\",\"parameters\":{\"vnqszqkrsnxue\":\"datapghloemqa\",\"tmtgk\":\"datawrbqadtvpgu\",\"xxe\":\"dataiv\",\"odvzjkz\":\"dataplphkiyiqpi\"}},{\"referenceName\":\"lvxdpopubbwps\",\"parameters\":{\"w\":\"datab\",\"mmgf\":\"datahjqakacbcbrsnnv\",\"qmty\":\"datat\",\"jkbisjurilqc\":\"dataqut\"}}],\"datasets\":[{\"referenceName\":\"dorbufog\",\"parameters\":{\"qajsuauwojgvp\":\"databiz\",\"nbr\":\"datazvtgwlzqcyvrbg\",\"ubnnmzz\":\"dataekjbljfk\"}},{\"referenceName\":\"bcxbvnh\",\"parameters\":{\"asxak\":\"datadfxxaoyisky\",\"mqkgc\":\"dataqbwjtnfa\",\"s\":\"dataldxuweweeegsz\",\"hfcdhbcr\":\"dataryfap\"}}]},\"extendedProperties\":{\"nfrhbkn\":\"datadszuxhaqlywty\",\"xhfg\":\"dataagpnmcqud\"},\"retentionTimeInDays\":\"datazegm\",\"autoUserSpecification\":\"dataebzoujhijlduuvxk\"}")
                .toObject(CustomActivityTypeProperties.class);
        Assertions.assertEquals("zptngr", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("gzybp", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("dorbufog", model.referenceObjects().datasets().get(0).referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomActivityTypeProperties model =
            new CustomActivityTypeProperties()
                .withCommand("dataxwdppiodnntol")
                .withResourceLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("zptngr")
                        .withParameters(mapOf("u", "dataimxacxcaczcdkomr", "jnxdyskyrhsijxml", "dataytjxpdqwy")))
                .withFolderPath("dataymfxjsuwmbdt")
                .withReferenceObjects(
                    new CustomActivityReferenceObject()
                        .withLinkedServices(
                            Arrays
                                .asList(
                                    new LinkedServiceReference()
                                        .withReferenceName("gzybp")
                                        .withParameters(
                                            mapOf(
                                                "vnqszqkrsnxue",
                                                "datapghloemqa",
                                                "tmtgk",
                                                "datawrbqadtvpgu",
                                                "xxe",
                                                "dataiv",
                                                "odvzjkz",
                                                "dataplphkiyiqpi")),
                                    new LinkedServiceReference()
                                        .withReferenceName("lvxdpopubbwps")
                                        .withParameters(
                                            mapOf(
                                                "w",
                                                "datab",
                                                "mmgf",
                                                "datahjqakacbcbrsnnv",
                                                "qmty",
                                                "datat",
                                                "jkbisjurilqc",
                                                "dataqut"))))
                        .withDatasets(
                            Arrays
                                .asList(
                                    new DatasetReference()
                                        .withReferenceName("dorbufog")
                                        .withParameters(
                                            mapOf(
                                                "qajsuauwojgvp",
                                                "databiz",
                                                "nbr",
                                                "datazvtgwlzqcyvrbg",
                                                "ubnnmzz",
                                                "dataekjbljfk")),
                                    new DatasetReference()
                                        .withReferenceName("bcxbvnh")
                                        .withParameters(
                                            mapOf(
                                                "asxak",
                                                "datadfxxaoyisky",
                                                "mqkgc",
                                                "dataqbwjtnfa",
                                                "s",
                                                "dataldxuweweeegsz",
                                                "hfcdhbcr",
                                                "dataryfap")))))
                .withExtendedProperties(mapOf("nfrhbkn", "datadszuxhaqlywty", "xhfg", "dataagpnmcqud"))
                .withRetentionTimeInDays("datazegm")
                .withAutoUserSpecification("dataebzoujhijlduuvxk");
        model = BinaryData.fromObject(model).toObject(CustomActivityTypeProperties.class);
        Assertions.assertEquals("zptngr", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("gzybp", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("dorbufog", model.referenceObjects().datasets().get(0).referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
