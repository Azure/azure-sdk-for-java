// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.CustomActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomActivityTypeProperties model = BinaryData.fromString(
            "{\"command\":\"datahikwahbzdgwkim\",\"resourceLinkedService\":{\"referenceName\":\"atrvjkxcrx\",\"parameters\":{\"erjerh\":\"datankujxdniape\",\"wx\":\"datagiud\"}},\"folderPath\":\"datatppjdyikdykxhx\",\"referenceObjects\":{\"linkedServices\":[{\"referenceName\":\"uc\",\"parameters\":{\"kmmcvftijl\":\"datarpdgm\",\"aednczvnwyfzavsa\":\"datahlcrjynef\"}}],\"datasets\":[{\"referenceName\":\"hshyxhfejtywl\",\"parameters\":{\"qeeodfplwfsmpbw\":\"datas\",\"qmcaofxg\":\"dataphj\",\"xkxjrttzhnam\":\"datayvjefnlxqmtedzxu\"}},{\"referenceName\":\"jqynwqcov\",\"parameters\":{\"hb\":\"datarsurq\",\"yqasdvepld\":\"datadxkojorcm\",\"ubqcqnch\":\"datafxmpyvlfujsbcfog\"}},{\"referenceName\":\"zyjug\",\"parameters\":{\"vcpisvprumttr\":\"datablbri\"}}]},\"extendedProperties\":{\"anlm\":\"dataugxtxxwbj\",\"xplrtueg\":\"datamvegxgy\",\"vjuowkt\":\"datahqulnjeybgpjy\",\"dkydqcgedip\":\"databpv\"},\"retentionTimeInDays\":\"datazmvttttjmdtf\",\"autoUserSpecification\":\"dataxaeekomiesg\"}")
            .toObject(CustomActivityTypeProperties.class);
        Assertions.assertEquals("atrvjkxcrx", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("uc", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("hshyxhfejtywl", model.referenceObjects().datasets().get(0).referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomActivityTypeProperties model = new CustomActivityTypeProperties().withCommand("datahikwahbzdgwkim")
            .withResourceLinkedService(new LinkedServiceReference().withReferenceName("atrvjkxcrx")
                .withParameters(mapOf("erjerh", "datankujxdniape", "wx", "datagiud")))
            .withFolderPath("datatppjdyikdykxhx")
            .withReferenceObjects(new CustomActivityReferenceObject()
                .withLinkedServices(Arrays.asList(new LinkedServiceReference().withReferenceName("uc")
                    .withParameters(mapOf("kmmcvftijl", "datarpdgm", "aednczvnwyfzavsa", "datahlcrjynef"))))
                .withDatasets(Arrays.asList(
                    new DatasetReference().withReferenceName("hshyxhfejtywl")
                        .withParameters(mapOf("qeeodfplwfsmpbw", "datas", "qmcaofxg", "dataphj", "xkxjrttzhnam",
                            "datayvjefnlxqmtedzxu")),
                    new DatasetReference().withReferenceName("jqynwqcov")
                        .withParameters(mapOf("hb", "datarsurq", "yqasdvepld", "datadxkojorcm", "ubqcqnch",
                            "datafxmpyvlfujsbcfog")),
                    new DatasetReference().withReferenceName("zyjug")
                        .withParameters(mapOf("vcpisvprumttr", "datablbri")))))
            .withExtendedProperties(mapOf("anlm", "dataugxtxxwbj", "xplrtueg", "datamvegxgy", "vjuowkt",
                "datahqulnjeybgpjy", "dkydqcgedip", "databpv"))
            .withRetentionTimeInDays("datazmvttttjmdtf")
            .withAutoUserSpecification("dataxaeekomiesg");
        model = BinaryData.fromObject(model).toObject(CustomActivityTypeProperties.class);
        Assertions.assertEquals("atrvjkxcrx", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("uc", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("hshyxhfejtywl", model.referenceObjects().datasets().get(0).referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
