// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.CustomActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomActivityTypeProperties model = BinaryData.fromString(
            "{\"command\":\"datagmmgtqgzdfjfnree\",\"resourceLinkedService\":{\"referenceName\":\"bumyu\",\"parameters\":{\"rikdfacf\":\"datazfotfoif\",\"fxbqdrjuni\":\"datakbgohxbjizf\"}},\"folderPath\":\"datanhnnghgazdbve\",\"referenceObjects\":{\"linkedServices\":[{\"referenceName\":\"ti\",\"parameters\":{\"pydjdpapndmv\":\"datawrncwhlxvngj\",\"vvtapwkwkthm\":\"databd\",\"npjzx\":\"dataxidecdehskmfiu\"}},{\"referenceName\":\"htsgyyrgdguvkg\",\"parameters\":{\"kznffqv\":\"datag\",\"rwgdpf\":\"dataxnytihhqancw\",\"tkrsn\":\"datady\"}}],\"datasets\":[{\"referenceName\":\"amyolvgkslaiuon\",\"parameters\":{\"wzduhixomxvb\":\"datawvwzuetqcxoamxu\",\"xipgfkcodou\":\"datauzxsn\",\"l\":\"dataeozgnwmcizclnqe\"}},{\"referenceName\":\"pwp\",\"parameters\":{\"spslcvpqwrsf\":\"datajsjkondrkncfoq\",\"xsggaegrppwo\":\"datapi\"}},{\"referenceName\":\"ig\",\"parameters\":{\"yjzokvy\":\"datatophcwzdw\",\"prnqjxsexzxbiwn\":\"datainmywjcfkmfoztwm\",\"ylfdryes\":\"dataewqtbztogih\"}},{\"referenceName\":\"alsparbjs\",\"parameters\":{\"lvnosblc\":\"databvgemkze\",\"nhkp\":\"datactwac\"}}]},\"extendedProperties\":{\"untm\":\"datajhykptci\",\"ccqhtlqrfsrfxr\":\"datafh\",\"dybhydlq\":\"dataxxymtcwacavz\",\"st\":\"dataxid\"},\"retentionTimeInDays\":\"datahnsaespzwgpjri\",\"autoUserSpecification\":\"dataao\"}")
            .toObject(CustomActivityTypeProperties.class);
        Assertions.assertEquals("bumyu", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("ti", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("amyolvgkslaiuon", model.referenceObjects().datasets().get(0).referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomActivityTypeProperties model = new CustomActivityTypeProperties().withCommand("datagmmgtqgzdfjfnree")
            .withResourceLinkedService(new LinkedServiceReference().withReferenceName("bumyu")
                .withParameters(mapOf("rikdfacf", "datazfotfoif", "fxbqdrjuni", "datakbgohxbjizf")))
            .withFolderPath("datanhnnghgazdbve")
            .withReferenceObjects(new CustomActivityReferenceObject()
                .withLinkedServices(Arrays.asList(
                    new LinkedServiceReference().withReferenceName("ti")
                        .withParameters(mapOf("pydjdpapndmv", "datawrncwhlxvngj", "vvtapwkwkthm", "databd", "npjzx",
                            "dataxidecdehskmfiu")),
                    new LinkedServiceReference().withReferenceName("htsgyyrgdguvkg")
                        .withParameters(mapOf("kznffqv", "datag", "rwgdpf", "dataxnytihhqancw", "tkrsn", "datady"))))
                .withDatasets(Arrays.asList(
                    new DatasetReference().withReferenceName("amyolvgkslaiuon")
                        .withParameters(mapOf("wzduhixomxvb", "datawvwzuetqcxoamxu", "xipgfkcodou", "datauzxsn", "l",
                            "dataeozgnwmcizclnqe")),
                    new DatasetReference().withReferenceName("pwp")
                        .withParameters(mapOf("spslcvpqwrsf", "datajsjkondrkncfoq", "xsggaegrppwo", "datapi")),
                    new DatasetReference().withReferenceName("ig")
                        .withParameters(mapOf("yjzokvy", "datatophcwzdw", "prnqjxsexzxbiwn", "datainmywjcfkmfoztwm",
                            "ylfdryes", "dataewqtbztogih")),
                    new DatasetReference().withReferenceName("alsparbjs")
                        .withParameters(mapOf("lvnosblc", "databvgemkze", "nhkp", "datactwac")))))
            .withExtendedProperties(mapOf("untm", "datajhykptci", "ccqhtlqrfsrfxr", "datafh", "dybhydlq",
                "dataxxymtcwacavz", "st", "dataxid"))
            .withRetentionTimeInDays("datahnsaespzwgpjri")
            .withAutoUserSpecification("dataao");
        model = BinaryData.fromObject(model).toObject(CustomActivityTypeProperties.class);
        Assertions.assertEquals("bumyu", model.resourceLinkedService().referenceName());
        Assertions.assertEquals("ti", model.referenceObjects().linkedServices().get(0).referenceName());
        Assertions.assertEquals("amyolvgkslaiuon", model.referenceObjects().datasets().get(0).referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
