// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.NetezzaPartitionSettings;
import com.azure.resourcemanager.datafactory.models.NetezzaSource;

public final class NetezzaSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetezzaSource model =
            BinaryData
                .fromString(
                    "{\"type\":\"NetezzaSource\",\"query\":\"datatu\",\"partitionOption\":\"datazvlhibr\",\"partitionSettings\":{\"partitionColumnName\":\"datagwuv\",\"partitionUpperBound\":\"dataymoqv\",\"partitionLowerBound\":\"datakrynziudmhed\"},\"queryTimeout\":\"dataygwagvuioxjwztr\",\"additionalColumns\":\"datatll\",\"sourceRetryCount\":\"datacv\",\"sourceRetryWait\":\"datanbccffsbz\",\"maxConcurrentConnections\":\"datatfxq\",\"disableMetricsCollection\":\"dataj\",\"\":{\"vbchpzvq\":\"datadjctt\"}}")
                .toObject(NetezzaSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetezzaSource model =
            new NetezzaSource()
                .withSourceRetryCount("datacv")
                .withSourceRetryWait("datanbccffsbz")
                .withMaxConcurrentConnections("datatfxq")
                .withDisableMetricsCollection("dataj")
                .withQueryTimeout("dataygwagvuioxjwztr")
                .withAdditionalColumns("datatll")
                .withQuery("datatu")
                .withPartitionOption("datazvlhibr")
                .withPartitionSettings(
                    new NetezzaPartitionSettings()
                        .withPartitionColumnName("datagwuv")
                        .withPartitionUpperBound("dataymoqv")
                        .withPartitionLowerBound("datakrynziudmhed"));
        model = BinaryData.fromObject(model).toObject(NetezzaSource.class);
    }
}
