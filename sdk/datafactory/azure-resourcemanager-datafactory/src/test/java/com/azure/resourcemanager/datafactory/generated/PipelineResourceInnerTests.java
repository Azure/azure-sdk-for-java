// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.PipelineResourceInner;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineFolder;
import com.azure.resourcemanager.datafactory.models.PipelinePolicy;
import com.azure.resourcemanager.datafactory.models.VariableSpecification;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PipelineResourceInnerTests {
    @Test
    public void testDeserialize() {
        PipelineResourceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"description\":\"cbpwxqpsrknft\",\"activities\":[{\"type\":\"Activity\",\"name\":\"riuhprwm\",\"description\":\"vxqtayriwwroyqbe\",\"dependsOn\":[],\"userProperties\":[],\"\":{}},{\"type\":\"Activity\",\"name\":\"qibycnojvknm\",\"description\":\"qsgzvahapj\",\"dependsOn\":[],\"userProperties\":[],\"\":{}},{\"type\":\"Activity\",\"name\":\"vgqzcjrvxd\",\"description\":\"lmwlxkvugfhzo\",\"dependsOn\":[],\"userProperties\":[],\"\":{}},{\"type\":\"Activity\",\"name\":\"vzunluthnnprnxi\",\"description\":\"ilpjzuaejxdult\",\"dependsOn\":[],\"userProperties\":[],\"\":{}}],\"parameters\":{\"umveekgpwozuhkf\":{\"type\":\"Int\"},\"jyofdxluusdtto\":{\"type\":\"Object\"},\"boekqvkel\":{\"type\":\"Int\"}},\"variables\":{\"xwyjsflhhc\":{\"type\":\"String\"}},\"concurrency\":290339428,\"annotations\":[],\"runDimensions\":{},\"folder\":{\"name\":\"xyawj\"},\"policy\":{}},\"name\":\"cslyjpk\",\"type\":\"dzyexznelixh\",\"etag\":\"ztfolhbnxk\",\"\":{},\"id\":\"ulppggdtpnapnyir\"}")
                .toObject(PipelineResourceInner.class);
        Assertions.assertEquals("ulppggdtpnapnyir", model.id());
        Assertions.assertEquals("cbpwxqpsrknft", model.description());
        Assertions.assertEquals("riuhprwm", model.activities().get(0).name());
        Assertions.assertEquals("vxqtayriwwroyqbe", model.activities().get(0).description());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("umveekgpwozuhkf").type());
        Assertions.assertEquals(VariableType.STRING, model.variables().get("xwyjsflhhc").type());
        Assertions.assertEquals(290339428, model.concurrency());
        Assertions.assertEquals("xyawj", model.folder().name());
    }

    @Test
    public void testSerialize() {
        PipelineResourceInner model =
            new PipelineResourceInner()
                .withId("ulppggdtpnapnyir")
                .withDescription("cbpwxqpsrknft")
                .withActivities(
                    Arrays
                        .asList(
                            new Activity()
                                .withName("riuhprwm")
                                .withDescription("vxqtayriwwroyqbe")
                                .withDependsOn(Arrays.asList())
                                .withUserProperties(Arrays.asList())
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity()
                                .withName("qibycnojvknm")
                                .withDescription("qsgzvahapj")
                                .withDependsOn(Arrays.asList())
                                .withUserProperties(Arrays.asList())
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity()
                                .withName("vgqzcjrvxd")
                                .withDescription("lmwlxkvugfhzo")
                                .withDependsOn(Arrays.asList())
                                .withUserProperties(Arrays.asList())
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity()
                                .withName("vzunluthnnprnxi")
                                .withDescription("ilpjzuaejxdult")
                                .withDependsOn(Arrays.asList())
                                .withUserProperties(Arrays.asList())
                                .withAdditionalProperties(mapOf("type", "Activity"))))
                .withParameters(
                    mapOf(
                        "umveekgpwozuhkf",
                        new ParameterSpecification().withType(ParameterType.INT),
                        "jyofdxluusdtto",
                        new ParameterSpecification().withType(ParameterType.OBJECT),
                        "boekqvkel",
                        new ParameterSpecification().withType(ParameterType.INT)))
                .withVariables(mapOf("xwyjsflhhc", new VariableSpecification().withType(VariableType.STRING)))
                .withConcurrency(290339428)
                .withAnnotations(Arrays.asList())
                .withRunDimensions(mapOf())
                .withFolder(new PipelineFolder().withName("xyawj"))
                .withPolicy(new PipelinePolicy())
                .withAdditionalProperties(mapOf("name", "cslyjpk", "etag", "ztfolhbnxk", "type", "dzyexznelixh"));
        model = BinaryData.fromObject(model).toObject(PipelineResourceInner.class);
        Assertions.assertEquals("ulppggdtpnapnyir", model.id());
        Assertions.assertEquals("cbpwxqpsrknft", model.description());
        Assertions.assertEquals("riuhprwm", model.activities().get(0).name());
        Assertions.assertEquals("vxqtayriwwroyqbe", model.activities().get(0).description());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("umveekgpwozuhkf").type());
        Assertions.assertEquals(VariableType.STRING, model.variables().get("xwyjsflhhc").type());
        Assertions.assertEquals(290339428, model.concurrency());
        Assertions.assertEquals("xyawj", model.folder().name());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
