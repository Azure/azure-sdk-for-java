// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.PipelineResourceInner;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineElapsedTimeMetricPolicy;
import com.azure.resourcemanager.datafactory.models.PipelineFolder;
import com.azure.resourcemanager.datafactory.models.PipelinePolicy;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.VariableSpecification;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PipelineResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PipelineResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"byrqufeg\",\"activities\":[{\"type\":\"Activity\",\"name\":\"wz\",\"description\":\"nhlmctlpdng\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"rixkwmyijejve\",\"dependencyConditions\":[\"Completed\"],\"\":{\"exccbdreaxhcexd\":\"datanai\"}},{\"activity\":\"rvqahqkghtpwi\",\"dependencyConditions\":[\"Skipped\",\"Failed\"],\"\":{\"voowvr\":\"datavfycxzb\",\"qp\":\"datamtg\",\"s\":\"datay\"}}],\"userProperties\":[{\"name\":\"nzm\",\"value\":\"datahgfipnsxkmcw\"}],\"\":{\"hjglikk\":\"datarrjreafxtsgu\",\"uzlm\":\"datawslolbqp\"}}],\"parameters\":{\"wjxeznoigbr\":{\"type\":\"Array\",\"defaultValue\":\"dataktgplcr\"}},\"variables\":{\"azej\":{\"type\":\"String\",\"defaultValue\":\"datakpnb\"}},\"concurrency\":2849760,\"annotations\":[\"datagfhsxttaugzxn\",\"dataaa\",\"datapxdtnkdmkq\"],\"runDimensions\":{\"pyouaibrebqaays\":\"datawuenvr\",\"zlwfffiakp\":\"datakixqtnqtt\",\"tmmjihyeozph\":\"datapqqmted\"},\"folder\":{\"name\":\"uyqncygupkvipmd\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"dataqupevzh\"}}},\"name\":\"totxhojujb\",\"type\":\"elmcuvhixbjxyfw\",\"etag\":\"lrcoolsttpki\",\"\":{\"ncu\":\"databnujrywvtylbf\",\"thtywub\":\"datadoiwi\"},\"id\":\"bihwqknfdnt\"}")
            .toObject(PipelineResourceInner.class);
        Assertions.assertEquals("bihwqknfdnt", model.id());
        Assertions.assertEquals("byrqufeg", model.description());
        Assertions.assertEquals("wz", model.activities().get(0).name());
        Assertions.assertEquals("nhlmctlpdng", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("rixkwmyijejve", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("nzm", model.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("wjxeznoigbr").type());
        Assertions.assertEquals(VariableType.STRING, model.variables().get("azej").type());
        Assertions.assertEquals(2849760, model.concurrency());
        Assertions.assertEquals("uyqncygupkvipmd", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PipelineResourceInner model = new PipelineResourceInner().withId("bihwqknfdnt")
            .withDescription("byrqufeg")
            .withActivities(Arrays.asList(new Activity().withName("wz")
                .withDescription("nhlmctlpdng")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("rixkwmyijejve")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("rvqahqkghtpwi")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("nzm").withValue("datahgfipnsxkmcw")))
                .withAdditionalProperties(mapOf("type", "Activity"))))
            .withParameters(mapOf("wjxeznoigbr",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataktgplcr")))
            .withVariables(
                mapOf("azej", new VariableSpecification().withType(VariableType.STRING).withDefaultValue("datakpnb")))
            .withConcurrency(2849760)
            .withAnnotations(Arrays.asList("datagfhsxttaugzxn", "dataaa", "datapxdtnkdmkq"))
            .withRunDimensions(
                mapOf("pyouaibrebqaays", "datawuenvr", "zlwfffiakp", "datakixqtnqtt", "tmmjihyeozph", "datapqqmted"))
            .withFolder(new PipelineFolder().withName("uyqncygupkvipmd"))
            .withPolicy(new PipelinePolicy()
                .withElapsedTimeMetric(new PipelineElapsedTimeMetricPolicy().withDuration("dataqupevzh")))
            .withAdditionalProperties(mapOf("name", "totxhojujb", "etag", "lrcoolsttpki", "type", "elmcuvhixbjxyfw"));
        model = BinaryData.fromObject(model).toObject(PipelineResourceInner.class);
        Assertions.assertEquals("bihwqknfdnt", model.id());
        Assertions.assertEquals("byrqufeg", model.description());
        Assertions.assertEquals("wz", model.activities().get(0).name());
        Assertions.assertEquals("nhlmctlpdng", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("rixkwmyijejve", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("nzm", model.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("wjxeznoigbr").type());
        Assertions.assertEquals(VariableType.STRING, model.variables().get("azej").type());
        Assertions.assertEquals(2849760, model.concurrency());
        Assertions.assertEquals("uyqncygupkvipmd", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
