// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.PipelineResourceInner;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineElapsedTimeMetricPolicy;
import com.azure.resourcemanager.datafactory.models.PipelineFolder;
import com.azure.resourcemanager.datafactory.models.PipelinePolicy;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.VariableSpecification;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PipelineResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PipelineResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"akpjpqqmtedlt\",\"activities\":[{\"type\":\"hyeozphvwau\",\"name\":\"qncygupkvi\",\"description\":\"dscwxqupevzhf\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"jujbypelmcuvhixb\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Succeeded\"],\"\":{\"kkbnu\":\"datalrcoolsttpki\"}},{\"activity\":\"rywvtylbfpn\",\"dependencyConditions\":[\"Succeeded\",\"Failed\"],\"\":{\"cbihwqk\":\"datawiithtywub\"}}],\"userProperties\":[{\"name\":\"ntwjch\",\"value\":\"datadgoihxumwctondzj\"},{\"name\":\"uu\",\"value\":\"datafdlwg\"},{\"name\":\"ytsbwtovv\",\"value\":\"datagseinq\"}],\"\":{\"qmsniffcdmqnro\":\"datafxqknpirgneptt\",\"hcrat\":\"datalpijnkrxfrd\",\"ft\":\"datazzronasx\",\"zh\":\"datazq\"}}],\"parameters\":{\"mossxkkgthrrghxj\":{\"type\":\"Int\",\"defaultValue\":\"datagogczhonnxkrlgny\"},\"hrnsvbu\":{\"type\":\"Float\",\"defaultValue\":\"dataqxvcxgfrpdsofb\"},\"ybycnunvj\":{\"type\":\"Int\",\"defaultValue\":\"datavz\"}},\"variables\":{\"uxzejntpsew\":{\"type\":\"Bool\",\"defaultValue\":\"dataawnopqgikyzirtxd\"}},\"concurrency\":354517921,\"annotations\":[\"dataqukrydxt\"],\"runDimensions\":{\"tbghhavgrvkf\":\"dataeoxorggufhyao\",\"mv\":\"dataovjzhpjbibgjmfx\",\"zzxscyhwzdgiruj\":\"datacluyovwxnbkf\",\"ujviylwdshfs\":\"datazbomvzzbtdcqvpni\"},\"folder\":{\"name\":\"bgye\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"datasgaojfmwncot\"}}},\"name\":\"fhir\",\"type\":\"ymoxoftpipiwyczu\",\"etag\":\"a\",\"\":{\"skasdvlmfwdgzxu\":\"datajlihhyus\",\"euzvx\":\"dataucvpamrs\",\"xmrhu\":\"datarisjnhnytxifqjz\",\"cesutrgjupauut\":\"datalw\"},\"id\":\"oqh\"}")
            .toObject(PipelineResourceInner.class);
        Assertions.assertEquals("oqh", model.id());
        Assertions.assertEquals("akpjpqqmtedlt", model.description());
        Assertions.assertEquals("qncygupkvi", model.activities().get(0).name());
        Assertions.assertEquals("dscwxqupevzhf", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("jujbypelmcuvhixb", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ntwjch", model.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("mossxkkgthrrghxj").type());
        Assertions.assertEquals(VariableType.BOOL, model.variables().get("uxzejntpsew").type());
        Assertions.assertEquals(354517921, model.concurrency());
        Assertions.assertEquals("bgye", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PipelineResourceInner model = new PipelineResourceInner().withId("oqh")
            .withDescription("akpjpqqmtedlt")
            .withActivities(Arrays.asList(new Activity().withName("qncygupkvi")
                .withDescription("dscwxqupevzhf")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("jujbypelmcuvhixb")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                            DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("rywvtylbfpn")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays.asList(new UserProperty().withName("ntwjch").withValue("datadgoihxumwctondzj"),
                        new UserProperty().withName("uu").withValue("datafdlwg"),
                        new UserProperty().withName("ytsbwtovv").withValue("datagseinq")))
                .withAdditionalProperties(mapOf("type", "hyeozphvwau"))))
            .withParameters(mapOf("mossxkkgthrrghxj",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datagogczhonnxkrlgny"),
                "hrnsvbu",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataqxvcxgfrpdsofb"),
                "ybycnunvj", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datavz")))
            .withVariables(mapOf("uxzejntpsew",
                new VariableSpecification().withType(VariableType.BOOL).withDefaultValue("dataawnopqgikyzirtxd")))
            .withConcurrency(354517921)
            .withAnnotations(Arrays.asList("dataqukrydxt"))
            .withRunDimensions(mapOf("tbghhavgrvkf", "dataeoxorggufhyao", "mv", "dataovjzhpjbibgjmfx",
                "zzxscyhwzdgiruj", "datacluyovwxnbkf", "ujviylwdshfs", "datazbomvzzbtdcqvpni"))
            .withFolder(new PipelineFolder().withName("bgye"))
            .withPolicy(new PipelinePolicy()
                .withElapsedTimeMetric(new PipelineElapsedTimeMetricPolicy().withDuration("datasgaojfmwncot")))
            .withAdditionalProperties(mapOf("name", "fhir", "etag", "a", "type", "ymoxoftpipiwyczu"));
        model = BinaryData.fromObject(model).toObject(PipelineResourceInner.class);
        Assertions.assertEquals("oqh", model.id());
        Assertions.assertEquals("akpjpqqmtedlt", model.description());
        Assertions.assertEquals("qncygupkvi", model.activities().get(0).name());
        Assertions.assertEquals("dscwxqupevzhf", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("jujbypelmcuvhixb", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ntwjch", model.activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("mossxkkgthrrghxj").type());
        Assertions.assertEquals(VariableType.BOOL, model.variables().get("uxzejntpsew").type());
        Assertions.assertEquals(354517921, model.concurrency());
        Assertions.assertEquals("bgye", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
