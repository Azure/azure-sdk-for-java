// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Activity model = BinaryData.fromString(
            "{\"type\":\"hud\",\"name\":\"goo\",\"description\":\"kqfqjbvl\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"iqtqzfavyvnq\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"jkqa\":\"datayeua\"}},{\"activity\":\"qgzsles\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Completed\",\"Skipped\"],\"\":{\"vbquwr\":\"datatiewdj\",\"uffkmrqemvvh\":\"dataehwagoh\"}},{\"activity\":\"xtdr\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Failed\",\"Skipped\"],\"\":{\"ewzcjznmwcp\":\"databj\",\"v\":\"dataguaadraufactkahz\",\"eekulfgslqubkwd\":\"datajjziuxxpsh\"}}],\"userProperties\":[{\"name\":\"rds\",\"value\":\"datatujbazpju\"},{\"name\":\"hminyflnorwmduv\",\"value\":\"datapklvxw\"},{\"name\":\"ygdxpgpqchis\",\"value\":\"dataepn\"},{\"name\":\"bjcrxgibbdaxco\",\"value\":\"datafozauorsuk\"}],\"\":{\"vnuuepzl\":\"databqplh\",\"vmnnrw\":\"dataphwzsoldweyuqdu\"}}")
            .toObject(Activity.class);
        Assertions.assertEquals("goo", model.name());
        Assertions.assertEquals("kqfqjbvl", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("iqtqzfavyvnq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("rds", model.userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Activity model = new Activity().withName("goo")
            .withDescription("kqfqjbvl")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("iqtqzfavyvnq")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("qgzsles")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SKIPPED,
                        DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("xtdr")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("rds").withValue("datatujbazpju"),
                new UserProperty().withName("hminyflnorwmduv").withValue("datapklvxw"),
                new UserProperty().withName("ygdxpgpqchis").withValue("dataepn"),
                new UserProperty().withName("bjcrxgibbdaxco").withValue("datafozauorsuk")))
            .withAdditionalProperties(mapOf("type", "hud"));
        model = BinaryData.fromObject(model).toObject(Activity.class);
        Assertions.assertEquals("goo", model.name());
        Assertions.assertEquals("kqfqjbvl", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("iqtqzfavyvnq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("rds", model.userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
