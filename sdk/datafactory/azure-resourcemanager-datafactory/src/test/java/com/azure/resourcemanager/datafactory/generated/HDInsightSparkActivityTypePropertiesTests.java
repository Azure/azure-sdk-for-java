// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightSparkActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightSparkActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightSparkActivityTypeProperties model = BinaryData.fromString(
            "{\"rootPath\":\"datanxrpsty\",\"entryFilePath\":\"dataxidqnvhrbfepf\",\"arguments\":[\"datantaaftdysev\",\"datappxthsfux\",\"datalgoexudnbfoorgtx\",\"datalewhbxvr\"],\"getDebugInfo\":\"Failure\",\"sparkJobLinkedService\":{\"referenceName\":\"kwoommqvzz\",\"parameters\":{\"fh\":\"datawfo\"}},\"className\":\"p\",\"proxyUser\":\"dataljajz\",\"sparkConfig\":{\"odgisfejs\":\"datawarbvblatvbjkqy\",\"wi\":\"datap\",\"jwktiyhiyk\":\"dataujyn\"}}")
            .toObject(HDInsightSparkActivityTypeProperties.class);
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("kwoommqvzz", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("p", model.className());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightSparkActivityTypeProperties model = new HDInsightSparkActivityTypeProperties()
            .withRootPath("datanxrpsty")
            .withEntryFilePath("dataxidqnvhrbfepf")
            .withArguments(Arrays.asList("datantaaftdysev", "datappxthsfux", "datalgoexudnbfoorgtx", "datalewhbxvr"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE)
            .withSparkJobLinkedService(
                new LinkedServiceReference().withReferenceName("kwoommqvzz").withParameters(mapOf("fh", "datawfo")))
            .withClassName("p")
            .withProxyUser("dataljajz")
            .withSparkConfig(mapOf("odgisfejs", "datawarbvblatvbjkqy", "wi", "datap", "jwktiyhiyk", "dataujyn"));
        model = BinaryData.fromObject(model).toObject(HDInsightSparkActivityTypeProperties.class);
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("kwoommqvzz", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("p", model.className());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
