// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightSparkActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightSparkActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightSparkActivityTypeProperties model = BinaryData.fromString(
            "{\"rootPath\":\"datalq\",\"entryFilePath\":\"dataxjdolobtzr\",\"arguments\":[\"datalaurviyntcblpbz\",\"dataqtfbjkbfktelbl\",\"dataungrkjbdaxttoenf\"],\"getDebugInfo\":\"Always\",\"sparkJobLinkedService\":{\"referenceName\":\"ijfywmmqzb\",\"parameters\":{\"ecktcwgnkxjd\":\"datajw\"}},\"className\":\"diundzawotpiakle\",\"proxyUser\":\"dataaiabfntrm\",\"sparkConfig\":{\"fn\":\"datawmfeudcgdljbnfwd\"}}")
            .toObject(HDInsightSparkActivityTypeProperties.class);
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("ijfywmmqzb", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("diundzawotpiakle", model.className());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightSparkActivityTypeProperties model
            = new HDInsightSparkActivityTypeProperties().withRootPath("datalq").withEntryFilePath("dataxjdolobtzr")
                .withArguments(Arrays.asList("datalaurviyntcblpbz", "dataqtfbjkbfktelbl", "dataungrkjbdaxttoenf"))
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
                .withSparkJobLinkedService(new LinkedServiceReference().withReferenceName("ijfywmmqzb")
                    .withParameters(mapOf("ecktcwgnkxjd", "datajw")))
                .withClassName("diundzawotpiakle").withProxyUser("dataaiabfntrm")
                .withSparkConfig(mapOf("fn", "datawmfeudcgdljbnfwd"));
        model = BinaryData.fromObject(model).toObject(HDInsightSparkActivityTypeProperties.class);
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("ijfywmmqzb", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("diundzawotpiakle", model.className());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
