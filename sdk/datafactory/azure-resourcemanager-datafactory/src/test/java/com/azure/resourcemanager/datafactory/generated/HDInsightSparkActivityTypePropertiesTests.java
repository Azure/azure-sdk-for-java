// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightSparkActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightSparkActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightSparkActivityTypeProperties model = BinaryData.fromString(
            "{\"rootPath\":\"databvssjby\",\"entryFilePath\":\"dataeusnncnnq\",\"arguments\":[\"datahs\",\"datazduumpltwu\",\"datafndafrzi\"],\"getDebugInfo\":\"None\",\"sparkJobLinkedService\":{\"referenceName\":\"xzaneaveyvdrulh\",\"parameters\":{\"sqdvmxufrqpaw\":\"datahz\",\"ohze\":\"datajv\",\"mxjd\":\"datauulaeshftlsfwpvf\"}},\"className\":\"txbrj\",\"proxyUser\":\"dataeypuqwdm\",\"sparkConfig\":{\"ornzpr\":\"datafvxfsshocxd\",\"pb\":\"datagmmgtqgzdfjfnree\",\"zfotfoif\":\"datamyuiq\"}}")
            .toObject(HDInsightSparkActivityTypeProperties.class);
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("xzaneaveyvdrulh", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("txbrj", model.className());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightSparkActivityTypeProperties model = new HDInsightSparkActivityTypeProperties()
            .withRootPath("databvssjby")
            .withEntryFilePath("dataeusnncnnq")
            .withArguments(Arrays.asList("datahs", "datazduumpltwu", "datafndafrzi"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
            .withSparkJobLinkedService(new LinkedServiceReference().withReferenceName("xzaneaveyvdrulh")
                .withParameters(mapOf("sqdvmxufrqpaw", "datahz", "ohze", "datajv", "mxjd", "datauulaeshftlsfwpvf")))
            .withClassName("txbrj")
            .withProxyUser("dataeypuqwdm")
            .withSparkConfig(mapOf("ornzpr", "datafvxfsshocxd", "pb", "datagmmgtqgzdfjfnree", "zfotfoif", "datamyuiq"));
        model = BinaryData.fromObject(model).toObject(HDInsightSparkActivityTypeProperties.class);
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("xzaneaveyvdrulh", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("txbrj", model.className());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
