// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightSparkActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class HDInsightSparkActivityTypePropertiesTests {
    @Test
    public void testDeserialize() {
        HDInsightSparkActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"arguments\":[],\"getDebugInfo\":\"Always\",\"sparkJobLinkedService\":{\"referenceName\":\"djhunhghcgawnr\",\"parameters\":{}},\"className\":\"oxsot\",\"sparkConfig\":{}}")
                .toObject(HDInsightSparkActivityTypeProperties.class);
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("djhunhghcgawnr", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("oxsot", model.className());
    }

    @Test
    public void testSerialize() {
        HDInsightSparkActivityTypeProperties model =
            new HDInsightSparkActivityTypeProperties()
                .withArguments(Arrays.asList())
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
                .withSparkJobLinkedService(
                    new LinkedServiceReference().withReferenceName("djhunhghcgawnr").withParameters(mapOf()))
                .withClassName("oxsot")
                .withSparkConfig(mapOf());
        model = BinaryData.fromObject(model).toObject(HDInsightSparkActivityTypeProperties.class);
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("djhunhghcgawnr", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("oxsot", model.className());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
