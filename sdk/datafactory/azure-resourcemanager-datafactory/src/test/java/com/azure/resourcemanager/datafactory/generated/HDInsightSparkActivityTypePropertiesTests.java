// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightSparkActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightSparkActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightSparkActivityTypeProperties model = BinaryData.fromString(
            "{\"rootPath\":\"datadboesxpc\",\"entryFilePath\":\"datagl\",\"arguments\":[\"datah\",\"datacyggflosxtbdgpy\"],\"getDebugInfo\":\"Failure\",\"sparkJobLinkedService\":{\"referenceName\":\"dcglima\",\"parameters\":{\"pxdyyohbbtwpkg\":\"datakypyvztdhoyarcu\",\"ybvxumtxuv\":\"datavuemjcjeja\",\"egqmlv\":\"dataoteidcwrmdqqgt\",\"yfszluzmzgat\":\"dataym\"}},\"className\":\"groejsaerzckmcuk\",\"proxyUser\":\"dataz\",\"sparkConfig\":{\"wbvyraazscxi\":\"datazzrxgqxddvuiur\",\"kmybohax\":\"datajyjcshmtpdvuix\"}}")
            .toObject(HDInsightSparkActivityTypeProperties.class);
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("dcglima", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("groejsaerzckmcuk", model.className());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightSparkActivityTypeProperties model
            = new HDInsightSparkActivityTypeProperties().withRootPath("datadboesxpc")
                .withEntryFilePath("datagl")
                .withArguments(Arrays.asList("datah", "datacyggflosxtbdgpy"))
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE)
                .withSparkJobLinkedService(new LinkedServiceReference().withReferenceName("dcglima")
                    .withParameters(mapOf("pxdyyohbbtwpkg", "datakypyvztdhoyarcu", "ybvxumtxuv", "datavuemjcjeja",
                        "egqmlv", "dataoteidcwrmdqqgt", "yfszluzmzgat", "dataym")))
                .withClassName("groejsaerzckmcuk")
                .withProxyUser("dataz")
                .withSparkConfig(mapOf("wbvyraazscxi", "datazzrxgqxddvuiur", "kmybohax", "datajyjcshmtpdvuix"));
        model = BinaryData.fromObject(model).toObject(HDInsightSparkActivityTypeProperties.class);
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("dcglima", model.sparkJobLinkedService().referenceName());
        Assertions.assertEquals("groejsaerzckmcuk", model.className());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
