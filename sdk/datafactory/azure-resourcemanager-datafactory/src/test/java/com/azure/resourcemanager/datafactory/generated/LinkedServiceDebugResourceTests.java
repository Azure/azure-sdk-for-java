// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.LinkedServiceDebugResource;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LinkedServiceDebugResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LinkedServiceDebugResource model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"type\":\"LinkedService\",\"connectVia\":{\"referenceName\":\"ffm\",\"parameters\":{\"dby\":\"datawfbkgozxwo\",\"zqaclna\":\"datap\"}},\"description\":\"biygnugjknfsmfct\",\"parameters\":{\"jhvsujztczyt\":{\"type\":\"Float\",\"defaultValue\":\"datayilflqoiquvrehmr\"},\"auunfprnjletlx\":{\"type\":\"Bool\",\"defaultValue\":\"dataw\"},\"nlqwzdvpiwhx\":{\"type\":\"Object\",\"defaultValue\":\"datapddouifamowaziyn\"},\"quhuxylrj\":{\"type\":\"SecureString\",\"defaultValue\":\"datadtmaa\"}},\"annotations\":[\"dataygjbmzyospspsh\"],\"\":{\"df\":\"datakyjpmspbps\",\"vczkcnyxrxmunjd\":\"datapyogtieyuj\",\"nkvxlxpaglqi\":\"datavg\",\"khpzvuqdflv\":\"databgkc\"}},\"name\":\"iypfp\"}")
                .toObject(LinkedServiceDebugResource.class);
        Assertions.assertEquals("iypfp", model.name());
        Assertions.assertEquals("ffm", model.properties().connectVia().referenceName());
        Assertions.assertEquals("biygnugjknfsmfct", model.properties().description());
        Assertions.assertEquals(ParameterType.FLOAT, model.properties().parameters().get("jhvsujztczyt").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LinkedServiceDebugResource model =
            new LinkedServiceDebugResource()
                .withName("iypfp")
                .withProperties(
                    new LinkedService()
                        .withConnectVia(
                            new IntegrationRuntimeReference()
                                .withReferenceName("ffm")
                                .withParameters(mapOf("dby", "datawfbkgozxwo", "zqaclna", "datap")))
                        .withDescription("biygnugjknfsmfct")
                        .withParameters(
                            mapOf(
                                "jhvsujztczyt",
                                new ParameterSpecification()
                                    .withType(ParameterType.FLOAT)
                                    .withDefaultValue("datayilflqoiquvrehmr"),
                                "auunfprnjletlx",
                                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataw"),
                                "nlqwzdvpiwhx",
                                new ParameterSpecification()
                                    .withType(ParameterType.OBJECT)
                                    .withDefaultValue("datapddouifamowaziyn"),
                                "quhuxylrj",
                                new ParameterSpecification()
                                    .withType(ParameterType.SECURE_STRING)
                                    .withDefaultValue("datadtmaa")))
                        .withAnnotations(Arrays.asList("dataygjbmzyospspsh"))
                        .withAdditionalProperties(mapOf("type", "LinkedService")));
        model = BinaryData.fromObject(model).toObject(LinkedServiceDebugResource.class);
        Assertions.assertEquals("iypfp", model.name());
        Assertions.assertEquals("ffm", model.properties().connectVia().referenceName());
        Assertions.assertEquals("biygnugjknfsmfct", model.properties().description());
        Assertions.assertEquals(ParameterType.FLOAT, model.properties().parameters().get("jhvsujztczyt").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
