// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.LinkedServiceDebugResource;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LinkedServiceDebugResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LinkedServiceDebugResource model = BinaryData.fromString(
            "{\"properties\":{\"type\":\"xmqeqalh\",\"connectVia\":{\"referenceName\":\"nhg\",\"parameters\":{\"ta\":\"datayynfsvkhgbv\",\"jcpeogkhnmg\":\"dataarfdlpukhpyrnei\",\"xddbhfhpfpaz\":\"dataro\"}},\"description\":\"oywjxhpdulont\",\"parameters\":{\"ehtuevrhr\":{\"type\":\"Bool\",\"defaultValue\":\"dataw\"}},\"annotations\":[\"dataoogwxhnsduugwb\",\"datareur\"],\"\":{\"lnvnafvvkyfedev\":\"datafuarenlvhht\",\"lcqxypokk\":\"databo\",\"zng\":\"dataminqcym\"}},\"name\":\"dxxewuninv\"}")
            .toObject(LinkedServiceDebugResource.class);
        Assertions.assertEquals("dxxewuninv", model.name());
        Assertions.assertEquals("nhg", model.properties().connectVia().referenceName());
        Assertions.assertEquals("oywjxhpdulont", model.properties().description());
        Assertions.assertEquals(ParameterType.BOOL, model.properties().parameters().get("ehtuevrhr").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LinkedServiceDebugResource model
            = new LinkedServiceDebugResource().withName("dxxewuninv")
                .withProperties(new LinkedService()
                    .withConnectVia(new IntegrationRuntimeReference().withReferenceName("nhg")
                        .withParameters(mapOf("ta", "datayynfsvkhgbv", "jcpeogkhnmg", "dataarfdlpukhpyrnei",
                            "xddbhfhpfpaz", "dataro")))
                    .withDescription("oywjxhpdulont")
                    .withParameters(mapOf("ehtuevrhr",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataw")))
                    .withAnnotations(Arrays.asList("dataoogwxhnsduugwb", "datareur"))
                    .withAdditionalProperties(mapOf("type", "xmqeqalh")));
        model = BinaryData.fromObject(model).toObject(LinkedServiceDebugResource.class);
        Assertions.assertEquals("dxxewuninv", model.name());
        Assertions.assertEquals("nhg", model.properties().connectVia().referenceName());
        Assertions.assertEquals("oywjxhpdulont", model.properties().description());
        Assertions.assertEquals(ParameterType.BOOL, model.properties().parameters().get("ehtuevrhr").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
