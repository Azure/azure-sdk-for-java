// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.LinkedServiceDebugResource;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LinkedServiceDebugResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LinkedServiceDebugResource model = BinaryData.fromString(
            "{\"properties\":{\"type\":\"LinkedService\",\"version\":\"gt\",\"connectVia\":{\"referenceName\":\"yujtvczkcnyx\",\"parameters\":{\"glnkvxlxpagl\":\"dataunjdx\",\"hpzvuqdflvoniyp\":\"dataivbgkcv\",\"idibgqjxgpn\":\"datapubcpzgpxtivhjk\",\"kqmhhaowjr\":\"datahgovfgp\"}},\"description\":\"vuporqzdfuydzv\",\"parameters\":{\"xqpswok\":{\"type\":\"Int\",\"defaultValue\":\"datanq\"},\"gdhbe\":{\"type\":\"Bool\",\"defaultValue\":\"datahl\"},\"wiwtglxxhl\":{\"type\":\"Object\",\"defaultValue\":\"datakzsz\"}},\"annotations\":[\"datagpicr\"],\"\":{\"mqgjsxvpq\":\"datahr\",\"bakclacjfrnxous\":\"databfrmbodthsqqgvri\",\"lwvsgm\":\"dataau\",\"xmmkjs\":\"dataohqfzizv\"}},\"name\":\"hnwpzt\"}")
            .toObject(LinkedServiceDebugResource.class);
        Assertions.assertEquals("hnwpzt", model.name());
        Assertions.assertEquals("gt", model.properties().version());
        Assertions.assertEquals("yujtvczkcnyx", model.properties().connectVia().referenceName());
        Assertions.assertEquals("vuporqzdfuydzv", model.properties().description());
        Assertions.assertEquals(ParameterType.INT, model.properties().parameters().get("xqpswok").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LinkedServiceDebugResource model = new LinkedServiceDebugResource().withName("hnwpzt")
            .withProperties(new LinkedService().withVersion("gt")
                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("yujtvczkcnyx")
                    .withParameters(mapOf("glnkvxlxpagl", "dataunjdx", "hpzvuqdflvoniyp", "dataivbgkcv", "idibgqjxgpn",
                        "datapubcpzgpxtivhjk", "kqmhhaowjr", "datahgovfgp")))
                .withDescription("vuporqzdfuydzv")
                .withParameters(mapOf("xqpswok",
                    new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datanq"), "gdhbe",
                    new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datahl"), "wiwtglxxhl",
                    new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datakzsz")))
                .withAnnotations(Arrays.asList("datagpicr"))
                .withAdditionalProperties(mapOf("type", "LinkedService")));
        model = BinaryData.fromObject(model).toObject(LinkedServiceDebugResource.class);
        Assertions.assertEquals("hnwpzt", model.name());
        Assertions.assertEquals("gt", model.properties().version());
        Assertions.assertEquals("yujtvczkcnyx", model.properties().connectVia().referenceName());
        Assertions.assertEquals("vuporqzdfuydzv", model.properties().description());
        Assertions.assertEquals(ParameterType.INT, model.properties().parameters().get("xqpswok").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
