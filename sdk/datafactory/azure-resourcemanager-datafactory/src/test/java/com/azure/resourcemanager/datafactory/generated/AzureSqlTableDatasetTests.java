// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSqlTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSqlTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSqlTableDataset model = BinaryData.fromString(
            "{\"type\":\"AzureSqlTable\",\"typeProperties\":{\"tableName\":\"datagikesmkwtzg\",\"schema\":\"dataagjhxerxlobkdbtq\",\"table\":\"datammniiqyholhjnskb\"},\"description\":\"icnq\",\"structure\":\"datact\",\"schema\":\"datapblxkrkqgvxrkt\",\"linkedServiceName\":{\"referenceName\":\"cjigcwtspa\",\"parameters\":{\"yy\":\"dataxasevchefpgee\"}},\"parameters\":{\"emwcgimmrim\":{\"type\":\"Int\",\"defaultValue\":\"datal\"},\"ahdkmbjsmihrij\":{\"type\":\"Float\",\"defaultValue\":\"datasqqlonbzaow\"},\"lkvbgukbsv\":{\"type\":\"String\",\"defaultValue\":\"datafsjwfcz\"},\"lxa\":{\"type\":\"Object\",\"defaultValue\":\"dataotygnbknhjg\"}},\"annotations\":[\"dataffaspsdzkucsz\"],\"folder\":{\"name\":\"oaqipmnxclfrs\"},\"\":{\"vwvpuofddtbfme\":\"datanm\",\"oyqxfvgyxz\":\"datajcnginxdvm\",\"zujsjirkrp\":\"dataxynofxlttxoqxtd\",\"tkykpaxnlsfgnys\":\"datakcjhmmofbnivd\"}}")
            .toObject(AzureSqlTableDataset.class);
        Assertions.assertEquals("icnq", model.description());
        Assertions.assertEquals("cjigcwtspa", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("emwcgimmrim").type());
        Assertions.assertEquals("oaqipmnxclfrs", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSqlTableDataset model = new AzureSqlTableDataset().withDescription("icnq")
            .withStructure("datact")
            .withSchema("datapblxkrkqgvxrkt")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("cjigcwtspa")
                .withParameters(mapOf("yy", "dataxasevchefpgee")))
            .withParameters(mapOf("emwcgimmrim",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datal"), "ahdkmbjsmihrij",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datasqqlonbzaow"),
                "lkvbgukbsv",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datafsjwfcz"), "lxa",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataotygnbknhjg")))
            .withAnnotations(Arrays.asList("dataffaspsdzkucsz"))
            .withFolder(new DatasetFolder().withName("oaqipmnxclfrs"))
            .withTableName("datagikesmkwtzg")
            .withSchemaTypePropertiesSchema("dataagjhxerxlobkdbtq")
            .withTable("datammniiqyholhjnskb");
        model = BinaryData.fromObject(model).toObject(AzureSqlTableDataset.class);
        Assertions.assertEquals("icnq", model.description());
        Assertions.assertEquals("cjigcwtspa", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("emwcgimmrim").type());
        Assertions.assertEquals("oaqipmnxclfrs", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
