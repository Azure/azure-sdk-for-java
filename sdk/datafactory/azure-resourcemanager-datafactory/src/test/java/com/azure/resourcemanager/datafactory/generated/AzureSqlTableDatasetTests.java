// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSqlTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSqlTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSqlTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"AzureSqlTable\",\"typeProperties\":{\"tableName\":\"databs\",\"schema\":\"datalonbzaowcahdkmb\",\"table\":\"datamihrijezbfsj\"},\"description\":\"czglkvbgukbsvb\",\"structure\":\"dataotygnbknhjg\",\"schema\":\"dataxaxw\",\"linkedServiceName\":{\"referenceName\":\"ffaspsdzkucsz\",\"parameters\":{\"zrn\":\"dataoaqipmnxclfrs\",\"wvpu\":\"datau\",\"n\":\"datafddtbfmekjcng\",\"aoy\":\"datadv\"}},\"parameters\":{\"nofxlttxoqx\":{\"type\":\"SecureString\",\"defaultValue\":\"datayxzmx\"},\"kcjhmmofbnivd\":{\"type\":\"Float\",\"defaultValue\":\"datazujsjirkrp\"},\"caccptbzetxyg\":{\"type\":\"SecureString\",\"defaultValue\":\"dataykpaxnlsfgny\"},\"eoxmpzzw\":{\"type\":\"Int\",\"defaultValue\":\"dataceecvjwyu\"}},\"annotations\":[\"datardvhaztkxbi\",\"datazfgxmbry\"],\"folder\":{\"name\":\"ibio\"},\"\":{\"wdrtxtfdaglmrco\":\"datasykqfd\",\"hubymfp\":\"datazzertkounzsiy\"}}")
                .toObject(AzureSqlTableDataset.class);
        Assertions.assertEquals("czglkvbgukbsvb", model.description());
        Assertions.assertEquals("ffaspsdzkucsz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("nofxlttxoqx").type());
        Assertions.assertEquals("ibio", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSqlTableDataset model =
            new AzureSqlTableDataset()
                .withDescription("czglkvbgukbsvb")
                .withStructure("dataotygnbknhjg")
                .withSchema("dataxaxw")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("ffaspsdzkucsz")
                        .withParameters(
                            mapOf(
                                "zrn",
                                "dataoaqipmnxclfrs",
                                "wvpu",
                                "datau",
                                "n",
                                "datafddtbfmekjcng",
                                "aoy",
                                "datadv")))
                .withParameters(
                    mapOf(
                        "nofxlttxoqx",
                        new ParameterSpecification()
                            .withType(ParameterType.SECURE_STRING)
                            .withDefaultValue("datayxzmx"),
                        "kcjhmmofbnivd",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datazujsjirkrp"),
                        "caccptbzetxyg",
                        new ParameterSpecification()
                            .withType(ParameterType.SECURE_STRING)
                            .withDefaultValue("dataykpaxnlsfgny"),
                        "eoxmpzzw",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataceecvjwyu")))
                .withAnnotations(Arrays.asList("datardvhaztkxbi", "datazfgxmbry"))
                .withFolder(new DatasetFolder().withName("ibio"))
                .withTableName("databs")
                .withSchemaTypePropertiesSchema("datalonbzaowcahdkmb")
                .withTable("datamihrijezbfsj");
        model = BinaryData.fromObject(model).toObject(AzureSqlTableDataset.class);
        Assertions.assertEquals("czglkvbgukbsvb", model.description());
        Assertions.assertEquals("ffaspsdzkucsz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("nofxlttxoqx").type());
        Assertions.assertEquals("ibio", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
