// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.FormatReadSettings;
import com.azure.resourcemanager.datafactory.models.GetMetadataActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GetMetadataActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GetMetadataActivity model = BinaryData.fromString(
            "{\"type\":\"GetMetadata\",\"typeProperties\":{\"dataset\":{\"referenceName\":\"mosqhnwb\",\"parameters\":{\"hixcivjokauj\":\"datafsqruyqaqemozj\",\"wvirbshyulkhep\":\"datapclmkeswtkhfcnce\",\"bxqzczcc\":\"datamegczcpoydaifx\"}},\"fieldList\":[\"dataig\",\"datazpl\",\"dataaoiid\"],\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"datasqdrugvanp\",\"disableMetricsCollection\":\"dataqrwlseeuy\",\"\":{\"pvytrzsqbckqgte\":\"datawovgwqzzugsbwqro\",\"kgyuviqeskindgm\":\"datainznkvyicj\",\"if\":\"dataebuvyuzzwphu\",\"ueikwvco\":\"dataxrnsyv\"}},\"formatSettings\":{\"type\":\"FormatReadSettings\",\"\":{\"kinutdhbmizb\":\"datamxcthrrx\"}}},\"linkedServiceName\":{\"referenceName\":\"jezufxuugvd\",\"parameters\":{\"kbmvnvfgwgo\":\"dataoycpystcmavl\",\"zoxhazafmq\":\"datafdyk\",\"ammpeakdhebzquq\":\"databifpc\",\"fjwm\":\"datagjxklojdydha\"}},\"policy\":{\"timeout\":\"datagjihnxoxjghumv\",\"retry\":\"databhogllvfealcju\",\"retryIntervalInSeconds\":1732670055,\"secureInput\":false,\"secureOutput\":false,\"\":{\"nxsyh\":\"datanovbgdbao\",\"inrymzlq\":\"datailqojdmzejcpzzq\",\"mvg\":\"datarcivxaq\"}},\"name\":\"qtkcvnyikyexwfsi\",\"description\":\"x\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"ztns\",\"dependencyConditions\":[\"Failed\"],\"\":{\"h\":\"datakklz\",\"tcxhpntewvfvs\":\"datavtivefsr\",\"dervnnfieaqbvg\":\"datadmcoxobrv\",\"ubqemrxmr\":\"dataehggeeagbrslbzc\"}},{\"activity\":\"be\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\"],\"\":{\"vgagdnzvo\":\"datawqnwxohb\",\"zcpifasifdtiocsf\":\"datarnqnurunky\",\"borynmadtyhm\":\"datacyyicascvcmthu\"}},{\"activity\":\"phoem\",\"dependencyConditions\":[\"Completed\",\"Completed\"],\"\":{\"bqij\":\"dataphncf\",\"xhmtxpxdtmrwjk\":\"dataqfoatqnhr\",\"bkdhwadnccunrviq\":\"datatiznvijdtmjy\",\"sliou\":\"dataz\"}}],\"userProperties\":[{\"name\":\"xqnpnpggbu\",\"value\":\"datajw\"},{\"name\":\"rgq\",\"value\":\"datadnmuirtkqztkx\"},{\"name\":\"hixfuuzaczmejf\",\"value\":\"dataiegpdhityt\"}],\"\":{\"chbvejgfx\":\"datawdskocmqhzys\",\"cyngdgka\":\"datajqevmzhk\",\"hrlb\":\"datanxy\"}}")
            .toObject(GetMetadataActivity.class);
        Assertions.assertEquals("qtkcvnyikyexwfsi", model.name());
        Assertions.assertEquals("x", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("ztns", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("xqnpnpggbu", model.userProperties().get(0).name());
        Assertions.assertEquals("jezufxuugvd", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1732670055, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("mosqhnwb", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GetMetadataActivity model = new GetMetadataActivity().withName("qtkcvnyikyexwfsi")
            .withDescription("x")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("ztns")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("be")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("phoem")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("xqnpnpggbu").withValue("datajw"),
                new UserProperty().withName("rgq").withValue("datadnmuirtkqztkx"),
                new UserProperty().withName("hixfuuzaczmejf").withValue("dataiegpdhityt")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("jezufxuugvd")
                .withParameters(mapOf("kbmvnvfgwgo", "dataoycpystcmavl", "zoxhazafmq", "datafdyk", "ammpeakdhebzquq",
                    "databifpc", "fjwm", "datagjxklojdydha")))
            .withPolicy(new ActivityPolicy().withTimeout("datagjihnxoxjghumv")
                .withRetry("databhogllvfealcju")
                .withRetryIntervalInSeconds(1732670055)
                .withSecureInput(false)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withDataset(new DatasetReference().withReferenceName("mosqhnwb")
                .withParameters(mapOf("hixcivjokauj", "datafsqruyqaqemozj", "wvirbshyulkhep", "datapclmkeswtkhfcnce",
                    "bxqzczcc", "datamegczcpoydaifx")))
            .withFieldList(Arrays.asList("dataig", "datazpl", "dataaoiid"))
            .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("datasqdrugvanp")
                .withDisableMetricsCollection("dataqrwlseeuy")
                .withAdditionalProperties(mapOf("type", "StoreReadSettings")))
            .withFormatSettings(new FormatReadSettings().withAdditionalProperties(mapOf("type", "FormatReadSettings")));
        model = BinaryData.fromObject(model).toObject(GetMetadataActivity.class);
        Assertions.assertEquals("qtkcvnyikyexwfsi", model.name());
        Assertions.assertEquals("x", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("ztns", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("xqnpnpggbu", model.userProperties().get(0).name());
        Assertions.assertEquals("jezufxuugvd", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1732670055, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("mosqhnwb", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
