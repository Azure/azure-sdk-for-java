// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.FormatReadSettings;
import com.azure.resourcemanager.datafactory.models.GetMetadataActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GetMetadataActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GetMetadataActivity model = BinaryData.fromString(
            "{\"type\":\"GetMetadata\",\"typeProperties\":{\"dataset\":{\"referenceName\":\"khe\",\"parameters\":{\"fxmbxqzczcc\":\"dataegczcpoyda\",\"aoiid\":\"datalpigpzpl\",\"gvanpjv\":\"dataknsqdr\",\"gwq\":\"datarwlseeuyxxrwo\"}},\"fieldList\":[\"datagsbwq\",\"dataotpvyt\",\"datazsqbckq\",\"datateminzn\"],\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"dataicjzkgyuv\",\"disableMetricsCollection\":\"dataeskindgmk\",\"\":{\"lxrnsyvmueik\":\"datavyuzzwphuli\",\"im\":\"datavcogq\"}},\"formatSettings\":{\"type\":\"FormatReadSettings\",\"\":{\"nu\":\"datarrxrk\",\"ufxuug\":\"datadhbmizbevje\",\"cmavln\":\"datadbpjoycpys\"}}},\"linkedServiceName\":{\"referenceName\":\"mvnvfg\",\"parameters\":{\"kezoxhazafmq\":\"dataxfd\",\"ammpeakdhebzquq\":\"databifpc\"}},\"policy\":{\"timeout\":\"dataxklojd\",\"retry\":\"datahajfj\",\"retryIntervalInSeconds\":1912893320,\"secureInput\":false,\"secureOutput\":true,\"\":{\"o\":\"datanxoxjghumvptb\",\"cjuzzzil\":\"datallvfea\",\"novbgdbao\":\"datauc\",\"ilqojdmzejcpzzq\":\"datanxsyh\"}},\"name\":\"inrymzlq\",\"description\":\"civxaqzmvgxqt\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"ye\",\"dependencyConditions\":[\"Completed\",\"Succeeded\"],\"\":{\"utesqkklzyhav\":\"datagxelzuvdyztn\",\"ltc\":\"dataivefs\",\"vsidmcoxobrvzder\":\"datahpntewv\"}},{\"activity\":\"nnfi\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"brslbzcyubqemrxm\":\"dataguehggeea\",\"wwqnwxohbmvg\":\"dataibexaxu\",\"runkyuzcpi\":\"datagdnzvohrnqn\",\"fdtiocs\":\"dataas\"}}],\"userProperties\":[{\"name\":\"yyicascv\",\"value\":\"datamthukboryn\"},{\"name\":\"adtyhmoph\",\"value\":\"dataemhvnqwdphncftbq\"},{\"name\":\"jeqfoatqnhrhxhmt\",\"value\":\"datapxdtmrwjknt\"},{\"name\":\"znvijdtmjybbkdh\",\"value\":\"dataadnccunrviqrzw\"}],\"\":{\"exqnpnpggbua\":\"dataouc\",\"qztkxfhixfuuzacz\":\"datawrrgqudnmuirt\",\"d\":\"dataejfiieg\",\"qhzyswchbvejg\":\"dataitytketwdskoc\"}}")
            .toObject(GetMetadataActivity.class);
        Assertions.assertEquals("inrymzlq", model.name());
        Assertions.assertEquals("civxaqzmvgxqt", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("ye", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("yyicascv", model.userProperties().get(0).name());
        Assertions.assertEquals("mvnvfg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1912893320, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("khe", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GetMetadataActivity model = new GetMetadataActivity().withName("inrymzlq")
            .withDescription("civxaqzmvgxqt")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("ye")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("nnfi")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("yyicascv").withValue("datamthukboryn"),
                new UserProperty().withName("adtyhmoph").withValue("dataemhvnqwdphncftbq"),
                new UserProperty().withName("jeqfoatqnhrhxhmt").withValue("datapxdtmrwjknt"),
                new UserProperty().withName("znvijdtmjybbkdh").withValue("dataadnccunrviqrzw")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("mvnvfg")
                .withParameters(mapOf("kezoxhazafmq", "dataxfd", "ammpeakdhebzquq", "databifpc")))
            .withPolicy(new ActivityPolicy().withTimeout("dataxklojd")
                .withRetry("datahajfj")
                .withRetryIntervalInSeconds(1912893320)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withDataset(new DatasetReference().withReferenceName("khe")
                .withParameters(mapOf("fxmbxqzczcc", "dataegczcpoyda", "aoiid", "datalpigpzpl", "gvanpjv", "dataknsqdr",
                    "gwq", "datarwlseeuyxxrwo")))
            .withFieldList(Arrays.asList("datagsbwq", "dataotpvyt", "datazsqbckq", "datateminzn"))
            .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("dataicjzkgyuv")
                .withDisableMetricsCollection("dataeskindgmk")
                .withAdditionalProperties(mapOf("type", "StoreReadSettings")))
            .withFormatSettings(new FormatReadSettings().withAdditionalProperties(mapOf("type", "FormatReadSettings")));
        model = BinaryData.fromObject(model).toObject(GetMetadataActivity.class);
        Assertions.assertEquals("inrymzlq", model.name());
        Assertions.assertEquals("civxaqzmvgxqt", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("ye", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("yyicascv", model.userProperties().get(0).name());
        Assertions.assertEquals("mvnvfg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1912893320, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("khe", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
