// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.FormatReadSettings;
import com.azure.resourcemanager.datafactory.models.GetMetadataActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GetMetadataActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GetMetadataActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"GetMetadata\",\"typeProperties\":{\"dataset\":{\"referenceName\":\"ljajz\",\"parameters\":{\"odgisfejs\":\"datawarbvblatvbjkqy\",\"wi\":\"datap\",\"jwktiyhiyk\":\"dataujyn\"}},\"fieldList\":[\"dataaodifupdafu\",\"datatwopsjrqhgnrxxh\",\"datawtrxpwuxy\",\"datapd\"],\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"datahgbjukaswgvoa\",\"disableMetricsCollection\":\"datatdt\",\"\":{\"qdliptefdvj\":\"dataafhhiykatjsebcuy\",\"ethyhbnoyexu\":\"databemrjbovquxpdpr\"}},\"formatSettings\":{\"type\":\"FormatReadSettings\",\"\":{\"teklgiqo\":\"datazxo\",\"umo\":\"databl\",\"jmtpgkybdktyvr\":\"datauzxwmw\",\"psc\":\"datamrqbeqzhnpx\"}}},\"linkedServiceName\":{\"referenceName\":\"ygajqmpf\",\"parameters\":{\"nygathv\":\"datauwefz\",\"kwk\":\"datawhrjakdyqxjpzy\"}},\"policy\":{\"timeout\":\"datapbybh\",\"retry\":\"datailbsdgahehk\",\"retryIntervalInSeconds\":1450508499,\"secureInput\":false,\"secureOutput\":false,\"\":{\"phbcurth\":\"datan\"}},\"name\":\"bgavwbqjeto\",\"description\":\"jayvuymib\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"u\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Failed\"],\"\":{\"hltxtpgqqinkktay\":\"datajhmldvnoxj\",\"klx\":\"datafgbcwawblkkccixs\"}},{\"activity\":\"sqhczokuncqqhbjm\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Skipped\",\"Skipped\"],\"\":{\"yfctfsdhmrughm\":\"dataeqzcbqvjejnwwq\"}},{\"activity\":\"ybbhktnuzorxati\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Succeeded\",\"Failed\"],\"\":{\"emcghorrjaw\":\"datautvitislcfxsgjdi\",\"cfnzpybrflqv\":\"dataczbbvrmvhtmzwgi\"}},{\"activity\":\"vl\",\"dependencyConditions\":[\"Failed\",\"Skipped\"],\"\":{\"qnc\":\"datahupvxthpsugebgb\",\"xypxmke\":\"dataiiwuufofgfqge\",\"fdsogl\":\"datajonasjdaxe\"}}],\"userProperties\":[{\"name\":\"wduwn\",\"value\":\"dataaifwogqwdxtpmfa\"}],\"\":{\"msfnigjoxhz\":\"datazznnk\",\"jyfbutqlotojfvba\":\"datamgmc\",\"jloehhhkxlquupb\":\"dataqwj\",\"eptejryvvuktc\":\"datahuinjymnq\"}}")
                .toObject(GetMetadataActivity.class);
        Assertions.assertEquals("bgavwbqjeto", model.name());
        Assertions.assertEquals("jayvuymib", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("u", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wduwn", model.userProperties().get(0).name());
        Assertions.assertEquals("ygajqmpf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1450508499, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("ljajz", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GetMetadataActivity model =
            new GetMetadataActivity()
                .withName("bgavwbqjeto")
                .withDescription("jayvuymib")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("u")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.FAILED,
                                            DependencyCondition.FAILED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("sqhczokuncqqhbjm")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("ybbhktnuzorxati")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("vl")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays.asList(new UserProperty().withName("wduwn").withValue("dataaifwogqwdxtpmfa")))
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("ygajqmpf")
                        .withParameters(mapOf("nygathv", "datauwefz", "kwk", "datawhrjakdyqxjpzy")))
                .withPolicy(
                    new ActivityPolicy()
                        .withTimeout("datapbybh")
                        .withRetry("datailbsdgahehk")
                        .withRetryIntervalInSeconds(1450508499)
                        .withSecureInput(false)
                        .withSecureOutput(false)
                        .withAdditionalProperties(mapOf()))
                .withDataset(
                    new DatasetReference()
                        .withReferenceName("ljajz")
                        .withParameters(
                            mapOf("odgisfejs", "datawarbvblatvbjkqy", "wi", "datap", "jwktiyhiyk", "dataujyn")))
                .withFieldList(Arrays.asList("dataaodifupdafu", "datatwopsjrqhgnrxxh", "datawtrxpwuxy", "datapd"))
                .withStoreSettings(
                    new StoreReadSettings()
                        .withMaxConcurrentConnections("datahgbjukaswgvoa")
                        .withDisableMetricsCollection("datatdt")
                        .withAdditionalProperties(mapOf("type", "StoreReadSettings")))
                .withFormatSettings(
                    new FormatReadSettings().withAdditionalProperties(mapOf("type", "FormatReadSettings")));
        model = BinaryData.fromObject(model).toObject(GetMetadataActivity.class);
        Assertions.assertEquals("bgavwbqjeto", model.name());
        Assertions.assertEquals("jayvuymib", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("u", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wduwn", model.userProperties().get(0).name());
        Assertions.assertEquals("ygajqmpf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1450508499, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("ljajz", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
