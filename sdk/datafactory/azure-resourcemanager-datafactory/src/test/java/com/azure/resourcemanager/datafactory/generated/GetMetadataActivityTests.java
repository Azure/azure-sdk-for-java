// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.FormatReadSettings;
import com.azure.resourcemanager.datafactory.models.GetMetadataActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GetMetadataActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GetMetadataActivity model = BinaryData.fromString(
            "{\"type\":\"GetMetadata\",\"typeProperties\":{\"dataset\":{\"referenceName\":\"uqjpgbiyaxgatzf\",\"parameters\":{\"dkdcvowaslswwg\":\"datahpvbmbfixcuamd\",\"vhfdezomykjbl\":\"datayvopotiefxhaqq\",\"vmymfaiw\":\"dataypuon\"}},\"fieldList\":[\"dataphaddsxsqcvab\",\"datazdaroedwipauc\",\"dataetypzziav\"],\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"datakv\",\"disableMetricsCollection\":\"datazngh\",\"\":{\"cizdae\":\"dataeuezyfldjkkv\",\"b\":\"datan\"}},\"formatSettings\":{\"type\":\"FormatReadSettings\",\"\":{\"hrspzkvoknmered\":\"datauqqbafr\",\"nfepixfdojxbyxf\":\"dataoessuwkcnhdecxbi\"}}},\"linkedServiceName\":{\"referenceName\":\"ntpksbtige\",\"parameters\":{\"q\":\"dataidqzflasvah\",\"o\":\"dataojdnmrxjlumrzfd\",\"qlrmbgiaoxpfko\":\"datankadanl\"}},\"policy\":{\"timeout\":\"dataxxezur\",\"retry\":\"dataucnssp\",\"retryIntervalInSeconds\":1606266011,\"secureInput\":false,\"secureOutput\":true,\"\":{\"bgczk\":\"dataklbbr\",\"lptdk\":\"datam\"}},\"name\":\"ib\",\"description\":\"ivedshuxlhecztmw\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"krjeys\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Failed\",\"Completed\"],\"\":{\"yoouvqpc\":\"datahpyediudskcad\",\"duzzyxlyuw\":\"datarbfa\",\"bfgmgho\":\"datawzufmyanectf\"}},{\"activity\":\"ox\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"kcvclq\":\"datarvqcxr\",\"dsyyzmfpgzljgr\":\"dataibpmfnyzsihkkktl\",\"basxapceg\":\"datafictejm\"}},{\"activity\":\"cduf\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Completed\"],\"\":{\"hxgxqdmvfdocjafc\":\"datanneynmgvqysgh\"}},{\"activity\":\"iddnktutwczd\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Skipped\",\"Completed\"],\"\":{\"obsjudpee\":\"datahyqv\"}}],\"userProperties\":[{\"name\":\"wverhtyco\",\"value\":\"datagtsrrle\"},{\"name\":\"pobmfmdsi\",\"value\":\"datall\"},{\"name\":\"qgluhr\",\"value\":\"dataimojozhdcptxxb\"}],\"\":{\"eowepv\":\"databzcmwnyudcv\"}}")
            .toObject(GetMetadataActivity.class);
        Assertions.assertEquals("ib", model.name());
        Assertions.assertEquals("ivedshuxlhecztmw", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("krjeys", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wverhtyco", model.userProperties().get(0).name());
        Assertions.assertEquals("ntpksbtige", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1606266011, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("uqjpgbiyaxgatzf", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GetMetadataActivity model = new GetMetadataActivity().withName("ib")
            .withDescription("ivedshuxlhecztmw")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("krjeys")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED,
                        DependencyCondition.FAILED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("ox")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("cduf")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED,
                        DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("iddnktutwczd")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED,
                        DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("wverhtyco").withValue("datagtsrrle"),
                new UserProperty().withName("pobmfmdsi").withValue("datall"),
                new UserProperty().withName("qgluhr").withValue("dataimojozhdcptxxb")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ntpksbtige")
                .withParameters(
                    mapOf("q", "dataidqzflasvah", "o", "dataojdnmrxjlumrzfd", "qlrmbgiaoxpfko", "datankadanl")))
            .withPolicy(new ActivityPolicy().withTimeout("dataxxezur")
                .withRetry("dataucnssp")
                .withRetryIntervalInSeconds(1606266011)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withDataset(new DatasetReference().withReferenceName("uqjpgbiyaxgatzf")
                .withParameters(mapOf("dkdcvowaslswwg", "datahpvbmbfixcuamd", "vhfdezomykjbl", "datayvopotiefxhaqq",
                    "vmymfaiw", "dataypuon")))
            .withFieldList(Arrays.asList("dataphaddsxsqcvab", "datazdaroedwipauc", "dataetypzziav"))
            .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("datakv")
                .withDisableMetricsCollection("datazngh")
                .withAdditionalProperties(mapOf("type", "StoreReadSettings")))
            .withFormatSettings(new FormatReadSettings().withAdditionalProperties(mapOf("type", "FormatReadSettings")));
        model = BinaryData.fromObject(model).toObject(GetMetadataActivity.class);
        Assertions.assertEquals("ib", model.name());
        Assertions.assertEquals("ivedshuxlhecztmw", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("krjeys", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wverhtyco", model.userProperties().get(0).name());
        Assertions.assertEquals("ntpksbtige", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1606266011, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("uqjpgbiyaxgatzf", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
