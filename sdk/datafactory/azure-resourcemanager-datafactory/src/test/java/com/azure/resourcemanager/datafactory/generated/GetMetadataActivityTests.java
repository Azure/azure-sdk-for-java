// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.FormatReadSettings;
import com.azure.resourcemanager.datafactory.models.GetMetadataActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GetMetadataActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GetMetadataActivity model = BinaryData.fromString(
            "{\"type\":\"GetMetadata\",\"typeProperties\":{\"dataset\":{\"referenceName\":\"cth\",\"parameters\":{\"wqpgbticni\":\"datarxmxqskemtajjfm\",\"vwalhawoptiq\":\"dataubocmjiib\",\"avtapcxsmap\":\"datau\",\"kuemcbtumtnrcv\":\"datadmmwylrvztaelpux\"}},\"fieldList\":[\"datayqexujlleweeg\",\"dataqbsythycdckcpfom\",\"datagfwxthrcmgsimgo\"],\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"datahjgckkbn\",\"disableMetricsCollection\":\"dataenyehmwzgf\",\"\":{\"chzuap\":\"dataeolorosahg\",\"idyjffpu\":\"datahfhuuizyeyfki\",\"eymlctnnsjcuf\":\"dataykyvbp\",\"glxhb\":\"datajvaxuvazzptldaa\"}},\"formatSettings\":{\"type\":\"FormatReadSettings\",\"\":{\"htykebtvn\":\"datawinle\",\"riehooxqkc\":\"datadcclpbhntoiviue\",\"kyiqjtx\":\"datayydtnl\"}}},\"linkedServiceName\":{\"referenceName\":\"grf\",\"parameters\":{\"oczsrypfviiwjjqp\":\"datakjotvhiv\"}},\"policy\":{\"timeout\":\"dataxkeygmqnuyusnh\",\"retry\":\"dataekhfdlbcucwfc\",\"retryIntervalInSeconds\":420951717,\"secureInput\":true,\"secureOutput\":true,\"\":{\"pgllsrran\":\"dataldavozmibtkvf\",\"rro\":\"dataxxwt\",\"yldtt\":\"datalkgzczjwizrulrk\",\"myc\":\"datagcpqmkpobenaahdj\"}},\"name\":\"tvpeirhstwpbvw\",\"description\":\"hpphjimoecqpqk\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"zxdlrjspxoty\",\"dependencyConditions\":[\"Failed\"],\"\":{\"llcdqvunvnggqacf\":\"datafejiurldsft\",\"dzruuscbs\":\"dataruwqbe\"}},{\"activity\":\"tjdioevifzqqs\",\"dependencyConditions\":[\"Failed\"],\"\":{\"jxsofsiritp\":\"datappphwvduuzpiooa\",\"nrl\":\"dataqp\",\"v\":\"dataoux\",\"cjnfyubc\":\"dataz\"}},{\"activity\":\"wnfnqqnumpnav\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Failed\",\"Succeeded\"],\"\":{\"nbofeucctppbgzf\":\"datafpvbsllyoriad\"}}],\"userProperties\":[{\"name\":\"lsk\",\"value\":\"datavvwd\"},{\"name\":\"trqsobusurxv\",\"value\":\"datadxlbsnskcksf\"},{\"name\":\"tknywxpmef\",\"value\":\"datanccbvchozkmifyxd\"}],\"\":{\"roidhbulvkis\":\"databisfnbtqdrkwri\"}}")
            .toObject(GetMetadataActivity.class);
        Assertions.assertEquals("tvpeirhstwpbvw", model.name());
        Assertions.assertEquals("hpphjimoecqpqk", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("zxdlrjspxoty", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("lsk", model.userProperties().get(0).name());
        Assertions.assertEquals("grf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(420951717, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("cth", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GetMetadataActivity model = new GetMetadataActivity().withName("tvpeirhstwpbvw")
            .withDescription("hpphjimoecqpqk")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("zxdlrjspxoty")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("tjdioevifzqqs")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("wnfnqqnumpnav")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SKIPPED,
                        DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("lsk").withValue("datavvwd"),
                new UserProperty().withName("trqsobusurxv").withValue("datadxlbsnskcksf"),
                new UserProperty().withName("tknywxpmef").withValue("datanccbvchozkmifyxd")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("grf")
                .withParameters(mapOf("oczsrypfviiwjjqp", "datakjotvhiv")))
            .withPolicy(new ActivityPolicy().withTimeout("dataxkeygmqnuyusnh")
                .withRetry("dataekhfdlbcucwfc")
                .withRetryIntervalInSeconds(420951717)
                .withSecureInput(true)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withDataset(new DatasetReference().withReferenceName("cth")
                .withParameters(mapOf("wqpgbticni", "datarxmxqskemtajjfm", "vwalhawoptiq", "dataubocmjiib",
                    "avtapcxsmap", "datau", "kuemcbtumtnrcv", "datadmmwylrvztaelpux")))
            .withFieldList(Arrays.asList("datayqexujlleweeg", "dataqbsythycdckcpfom", "datagfwxthrcmgsimgo"))
            .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("datahjgckkbn")
                .withDisableMetricsCollection("dataenyehmwzgf")
                .withAdditionalProperties(mapOf("type", "StoreReadSettings")))
            .withFormatSettings(new FormatReadSettings().withAdditionalProperties(mapOf("type", "FormatReadSettings")));
        model = BinaryData.fromObject(model).toObject(GetMetadataActivity.class);
        Assertions.assertEquals("tvpeirhstwpbvw", model.name());
        Assertions.assertEquals("hpphjimoecqpqk", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("zxdlrjspxoty", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("lsk", model.userProperties().get(0).name());
        Assertions.assertEquals("grf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(420951717, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("cth", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
