// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.FormatReadSettings;
import com.azure.resourcemanager.datafactory.models.GetMetadataActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class GetMetadataActivityTests {
    @Test
    public void testDeserialize() {
        GetMetadataActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"GetMetadata\",\"typeProperties\":{\"dataset\":{\"referenceName\":\"xzznnui\",\"parameters\":{}},\"fieldList\":[],\"storeSettings\":{\"type\":\"StoreReadSettings\",\"\":{}},\"formatSettings\":{\"type\":\"FormatReadSettings\",\"\":{}}},\"linkedServiceName\":{\"referenceName\":\"wrjmwv\",\"parameters\":{}},\"policy\":{\"retryIntervalInSeconds\":901121698,\"secureInput\":false,\"secureOutput\":false,\"\":{}},\"name\":\"ldeko\",\"description\":\"gxieqfkyfhi\",\"dependsOn\":[{\"activity\":\"aqupbyynvskp\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Failed\",\"Skipped\"],\"\":{}},{\"activity\":\"exmj\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Failed\"],\"\":{}},{\"activity\":\"kqmt\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Succeeded\"],\"\":{}},{\"activity\":\"crpilgftrq\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Succeeded\"],\"\":{}}],\"userProperties\":[{\"name\":\"imldahlfxlmu\"},{\"name\":\"fmuad\"}],\"\":{}}")
                .toObject(GetMetadataActivity.class);
        Assertions.assertEquals("ldeko", model.name());
        Assertions.assertEquals("gxieqfkyfhi", model.description());
        Assertions.assertEquals("aqupbyynvskp", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("imldahlfxlmu", model.userProperties().get(0).name());
        Assertions.assertEquals("wrjmwv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(901121698, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("xzznnui", model.dataset().referenceName());
    }

    @Test
    public void testSerialize() {
        GetMetadataActivity model =
            new GetMetadataActivity()
                .withName("ldeko")
                .withDescription("gxieqfkyfhi")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("aqupbyynvskp")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.FAILED,
                                            DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("exmj")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("kqmt")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("crpilgftrq")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.FAILED,
                                            DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays.asList(new UserProperty().withName("imldahlfxlmu"), new UserProperty().withName("fmuad")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("wrjmwv").withParameters(mapOf()))
                .withPolicy(
                    new ActivityPolicy()
                        .withRetryIntervalInSeconds(901121698)
                        .withSecureInput(false)
                        .withSecureOutput(false)
                        .withAdditionalProperties(mapOf()))
                .withDataset(new DatasetReference().withReferenceName("xzznnui").withParameters(mapOf()))
                .withFieldList(Arrays.asList())
                .withStoreSettings(new StoreReadSettings().withAdditionalProperties(mapOf("type", "StoreReadSettings")))
                .withFormatSettings(
                    new FormatReadSettings().withAdditionalProperties(mapOf("type", "FormatReadSettings")));
        model = BinaryData.fromObject(model).toObject(GetMetadataActivity.class);
        Assertions.assertEquals("ldeko", model.name());
        Assertions.assertEquals("gxieqfkyfhi", model.description());
        Assertions.assertEquals("aqupbyynvskp", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("imldahlfxlmu", model.userProperties().get(0).name());
        Assertions.assertEquals("wrjmwv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(901121698, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("xzznnui", model.dataset().referenceName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
