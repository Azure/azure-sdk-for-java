// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetDebugResource;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DatasetDebugResourceTests {
    @Test
    public void testDeserialize() {
        DatasetDebugResource model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"type\":\"Dataset\",\"description\":\"amvpphoszqzudph\",\"linkedServiceName\":{\"referenceName\":\"vdkfwynwcvtbvk\",\"parameters\":{}},\"parameters\":{\"yqiatkzwp\":{\"type\":\"Int\"},\"wzcjaesgvvsccy\":{\"type\":\"Bool\"},\"uq\":{\"type\":\"Float\"}},\"annotations\":[],\"folder\":{\"name\":\"zlvdnkfxusemdw\"},\"\":{}},\"name\":\"hapfcqdpsqx\"}")
                .toObject(DatasetDebugResource.class);
        Assertions.assertEquals("hapfcqdpsqx", model.name());
        Assertions.assertEquals("amvpphoszqzudph", model.properties().description());
        Assertions.assertEquals("vdkfwynwcvtbvk", model.properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.properties().parameters().get("yqiatkzwp").type());
        Assertions.assertEquals("zlvdnkfxusemdw", model.properties().folder().name());
    }

    @Test
    public void testSerialize() {
        DatasetDebugResource model =
            new DatasetDebugResource()
                .withName("hapfcqdpsqx")
                .withProperties(
                    new Dataset()
                        .withDescription("amvpphoszqzudph")
                        .withLinkedServiceName(
                            new LinkedServiceReference().withReferenceName("vdkfwynwcvtbvk").withParameters(mapOf()))
                        .withParameters(
                            mapOf(
                                "yqiatkzwp",
                                new ParameterSpecification().withType(ParameterType.INT),
                                "wzcjaesgvvsccy",
                                new ParameterSpecification().withType(ParameterType.BOOL),
                                "uq",
                                new ParameterSpecification().withType(ParameterType.FLOAT)))
                        .withAnnotations(Arrays.asList())
                        .withFolder(new DatasetFolder().withName("zlvdnkfxusemdw"))
                        .withAdditionalProperties(mapOf("type", "Dataset")));
        model = BinaryData.fromObject(model).toObject(DatasetDebugResource.class);
        Assertions.assertEquals("hapfcqdpsqx", model.name());
        Assertions.assertEquals("amvpphoszqzudph", model.properties().description());
        Assertions.assertEquals("vdkfwynwcvtbvk", model.properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.properties().parameters().get("yqiatkzwp").type());
        Assertions.assertEquals("zlvdnkfxusemdw", model.properties().folder().name());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
