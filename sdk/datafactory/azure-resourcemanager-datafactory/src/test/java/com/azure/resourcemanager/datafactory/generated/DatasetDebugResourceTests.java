// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetDebugResource;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatasetDebugResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatasetDebugResource model = BinaryData.fromString(
            "{\"properties\":{\"type\":\"jxdfzantkwcegya\",\"description\":\"bnseqacjjvpilg\",\"structure\":\"dataoq\",\"schema\":\"datagmditgueiookjbs\",\"linkedServiceName\":{\"referenceName\":\"hrtdtpdelq\",\"parameters\":{\"gdirazf\":\"datalmotoebnfxofvcj\",\"bmdujtmvcopexc\":\"dataxejw\"}},\"parameters\":{\"hlkyqltqsrog\":{\"type\":\"Float\",\"defaultValue\":\"datau\"},\"dfvclglxnfu\":{\"type\":\"Float\",\"defaultValue\":\"datakffdjktsys\"},\"sfikayiansharuj\":{\"type\":\"Object\",\"defaultValue\":\"datakbusqo\"},\"qhjpenuygbqe\":{\"type\":\"Float\",\"defaultValue\":\"dataqxfzyjqttvwk\"}},\"annotations\":[\"datakewvnqv\",\"datadlguaucmfdjwn\",\"dataaxpunjqikczvv\",\"datatacgxmfc\"],\"folder\":{\"name\":\"rxhtvso\"},\"\":{\"ruuuybnch\":\"datawntsjgqrsxy\",\"qyggagfl\":\"dataszizoyuelyetndnb\",\"byrplrohkpig\":\"datalgmtrwahzjmucf\"}},\"name\":\"usuckzmkwklsno\"}")
            .toObject(DatasetDebugResource.class);
        Assertions.assertEquals("usuckzmkwklsno", model.name());
        Assertions.assertEquals("bnseqacjjvpilg", model.properties().description());
        Assertions.assertEquals("hrtdtpdelq", model.properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.properties().parameters().get("hlkyqltqsrog").type());
        Assertions.assertEquals("rxhtvso", model.properties().folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatasetDebugResource model = new DatasetDebugResource().withName("usuckzmkwklsno")
            .withProperties(new Dataset().withDescription("bnseqacjjvpilg")
                .withStructure("dataoq")
                .withSchema("datagmditgueiookjbs")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("hrtdtpdelq")
                    .withParameters(mapOf("gdirazf", "datalmotoebnfxofvcj", "bmdujtmvcopexc", "dataxejw")))
                .withParameters(mapOf("hlkyqltqsrog",
                    new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datau"), "dfvclglxnfu",
                    new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datakffdjktsys"),
                    "sfikayiansharuj",
                    new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datakbusqo"),
                    "qhjpenuygbqe",
                    new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataqxfzyjqttvwk")))
                .withAnnotations(Arrays.asList("datakewvnqv", "datadlguaucmfdjwn", "dataaxpunjqikczvv", "datatacgxmfc"))
                .withFolder(new DatasetFolder().withName("rxhtvso"))
                .withAdditionalProperties(mapOf("type", "jxdfzantkwcegya")));
        model = BinaryData.fromObject(model).toObject(DatasetDebugResource.class);
        Assertions.assertEquals("usuckzmkwklsno", model.name());
        Assertions.assertEquals("bnseqacjjvpilg", model.properties().description());
        Assertions.assertEquals("hrtdtpdelq", model.properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.properties().parameters().get("hlkyqltqsrog").type());
        Assertions.assertEquals("rxhtvso", model.properties().folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
