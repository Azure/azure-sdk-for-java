// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetDebugResource;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatasetDebugResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatasetDebugResource model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"type\":\"Dataset\",\"description\":\"qmjxlyyzglgouwtl\",\"structure\":\"datajyuojqtobaxkjeyt\",\"schema\":\"datalbfjkwr\",\"linkedServiceName\":{\"referenceName\":\"snkq\",\"parameters\":{\"qunjqh\":\"datay\"}},\"parameters\":{\"ifmjnn\":{\"type\":\"Float\",\"defaultValue\":\"dataulkpakd\"},\"yirdhlisngwflqq\":{\"type\":\"String\",\"defaultValue\":\"dataqabpxuckpggqow\"}},\"annotations\":[\"datazruwn\",\"dataqxpxiwfcngjsaa\",\"dataiixtmkzj\",\"datakv\"],\"folder\":{\"name\":\"hgfgrwsd\"},\"\":{\"bglbyvict\":\"dataatzv\"}},\"name\":\"brxkjzwr\"}")
                .toObject(DatasetDebugResource.class);
        Assertions.assertEquals("brxkjzwr", model.name());
        Assertions.assertEquals("qmjxlyyzglgouwtl", model.properties().description());
        Assertions.assertEquals("snkq", model.properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.properties().parameters().get("ifmjnn").type());
        Assertions.assertEquals("hgfgrwsd", model.properties().folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatasetDebugResource model =
            new DatasetDebugResource()
                .withName("brxkjzwr")
                .withProperties(
                    new Dataset()
                        .withDescription("qmjxlyyzglgouwtl")
                        .withStructure("datajyuojqtobaxkjeyt")
                        .withSchema("datalbfjkwr")
                        .withLinkedServiceName(
                            new LinkedServiceReference()
                                .withReferenceName("snkq")
                                .withParameters(mapOf("qunjqh", "datay")))
                        .withParameters(
                            mapOf(
                                "ifmjnn",
                                new ParameterSpecification()
                                    .withType(ParameterType.FLOAT)
                                    .withDefaultValue("dataulkpakd"),
                                "yirdhlisngwflqq",
                                new ParameterSpecification()
                                    .withType(ParameterType.STRING)
                                    .withDefaultValue("dataqabpxuckpggqow")))
                        .withAnnotations(Arrays.asList("datazruwn", "dataqxpxiwfcngjsaa", "dataiixtmkzj", "datakv"))
                        .withFolder(new DatasetFolder().withName("hgfgrwsd"))
                        .withAdditionalProperties(mapOf("type", "Dataset")));
        model = BinaryData.fromObject(model).toObject(DatasetDebugResource.class);
        Assertions.assertEquals("brxkjzwr", model.name());
        Assertions.assertEquals("qmjxlyyzglgouwtl", model.properties().description());
        Assertions.assertEquals("snkq", model.properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.properties().parameters().get("ifmjnn").type());
        Assertions.assertEquals("hgfgrwsd", model.properties().folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
