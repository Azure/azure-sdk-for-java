// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapHanaTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapHanaTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapHanaTableDataset model = BinaryData.fromString(
            "{\"type\":\"SapHanaTable\",\"typeProperties\":{\"schema\":\"dataaoibmjk\",\"table\":\"datarljd\"},\"description\":\"kylaxrjiqoqovqhg\",\"structure\":\"datagxuwudgcyqru\",\"schema\":\"datamryddnqivahfcq\",\"linkedServiceName\":{\"referenceName\":\"njze\",\"parameters\":{\"w\":\"datacciyoypoedks\",\"xuyxsxteuikhzn\":\"dataibpybqei\",\"rkrgsdc\":\"dataffnhcgnaqsrmrfqd\"}},\"parameters\":{\"byzposzfutgpbygb\":{\"type\":\"Array\",\"defaultValue\":\"dataqlwyqzn\"},\"zpvqewflwzhxzuxe\":{\"type\":\"SecureString\",\"defaultValue\":\"datamoiqg\"},\"ajdqxymxx\":{\"type\":\"Float\",\"defaultValue\":\"dataywlrkqsqvvdkfpfj\"}},\"annotations\":[\"datadjidcetfvgwfws\",\"datadigwoup\"],\"folder\":{\"name\":\"ddqsvclrsnxfrp\"},\"\":{\"tfxxepzpxzxlcqz\":\"dataqclmd\",\"jbsmkirpqni\":\"dataxaitiqm\",\"uzltenlb\":\"dataudmhkcomeobwk\",\"uomtxj\":\"dataxlmxozesndo\"}}")
            .toObject(SapHanaTableDataset.class);
        Assertions.assertEquals("kylaxrjiqoqovqhg", model.description());
        Assertions.assertEquals("njze", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("byzposzfutgpbygb").type());
        Assertions.assertEquals("ddqsvclrsnxfrp", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapHanaTableDataset model = new SapHanaTableDataset().withDescription("kylaxrjiqoqovqhg")
            .withStructure("datagxuwudgcyqru")
            .withSchema("datamryddnqivahfcq")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("njze")
                .withParameters(mapOf("w", "datacciyoypoedks", "xuyxsxteuikhzn", "dataibpybqei", "rkrgsdc",
                    "dataffnhcgnaqsrmrfqd")))
            .withParameters(mapOf("byzposzfutgpbygb",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataqlwyqzn"),
                "zpvqewflwzhxzuxe",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datamoiqg"),
                "ajdqxymxx",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataywlrkqsqvvdkfpfj")))
            .withAnnotations(Arrays.asList("datadjidcetfvgwfws", "datadigwoup"))
            .withFolder(new DatasetFolder().withName("ddqsvclrsnxfrp"))
            .withSchemaTypePropertiesSchema("dataaoibmjk")
            .withTable("datarljd");
        model = BinaryData.fromObject(model).toObject(SapHanaTableDataset.class);
        Assertions.assertEquals("kylaxrjiqoqovqhg", model.description());
        Assertions.assertEquals("njze", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("byzposzfutgpbygb").type());
        Assertions.assertEquals("ddqsvclrsnxfrp", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
