// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapHanaTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapHanaTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapHanaTableDataset model = BinaryData.fromString(
            "{\"type\":\"SapHanaTable\",\"typeProperties\":{\"schema\":\"dataikjhorlxkpypkenn\",\"table\":\"datantrqxxwtdmb\"},\"description\":\"tsuhqhtoxtd\",\"structure\":\"dataavfxbqmzxsya\",\"schema\":\"datainpaamihwbgh\",\"linkedServiceName\":{\"referenceName\":\"wt\",\"parameters\":{\"gsf\":\"datagch\",\"sqbjsdj\":\"datahbjki\",\"sgw\":\"datagxe\",\"ivoveomkhfeqcoop\":\"datacfferznzc\"}},\"parameters\":{\"xsuloutnpb\":{\"type\":\"String\",\"defaultValue\":\"dataimgckycjpeebznbz\"},\"cdmwk\":{\"type\":\"Int\",\"defaultValue\":\"dataoqohgp\"}},\"annotations\":[\"datafhsl\",\"dataqd\",\"dataa\"],\"folder\":{\"name\":\"nyevdyzdsytciks\"},\"\":{\"mvhadrpbatvy\":\"dataamwuynfxkcgsf\",\"qwsyjtvjkowggxaw\":\"datakljq\",\"ov\":\"datadmbypnkteiidl\",\"cnerekyjul\":\"databclprgeganihk\"}}")
            .toObject(SapHanaTableDataset.class);
        Assertions.assertEquals("tsuhqhtoxtd", model.description());
        Assertions.assertEquals("wt", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("xsuloutnpb").type());
        Assertions.assertEquals("nyevdyzdsytciks", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapHanaTableDataset model = new SapHanaTableDataset().withDescription("tsuhqhtoxtd")
            .withStructure("dataavfxbqmzxsya")
            .withSchema("datainpaamihwbgh")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("wt")
                .withParameters(mapOf("gsf", "datagch", "sqbjsdj", "datahbjki", "sgw", "datagxe", "ivoveomkhfeqcoop",
                    "datacfferznzc")))
            .withParameters(mapOf("xsuloutnpb",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataimgckycjpeebznbz"),
                "cdmwk", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataoqohgp")))
            .withAnnotations(Arrays.asList("datafhsl", "dataqd", "dataa"))
            .withFolder(new DatasetFolder().withName("nyevdyzdsytciks"))
            .withSchemaTypePropertiesSchema("dataikjhorlxkpypkenn")
            .withTable("datantrqxxwtdmb");
        model = BinaryData.fromObject(model).toObject(SapHanaTableDataset.class);
        Assertions.assertEquals("tsuhqhtoxtd", model.description());
        Assertions.assertEquals("wt", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("xsuloutnpb").type());
        Assertions.assertEquals("nyevdyzdsytciks", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
