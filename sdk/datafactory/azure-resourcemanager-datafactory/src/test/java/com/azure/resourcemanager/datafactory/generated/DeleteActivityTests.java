// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DeleteActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DeleteActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeleteActivity model = BinaryData.fromString(
            "{\"type\":\"Delete\",\"typeProperties\":{\"recursive\":\"dataezjyfaqdwfa\",\"maxConcurrentConnections\":540501730,\"enableLogging\":\"dataetslxerhwlvh\",\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"xxgeladqziljrsyc\",\"parameters\":{\"hxpix\":\"datasznjskwjjupu\",\"icufxtcyt\":\"datayyqsonfxsfjedjn\"}},\"path\":\"datasp\",\"logLevel\":\"datauhztvbgcflttes\",\"enableReliableLogging\":\"datajcuuyttuind\",\"\":{\"nsbjzrnjcagagm\":\"dataijncaqgtsbahtlop\",\"nashnoxr\":\"dataul\",\"qzwutakbvaqg\":\"dataabbetzcd\"}},\"dataset\":{\"referenceName\":\"aubmcwpllo\",\"parameters\":{\"tddigmmj\":\"datacdue\"}},\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"datajrcrbkw\",\"disableMetricsCollection\":\"datavg\",\"\":{\"jcemkcwcb\":\"dataih\"}}},\"linkedServiceName\":{\"referenceName\":\"qjpi\",\"parameters\":{\"ogfo\":\"datawhrgmzntroafzrq\",\"ojjbky\":\"datarryzbqpksoaxszuh\"}},\"policy\":{\"timeout\":\"datadgvhecqk\",\"retry\":\"datatemamyshnksu\",\"retryIntervalInSeconds\":685032717,\"secureInput\":true,\"secureOutput\":false,\"\":{\"hgchtaeac\":\"datavumxyqhctrrv\"}},\"name\":\"qk\",\"description\":\"zuk\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"qfqawynsl\",\"dependencyConditions\":[\"Failed\"],\"\":{\"iriedfyht\":\"datavav\",\"qc\":\"dataugppiudhyl\"}},{\"activity\":\"umq\",\"dependencyConditions\":[\"Completed\"],\"\":{\"kbchnhexmg\":\"dataxzcrf\",\"wyzvnsnak\":\"dataqlufojuexpkqhg\",\"mltdgxiqrgr\":\"dataobcuy\",\"qyjeeoytgny\":\"dataxjfxu\"}},{\"activity\":\"nklqi\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Failed\",\"Failed\"],\"\":{\"hx\":\"dataglalaazncnhzq\",\"galodfsbhphwt\":\"datascyykrzrjjernj\",\"ajh\":\"datagy\"}}],\"userProperties\":[{\"name\":\"arldsijcm\",\"value\":\"dataugpxgxjmwzkafuvb\"},{\"name\":\"cyarsbhjlcxvsmr\",\"value\":\"dataypbi\"}],\"\":{\"b\":\"dataznaixjsfasxfamn\",\"wco\":\"dataxbglqybfnxej\",\"cnuozjg\":\"datajmpsxot\",\"gnrrqvrxouoqte\":\"datacxbenwi\"}}")
            .toObject(DeleteActivity.class);
        Assertions.assertEquals("qk", model.name());
        Assertions.assertEquals("zuk", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("qfqawynsl", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("arldsijcm", model.userProperties().get(0).name());
        Assertions.assertEquals("qjpi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(685032717, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(540501730, model.maxConcurrentConnections());
        Assertions.assertEquals("xxgeladqziljrsyc", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("aubmcwpllo", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeleteActivity model = new DeleteActivity().withName("qk")
            .withDescription("zuk")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("qfqawynsl")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("umq")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("nklqi")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.FAILED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("arldsijcm").withValue("dataugpxgxjmwzkafuvb"),
                    new UserProperty().withName("cyarsbhjlcxvsmr").withValue("dataypbi")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("qjpi")
                .withParameters(mapOf("ogfo", "datawhrgmzntroafzrq", "ojjbky", "datarryzbqpksoaxszuh")))
            .withPolicy(new ActivityPolicy().withTimeout("datadgvhecqk")
                .withRetry("datatemamyshnksu")
                .withRetryIntervalInSeconds(685032717)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withRecursive("dataezjyfaqdwfa")
            .withMaxConcurrentConnections(540501730)
            .withEnableLogging("dataetslxerhwlvh")
            .withLogStorageSettings(new LogStorageSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("xxgeladqziljrsyc")
                    .withParameters(mapOf("hxpix", "datasznjskwjjupu", "icufxtcyt", "datayyqsonfxsfjedjn")))
                .withPath("datasp")
                .withLogLevel("datauhztvbgcflttes")
                .withEnableReliableLogging("datajcuuyttuind")
                .withAdditionalProperties(mapOf()))
            .withDataset(
                new DatasetReference().withReferenceName("aubmcwpllo").withParameters(mapOf("tddigmmj", "datacdue")))
            .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("datajrcrbkw")
                .withDisableMetricsCollection("datavg")
                .withAdditionalProperties(mapOf("type", "StoreReadSettings")));
        model = BinaryData.fromObject(model).toObject(DeleteActivity.class);
        Assertions.assertEquals("qk", model.name());
        Assertions.assertEquals("zuk", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("qfqawynsl", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("arldsijcm", model.userProperties().get(0).name());
        Assertions.assertEquals("qjpi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(685032717, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(540501730, model.maxConcurrentConnections());
        Assertions.assertEquals("xxgeladqziljrsyc", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("aubmcwpllo", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
