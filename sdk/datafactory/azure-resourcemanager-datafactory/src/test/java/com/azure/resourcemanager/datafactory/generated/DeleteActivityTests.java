// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DeleteActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DeleteActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeleteActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"Delete\",\"typeProperties\":{\"recursive\":\"datajfkj\",\"maxConcurrentConnections\":1126063384,\"enableLogging\":\"datag\",\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"ztcxyphdkxwst\",\"parameters\":{\"dgwezc\":\"dataejopvegmtgoeayho\",\"wqgkfxcdt\":\"datassmbdjzcfdpx\"}},\"path\":\"datayevvuddnwj\",\"logLevel\":\"datacsflemxbma\",\"enableReliableLogging\":\"datavopft\",\"\":{\"o\":\"dataevh\",\"sis\":\"datajpumpqlugzydylf\"}},\"dataset\":{\"referenceName\":\"dmfo\",\"parameters\":{\"tkprbm\":\"datasvfnxxkmrfz\"}},\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"datarfhfjwikva\",\"disableMetricsCollection\":\"dataxd\",\"\":{\"fardjqwdrooooobs\":\"datailvajctpwlf\",\"qcme\":\"datadqv\"}}},\"linkedServiceName\":{\"referenceName\":\"ajjzxcqnlsxe\",\"parameters\":{\"adyelwol\":\"dataw\"}},\"policy\":{\"timeout\":\"datauhanfjrdca\",\"retry\":\"datazqldakbijcxctn\",\"retryIntervalInSeconds\":1648895814,\"secureInput\":true,\"secureOutput\":true,\"\":{\"lnuhocbbeoxoewp\":\"datawsidnqiavoyhno\",\"yuasstokzhmyayb\":\"datatzofcurnhujcu\",\"xksph\":\"datamcenjctcxamup\"}},\"name\":\"yubytslfmajswrf\",\"description\":\"tgvkqzul\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"hejualugyuxc\",\"dependencyConditions\":[\"Completed\",\"Completed\",\"Succeeded\",\"Succeeded\"],\"\":{\"jdmesoxjkp\":\"datassyzwtzdyzufgnns\",\"pbiou\":\"databgfhjwchv\"}},{\"activity\":\"qoxbxtwsreadg\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Succeeded\"],\"\":{\"onnfjg\":\"dataqzmheimsi\"}},{\"activity\":\"tkegrtvwffvbvuxp\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Failed\",\"Completed\"],\"\":{\"djkanizd\":\"databzykk\",\"frm\":\"datajxgzpmwx\"}}],\"userProperties\":[{\"name\":\"wbahi\",\"value\":\"datafosbr\"}],\"\":{\"hucawmhbqjllyzbq\":\"datawhlqydhhypu\"}}")
                .toObject(DeleteActivity.class);
        Assertions.assertEquals("yubytslfmajswrf", model.name());
        Assertions.assertEquals("tgvkqzul", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("hejualugyuxc", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wbahi", model.userProperties().get(0).name());
        Assertions.assertEquals("ajjzxcqnlsxe", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1648895814, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(1126063384, model.maxConcurrentConnections());
        Assertions.assertEquals("ztcxyphdkxwst", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("dmfo", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeleteActivity model =
            new DeleteActivity()
                .withName("yubytslfmajswrf")
                .withDescription("tgvkqzul")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("hejualugyuxc")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("qoxbxtwsreadg")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("tkegrtvwffvbvuxp")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.FAILED,
                                            DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("wbahi").withValue("datafosbr")))
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("ajjzxcqnlsxe")
                        .withParameters(mapOf("adyelwol", "dataw")))
                .withPolicy(
                    new ActivityPolicy()
                        .withTimeout("datauhanfjrdca")
                        .withRetry("datazqldakbijcxctn")
                        .withRetryIntervalInSeconds(1648895814)
                        .withSecureInput(true)
                        .withSecureOutput(true)
                        .withAdditionalProperties(mapOf()))
                .withRecursive("datajfkj")
                .withMaxConcurrentConnections(1126063384)
                .withEnableLogging("datag")
                .withLogStorageSettings(
                    new LogStorageSettings()
                        .withLinkedServiceName(
                            new LinkedServiceReference()
                                .withReferenceName("ztcxyphdkxwst")
                                .withParameters(
                                    mapOf("dgwezc", "dataejopvegmtgoeayho", "wqgkfxcdt", "datassmbdjzcfdpx")))
                        .withPath("datayevvuddnwj")
                        .withLogLevel("datacsflemxbma")
                        .withEnableReliableLogging("datavopft")
                        .withAdditionalProperties(mapOf()))
                .withDataset(
                    new DatasetReference().withReferenceName("dmfo").withParameters(mapOf("tkprbm", "datasvfnxxkmrfz")))
                .withStoreSettings(
                    new StoreReadSettings()
                        .withMaxConcurrentConnections("datarfhfjwikva")
                        .withDisableMetricsCollection("dataxd")
                        .withAdditionalProperties(mapOf("type", "StoreReadSettings")));
        model = BinaryData.fromObject(model).toObject(DeleteActivity.class);
        Assertions.assertEquals("yubytslfmajswrf", model.name());
        Assertions.assertEquals("tgvkqzul", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("hejualugyuxc", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wbahi", model.userProperties().get(0).name());
        Assertions.assertEquals("ajjzxcqnlsxe", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1648895814, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(1126063384, model.maxConcurrentConnections());
        Assertions.assertEquals("ztcxyphdkxwst", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("dmfo", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
