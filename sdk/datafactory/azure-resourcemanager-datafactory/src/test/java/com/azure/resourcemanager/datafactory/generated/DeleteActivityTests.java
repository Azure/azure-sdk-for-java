// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DeleteActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DeleteActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeleteActivity model = BinaryData.fromString(
            "{\"type\":\"Delete\",\"typeProperties\":{\"recursive\":\"datararzk\",\"maxConcurrentConnections\":1386173284,\"enableLogging\":\"datanvye\",\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"dvzomtzp\",\"parameters\":{\"twzesejdcpcpeu\":\"dataxgslzbpnlfzqwmxu\",\"jrptltytbqhejhn\":\"databofzmvtwyjc\",\"meeuuurx\":\"datajlbygq\",\"ob\":\"dataslxzwvygquiwcfq\"}},\"path\":\"datawdevq\",\"logLevel\":\"dataejhvggykirqkskyy\",\"enableReliableLogging\":\"datammim\",\"\":{\"qjb\":\"datawcd\",\"lvlfkwdtsbjmc\":\"datarxmlmibvczdjko\"}},\"dataset\":{\"referenceName\":\"sefezjyfaqdwfa\",\"parameters\":{\"hwlvh\":\"datadetslxe\",\"zil\":\"datalxxgelad\",\"jjupukhxpixuyy\":\"datarsycujnsznjsk\"}},\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"datanfxsfjed\",\"disableMetricsCollection\":\"dataxicufxtcyteds\",\"\":{\"pjc\":\"datauhztvbgcflttes\",\"aqgtsbaht\":\"datauyttuindpmrijn\",\"mgulln\":\"dataopbnsbjzrnjcaga\",\"tzcdbqzwutakbva\":\"datashnoxrmabb\"}}},\"linkedServiceName\":{\"referenceName\":\"uaubmcwpll\",\"parameters\":{\"ewtddigmmjve\":\"dataccd\",\"nvgxg\":\"datajrcrbkw\",\"jcemkcwcb\":\"dataih\"}},\"policy\":{\"timeout\":\"datajpiafzwhrgmznt\",\"retry\":\"dataafzrqmogfojrryz\",\"retryIntervalInSeconds\":543157036,\"secureInput\":false,\"secureOutput\":false,\"\":{\"hecq\":\"datazuhuojjbkyddsdg\",\"shnksupchzspgby\":\"databetemam\",\"vuhgchtaea\":\"dataumxyqhctr\"}},\"name\":\"bqkx\",\"description\":\"ukajk\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"awynslcfx\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\"],\"\":{\"ugppiudhyl\":\"datairiedfyht\",\"umq\":\"dataqc\"}},{\"activity\":\"ri\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Skipped\",\"Skipped\"],\"\":{\"qlufojuexpkqhg\":\"datakbchnhexmg\",\"obcuy\":\"datawyzvnsnak\",\"xjfxu\":\"datamltdgxiqrgr\"}},{\"activity\":\"qyjeeoytgny\",\"dependencyConditions\":[\"Skipped\",\"Skipped\"],\"\":{\"azncnh\":\"datapnzgnybuglal\",\"hx\":\"dataq\",\"galodfsbhphwt\":\"datascyykrzrjjernj\",\"ajh\":\"datagy\"}},{\"activity\":\"txarl\",\"dependencyConditions\":[\"Succeeded\",\"Failed\"],\"\":{\"xjmw\":\"datanugpx\",\"gc\":\"datakafuv\",\"biwnyznaixjsfas\":\"dataarsbhjlcxvsmrxy\",\"nxejxwcojjmp\":\"datafamnpbyxbglqyb\"}}],\"userProperties\":[{\"name\":\"tqc\",\"value\":\"datauozjgkcxb\"},{\"name\":\"nwiignr\",\"value\":\"dataqvrxouoqtestr\"}],\"\":{\"yyzaalpwwcwie\":\"dataskmvr\",\"wqmundle\":\"datasswijqsndqjbdtcz\",\"hrygdp\":\"datadlcuedrmqkwkutbt\",\"tcfppjegctsatnry\":\"dataufmvozq\"}}")
            .toObject(DeleteActivity.class);
        Assertions.assertEquals("bqkx", model.name());
        Assertions.assertEquals("ukajk", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("awynslcfx", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("tqc", model.userProperties().get(0).name());
        Assertions.assertEquals("uaubmcwpll", model.linkedServiceName().referenceName());
        Assertions.assertEquals(543157036, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(1386173284, model.maxConcurrentConnections());
        Assertions.assertEquals("dvzomtzp", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("sefezjyfaqdwfa", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeleteActivity model
            = new DeleteActivity().withName("bqkx")
                .withDescription("ukajk")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("awynslcfx")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("ri")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                            DependencyCondition.COMPLETED, DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("qyjeeoytgny")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("txarl")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("tqc").withValue("datauozjgkcxb"),
                    new UserProperty().withName("nwiignr").withValue("dataqvrxouoqtestr")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("uaubmcwpll")
                    .withParameters(mapOf("ewtddigmmjve", "dataccd", "nvgxg", "datajrcrbkw", "jcemkcwcb", "dataih")))
                .withPolicy(new ActivityPolicy().withTimeout("datajpiafzwhrgmznt")
                    .withRetry("dataafzrqmogfojrryz")
                    .withRetryIntervalInSeconds(543157036)
                    .withSecureInput(false)
                    .withSecureOutput(false)
                    .withAdditionalProperties(mapOf()))
                .withRecursive("datararzk")
                .withMaxConcurrentConnections(1386173284)
                .withEnableLogging("datanvye")
                .withLogStorageSettings(new LogStorageSettings()
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("dvzomtzp")
                        .withParameters(mapOf("twzesejdcpcpeu", "dataxgslzbpnlfzqwmxu", "jrptltytbqhejhn",
                            "databofzmvtwyjc", "meeuuurx", "datajlbygq", "ob", "dataslxzwvygquiwcfq")))
                    .withPath("datawdevq")
                    .withLogLevel("dataejhvggykirqkskyy")
                    .withEnableReliableLogging("datammim")
                    .withAdditionalProperties(mapOf()))
                .withDataset(
                    new DatasetReference().withReferenceName("sefezjyfaqdwfa")
                        .withParameters(mapOf("hwlvh", "datadetslxe", "zil", "datalxxgelad", "jjupukhxpixuyy",
                            "datarsycujnsznjsk")))
                .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("datanfxsfjed")
                    .withDisableMetricsCollection("dataxicufxtcyteds")
                    .withAdditionalProperties(mapOf("type", "StoreReadSettings")));
        model = BinaryData.fromObject(model).toObject(DeleteActivity.class);
        Assertions.assertEquals("bqkx", model.name());
        Assertions.assertEquals("ukajk", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("awynslcfx", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("tqc", model.userProperties().get(0).name());
        Assertions.assertEquals("uaubmcwpll", model.linkedServiceName().referenceName());
        Assertions.assertEquals(543157036, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(1386173284, model.maxConcurrentConnections());
        Assertions.assertEquals("dvzomtzp", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("sefezjyfaqdwfa", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
