// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DeleteActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DeleteActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeleteActivity model = BinaryData.fromString(
            "{\"type\":\"Delete\",\"typeProperties\":{\"recursive\":\"datardzmbzlfzydwe\",\"maxConcurrentConnections\":726903817,\"enableLogging\":\"dataseehvmtyubvdou\",\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"khipaodohb\",\"parameters\":{\"bmhskhjjxesmbuhk\":\"databweaajgokp\",\"ijeppnpftwg\":\"datashyhgahmtevife\",\"yiu\":\"datarcc\",\"j\":\"datahsnej\"}},\"path\":\"datakwxnmqmyt\",\"logLevel\":\"datarjutyfn\",\"enableReliableLogging\":\"datamghaeedqak\",\"\":{\"nlbsvtsjv\":\"datawjn\",\"kbbemhwtmeqt\":\"datavzafpvwrbqbyxuup\",\"jjnxdg\":\"datafsjpvjwbxlgpepx\"}},\"dataset\":{\"referenceName\":\"egkltlpbbepmmi\",\"parameters\":{\"gngnu\":\"dataadasuevuwtd\",\"jdbov\":\"datazmhgf\",\"vqmxzdi\":\"datamnelqlqn\"}},\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"datanrpqsj\",\"disableMetricsCollection\":\"datancyksblreq\",\"\":{\"ibiyl\":\"datak\",\"edxdemcyrblwqhz\":\"dataf\",\"gs\":\"datar\"}}},\"linkedServiceName\":{\"referenceName\":\"zpozqluu\",\"parameters\":{\"evwwblqd\":\"datakttlpwxola\",\"jbbwftcnz\":\"datatqeguenteucao\"}},\"policy\":{\"timeout\":\"dataa\",\"retry\":\"datamqpt\",\"retryIntervalInSeconds\":1018920952,\"secureInput\":true,\"secureOutput\":true,\"\":{\"lppnevujkzb\":\"dataupmlayejocsqtibu\",\"fajygnhmoeoxs\":\"datakgvwkdgsrtm\",\"z\":\"databl\"}},\"name\":\"dcxygpmjfwm\",\"description\":\"faucihqsog\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"lyzizwtqvgp\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Skipped\",\"Completed\"],\"\":{\"e\":\"datawfkdblvbw\",\"nekwe\":\"datatxlujvmnooaga\"}},{\"activity\":\"xmpiqlnwfbj\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Failed\"],\"\":{\"ufcdgcvfx\":\"datajogvqhcp\",\"wvwfom\":\"datavxkcyhkhw\",\"nrco\":\"datacgrwl\"}}],\"userProperties\":[{\"name\":\"yd\",\"value\":\"datayctkrga\"},{\"name\":\"xzmrxxmgzslnnc\",\"value\":\"datawrhoma\"},{\"name\":\"vni\",\"value\":\"dataup\"},{\"name\":\"oneoqy\",\"value\":\"datatfx\"}],\"\":{\"zfafekcu\":\"datakqvkdpnqcuprl\",\"itqvqyinifnmc\":\"dataovsqmzee\",\"mv\":\"datafgkbytzmnamesdcm\",\"fdhyrhfvaaps\":\"datat\"}}")
            .toObject(DeleteActivity.class);
        Assertions.assertEquals("dcxygpmjfwm", model.name());
        Assertions.assertEquals("faucihqsog", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("lyzizwtqvgp", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("yd", model.userProperties().get(0).name());
        Assertions.assertEquals("zpozqluu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1018920952, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(726903817, model.maxConcurrentConnections());
        Assertions.assertEquals("khipaodohb", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("egkltlpbbepmmi", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeleteActivity model = new DeleteActivity().withName("dcxygpmjfwm")
            .withDescription("faucihqsog")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("lyzizwtqvgp")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SKIPPED,
                        DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("xmpiqlnwfbj")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("yd").withValue("datayctkrga"),
                new UserProperty().withName("xzmrxxmgzslnnc").withValue("datawrhoma"),
                new UserProperty().withName("vni").withValue("dataup"),
                new UserProperty().withName("oneoqy").withValue("datatfx")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("zpozqluu")
                .withParameters(mapOf("evwwblqd", "datakttlpwxola", "jbbwftcnz", "datatqeguenteucao")))
            .withPolicy(new ActivityPolicy().withTimeout("dataa")
                .withRetry("datamqpt")
                .withRetryIntervalInSeconds(1018920952)
                .withSecureInput(true)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withRecursive("datardzmbzlfzydwe")
            .withMaxConcurrentConnections(726903817)
            .withEnableLogging("dataseehvmtyubvdou")
            .withLogStorageSettings(new LogStorageSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("khipaodohb")
                    .withParameters(mapOf("bmhskhjjxesmbuhk", "databweaajgokp", "ijeppnpftwg", "datashyhgahmtevife",
                        "yiu", "datarcc", "j", "datahsnej")))
                .withPath("datakwxnmqmyt")
                .withLogLevel("datarjutyfn")
                .withEnableReliableLogging("datamghaeedqak")
                .withAdditionalProperties(mapOf()))
            .withDataset(new DatasetReference().withReferenceName("egkltlpbbepmmi")
                .withParameters(mapOf("gngnu", "dataadasuevuwtd", "jdbov", "datazmhgf", "vqmxzdi", "datamnelqlqn")))
            .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("datanrpqsj")
                .withDisableMetricsCollection("datancyksblreq")
                .withAdditionalProperties(mapOf("type", "StoreReadSettings")));
        model = BinaryData.fromObject(model).toObject(DeleteActivity.class);
        Assertions.assertEquals("dcxygpmjfwm", model.name());
        Assertions.assertEquals("faucihqsog", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("lyzizwtqvgp", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("yd", model.userProperties().get(0).name());
        Assertions.assertEquals("zpozqluu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1018920952, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(726903817, model.maxConcurrentConnections());
        Assertions.assertEquals("khipaodohb", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("egkltlpbbepmmi", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
