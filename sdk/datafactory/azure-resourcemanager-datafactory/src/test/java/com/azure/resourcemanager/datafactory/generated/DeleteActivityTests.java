// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DeleteActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DeleteActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeleteActivity model = BinaryData.fromString(
            "{\"type\":\"Delete\",\"typeProperties\":{\"recursive\":\"dataqfwobnbluutmfiml\",\"maxConcurrentConnections\":497751591,\"enableLogging\":\"datadxjirfye\",\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"jrdcgeormxipwcq\",\"parameters\":{\"cuhas\":\"datanmfnfatwi\",\"whotjcgdpqk\":\"dataielhtukhei\",\"qm\":\"datax\",\"mjuqq\":\"datavrglqlvmkeseyqo\"}},\"path\":\"datamzletackjuwkkvar\",\"logLevel\":\"datajuefj\",\"enableReliableLogging\":\"dataowqwod\",\"\":{\"hciapvc\":\"datadtywajqw\",\"ltftaqmrimlet\":\"datawzjrpcpg\",\"ptf\":\"datav\"}},\"dataset\":{\"referenceName\":\"ab\",\"parameters\":{\"szxupwri\":\"datahzfglpsw\",\"haskuiosl\":\"datakqnbiiandhsjp\"}},\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"datacuh\",\"disableMetricsCollection\":\"datarfhmr\",\"\":{\"aaabtxrhemnkyk\":\"datanojfdiijch\",\"dqhjpzee\":\"dataruomwyoktzffp\",\"o\":\"datavkuvykiyrfo\"}}},\"linkedServiceName\":{\"referenceName\":\"oiks\",\"parameters\":{\"rmugkugwtgfktw\":\"datakbdh\",\"isatb\":\"datayhauhqvxeyl\",\"xxq\":\"dataghtkdcuf\"}},\"policy\":{\"timeout\":\"datavfvqvernqk\",\"retry\":\"datayyysvtjoxw\",\"retryIntervalInSeconds\":1319842201,\"secureInput\":true,\"secureOutput\":false,\"\":{\"c\":\"dataiz\"}},\"name\":\"pddzzdw\",\"description\":\"vmocnfzmuyykxlfl\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"n\",\"dependencyConditions\":[\"Succeeded\",\"Completed\"],\"\":{\"gpomcrevt\":\"datavnb\",\"xpnraeo\":\"datazclilzveisdnobxc\",\"xvsuhxrctcozfj\":\"dataixof\",\"rrwbcycwasmrfbw\":\"datafrbjrbqc\"}}],\"userProperties\":[{\"name\":\"mhhvbovblxfyle\",\"value\":\"datagd\"},{\"name\":\"iurfemnykfzsouo\",\"value\":\"dataezszlr\"}],\"\":{\"pkxprbutyjfhjh\":\"dataldgiij\",\"ljkqlruhhk\":\"datav\"}}")
            .toObject(DeleteActivity.class);
        Assertions.assertEquals("pddzzdw", model.name());
        Assertions.assertEquals("vmocnfzmuyykxlfl", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("n", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("mhhvbovblxfyle", model.userProperties().get(0).name());
        Assertions.assertEquals("oiks", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1319842201, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(497751591, model.maxConcurrentConnections());
        Assertions.assertEquals("jrdcgeormxipwcq", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("ab", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeleteActivity model = new DeleteActivity().withName("pddzzdw")
            .withDescription("vmocnfzmuyykxlfl")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("n")
                .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("mhhvbovblxfyle").withValue("datagd"),
                new UserProperty().withName("iurfemnykfzsouo").withValue("dataezszlr")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("oiks")
                .withParameters(mapOf("rmugkugwtgfktw", "datakbdh", "isatb", "datayhauhqvxeyl", "xxq", "dataghtkdcuf")))
            .withPolicy(new ActivityPolicy().withTimeout("datavfvqvernqk")
                .withRetry("datayyysvtjoxw")
                .withRetryIntervalInSeconds(1319842201)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withRecursive("dataqfwobnbluutmfiml")
            .withMaxConcurrentConnections(497751591)
            .withEnableLogging("datadxjirfye")
            .withLogStorageSettings(new LogStorageSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("jrdcgeormxipwcq")
                    .withParameters(mapOf("cuhas", "datanmfnfatwi", "whotjcgdpqk", "dataielhtukhei", "qm", "datax",
                        "mjuqq", "datavrglqlvmkeseyqo")))
                .withPath("datamzletackjuwkkvar")
                .withLogLevel("datajuefj")
                .withEnableReliableLogging("dataowqwod")
                .withAdditionalProperties(mapOf()))
            .withDataset(new DatasetReference().withReferenceName("ab")
                .withParameters(mapOf("szxupwri", "datahzfglpsw", "haskuiosl", "datakqnbiiandhsjp")))
            .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("datacuh")
                .withDisableMetricsCollection("datarfhmr")
                .withAdditionalProperties(mapOf("type", "StoreReadSettings")));
        model = BinaryData.fromObject(model).toObject(DeleteActivity.class);
        Assertions.assertEquals("pddzzdw", model.name());
        Assertions.assertEquals("vmocnfzmuyykxlfl", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("n", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("mhhvbovblxfyle", model.userProperties().get(0).name());
        Assertions.assertEquals("oiks", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1319842201, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(497751591, model.maxConcurrentConnections());
        Assertions.assertEquals("jrdcgeormxipwcq", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("ab", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
