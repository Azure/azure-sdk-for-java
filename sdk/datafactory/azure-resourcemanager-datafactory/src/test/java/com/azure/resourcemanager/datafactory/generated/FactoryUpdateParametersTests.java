// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.FactoryIdentity;
import com.azure.resourcemanager.datafactory.models.FactoryIdentityType;
import com.azure.resourcemanager.datafactory.models.FactoryUpdateParameters;
import com.azure.resourcemanager.datafactory.models.PublicNetworkAccess;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class FactoryUpdateParametersTests {
    @Test
    public void testDeserialize() {
        FactoryUpdateParameters model =
            BinaryData
                .fromString(
                    "{\"tags\":{\"eypvhezrkg\":\"dectehfiqsc\",\"sle\":\"hcjrefovgmk\",\"cattpngjcrcczsq\":\"yvxyqjp\",\"mdajv\":\"jh\"},\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{}},\"properties\":{\"publicNetworkAccess\":\"Enabled\"}}")
                .toObject(FactoryUpdateParameters.class);
        Assertions.assertEquals("dectehfiqsc", model.tags().get("eypvhezrkg"));
        Assertions.assertEquals(FactoryIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
    }

    @Test
    public void testSerialize() {
        FactoryUpdateParameters model =
            new FactoryUpdateParameters()
                .withTags(
                    mapOf(
                        "eypvhezrkg", "dectehfiqsc", "sle", "hcjrefovgmk", "cattpngjcrcczsq", "yvxyqjp", "mdajv", "jh"))
                .withIdentity(
                    new FactoryIdentity()
                        .withType(FactoryIdentityType.SYSTEM_ASSIGNED)
                        .withUserAssignedIdentities(mapOf()))
                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED);
        model = BinaryData.fromObject(model).toObject(FactoryUpdateParameters.class);
        Assertions.assertEquals("dectehfiqsc", model.tags().get("eypvhezrkg"));
        Assertions.assertEquals(FactoryIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
