// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.FactoryIdentity;
import com.azure.resourcemanager.datafactory.models.FactoryIdentityType;
import com.azure.resourcemanager.datafactory.models.FactoryUpdateParameters;
import com.azure.resourcemanager.datafactory.models.PublicNetworkAccess;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FactoryUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FactoryUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"wkgshwa\":\"alpbuxwgipwhon\"},\"identity\":{\"type\":\"SystemAssigned,UserAssigned\",\"principalId\":\"1db887d3-ab26-4f99-bea3-54de739a81f2\",\"tenantId\":\"5a181021-8f94-4be1-a00d-28fd085bc8d8\",\"userAssignedIdentities\":{\"zoqftiyqzrnkcqvy\":\"datanjeputtmrywn\",\"lsicohoqqnwv\":\"datalwh\"}},\"properties\":{\"publicNetworkAccess\":\"Disabled\"}}")
            .toObject(FactoryUpdateParameters.class);
        Assertions.assertEquals("alpbuxwgipwhon", model.tags().get("wkgshwa"));
        Assertions.assertEquals(FactoryIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FactoryUpdateParameters model = new FactoryUpdateParameters().withTags(mapOf("wkgshwa", "alpbuxwgipwhon"))
            .withIdentity(new FactoryIdentity().withType(FactoryIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("zoqftiyqzrnkcqvy", "datanjeputtmrywn", "lsicohoqqnwv", "datalwh")))
            .withPublicNetworkAccess(PublicNetworkAccess.DISABLED);
        model = BinaryData.fromObject(model).toObject(FactoryUpdateParameters.class);
        Assertions.assertEquals("alpbuxwgipwhon", model.tags().get("wkgshwa"));
        Assertions.assertEquals(FactoryIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
