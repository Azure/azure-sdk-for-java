// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DrillTableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DrillTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DrillTableDataset model = BinaryData.fromString(
            "{\"type\":\"DrillTable\",\"typeProperties\":{\"tableName\":\"dataoxfalokbskkypo\",\"table\":\"dataynieunbydlgfaphw\",\"schema\":\"databwtsaynrt\"},\"description\":\"fqreeoxvqjmrnbl\",\"structure\":\"datasdbfbmdiv\",\"schema\":\"datazhpjgqz\",\"linkedServiceName\":{\"referenceName\":\"iaoaweacfxa\",\"parameters\":{\"k\":\"datahruetcnxriqzzd\",\"wobwxrxm\":\"datasqdrrjsurn\",\"ouqjp\":\"dataokohlsfj\"}},\"parameters\":{\"ymudj\":{\"type\":\"SecureString\",\"defaultValue\":\"datauvkqxqkvadmj\"}},\"annotations\":[\"datajzdebhsermcly\",\"datawwuhyqkaapt\"],\"folder\":{\"name\":\"vkbcbptwyb\"},\"\":{\"xzbnss\":\"datacuhp\"}}")
            .toObject(DrillTableDataset.class);
        Assertions.assertEquals("fqreeoxvqjmrnbl", model.description());
        Assertions.assertEquals("iaoaweacfxa", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("ymudj").type());
        Assertions.assertEquals("vkbcbptwyb", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DrillTableDataset model = new DrillTableDataset().withDescription("fqreeoxvqjmrnbl")
            .withStructure("datasdbfbmdiv")
            .withSchema("datazhpjgqz")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("iaoaweacfxa")
                .withParameters(
                    mapOf("k", "datahruetcnxriqzzd", "wobwxrxm", "datasqdrrjsurn", "ouqjp", "dataokohlsfj")))
            .withParameters(mapOf("ymudj",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("datauvkqxqkvadmj")))
            .withAnnotations(Arrays.asList("datajzdebhsermcly", "datawwuhyqkaapt"))
            .withFolder(new DatasetFolder().withName("vkbcbptwyb"))
            .withTableName("dataoxfalokbskkypo")
            .withTable("dataynieunbydlgfaphw")
            .withSchemaTypePropertiesSchema("databwtsaynrt");
        model = BinaryData.fromObject(model).toObject(DrillTableDataset.class);
        Assertions.assertEquals("fqreeoxvqjmrnbl", model.description());
        Assertions.assertEquals("iaoaweacfxa", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("ymudj").type());
        Assertions.assertEquals("vkbcbptwyb", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
