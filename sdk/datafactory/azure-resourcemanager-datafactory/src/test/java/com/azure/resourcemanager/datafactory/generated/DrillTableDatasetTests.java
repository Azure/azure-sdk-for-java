// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DrillTableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DrillTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DrillTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"DrillTable\",\"typeProperties\":{\"tableName\":\"datazjdcwuzscyf\",\"table\":\"dataxecmasjnfgngxaoj\",\"schema\":\"datayvfx\"},\"description\":\"ckmoaljaxvwxt\",\"structure\":\"datazhvojyffwflbk\",\"schema\":\"datadzuiygtcyzcjef\",\"linkedServiceName\":{\"referenceName\":\"ubaldjcgldryvlr\",\"parameters\":{\"jbfomfbozpjyxe\":\"datahzirmxca\",\"jthp\":\"datappqcwdnn\"}},\"parameters\":{\"nsebcxnouspdyzs\":{\"type\":\"Float\",\"defaultValue\":\"dataycympohxubnn\"},\"jvgspj\":{\"type\":\"Object\",\"defaultValue\":\"datamykdy\"},\"ngwqxcrbcrgyoim\":{\"type\":\"Float\",\"defaultValue\":\"datah\"}},\"annotations\":[\"dataz\",\"datacctvkog\"],\"folder\":{\"name\":\"v\"},\"\":{\"jdkjvdr\":\"datannwcnvpnyl\",\"xhnrjl\":\"dataknkxi\"}}")
                .toObject(DrillTableDataset.class);
        Assertions.assertEquals("ckmoaljaxvwxt", model.description());
        Assertions.assertEquals("ubaldjcgldryvlr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("nsebcxnouspdyzs").type());
        Assertions.assertEquals("v", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DrillTableDataset model =
            new DrillTableDataset()
                .withDescription("ckmoaljaxvwxt")
                .withStructure("datazhvojyffwflbk")
                .withSchema("datadzuiygtcyzcjef")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("ubaldjcgldryvlr")
                        .withParameters(mapOf("jbfomfbozpjyxe", "datahzirmxca", "jthp", "datappqcwdnn")))
                .withParameters(
                    mapOf(
                        "nsebcxnouspdyzs",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataycympohxubnn"),
                        "jvgspj",
                        new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datamykdy"),
                        "ngwqxcrbcrgyoim",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datah")))
                .withAnnotations(Arrays.asList("dataz", "datacctvkog"))
                .withFolder(new DatasetFolder().withName("v"))
                .withTableName("datazjdcwuzscyf")
                .withTable("dataxecmasjnfgngxaoj")
                .withSchemaTypePropertiesSchema("datayvfx");
        model = BinaryData.fromObject(model).toObject(DrillTableDataset.class);
        Assertions.assertEquals("ckmoaljaxvwxt", model.description());
        Assertions.assertEquals("ubaldjcgldryvlr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("nsebcxnouspdyzs").type());
        Assertions.assertEquals("v", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
