// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ScriptActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.ScriptActivityLogDestination;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameter;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterDirection;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterType;
import com.azure.resourcemanager.datafactory.models.ScriptActivityScriptBlock;
import com.azure.resourcemanager.datafactory.models.ScriptActivityTypePropertiesLogSettings;
import com.azure.resourcemanager.datafactory.models.ScriptType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"scriptBlockExecutionTimeout\":\"datavfubriom\",\"scripts\":[{\"text\":\"datarnggwujyukjfsb\",\"type\":\"Query\",\"parameters\":[{\"name\":\"datarni\",\"type\":\"Single\",\"value\":\"datamuwhg\",\"direction\":\"Output\",\"size\":221400137},{\"name\":\"datafqsislaubijvavq\",\"type\":\"Single\",\"value\":\"datahdikdratzgxt\",\"direction\":\"Output\",\"size\":73057217},{\"name\":\"datalfb\",\"type\":\"DateTimeOffset\",\"value\":\"datamvhpic\",\"direction\":\"InputOutput\",\"size\":839306026},{\"name\":\"dataifa\",\"type\":\"Int32\",\"value\":\"dataswzkz\",\"direction\":\"Input\",\"size\":774721696}]},{\"text\":\"datanbhwtagfe\",\"type\":\"NonQuery\",\"parameters\":[{\"name\":\"dataewjnzlq\",\"type\":\"DateTimeOffset\",\"value\":\"datajna\",\"direction\":\"Output\",\"size\":1674347848},{\"name\":\"datawmnsapgalwpajrt\",\"type\":\"Decimal\",\"value\":\"datatpqvhkjbgcqqeyt\",\"direction\":\"Output\",\"size\":1752438457},{\"name\":\"dataaijnahelfqh\",\"type\":\"String\",\"value\":\"dataakqg\",\"direction\":\"InputOutput\",\"size\":1124111647},{\"name\":\"datatxzekidjbs\",\"type\":\"Int32\",\"value\":\"datamlgynaz\",\"direction\":\"InputOutput\",\"size\":1962463741}]},{\"text\":\"datapypsjokjjrj\",\"type\":\"Query\",\"parameters\":[{\"name\":\"datajt\",\"type\":\"Single\",\"value\":\"datajimsge\",\"direction\":\"Input\",\"size\":1612152665},{\"name\":\"datadbcrkepjnyrtlini\",\"type\":\"String\",\"value\":\"dataq\",\"direction\":\"InputOutput\",\"size\":1315001028}]}],\"logSettings\":{\"logDestination\":\"ExternalStore\",\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"na\",\"parameters\":{\"kqx\":\"databkzqassnwvwluzs\",\"twv\":\"datatkw\",\"swwgrqiqlopb\":\"datajtudn\"}},\"path\":\"dataokmwnrwu\"}}}")
                .toObject(ScriptActivityTypeProperties.class);
        Assertions.assertEquals(ScriptType.QUERY, model.scripts().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterType.SINGLE, model.scripts().get(0).parameters().get(0).type());
        Assertions
            .assertEquals(
                ScriptActivityParameterDirection.OUTPUT, model.scripts().get(0).parameters().get(0).direction());
        Assertions.assertEquals(221400137, model.scripts().get(0).parameters().get(0).size());
        Assertions.assertEquals(ScriptActivityLogDestination.EXTERNAL_STORE, model.logSettings().logDestination());
        Assertions.assertEquals("na", model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptActivityTypeProperties model =
            new ScriptActivityTypeProperties()
                .withScriptBlockExecutionTimeout("datavfubriom")
                .withScripts(
                    Arrays
                        .asList(
                            new ScriptActivityScriptBlock()
                                .withText("datarnggwujyukjfsb")
                                .withType(ScriptType.QUERY)
                                .withParameters(
                                    Arrays
                                        .asList(
                                            new ScriptActivityParameter()
                                                .withName("datarni")
                                                .withType(ScriptActivityParameterType.SINGLE)
                                                .withValue("datamuwhg")
                                                .withDirection(ScriptActivityParameterDirection.OUTPUT)
                                                .withSize(221400137),
                                            new ScriptActivityParameter()
                                                .withName("datafqsislaubijvavq")
                                                .withType(ScriptActivityParameterType.SINGLE)
                                                .withValue("datahdikdratzgxt")
                                                .withDirection(ScriptActivityParameterDirection.OUTPUT)
                                                .withSize(73057217),
                                            new ScriptActivityParameter()
                                                .withName("datalfb")
                                                .withType(ScriptActivityParameterType.DATE_TIME_OFFSET)
                                                .withValue("datamvhpic")
                                                .withDirection(ScriptActivityParameterDirection.INPUT_OUTPUT)
                                                .withSize(839306026),
                                            new ScriptActivityParameter()
                                                .withName("dataifa")
                                                .withType(ScriptActivityParameterType.INT32)
                                                .withValue("dataswzkz")
                                                .withDirection(ScriptActivityParameterDirection.INPUT)
                                                .withSize(774721696))),
                            new ScriptActivityScriptBlock()
                                .withText("datanbhwtagfe")
                                .withType(ScriptType.NON_QUERY)
                                .withParameters(
                                    Arrays
                                        .asList(
                                            new ScriptActivityParameter()
                                                .withName("dataewjnzlq")
                                                .withType(ScriptActivityParameterType.DATE_TIME_OFFSET)
                                                .withValue("datajna")
                                                .withDirection(ScriptActivityParameterDirection.OUTPUT)
                                                .withSize(1674347848),
                                            new ScriptActivityParameter()
                                                .withName("datawmnsapgalwpajrt")
                                                .withType(ScriptActivityParameterType.DECIMAL)
                                                .withValue("datatpqvhkjbgcqqeyt")
                                                .withDirection(ScriptActivityParameterDirection.OUTPUT)
                                                .withSize(1752438457),
                                            new ScriptActivityParameter()
                                                .withName("dataaijnahelfqh")
                                                .withType(ScriptActivityParameterType.STRING)
                                                .withValue("dataakqg")
                                                .withDirection(ScriptActivityParameterDirection.INPUT_OUTPUT)
                                                .withSize(1124111647),
                                            new ScriptActivityParameter()
                                                .withName("datatxzekidjbs")
                                                .withType(ScriptActivityParameterType.INT32)
                                                .withValue("datamlgynaz")
                                                .withDirection(ScriptActivityParameterDirection.INPUT_OUTPUT)
                                                .withSize(1962463741))),
                            new ScriptActivityScriptBlock()
                                .withText("datapypsjokjjrj")
                                .withType(ScriptType.QUERY)
                                .withParameters(
                                    Arrays
                                        .asList(
                                            new ScriptActivityParameter()
                                                .withName("datajt")
                                                .withType(ScriptActivityParameterType.SINGLE)
                                                .withValue("datajimsge")
                                                .withDirection(ScriptActivityParameterDirection.INPUT)
                                                .withSize(1612152665),
                                            new ScriptActivityParameter()
                                                .withName("datadbcrkepjnyrtlini")
                                                .withType(ScriptActivityParameterType.STRING)
                                                .withValue("dataq")
                                                .withDirection(ScriptActivityParameterDirection.INPUT_OUTPUT)
                                                .withSize(1315001028)))))
                .withLogSettings(
                    new ScriptActivityTypePropertiesLogSettings()
                        .withLogDestination(ScriptActivityLogDestination.EXTERNAL_STORE)
                        .withLogLocationSettings(
                            new LogLocationSettings()
                                .withLinkedServiceName(
                                    new LinkedServiceReference()
                                        .withReferenceName("na")
                                        .withParameters(
                                            mapOf(
                                                "kqx",
                                                "databkzqassnwvwluzs",
                                                "twv",
                                                "datatkw",
                                                "swwgrqiqlopb",
                                                "datajtudn")))
                                .withPath("dataokmwnrwu")));
        model = BinaryData.fromObject(model).toObject(ScriptActivityTypeProperties.class);
        Assertions.assertEquals(ScriptType.QUERY, model.scripts().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterType.SINGLE, model.scripts().get(0).parameters().get(0).type());
        Assertions
            .assertEquals(
                ScriptActivityParameterDirection.OUTPUT, model.scripts().get(0).parameters().get(0).direction());
        Assertions.assertEquals(221400137, model.scripts().get(0).parameters().get(0).size());
        Assertions.assertEquals(ScriptActivityLogDestination.EXTERNAL_STORE, model.logSettings().logDestination());
        Assertions.assertEquals("na", model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
