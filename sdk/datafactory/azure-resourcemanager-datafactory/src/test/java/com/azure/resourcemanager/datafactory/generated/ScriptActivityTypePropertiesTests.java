// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ScriptActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.ScriptActivityLogDestination;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameter;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterDirection;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterType;
import com.azure.resourcemanager.datafactory.models.ScriptActivityScriptBlock;
import com.azure.resourcemanager.datafactory.models.ScriptActivityTypePropertiesLogSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptActivityTypeProperties model = BinaryData.fromString(
            "{\"scriptBlockExecutionTimeout\":\"datavrbhqxew\",\"scripts\":[{\"text\":\"datanqh\",\"type\":\"datanehpuhlj\",\"parameters\":[{\"name\":\"datavtptpjabsz\",\"type\":\"String\",\"value\":\"datagdwgqkoxbghpg\",\"direction\":\"Input\",\"size\":791400434},{\"name\":\"dataawo\",\"type\":\"String\",\"value\":\"datarmwr\",\"direction\":\"Input\",\"size\":248460134},{\"name\":\"datamxsnst\",\"type\":\"Single\",\"value\":\"datagraimunmgt\",\"direction\":\"Input\",\"size\":1552583257}]},{\"text\":\"datajnqmjmpx\",\"type\":\"datahyxiez\",\"parameters\":[{\"name\":\"dataaxgw\",\"type\":\"Decimal\",\"value\":\"datalsasyl\",\"direction\":\"Input\",\"size\":1856843732},{\"name\":\"dataybpwzg\",\"type\":\"DateTime\",\"value\":\"datakmut\",\"direction\":\"InputOutput\",\"size\":522707980},{\"name\":\"dataxb\",\"type\":\"Guid\",\"value\":\"datafscbga\",\"direction\":\"Input\",\"size\":943446370},{\"name\":\"datal\",\"type\":\"DateTimeOffset\",\"value\":\"datanshlu\",\"direction\":\"Input\",\"size\":1901559633}]}],\"logSettings\":{\"logDestination\":\"ActivityOutput\",\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"atshibtxgtibm\",\"parameters\":{\"vmclnsahpswspyif\":\"datadpjnwgtxp\",\"hutabhmck\":\"datasakaihwdybjgyxb\"}},\"path\":\"datauadoxlleohvc\"}}}")
            .toObject(ScriptActivityTypeProperties.class);
        Assertions.assertEquals(ScriptActivityParameterType.STRING, model.scripts().get(0).parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.INPUT,
            model.scripts().get(0).parameters().get(0).direction());
        Assertions.assertEquals(791400434, model.scripts().get(0).parameters().get(0).size());
        Assertions.assertEquals(ScriptActivityLogDestination.ACTIVITY_OUTPUT, model.logSettings().logDestination());
        Assertions.assertEquals("atshibtxgtibm",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptActivityTypeProperties model
            = new ScriptActivityTypeProperties().withScriptBlockExecutionTimeout("datavrbhqxew")
                .withScripts(
                    Arrays
                        .asList(
                            new ScriptActivityScriptBlock().withText("datanqh")
                                .withType("datanehpuhlj")
                                .withParameters(Arrays.asList(
                                    new ScriptActivityParameter().withName("datavtptpjabsz")
                                        .withType(ScriptActivityParameterType.STRING)
                                        .withValue("datagdwgqkoxbghpg")
                                        .withDirection(ScriptActivityParameterDirection.INPUT)
                                        .withSize(791400434),
                                    new ScriptActivityParameter().withName("dataawo")
                                        .withType(ScriptActivityParameterType.STRING)
                                        .withValue("datarmwr")
                                        .withDirection(ScriptActivityParameterDirection.INPUT)
                                        .withSize(248460134),
                                    new ScriptActivityParameter().withName("datamxsnst")
                                        .withType(ScriptActivityParameterType.SINGLE)
                                        .withValue("datagraimunmgt")
                                        .withDirection(ScriptActivityParameterDirection.INPUT)
                                        .withSize(1552583257))),
                            new ScriptActivityScriptBlock().withText("datajnqmjmpx")
                                .withType("datahyxiez")
                                .withParameters(Arrays.asList(
                                    new ScriptActivityParameter().withName("dataaxgw")
                                        .withType(ScriptActivityParameterType.DECIMAL)
                                        .withValue("datalsasyl")
                                        .withDirection(ScriptActivityParameterDirection.INPUT)
                                        .withSize(1856843732),
                                    new ScriptActivityParameter().withName("dataybpwzg")
                                        .withType(ScriptActivityParameterType.DATE_TIME)
                                        .withValue("datakmut")
                                        .withDirection(ScriptActivityParameterDirection.INPUT_OUTPUT)
                                        .withSize(522707980),
                                    new ScriptActivityParameter().withName("dataxb")
                                        .withType(ScriptActivityParameterType.GUID)
                                        .withValue("datafscbga")
                                        .withDirection(ScriptActivityParameterDirection.INPUT)
                                        .withSize(943446370),
                                    new ScriptActivityParameter().withName("datal")
                                        .withType(ScriptActivityParameterType.DATE_TIME_OFFSET)
                                        .withValue("datanshlu")
                                        .withDirection(ScriptActivityParameterDirection.INPUT)
                                        .withSize(1901559633)))))
                .withLogSettings(
                    new ScriptActivityTypePropertiesLogSettings()
                        .withLogDestination(ScriptActivityLogDestination.ACTIVITY_OUTPUT)
                        .withLogLocationSettings(
                            new LogLocationSettings()
                                .withLinkedServiceName(
                                    new LinkedServiceReference().withReferenceName("atshibtxgtibm")
                                        .withParameters(mapOf("vmclnsahpswspyif", "datadpjnwgtxp", "hutabhmck",
                                            "datasakaihwdybjgyxb")))
                                .withPath("datauadoxlleohvc")));
        model = BinaryData.fromObject(model).toObject(ScriptActivityTypeProperties.class);
        Assertions.assertEquals(ScriptActivityParameterType.STRING, model.scripts().get(0).parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.INPUT,
            model.scripts().get(0).parameters().get(0).direction());
        Assertions.assertEquals(791400434, model.scripts().get(0).parameters().get(0).size());
        Assertions.assertEquals(ScriptActivityLogDestination.ACTIVITY_OUTPUT, model.logSettings().logDestination());
        Assertions.assertEquals("atshibtxgtibm",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
