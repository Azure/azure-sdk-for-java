// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ScriptActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.ScriptActivityLogDestination;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameter;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterDirection;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterType;
import com.azure.resourcemanager.datafactory.models.ScriptActivityScriptBlock;
import com.azure.resourcemanager.datafactory.models.ScriptActivityTypePropertiesLogSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptActivityTypeProperties model = BinaryData.fromString(
            "{\"scriptBlockExecutionTimeout\":\"datadxmplxzrof\",\"scripts\":[{\"text\":\"databrt\",\"type\":\"datayjqur\",\"parameters\":[{\"name\":\"datazkpumzdatbo\",\"type\":\"Double\",\"value\":\"dataavphuperrpzcvgi\",\"direction\":\"Output\",\"size\":1216838662},{\"name\":\"datagccqefewof\",\"type\":\"Single\",\"value\":\"dataqkb\",\"direction\":\"Input\",\"size\":987205767},{\"name\":\"datatzxvfsrufjf\",\"type\":\"DateTime\",\"value\":\"datafbzjvzgyzenveiy\",\"direction\":\"Output\",\"size\":737775312}]}],\"logSettings\":{\"logDestination\":\"ActivityOutput\",\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"dumpmxofkbbch\",\"parameters\":{\"blkpteclfjaue\":\"datacskmrvgd\",\"cfgrtgnvlrm\":\"datazpp\"}},\"path\":\"dataz\"}}}")
            .toObject(ScriptActivityTypeProperties.class);
        Assertions.assertEquals(ScriptActivityParameterType.DOUBLE, model.scripts().get(0).parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.OUTPUT,
            model.scripts().get(0).parameters().get(0).direction());
        Assertions.assertEquals(1216838662, model.scripts().get(0).parameters().get(0).size());
        Assertions.assertEquals(ScriptActivityLogDestination.ACTIVITY_OUTPUT, model.logSettings().logDestination());
        Assertions.assertEquals("dumpmxofkbbch",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptActivityTypeProperties model
            = new ScriptActivityTypeProperties().withScriptBlockExecutionTimeout("datadxmplxzrof")
                .withScripts(Arrays.asList(new ScriptActivityScriptBlock().withText("databrt")
                    .withType("datayjqur")
                    .withParameters(Arrays.asList(
                        new ScriptActivityParameter().withName("datazkpumzdatbo")
                            .withType(ScriptActivityParameterType.DOUBLE)
                            .withValue("dataavphuperrpzcvgi")
                            .withDirection(ScriptActivityParameterDirection.OUTPUT)
                            .withSize(1216838662),
                        new ScriptActivityParameter().withName("datagccqefewof")
                            .withType(ScriptActivityParameterType.SINGLE)
                            .withValue("dataqkb")
                            .withDirection(ScriptActivityParameterDirection.INPUT)
                            .withSize(987205767),
                        new ScriptActivityParameter().withName("datatzxvfsrufjf")
                            .withType(ScriptActivityParameterType.DATE_TIME)
                            .withValue("datafbzjvzgyzenveiy")
                            .withDirection(ScriptActivityParameterDirection.OUTPUT)
                            .withSize(737775312)))))
                .withLogSettings(new ScriptActivityTypePropertiesLogSettings()
                    .withLogDestination(ScriptActivityLogDestination.ACTIVITY_OUTPUT)
                    .withLogLocationSettings(new LogLocationSettings()
                        .withLinkedServiceName(new LinkedServiceReference().withReferenceName("dumpmxofkbbch")
                            .withParameters(mapOf("blkpteclfjaue", "datacskmrvgd", "cfgrtgnvlrm", "datazpp")))
                        .withPath("dataz")));
        model = BinaryData.fromObject(model).toObject(ScriptActivityTypeProperties.class);
        Assertions.assertEquals(ScriptActivityParameterType.DOUBLE, model.scripts().get(0).parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.OUTPUT,
            model.scripts().get(0).parameters().get(0).direction());
        Assertions.assertEquals(1216838662, model.scripts().get(0).parameters().get(0).size());
        Assertions.assertEquals(ScriptActivityLogDestination.ACTIVITY_OUTPUT, model.logSettings().logDestination());
        Assertions.assertEquals("dumpmxofkbbch",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
