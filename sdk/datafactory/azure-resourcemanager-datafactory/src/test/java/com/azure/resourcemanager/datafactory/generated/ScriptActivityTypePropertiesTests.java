// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ScriptActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.ScriptActivityLogDestination;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameter;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterDirection;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterType;
import com.azure.resourcemanager.datafactory.models.ScriptActivityScriptBlock;
import com.azure.resourcemanager.datafactory.models.ScriptActivityTypePropertiesLogSettings;
import com.azure.resourcemanager.datafactory.models.ScriptType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptActivityTypeProperties model = BinaryData.fromString(
            "{\"scriptBlockExecutionTimeout\":\"datat\",\"scripts\":[{\"text\":\"datavokvoqjbjdy\",\"type\":\"NonQuery\",\"parameters\":[{\"name\":\"datavyhieteznnlsqym\",\"type\":\"DateTimeOffset\",\"value\":\"datag\",\"direction\":\"InputOutput\",\"size\":1931524739}]},{\"text\":\"datalkkhyf\",\"type\":\"Query\",\"parameters\":[{\"name\":\"datadcdrysanifcf\",\"type\":\"Decimal\",\"value\":\"datazsumgzeb\",\"direction\":\"Output\",\"size\":1582956476},{\"name\":\"datapoantsrspdee\",\"type\":\"Int32\",\"value\":\"datadqlazunedsozj\",\"direction\":\"Input\",\"size\":2031000573},{\"name\":\"dataswxcvwh\",\"type\":\"Decimal\",\"value\":\"dataqzqixsvo\",\"direction\":\"Input\",\"size\":1465142989},{\"name\":\"datasfccfzuzmihifrky\",\"type\":\"Int64\",\"value\":\"datamc\",\"direction\":\"InputOutput\",\"size\":199145977}]},{\"text\":\"dataj\",\"type\":\"NonQuery\",\"parameters\":[{\"name\":\"datadtladfc\",\"type\":\"Int16\",\"value\":\"dataizuegyljw\",\"direction\":\"Input\",\"size\":2086951314},{\"name\":\"datawrvbuphbwais\",\"type\":\"Timespan\",\"value\":\"datagrysjgz\",\"direction\":\"InputOutput\",\"size\":1620731574}]}],\"logSettings\":{\"logDestination\":\"ActivityOutput\",\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"mpfwfdcpeduxydd\",\"parameters\":{\"iapsypgmmi\":\"datadhfpvnkhgga\",\"wg\":\"dataheqmtetn\",\"jwjrpljkcqed\":\"dataeiihabojargetncf\",\"obaaccglvix\":\"dataaeefzlwo\"}},\"path\":\"datacnoeiqhbr\"}}}")
            .toObject(ScriptActivityTypeProperties.class);
        Assertions.assertEquals(ScriptType.NON_QUERY, model.scripts().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterType.DATE_TIME_OFFSET,
            model.scripts().get(0).parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.INPUT_OUTPUT,
            model.scripts().get(0).parameters().get(0).direction());
        Assertions.assertEquals(1931524739, model.scripts().get(0).parameters().get(0).size());
        Assertions.assertEquals(ScriptActivityLogDestination.ACTIVITY_OUTPUT, model.logSettings().logDestination());
        Assertions.assertEquals("mpfwfdcpeduxydd",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptActivityTypeProperties model
            = new ScriptActivityTypeProperties().withScriptBlockExecutionTimeout("datat")
                .withScripts(
                    Arrays.asList(
                        new ScriptActivityScriptBlock().withText("datavokvoqjbjdy").withType(ScriptType.NON_QUERY)
                            .withParameters(Arrays.asList(new ScriptActivityParameter().withName("datavyhieteznnlsqym")
                                .withType(ScriptActivityParameterType.DATE_TIME_OFFSET).withValue("datag")
                                .withDirection(ScriptActivityParameterDirection.INPUT_OUTPUT).withSize(1931524739))),
                        new ScriptActivityScriptBlock().withText("datalkkhyf").withType(ScriptType.QUERY)
                            .withParameters(Arrays.asList(new ScriptActivityParameter().withName("datadcdrysanifcf")
                                .withType(ScriptActivityParameterType.DECIMAL).withValue("datazsumgzeb")
                                .withDirection(ScriptActivityParameterDirection.OUTPUT).withSize(1582956476),
                                new ScriptActivityParameter().withName("datapoantsrspdee")
                                    .withType(ScriptActivityParameterType.INT32).withValue("datadqlazunedsozj")
                                    .withDirection(ScriptActivityParameterDirection.INPUT).withSize(2031000573),
                                new ScriptActivityParameter().withName("dataswxcvwh")
                                    .withType(ScriptActivityParameterType.DECIMAL).withValue("dataqzqixsvo")
                                    .withDirection(ScriptActivityParameterDirection.INPUT).withSize(1465142989),
                                new ScriptActivityParameter().withName("datasfccfzuzmihifrky")
                                    .withType(ScriptActivityParameterType.INT64).withValue("datamc")
                                    .withDirection(ScriptActivityParameterDirection.INPUT_OUTPUT).withSize(199145977))),
                        new ScriptActivityScriptBlock().withText("dataj").withType(ScriptType.NON_QUERY)
                            .withParameters(Arrays.asList(
                                new ScriptActivityParameter().withName("datadtladfc")
                                    .withType(ScriptActivityParameterType.INT16).withValue("dataizuegyljw")
                                    .withDirection(ScriptActivityParameterDirection.INPUT).withSize(2086951314),
                                new ScriptActivityParameter().withName("datawrvbuphbwais")
                                    .withType(ScriptActivityParameterType.TIMESPAN).withValue("datagrysjgz")
                                    .withDirection(ScriptActivityParameterDirection.INPUT_OUTPUT)
                                    .withSize(1620731574)))))
                .withLogSettings(
                    new ScriptActivityTypePropertiesLogSettings()
                        .withLogDestination(ScriptActivityLogDestination.ACTIVITY_OUTPUT)
                        .withLogLocationSettings(new LogLocationSettings()
                            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("mpfwfdcpeduxydd")
                                .withParameters(mapOf("iapsypgmmi", "datadhfpvnkhgga", "wg", "dataheqmtetn",
                                    "jwjrpljkcqed", "dataeiihabojargetncf", "obaaccglvix", "dataaeefzlwo")))
                            .withPath("datacnoeiqhbr")));
        model = BinaryData.fromObject(model).toObject(ScriptActivityTypeProperties.class);
        Assertions.assertEquals(ScriptType.NON_QUERY, model.scripts().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterType.DATE_TIME_OFFSET,
            model.scripts().get(0).parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.INPUT_OUTPUT,
            model.scripts().get(0).parameters().get(0).direction());
        Assertions.assertEquals(1931524739, model.scripts().get(0).parameters().get(0).size());
        Assertions.assertEquals(ScriptActivityLogDestination.ACTIVITY_OUTPUT, model.logSettings().logDestination());
        Assertions.assertEquals("mpfwfdcpeduxydd",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
