// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MariaDBTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MariaDBTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MariaDBTableDataset model = BinaryData.fromString(
            "{\"type\":\"MariaDBTable\",\"typeProperties\":{\"tableName\":\"dataswarmybwmrotge\"},\"description\":\"yqnipehfwwcb\",\"structure\":\"dataxia\",\"schema\":\"datavjucfjisosfzl\",\"linkedServiceName\":{\"referenceName\":\"raxnfyzguax\",\"parameters\":{\"mihuvrqp\":\"datajixgofqdqws\",\"prpensbmz\":\"dataxdoicqpkntly\",\"bfex\":\"dataritukoym\",\"qfzwanduhduw\":\"dataizzjxwj\"}},\"parameters\":{\"dsf\":{\"type\":\"Int\",\"defaultValue\":\"datatqmri\"},\"razhvchvvoyiogb\":{\"type\":\"Array\",\"defaultValue\":\"datakiumjfgoxedr\"},\"smxtlcappnvc\":{\"type\":\"Bool\",\"defaultValue\":\"datawzruzsoowx\"}},\"annotations\":[\"datapciryomhkdwuw\",\"datadupbkmzkwhjjsqw\",\"dataaefe\",\"datavvkxdbnmc\"],\"folder\":{\"name\":\"ycdzdob\"},\"\":{\"tw\":\"datadyvfxnzpfdfup\",\"lewgsltut\":\"datadpsegivytabvbbk\",\"cqsxwclykcrudek\":\"datauvedwuuqbmen\"}}")
            .toObject(MariaDBTableDataset.class);
        Assertions.assertEquals("yqnipehfwwcb", model.description());
        Assertions.assertEquals("raxnfyzguax", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("dsf").type());
        Assertions.assertEquals("ycdzdob", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MariaDBTableDataset model = new MariaDBTableDataset().withDescription("yqnipehfwwcb")
            .withStructure("dataxia")
            .withSchema("datavjucfjisosfzl")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("raxnfyzguax")
                .withParameters(mapOf("mihuvrqp", "datajixgofqdqws", "prpensbmz", "dataxdoicqpkntly", "bfex",
                    "dataritukoym", "qfzwanduhduw", "dataizzjxwj")))
            .withParameters(
                mapOf("dsf", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datatqmri"),
                    "razhvchvvoyiogb",
                    new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datakiumjfgoxedr"),
                    "smxtlcappnvc",
                    new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datawzruzsoowx")))
            .withAnnotations(Arrays.asList("datapciryomhkdwuw", "datadupbkmzkwhjjsqw", "dataaefe", "datavvkxdbnmc"))
            .withFolder(new DatasetFolder().withName("ycdzdob"))
            .withTableName("dataswarmybwmrotge");
        model = BinaryData.fromObject(model).toObject(MariaDBTableDataset.class);
        Assertions.assertEquals("yqnipehfwwcb", model.description());
        Assertions.assertEquals("raxnfyzguax", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("dsf").type());
        Assertions.assertEquals("ycdzdob", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
