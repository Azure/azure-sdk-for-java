// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MariaDBTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MariaDBTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MariaDBTableDataset model = BinaryData.fromString(
            "{\"type\":\"kmzv\",\"typeProperties\":{\"tableName\":\"datatq\"},\"description\":\"qxfblsxy\",\"structure\":\"datag\",\"schema\":\"datad\",\"linkedServiceName\":{\"referenceName\":\"kllefmizdcsrvb\",\"parameters\":{\"cgqbmxbpqcn\":\"datasgfyxhs\"}},\"parameters\":{\"lfpiuuf\":{\"type\":\"String\",\"defaultValue\":\"dataojvmazu\"},\"qrgivbhmnimj\":{\"type\":\"Float\",\"defaultValue\":\"datanco\"},\"fnmmib\":{\"type\":\"Float\",\"defaultValue\":\"datab\"},\"aygumqeobr\":{\"type\":\"String\",\"defaultValue\":\"dataduyrg\"}},\"annotations\":[\"dataudgsawhamigs\"],\"folder\":{\"name\":\"fkiaagwkrx\"},\"\":{\"enubrf\":\"datag\"}}")
            .toObject(MariaDBTableDataset.class);
        Assertions.assertEquals("qxfblsxy", model.description());
        Assertions.assertEquals("kllefmizdcsrvb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("lfpiuuf").type());
        Assertions.assertEquals("fkiaagwkrx", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MariaDBTableDataset model = new MariaDBTableDataset().withDescription("qxfblsxy")
            .withStructure("datag")
            .withSchema("datad")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("kllefmizdcsrvb")
                .withParameters(mapOf("cgqbmxbpqcn", "datasgfyxhs")))
            .withParameters(mapOf("lfpiuuf",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataojvmazu"),
                "qrgivbhmnimj", new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datanco"),
                "fnmmib", new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datab"),
                "aygumqeobr",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataduyrg")))
            .withAnnotations(Arrays.asList("dataudgsawhamigs"))
            .withFolder(new DatasetFolder().withName("fkiaagwkrx"))
            .withTableName("datatq");
        model = BinaryData.fromObject(model).toObject(MariaDBTableDataset.class);
        Assertions.assertEquals("qxfblsxy", model.description());
        Assertions.assertEquals("kllefmizdcsrvb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("lfpiuuf").type());
        Assertions.assertEquals("fkiaagwkrx", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
