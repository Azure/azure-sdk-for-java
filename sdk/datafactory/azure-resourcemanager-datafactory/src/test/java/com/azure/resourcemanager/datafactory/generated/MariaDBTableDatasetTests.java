// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MariaDBTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MariaDBTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MariaDBTableDataset model = BinaryData.fromString(
            "{\"type\":\"MariaDBTable\",\"typeProperties\":{\"tableName\":\"datatmabtpgn\"},\"description\":\"jtn\",\"structure\":\"datajewihcigaahm\",\"schema\":\"dataspkdnx\",\"linkedServiceName\":{\"referenceName\":\"xzxtertn\",\"parameters\":{\"olzjyf\":\"datawsciclhdwienv\",\"aknk\":\"dataryxsg\"}},\"parameters\":{\"vihbmwrv\":{\"type\":\"SecureString\",\"defaultValue\":\"datap\"}},\"annotations\":[\"datarohulobkabhvxjua\",\"datavxznirnygtixkg\"],\"folder\":{\"name\":\"mkphvdl\"},\"\":{\"cltfcieileem\":\"datazpqditu\",\"sgikkmibnmdpid\":\"datatkehldopjsxvbb\",\"styzavkyjjlu\":\"datapwtgzwmzhcmrloqa\",\"bngzldvvd\":\"datanmbj\"}}")
            .toObject(MariaDBTableDataset.class);
        Assertions.assertEquals("jtn", model.description());
        Assertions.assertEquals("xzxtertn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("vihbmwrv").type());
        Assertions.assertEquals("mkphvdl", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MariaDBTableDataset model = new MariaDBTableDataset().withDescription("jtn")
            .withStructure("datajewihcigaahm")
            .withSchema("dataspkdnx")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("xzxtertn")
                .withParameters(mapOf("olzjyf", "datawsciclhdwienv", "aknk", "dataryxsg")))
            .withParameters(mapOf("vihbmwrv",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datap")))
            .withAnnotations(Arrays.asList("datarohulobkabhvxjua", "datavxznirnygtixkg"))
            .withFolder(new DatasetFolder().withName("mkphvdl"))
            .withTableName("datatmabtpgn");
        model = BinaryData.fromObject(model).toObject(MariaDBTableDataset.class);
        Assertions.assertEquals("jtn", model.description());
        Assertions.assertEquals("xzxtertn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("vihbmwrv").type());
        Assertions.assertEquals("mkphvdl", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
