// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MariaDBTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MariaDBTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MariaDBTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"MariaDBTable\",\"typeProperties\":{\"tableName\":\"datax\"},\"description\":\"mlfouqpskva\",\"structure\":\"databpmr\",\"schema\":\"datayjxcqcaczzvw\",\"linkedServiceName\":{\"referenceName\":\"ezttqjqyfy\",\"parameters\":{\"lrzhshhkbchcazk\":\"datayyslgyfybdsvk\"}},\"parameters\":{\"fyyqjc\":{\"type\":\"Float\",\"defaultValue\":\"dataprgfwhfzhhrurm\"},\"sddcuqddlda\":{\"type\":\"Bool\",\"defaultValue\":\"datazq\"},\"ojesxjhtyzzwqocy\":{\"type\":\"Int\",\"defaultValue\":\"datafztqewq\"},\"trgu\":{\"type\":\"Bool\",\"defaultValue\":\"dataineuaxpmez\"}},\"annotations\":[\"dataeo\",\"dataxfoa\",\"datazdypz\"],\"folder\":{\"name\":\"mndhgwhlbpju\"},\"\":{\"mitnwlyhbujysvd\":\"dataqxa\",\"dbhatmabtpgn\":\"datayy\"}}")
                .toObject(MariaDBTableDataset.class);
        Assertions.assertEquals("mlfouqpskva", model.description());
        Assertions.assertEquals("ezttqjqyfy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("fyyqjc").type());
        Assertions.assertEquals("mndhgwhlbpju", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MariaDBTableDataset model =
            new MariaDBTableDataset()
                .withDescription("mlfouqpskva")
                .withStructure("databpmr")
                .withSchema("datayjxcqcaczzvw")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("ezttqjqyfy")
                        .withParameters(mapOf("lrzhshhkbchcazk", "datayyslgyfybdsvk")))
                .withParameters(
                    mapOf(
                        "fyyqjc",
                        new ParameterSpecification()
                            .withType(ParameterType.FLOAT)
                            .withDefaultValue("dataprgfwhfzhhrurm"),
                        "sddcuqddlda",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datazq"),
                        "ojesxjhtyzzwqocy",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datafztqewq"),
                        "trgu",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataineuaxpmez")))
                .withAnnotations(Arrays.asList("dataeo", "dataxfoa", "datazdypz"))
                .withFolder(new DatasetFolder().withName("mndhgwhlbpju"))
                .withTableName("datax");
        model = BinaryData.fromObject(model).toObject(MariaDBTableDataset.class);
        Assertions.assertEquals("mlfouqpskva", model.description());
        Assertions.assertEquals("ezttqjqyfy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("fyyqjc").type());
        Assertions.assertEquals("mndhgwhlbpju", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
