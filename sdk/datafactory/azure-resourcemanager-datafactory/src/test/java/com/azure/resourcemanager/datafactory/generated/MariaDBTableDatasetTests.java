// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MariaDBTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MariaDBTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MariaDBTableDataset model = BinaryData.fromString(
            "{\"type\":\"MariaDBTable\",\"typeProperties\":{\"tableName\":\"datarmrfyyqjcni\"},\"description\":\"qrsdd\",\"structure\":\"dataqddldao\",\"schema\":\"datafztqewq\",\"linkedServiceName\":{\"referenceName\":\"ojesxjhtyzzwqocy\",\"parameters\":{\"trgu\":\"dataineuaxpmez\",\"oyxfoafzdypzlx\":\"datalw\",\"jzqx\":\"datamndhgwhlbpju\",\"lyhbujys\":\"datavmitn\"}},\"parameters\":{\"gnqtjtnnrjewih\":{\"type\":\"Bool\",\"defaultValue\":\"dataddbhatmabt\"},\"hmdfspkdn\":{\"type\":\"String\",\"defaultValue\":\"dataa\"},\"tertnzrrwsc\":{\"type\":\"Int\",\"defaultValue\":\"dataz\"}},\"annotations\":[\"datahdwi\",\"datanvtolzj\"],\"folder\":{\"name\":\"ryxsg\"},\"\":{\"wppvihbmwrv\":\"datanklth\",\"ob\":\"datavdrohu\"}}")
            .toObject(MariaDBTableDataset.class);
        Assertions.assertEquals("qrsdd", model.description());
        Assertions.assertEquals("ojesxjhtyzzwqocy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("gnqtjtnnrjewih").type());
        Assertions.assertEquals("ryxsg", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MariaDBTableDataset model = new MariaDBTableDataset().withDescription("qrsdd")
            .withStructure("dataqddldao")
            .withSchema("datafztqewq")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ojesxjhtyzzwqocy")
                .withParameters(mapOf("trgu", "dataineuaxpmez", "oyxfoafzdypzlx", "datalw", "jzqx", "datamndhgwhlbpju",
                    "lyhbujys", "datavmitn")))
            .withParameters(mapOf("gnqtjtnnrjewih",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataddbhatmabt"),
                "hmdfspkdn", new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataa"),
                "tertnzrrwsc", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataz")))
            .withAnnotations(Arrays.asList("datahdwi", "datanvtolzj"))
            .withFolder(new DatasetFolder().withName("ryxsg"))
            .withTableName("datarmrfyyqjcni");
        model = BinaryData.fromObject(model).toObject(MariaDBTableDataset.class);
        Assertions.assertEquals("qrsdd", model.description());
        Assertions.assertEquals("ojesxjhtyzzwqocy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("gnqtjtnnrjewih").type());
        Assertions.assertEquals("ryxsg", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
