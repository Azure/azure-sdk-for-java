// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ManagedPrivateEndpointResourceInner;
import com.azure.resourcemanager.datafactory.models.ConnectionStateProperties;
import com.azure.resourcemanager.datafactory.models.ManagedPrivateEndpoint;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedPrivateEndpointResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedPrivateEndpointResourceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"connectionState\":{\"actionsRequired\":\"x\",\"description\":\"unin\",\"status\":\"db\"},\"fqdns\":[\"qdtvqecrqctmxx\",\"tddmf\",\"huytxzvtzn\",\"pxbannovvoxc\"],\"groupId\":\"tprwnw\",\"isReserved\":true,\"privateLinkResourceId\":\"vytlyokrrrouuxvn\",\"provisioningState\":\"sbcrymodizrxklo\",\"\":{\"lmv\":\"datanazpmk\",\"zxlioh\":\"datavfxzopjh\",\"dtfgxqbawpcbb\":\"datad\"}},\"name\":\"qcy\",\"type\":\"apqofyuicdhz\",\"etag\":\"ybww\",\"id\":\"d\"}")
                .toObject(ManagedPrivateEndpointResourceInner.class);
        Assertions.assertEquals("d", model.id());
        Assertions.assertEquals("qdtvqecrqctmxx", model.properties().fqdns().get(0));
        Assertions.assertEquals("tprwnw", model.properties().groupId());
        Assertions.assertEquals("vytlyokrrrouuxvn", model.properties().privateLinkResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedPrivateEndpointResourceInner model =
            new ManagedPrivateEndpointResourceInner()
                .withId("d")
                .withProperties(
                    new ManagedPrivateEndpoint()
                        .withConnectionState(new ConnectionStateProperties())
                        .withFqdns(Arrays.asList("qdtvqecrqctmxx", "tddmf", "huytxzvtzn", "pxbannovvoxc"))
                        .withGroupId("tprwnw")
                        .withPrivateLinkResourceId("vytlyokrrrouuxvn")
                        .withAdditionalProperties(mapOf("isReserved", true, "provisioningState", "sbcrymodizrxklo")));
        model = BinaryData.fromObject(model).toObject(ManagedPrivateEndpointResourceInner.class);
        Assertions.assertEquals("d", model.id());
        Assertions.assertEquals("qdtvqecrqctmxx", model.properties().fqdns().get(0));
        Assertions.assertEquals("tprwnw", model.properties().groupId());
        Assertions.assertEquals("vytlyokrrrouuxvn", model.properties().privateLinkResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
