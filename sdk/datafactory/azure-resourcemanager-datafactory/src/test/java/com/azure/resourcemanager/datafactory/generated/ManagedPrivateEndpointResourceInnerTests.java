// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ManagedPrivateEndpointResourceInner;
import com.azure.resourcemanager.datafactory.models.ConnectionStateProperties;
import com.azure.resourcemanager.datafactory.models.ManagedPrivateEndpoint;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedPrivateEndpointResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedPrivateEndpointResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"connectionState\":{\"actionsRequired\":\"ietgbebjfu\",\"description\":\"moichdlpnfpubntn\",\"status\":\"tzviqsowsaaelcat\"},\"fqdns\":[\"uhplrvkmjcwmjv\"],\"groupId\":\"fggc\",\"isReserved\":false,\"privateLinkResourceId\":\"lizrzbjpsfxsfuz\",\"provisioningState\":\"vtmva\",\"\":{\"oveofizrvjfnmj\":\"dataidqlvhu\"}},\"name\":\"lwyzgib\",\"type\":\"ujr\",\"etag\":\"fojuidjpuuyj\",\"id\":\"ejikzoeovvtzejet\"}")
            .toObject(ManagedPrivateEndpointResourceInner.class);
        Assertions.assertEquals("ejikzoeovvtzejet", model.id());
        Assertions.assertEquals("uhplrvkmjcwmjv", model.properties().fqdns().get(0));
        Assertions.assertEquals("fggc", model.properties().groupId());
        Assertions.assertEquals("lizrzbjpsfxsfuz", model.properties().privateLinkResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedPrivateEndpointResourceInner model = new ManagedPrivateEndpointResourceInner().withId("ejikzoeovvtzejet")
            .withProperties(new ManagedPrivateEndpoint().withConnectionState(new ConnectionStateProperties())
                .withFqdns(Arrays.asList("uhplrvkmjcwmjv"))
                .withGroupId("fggc")
                .withPrivateLinkResourceId("lizrzbjpsfxsfuz")
                .withAdditionalProperties(mapOf("isReserved", false, "provisioningState", "vtmva")));
        model = BinaryData.fromObject(model).toObject(ManagedPrivateEndpointResourceInner.class);
        Assertions.assertEquals("ejikzoeovvtzejet", model.id());
        Assertions.assertEquals("uhplrvkmjcwmjv", model.properties().fqdns().get(0));
        Assertions.assertEquals("fggc", model.properties().groupId());
        Assertions.assertEquals("lizrzbjpsfxsfuz", model.properties().privateLinkResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
