// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.SwitchCase;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SwitchCaseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SwitchCase model = BinaryData.fromString(
            "{\"value\":\"kkraenzuufpd\",\"activities\":[{\"type\":\"Activity\",\"name\":\"xephwxd\",\"description\":\"ow\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"jca\",\"dependencyConditions\":[\"Succeeded\",\"Failed\"],\"\":{\"mnqdjfldzvgog\":\"datakvpleoo\",\"aofobjlqnaxfvsy\":\"datauc\",\"bjbknpzhfhi\":\"datastrbje\"}},{\"activity\":\"hgwbslrqbd\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Completed\",\"Completed\"],\"\":{\"ahbzdgwkim\":\"dataijwpskneprumhik\",\"ujxdnia\":\"datavatrvjkxcrxqpen\",\"qytppjdyikdykxh\":\"dataeterjerhwgiuduw\",\"gmuk\":\"datarkdtucyutrp\"}}],\"userProperties\":[{\"name\":\"vftij\",\"value\":\"datas\"},{\"name\":\"lcrjynefx\",\"value\":\"dataednczvn\"},{\"name\":\"yfzavs\",\"value\":\"datajbahshyxhfe\"},{\"name\":\"tywluxysmq\",\"value\":\"dataeo\"}],\"\":{\"qmcaofxg\":\"datalwfsmpbwwphj\"}},{\"type\":\"Activity\",\"name\":\"yvjefnlxqmtedzxu\",\"description\":\"kxjrtt\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"qynwqcov\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Skipped\",\"Skipped\"],\"\":{\"rcmayqasdve\":\"datahhbddxkoj\"}},{\"activity\":\"ldafx\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Completed\",\"Succeeded\"],\"\":{\"dzyjugdkn\":\"datasbcfoguubqcqnc\",\"vpru\":\"datalbrixvcpi\"}},{\"activity\":\"ttrvk\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Completed\"],\"\":{\"jbanlmpmvegxgymx\":\"dataw\",\"lnjeybgpjy\":\"datalrtuegqhq\"}}],\"userProperties\":[{\"name\":\"uowkt\",\"value\":\"databpv\"},{\"name\":\"dkydqcgedip\",\"value\":\"datanzmvttttjm\"},{\"name\":\"tfuwx\",\"value\":\"dataee\"}],\"\":{\"c\":\"dataiesgur\"}},{\"type\":\"Activity\",\"name\":\"pb\",\"description\":\"mttmixewparbazgo\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"wjhjutixggnldfl\",\"dependencyConditions\":[\"Succeeded\",\"Failed\",\"Skipped\"],\"\":{\"klepetsxetne\":\"datacmuvf\",\"lmsxnx\":\"dataerqb\"}},{\"activity\":\"kzcdnipj\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"izkwpo\":\"datavgydtdtomknzotm\"}},{\"activity\":\"askflrqw\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Succeeded\",\"Completed\"],\"\":{\"udiyfix\":\"datarzvnouthbvvcb\",\"rqivqzqcmrxh\":\"dataw\",\"fhijcetcystrs\":\"datalozg\"}}],\"userProperties\":[{\"name\":\"txspaafseqoyo\",\"value\":\"datarlrq\"}],\"\":{\"lgt\":\"dataxh\",\"qky\":\"dataveumwbmqpbfjbsol\",\"xbkckam\":\"datajzbxmg\"}}]}")
            .toObject(SwitchCase.class);
        Assertions.assertEquals("kkraenzuufpd", model.value());
        Assertions.assertEquals("xephwxd", model.activities().get(0).name());
        Assertions.assertEquals("ow", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("jca", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vftij", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SwitchCase model = new SwitchCase().withValue("kkraenzuufpd")
            .withActivities(Arrays.asList(
                new Activity()
                    .withName("xephwxd").withDescription("ow").withState(
                        ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("jca")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("hgwbslrqbd")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED,
                                    DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("vftij").withValue("datas"),
                        new UserProperty().withName("lcrjynefx").withValue("dataednczvn"),
                        new UserProperty().withName("yfzavs").withValue("datajbahshyxhfe"),
                        new UserProperty().withName("tywluxysmq").withValue("dataeo")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("yvjefnlxqmtedzxu").withDescription("kxjrtt").withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("qynwqcov")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                DependencyCondition.FAILED, DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("ldafx")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.FAILED, DependencyCondition.COMPLETED,
                                    DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("ttrvk")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("uowkt").withValue("databpv"),
                        new UserProperty().withName("dkydqcgedip").withValue("datanzmvttttjm"), new UserProperty()
                            .withName("tfuwx").withValue("dataee")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("pb").withDescription("mttmixewparbazgo").withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("wjhjutixggnldfl")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                                DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("kzcdnipj")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("askflrqw")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED,
                                    DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("txspaafseqoyo").withValue("datarlrq")))
                    .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(SwitchCase.class);
        Assertions.assertEquals("kkraenzuufpd", model.value());
        Assertions.assertEquals("xephwxd", model.activities().get(0).name());
        Assertions.assertEquals("ow", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("jca", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vftij", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
