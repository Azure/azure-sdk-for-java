// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.SwitchCase;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SwitchCaseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SwitchCase model = BinaryData.fromString(
            "{\"value\":\"zmxvd\",\"activities\":[{\"type\":\"Activity\",\"name\":\"wyiko\",\"description\":\"epkknyvn\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"onjdhbq\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Succeeded\",\"Completed\"],\"\":{\"aykzwij\":\"dataf\"}},{\"activity\":\"xwmjlmosqh\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Completed\"],\"\":{\"a\":\"datasqruy\",\"zjzhixciv\":\"dataem\",\"clmk\":\"dataokaujj\",\"ceowvirbs\":\"dataswtkhfc\"}}],\"userProperties\":[{\"name\":\"lkhepnm\",\"value\":\"datagczcpoydaifx\"},{\"name\":\"bxqzczcc\",\"value\":\"datalpigpzpl\"},{\"name\":\"aoiid\",\"value\":\"dataknsqdr\"}],\"\":{\"eeuyxxrwovgwqz\":\"dataanpjvqrwl\",\"zsqbckq\":\"dataugsbwqrotpvyt\",\"vy\":\"datateminzn\",\"vi\":\"datacjzkgy\"}},{\"type\":\"Activity\",\"name\":\"eskindgmk\",\"description\":\"uvyuzzw\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"xrnsyv\",\"dependencyConditions\":[\"Failed\",\"Failed\"],\"\":{\"im\":\"datavcogq\"}},{\"activity\":\"cthrrxrki\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"ezufxuugvdbpjo\":\"databmizbev\",\"avlnk\":\"datacpystc\",\"goxfdykezoxh\":\"datamvnvfg\",\"mqmbifpciammpea\":\"dataza\"}},{\"activity\":\"dhebzquqggjxklo\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Failed\",\"Succeeded\"],\"\":{\"nxoxjghumvptb\":\"datajwmisxgji\"}}],\"userProperties\":[{\"name\":\"llvfea\",\"value\":\"datacjuzzzil\"}],\"\":{\"rnxsy\":\"datarnovbgdba\",\"qjinrymzlqircivx\":\"datapilqojdmzejcpz\"}},{\"type\":\"Activity\",\"name\":\"qzmvg\",\"description\":\"tkcvnyik\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"vgxelzuvdyz\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Succeeded\"],\"\":{\"tcxhpntewvfvs\":\"dataqkklzyhavtivefsr\",\"dervnnfieaqbvg\":\"datadmcoxobrv\",\"ubqemrxmr\":\"dataehggeeagbrslbzc\"}},{\"activity\":\"be\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\"],\"\":{\"vgagdnzvo\":\"datawqnwxohb\",\"zcpifasifdtiocsf\":\"datarnqnurunky\",\"borynmadtyhm\":\"datacyyicascvcmthu\"}}],\"userProperties\":[{\"name\":\"oemhvnqwd\",\"value\":\"datahnc\"}],\"\":{\"oatqnhrhxhmtxp\":\"dataqijeq\"}},{\"type\":\"Activity\",\"name\":\"dtmr\",\"description\":\"kntizn\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"ybbkdhwa\",\"dependencyConditions\":[\"Completed\",\"Failed\"],\"\":{\"qnpnpggbuajw\":\"datarviqrzwslioucae\",\"dnmuirtkqztkx\":\"datargq\",\"iegpdhityt\":\"datahixfuuzaczmejf\"}},{\"activity\":\"etwdskocmqhz\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Succeeded\",\"Failed\"],\"\":{\"cyngdgka\":\"datajgfxvjqevmzhk\",\"hrlb\":\"datanxy\"}},{\"activity\":\"hd\",\"dependencyConditions\":[\"Skipped\",\"Completed\"],\"\":{\"h\":\"datacbcxbiis\",\"uuetmqzuen\":\"dataqqaedgwghqq\",\"mj\":\"datallqvroopk\"}},{\"activity\":\"opibaxkywqs\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Failed\"],\"\":{\"inoorabspf\":\"datafzdkpfeupacahlsa\",\"jmwq\":\"datany\",\"bdzdh\":\"datamhfv\"}}],\"userProperties\":[{\"name\":\"fidropfpuc\",\"value\":\"datamdmbysvqbgndfzh\"},{\"name\":\"yxccxeu\",\"value\":\"dataioawrorexicwb\"},{\"name\":\"uppkzuxsbbmxfut\",\"value\":\"datay\"},{\"name\":\"helyopobg\",\"value\":\"datal\"}],\"\":{\"tqhghygzayazr\":\"dataiwjezadkfmpiff\"}}]}")
            .toObject(SwitchCase.class);
        Assertions.assertEquals("zmxvd", model.value());
        Assertions.assertEquals("wyiko", model.activities().get(0).name());
        Assertions.assertEquals("epkknyvn", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("onjdhbq", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("lkhepnm", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SwitchCase model = new SwitchCase().withValue("zmxvd")
            .withActivities(Arrays.asList(
                new Activity().withName("wyiko")
                    .withDescription("epkknyvn")
                    .withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("onjdhbq")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                            DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                        .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("xwmjlmosqh")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                DependencyCondition.FAILED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("lkhepnm").withValue("datagczcpoydaifx"),
                            new UserProperty().withName("bxqzczcc").withValue("datalpigpzpl"),
                            new UserProperty().withName("aoiid").withValue("dataknsqdr")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("eskindgmk")
                    .withDescription("uvyuzzw")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("xrnsyv")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("cthrrxrki")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("dhebzquqggjxklo")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED,
                                    DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("llvfea").withValue("datacjuzzzil")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("qzmvg")
                    .withDescription("tkcvnyik")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("vgxelzuvdyz")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("be")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("oemhvnqwd").withValue("datahnc")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("dtmr")
                    .withDescription("kntizn")
                    .withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("ybbkdhwa")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("etwdskocmqhz")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("hd")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("opibaxkywqs")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("fidropfpuc").withValue("datamdmbysvqbgndfzh"),
                            new UserProperty().withName("yxccxeu").withValue("dataioawrorexicwb"),
                            new UserProperty().withName("uppkzuxsbbmxfut").withValue("datay"),
                            new UserProperty().withName("helyopobg").withValue("datal")))
                    .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(SwitchCase.class);
        Assertions.assertEquals("zmxvd", model.value());
        Assertions.assertEquals("wyiko", model.activities().get(0).name());
        Assertions.assertEquals("epkknyvn", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("onjdhbq", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("lkhepnm", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
