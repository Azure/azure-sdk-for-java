// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.SwitchCase;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SwitchCaseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SwitchCase model = BinaryData.fromString(
            "{\"value\":\"mies\",\"activities\":[{\"type\":\"Activity\",\"name\":\"pcwpbtumttmixe\",\"description\":\"arb\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"vqnkwjhj\",\"dependencyConditions\":[\"Failed\",\"Succeeded\"],\"\":{\"uvfuklepe\":\"datanldflgqsoiunc\",\"etneherqbel\":\"datas\",\"nxhkzc\":\"datas\"}},{\"activity\":\"nipjtduvsvgydtd\",\"dependencyConditions\":[\"Failed\"],\"\":{\"pooaskflrqwfmbk\":\"datazotmiizk\",\"bwudiyfixpwrrqiv\":\"datashbrzvnouthbvv\",\"lozg\":\"datazqcmrxh\",\"yttxspaafs\":\"datafhijcetcystrs\"}},{\"activity\":\"qoyoerlrqtqnx\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"e\":\"dataq\",\"kjzbxmgsxbk\":\"datamwbmqpbfjbsoljqk\",\"eobkmx\":\"datakambdoq\",\"ldxnw\":\"datahmrbjh\"}}],\"userProperties\":[{\"name\":\"czikfx\",\"value\":\"dataaqwnkjyfy\"},{\"name\":\"mbtiugc\",\"value\":\"dataashgryofhuv\"}],\"\":{\"b\":\"datark\",\"jaxkby\":\"dataonuocmxt\"}},{\"type\":\"Activity\",\"name\":\"v\",\"description\":\"pmyvasn\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"yz\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Failed\"],\"\":{\"lmfvqvyzacjxczj\":\"datapy\"}},{\"activity\":\"sixterpbjkhtmm\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Failed\"],\"\":{\"mziwxwwpi\":\"datatrqhncscaynh\"}},{\"activity\":\"wl\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Succeeded\",\"Failed\"],\"\":{\"txfzhvxqotwcfbqz\":\"datahotbsgkliu\",\"hyxxftrfwmxwjc\":\"datazchpjh\"}}],\"userProperties\":[{\"name\":\"kmona\",\"value\":\"dataleof\"},{\"name\":\"xznopk\",\"value\":\"dataoffeutvqgnugiiyc\"},{\"name\":\"jf\",\"value\":\"datakntdynbrf\"},{\"name\":\"crabrqdbxhg\",\"value\":\"datalz\"}],\"\":{\"fziixyxntuz\":\"datavnlubkb\",\"pcmnpo\":\"dataceuz\",\"fayophpudccaqhb\":\"datasqilmvx\",\"rgvzjtvjrrk\":\"datavbutesxufrwiive\"}},{\"type\":\"Activity\",\"name\":\"lweozccdo\",\"description\":\"jnkthehjmij\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"hhci\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Failed\"],\"\":{\"ctcbmnecozvx\":\"datagwqgbv\",\"puwjvju\":\"databztwkz\",\"xdzopfkz\":\"dataxbtkuviuxtyvpve\"}},{\"activity\":\"xjnxznlx\",\"dependencyConditions\":[\"Completed\",\"Completed\",\"Completed\",\"Failed\"],\"\":{\"ktqsbmurb\":\"datatqv\",\"o\":\"databtvsxn\",\"wfjylhmmibaowc\":\"datahlrhjik\"}},{\"activity\":\"bznwegyhzucpixfd\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Failed\"],\"\":{\"hyx\":\"datacbdpyorhqbpfvh\"}},{\"activity\":\"wsnhszmuvarea\",\"dependencyConditions\":[\"Skipped\",\"Completed\"],\"\":{\"npcrsfqwqm\":\"datanmnmqydpieleruoy\"}}],\"userProperties\":[{\"name\":\"j\",\"value\":\"dataonvjur\"},{\"name\":\"czdelqazb\",\"value\":\"dataixg\"}],\"\":{\"uvqacae\":\"databhwwpaec\",\"oqjmo\":\"datavn\",\"brrqxldkhgngyofe\":\"datagdb\",\"ncxkazmydsqvjkfz\":\"datajksmyeegbertf\"}},{\"type\":\"Activity\",\"name\":\"rd\",\"description\":\"wgcmmvvbwrilcyep\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"jkdacuvyec\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Completed\"],\"\":{\"dfy\":\"datalbx\",\"wmehaic\":\"dataywmezoi\",\"v\":\"datakkcpkvujwf\",\"fsiiadfjxfiv\":\"datavvnbbeys\"}}],\"userProperties\":[{\"name\":\"gpt\",\"value\":\"dataxilwnvfb\"}],\"\":{\"kazlekjh\":\"datao\",\"hhkcutxmq\":\"dataawiitxyebidkn\"}}]}")
            .toObject(SwitchCase.class);
        Assertions.assertEquals("mies", model.value());
        Assertions.assertEquals("pcwpbtumttmixe", model.activities().get(0).name());
        Assertions.assertEquals("arb", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("vqnkwjhj", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("czikfx", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SwitchCase model
            = new SwitchCase().withValue("mies")
                .withActivities(
                    Arrays
                        .asList(
                            new Activity().withName("pcwpbtumttmixe")
                                .withDescription("arb")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                                .withDependsOn(
                                    Arrays.asList(
                                        new ActivityDependency().withActivity("vqnkwjhj")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                                DependencyCondition.SUCCEEDED))
                                            .withAdditionalProperties(mapOf()),
                                        new ActivityDependency().withActivity("nipjtduvsvgydtd")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                                            .withAdditionalProperties(mapOf()),
                                        new ActivityDependency().withActivity("qoyoerlrqtqnx")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                                            .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays.asList(new UserProperty().withName("czikfx").withValue("dataaqwnkjyfy"),
                                        new UserProperty().withName("mbtiugc").withValue("dataashgryofhuv")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("v")
                                .withDescription("pmyvasn")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                                .withDependsOn(
                                    Arrays.asList(
                                        new ActivityDependency().withActivity("yz")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                                                DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                                            .withAdditionalProperties(mapOf()),
                                        new ActivityDependency().withActivity("sixterpbjkhtmm")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                                                DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                                            .withAdditionalProperties(mapOf()),
                                        new ActivityDependency().withActivity("wl")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                                                DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED,
                                                DependencyCondition.FAILED))
                                            .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays.asList(new UserProperty().withName("kmona").withValue("dataleof"),
                                        new UserProperty().withName("xznopk").withValue("dataoffeutvqgnugiiyc"),
                                        new UserProperty().withName("jf").withValue("datakntdynbrf"),
                                        new UserProperty().withName("crabrqdbxhg").withValue("datalz")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("lweozccdo")
                                .withDescription("jnkthehjmij")
                                .withState(ActivityState.ACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("hhci")
                                        .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                                            DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("xjnxznlx")
                                        .withDependencyConditions(
                                            Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.COMPLETED,
                                                DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("bznwegyhzucpixfd")
                                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                            DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("wsnhszmuvarea")
                                        .withDependencyConditions(
                                            Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays.asList(new UserProperty().withName("j").withValue("dataonvjur"),
                                        new UserProperty().withName("czdelqazb").withValue("dataixg")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("rd")
                                .withDescription("wgcmmvvbwrilcyep")
                                .withState(ActivityState.ACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                                .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("jkdacuvyec")
                                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                        DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                                    .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays.asList(new UserProperty().withName("gpt").withValue("dataxilwnvfb")))
                                .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(SwitchCase.class);
        Assertions.assertEquals("mies", model.value());
        Assertions.assertEquals("pcwpbtumttmixe", model.activities().get(0).name());
        Assertions.assertEquals("arb", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("vqnkwjhj", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("czikfx", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
