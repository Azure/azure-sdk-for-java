// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CosmosDbSqlApiCollectionDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CosmosDbSqlApiCollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CosmosDbSqlApiCollectionDataset model = BinaryData.fromString(
            "{\"type\":\"grcavqc\",\"typeProperties\":{\"collectionName\":\"datargdqyxaj\"},\"description\":\"zoq\",\"structure\":\"datamqcwwsjnkiixepbn\",\"schema\":\"dataqww\",\"linkedServiceName\":{\"referenceName\":\"fgsqxile\",\"parameters\":{\"uqynttwk\":\"datasewrzne\",\"yd\":\"datahajksbsyogjmqjhg\"}},\"parameters\":{\"xtdlxwmvcdkucp\":{\"type\":\"Array\",\"defaultValue\":\"datavjbssfcriqxz\"}},\"annotations\":[\"dataafr\",\"datargorogeuvmkrspn\"],\"folder\":{\"name\":\"semlzofrsnq\"},\"\":{\"rpub\":\"datapetexutikelpmw\"}}")
            .toObject(CosmosDbSqlApiCollectionDataset.class);
        Assertions.assertEquals("zoq", model.description());
        Assertions.assertEquals("fgsqxile", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("xtdlxwmvcdkucp").type());
        Assertions.assertEquals("semlzofrsnq", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CosmosDbSqlApiCollectionDataset model = new CosmosDbSqlApiCollectionDataset().withDescription("zoq")
            .withStructure("datamqcwwsjnkiixepbn")
            .withSchema("dataqww")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("fgsqxile")
                .withParameters(mapOf("uqynttwk", "datasewrzne", "yd", "datahajksbsyogjmqjhg")))
            .withParameters(mapOf("xtdlxwmvcdkucp",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datavjbssfcriqxz")))
            .withAnnotations(Arrays.asList("dataafr", "datargorogeuvmkrspn"))
            .withFolder(new DatasetFolder().withName("semlzofrsnq"))
            .withCollectionName("datargdqyxaj");
        model = BinaryData.fromObject(model).toObject(CosmosDbSqlApiCollectionDataset.class);
        Assertions.assertEquals("zoq", model.description());
        Assertions.assertEquals("fgsqxile", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("xtdlxwmvcdkucp").type());
        Assertions.assertEquals("semlzofrsnq", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
