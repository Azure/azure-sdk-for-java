// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CosmosDbSqlApiCollectionDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CosmosDbSqlApiCollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CosmosDbSqlApiCollectionDataset model = BinaryData.fromString(
            "{\"type\":\"CosmosDbSqlApiCollection\",\"typeProperties\":{\"collectionName\":\"datahefr\"},\"description\":\"s\",\"structure\":\"dataerbgpxeb\",\"schema\":\"dataudcaytujrax\",\"linkedServiceName\":{\"referenceName\":\"tpryjmgtn\",\"parameters\":{\"s\":\"dataouxly\"}},\"parameters\":{\"sehq\":{\"type\":\"Object\",\"defaultValue\":\"dataurkep\"},\"erxxxoteehkhowgo\":{\"type\":\"String\",\"defaultValue\":\"datampctwjwdsdlzmk\"},\"c\":{\"type\":\"Int\",\"defaultValue\":\"datahxow\"},\"ylqlocvvujexaygl\":{\"type\":\"Bool\",\"defaultValue\":\"datanpxraqawbmpspf\"}},\"annotations\":[\"datagjnm\"],\"folder\":{\"name\":\"slavxjfiuof\"},\"\":{\"kyhydvikmf\":\"dataidzlvssqywjopa\",\"izwgsoriobijeiyd\":\"datagpmillxgjs\",\"okayrg\":\"dataeuynh\",\"weoftnorw\":\"dataybriop\"}}")
            .toObject(CosmosDbSqlApiCollectionDataset.class);
        Assertions.assertEquals("s", model.description());
        Assertions.assertEquals("tpryjmgtn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("sehq").type());
        Assertions.assertEquals("slavxjfiuof", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CosmosDbSqlApiCollectionDataset model = new CosmosDbSqlApiCollectionDataset().withDescription("s")
            .withStructure("dataerbgpxeb")
            .withSchema("dataudcaytujrax")
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("tpryjmgtn").withParameters(mapOf("s", "dataouxly")))
            .withParameters(
                mapOf("sehq", new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataurkep"),
                    "erxxxoteehkhowgo",
                    new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datampctwjwdsdlzmk"),
                    "c", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datahxow"),
                    "ylqlocvvujexaygl",
                    new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datanpxraqawbmpspf")))
            .withAnnotations(Arrays.asList("datagjnm"))
            .withFolder(new DatasetFolder().withName("slavxjfiuof"))
            .withCollectionName("datahefr");
        model = BinaryData.fromObject(model).toObject(CosmosDbSqlApiCollectionDataset.class);
        Assertions.assertEquals("s", model.description());
        Assertions.assertEquals("tpryjmgtn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("sehq").type());
        Assertions.assertEquals("slavxjfiuof", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
