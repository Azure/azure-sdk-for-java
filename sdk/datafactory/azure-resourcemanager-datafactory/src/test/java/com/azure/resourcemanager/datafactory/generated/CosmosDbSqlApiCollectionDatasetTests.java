// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CosmosDbSqlApiCollectionDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CosmosDbSqlApiCollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CosmosDbSqlApiCollectionDataset model = BinaryData.fromString(
            "{\"type\":\"CosmosDbSqlApiCollection\",\"typeProperties\":{\"collectionName\":\"dataavdostw\"},\"description\":\"ufmwelvx\",\"structure\":\"datazzkw\",\"schema\":\"datalcjgpvcqzvzrbvg\",\"linkedServiceName\":{\"referenceName\":\"x\",\"parameters\":{\"drwynbgovazoym\":\"datarmxv\"}},\"parameters\":{\"dkatveqmgk\":{\"type\":\"String\",\"defaultValue\":\"datalkhw\"},\"buklvsmfasg\":{\"type\":\"Bool\",\"defaultValue\":\"datazeyxryearmhp\"}},\"annotations\":[\"datahqpoilosja\"],\"folder\":{\"name\":\"ez\"},\"\":{\"kjyghztms\":\"datatmhllp\"}}")
            .toObject(CosmosDbSqlApiCollectionDataset.class);
        Assertions.assertEquals("ufmwelvx", model.description());
        Assertions.assertEquals("x", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("dkatveqmgk").type());
        Assertions.assertEquals("ez", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CosmosDbSqlApiCollectionDataset model = new CosmosDbSqlApiCollectionDataset().withDescription("ufmwelvx")
            .withStructure("datazzkw")
            .withSchema("datalcjgpvcqzvzrbvg")
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("x").withParameters(mapOf("drwynbgovazoym", "datarmxv")))
            .withParameters(mapOf("dkatveqmgk",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datalkhw"), "buklvsmfasg",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datazeyxryearmhp")))
            .withAnnotations(Arrays.asList("datahqpoilosja"))
            .withFolder(new DatasetFolder().withName("ez"))
            .withCollectionName("dataavdostw");
        model = BinaryData.fromObject(model).toObject(CosmosDbSqlApiCollectionDataset.class);
        Assertions.assertEquals("ufmwelvx", model.description());
        Assertions.assertEquals("x", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("dkatveqmgk").type());
        Assertions.assertEquals("ez", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
