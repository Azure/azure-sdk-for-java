// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatabricksSparkJarActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatabricksSparkJarActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatabricksSparkJarActivity model = BinaryData.fromString(
            "{\"type\":\"DatabricksSparkJar\",\"typeProperties\":{\"mainClassName\":\"databtymhh\",\"parameters\":[\"datacmwix\",\"datarvrpujb\"],\"libraries\":[{\"gteihmvxupqfaww\":\"datay\",\"snynvgf\":\"dataxqjhmfyvgmdwv\"}]},\"linkedServiceName\":{\"referenceName\":\"tokipndek\",\"parameters\":{\"rotnvxyeqdin\":\"datadrkddzkki\",\"xlpgrvtzj\":\"dataqsejtqoxeth\"}},\"policy\":{\"timeout\":\"datasrejqwylh\",\"retry\":\"datamho\",\"retryIntervalInSeconds\":1180067892,\"secureInput\":true,\"secureOutput\":false,\"\":{\"xtxhxfsknmrce\":\"dataomxyxnben\",\"woflfniislohftm\":\"datadfbdxwywdyqpkw\",\"rxryaicyvtsg\":\"datam\",\"qopoe\":\"datapmatubtejipqynrl\"}},\"name\":\"qf\",\"description\":\"xthcdzeuck\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"nikoybr\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Skipped\"],\"\":{\"ymis\":\"datatzhiku\",\"l\":\"dataoxmzvlofzdnvsr\"}},{\"activity\":\"wzuj\",\"dependencyConditions\":[\"Completed\"],\"\":{\"cxtxgrhaqbst\":\"datavxrqegk\",\"sffeql\":\"datadeuvsbsdcoq\",\"rjrx\":\"datakpvsij\",\"occeyeqsehkq\":\"datacnfyknx\"}},{\"activity\":\"lldeksgejmpkqtj\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Succeeded\",\"Completed\"],\"\":{\"uoqbclhn\":\"datahpkaamoovrbv\",\"kzhqpkckwaafu\":\"dataqxuxrggx\",\"hpijurqoihxibji\":\"datascjaw\"}},{\"activity\":\"m\",\"dependencyConditions\":[\"Completed\"],\"\":{\"nbluxomzg\":\"datafurdjjzsijmsaa\",\"wuiopgyunf\":\"datajmnvukovxfkxnevc\"}}],\"userProperties\":[{\"name\":\"oycg\",\"value\":\"datakik\"},{\"name\":\"q\",\"value\":\"datadiihmpmfa\"},{\"name\":\"inodekp\",\"value\":\"datacpwcxfnuysrvxaym\"},{\"name\":\"ldorqprjevueyzg\",\"value\":\"datassog\"}],\"\":{\"eoma\":\"datavfvirgbguewtcq\",\"ojmxbyviykwrffxo\":\"datanwsgauwe\",\"cxpzje\":\"datawx\",\"npuquyatvsnkrxh\":\"dataoyqlcvtdyuozmtsj\"}}")
            .toObject(DatabricksSparkJarActivity.class);
        Assertions.assertEquals("qf", model.name());
        Assertions.assertEquals("xthcdzeuck", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("nikoybr", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("oycg", model.userProperties().get(0).name());
        Assertions.assertEquals("tokipndek", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1180067892, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatabricksSparkJarActivity model = new DatabricksSparkJarActivity().withName("qf")
            .withDescription("xthcdzeuck")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("nikoybr")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("wzuj")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("lldeksgejmpkqtj")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("m")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("oycg").withValue("datakik"),
                new UserProperty().withName("q").withValue("datadiihmpmfa"),
                new UserProperty().withName("inodekp").withValue("datacpwcxfnuysrvxaym"),
                new UserProperty().withName("ldorqprjevueyzg").withValue("datassog")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("tokipndek")
                .withParameters(mapOf("rotnvxyeqdin", "datadrkddzkki", "xlpgrvtzj", "dataqsejtqoxeth")))
            .withPolicy(new ActivityPolicy().withTimeout("datasrejqwylh")
                .withRetry("datamho")
                .withRetryIntervalInSeconds(1180067892)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withMainClassName("databtymhh")
            .withParameters(Arrays.asList("datacmwix", "datarvrpujb"))
            .withLibraries(Arrays.asList(mapOf("gteihmvxupqfaww", "datay", "snynvgf", "dataxqjhmfyvgmdwv")));
        model = BinaryData.fromObject(model).toObject(DatabricksSparkJarActivity.class);
        Assertions.assertEquals("qf", model.name());
        Assertions.assertEquals("xthcdzeuck", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("nikoybr", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("oycg", model.userProperties().get(0).name());
        Assertions.assertEquals("tokipndek", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1180067892, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
