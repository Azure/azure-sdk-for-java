// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatabricksSparkJarActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatabricksSparkJarActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatabricksSparkJarActivity model = BinaryData.fromString(
            "{\"type\":\"DatabricksSparkJar\",\"typeProperties\":{\"mainClassName\":\"dataaquiuzsnjjgnmpuq\",\"parameters\":[\"datavdaj\",\"dataczlvcxmtwtbr\"],\"libraries\":[{\"lszcwomayr\":\"datagkxzxwjzleeup\"},{\"fxnxtiwinn\":\"datatrjpar\",\"zgmfnpeluvxs\":\"dataowihsgt\"}]},\"linkedServiceName\":{\"referenceName\":\"p\",\"parameters\":{\"fjjg\":\"dataupngorwvayrgu\",\"fwgrubofhkbjgx\":\"dataf\"}},\"policy\":{\"timeout\":\"datapxjnrujdskkkzqla\",\"retry\":\"databsjirhaqedfua\",\"retryIntervalInSeconds\":1077893342,\"secureInput\":true,\"secureOutput\":true,\"\":{\"hjvmjfrp\":\"datapc\",\"gff\":\"datadxsjceyye\",\"ksmxvevudywnyuy\":\"datantrbnvwhqctqdyfu\"}},\"name\":\"naynlxwukpqcf\",\"description\":\"agtiyvdsl\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"zmzbaqrxz\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Failed\",\"Completed\"],\"\":{\"qwhuepyrfjzyin\":\"dataykekbd\",\"sqk\":\"datauuabe\",\"hryrifhuya\":\"datatb\",\"nfakcchcnmzvhdu\":\"datahesqnvsqteprs\"}}],\"userProperties\":[{\"name\":\"adpqp\",\"value\":\"datahgvwggy\"},{\"name\":\"bmfrxofxuys\",\"value\":\"datawvdqzfgd\"},{\"name\":\"yrppsowdo\",\"value\":\"dataiotgfitbpaircn\"},{\"name\":\"pmzpitziejoebz\",\"value\":\"datafmmce\"}],\"\":{\"kpqnpdlcyjse\":\"datafhjrsxrmlxszx\",\"umlfdxetqknzev\":\"datadfhnhbktobeonl\"}}")
            .toObject(DatabricksSparkJarActivity.class);
        Assertions.assertEquals("naynlxwukpqcf", model.name());
        Assertions.assertEquals("agtiyvdsl", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("zmzbaqrxz", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("adpqp", model.userProperties().get(0).name());
        Assertions.assertEquals("p", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1077893342, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatabricksSparkJarActivity model = new DatabricksSparkJarActivity().withName("naynlxwukpqcf")
            .withDescription("agtiyvdsl")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("zmzbaqrxz")
                .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED,
                    DependencyCondition.FAILED, DependencyCondition.COMPLETED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("adpqp").withValue("datahgvwggy"),
                new UserProperty().withName("bmfrxofxuys").withValue("datawvdqzfgd"),
                new UserProperty().withName("yrppsowdo").withValue("dataiotgfitbpaircn"),
                new UserProperty().withName("pmzpitziejoebz").withValue("datafmmce")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("p")
                .withParameters(mapOf("fjjg", "dataupngorwvayrgu", "fwgrubofhkbjgx", "dataf")))
            .withPolicy(new ActivityPolicy().withTimeout("datapxjnrujdskkkzqla")
                .withRetry("databsjirhaqedfua")
                .withRetryIntervalInSeconds(1077893342)
                .withSecureInput(true)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withMainClassName("dataaquiuzsnjjgnmpuq")
            .withParameters(Arrays.asList("datavdaj", "dataczlvcxmtwtbr"))
            .withLibraries(Arrays.asList(mapOf("lszcwomayr", "datagkxzxwjzleeup"),
                mapOf("fxnxtiwinn", "datatrjpar", "zgmfnpeluvxs", "dataowihsgt")));
        model = BinaryData.fromObject(model).toObject(DatabricksSparkJarActivity.class);
        Assertions.assertEquals("naynlxwukpqcf", model.name());
        Assertions.assertEquals("agtiyvdsl", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("zmzbaqrxz", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("adpqp", model.userProperties().get(0).name());
        Assertions.assertEquals("p", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1077893342, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
