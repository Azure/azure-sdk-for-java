// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.GreenplumTableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GreenplumTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GreenplumTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"GreenplumTable\",\"typeProperties\":{\"tableName\":\"datafpxeswctlfytb\",\"table\":\"dataytvnpbgcesfd\",\"schema\":\"dataclmowurofo\"},\"description\":\"b\",\"structure\":\"datazzwweoblb\",\"schema\":\"dataq\",\"linkedServiceName\":{\"referenceName\":\"hixcc\",\"parameters\":{\"xmyqzyqepgbb\":\"datasogvy\",\"dpwmgwxwukfjvqg\":\"datadsluokcevoxd\",\"gyphheovejkpalec\":\"dataaxseisvv\",\"pu\":\"datatlthrt\"}},\"parameters\":{\"oll\":{\"type\":\"Object\",\"defaultValue\":\"datagrqefnq\"}},\"annotations\":[\"datarmuzemb\",\"dataqieh\",\"datahjofy\"],\"folder\":{\"name\":\"axoxlorx\"},\"\":{\"glyyhrgmabspmlu\":\"dataqcxuthvp\",\"kedputocrb\":\"datayju\"}}")
                .toObject(GreenplumTableDataset.class);
        Assertions.assertEquals("b", model.description());
        Assertions.assertEquals("hixcc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("oll").type());
        Assertions.assertEquals("axoxlorx", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GreenplumTableDataset model =
            new GreenplumTableDataset()
                .withDescription("b")
                .withStructure("datazzwweoblb")
                .withSchema("dataq")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("hixcc")
                        .withParameters(
                            mapOf(
                                "xmyqzyqepgbb",
                                "datasogvy",
                                "dpwmgwxwukfjvqg",
                                "datadsluokcevoxd",
                                "gyphheovejkpalec",
                                "dataaxseisvv",
                                "pu",
                                "datatlthrt")))
                .withParameters(
                    mapOf(
                        "oll",
                        new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datagrqefnq")))
                .withAnnotations(Arrays.asList("datarmuzemb", "dataqieh", "datahjofy"))
                .withFolder(new DatasetFolder().withName("axoxlorx"))
                .withTableName("datafpxeswctlfytb")
                .withTable("dataytvnpbgcesfd")
                .withSchemaTypePropertiesSchema("dataclmowurofo");
        model = BinaryData.fromObject(model).toObject(GreenplumTableDataset.class);
        Assertions.assertEquals("b", model.description());
        Assertions.assertEquals("hixcc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("oll").type());
        Assertions.assertEquals("axoxlorx", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
