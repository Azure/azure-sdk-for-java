// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.GreenplumTableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GreenplumTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GreenplumTableDataset model = BinaryData.fromString(
            "{\"type\":\"GreenplumTable\",\"typeProperties\":{\"tableName\":\"dataypngocbd\",\"table\":\"datarivptbczsu\",\"schema\":\"datarzukekytkzvtv\"},\"description\":\"atvogpycein\",\"structure\":\"datarhbd\",\"schema\":\"databyp\",\"linkedServiceName\":{\"referenceName\":\"s\",\"parameters\":{\"bqpsezsggd\":\"datafjuda\"}},\"parameters\":{\"fzrguzliyv\":{\"type\":\"String\",\"defaultValue\":\"databrtsrdplqdyzacia\"},\"djuljgxotuda\":{\"type\":\"SecureString\",\"defaultValue\":\"datasinva\"},\"ifgs\":{\"type\":\"Bool\",\"defaultValue\":\"datayaosthulzu\"},\"cygimizl\":{\"type\":\"Int\",\"defaultValue\":\"datadlnoc\"}},\"annotations\":[\"databwmgksrlmspp\",\"dataoeszthjtryjsk\",\"dataiylgzzu\",\"dataixpsybqowgvmxw\"],\"folder\":{\"name\":\"xdhkoex\"},\"\":{\"wscmneev\":\"datagnaka\"}}")
            .toObject(GreenplumTableDataset.class);
        Assertions.assertEquals("atvogpycein", model.description());
        Assertions.assertEquals("s", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("fzrguzliyv").type());
        Assertions.assertEquals("xdhkoex", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GreenplumTableDataset model = new GreenplumTableDataset().withDescription("atvogpycein")
            .withStructure("datarhbd")
            .withSchema("databyp")
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("s").withParameters(mapOf("bqpsezsggd", "datafjuda")))
            .withParameters(mapOf("fzrguzliyv",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("databrtsrdplqdyzacia"),
                "djuljgxotuda",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datasinva"),
                "ifgs", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datayaosthulzu"),
                "cygimizl", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datadlnoc")))
            .withAnnotations(
                Arrays.asList("databwmgksrlmspp", "dataoeszthjtryjsk", "dataiylgzzu", "dataixpsybqowgvmxw"))
            .withFolder(new DatasetFolder().withName("xdhkoex"))
            .withTableName("dataypngocbd")
            .withTable("datarivptbczsu")
            .withSchemaTypePropertiesSchema("datarzukekytkzvtv");
        model = BinaryData.fromObject(model).toObject(GreenplumTableDataset.class);
        Assertions.assertEquals("atvogpycein", model.description());
        Assertions.assertEquals("s", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("fzrguzliyv").type());
        Assertions.assertEquals("xdhkoex", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
