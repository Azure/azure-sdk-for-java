// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.GreenplumTableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GreenplumTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GreenplumTableDataset model = BinaryData.fromString(
            "{\"type\":\"cltfcieileem\",\"typeProperties\":{\"tableName\":\"databmk\",\"table\":\"datavdlor\",\"schema\":\"datapqdit\"},\"description\":\"kehldopjsxvbbwsg\",\"structure\":\"datakm\",\"schema\":\"datanmdpidipwtgzw\",\"linkedServiceName\":{\"referenceName\":\"zhcmrl\",\"parameters\":{\"tyzavkyjjl\":\"datav\"}},\"parameters\":{\"ythctox\":{\"type\":\"Bool\",\"defaultValue\":\"datajqbngzldvvdkop\"}},\"annotations\":[\"datamqnerwh\"],\"folder\":{\"name\":\"idsssfzsgz\"},\"\":{\"ogdblwjsbaqxaxt\":\"datapejomeqgxhwisp\",\"i\":\"dataxirppbiichlygkv\",\"ni\":\"datawonkrnizdxywabki\"}}")
            .toObject(GreenplumTableDataset.class);
        Assertions.assertEquals("kehldopjsxvbbwsg", model.description());
        Assertions.assertEquals("zhcmrl", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("ythctox").type());
        Assertions.assertEquals("idsssfzsgz", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GreenplumTableDataset model = new GreenplumTableDataset().withDescription("kehldopjsxvbbwsg")
            .withStructure("datakm")
            .withSchema("datanmdpidipwtgzw")
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("zhcmrl").withParameters(mapOf("tyzavkyjjl", "datav")))
            .withParameters(mapOf("ythctox",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datajqbngzldvvdkop")))
            .withAnnotations(Arrays.asList("datamqnerwh"))
            .withFolder(new DatasetFolder().withName("idsssfzsgz"))
            .withTableName("databmk")
            .withTable("datavdlor")
            .withSchemaTypePropertiesSchema("datapqdit");
        model = BinaryData.fromObject(model).toObject(GreenplumTableDataset.class);
        Assertions.assertEquals("kehldopjsxvbbwsg", model.description());
        Assertions.assertEquals("zhcmrl", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("ythctox").type());
        Assertions.assertEquals("idsssfzsgz", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
