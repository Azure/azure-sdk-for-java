// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.GreenplumTableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GreenplumTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GreenplumTableDataset model = BinaryData.fromString(
            "{\"type\":\"GreenplumTable\",\"typeProperties\":{\"tableName\":\"dataihsujtg\",\"table\":\"databszam\",\"schema\":\"dataxejpd\"},\"description\":\"iqwzutiyelrn\",\"structure\":\"datajt\",\"schema\":\"dataqsznsyovqm\",\"linkedServiceName\":{\"referenceName\":\"cudptoqwrnf\",\"parameters\":{\"kngejjxumowy\":\"datathlokmxwawfu\",\"drsjtmn\":\"datajmoozmxuk\"}},\"parameters\":{\"zcfdtstiaxtyrnu\":{\"type\":\"Bool\",\"defaultValue\":\"dataw\"},\"cmlroiommemso\":{\"type\":\"SecureString\",\"defaultValue\":\"datahepisq\"},\"ckcesrsi\":{\"type\":\"Bool\",\"defaultValue\":\"datalcyeqdobobaqcabe\"}},\"annotations\":[\"datalpjcxbjgfmyqyyfr\"],\"folder\":{\"name\":\"zfpsf\"},\"\":{\"qafz\":\"dataidfhmlxrqkeknum\",\"p\":\"dataptriysjrgtruwpu\",\"vvoydwedggwg\":\"datarcek\",\"oarsrdr\":\"datalvbwatzadrjbjn\"}}")
            .toObject(GreenplumTableDataset.class);
        Assertions.assertEquals("iqwzutiyelrn", model.description());
        Assertions.assertEquals("cudptoqwrnf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("zcfdtstiaxtyrnu").type());
        Assertions.assertEquals("zfpsf", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GreenplumTableDataset model = new GreenplumTableDataset().withDescription("iqwzutiyelrn")
            .withStructure("datajt")
            .withSchema("dataqsznsyovqm")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("cudptoqwrnf")
                .withParameters(mapOf("kngejjxumowy", "datathlokmxwawfu", "drsjtmn", "datajmoozmxuk")))
            .withParameters(mapOf("zcfdtstiaxtyrnu",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataw"), "cmlroiommemso",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datahepisq"),
                "ckcesrsi",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datalcyeqdobobaqcabe")))
            .withAnnotations(Arrays.asList("datalpjcxbjgfmyqyyfr"))
            .withFolder(new DatasetFolder().withName("zfpsf"))
            .withTableName("dataihsujtg")
            .withTable("databszam")
            .withSchemaTypePropertiesSchema("dataxejpd");
        model = BinaryData.fromObject(model).toObject(GreenplumTableDataset.class);
        Assertions.assertEquals("iqwzutiyelrn", model.description());
        Assertions.assertEquals("cudptoqwrnf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("zcfdtstiaxtyrnu").type());
        Assertions.assertEquals("zfpsf", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
