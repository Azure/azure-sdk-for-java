// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BinaryReadSettings;
import com.azure.resourcemanager.datafactory.models.BinarySource;
import com.azure.resourcemanager.datafactory.models.CompressionReadSettings;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import java.util.HashMap;
import java.util.Map;

public final class BinarySourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BinarySource model =
            BinaryData
                .fromString(
                    "{\"type\":\"BinarySource\",\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"datadnok\",\"disableMetricsCollection\":\"datagiecjyftsn\",\"\":{\"tjc\":\"dataz\",\"xxbkqmagpdsuyy\":\"dataa\"}},\"formatSettings\":{\"type\":\"BinaryReadSettings\",\"compressionProperties\":{\"type\":\"CompressionReadSettings\",\"\":{\"hhvgddfzcnylz\":\"dataoox\",\"degfhofo\":\"datalhufsgcpwrtg\"}},\"\":{\"otjj\":\"dataiuik\",\"snr\":\"dataecxvkqjpovjvvx\",\"flqwqcxyiqppacji\":\"datawrbmhjm\",\"jzgnla\":\"datarllacylbtkxe\"}},\"sourceRetryCount\":\"datattexaugoj\",\"sourceRetryWait\":\"datajezr\",\"maxConcurrentConnections\":\"datao\",\"disableMetricsCollection\":\"datawlntenhnqtvx\",\"\":{\"lceo\":\"dataehhehotqorrv\",\"gjir\":\"datalyugzl\"}}")
                .toObject(BinarySource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BinarySource model =
            new BinarySource()
                .withSourceRetryCount("datattexaugoj")
                .withSourceRetryWait("datajezr")
                .withMaxConcurrentConnections("datao")
                .withDisableMetricsCollection("datawlntenhnqtvx")
                .withStoreSettings(
                    new StoreReadSettings()
                        .withMaxConcurrentConnections("datadnok")
                        .withDisableMetricsCollection("datagiecjyftsn")
                        .withAdditionalProperties(mapOf("type", "StoreReadSettings")))
                .withFormatSettings(
                    new BinaryReadSettings()
                        .withCompressionProperties(
                            new CompressionReadSettings()
                                .withAdditionalProperties(mapOf("type", "CompressionReadSettings"))));
        model = BinaryData.fromObject(model).toObject(BinarySource.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
