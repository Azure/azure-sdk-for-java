// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BinaryReadSettings;
import com.azure.resourcemanager.datafactory.models.BinarySource;
import com.azure.resourcemanager.datafactory.models.CompressionReadSettings;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;

public final class BinarySourceTests {
    @Test
    public void testDeserialize() {
        BinarySource model =
            BinaryData
                .fromString(
                    "{\"type\":\"BinarySource\",\"storeSettings\":{\"type\":\"StoreReadSettings\",\"\":{}},\"formatSettings\":{\"type\":\"BinaryReadSettings\",\"compressionProperties\":{\"type\":\"CompressionReadSettings\",\"\":{}},\"\":{}},\"\":{}}")
                .toObject(BinarySource.class);
    }

    @Test
    public void testSerialize() {
        BinarySource model =
            new BinarySource()
                .withStoreSettings(new StoreReadSettings().withAdditionalProperties(mapOf("type", "StoreReadSettings")))
                .withFormatSettings(
                    new BinaryReadSettings()
                        .withCompressionProperties(
                            new CompressionReadSettings()
                                .withAdditionalProperties(mapOf("type", "CompressionReadSettings"))));
        model = BinaryData.fromObject(model).toObject(BinarySource.class);
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
