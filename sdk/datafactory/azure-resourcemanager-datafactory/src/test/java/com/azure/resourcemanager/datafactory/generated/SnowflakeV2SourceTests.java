// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.SnowflakeExportCopyCommand;
import com.azure.resourcemanager.datafactory.models.SnowflakeV2Source;
import java.util.HashMap;
import java.util.Map;

public final class SnowflakeV2SourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeV2Source model = BinaryData.fromString(
            "{\"type\":\"SnowflakeV2Source\",\"query\":\"dataveserltlhcjgjuop\",\"exportSettings\":{\"type\":\"SnowflakeExportCopyCommand\",\"additionalCopyOptions\":{\"f\":\"datamspk\",\"weiqvhfyvkxgo\":\"datadmbxfy\",\"cuxwnojvcrgqmbn\":\"datasvei\"},\"additionalFormatOptions\":{\"psy\":\"datagttdcfja\",\"xnujwffthbziieo\":\"datavcksznngguucpyt\"},\"storageIntegration\":\"databccccrauabdevj\",\"\":{\"bksvvyvoibvvuqwl\":\"datacdxqgsteek\"}},\"sourceRetryCount\":\"datazpyukrwvvhcgtc\",\"sourceRetryWait\":\"dataqdcgobkcebzrtput\",\"maxConcurrentConnections\":\"dataj\",\"disableMetricsCollection\":\"datalkwtnq\",\"\":{\"qt\":\"datackmfxl\",\"dpwlezbfgull\":\"dataandejnemrfqjh\",\"ggk\":\"datapcijyxcmq\"}}")
            .toObject(SnowflakeV2Source.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeV2Source model = new SnowflakeV2Source().withSourceRetryCount("datazpyukrwvvhcgtc")
            .withSourceRetryWait("dataqdcgobkcebzrtput")
            .withMaxConcurrentConnections("dataj")
            .withDisableMetricsCollection("datalkwtnq")
            .withQuery("dataveserltlhcjgjuop")
            .withExportSettings(new SnowflakeExportCopyCommand()
                .withAdditionalCopyOptions(
                    mapOf("f", "datamspk", "weiqvhfyvkxgo", "datadmbxfy", "cuxwnojvcrgqmbn", "datasvei"))
                .withAdditionalFormatOptions(mapOf("psy", "datagttdcfja", "xnujwffthbziieo", "datavcksznngguucpyt"))
                .withStorageIntegration("databccccrauabdevj"));
        model = BinaryData.fromObject(model).toObject(SnowflakeV2Source.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
