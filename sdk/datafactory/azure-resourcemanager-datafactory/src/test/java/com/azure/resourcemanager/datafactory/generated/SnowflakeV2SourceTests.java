// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.SnowflakeExportCopyCommand;
import com.azure.resourcemanager.datafactory.models.SnowflakeV2Source;
import java.util.HashMap;
import java.util.Map;

public final class SnowflakeV2SourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeV2Source model = BinaryData.fromString(
            "{\"type\":\"SnowflakeV2Source\",\"query\":\"datatetzvqtcesvcsby\",\"exportSettings\":{\"type\":\"SnowflakeExportCopyCommand\",\"additionalCopyOptions\":{\"hm\":\"datagswduzpdnbzqwe\"},\"additionalFormatOptions\":{\"rqtm\":\"datahxadmauanx\",\"sh\":\"dataaerhx\",\"b\":\"databrkhjjbwelicr\"},\"\":{\"kddxljjzdbzk\":\"dataoguypmselwszqve\",\"nkiygpqxqevtfdv\":\"datawgwvkujshc\",\"gsa\":\"dataypjkjirvj\"}},\"sourceRetryCount\":\"datajlhn\",\"sourceRetryWait\":\"datauaeokympwquutl\",\"maxConcurrentConnections\":\"datafuzthszjy\",\"disableMetricsCollection\":\"datahsliqeft\",\"\":{\"dpufqsdt\":\"dataro\",\"xolmehquqi\":\"datazxj\",\"ojupenoupc\":\"datagibog\",\"esisdkcuhq\":\"datalxcwrszwa\"}}")
            .toObject(SnowflakeV2Source.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeV2Source model = new SnowflakeV2Source().withSourceRetryCount("datajlhn")
            .withSourceRetryWait("datauaeokympwquutl").withMaxConcurrentConnections("datafuzthszjy")
            .withDisableMetricsCollection("datahsliqeft").withQuery("datatetzvqtcesvcsby")
            .withExportSettings(new SnowflakeExportCopyCommand()
                .withAdditionalCopyOptions(mapOf("hm", "datagswduzpdnbzqwe")).withAdditionalFormatOptions(
                    mapOf("rqtm", "datahxadmauanx", "sh", "dataaerhx", "b", "databrkhjjbwelicr")));
        model = BinaryData.fromObject(model).toObject(SnowflakeV2Source.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
