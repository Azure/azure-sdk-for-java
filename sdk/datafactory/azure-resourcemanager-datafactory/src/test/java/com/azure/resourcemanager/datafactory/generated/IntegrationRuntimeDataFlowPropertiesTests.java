// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowComputeType;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeDataFlowPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeDataFlowProperties model = BinaryData.fromString(
            "{\"computeType\":\"General\",\"coreCount\":1598564613,\"timeToLive\":1271483795,\"cleanup\":false,\"customProperties\":[{\"name\":\"ebdltniui\",\"value\":\"erffhgvcym\"},{\"name\":\"oe\",\"value\":\"hggajfeudbo\"},{\"name\":\"olji\",\"value\":\"hhwlzihvccquajpo\"}],\"\":{\"szk\":\"datajxyotgvraxhntoiw\",\"sjwrretsluqfgksd\":\"datalk\",\"whdq\":\"dataimioixviobuwbnge\",\"zaffzqodokst\":\"datagqamhbmggnqxnex\"}}")
            .toObject(IntegrationRuntimeDataFlowProperties.class);
        Assertions.assertEquals(DataFlowComputeType.GENERAL, model.computeType());
        Assertions.assertEquals(1598564613, model.coreCount());
        Assertions.assertEquals(1271483795, model.timeToLive());
        Assertions.assertEquals(false, model.cleanup());
        Assertions.assertEquals("ebdltniui", model.customProperties().get(0).name());
        Assertions.assertEquals("erffhgvcym", model.customProperties().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeDataFlowProperties model = new IntegrationRuntimeDataFlowProperties()
            .withComputeType(DataFlowComputeType.GENERAL)
            .withCoreCount(1598564613)
            .withTimeToLive(1271483795)
            .withCleanup(false)
            .withCustomProperties(Arrays.asList(
                new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("ebdltniui")
                    .withValue("erffhgvcym"),
                new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("oe").withValue("hggajfeudbo"),
                new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("olji")
                    .withValue("hhwlzihvccquajpo")))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeDataFlowProperties.class);
        Assertions.assertEquals(DataFlowComputeType.GENERAL, model.computeType());
        Assertions.assertEquals(1598564613, model.coreCount());
        Assertions.assertEquals(1271483795, model.timeToLive());
        Assertions.assertEquals(false, model.cleanup());
        Assertions.assertEquals("ebdltniui", model.customProperties().get(0).name());
        Assertions.assertEquals("erffhgvcym", model.customProperties().get(0).value());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
