// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowComputeType;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeDataFlowPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeDataFlowProperties model = BinaryData.fromString(
            "{\"computeType\":\"General\",\"coreCount\":1079304457,\"timeToLive\":776293565,\"cleanup\":true,\"customProperties\":[{\"name\":\"mzsf\",\"value\":\"yyysqnwnl\"},{\"name\":\"zfjd\",\"value\":\"fthsydphdb\"},{\"name\":\"etfgkzqbvh\",\"value\":\"ulymk\"},{\"name\":\"s\",\"value\":\"h\"}],\"\":{\"biubzg\":\"datahaenpftkgmbmv\",\"rbusnaq\":\"datapsotbame\",\"erlurgipvnbxle\":\"datavruuhyncppmmwh\"}}")
            .toObject(IntegrationRuntimeDataFlowProperties.class);
        Assertions.assertEquals(DataFlowComputeType.GENERAL, model.computeType());
        Assertions.assertEquals(1079304457, model.coreCount());
        Assertions.assertEquals(776293565, model.timeToLive());
        Assertions.assertEquals(true, model.cleanup());
        Assertions.assertEquals("mzsf", model.customProperties().get(0).name());
        Assertions.assertEquals("yyysqnwnl", model.customProperties().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeDataFlowProperties model = new IntegrationRuntimeDataFlowProperties()
            .withComputeType(DataFlowComputeType.GENERAL)
            .withCoreCount(1079304457)
            .withTimeToLive(776293565)
            .withCleanup(true)
            .withCustomProperties(Arrays.asList(
                new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("mzsf").withValue("yyysqnwnl"),
                new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("zfjd").withValue("fthsydphdb"),
                new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("etfgkzqbvh")
                    .withValue("ulymk"),
                new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("s").withValue("h")))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeDataFlowProperties.class);
        Assertions.assertEquals(DataFlowComputeType.GENERAL, model.computeType());
        Assertions.assertEquals(1079304457, model.coreCount());
        Assertions.assertEquals(776293565, model.timeToLive());
        Assertions.assertEquals(true, model.cleanup());
        Assertions.assertEquals("mzsf", model.customProperties().get(0).name());
        Assertions.assertEquals("yyysqnwnl", model.customProperties().get(0).value());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
