// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowComputeType;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeDataFlowPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeDataFlowProperties model = BinaryData.fromString(
            "{\"computeType\":\"General\",\"coreCount\":1530390172,\"timeToLive\":595348439,\"cleanup\":false,\"customProperties\":[{\"name\":\"lxo\",\"value\":\"rkqvrv\"},{\"name\":\"ojcvzfc\",\"value\":\"mjpjakjdt\"}],\"\":{\"yxpmqd\":\"dataocgquqx\"}}")
            .toObject(IntegrationRuntimeDataFlowProperties.class);
        Assertions.assertEquals(DataFlowComputeType.GENERAL, model.computeType());
        Assertions.assertEquals(1530390172, model.coreCount());
        Assertions.assertEquals(595348439, model.timeToLive());
        Assertions.assertEquals(false, model.cleanup());
        Assertions.assertEquals("lxo", model.customProperties().get(0).name());
        Assertions.assertEquals("rkqvrv", model.customProperties().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeDataFlowProperties model
            = new IntegrationRuntimeDataFlowProperties().withComputeType(DataFlowComputeType.GENERAL)
                .withCoreCount(1530390172).withTimeToLive(595348439).withCleanup(false)
                .withCustomProperties(Arrays.asList(
                    new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("lxo").withValue("rkqvrv"),
                    new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("ojcvzfc")
                        .withValue("mjpjakjdt")))
                .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeDataFlowProperties.class);
        Assertions.assertEquals(DataFlowComputeType.GENERAL, model.computeType());
        Assertions.assertEquals(1530390172, model.coreCount());
        Assertions.assertEquals(595348439, model.timeToLive());
        Assertions.assertEquals(false, model.cleanup());
        Assertions.assertEquals("lxo", model.customProperties().get(0).name());
        Assertions.assertEquals("rkqvrv", model.customProperties().get(0).value());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
