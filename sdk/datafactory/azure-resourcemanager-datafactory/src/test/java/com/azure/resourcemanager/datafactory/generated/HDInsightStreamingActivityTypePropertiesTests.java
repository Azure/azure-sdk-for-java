// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightStreamingActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightStreamingActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightStreamingActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"wxcptxvxfwwvmygc\",\"parameters\":{\"rihcamg\":\"datatoiasz\",\"ttitebmnx\":\"dataytv\",\"outqebpuoycaw\":\"datamoadjooernzlzzmy\",\"ufdxpwj\":\"datatxqx\"}},{\"referenceName\":\"ajvskpbu\",\"parameters\":{\"tcuvwwfgjjcaa\":\"datacuk\"}},{\"referenceName\":\"cepp\",\"parameters\":{\"nlif\":\"datalyxpq\",\"liivyatyzwybgay\":\"datajymqw\",\"tlz\":\"datajphozymcypdbuoqn\",\"cgdk\":\"datagidgwscosmhgza\"}},{\"referenceName\":\"yavfc\",\"parameters\":{\"youdc\":\"datalfvsbaqdgzbjb\",\"mcumuomdlspsb\":\"datadlkucxtyufsouh\",\"oqiaflxox\":\"dataxpnyg\",\"fuyjoxgal\":\"datan\"}}],\"arguments\":[\"datalzuztdwx\",\"dataoa\"],\"getDebugInfo\":\"None\",\"mapper\":\"datap\",\"reducer\":\"datahpwwarz\",\"input\":\"datazbbwtagxhrir\",\"output\":\"datavj\",\"filePaths\":[\"datauk\"],\"fileLinkedService\":{\"referenceName\":\"xwlyjdbsxjxleqs\",\"parameters\":{\"g\":\"dataol\",\"myi\":\"dataellpkpfbr\",\"hmuvgy\":\"datandfrfhgowhnvc\"}},\"combiner\":\"dataohurkt\",\"commandEnvironment\":[\"datae\",\"datatyijlvc\",\"dataphnxxwble\"],\"defines\":{\"hjde\":\"datakwzbkhvls\",\"kihfxtbvhmsvc\":\"datawyqnluszilkrcpx\",\"trhwriihwxchy\":\"datace\"}}")
            .toObject(HDInsightStreamingActivityTypeProperties.class);
        Assertions.assertEquals("wxcptxvxfwwvmygc", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("xwlyjdbsxjxleqs", model.fileLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightStreamingActivityTypeProperties model = new HDInsightStreamingActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("wxcptxvxfwwvmygc")
                    .withParameters(mapOf("rihcamg", "datatoiasz", "ttitebmnx", "dataytv", "outqebpuoycaw",
                        "datamoadjooernzlzzmy", "ufdxpwj", "datatxqx")),
                new LinkedServiceReference().withReferenceName("ajvskpbu")
                    .withParameters(mapOf("tcuvwwfgjjcaa", "datacuk")),
                new LinkedServiceReference().withReferenceName("cepp")
                    .withParameters(mapOf("nlif", "datalyxpq", "liivyatyzwybgay", "datajymqw", "tlz",
                        "datajphozymcypdbuoqn", "cgdk", "datagidgwscosmhgza")),
                new LinkedServiceReference().withReferenceName("yavfc")
                    .withParameters(mapOf("youdc", "datalfvsbaqdgzbjb", "mcumuomdlspsb", "datadlkucxtyufsouh",
                        "oqiaflxox", "dataxpnyg", "fuyjoxgal", "datan"))))
            .withArguments(Arrays.asList("datalzuztdwx", "dataoa"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE).withMapper("datap").withReducer("datahpwwarz")
            .withInput("datazbbwtagxhrir").withOutput("datavj").withFilePaths(Arrays.asList("datauk"))
            .withFileLinkedService(new LinkedServiceReference().withReferenceName("xwlyjdbsxjxleqs")
                .withParameters(mapOf("g", "dataol", "myi", "dataellpkpfbr", "hmuvgy", "datandfrfhgowhnvc")))
            .withCombiner("dataohurkt").withCommandEnvironment(Arrays.asList("datae", "datatyijlvc", "dataphnxxwble"))
            .withDefines(
                mapOf("hjde", "datakwzbkhvls", "kihfxtbvhmsvc", "datawyqnluszilkrcpx", "trhwriihwxchy", "datace"));
        model = BinaryData.fromObject(model).toObject(HDInsightStreamingActivityTypeProperties.class);
        Assertions.assertEquals("wxcptxvxfwwvmygc", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("xwlyjdbsxjxleqs", model.fileLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
