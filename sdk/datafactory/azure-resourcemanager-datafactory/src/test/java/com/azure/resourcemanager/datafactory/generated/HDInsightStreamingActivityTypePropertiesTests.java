// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightStreamingActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightStreamingActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightStreamingActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"btvnedcclpbhntoi\",\"parameters\":{\"oxqkcayy\":\"dataerrieh\"}}],\"arguments\":[\"datallkyiqj\",\"dataxvxgrftidk\",\"dataotvhivvoczsrypfv\",\"dataiwjjqps\"],\"getDebugInfo\":\"Always\",\"mapper\":\"datakeygmqnuyusnhn\",\"reducer\":\"dataekhfdlbcucwfc\",\"input\":\"dataugtcccydldavozmi\",\"output\":\"datatkv\",\"filePaths\":[\"datapgllsrran\",\"dataxxwt\"],\"fileLinkedService\":{\"referenceName\":\"rohlkgzczjwiz\",\"parameters\":{\"benaahdjn\":\"datarkwyldttggcpqmkp\",\"tvpeirhstwpbvw\":\"datayc\",\"cqpqkpnvsuaizxdl\":\"dataqhpphjimo\",\"xotyjgx\":\"datajs\"}},\"combiner\":\"datafejiurldsft\",\"commandEnvironment\":[\"datacdqvunvnggqa\",\"dataforuwqbendzruu\",\"datacbsttjdioe\",\"dataifzqqsvofo\"],\"defines\":{\"uuzpiooacjxsof\":\"dataphwv\",\"oux\":\"datairitpqqpynrl\"}}")
            .toObject(HDInsightStreamingActivityTypeProperties.class);
        Assertions.assertEquals("btvnedcclpbhntoi", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("rohlkgzczjwiz", model.fileLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightStreamingActivityTypeProperties model = new HDInsightStreamingActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(new LinkedServiceReference().withReferenceName("btvnedcclpbhntoi")
                .withParameters(mapOf("oxqkcayy", "dataerrieh"))))
            .withArguments(Arrays.asList("datallkyiqj", "dataxvxgrftidk", "dataotvhivvoczsrypfv", "dataiwjjqps"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
            .withMapper("datakeygmqnuyusnhn")
            .withReducer("dataekhfdlbcucwfc")
            .withInput("dataugtcccydldavozmi")
            .withOutput("datatkv")
            .withFilePaths(Arrays.asList("datapgllsrran", "dataxxwt"))
            .withFileLinkedService(new LinkedServiceReference().withReferenceName("rohlkgzczjwiz")
                .withParameters(mapOf("benaahdjn", "datarkwyldttggcpqmkp", "tvpeirhstwpbvw", "datayc",
                    "cqpqkpnvsuaizxdl", "dataqhpphjimo", "xotyjgx", "datajs")))
            .withCombiner("datafejiurldsft")
            .withCommandEnvironment(
                Arrays.asList("datacdqvunvnggqa", "dataforuwqbendzruu", "datacbsttjdioe", "dataifzqqsvofo"))
            .withDefines(mapOf("uuzpiooacjxsof", "dataphwv", "oux", "datairitpqqpynrl"));
        model = BinaryData.fromObject(model).toObject(HDInsightStreamingActivityTypeProperties.class);
        Assertions.assertEquals("btvnedcclpbhntoi", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("rohlkgzczjwiz", model.fileLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
