// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightStreamingActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightStreamingActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightStreamingActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"storageLinkedServices\":[{\"referenceName\":\"immmmgbyn\",\"parameters\":{\"fqznvahpxdgyho\":\"datatdtv\"}},{\"referenceName\":\"x\",\"parameters\":{\"aszjrihca\":\"dataxvxfwwvmygcfazto\",\"xpmoadjooernzl\":\"datagjytvkttitebm\",\"ebpuoycawptxq\":\"datazmygout\"}},{\"referenceName\":\"pufdxpwjoajvsk\",\"parameters\":{\"cuk\":\"dataoc\"}},{\"referenceName\":\"tcuvwwfgjjcaa\",\"parameters\":{\"xpqxnlifhjymqwj\":\"datappwwil\"}}],\"arguments\":[\"datavyatyzwybgaycjph\",\"datazymcypdbuoqn\"],\"getDebugInfo\":\"None\",\"mapper\":\"datazngidgwsco\",\"reducer\":\"datamhgzapcgdk\",\"input\":\"datayavfc\",\"output\":\"dataohlfvsbaqdgzbjb\",\"filePaths\":[\"dataoudc\",\"datadlkucxtyufsouh\"],\"fileLinkedService\":{\"referenceName\":\"cumuo\",\"parameters\":{\"gro\":\"dataspsbgxpn\",\"yjox\":\"dataiaflxoxwndf\",\"ambzprhpwwarz\":\"dataalcyflzuztdwxr\"}},\"combiner\":\"databbwtagxhriru\",\"commandEnvironment\":[\"datazu\",\"datayxxwlyjdbsxjxl\",\"dataq\"],\"defines\":{\"pfbrsmy\":\"datarolagbellp\",\"hgowhnvcqhmuv\":\"datasndfr\",\"ktodeertyijlvc\":\"dataystohu\",\"bdkwzbkhvlsahj\":\"dataphnxxwble\"}}")
                .toObject(HDInsightStreamingActivityTypeProperties.class);
        Assertions.assertEquals("immmmgbyn", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("cumuo", model.fileLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightStreamingActivityTypeProperties model =
            new HDInsightStreamingActivityTypeProperties()
                .withStorageLinkedServices(
                    Arrays
                        .asList(
                            new LinkedServiceReference()
                                .withReferenceName("immmmgbyn")
                                .withParameters(mapOf("fqznvahpxdgyho", "datatdtv")),
                            new LinkedServiceReference()
                                .withReferenceName("x")
                                .withParameters(
                                    mapOf(
                                        "aszjrihca",
                                        "dataxvxfwwvmygcfazto",
                                        "xpmoadjooernzl",
                                        "datagjytvkttitebm",
                                        "ebpuoycawptxq",
                                        "datazmygout")),
                            new LinkedServiceReference()
                                .withReferenceName("pufdxpwjoajvsk")
                                .withParameters(mapOf("cuk", "dataoc")),
                            new LinkedServiceReference()
                                .withReferenceName("tcuvwwfgjjcaa")
                                .withParameters(mapOf("xpqxnlifhjymqwj", "datappwwil"))))
                .withArguments(Arrays.asList("datavyatyzwybgaycjph", "datazymcypdbuoqn"))
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
                .withMapper("datazngidgwsco")
                .withReducer("datamhgzapcgdk")
                .withInput("datayavfc")
                .withOutput("dataohlfvsbaqdgzbjb")
                .withFilePaths(Arrays.asList("dataoudc", "datadlkucxtyufsouh"))
                .withFileLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("cumuo")
                        .withParameters(
                            mapOf(
                                "gro",
                                "dataspsbgxpn",
                                "yjox",
                                "dataiaflxoxwndf",
                                "ambzprhpwwarz",
                                "dataalcyflzuztdwxr")))
                .withCombiner("databbwtagxhriru")
                .withCommandEnvironment(Arrays.asList("datazu", "datayxxwlyjdbsxjxl", "dataq"))
                .withDefines(
                    mapOf(
                        "pfbrsmy",
                        "datarolagbellp",
                        "hgowhnvcqhmuv",
                        "datasndfr",
                        "ktodeertyijlvc",
                        "dataystohu",
                        "bdkwzbkhvlsahj",
                        "dataphnxxwble"));
        model = BinaryData.fromObject(model).toObject(HDInsightStreamingActivityTypeProperties.class);
        Assertions.assertEquals("immmmgbyn", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("cumuo", model.fileLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
