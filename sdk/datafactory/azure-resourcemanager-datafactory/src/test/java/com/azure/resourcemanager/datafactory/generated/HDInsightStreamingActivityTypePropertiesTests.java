// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightStreamingActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightStreamingActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightStreamingActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"lbq\",\"parameters\":{\"wldv\":\"datamgefxkattpk\",\"tbjooqobpn\":\"datasigxakgo\",\"xvtgloifmlbhlimg\":\"datavnuwjrxbbxkhveq\"}},{\"referenceName\":\"imtzzyjhyiey\",\"parameters\":{\"lvd\":\"datafuxx\",\"nu\":\"datamums\",\"nvhrbfe\":\"datacnxrpstypxid\",\"y\":\"datafwrintaaft\"}},{\"referenceName\":\"e\",\"parameters\":{\"nbfoorgtxd\":\"datapxthsfuxhlgoexu\",\"oommqvzzoomwf\":\"dataewhbxvriplgk\",\"tpazljaj\":\"datapfh\"}},{\"referenceName\":\"qggwarbvbl\",\"parameters\":{\"jsipewifuj\":\"databjkqytodgisf\"}}],\"arguments\":[\"datajwktiyhiyk\",\"datatvaodif\"],\"getDebugInfo\":\"Always\",\"mapper\":\"dataafuftwopsjrqhg\",\"reducer\":\"datarxxhzwtr\",\"input\":\"datapwuxygpdmv\",\"output\":\"datahgbjukaswgvoa\",\"filePaths\":[\"datatdt\",\"dataloa\",\"datahhiyk\",\"datatjsebcuynqdl\"],\"fileLinkedService\":{\"referenceName\":\"tefdvjgbemrj\",\"parameters\":{\"r\":\"dataquxpd\"}},\"combiner\":\"datathyhbnoyex\",\"commandEnvironment\":[\"datadrzxobteklgi\",\"dataoiblaumoguzxwmw\",\"datajmtpgkybdktyvr\"],\"defines\":{\"npxa\":\"dataqbeqz\"}}")
            .toObject(HDInsightStreamingActivityTypeProperties.class);
        Assertions.assertEquals("lbq", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("tefdvjgbemrj", model.fileLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightStreamingActivityTypeProperties model = new HDInsightStreamingActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("lbq")
                    .withParameters(mapOf("wldv", "datamgefxkattpk", "tbjooqobpn", "datasigxakgo", "xvtgloifmlbhlimg",
                        "datavnuwjrxbbxkhveq")),
                new LinkedServiceReference().withReferenceName("imtzzyjhyiey")
                    .withParameters(mapOf("lvd", "datafuxx", "nu", "datamums", "nvhrbfe", "datacnxrpstypxid", "y",
                        "datafwrintaaft")),
                new LinkedServiceReference().withReferenceName("e")
                    .withParameters(mapOf("nbfoorgtxd", "datapxthsfuxhlgoexu", "oommqvzzoomwf", "dataewhbxvriplgk",
                        "tpazljaj", "datapfh")),
                new LinkedServiceReference().withReferenceName("qggwarbvbl")
                    .withParameters(mapOf("jsipewifuj", "databjkqytodgisf"))))
            .withArguments(Arrays.asList("datajwktiyhiyk", "datatvaodif"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
            .withMapper("dataafuftwopsjrqhg")
            .withReducer("datarxxhzwtr")
            .withInput("datapwuxygpdmv")
            .withOutput("datahgbjukaswgvoa")
            .withFilePaths(Arrays.asList("datatdt", "dataloa", "datahhiyk", "datatjsebcuynqdl"))
            .withFileLinkedService(
                new LinkedServiceReference().withReferenceName("tefdvjgbemrj").withParameters(mapOf("r", "dataquxpd")))
            .withCombiner("datathyhbnoyex")
            .withCommandEnvironment(Arrays.asList("datadrzxobteklgi", "dataoiblaumoguzxwmw", "datajmtpgkybdktyvr"))
            .withDefines(mapOf("npxa", "dataqbeqz"));
        model = BinaryData.fromObject(model).toObject(HDInsightStreamingActivityTypeProperties.class);
        Assertions.assertEquals("lbq", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("tefdvjgbemrj", model.fileLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
