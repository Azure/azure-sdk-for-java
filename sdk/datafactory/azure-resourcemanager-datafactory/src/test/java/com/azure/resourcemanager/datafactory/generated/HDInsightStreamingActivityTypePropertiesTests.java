// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightStreamingActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class HDInsightStreamingActivityTypePropertiesTests {
    @Test
    public void testDeserialize() {
        HDInsightStreamingActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"storageLinkedServices\":[{\"referenceName\":\"ycqsxr\",\"parameters\":{}},{\"referenceName\":\"ewuyqa\",\"parameters\":{}},{\"referenceName\":\"pjhgejkb\",\"parameters\":{}}],\"arguments\":[],\"getDebugInfo\":\"Always\",\"filePaths\":[],\"fileLinkedService\":{\"referenceName\":\"ooxaexbkh\",\"parameters\":{}},\"commandEnvironment\":[],\"defines\":{}}")
                .toObject(HDInsightStreamingActivityTypeProperties.class);
        Assertions.assertEquals("ycqsxr", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("ooxaexbkh", model.fileLinkedService().referenceName());
    }

    @Test
    public void testSerialize() {
        HDInsightStreamingActivityTypeProperties model =
            new HDInsightStreamingActivityTypeProperties()
                .withStorageLinkedServices(
                    Arrays
                        .asList(
                            new LinkedServiceReference().withReferenceName("ycqsxr").withParameters(mapOf()),
                            new LinkedServiceReference().withReferenceName("ewuyqa").withParameters(mapOf()),
                            new LinkedServiceReference().withReferenceName("pjhgejkb").withParameters(mapOf())))
                .withArguments(Arrays.asList())
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
                .withFilePaths(Arrays.asList())
                .withFileLinkedService(
                    new LinkedServiceReference().withReferenceName("ooxaexbkh").withParameters(mapOf()))
                .withCommandEnvironment(Arrays.asList())
                .withDefines(mapOf());
        model = BinaryData.fromObject(model).toObject(HDInsightStreamingActivityTypeProperties.class);
        Assertions.assertEquals("ycqsxr", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("ooxaexbkh", model.fileLinkedService().referenceName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
