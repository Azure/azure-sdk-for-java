// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightStreamingActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightStreamingActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightStreamingActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"u\",\"parameters\":{\"cjnfyubc\":\"dataiz\"}}],\"arguments\":[\"datafnqqnum\",\"datanavfpkleie\"],\"getDebugInfo\":\"Failure\",\"mapper\":\"datavbs\",\"reducer\":\"datalyoriad\",\"input\":\"datanbofeucctppbgzf\",\"output\":\"datauylsk\",\"filePaths\":[\"datavwdftrqso\"],\"fileLinkedService\":{\"referenceName\":\"surxvj\",\"parameters\":{\"nskcksfxtknywx\":\"datab\"}},\"combiner\":\"datae\",\"commandEnvironment\":[\"dataccbvchozkmi\",\"datayxdnugbisfnbt\",\"datadrkwridroidhbu\",\"datavki\"],\"defines\":{\"ddeahfgdjahnsmk\":\"datanfqnekpx\",\"ob\":\"datakhlqdxjdo\",\"aurviynt\":\"datazrgxn\",\"zoqtfbjk\":\"datablp\"}}")
            .toObject(HDInsightStreamingActivityTypeProperties.class);
        Assertions.assertEquals("u", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("surxvj", model.fileLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightStreamingActivityTypeProperties model = new HDInsightStreamingActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("u").withParameters(mapOf("cjnfyubc", "dataiz"))))
            .withArguments(Arrays.asList("datafnqqnum", "datanavfpkleie"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE)
            .withMapper("datavbs")
            .withReducer("datalyoriad")
            .withInput("datanbofeucctppbgzf")
            .withOutput("datauylsk")
            .withFilePaths(Arrays.asList("datavwdftrqso"))
            .withFileLinkedService(new LinkedServiceReference().withReferenceName("surxvj")
                .withParameters(mapOf("nskcksfxtknywx", "datab")))
            .withCombiner("datae")
            .withCommandEnvironment(
                Arrays.asList("dataccbvchozkmi", "datayxdnugbisfnbt", "datadrkwridroidhbu", "datavki"))
            .withDefines(mapOf("ddeahfgdjahnsmk", "datanfqnekpx", "ob", "datakhlqdxjdo", "aurviynt", "datazrgxn",
                "zoqtfbjk", "datablp"));
        model = BinaryData.fromObject(model).toObject(HDInsightStreamingActivityTypeProperties.class);
        Assertions.assertEquals("u", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("surxvj", model.fileLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
