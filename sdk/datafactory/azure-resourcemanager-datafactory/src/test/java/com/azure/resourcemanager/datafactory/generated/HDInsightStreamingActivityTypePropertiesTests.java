// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightStreamingActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightStreamingActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightStreamingActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"xqskem\",\"parameters\":{\"bticnidubo\":\"datajfmkwqp\"}},{\"referenceName\":\"mjiib\",\"parameters\":{\"fuiav\":\"dataalhawopti\",\"xsmapd\":\"dataap\"}},{\"referenceName\":\"mmwylrv\",\"parameters\":{\"mcbtumt\":\"dataelpuxhku\",\"hyqexujll\":\"datarcvo\"}},{\"referenceName\":\"wee\",\"parameters\":{\"gfwxthrcmgsimgo\":\"databsythycdckcpfom\",\"na\":\"dataclhjgckk\",\"nkeolorosahgcc\":\"dataenyehmwzgf\",\"i\":\"datazuapkhfhuuizyeyf\"}}],\"arguments\":[\"datayjffpuuyky\"],\"getDebugInfo\":\"Failure\",\"mapper\":\"dataneymlct\",\"reducer\":\"datansjcufijvaxuvazz\",\"input\":\"datatld\",\"output\":\"dataaxglxhbnqyewi\",\"filePaths\":[\"dataenhty\",\"datae\",\"datatvnedcclpb\"],\"fileLinkedService\":{\"referenceName\":\"to\",\"parameters\":{\"eho\":\"datauerr\"}},\"combiner\":\"dataqkcayyd\",\"commandEnvironment\":[\"datalkyiq\",\"datatxvxgrftid\"],\"defines\":{\"srypfviiwjjqps\":\"datatvhivvoc\",\"eygmqnuyu\":\"databx\",\"ekhfdlbcucwfc\":\"datanhn\",\"tkv\":\"dataugtcccydldavozmi\"}}")
            .toObject(HDInsightStreamingActivityTypeProperties.class);
        Assertions.assertEquals("xqskem", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("to", model.fileLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightStreamingActivityTypeProperties model = new HDInsightStreamingActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("xqskem")
                    .withParameters(mapOf("bticnidubo", "datajfmkwqp")),
                new LinkedServiceReference().withReferenceName("mjiib")
                    .withParameters(mapOf("fuiav", "dataalhawopti", "xsmapd", "dataap")),
                new LinkedServiceReference().withReferenceName("mmwylrv")
                    .withParameters(mapOf("mcbtumt", "dataelpuxhku", "hyqexujll", "datarcvo")),
                new LinkedServiceReference().withReferenceName("wee")
                    .withParameters(mapOf("gfwxthrcmgsimgo", "databsythycdckcpfom", "na", "dataclhjgckk",
                        "nkeolorosahgcc", "dataenyehmwzgf", "i", "datazuapkhfhuuizyeyf"))))
            .withArguments(Arrays.asList("datayjffpuuyky"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE)
            .withMapper("dataneymlct")
            .withReducer("datansjcufijvaxuvazz")
            .withInput("datatld")
            .withOutput("dataaxglxhbnqyewi")
            .withFilePaths(Arrays.asList("dataenhty", "datae", "datatvnedcclpb"))
            .withFileLinkedService(
                new LinkedServiceReference().withReferenceName("to").withParameters(mapOf("eho", "datauerr")))
            .withCombiner("dataqkcayyd")
            .withCommandEnvironment(Arrays.asList("datalkyiq", "datatxvxgrftid"))
            .withDefines(mapOf("srypfviiwjjqps", "datatvhivvoc", "eygmqnuyu", "databx", "ekhfdlbcucwfc", "datanhn",
                "tkv", "dataugtcccydldavozmi"));
        model = BinaryData.fromObject(model).toObject(HDInsightStreamingActivityTypeProperties.class);
        Assertions.assertEquals("xqskem", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("to", model.fileLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
